_RNvXs1n_Cs9EteCURj6Wn_9arbitraryTNtCs6Lc7YXa2Vl_12sparql_smith8VarOrIriNtBx_4VerbNtBx_17VarOrIriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionBv_EENtB6_9Arbitrary9arbitraryBx_:
  575|  16.1k|            fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  576|  16.1k|                Ok(($($xs::arbitrary(u)?,)* Arbitrary::arbitrary(u)?,))
  577|  16.1k|            }
_RNvXs1n_Cs9EteCURj6Wn_9arbitraryTNtCs6Lc7YXa2Vl_12sparql_smith3IriBv_NtBx_12IriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionBv_EENtB6_9Arbitrary9arbitraryBx_:
  575|  3.70k|            fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  576|  3.70k|                Ok(($($xs::arbitrary(u)?,)* Arbitrary::arbitrary(u)?,))
  577|  3.70k|            }
_RNvXsp_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith15PathAlternativeENtB5_9Arbitrary9arbitraryB14_:
  925|  22.4k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|  22.4k|        Arbitrary::arbitrary(u).map(Self::new)
  927|  22.4k|    }
_RNvXsp_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith12TriplesBlockENtB5_9Arbitrary9arbitraryB14_:
  925|     56|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|     56|        Arbitrary::arbitrary(u).map(Self::new)
  927|     56|    }
_RNvXsp_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith9SubSelectENtB5_9Arbitrary9arbitraryB14_:
  925|  3.18k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|  3.18k|        Arbitrary::arbitrary(u).map(Self::new)
  927|  3.18k|    }
_RNvXsp_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith14ObjectListPathENtB5_9Arbitrary9arbitraryB14_:
  925|  11.2k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|  11.2k|        Arbitrary::arbitrary(u).map(Self::new)
  927|  11.2k|    }
_RNvXsp_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith23ConditionalOrExpressionENtB5_9Arbitrary9arbitraryB14_:
  925|  8.21k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|  8.21k|        Arbitrary::arbitrary(u).map(Self::new)
  927|  8.21k|    }
_RNvXsp_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith13GraphNodePathENtB5_9Arbitrary9arbitraryB14_:
  925|  1.53k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|  1.53k|        Arbitrary::arbitrary(u).map(Self::new)
  927|  1.53k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionIBu_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith12TriplesBlockEEENtB5_9Arbitrary9arbitraryB1K_:
  531|  1.78k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  1.78k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|     90|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  1.69k|            None
  536|       |        })
  537|  1.78k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith12TriplesBlockEENtB5_9Arbitrary9arbitraryB1G_:
  531|     90|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|     90|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|     56|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|     34|            None
  536|       |        })
  537|     90|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith12HavingClauseENtB5_9Arbitrary9arbitraryB17_:
  531|  1.74k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  1.74k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|     58|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  1.69k|            None
  536|       |        })
  537|  1.74k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith3IriENtB5_9Arbitrary9arbitraryB17_:
  531|  6.71k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  6.71k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  6.16k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|    554|            None
  536|       |        })
  537|  6.71k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith7PathModENtB5_9Arbitrary9arbitraryB17_:
  531|  37.0k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  37.0k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  10.2k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  26.8k|            None
  536|       |        })
  537|  37.0k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith8VarOrIriENtB5_9Arbitrary9arbitraryB17_:
  531|  16.1k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  16.1k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  13.7k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  2.41k|            None
  536|       |        })
  537|  16.1k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith24PropertyListPathNotEmptyENtB5_9Arbitrary9arbitraryB17_:
  531|    674|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|    674|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|     32|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|    642|            None
  536|       |        })
  537|    674|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith9DataBlockENtB5_9Arbitrary9arbitraryB17_:
  531|  1.72k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  1.72k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|     74|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  1.64k|            None
  536|       |        })
  537|  1.72k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith11GroupClauseENtB5_9Arbitrary9arbitraryB17_:
  531|  1.79k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  1.79k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|    103|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  1.68k|            None
  536|       |        })
  537|  1.79k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith12TriplesBlockENtB5_9Arbitrary9arbitraryB17_:
  531|  4.54k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  4.54k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  1.73k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  2.81k|            None
  536|       |        })
  537|  4.54k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith23PropertyListPathElementENtB5_9Arbitrary9arbitraryB17_:
  531|    628|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|    628|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|    393|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|    235|            None
  536|       |        })
  537|    628|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith12SelectOptionENtB5_9Arbitrary9arbitraryB17_:
  531|  3.18k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  3.18k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  2.22k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|    962|            None
  536|       |        })
  537|  3.18k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith3VarENtB5_9Arbitrary9arbitraryB17_:
  531|      4|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|      4|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|      1|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|      3|            None
  536|       |        })
  537|      4|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith17GroupGraphPatternENtB5_9Arbitrary9arbitraryB12_:
  679|    137|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|    137|        u.arbitrary_iter()?.collect()
  681|    137|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith10ConstraintENtB5_9Arbitrary9arbitraryB12_:
  679|     32|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|     32|        u.arbitrary_iter()?.collect()
  681|     32|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith24ConditionalAndExpressionENtB5_9Arbitrary9arbitraryB12_:
  679|  4.45k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  4.45k|        u.arbitrary_iter()?.collect()
  681|  4.45k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith14GroupConditionENtB5_9Arbitrary9arbitraryB12_:
  679|     83|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|     83|        u.arbitrary_iter()?.collect()
  681|     83|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith20RelationalExpressionENtB5_9Arbitrary9arbitraryB12_:
  679|  5.89k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  5.89k|        u.arbitrary_iter()?.collect()
  681|  5.89k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecTNtCs6Lc7YXa2Vl_12sparql_smith8VarOrIriNtB13_4VerbNtB13_17VarOrIriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionB11_EEENtB5_9Arbitrary9arbitraryB13_:
  679|  6.39k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  6.39k|        u.arbitrary_iter()?.collect()
  681|  6.39k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith30GroupGraphPatternSubOtherBlockENtB5_9Arbitrary9arbitraryB12_:
  679|  3.55k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  3.55k|        u.arbitrary_iter()?.collect()
  681|  3.55k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith16PathEltOrInverseENtB5_9Arbitrary9arbitraryB12_:
  679|  26.3k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  26.3k|        u.arbitrary_iter()?.collect()
  681|  26.3k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith14DataBlockValueENtB5_9Arbitrary9arbitraryB12_:
  679|     50|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|     50|        u.arbitrary_iter()?.collect()
  681|     50|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith20PathOneInPropertySetENtB5_9Arbitrary9arbitraryB12_:
  679|  1.41k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  1.41k|        u.arbitrary_iter()?.collect()
  681|  1.41k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecTNtCs6Lc7YXa2Vl_12sparql_smith3IriB11_NtB13_12IriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionB11_EEENtB5_9Arbitrary9arbitraryB13_:
  679|    328|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|    328|        u.arbitrary_iter()?.collect()
  681|    328|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith23PropertyListPathElementEENtB5_9Arbitrary9arbitraryB1E_:
  679|  11.2k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  11.2k|        u.arbitrary_iter()?.collect()
  681|  11.2k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith12PathSequenceENtB5_9Arbitrary9arbitraryB12_:
  679|  24.6k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  24.6k|        u.arbitrary_iter()?.collect()
  681|  24.6k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith23ConditionalOrExpressionENtB5_9Arbitrary9arbitraryB12_:
  679|  6.81k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  6.81k|        u.arbitrary_iter()?.collect()
  681|  6.81k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith13GraphNodePathENtB5_9Arbitrary9arbitraryB12_:
  679|  13.1k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  13.1k|        u.arbitrary_iter()?.collect()
  681|  13.1k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith16SelectProjectionENtB5_9Arbitrary9arbitraryB12_:
  679|  1.18k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  1.18k|        u.arbitrary_iter()?.collect()
  681|  1.18k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith13UpdateVariantENtB5_9Arbitrary19arbitrary_take_restB12_:
  683|  3.56k|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
  684|  3.56k|        u.arbitrary_take_rest_iter()?.collect()
  685|  3.56k|    }
_RNvXsI_Cs9EteCURj6Wn_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|   251k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   251k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   251k|                    u.fill_buffer(&mut buf)?;
  312|   251k|                    let mut x: $unsigned = 0;
  313|   251k|                    for i in 0..mem::size_of::<$ty>() {
  314|   251k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   251k|                    }
  316|   251k|                    Ok(x as $ty)
  317|   251k|                }
_RNvXs_Cs9EteCURj6Wn_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|   251k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|   251k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|   251k|    }
_RNvXsK_Cs9EteCURj6Wn_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|   421k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   421k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   421k|                    u.fill_buffer(&mut buf)?;
  312|   421k|                    let mut x: $unsigned = 0;
  313|  1.68M|                    for i in 0..mem::size_of::<$ty>() {
  314|  1.68M|                        x |= buf[i] as $unsigned << (i * 8);
  315|  1.68M|                    }
  316|   421k|                    Ok(x as $ty)
  317|   421k|                }

_RNvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB2_12Unstructured3lenCs6Lc7YXa2Vl_12sparql_smith:
  108|   632k|    pub fn len(&self) -> usize {
  109|   632k|        self.data.len()
  110|   632k|    }
_RNvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs6Lc7YXa2Vl_12sparql_smith:
  132|   632k|    pub fn is_empty(&self) -> bool {
  133|   632k|        self.len() == 0
  134|   632k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith14GroupConditionENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|    317|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|    317|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|    317|        if keep_going {
  723|    257|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|     60|            None
  726|       |        }
  727|    317|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterTNtCs6Lc7YXa2Vl_12sparql_smith8VarOrIriNtB16_4VerbNtB16_17VarOrIriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionB14_EEENtNtNtNtB2l_4iter6traits8iterator8Iterator4nextB16_:
  720|  22.5k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  22.5k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  22.5k|        if keep_going {
  723|  16.1k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  6.39k|            None
  726|       |        }
  727|  22.5k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCs6Lc7YXa2Vl_12sparql_smith14DataBlockValueEB1c_:
  167|  4.76k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  4.76k|    where
  169|  4.76k|        A: Arbitrary<'a>,
  170|  4.76k|    {
  171|  4.76k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  4.76k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith12PathSequenceENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  26.3k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  26.3k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  26.3k|        if keep_going {
  723|  1.73k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  24.6k|            None
  726|       |        }
  727|  26.3k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith20RelationalExpressionENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  6.86k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  6.86k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  6.86k|        if keep_going {
  723|  2.31k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  4.54k|            None
  726|       |        }
  727|  6.86k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_loopNCNvXsG_Cs6Lc7YXa2Vl_12sparql_smithNtB1o_14InlineDataFullNtB5_9Arbitrary9arbitrary0EB1o_:
  692|    205|    pub fn arbitrary_loop(
  693|    205|        &mut self,
  694|    205|        min: Option<u32>,
  695|    205|        max: Option<u32>,
  696|    205|        mut f: impl FnMut(&mut Self) -> Result<ControlFlow<(), ()>>,
  697|    205|    ) -> Result<()> {
  698|    205|        let min = min.unwrap_or(0);
  699|    205|        let max = max.unwrap_or(u32::MAX);
  700|    205|
  701|    205|        for _ in 0..self.int_in_range(min..=max)? {
  702|    290|            match f(self)? {
  703|    290|                ControlFlow::Continue(_) => continue,
  704|      0|                ControlFlow::Break(_) => break,
  705|       |            }
  706|       |        }
  707|       |
  708|    205|        Ok(())
  709|    205|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith14DataBlockValueEB1i_:
  606|     50|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|     50|        &'b mut self,
  608|     50|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|     50|        Ok(ArbitraryIter {
  610|     50|            u: &mut *self,
  611|     50|            _marker: PhantomData,
  612|     50|        })
  613|     50|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCs6Lc7YXa2Vl_12sparql_smith13UpdateVariantEB1s_:
  620|  3.56k|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  621|  3.56k|        self,
  622|  3.56k|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  623|  3.56k|        Ok(ArbitraryTakeRestIter {
  624|  3.56k|            u: self,
  625|  3.56k|            _marker: PhantomData,
  626|  3.56k|        })
  627|  3.56k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterTNtCs6Lc7YXa2Vl_12sparql_smith3IriB1h_NtB1j_12IriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionB1h_EEEB1j_:
  606|    328|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    328|        &'b mut self,
  608|    328|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    328|        Ok(ArbitraryIter {
  610|    328|            u: &mut *self,
  611|    328|            _marker: PhantomData,
  612|    328|        })
  613|    328|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith23ConditionalOrExpressionEB1i_:
  606|  6.81k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  6.81k|        &'b mut self,
  608|  6.81k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  6.81k|        Ok(ArbitraryIter {
  610|  6.81k|            u: &mut *self,
  611|  6.81k|            _marker: PhantomData,
  612|  6.81k|        })
  613|  6.81k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith16SelectProjectionEB1i_:
  606|  1.18k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  1.18k|        &'b mut self,
  608|  1.18k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  1.18k|        Ok(ArbitraryIter {
  610|  1.18k|            u: &mut *self,
  611|  1.18k|            _marker: PhantomData,
  612|  1.18k|        })
  613|  1.18k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith17GroupGraphPatternEB1i_:
  606|    137|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    137|        &'b mut self,
  608|    137|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    137|        Ok(ArbitraryIter {
  610|    137|            u: &mut *self,
  611|    137|            _marker: PhantomData,
  612|    137|        })
  613|    137|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterTNtCs6Lc7YXa2Vl_12sparql_smith8VarOrIriNtB1j_4VerbNtB1j_17VarOrIriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionB1h_EEEB1j_:
  606|  6.39k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  6.39k|        &'b mut self,
  608|  6.39k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  6.39k|        Ok(ArbitraryIter {
  610|  6.39k|            u: &mut *self,
  611|  6.39k|            _marker: PhantomData,
  612|  6.39k|        })
  613|  6.39k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith16SelectProjectionENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  1.62k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  1.62k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  1.62k|        if keep_going {
  723|    506|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  1.12k|            None
  726|       |        }
  727|  1.62k|    }
_RNvXs0_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCs6Lc7YXa2Vl_12sparql_smith13UpdateVariantENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB1e_:
  738|  9.65k|    fn next(&mut self) -> Option<Result<ElementType>> {
  739|  9.65k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  740|  9.65k|        if keep_going {
  741|  6.89k|            Some(Arbitrary::arbitrary(&mut self.u))
  742|       |        } else {
  743|  2.76k|            None
  744|       |        }
  745|  9.65k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith30GroupGraphPatternSubOtherBlockEB1i_:
  606|  3.55k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  3.55k|        &'b mut self,
  608|  3.55k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  3.55k|        Ok(ArbitraryIter {
  610|  3.55k|            u: &mut *self,
  611|  3.55k|            _marker: PhantomData,
  612|  3.55k|        })
  613|  3.55k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith13GraphNodePathENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  18.6k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  18.6k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  18.6k|        if keep_going {
  723|  5.47k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  13.1k|            None
  726|       |        }
  727|  18.6k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith17GroupGraphPatternENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|    157|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|    157|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|    157|        if keep_going {
  723|     23|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|    134|            None
  726|       |        }
  727|    157|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith23ConditionalOrExpressionENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  8.26k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  8.26k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  8.26k|        if keep_going {
  723|  4.79k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  3.47k|            None
  726|       |        }
  727|  8.26k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs6Lc7YXa2Vl_12sparql_smith:
  302|   137k|    fn int_in_range_impl<T>(
  303|   137k|        range: ops::RangeInclusive<T>,
  304|   137k|        mut bytes: impl Iterator<Item = u8>,
  305|   137k|    ) -> Result<(T, usize)>
  306|   137k|    where
  307|   137k|        T: Int,
  308|   137k|    {
  309|   137k|        let start = *range.start();
  310|   137k|        let end = *range.end();
  311|   137k|        assert!(
  312|   137k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|   137k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|   137k|        }
  321|   137k|
  322|   137k|        // From here on out we work with the unsigned representation. All of the
  323|   137k|        // operations performed below work out just as well whether or not `T`
  324|   137k|        // is a signed or unsigned integer.
  325|   137k|        let start = start.to_unsigned();
  326|   137k|        let end = end.to_unsigned();
  327|   137k|
  328|   137k|        let delta = end.wrapping_sub(start);
  329|      0|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|   137k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|   137k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|   270k|        while (bytes_consumed < mem::size_of::<T>())
  339|   137k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|   137k|            let byte = match bytes.next() {
  342|  4.91k|                None => break,
  343|   132k|                Some(b) => b,
  344|   132k|            };
  345|   132k|            bytes_consumed += 1;
  346|   132k|
  347|   132k|            // Combine this byte into our arbitrary integer, but avoid
  348|   132k|            // overflowing the shift for `u8` and `i8`.
  349|   132k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|   132k|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|   137k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|   137k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|   137k|        let result = start.wrapping_add(offset);
  365|   137k|
  366|   137k|        // And convert back to our maybe-signed representation.
  367|   137k|        let result = T::from_unsigned(result);
  368|      0|        debug_assert!(*range.start() <= result);
  369|      0|        debug_assert!(result <= *range.end());
  370|       |
  371|   137k|        Ok((result, bytes_consumed))
  372|   137k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith16PathEltOrInverseEB1i_:
  606|  26.3k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  26.3k|        &'b mut self,
  608|  26.3k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  26.3k|        Ok(ArbitraryIter {
  610|  26.3k|            u: &mut *self,
  611|  26.3k|            _marker: PhantomData,
  612|  26.3k|        })
  613|  26.3k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith16PathEltOrInverseENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  37.0k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  37.0k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  37.0k|        if keep_going {
  723|  10.6k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  26.3k|            None
  726|       |        }
  727|  37.0k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith24ConditionalAndExpressionENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  4.54k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  4.54k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  4.54k|        if keep_going {
  723|    225|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  4.32k|            None
  726|       |        }
  727|  4.54k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterTNtCs6Lc7YXa2Vl_12sparql_smith3IriB14_NtB16_12IriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionB14_EEENtNtNtNtB24_4iter6traits8iterator8Iterator4nextB16_:
  720|  4.03k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  4.03k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  4.03k|        if keep_going {
  723|  3.70k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|    328|            None
  726|       |        }
  727|  4.03k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangehECs6Lc7YXa2Vl_12sparql_smith:
  293|   137k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|   137k|    where
  295|   137k|        T: Int,
  296|   137k|    {
  297|   137k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|   137k|        self.data = &self.data[bytes_consumed..];
  299|   137k|        Ok(result)
  300|   137k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith20PathOneInPropertySetEB1i_:
  606|  1.41k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  1.41k|        &'b mut self,
  608|  1.41k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  1.41k|        Ok(ArbitraryIter {
  610|  1.41k|            u: &mut *self,
  611|  1.41k|            _marker: PhantomData,
  612|  1.41k|        })
  613|  1.41k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith20PathOneInPropertySetENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  8.63k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  8.63k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  8.63k|        if keep_going {
  723|  7.21k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  1.41k|            None
  726|       |        }
  727|  8.63k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith3VarENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  3.71k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  3.71k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  3.71k|        if keep_going {
  723|  3.51k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|    205|            None
  726|       |        }
  727|  3.71k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith10ConstraintENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|     33|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|     33|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|     33|        if keep_going {
  723|      2|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|     31|            None
  726|       |        }
  727|     33|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_loopNCNCNvXsG_Cs6Lc7YXa2Vl_12sparql_smithNtB1q_14InlineDataFullNtB5_9Arbitrary9arbitrary00EB1q_:
  692|    290|    pub fn arbitrary_loop(
  693|    290|        &mut self,
  694|    290|        min: Option<u32>,
  695|    290|        max: Option<u32>,
  696|    290|        mut f: impl FnMut(&mut Self) -> Result<ControlFlow<(), ()>>,
  697|    290|    ) -> Result<()> {
  698|    290|        let min = min.unwrap_or(0);
  699|    290|        let max = max.unwrap_or(u32::MAX);
  700|    290|
  701|    290|        for _ in 0..self.int_in_range(min..=max)? {
  702|  4.76k|            match f(self)? {
  703|  4.76k|                ControlFlow::Continue(_) => continue,
  704|      0|                ControlFlow::Break(_) => break,
  705|       |            }
  706|       |        }
  707|       |
  708|    290|        Ok(())
  709|    290|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith23PropertyListPathElementEEB1U_:
  606|  11.2k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  11.2k|        &'b mut self,
  608|  11.2k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  11.2k|        Ok(ArbitraryIter {
  610|  11.2k|            u: &mut *self,
  611|  11.2k|            _marker: PhantomData,
  612|  11.2k|        })
  613|  11.2k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith12PathSequenceEB1i_:
  606|  24.6k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  24.6k|        &'b mut self,
  608|  24.6k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  24.6k|        Ok(ArbitraryIter {
  610|  24.6k|            u: &mut *self,
  611|  24.6k|            _marker: PhantomData,
  612|  24.6k|        })
  613|  24.6k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith10ConstraintEB1i_:
  606|     32|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|     32|        &'b mut self,
  608|     32|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|     32|        Ok(ArbitraryIter {
  610|     32|            u: &mut *self,
  611|     32|            _marker: PhantomData,
  612|     32|        })
  613|     32|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith13GraphNodePathEB1i_:
  606|  13.1k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  13.1k|        &'b mut self,
  608|  13.1k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  13.1k|        Ok(ArbitraryIter {
  610|  13.1k|            u: &mut *self,
  611|  13.1k|            _marker: PhantomData,
  612|  13.1k|        })
  613|  13.1k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith24ConditionalAndExpressionEB1i_:
  606|  4.45k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  4.45k|        &'b mut self,
  608|  4.45k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  4.45k|        Ok(ArbitraryIter {
  610|  4.45k|            u: &mut *self,
  611|  4.45k|            _marker: PhantomData,
  612|  4.45k|        })
  613|  4.45k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith23PropertyListPathElementEENtNtNtNtB18_4iter6traits8iterator8Iterator4nextB1H_:
  720|  11.8k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  11.8k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  11.8k|        if keep_going {
  723|    628|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  11.2k|            None
  726|       |        }
  727|  11.8k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith14GroupConditionEB1i_:
  606|     83|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|     83|        &'b mut self,
  608|     83|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|     83|        Ok(ArbitraryIter {
  610|     83|            u: &mut *self,
  611|     83|            _marker: PhantomData,
  612|     83|        })
  613|     83|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith20RelationalExpressionEB1i_:
  606|  5.89k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  5.89k|        &'b mut self,
  608|  5.89k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  5.89k|        Ok(ArbitraryIter {
  610|  5.89k|            u: &mut *self,
  611|  5.89k|            _marker: PhantomData,
  612|  5.89k|        })
  613|  5.89k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith14DataBlockValueENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|    464|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|    464|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|    464|        if keep_going {
  723|    414|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|     50|            None
  726|       |        }
  727|    464|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured6chooseReECs6Lc7YXa2Vl_12sparql_smith:
  408|  11.1k|    pub fn choose<'b, T>(&mut self, choices: &'b [T]) -> Result<&'b T> {
  409|  11.1k|        let idx = self.choose_index(choices.len())?;
  410|  11.1k|        Ok(&choices[idx])
  411|  11.1k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith30GroupGraphPatternSubOtherBlockENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  4.54k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  4.54k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  4.54k|        if keep_going {
  723|  1.10k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  3.44k|            None
  726|       |        }
  727|  4.54k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith3VarEB1i_:
  606|    205|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    205|        &'b mut self,
  608|    205|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    205|        Ok(ArbitraryIter {
  610|    205|            u: &mut *self,
  611|    205|            _marker: PhantomData,
  612|    205|        })
  613|    205|    }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  829|   137k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|   137k|                    <$ty>::checked_add(self, rhs)
  831|   137k|                }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int11to_unsigned:
  841|  22.2k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  22.2k|                    self as $unsigned_ty
  843|  22.2k|                }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int10from_usize:
  825|   137k|                fn from_usize(u: usize) -> Self {
  826|   137k|                    u as Self
  827|   137k|                }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int10from_usize:
  825|    401|                fn from_usize(u: usize) -> Self {
  826|    401|                    u as Self
  827|    401|                }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangemEB5_:
  293|    495|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    495|    where
  295|    495|        T: Int,
  296|    495|    {
  297|    495|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    495|        self.data = &self.data[bytes_consumed..];
  299|    495|        Ok(result)
  300|    495|    }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int12wrapping_sub:
  837|  11.1k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  11.1k|                    <$ty>::wrapping_sub(self, rhs)
  839|  11.1k|                }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int7from_u8:
  821|   132k|                fn from_u8(b: u8) -> Self {
  822|   132k|                    b as Self
  823|   132k|                }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int13from_unsigned:
  845|   137k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|   137k|                    unsigned as Self
  847|   137k|                }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int12wrapping_add:
  833|  11.1k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  11.1k|                    <$ty>::wrapping_add(self, rhs)
  835|  11.1k|                }
_RNvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB2_12Unstructured12choose_index:
  450|  11.1k|    pub fn choose_index(&mut self, len: usize) -> Result<usize> {
  451|  11.1k|        if len == 0 {
  452|      0|            return Err(Error::EmptyChoose);
  453|  11.1k|        }
  454|  11.1k|        let idx = self.int_in_range(0..=len - 1)?;
  455|  11.1k|        Ok(idx)
  456|  11.1k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|  11.1k|    fn int_in_range_impl<T>(
  303|  11.1k|        range: ops::RangeInclusive<T>,
  304|  11.1k|        mut bytes: impl Iterator<Item = u8>,
  305|  11.1k|    ) -> Result<(T, usize)>
  306|  11.1k|    where
  307|  11.1k|        T: Int,
  308|  11.1k|    {
  309|  11.1k|        let start = *range.start();
  310|  11.1k|        let end = *range.end();
  311|  11.1k|        assert!(
  312|  11.1k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  11.1k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  11.1k|        }
  321|  11.1k|
  322|  11.1k|        // From here on out we work with the unsigned representation. All of the
  323|  11.1k|        // operations performed below work out just as well whether or not `T`
  324|  11.1k|        // is a signed or unsigned integer.
  325|  11.1k|        let start = start.to_unsigned();
  326|  11.1k|        let end = end.to_unsigned();
  327|  11.1k|
  328|  11.1k|        let delta = end.wrapping_sub(start);
  329|      0|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  11.1k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  11.1k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  22.2k|        while (bytes_consumed < mem::size_of::<T>())
  339|  22.2k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  11.1k|            let byte = match bytes.next() {
  342|      1|                None => break,
  343|  11.1k|                Some(b) => b,
  344|  11.1k|            };
  345|  11.1k|            bytes_consumed += 1;
  346|  11.1k|
  347|  11.1k|            // Combine this byte into our arbitrary integer, but avoid
  348|  11.1k|            // overflowing the shift for `u8` and `i8`.
  349|  11.1k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  11.1k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  11.1k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  11.1k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  11.1k|        let result = start.wrapping_add(offset);
  365|  11.1k|
  366|  11.1k|        // And convert back to our maybe-signed representation.
  367|  11.1k|        let result = T::from_unsigned(result);
  368|      0|        debug_assert!(*range.start() <= result);
  369|      0|        debug_assert!(result <= *range.end());
  370|       |
  371|  11.1k|        Ok((result, bytes_consumed))
  372|  11.1k|    }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int11checked_add:
  829|  11.1k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  11.1k|                    <$ty>::checked_add(self, rhs)
  831|  11.1k|                }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybEB5_:
  167|   169k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|   169k|    where
  169|   169k|        A: Arbitrary<'a>,
  170|   169k|    {
  171|   169k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|   169k|    }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int10from_usize:
  825|  22.2k|                fn from_usize(u: usize) -> Self {
  826|  22.2k|                    u as Self
  827|  22.2k|                }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int12wrapping_add:
  833|   137k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|   137k|                    <$ty>::wrapping_add(self, rhs)
  835|   137k|                }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int7from_u8:
  821|  11.1k|                fn from_u8(b: u8) -> Self {
  822|  11.1k|                    b as Self
  823|  11.1k|                }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int13from_unsigned:
  845|  11.1k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  11.1k|                    unsigned as Self
  847|  11.1k|                }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int12wrapping_add:
  833|    205|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    205|                    <$ty>::wrapping_add(self, rhs)
  835|    205|                }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int11checked_add:
  829|    205|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|    205|                    <$ty>::checked_add(self, rhs)
  831|    205|                }
_RNvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|   672k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|   672k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|   672k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|   672k|        for byte in buffer[n..].iter_mut() {
  525|   122k|            *byte = 0;
  526|   122k|        }
  527|   672k|        self.data = &self.data[n..];
  528|   672k|        Ok(())
  529|   672k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejEB5_:
  293|  11.1k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  11.1k|    where
  295|  11.1k|        T: Int,
  296|  11.1k|    {
  297|  11.1k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  11.1k|        self.data = &self.data[bytes_consumed..];
  299|  11.1k|        Ok(result)
  300|  11.1k|    }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int7from_u8:
  821|    196|                fn from_u8(b: u8) -> Self {
  822|    196|                    b as Self
  823|    196|                }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int13from_unsigned:
  845|    205|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    205|                    unsigned as Self
  847|    205|                }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int11to_unsigned:
  841|   274k|                fn to_unsigned(self) -> Self::Unsigned {
  842|   274k|                    self as $unsigned_ty
  843|   274k|                }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int11to_unsigned:
  841|    410|                fn to_unsigned(self) -> Self::Unsigned {
  842|    410|                    self as $unsigned_ty
  843|    410|                }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implmINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    495|    fn int_in_range_impl<T>(
  303|    495|        range: ops::RangeInclusive<T>,
  304|    495|        mut bytes: impl Iterator<Item = u8>,
  305|    495|    ) -> Result<(T, usize)>
  306|    495|    where
  307|    495|        T: Int,
  308|    495|    {
  309|    495|        let start = *range.start();
  310|    495|        let end = *range.end();
  311|    495|        assert!(
  312|    495|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    495|        if start == end {
  319|    290|            return Ok((start, 0));
  320|    205|        }
  321|    205|
  322|    205|        // From here on out we work with the unsigned representation. All of the
  323|    205|        // operations performed below work out just as well whether or not `T`
  324|    205|        // is a signed or unsigned integer.
  325|    205|        let start = start.to_unsigned();
  326|    205|        let end = end.to_unsigned();
  327|    205|
  328|    205|        let delta = end.wrapping_sub(start);
  329|      0|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    205|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    205|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    401|        while (bytes_consumed < mem::size_of::<T>())
  339|    401|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    205|            let byte = match bytes.next() {
  342|      9|                None => break,
  343|    196|                Some(b) => b,
  344|    196|            };
  345|    196|            bytes_consumed += 1;
  346|    196|
  347|    196|            // Combine this byte into our arbitrary integer, but avoid
  348|    196|            // overflowing the shift for `u8` and `i8`.
  349|    196|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    196|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    205|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    205|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    205|        let result = start.wrapping_add(offset);
  365|    205|
  366|    205|        // And convert back to our maybe-signed representation.
  367|    205|        let result = T::from_unsigned(result);
  368|      0|        debug_assert!(*range.start() <= result);
  369|      0|        debug_assert!(result <= *range.end());
  370|       |
  371|    205|        Ok((result, bytes_consumed))
  372|    495|    }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int12wrapping_sub:
  837|   137k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|   137k|                    <$ty>::wrapping_sub(self, rhs)
  839|   137k|                }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int12wrapping_sub:
  837|    205|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    205|                    <$ty>::wrapping_sub(self, rhs)
  839|    205|                }
_RNvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|  3.56k|    pub fn new(data: &'a [u8]) -> Self {
   86|  3.56k|        Unstructured { data }
   87|  3.56k|    }

_RNCINvMs_NtCslKxfh8zXfdl_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMNtCslKxfh8zXfdl_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|     20|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|     20|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|     20|        let mut val = self.0.load(Relaxed);
   37|     20|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|     19|        }
   41|     20|        val
   42|     20|    }
_RINvMs_NtCslKxfh8zXfdl_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|     20|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|     20|        self.0.unsync_init(|| init() as usize) != 0
   55|     20|    }

_RNvCslKxfh8zXfdl_9getrandom9getrandomCsfyBLlmIaPdg_9rand_core:
  376|     20|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  377|     20|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  378|     20|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  379|     20|    // `dest`.
  380|     20|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  381|     20|    Ok(())
  382|     20|}
_RNvCslKxfh8zXfdl_9getrandom16getrandom_uninitCsfyBLlmIaPdg_9rand_core:
  406|     20|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  407|     20|    if !dest.is_empty() {
  408|     20|        imp::getrandom_inner(dest)?;
  409|      0|    }
  410|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  411|       |    // since it returned `Ok`.
  412|     20|    Ok(unsafe { slice_assume_init_mut(dest) })
  413|     20|}

_RNvNtCslKxfh8zXfdl_9getrandom3imp22is_getrandom_available:
   19|      1|fn is_getrandom_available() -> bool {
   20|      1|    if getrandom_syscall(&mut []) < 0 {
   21|      0|        match last_os_error().raw_os_error() {
   22|      0|            Some(libc::ENOSYS) => false, // No kernel support
   23|       |            // The fallback on EPERM is intentionally not done on Android since this workaround
   24|       |            // seems to be needed only for specific Linux-based products that aren't based
   25|       |            // on Android. See https://github.com/rust-random/getrandom/issues/229.
   26|       |            #[cfg(target_os = "linux")]
   27|      0|            Some(libc::EPERM) => false, // Blocked by seccomp
   28|      0|            _ => true,
   29|       |        }
   30|       |    } else {
   31|      1|        true
   32|       |    }
   33|      1|}
_RNvNtCslKxfh8zXfdl_9getrandom3imp15getrandom_inner:
    9|     20|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|     20|    // getrandom(2) was introduced in Linux 3.17
   11|     20|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|     20|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|     20|        sys_fill_exact(dest, getrandom_syscall)
   14|       |    } else {
   15|      0|        use_file::getrandom_inner(dest)
   16|       |    }
   17|     20|}

_RINvNtCslKxfh8zXfdl_9getrandom4util21slice_assume_init_muthECsfyBLlmIaPdg_9rand_core:
    8|     20|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|     20|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|     20|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|     20|}
_RINvNtCslKxfh8zXfdl_9getrandom4util19slice_as_uninit_muthECsfyBLlmIaPdg_9rand_core:
   32|     20|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|     20|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|     20|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|     20|}

_RINvNtCslKxfh8zXfdl_9getrandom9util_libc14sys_fill_exactNvB2_17getrandom_syscallEB4_:
   59|     20|pub fn sys_fill_exact(
   60|     20|    mut buf: &mut [MaybeUninit<u8>],
   61|     20|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   62|     20|) -> Result<(), Error> {
   63|     40|    while !buf.is_empty() {
   64|     20|        let res = sys_fill(buf);
   65|     20|        match res {
   66|     20|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   67|       |            -1 => {
   68|      0|                let err = last_os_error();
   69|      0|                // We should try again if the call was interrupted.
   70|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   71|      0|                    return Err(err);
   72|      0|                }
   73|       |            }
   74|       |            // Negative return codes not equal to -1 should be impossible.
   75|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   76|       |            // should be an infinite stream of random bytes.
   77|      0|            _ => return Err(Error::UNEXPECTED),
   78|       |        }
   79|       |    }
   80|     20|    Ok(())
   81|     20|}
_RNvNtCslKxfh8zXfdl_9getrandom9util_libc17getrandom_syscall:
  157|     21|pub fn getrandom_syscall(buf: &mut [MaybeUninit<u8>]) -> libc::ssize_t {
  158|     21|    unsafe {
  159|     21|        libc::syscall(
  160|     21|            libc::SYS_getrandom,
  161|     21|            buf.as_mut_ptr() as *mut libc::c_void,
  162|     21|            buf.len(),
  163|     21|            0,
  164|     21|        ) as libc::ssize_t
  165|     21|    }
  166|     21|}

rust_fuzzer_test_input:
  259|  3.56k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  3.56k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  3.56k|
  262|  3.56k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  3.56k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  3.56k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  3.56k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  3.56k|                // get to longer inputs that actually lead to interesting executions
  267|  3.56k|                // quicker.
  268|  3.56k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      4|                    return -1;
  270|  3.56k|                }
  271|  3.56k|
  272|  3.56k|                let mut u = Unstructured::new(bytes);
  273|  3.56k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  3.56k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  3.56k|                }
  291|       |
  292|  3.56k|                let data = match data {
  293|  2.76k|                    Ok(d) => d,
  294|    802|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  2.76k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  2.76k|                result.to_libfuzzer_code()
  299|  3.56k|            }
_RNvNvCs6R6jWqmh3zm_18sparql_update_eval1__19___libfuzzer_sys_run:
  303|  2.76k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|       |                $body
  305|  2.76k|            }
_RNvXCs4JyNK9ak0xV_13libfuzzer_sysNtB2_6CorpusINtNtCs9nhK3FOW46N_4core7convert4FromuE4from:
   30|  2.76k|    fn from(_: ()) -> Self {
   31|  2.76k|        Self::Keep
   32|  2.76k|    }
LLVMFuzzerTestOneInput:
   58|  3.56k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  3.56k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  3.56k|    });
   63|  3.56k|
   64|  3.56k|    match test_input {
   65|  3.56k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  3.56k|}
_RNvMs_Cs4JyNK9ak0xV_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|  2.76k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  2.76k|        match self {
   42|  2.76k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  2.76k|    }
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs4JyNK9ak0xV_13libfuzzer_sys15test_input_wrap0B3_:
   59|  3.56k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  3.56k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  3.56k|        rust_fuzzer_test_input(data_slice)
   62|  3.56k|    });

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCs4JyNK9ak0xV_13libfuzzer_sys:
   49|  3.56k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  3.56k|        // An `Acquire` load is enough because that makes all the initialization
   51|  3.56k|        // operations visible to us, and, this being a fast path, weaker
   52|  3.56k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  3.56k|        // `SeqCst` operations on the slow path.
   54|  3.56k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  3.56k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCs4JyNK9ak0xV_13libfuzzer_sys:
  963|  3.56k|        pub fn get(&self) -> Option<&T> {
  964|  3.56k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  3.56k|                None
  969|       |            }
  970|  3.56k|        }

_RNvXsE_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCs2RvTzHk1J7L_5oxrdf:
  558|  2.06k|#[derive(Default)]
_RNvXs_NvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB4_5StateNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs2RvTzHk1J7L_5oxrdf:
  636|  2.06k|    #[derive(PartialEq, Eq)]
_RNvCs87w0kKV82sz_10oxilangtag13is_alphabeticCs2RvTzHk1J7L_5oxrdf:
  871|  2.06k|fn is_alphabetic(s: &str) -> bool {
  872|  2.06k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|  2.06k|}
_RNvCs87w0kKV82sz_10oxilangtag12to_lowercaseCs2RvTzHk1J7L_5oxrdf:
  903|  2.06k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|  2.06k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|  2.06k|}
_RNvXsw_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCs2RvTzHk1J7L_5oxrdf:
  862|  4.12k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|  4.12k|        let tag = self.split.next()?;
  864|  2.06k|        let tag_end = self.position + tag.len();
  865|  2.06k|        self.position = tag_end + 1;
  866|  2.06k|        Some((tag, tag_end))
  867|  4.12k|    }
_RNvMsv_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIterator3newCs2RvTzHk1J7L_5oxrdf:
  850|  2.06k|    fn new(input: &'a str) -> Self {
  851|  2.06k|        Self {
  852|  2.06k|            split: input.split('-'),
  853|  2.06k|            position: 0,
  854|  2.06k|        }
  855|  2.06k|    }
_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECs2RvTzHk1J7L_5oxrdf:
  571|  2.06k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECs2RvTzHk1J7L_5oxrdf:
  632|  2.06k|fn parse_langtag(
  633|  2.06k|    input: &str,
  634|  2.06k|    output: &mut impl OutputBuffer,
  635|  2.06k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|  2.06k|    #[derive(PartialEq, Eq)]
  637|  2.06k|    enum State {
  638|  2.06k|        Start,
  639|  2.06k|        AfterLanguage,
  640|  2.06k|        AfterExtLang,
  641|  2.06k|        AfterScript,
  642|  2.06k|        AfterRegion,
  643|  2.06k|        InExtension { expected: bool },
  644|  2.06k|        InPrivateUse { expected: bool },
  645|  2.06k|    }
  646|  2.06k|
  647|  2.06k|    let mut state = State::Start;
  648|  2.06k|    let mut language_end = 0;
  649|  2.06k|    let mut extlang_end = 0;
  650|  2.06k|    let mut script_end = 0;
  651|  2.06k|    let mut region_end = 0;
  652|  2.06k|    let mut variant_end = 0;
  653|  2.06k|    let mut extension_end = 0;
  654|  2.06k|    let mut extlangs_count = 0;
  655|  2.06k|    for (subtag, end) in SubTagIterator::new(input) {
  656|  2.06k|        if subtag.is_empty() {
  657|      0|            return Err(LanguageTagParseError {
  658|      0|                kind: TagParseErrorKind::EmptySubtag,
  659|      0|            });
  660|  2.06k|        }
  661|  2.06k|        if subtag.len() > 8 {
  662|      0|            return Err(LanguageTagParseError {
  663|      0|                kind: TagParseErrorKind::SubtagTooLong,
  664|      0|            });
  665|  2.06k|        }
  666|  2.06k|        if state == State::Start {
  667|       |            // Primary language
  668|  2.06k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|      0|                return Err(LanguageTagParseError {
  670|      0|                    kind: TagParseErrorKind::InvalidLanguage,
  671|      0|                });
  672|  2.06k|            }
  673|  2.06k|            language_end = end;
  674|  2.06k|            output.extend(to_lowercase(subtag));
  675|  2.06k|            if subtag.len() < 4 {
  676|  2.06k|                // extlangs are only allowed for short language tags
  677|  2.06k|                state = State::AfterLanguage;
  678|  2.06k|            } else {
  679|      0|                state = State::AfterExtLang;
  680|      0|            }
  681|      0|        } else if let State::InPrivateUse { .. } = state {
  682|      0|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|      0|            }
  687|      0|            output.push('-');
  688|      0|            output.extend(to_lowercase(subtag));
  689|      0|            state = State::InPrivateUse { expected: false };
  690|      0|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|      0|            if let State::InExtension { expected: true } = state {
  693|      0|                return Err(LanguageTagParseError {
  694|      0|                    kind: TagParseErrorKind::EmptyExtension,
  695|      0|                });
  696|      0|            }
  697|      0|            output.push('-');
  698|      0|            output.push('x');
  699|      0|            state = State::InPrivateUse { expected: true };
  700|      0|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|      0|            if let State::InExtension { expected: true } = state {
  703|      0|                return Err(LanguageTagParseError {
  704|      0|                    kind: TagParseErrorKind::EmptyExtension,
  705|      0|                });
  706|      0|            }
  707|      0|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|      0|            output.push('-');
  709|      0|            output.push(extension_tag);
  710|      0|            state = State::InExtension { expected: true };
  711|      0|        } else if let State::InExtension { .. } = state {
  712|      0|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|      0|            }
  717|      0|            extension_end = end;
  718|      0|            output.push('-');
  719|      0|            output.extend(to_lowercase(subtag));
  720|      0|            state = State::InExtension { expected: false };
  721|      0|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|      0|            extlangs_count += 1;
  723|      0|            if extlangs_count > 3 {
  724|      0|                return Err(LanguageTagParseError {
  725|      0|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|      0|                });
  727|      0|            }
  728|      0|            // valid extlangs
  729|      0|            extlang_end = end;
  730|      0|            output.push('-');
  731|      0|            output.extend(to_lowercase(subtag));
  732|      0|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|      0|            && subtag.len() == 4
  734|      0|            && is_alphabetic(subtag)
  735|      0|        {
  736|      0|            // Script
  737|      0|            script_end = end;
  738|      0|            output.push('-');
  739|      0|            output.extend(to_uppercase_first(subtag));
  740|      0|            state = State::AfterScript;
  741|      0|        } else if (state == State::AfterLanguage
  742|      0|            || state == State::AfterExtLang
  743|      0|            || state == State::AfterScript)
  744|      0|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|      0|                || subtag.len() == 3 && is_numeric(subtag))
  746|      0|        {
  747|      0|            // Region
  748|      0|            region_end = end;
  749|      0|            output.push('-');
  750|      0|            output.extend(to_uppercase(subtag));
  751|      0|            state = State::AfterRegion;
  752|      0|        } else if (state == State::AfterLanguage
  753|      0|            || state == State::AfterExtLang
  754|      0|            || state == State::AfterScript
  755|      0|            || state == State::AfterRegion)
  756|      0|            && is_alphanumeric(subtag)
  757|      0|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|      0|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|      0|        {
  760|      0|            // Variant
  761|      0|            variant_end = end;
  762|      0|            output.push('-');
  763|      0|            output.extend(to_lowercase(subtag));
  764|      0|            state = State::AfterRegion;
  765|      0|        } else {
  766|      0|            return Err(LanguageTagParseError {
  767|      0|                kind: TagParseErrorKind::InvalidSubtag,
  768|      0|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|  2.06k|    if let State::InExtension { expected: true } = state {
  774|      0|        return Err(LanguageTagParseError {
  775|      0|            kind: TagParseErrorKind::EmptyExtension,
  776|      0|        });
  777|  2.06k|    }
  778|  2.06k|    if let State::InPrivateUse { expected: true } = state {
  779|      0|        return Err(LanguageTagParseError {
  780|      0|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|      0|        });
  782|  2.06k|    }
  783|  2.06k|
  784|  2.06k|    //We make sure we have not skipped anyone
  785|  2.06k|    if extlang_end < language_end {
  786|  2.06k|        extlang_end = language_end;
  787|  2.06k|    }
  788|  2.06k|    if script_end < extlang_end {
  789|  2.06k|        script_end = extlang_end;
  790|  2.06k|    }
  791|  2.06k|    if region_end < script_end {
  792|  2.06k|        region_end = script_end;
  793|  2.06k|    }
  794|  2.06k|    if variant_end < region_end {
  795|  2.06k|        variant_end = region_end;
  796|  2.06k|    }
  797|  2.06k|    if extension_end < variant_end {
  798|  2.06k|        extension_end = variant_end;
  799|  2.06k|    }
  800|       |
  801|  2.06k|    Ok(TagElementsPositions {
  802|  2.06k|        language_end,
  803|  2.06k|        extlang_end,
  804|  2.06k|        script_end,
  805|  2.06k|        region_end,
  806|  2.06k|        variant_end,
  807|  2.06k|        extension_end,
  808|  2.06k|    })
  809|  2.06k|}
_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCs2RvTzHk1J7L_5oxrdf:
   62|  2.06k|    pub fn into_inner(self) -> T {
   63|  2.06k|        self.tag
   64|  2.06k|    }
_RINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECs2RvTzHk1J7L_5oxrdf:
  587|  2.06k|fn parse_language_tag(
  588|  2.06k|    input: &str,
  589|  2.06k|    output: &mut impl OutputBuffer,
  590|  2.06k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|  2.06k|    if let Some(tag) = GRANDFATHEREDS
  593|  2.06k|        .iter()
  594|  2.06k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|  2.06k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|      0|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|      0|        } else if input.len() == 2 {
  612|      0|            Err(LanguageTagParseError {
  613|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      0|            })
  615|       |        } else {
  616|      0|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|      0|            Ok(TagElementsPositions {
  618|      0|                language_end: input.len(),
  619|      0|                extlang_end: input.len(),
  620|      0|                script_end: input.len(),
  621|      0|                region_end: input.len(),
  622|      0|                variant_end: input.len(),
  623|      0|                extension_end: input.len(),
  624|      0|            })
  625|       |        }
  626|       |    } else {
  627|  2.06k|        parse_langtag(input, output)
  628|       |    }
  629|  2.06k|}
_RNCINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0Cs2RvTzHk1J7L_5oxrdf:
  594|  53.6k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCs2RvTzHk1J7L_5oxrdf:
   49|  2.06k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|  2.06k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|  2.06k|        Ok(Self { tag, positions })
   52|  2.06k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag13is_alphabetic0B3_:
  872|  4.12k|    s.chars().all(|x| x.is_ascii_alphabetic())

_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCs2RvTzHk1J7L_5oxrdf:
 1156|   171k|    fn starts_with(&self, c: char) -> bool {
 1157|   171k|        self.value.as_str().starts_with(c)
 1158|   171k|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCs2RvTzHk1J7L_5oxrdf:
 1065|  57.0k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCs2RvTzHk1J7L_5oxrdf:
 1092|   228k|    fn len(&self) -> usize {
 1093|   228k|        self.len
 1094|   228k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCs2RvTzHk1J7L_5oxrdf:
 1072|  1.77M|    fn push(&mut self, c: char) {
 1073|  1.77M|        self.len += c.len_utf8();
 1074|  1.77M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCs2RvTzHk1J7L_5oxrdf:
 1097|   114k|    fn as_str(&self) -> &str {
 1098|   114k|        ""
 1099|   114k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCs2RvTzHk1J7L_5oxrdf:
 1087|  57.0k|    fn truncate(&mut self, new_len: usize) {
 1088|  57.0k|        self.len = new_len;
 1089|  57.0k|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCs2RvTzHk1J7L_5oxrdf:
 1584|  1.31M|fn is_url_code_point(c: char) -> bool {
 1585|  1.31M|    matches!(c,
 1586|  1.14M|        'a'..='z'
 1587|    856|        | 'A'..='Z'
 1588|  58.1k|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|      0|        | '\u{A0}'..='\u{D7FF}'
 1609|      0|        | '\u{F900}'..='\u{FDCF}'
 1610|      0|        | '\u{FDF0}'..='\u{FFEF}'
 1611|      0|        | '\u{10000}'..='\u{1FFFD}'
 1612|      0|        | '\u{20000}'..='\u{2FFFD}'
 1613|      0|        | '\u{30000}'..='\u{3FFFD}'
 1614|      0|        | '\u{40000}'..='\u{4FFFD}'
 1615|      0|        | '\u{50000}'..='\u{5FFFD}'
 1616|      0|        | '\u{60000}'..='\u{6FFFD}'
 1617|      0|        | '\u{70000}'..='\u{7FFFD}'
 1618|      0|        | '\u{80000}'..='\u{8FFFD}'
 1619|      0|        | '\u{90000}'..='\u{9FFFD}'
 1620|      0|        | '\u{A0000}'..='\u{AFFFD}'
 1621|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1622|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1623|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1624|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  1.31M|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCs2RvTzHk1J7L_5oxrdf:
 1141|  1.88M|    fn next(&mut self) -> Option<char> {
 1142|  1.88M|        if let Some(head) = self.value.next() {
 1143|  1.82M|            self.position += head.len_utf8();
 1144|  1.82M|            Some(head)
 1145|       |        } else {
 1146|  57.0k|            None
 1147|       |        }
 1148|  1.88M|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCs2RvTzHk1J7L_5oxrdf:
 1151|  57.0k|    fn front(&self) -> Option<char> {
 1152|  57.0k|        self.value.clone().next()
 1153|  57.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCs2RvTzHk1J7L_5oxrdf:
 1468|  57.0k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|   116k|        loop {
 1470|   116k|            let c = self.input.next();
 1471|   116k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  57.2k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  57.2k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  57.2k|                    } else if c == Some('/') {
 1481|    214|                        self.output.push('/');
 1482|  57.0k|                    }
 1483|       |
 1484|  57.2k|                    if c == Some('?') {
 1485|      0|                        self.output_positions.path_end = self.output.len();
 1486|      0|                        self.output.push('?');
 1487|      0|                        return self.parse_query();
 1488|  57.2k|                    } else if c == Some('#') {
 1489|    214|                        self.output_positions.path_end = self.output.len();
 1490|    214|                        self.output_positions.query_end = self.output.len();
 1491|    214|                        self.output.push('#');
 1492|    214|                        return self.parse_fragment();
 1493|  57.0k|                    } else if c.is_none() {
 1494|  56.8k|                        self.output_positions.path_end = self.output.len();
 1495|  56.8k|                        self.output_positions.query_end = self.output.len();
 1496|  56.8k|                        return Ok(());
 1497|    214|                    }
 1498|       |                }
 1499|  59.5k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  57.0k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCs2RvTzHk1J7L_5oxrdf:
  185|  57.0k|    pub fn into_inner(self) -> T {
  186|  57.0k|        self.iri
  187|  57.0k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCs2RvTzHk1J7L_5oxrdf:
   58|  57.0k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  57.0k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  57.0k|        Ok(Self { iri, positions })
   61|  57.0k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCs2RvTzHk1J7L_5oxrdf:
  556|  57.0k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  57.0k|        IriRef::parse(iri)?.try_into()
  558|  57.0k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE11is_absoluteCs2RvTzHk1J7L_5oxrdf:
  199|  57.0k|    pub fn is_absolute(&self) -> bool {
  200|  57.0k|        self.positions.scheme_end != 0
  201|  57.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCs2RvTzHk1J7L_5oxrdf:
 1245|  57.0k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  57.0k|        if self.input.starts_with('/') {
 1247|  57.0k|            self.input.next();
 1248|  57.0k|            self.output.push('/');
 1249|  57.0k|            self.parse_authority()
 1250|       |        } else {
 1251|      0|            self.output_positions.authority_end = self.output.len() - 1;
 1252|      0|            self.parse_path()
 1253|       |        }
 1254|  57.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCs2RvTzHk1J7L_5oxrdf:
 1439|  57.0k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  57.0k|        match c {
 1441|       |            None => {
 1442|      0|                self.output_positions.path_end = self.output.len();
 1443|      0|                self.output_positions.query_end = self.output.len();
 1444|      0|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|      0|                self.output_positions.path_end = self.output.len();
 1448|      0|                self.output.push('?');
 1449|      0|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|      0|                self.output_positions.path_end = self.output.len();
 1453|      0|                self.output_positions.query_end = self.output.len();
 1454|      0|                self.output.push('#');
 1455|      0|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  57.0k|                self.output.push('/');
 1459|  57.0k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  57.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCs2RvTzHk1J7L_5oxrdf:
 1174|  57.0k|    fn parse(
 1175|  57.0k|        iri: &'a str,
 1176|  57.0k|        base: Option<IriRef<&'a str>>,
 1177|  57.0k|        output: &'a mut O,
 1178|  57.0k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  57.0k|        let mut parser = Self {
 1180|  57.0k|            iri,
 1181|  57.0k|            base,
 1182|  57.0k|            input: ParserInput {
 1183|  57.0k|                value: iri.chars(),
 1184|  57.0k|                position: 0,
 1185|  57.0k|            },
 1186|  57.0k|            output,
 1187|  57.0k|            output_positions: IriElementsPositions {
 1188|  57.0k|                scheme_end: 0,
 1189|  57.0k|                authority_end: 0,
 1190|  57.0k|                path_end: 0,
 1191|  57.0k|                query_end: 0,
 1192|  57.0k|            },
 1193|  57.0k|            input_scheme_end: 0,
 1194|  57.0k|        };
 1195|  57.0k|        parser.parse_scheme_start()?;
 1196|  57.0k|        Ok(parser.output_positions)
 1197|  57.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCs2RvTzHk1J7L_5oxrdf:
 1335|  57.0k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|   684k|        loop {
 1338|   684k|            let c = self.input.next();
 1339|   684k|            match c {
 1340|       |                Some('@') => {
 1341|      0|                    self.output.push('@');
 1342|      0|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  57.0k|                    self.input = ParserInput {
 1346|  57.0k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  57.0k|                        position: self.input_scheme_end + 2,
 1348|  57.0k|                    };
 1349|  57.0k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  57.0k|                    return self.parse_host();
 1351|       |                }
 1352|   627k|                Some(c) => {
 1353|   627k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  57.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCs2RvTzHk1J7L_5oxrdf:
 1518|    214|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|  1.49k|        while let Some(c) = self.input.next() {
 1520|  1.28k|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|    214|        Ok(())
 1523|    214|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCs2RvTzHk1J7L_5oxrdf:
  968|  57.0k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  57.0k|        if iri.is_absolute() {
  970|  57.0k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|  57.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCs2RvTzHk1J7L_5oxrdf:
 1213|  57.0k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   285k|        loop {
 1215|   285k|            let c = self.input.next();
 1216|   285k|            match c {
 1217|   285k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   228k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  57.0k|                    self.output.push(':');
 1222|  57.0k|                    self.output_positions.scheme_end = self.output.len();
 1223|  57.0k|                    self.input_scheme_end = self.input.position;
 1224|  57.0k|                    return if self.input.starts_with('/') {
 1225|  57.0k|                        self.input.next();
 1226|  57.0k|                        self.output.push('/');
 1227|  57.0k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|      0|                        self.output_positions.authority_end = self.output.len();
 1230|      0|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  57.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCs2RvTzHk1J7L_5oxrdf:
 1534|  1.31M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  1.31M|        if UNCHECKED || is_url_code_point(c) {
 1536|  1.31M|            self.output.push(c);
 1537|  1.31M|            Ok(())
 1538|      0|        } else if c == '%' {
 1539|      0|            self.read_echar()
 1540|       |        } else {
 1541|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  1.31M|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCs2RvTzHk1J7L_5oxrdf:
  665|  57.0k|    pub fn into_inner(self) -> T {
  666|  57.0k|        self.0.into_inner()
  667|  57.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCs2RvTzHk1J7L_5oxrdf:
 1199|  57.0k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  57.0k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  57.0k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|  57.0k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCs2RvTzHk1J7L_5oxrdf:
 1359|  57.0k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  57.0k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|      0|            let start_position = self.input.position;
 1363|      0|            while let Some(c) = self.input.next() {
 1364|      0|                self.output.push(c);
 1365|      0|                if c == ']' {
 1366|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|      0|                    if !UNCHECKED {
 1368|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|      0|                    }
 1372|       |
 1373|      0|                    let c = self.input.next();
 1374|      0|                    return match c {
 1375|       |                        Some(':') => {
 1376|      0|                            self.output.push(':');
 1377|      0|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|      0|                            self.output_positions.authority_end = self.output.len();
 1381|      0|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|      0|                }
 1393|       |            }
 1394|      0|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|   684k|            loop {
 1404|   684k|                let c = self.input.next();
 1405|   684k|                match c {
 1406|       |                    Some(':') => {
 1407|      0|                        self.output.push(':');
 1408|      0|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  57.0k|                        self.output_positions.authority_end = self.output.len();
 1412|  57.0k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|   627k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  57.0k|    }

_RNvMs2_NtCs4RBLVWBtRKn_11peg_runtime5errorNtB5_10ErrorState12mark_failure:
  117|  6.67M|    pub fn mark_failure(&mut self, pos: usize, expected: &'static str) -> RuleResult<()> {
  118|  6.67M|        if self.suppress_fail == 0 {
  119|  4.01M|            if self.reparsing_on_error {
  120|   468k|                self.mark_failure_slow_path(pos, expected);
  121|  3.54M|            } else if pos > self.max_err_pos {
  122|   414k|                self.max_err_pos = pos;
  123|  3.13M|            }
  124|  2.65M|        }
  125|  6.67M|        RuleResult::Failed
  126|  6.67M|    }
_RINvMs2_NtCs4RBLVWBtRKn_11peg_runtime5errorNtB6_10ErrorState16into_parse_erroreECsBlCKulpTva_9spargebra:
  128|    226|    pub fn into_parse_error<I: Parse + ?Sized>(self, input: &I) -> ParseError<I::PositionRepr> {
  129|    226|        ParseError {
  130|    226|            location: Parse::position_repr(input, self.max_err_pos.into()),
  131|    226|            expected: self.expected,
  132|    226|        }
  133|    226|    }
_RNvMs2_NtCs4RBLVWBtRKn_11peg_runtime5errorNtB5_10ErrorState3new:
   91|  2.76k|    pub fn new(initial_pos: usize) -> Self {
   92|  2.76k|        ErrorState {
   93|  2.76k|            max_err_pos: initial_pos,
   94|  2.76k|            suppress_fail: 0,
   95|  2.76k|            reparsing_on_error: false,
   96|  2.76k|            expected: ExpectedSet {
   97|  2.76k|                expected: BTreeSet::new(),
   98|  2.76k|            },
   99|  2.76k|        }
  100|  2.76k|    }
_RNvMs2_NtCs4RBLVWBtRKn_11peg_runtime5errorNtB5_10ErrorState17reparse_for_error:
  103|    226|    pub fn reparse_for_error(&mut self) {
  104|    226|        self.suppress_fail = 0;
  105|    226|        self.reparsing_on_error = true;
  106|    226|    }
_RNvMs2_NtCs4RBLVWBtRKn_11peg_runtime5errorNtB5_10ErrorState22mark_failure_slow_path:
  109|   468k|    pub fn mark_failure_slow_path(&mut self, pos: usize, expected: &'static str) {
  110|   468k|        if pos == self.max_err_pos {
  111|  2.17k|            self.expected.expected.insert(expected);
  112|   466k|        }
  113|   468k|    }

_RNvXs2_NtCs4RBLVWBtRKn_11peg_runtime3streNtB7_10ParseSlice11parse_sliceCsBlCKulpTva_9spargebra:
   76|   693k|    fn parse_slice(&'input self, p1: usize, p2: usize) -> &'input str {
   77|   693k|        &self[p1..p2]
   78|   693k|    }
_RNvXs1_NtCs4RBLVWBtRKn_11peg_runtime3streNtB7_12ParseLiteral20parse_string_literalCsBlCKulpTva_9spargebra:
   63|  2.98M|    fn parse_string_literal(&self, pos: usize, literal: &str) -> RuleResult<()> {
   64|  2.98M|        let l = literal.len();
   65|  2.98M|        if self.len() >= pos + l && &self.as_bytes()[pos..pos + l] == literal.as_bytes() {
   66|   442k|            RuleResult::Matched(pos + l, ())
   67|       |        } else {
   68|  2.53M|            RuleResult::Failed
   69|       |        }
   70|  2.98M|    }
_RNvXs_NtCs4RBLVWBtRKn_11peg_runtime3streNtB6_5Parse5startCsBlCKulpTva_9spargebra:
   28|  5.74k|    fn start(&self) -> usize {
   29|  5.74k|        0
   30|  5.74k|    }
_RNvXs_NtCs4RBLVWBtRKn_11peg_runtime3streNtB6_5Parse6is_eofCsBlCKulpTva_9spargebra:
   33|  2.98k|    fn is_eof(&self, pos: usize) -> bool {
   34|  2.98k|        pos >= self.len()
   35|  2.98k|    }
_RNvXs0_NtCs4RBLVWBtRKn_11peg_runtime3streNtB7_9ParseElem10parse_elemCsBlCKulpTva_9spargebra:
   53|  7.92M|    fn parse_elem(&'input self, pos: usize) -> RuleResult<char> {
   54|  7.92M|        match self[pos..].chars().next() {
   55|  7.86M|            Some(c) => RuleResult::Matched(pos + c.len_utf8(), c),
   56|  60.6k|            None => RuleResult::Failed,
   57|       |        }
   58|  7.92M|    }
_RNCNvXs_NtCs4RBLVWBtRKn_11peg_runtime3streNtB8_5Parse13position_repr0B8_:
   39|   186k|        let line = before.as_bytes().iter().filter(|&&c| c == b'\n').count() + 1;
_RNCNvXs_NtCs4RBLVWBtRKn_11peg_runtime3streNtB8_5Parse13position_reprs_0B8_:
   40|   186k|        let column = before.chars().rev().take_while(|&c| c != '\n').count() + 1;
_RNvXs_NtCs4RBLVWBtRKn_11peg_runtime3streNtB6_5Parse13position_repr:
   37|    226|    fn position_repr(&self, pos: usize) -> LineCol {
   38|    226|        let before = &self[..pos];
   39|    226|        let line = before.as_bytes().iter().filter(|&&c| c == b'\n').count() + 1;
   40|    226|        let column = before.chars().rev().take_while(|&c| c != '\n').count() + 1;
   41|    226|        LineCol {
   42|    226|            line,
   43|    226|            column,
   44|    226|            offset: pos,
   45|    226|        }
   46|    226|    }

_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24Cs8nJLOd1PHax_11rand_chacha:
   42|  60.3k|        fn $fn(self) -> Self {
   43|  60.3k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  60.3k|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16Cs8nJLOd1PHax_11rand_chacha:
   42|  60.3k|        fn $fn(self) -> Self {
   43|  60.3k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  60.3k|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25Cs8nJLOd1PHax_11rand_chacha:
   42|  60.3k|        fn $fn(self) -> Self {
   43|  60.3k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  60.3k|        }
_RNvMNtCsf8HyAzZvOrI_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCs8nJLOd1PHax_11rand_chacha:
   13|   689k|    pub fn new(xs: [W; 2]) -> Self {
   14|   689k|        x2(xs, PhantomData)
   15|   689k|    }
_RNvXsM_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCs8nJLOd1PHax_11rand_chacha:
   32|   241k|            fn $fn_assign(&mut self, rhs: Self) {
   33|   241k|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|   241k|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|   241k|            }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230Cs8nJLOd1PHax_11rand_chacha:
  208|  60.3k|    fn shuffle_lane_words1230(self) -> Self {
  209|  60.3k|        Self::new([
  210|  60.3k|            self.0[0].shuffle_lane_words1230(),
  211|  60.3k|            self.0[1].shuffle_lane_words1230(),
  212|  60.3k|        ])
  213|  60.3k|    }
_RNvXsG_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCs8nJLOd1PHax_11rand_chacha:
   22|   241k|            fn $fn(self, rhs: Self) -> Self::Output {
   23|   241k|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|   241k|            }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301Cs8nJLOd1PHax_11rand_chacha:
  201|  60.3k|    fn shuffle_lane_words2301(self) -> Self {
  202|  60.3k|        Self::new([
  203|  60.3k|            self.0[0].shuffle_lane_words2301(),
  204|  60.3k|            self.0[1].shuffle_lane_words2301(),
  205|  60.3k|        ])
  206|  60.3k|    }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012Cs8nJLOd1PHax_11rand_chacha:
  215|  60.3k|    fn shuffle_lane_words3012(self) -> Self {
  216|  60.3k|        Self::new([
  217|  60.3k|            self.0[0].shuffle_lane_words3012(),
  218|  60.3k|            self.0[1].shuffle_lane_words3012(),
  219|  60.3k|        ])
  220|  60.3k|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20Cs8nJLOd1PHax_11rand_chacha:
   42|  60.3k|        fn $fn(self) -> Self {
   43|  60.3k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  60.3k|        }

_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECs8nJLOd1PHax_11rand_chacha:
  251|  5.03k|    fn vec<V, A>(self, a: A) -> V
  252|  5.03k|    where
  253|  5.03k|        V: MultiLane<A>,
  254|  5.03k|    {
  255|  5.03k|        V::from_lanes(a)
  256|  5.03k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECs8nJLOd1PHax_11rand_chacha:
  259|     40|    fn read_le<V>(self, input: &[u8]) -> V
  260|     40|    where
  261|     40|        V: StoreBytes,
  262|     40|    {
  263|     40|        unsafe { V::unsafe_read_le(input) }
  264|     40|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECs8nJLOd1PHax_11rand_chacha:
  246|  45.2k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  45.2k|        unsafe { V::unpack(s) }
  248|  45.2k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECs8nJLOd1PHax_11rand_chacha:
  246|  5.03k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  5.03k|        unsafe { V::unpack(s) }
  248|  5.03k|    }

_RNvNvNtCs8nJLOd1PHax_11rand_chacha4guts11init_chacha8impl_avx:
  338|     20|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|     20|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|     20|            }
_RNvNtCs8nJLOd1PHax_11rand_chacha4guts11init_chacha:
  333|     20|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|     20|            #[inline(always)]
  335|     20|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|     20|            use std::arch::x86_64::*;
  337|     20|            #[target_feature(enable = "avx")]
  338|     20|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|     20|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|     20|            }
  341|     20|            #[target_feature(enable = "sse2")]
  342|     20|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|     20|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|     20|            }
  345|     20|            unsafe {
  346|     20|                if is_x86_feature_detected!("avx") {
  347|     20|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|     20|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCs8nJLOd1PHax_11rand_chacha:
   92|  5.03k|    unsafe fn instance() -> Self {
   93|  5.03k|        Avx2Machine(PhantomData)
   94|  5.03k|    }
_RNvXNtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCs8nJLOd1PHax_11rand_chacha:
   64|     20|    unsafe fn instance() -> Self {
   65|     20|        SseMachine(PhantomData)
   66|     20|    }
_RNvNtCs8nJLOd1PHax_11rand_chacha4guts11refill_wide:
  250|  5.03k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  5.03k|            #[inline(always)]
  252|  5.03k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  5.03k|            use std::arch::x86_64::*;
  254|  5.03k|            #[target_feature(enable = "avx2")]
  255|  5.03k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  5.03k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  5.03k|                _mm256_zeroupper();
  258|  5.03k|                ret
  259|  5.03k|            }
  260|  5.03k|            #[target_feature(enable = "avx")]
  261|  5.03k|            #[target_feature(enable = "sse4.1")]
  262|  5.03k|            #[target_feature(enable = "ssse3")]
  263|  5.03k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  5.03k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  5.03k|                _mm256_zeroupper();
  266|  5.03k|                ret
  267|  5.03k|            }
  268|  5.03k|            #[target_feature(enable = "sse4.1")]
  269|  5.03k|            #[target_feature(enable = "ssse3")]
  270|  5.03k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  5.03k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  5.03k|            }
  273|  5.03k|            #[target_feature(enable = "ssse3")]
  274|  5.03k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  5.03k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  5.03k|            }
  277|  5.03k|            #[target_feature(enable = "sse2")]
  278|  5.03k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  5.03k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  5.03k|            }
  281|  5.03k|            unsafe {
  282|  5.03k|                if is_x86_feature_detected!("avx2") {
  283|  5.03k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|  5.03k|        }
_RNvNvNtCs8nJLOd1PHax_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  5.03k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  5.03k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  5.03k|                _mm256_zeroupper();
  258|  5.03k|                ret
  259|  5.03k|            }
_RNvXs2_NtCsf8HyAzZvOrI_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromAmj4_E4from:
  130|     20|    fn from(u32x4: [u32; 4]) -> Self {
  131|     20|        vec128_storage { u32x4 }
  132|     20|    }

_RNvXs0_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCs8nJLOd1PHax_11rand_chacha:
 1402|  10.0k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  10.0k|            Self::new(p.avx)
 1404|  10.0k|        }
_RNvXsq_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCs8nJLOd1PHax_11rand_chacha:
 1527|   483k|                fn $assign_fn(&mut self, rhs: Self) {
 1528|   483k|                    *self = self.$bin_fn(rhs);
 1529|   483k|                }
_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCs8nJLOd1PHax_11rand_chacha:
   89|  80.5k|            fn write_le(self, out: &mut [u8]) {
   90|  80.5k|                assert_eq!(out.len(), 16);
   91|  80.5k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|  80.5k|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25Cs8nJLOd1PHax_11rand_chacha:
 1480|   120k|            fn $name(self) -> Self {
 1481|   120k|                Self::new(unsafe {
 1482|   120k|                    _mm256_or_si256(
 1483|   120k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   120k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   120k|                    )
 1486|   120k|                })
 1487|   120k|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16Cs8nJLOd1PHax_11rand_chacha:
 1470|   120k|            fn $name(self) -> Self {
 1471|   120k|                Self::new(unsafe {
 1472|   120k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   120k|                })
 1474|   120k|            }
_RNvMNtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCs8nJLOd1PHax_11rand_chacha:
 1394|  1.86M|        fn new(x: __m256i) -> Self {
 1395|  1.86M|            Self { x, ni: PhantomData }
 1396|  1.86M|        }
_RNvXs1R_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCs8nJLOd1PHax_11rand_chacha:
   18|  80.5k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|  80.5k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|  80.5k|            }
_RNvXsv_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCs8nJLOd1PHax_11rand_chacha:
 1543|   483k|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|   483k|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|   483k|                }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCs8nJLOd1PHax_11rand_chacha:
 1430|  40.2k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|  40.2k|            unsafe {
 1432|  40.2k|                [
 1433|  40.2k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|  40.2k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|  40.2k|                ]
 1436|  40.2k|            }
 1437|  40.2k|        }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230Cs8nJLOd1PHax_11rand_chacha:
 1582|   120k|        fn shuffle_lane_words1230(self) -> Self {
 1583|   120k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|   120k|        }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20Cs8nJLOd1PHax_11rand_chacha:
 1480|   120k|            fn $name(self) -> Self {
 1481|   120k|                Self::new(unsafe {
 1482|   120k|                    _mm256_or_si256(
 1483|   120k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|   120k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|   120k|                    )
 1486|   120k|                })
 1487|   120k|            }
_RNvXse_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCs8nJLOd1PHax_11rand_chacha:
 1602|  5.03k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  5.03k|            Self::new([
 1604|  5.03k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  5.03k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  5.03k|            ])
 1607|  5.03k|        }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCs8nJLOd1PHax_11rand_chacha:
 1617|  20.1k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|  20.1k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|  20.1k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|  20.1k|            Self::new([ab, cd])
 1621|  20.1k|        }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCs8nJLOd1PHax_11rand_chacha:
  519|  20.1k|    fn extract(self, i: u32) -> u32 {
  520|  20.1k|        self.to_lanes()[i as usize]
  521|  20.1k|    }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012Cs8nJLOd1PHax_11rand_chacha:
 1590|   120k|        fn shuffle_lane_words3012(self) -> Self {
 1591|   120k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|   120k|        }
_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCs8nJLOd1PHax_11rand_chacha:
   79|     40|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|     40|                assert_eq!(input.len(), 16);
   81|     40|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|     40|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24Cs8nJLOd1PHax_11rand_chacha:
 1470|   120k|            fn $name(self) -> Self {
 1471|   120k|                Self::new(unsafe {
 1472|   120k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|   120k|                })
 1474|   120k|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301Cs8nJLOd1PHax_11rand_chacha:
 1586|   120k|        fn shuffle_lane_words2301(self) -> Self {
 1587|   120k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|   120k|        }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCs8nJLOd1PHax_11rand_chacha:
  323|  20.1k|    fn to_lanes(self) -> [u32; 4] {
  324|  20.1k|        unsafe {
  325|  20.1k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|  20.1k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|  20.1k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|  20.1k|        }
  329|  20.1k|    }
_RNvMsZ_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCs8nJLOd1PHax_11rand_chacha:
   64|   281k|            fn new(x: __m128i) -> Self {
   65|   281k|                $vec {
   66|   281k|                    x,
   67|   281k|                    s3: PhantomData,
   68|   281k|                    s4: PhantomData,
   69|   281k|                    ni: PhantomData,
   70|   281k|                }
   71|   281k|            }
_RNvXsr_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCs8nJLOd1PHax_11rand_chacha:
 1543|   483k|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|   483k|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|   483k|                }
_RNvXsX_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCs8nJLOd1PHax_11rand_chacha:
   52|  45.2k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|  45.2k|                Self::new(x.sse2)
   54|  45.2k|            }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCs8nJLOd1PHax_11rand_chacha:
 1611|  20.1k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|  20.1k|            let [a, b] = self.0[0].to_lanes();
 1613|  20.1k|            let [c, d] = self.0[1].to_lanes();
 1614|  20.1k|            [a, b, c, d]
 1615|  20.1k|        }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCs8nJLOd1PHax_11rand_chacha:
  523|  70.4k|    fn insert(self, v: u32, i: u32) -> Self {
  524|  70.4k|        Self::new(unsafe {
  525|  70.4k|            match i {
  526|  35.2k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|  35.2k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|  70.4k|    }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCs8nJLOd1PHax_11rand_chacha:
  331|  5.03k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  5.03k|        unsafe {
  333|  5.03k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  5.03k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  5.03k|            Self::new(x)
  336|  5.03k|        }
  337|  5.03k|    }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCs8nJLOd1PHax_11rand_chacha:
 1439|  40.2k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|  40.2k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|  40.2k|        }
_RNvXsj_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCs8nJLOd1PHax_11rand_chacha:
 1683|  5.03k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  5.03k|            Self {
 1685|  5.03k|                avx: [
 1686|  5.03k|                    vec256_storage { avx: x.0[0].x },
 1687|  5.03k|                    vec256_storage { avx: x.0[1].x },
 1688|  5.03k|                ],
 1689|  5.03k|            }
 1690|  5.03k|        }
_RNvXsY_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCs8nJLOd1PHax_11rand_chacha:
   58|  5.07k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  5.07k|                vec128_storage { sse2: x.x }
   60|  5.07k|            }

_RINvXs2_NtNtCsaaDRjPSQBUt_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECsBlCKulpTva_9spargebra:
   51|  80.5k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|  80.5k|        // Use LE; we explicitly generate one value before the next.
   53|  80.5k|        let x = u128::from(rng.next_u64());
   54|  80.5k|        let y = u128::from(rng.next_u64());
   55|  80.5k|        (y << 64) | x
   56|  80.5k|    }

_RINvCsaaDRjPSQBUt_4rand6randomoECsBlCKulpTva_9spargebra:
  183|  80.5k|pub fn random<T>() -> T
  184|  80.5k|where Standard: Distribution<T> {
  185|  80.5k|    thread_rng().gen()
  186|  80.5k|}

_RINvYNtNtNtCsaaDRjPSQBUt_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECsBlCKulpTva_9spargebra:
   93|  80.5k|    fn gen<T>(&mut self) -> T
   94|  80.5k|    where Standard: Distribution<T> {
   95|  80.5k|        Standard.sample(self)
   96|  80.5k|    }

_RNvXs_NtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtNtCsfyBLlmIaPdg_9rand_core2os5OsRngENtB24_7RngCore8next_u64CsBlCKulpTva_9spargebra:
  124|   161k|    fn next_u64(&mut self) -> u64 {
  125|   161k|        self.0.next_u64()
  126|   161k|    }
_RNvNtNtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNvMs3_NtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtNtCsfyBLlmIaPdg_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMs3_NtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtNtCsfyBLlmIaPdg_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|     19|    fn reseed_and_generate(
  242|     19|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|     19|    ) {
  244|     19|        #![allow(clippy::if_same_then_else)] // false positive
  245|     19|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|     19|        } else {
  248|     19|            trace!("Reseeding RNG (periodic reseed)");
  249|     19|        }
  250|       |
  251|     19|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|     19|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|     19|        }
  257|     19|        self.fork_counter = global_fork_counter;
  258|     19|
  259|     19|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|     19|        self.inner.generate(results);
  261|     19|    }
_RNCNvNtNtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });
_RNCNvMs3_NtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtNtCsfyBLlmIaPdg_9rand_core2os5OsRngE6reseed0Bd_:
  220|     19|        R::from_rng(&mut self.reseeder).map(|result| {
  221|     19|            self.bytes_until_reseed = self.threshold;
  222|     19|            self.inner = result
  223|     19|        })
_RNvMs3_NtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtNtCsfyBLlmIaPdg_9rand_core2os5OsRngE6reseedBb_:
  219|     19|    fn reseed(&mut self) -> Result<(), Error> {
  220|     19|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|     19|        })
  224|     19|    }
_RNvMs3_NtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtNtCsfyBLlmIaPdg_9rand_core2os5OsRngE9is_forkedBb_:
  226|  5.03k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  5.03k|        // In theory, on 32-bit platforms, it is possible for
  228|  5.03k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  5.03k|        //
  230|  5.03k|        // This check will detect a fork in the normal case where
  231|  5.03k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  5.03k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  5.03k|        //
  234|  5.03k|        // It will still fail to detect a fork if there have been more than
  235|  5.03k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  5.03k|        // enough.
  237|  5.03k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  5.03k|    }
_RNvNtNtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  5.03k|    pub fn get_fork_counter() -> usize {
  308|  5.03k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  5.03k|    }
_RNvXs2_NtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtNtCsfyBLlmIaPdg_9rand_core2os5OsRngENtNtB26_5block12BlockRngCore8generateBb_:
  173|  5.03k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  5.03k|        let global_fork_counter = fork::get_fork_counter();
  175|  5.03k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|     19|            return self.reseed_and_generate(results, global_fork_counter);
  180|  5.01k|        }
  181|  5.01k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  5.01k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  5.01k|        self.inner.generate(results);
  184|  5.03k|    }
_RNvMNtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtNtCsfyBLlmIaPdg_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }

_RNvXs_NtNtCsaaDRjPSQBUt_4rand4rngs6threadNtB4_9ThreadRngNtCsfyBLlmIaPdg_9rand_core7RngCore8next_u64:
  109|   161k|    fn next_u64(&mut self) -> u64 {
  110|   161k|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|   161k|        // creates another mutable reference
  112|   161k|        let rng = unsafe { &mut *self.rng.get() };
  113|   161k|        rng.next_u64()
  114|   161k|    }
_RNCNvNtNtCsaaDRjPSQBUt_4rand4rngs6thread10thread_rng0B7_:
   89|  80.5k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNvNtNtCsaaDRjPSQBUt_4rand4rngs6thread10thread_rng:
   88|  80.5k|pub fn thread_rng() -> ThreadRng {
   89|  80.5k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|  80.5k|    ThreadRng { rng }
   91|  80.5k|}
_RNCNvNvNtNtCsaaDRjPSQBUt_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);

_RNvXsm_NtCs8nJLOd1PHax_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCsfyBLlmIaPdg_9rand_core5block12BlockRngCore8generateCsaaDRjPSQBUt_4rand:
   89|  5.03k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  5.03k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  5.03k|                self.state.refill4($rounds, unsafe {
   92|  5.03k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  5.03k|                });
   94|   322k|                for x in r.as_mut() {
   95|   322k|                    *x = x.to_le();
   96|   322k|                }
   97|  5.03k|            }
_RNvXsn_NtCs8nJLOd1PHax_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCsfyBLlmIaPdg_9rand_core11SeedableRng9from_seedCsaaDRjPSQBUt_4rand:
  103|     20|            fn from_seed(seed: Self::Seed) -> Self {
  104|     20|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|     20|            }
_RNvXs_NtCs8nJLOd1PHax_11rand_chacha6chachaINtB4_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsRefSmE6as_refB6_:
   46|   332k|    fn as_ref(&self) -> &[T] {
   47|   332k|        &self.0
   48|   332k|    }
_RNvXs0_NtCs8nJLOd1PHax_11rand_chacha6chachaINtB5_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsMutSmE6as_mutB7_:
   51|  5.03k|    fn as_mut(&mut self) -> &mut [T] {
   52|  5.03k|        &mut self.0
   53|  5.03k|    }
_RNvXNtCs8nJLOd1PHax_11rand_chacha6chachaINtB2_7Array64mENtNtCs9nhK3FOW46N_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCs8nJLOd1PHax_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  5.03k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  5.03k|        refill_wide(self, drounds, out)
   86|  5.03k|    }
_RNvMNtCs8nJLOd1PHax_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|     20|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|     20|        init_chacha(key, nonce)
   74|     20|    }
_RINvNvNtCs8nJLOd1PHax_11rand_chacha4guts11init_chacha7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB10_5YesS3NtB10_5YesS4NtB10_4NoNIEEB6_:
  235|     20|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|     20|        let ctr_nonce = [
  237|       |            0,
  238|     20|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|     20|                0
  242|       |            },
  243|     20|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|     20|            read_u32le(&nonce[nonce.len() - 4..]),
  245|     20|        ];
  246|     20|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|     20|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|     20|        ChaCha {
  249|     20|            b: key0.into(),
  250|     20|            c: key1.into(),
  251|     20|            d: ctr_nonce.into(),
  252|     20|        }
_RINvNtCs8nJLOd1PHax_11rand_chacha4guts11diagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBS_6x86_644sse24avx212u32x4x2_avx2NtB1x_4NoNIENtB1v_2G0EEB4_:
   56|  30.1k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|  30.1k|    x.b = x.b.shuffle_lane_words3012();
   58|  30.1k|    x.c = x.c.shuffle_lane_words2301();
   59|  30.1k|    x.d = x.d.shuffle_lane_words1230();
   60|  30.1k|    x
   61|  30.1k|}
_RINvNtCs8nJLOd1PHax_11rand_chacha4guts16refill_wide_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB4_:
  116|  5.03k|fn refill_wide_impl<Mach: Machine>(
  117|  5.03k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  5.03k|) {
  119|  5.03k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  5.03k|    let mut pos = state.pos64(m);
  121|  5.03k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  5.03k|    pos = pos.wrapping_add(1);
  123|  5.03k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  5.03k|    pos = pos.wrapping_add(1);
  125|  5.03k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  5.03k|    pos = pos.wrapping_add(1);
  127|  5.03k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  5.03k|
  129|  5.03k|    let b = m.unpack(state.b);
  130|  5.03k|    let c = m.unpack(state.c);
  131|  5.03k|    let mut x = State {
  132|  5.03k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  5.03k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  5.03k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  5.03k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  5.03k|    };
  137|  30.1k|    for _ in 0..drounds {
  138|  30.1k|        x = round(x);
  139|  30.1k|        x = undiagonalize(round(diagonalize(x)));
  140|  30.1k|    }
  141|  5.03k|    let mut pos = state.pos64(m);
  142|  5.03k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  5.03k|    pos = pos.wrapping_add(1);
  144|  5.03k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  5.03k|    pos = pos.wrapping_add(1);
  146|  5.03k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  5.03k|    pos = pos.wrapping_add(1);
  148|  5.03k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  5.03k|    pos = pos.wrapping_add(1);
  150|  5.03k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  5.03k|
  152|  5.03k|    let (a, b, c, d) = (
  153|  5.03k|        x.a.to_lanes(),
  154|  5.03k|        x.b.to_lanes(),
  155|  5.03k|        x.c.to_lanes(),
  156|  5.03k|        x.d.to_lanes(),
  157|  5.03k|    );
  158|  5.03k|    let sb = m.unpack(state.b);
  159|  5.03k|    let sc = m.unpack(state.c);
  160|  5.03k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  5.03k|    state.d = d4.into();
  162|  5.03k|    let mut words = out.chunks_exact_mut(16);
  163|  20.1k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|  20.1k|        (a + k).write_le(words.next().unwrap());
  165|  20.1k|        (b + sb).write_le(words.next().unwrap());
  166|  20.1k|        (c + sc).write_le(words.next().unwrap());
  167|  20.1k|        (d + sd).write_le(words.next().unwrap());
  168|  20.1k|    }
  169|  5.03k|}
_RNvNtCs8nJLOd1PHax_11rand_chacha4guts10read_u32le:
  229|     40|fn read_u32le(xs: &[u8]) -> u32 {
  230|     40|    assert_eq!(xs.len(), 4);
  231|     40|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|     40|}
_RINvNtCs8nJLOd1PHax_11rand_chacha4guts5roundINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBL_6x86_644sse24avx212u32x4x2_avx2NtB1q_4NoNIENtB1o_2G0EEB4_:
   43|  60.3k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|  60.3k|    x.a += x.b;
   45|  60.3k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|  60.3k|    x.c += x.d;
   47|  60.3k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|  60.3k|    x.a += x.b;
   49|  60.3k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|  60.3k|    x.c += x.d;
   51|  60.3k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|  60.3k|    x
   53|  60.3k|}
_RINvMNtCs8nJLOd1PHax_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBW_4NoNIEEB5_:
   77|  10.0k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  10.0k|        let d: M::u32x4 = m.unpack(self.d);
   79|  10.0k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  10.0k|    }
_RINvNtCs8nJLOd1PHax_11rand_chacha4guts13undiagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBU_6x86_644sse24avx212u32x4x2_avx2NtB1z_4NoNIENtB1x_2G0EEB4_:
   63|  30.1k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|  30.1k|    x.b = x.b.shuffle_lane_words1230();
   65|  30.1k|    x.c = x.c.shuffle_lane_words2301();
   66|  30.1k|    x.d = x.d.shuffle_lane_words3012();
   67|  30.1k|    x
   68|  30.1k|}
_RINvNvNtCs8nJLOd1PHax_11rand_chacha4guts11refill_wide7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB10_4NoNIEEB6_:
  172|  5.03k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  5.03k|        refill_wide_impl(m, state, drounds, out);
  174|  5.03k|    }

_RNCNvXs0_NtCsfyBLlmIaPdg_9rand_core5blockINtB7_8BlockRngINtNtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640CsBlCKulpTva_9spargebra:
  198|   161k|        let read_u64 = |results: &[u32], index| {
  199|   161k|            let data = &results[index..=index + 1];
  200|   161k|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|   161k|        };
_RNvXs0_NtCsfyBLlmIaPdg_9rand_core5blockINtB5_8BlockRngINtNtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64CsBlCKulpTva_9spargebra:
  197|   161k|    fn next_u64(&mut self) -> u64 {
  198|   161k|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|   161k|        let len = self.results.as_ref().len();
  204|   161k|
  205|   161k|        let index = self.index;
  206|   161k|        if index < len - 1 {
  207|   156k|            self.index += 2;
  208|   156k|            // Read an u64 from the current index
  209|   156k|            read_u64(self.results.as_ref(), index)
  210|  5.03k|        } else if index >= len {
  211|  5.03k|            self.generate_and_set(2);
  212|  5.03k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|   161k|    }
_RNvMs_NtCsfyBLlmIaPdg_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  5.03k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  5.03k|        assert!(index < self.results.as_ref().len());
  176|  5.03k|        self.core.generate(&mut self.results);
  177|  5.03k|        self.index = index;
  178|  5.03k|    }
_RNvMs_NtCsfyBLlmIaPdg_9rand_core5blockINtB4_8BlockRngINtNtNtNtCsaaDRjPSQBUt_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RNvXs_CsfyBLlmIaPdg_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCsaaDRjPSQBUt_4rand:
  441|     19|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|     19|        (**self).try_fill_bytes(dest)
  443|     19|    }
_RINvYNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtCsfyBLlmIaPdg_9rand_core11SeedableRng8from_rngQNtNtBV_2os5OsRngECsaaDRjPSQBUt_4rand:
  390|     19|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|     19|        let mut seed = Self::Seed::default();
  392|     19|        rng.try_fill_bytes(seed.as_mut())?;
  393|     19|        Ok(Self::from_seed(seed))
  394|     19|    }
_RINvYNtNtCs8nJLOd1PHax_11rand_chacha6chacha12ChaCha12CoreNtCsfyBLlmIaPdg_9rand_core11SeedableRng8from_rngNtNtBV_2os5OsRngECsaaDRjPSQBUt_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }

_RNvXs_NtCsfyBLlmIaPdg_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|     20|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|     20|        getrandom(dest)?;
   69|     20|        Ok(())
   70|     20|    }

_RNvXsb_NtCsdmAy3pJ2Dco_9siphasher6sip128INtB5_6HasherNtB5_11Sip24RoundsENtNtCs9nhK3FOW46N_4core4hash6Hasher5writeCshC9BJcurWLf_8oxigraph:
  558|   109k|    fn write(&mut self, msg: &[u8]) {
  559|   109k|        let length = msg.len();
  560|   109k|        self.length += length;
  561|   109k|
  562|   109k|        let mut needed = 0;
  563|   109k|
  564|   109k|        if self.ntail != 0 {
  565|      0|            needed = 8 - self.ntail;
  566|      0|            self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);
  567|      0|            if length < needed {
  568|      0|                self.ntail += length;
  569|      0|                return;
  570|      0|            } else {
  571|      0|                self.state.v3 ^= self.tail;
  572|      0|                S::c_rounds(&mut self.state);
  573|      0|                self.state.v0 ^= self.tail;
  574|      0|                self.ntail = 0;
  575|      0|            }
  576|   109k|        }
  577|       |
  578|       |        // Buffered tail is now flushed, process new input.
  579|   109k|        let len = length - needed;
  580|   109k|        let left = len & 0x7;
  581|   109k|
  582|   109k|        let mut i = needed;
  583|   431k|        while i < len - left {
  584|   322k|            let mi = unsafe { load_int_le!(msg, i, u64) };
  585|   322k|
  586|   322k|            self.state.v3 ^= mi;
  587|   322k|            S::c_rounds(&mut self.state);
  588|   322k|            self.state.v0 ^= mi;
  589|   322k|
  590|   322k|            i += 8;
  591|       |        }
  592|       |
  593|   109k|        self.tail = unsafe { u8to64_le(msg, i, left) };
  594|   109k|        self.ntail = left;
  595|   109k|    }
_RNvMs7_NtCsdmAy3pJ2Dco_9siphasher6sip128INtB5_6HasherNtB5_11Sip24RoundsE9finish128CshC9BJcurWLf_8oxigraph:
  404|   109k|    pub fn finish128(&self) -> Hash128 {
  405|   109k|        let mut state = self.state;
  406|   109k|
  407|   109k|        let b: u64 = ((self.length as u64 & 0xff) << 56) | self.tail;
  408|   109k|
  409|   109k|        state.v3 ^= b;
  410|   109k|        S::c_rounds(&mut state);
  411|   109k|        state.v0 ^= b;
  412|   109k|
  413|   109k|        state.v2 ^= 0xee;
  414|   109k|        S::d_rounds(&mut state);
  415|   109k|        let h1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
  416|   109k|
  417|   109k|        state.v1 ^= 0xdd;
  418|   109k|        S::d_rounds(&mut state);
  419|   109k|        let h2 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
  420|   109k|
  421|   109k|        Hash128 { h1, h2 }
  422|   109k|    }
_RNvXsf_NtCsdmAy3pJ2Dco_9siphasher6sip128NtB5_11Sip24RoundsNtB5_3Sip8c_roundsCshC9BJcurWLf_8oxigraph:
  654|   431k|    fn c_rounds(state: &mut State) {
  655|   431k|        compress!(state);
  656|   431k|        compress!(state);
  657|   431k|    }
_RNvXsf_NtCsdmAy3pJ2Dco_9siphasher6sip128NtB5_11Sip24RoundsNtB5_3Sip8d_roundsCshC9BJcurWLf_8oxigraph:
  660|   219k|    fn d_rounds(state: &mut State) {
  661|   219k|        compress!(state);
  662|   219k|        compress!(state);
  663|   219k|        compress!(state);
  664|   219k|        compress!(state);
  665|   219k|    }
_RNvXsa_NtCsdmAy3pJ2Dco_9siphasher6sip128NtB5_11SipHasher24NtNtCs9nhK3FOW46N_4core4hash6Hasher5writeCshC9BJcurWLf_8oxigraph:
  501|   109k|    fn write(&mut self, msg: &[u8]) {
  502|   109k|        self.hasher.write(msg)
  503|   109k|    }
_RNvMs4_NtCsdmAy3pJ2Dco_9siphasher6sip128NtB5_11SipHasher2413new_with_keysCshC9BJcurWLf_8oxigraph:
  286|   109k|    pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher24 {
  287|   109k|        SipHasher24 {
  288|   109k|            hasher: Hasher::new_with_keys(key0, key1),
  289|   109k|        }
  290|   109k|    }
_RNvMs4_NtCsdmAy3pJ2Dco_9siphasher6sip128NtB5_11SipHasher243newCshC9BJcurWLf_8oxigraph:
  280|   109k|    pub fn new() -> SipHasher24 {
  281|   109k|        SipHasher24::new_with_keys(0, 0)
  282|   109k|    }
_RNvXs5_NtCsdmAy3pJ2Dco_9siphasher6sip128NtB5_11SipHasher24NtB5_9Hasher1289finish128CshC9BJcurWLf_8oxigraph:
  328|   109k|    fn finish128(&self) -> Hash128 {
  329|   109k|        self.hasher.finish128()
  330|   109k|    }
_RNvNtCsdmAy3pJ2Dco_9siphasher6sip1289u8to64_leCshC9BJcurWLf_8oxigraph:
  142|   109k|unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {
  143|      0|    debug_assert!(len < 8);
  144|   109k|    let mut i = 0; // current byte index (from LSB) in the output u64
  145|   109k|    let mut out = 0;
  146|   109k|    if i + 3 < len {
  147|   104k|        out = load_int_le!(buf, start + i, u32) as u64;
  148|   104k|        i += 4;
  149|  5.19k|    }
  150|   109k|    if i + 1 < len {
  151|  27.3k|        out |= (load_int_le!(buf, start + i, u16) as u64) << (i * 8);
  152|  27.3k|        i += 2
  153|  82.2k|    }
  154|   109k|    if i < len {
  155|  22.8k|        out |= (*buf.get_unchecked(start + i) as u64) << (i * 8);
  156|  22.8k|        i += 1;
  157|  86.7k|    }
  158|   109k|    debug_assert_eq!(i, len);
  159|   109k|    out
  160|   109k|}
_RNvMs6_NtCsdmAy3pJ2Dco_9siphasher6sip128INtB5_6HasherNtB5_11Sip24RoundsE13new_with_keysB7_:
  335|   109k|    fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {
  336|   109k|        let mut state = Hasher {
  337|   109k|            k0: key0,
  338|   109k|            k1: key1,
  339|   109k|            length: 0,
  340|   109k|            state: State {
  341|   109k|                v0: 0,
  342|   109k|                v1: 0xee,
  343|   109k|                v2: 0,
  344|   109k|                v3: 0,
  345|   109k|            },
  346|   109k|            tail: 0,
  347|   109k|            ntail: 0,
  348|   109k|            _marker: PhantomData,
  349|   109k|        };
  350|   109k|        state.reset();
  351|   109k|        state
  352|   109k|    }
_RNvMs6_NtCsdmAy3pJ2Dco_9siphasher6sip128INtB5_6HasherNtB5_11Sip24RoundsE5resetB7_:
  355|   109k|    fn reset(&mut self) {
  356|   109k|        self.length = 0;
  357|   109k|        self.state.v0 = self.k0 ^ 0x736f6d6570736575;
  358|   109k|        self.state.v1 = self.k1 ^ 0x646f72616e646f83;
  359|   109k|        self.state.v2 = self.k0 ^ 0x6c7967656e657261;
  360|   109k|        self.state.v3 = self.k1 ^ 0x7465646279746573;
  361|   109k|        self.ntail = 0;
  362|   109k|    }
_RNvXs_NtCsdmAy3pJ2Dco_9siphasher6sip128oINtNtCs9nhK3FOW46N_4core7convert4FromNtB4_7Hash128E4from:
   39|   109k|    fn from(h: Hash128) -> u128 {
   40|   109k|        (h.h1 as u128) | ((h.h2 as u128) << 64)
   41|   109k|    }

_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsY_1__30RECURSIVE_COUNT_ObjectListPath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsg_1__22RECURSIVE_COUNT_Create6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__29RECURSIVE_COUNT_GraphNodePath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__29RECURSIVE_COUNT_IriOrFunction7___getitB5_:
   83|      6|            unsafe fn __getit(
   84|      6|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      6|            ) -> $crate::option::Option<&'static $t> {
   86|      6|                #[thread_local]
   87|      6|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      6|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      6|
   90|      6|                unsafe {
   91|      6|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      6|                    })
  101|      6|                }
  102|      6|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths7_1__32RECURSIVE_COUNT_SolutionModifier7___getitB5_:
   83|  2.38k|            unsafe fn __getit(
   84|  2.38k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  2.38k|            ) -> $crate::option::Option<&'static $t> {
   86|  2.38k|                #[thread_local]
   87|  2.38k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  2.38k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  2.38k|
   90|  2.38k|                unsafe {
   91|  2.38k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  2.38k|                    })
  101|  2.38k|                }
  102|  2.38k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsO_1__30RECURSIVE_COUNT_ExpressionList6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsn_1__22RECURSIVE_COUNT_Modify7___getitB5_:
   83|     12|            unsafe fn __getit(
   84|     12|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     12|            ) -> $crate::option::Option<&'static $t> {
   86|     12|                #[thread_local]
   87|     12|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     12|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     12|
   90|     12|                unsafe {
   91|     12|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     12|                    })
  101|     12|                }
  102|     12|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsq_1__27RECURSIVE_COUNT_GraphRefAll7___getitB5_:
   83|     94|            unsafe fn __getit(
   84|     94|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     94|            ) -> $crate::option::Option<&'static $t> {
   86|     94|                #[thread_local]
   87|     94|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     94|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     94|
   90|     94|                unsafe {
   91|     94|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     94|                    })
  101|     94|                }
  102|     94|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsf_1__20RECURSIVE_COUNT_Drop6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsR_1__20RECURSIVE_COUNT_Verb7___getitB5_:
   83|    180|            unsafe fn __getit(
   84|    180|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    180|            ) -> $crate::option::Option<&'static $t> {
   86|    180|                #[thread_local]
   87|    180|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    180|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    180|
   90|    180|                unsafe {
   91|    180|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    180|                    })
  101|    180|                }
  102|    180|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths14_1__27RECURSIVE_COUNT_PathPrimary6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsX_1__39RECURSIVE_COUNT_PropertyListPathElement6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths6_1__27RECURSIVE_COUNT_WhereClause7___getitB5_:
   83|    466|            unsafe fn __getit(
   84|    466|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    466|            ) -> $crate::option::Option<&'static $t> {
   86|    466|                #[thread_local]
   87|    466|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    466|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    466|
   90|    466|                unsafe {
   91|    466|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    466|                    })
  101|    466|                }
  102|    466|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithst_1__24RECURSIVE_COUNT_QuadData7___getitB5_:
   83|      6|            unsafe fn __getit(
   84|      6|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      6|            ) -> $crate::option::Option<&'static $t> {
   86|      6|                #[thread_local]
   87|      6|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      6|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      6|
   90|      6|                unsafe {
   91|      6|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      6|                    })
  101|      6|                }
  102|      6|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsz_1__38RECURSIVE_COUNT_GraphPatternNotTriples7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__40RECURSIVE_COUNT_GroupOrUnionGraphPattern6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__34RECURSIVE_COUNT_AdditiveExpression7___getitB5_:
   83|  1.76k|            unsafe fn __getit(
   84|  1.76k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.76k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.76k|                #[thread_local]
   87|  1.76k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.76k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.76k|
   90|  1.76k|                unsafe {
   91|  1.76k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.76k|                    })
  101|  1.76k|                }
  102|  1.76k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithse_1__21RECURSIVE_COUNT_Clear6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsW_1__44RECURSIVE_COUNT_PropertyListPathNotEmptyVerb6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsp_1__24RECURSIVE_COUNT_GraphRef7___getitB5_:
   83|    124|            unsafe fn __getit(
   84|    124|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    124|            ) -> $crate::option::Option<&'static $t> {
   86|    124|                #[thread_local]
   87|    124|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    124|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    124|
   90|    124|                unsafe {
   91|    124|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    124|                    })
  101|    124|                }
  102|    124|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths5_1__32RECURSIVE_COUNT_SelectProjection7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithss_1__33RECURSIVE_COUNT_VarOrIriOrLiteral6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__29RECURSIVE_COUNT_IriOrFunction6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths10_1__28RECURSIVE_COUNT_PathSequence7___getitB5_:
   83|    218|            unsafe fn __getit(
   84|    218|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    218|            ) -> $crate::option::Option<&'static $t> {
   86|    218|                #[thread_local]
   87|    218|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    218|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    218|
   90|    218|                unsafe {
   91|    218|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    218|                    })
  101|    218|                }
  102|    218|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsd_1__29RECURSIVE_COUNT_UpdateVariant6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsk_1__26RECURSIVE_COUNT_InsertData7___getitB5_:
   83|      6|            unsafe fn __getit(
   84|      6|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      6|            ) -> $crate::option::Option<&'static $t> {
   86|      6|                #[thread_local]
   87|      6|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      6|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      6|
   90|      6|                unsafe {
   91|      6|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      6|                    })
  101|      6|                }
  102|      6|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsr_1__27RECURSIVE_COUNT_QuadPattern6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__36RECURSIVE_COUNT_BrackettedExpression7___getitB5_:
   83|  1.74k|            unsafe fn __getit(
   84|  1.74k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.74k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.74k|                #[thread_local]
   87|  1.74k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.74k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.74k|
   90|  1.74k|                unsafe {
   91|  1.74k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.74k|                    })
  101|  1.74k|                }
  102|  1.74k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__31RECURSIVE_COUNT_PathAlternative7___getitB5_:
   83|    216|            unsafe fn __getit(
   84|    216|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    216|            ) -> $crate::option::Option<&'static $t> {
   86|    216|                #[thread_local]
   87|    216|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    216|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    216|
   90|    216|                unsafe {
   91|    216|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    216|                    })
  101|    216|                }
  102|    216|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsv_1__33RECURSIVE_COUNT_GroupGraphPattern7___getitB5_:
   83|    942|            unsafe fn __getit(
   84|    942|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    942|            ) -> $crate::option::Option<&'static $t> {
   86|    942|                #[thread_local]
   87|    942|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    942|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    942|
   90|    942|                unsafe {
   91|    942|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    942|                    })
  101|    942|                }
  102|    942|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__30RECURSIVE_COUNT_CollectionPath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsg_1__22RECURSIVE_COUNT_Create7___getitB5_:
   83|      2|            unsafe fn __getit(
   84|      2|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      2|            ) -> $crate::option::Option<&'static $t> {
   86|      2|                #[thread_local]
   87|      2|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      2|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      2|
   90|      2|                unsafe {
   91|      2|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      2|                    })
  101|      2|                }
  102|      2|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__33RECURSIVE_COUNT_PrimaryExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsY_1__30RECURSIVE_COUNT_ObjectListPath7___getitB5_:
   83|  1.98k|            unsafe fn __getit(
   84|  1.98k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.98k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.98k|                #[thread_local]
   87|  1.98k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.98k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.98k|
   90|  1.98k|                unsafe {
   91|  1.98k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.98k|                    })
  101|  1.98k|                }
  102|  1.98k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsO_1__30RECURSIVE_COUNT_ExpressionList7___getitB5_:
   83|    158|            unsafe fn __getit(
   84|    158|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    158|            ) -> $crate::option::Option<&'static $t> {
   86|    158|                #[thread_local]
   87|    158|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    158|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    158|
   90|    158|                unsafe {
   91|    158|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    158|                    })
  101|    158|                }
  102|    158|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__31RECURSIVE_COUNT_UnaryExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__40RECURSIVE_COUNT_MultiplicativeExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths14_1__27RECURSIVE_COUNT_PathPrimary7___getitB5_:
   83|    676|            unsafe fn __getit(
   84|    676|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    676|            ) -> $crate::option::Option<&'static $t> {
   86|    676|                #[thread_local]
   87|    676|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    676|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    676|
   90|    676|                unsafe {
   91|    676|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    676|                    })
  101|    676|                }
  102|    676|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsf_1__20RECURSIVE_COUNT_Drop7___getitB5_:
   83|      6|            unsafe fn __getit(
   84|      6|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      6|            ) -> $crate::option::Option<&'static $t> {
   86|      6|                #[thread_local]
   87|      6|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      6|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      6|
   90|      6|                unsafe {
   91|      6|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      6|                    })
  101|      6|                }
  102|      6|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsk_1__26RECURSIVE_COUNT_InsertData6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsG_1__32RECURSIVE_COUNT_InlineDataOneVar7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsX_1__39RECURSIVE_COUNT_PropertyListPathElement7___getitB5_:
   83|      6|            unsafe fn __getit(
   84|      6|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      6|            ) -> $crate::option::Option<&'static $t> {
   86|      6|                #[thread_local]
   87|      6|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      6|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      6|
   90|      6|                unsafe {
   91|      6|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      6|                    })
  101|      6|                }
  102|      6|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsT_1__38RECURSIVE_COUNT_TriplesSameSubjectPath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__36RECURSIVE_COUNT_BrackettedExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__27RECURSIVE_COUNT_BuiltInCall6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__40RECURSIVE_COUNT_GroupOrUnionGraphPattern7___getitB5_:
   83|     10|            unsafe fn __getit(
   84|     10|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     10|            ) -> $crate::option::Option<&'static $t> {
   86|     10|                #[thread_local]
   87|     10|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     10|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     10|
   90|     10|                unsafe {
   91|     10|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     10|                    })
  101|     10|                }
  102|     10|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__41RECURSIVE_COUNT_BlankNodePropertyListPath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths2_1__28RECURSIVE_COUNT_SelectClause6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths3_1__28RECURSIVE_COUNT_SelectOption7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithse_1__21RECURSIVE_COUNT_Clear7___getitB5_:
   83|     74|            unsafe fn __getit(
   84|     74|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     74|            ) -> $crate::option::Option<&'static $t> {
   86|     74|                #[thread_local]
   87|     74|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     74|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     74|
   90|     74|                unsafe {
   91|     74|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     74|                    })
  101|     74|                }
  102|     74|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths16_1__36RECURSIVE_COUNT_PathOneInPropertySet7___getitB5_:
   83|     84|            unsafe fn __getit(
   84|     84|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     84|            ) -> $crate::option::Option<&'static $t> {
   86|     84|                #[thread_local]
   87|     84|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     84|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     84|
   90|     84|                unsafe {
   91|     84|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     84|                    })
  101|     84|                }
  102|     84|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithss_1__33RECURSIVE_COUNT_VarOrIriOrLiteral7___getitB5_:
   83|    372|            unsafe fn __getit(
   84|    372|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    372|            ) -> $crate::option::Option<&'static $t> {
   86|    372|                #[thread_local]
   87|    372|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    372|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    372|
   90|    372|                unsafe {
   91|    372|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    372|                    })
  101|    372|                }
  102|    372|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__24RECURSIVE_COUNT_VarOrIri7___getitB5_:
   83|    328|            unsafe fn __getit(
   84|    328|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    328|            ) -> $crate::option::Option<&'static $t> {
   86|    328|                #[thread_local]
   87|    328|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    328|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    328|
   90|    328|                unsafe {
   91|    328|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    328|                    })
  101|    328|                }
  102|    328|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsm_1__27RECURSIVE_COUNT_DeleteWhere6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsi_1__20RECURSIVE_COUNT_Move6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsU_1__32RECURSIVE_COUNT_PropertyListPath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1_1__25RECURSIVE_COUNT_SubSelect6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__40RECURSIVE_COUNT_ConditionalAndExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsG_1__32RECURSIVE_COUNT_InlineDataOneVar6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsr_1__27RECURSIVE_COUNT_QuadPattern7___getitB5_:
   83|    288|            unsafe fn __getit(
   84|    288|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    288|            ) -> $crate::option::Option<&'static $t> {
   86|    288|                #[thread_local]
   87|    288|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    288|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    288|
   90|    288|                unsafe {
   91|    288|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    288|                    })
  101|    288|                }
  102|    288|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths16_1__36RECURSIVE_COUNT_PathOneInPropertySet6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__30RECURSIVE_COUNT_CollectionPath7___getitB5_:
   83|    122|            unsafe fn __getit(
   84|    122|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    122|            ) -> $crate::option::Option<&'static $t> {
   86|    122|                #[thread_local]
   87|    122|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    122|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    122|
   90|    122|                unsafe {
   91|    122|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    122|                    })
  101|    122|                }
  102|    122|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsb_1__28RECURSIVE_COUNT_ValuesClause7___getitB5_:
   83|  2.41k|            unsafe fn __getit(
   84|  2.41k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  2.41k|            ) -> $crate::option::Option<&'static $t> {
   86|  2.41k|                #[thread_local]
   87|  2.41k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  2.41k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  2.41k|
   90|  2.41k|                unsafe {
   91|  2.41k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  2.41k|                    })
  101|  2.41k|                }
  102|  2.41k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__25RECURSIVE_COUNT_VarOrTerm7___getitB5_:
   83|  2.42k|            unsafe fn __getit(
   84|  2.42k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  2.42k|            ) -> $crate::option::Option<&'static $t> {
   86|  2.42k|                #[thread_local]
   87|  2.42k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  2.42k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  2.42k|
   90|  2.42k|                unsafe {
   91|  2.42k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  2.42k|                    })
  101|  2.42k|                }
  102|  2.42k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__25RECURSIVE_COUNT_GraphTerm6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__31RECURSIVE_COUNT_UnaryExpression7___getitB5_:
   83|  1.80k|            unsafe fn __getit(
   84|  1.80k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.80k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.80k|                #[thread_local]
   87|  1.80k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.80k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.80k|
   90|  1.80k|                unsafe {
   91|  1.80k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.80k|                    })
  101|  1.80k|                }
  102|  1.80k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithst_1__24RECURSIVE_COUNT_QuadData6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__40RECURSIVE_COUNT_MultiplicativeExpression7___getitB5_:
   83|  1.74k|            unsafe fn __getit(
   84|  1.74k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.74k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.74k|                #[thread_local]
   87|  1.74k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.74k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.74k|
   90|  1.74k|                unsafe {
   91|  1.74k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.74k|                    })
  101|  1.74k|                }
  102|  1.74k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithso_1__30RECURSIVE_COUNT_GraphOrDefault6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsz_1__38RECURSIVE_COUNT_GraphPatternNotTriples6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsa_1__28RECURSIVE_COUNT_HavingClause6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths15_1__38RECURSIVE_COUNT_PathNegatedPropertySet7___getitB5_:
   83|      6|            unsafe fn __getit(
   84|      6|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      6|            ) -> $crate::option::Option<&'static $t> {
   86|      6|                #[thread_local]
   87|      6|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      6|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      6|
   90|      6|                unsafe {
   91|      6|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      6|                    })
  101|      6|                }
  102|      6|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsT_1__38RECURSIVE_COUNT_TriplesSameSubjectPath7___getitB5_:
   83|      8|            unsafe fn __getit(
   84|      8|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      8|            ) -> $crate::option::Option<&'static $t> {
   86|      8|                #[thread_local]
   87|      8|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      8|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      8|
   90|      8|                unsafe {
   91|      8|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      8|                    })
  101|      8|                }
  102|      8|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsV_1__40RECURSIVE_COUNT_PropertyListPathNotEmpty6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths2_1__28RECURSIVE_COUNT_SelectClause7___getitB5_:
   83|     18|            unsafe fn __getit(
   84|     18|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     18|            ) -> $crate::option::Option<&'static $t> {
   86|     18|                #[thread_local]
   87|     18|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     18|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     18|
   90|     18|                unsafe {
   91|     18|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     18|                    })
  101|     18|                }
  102|     18|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths10_1__28RECURSIVE_COUNT_PathSequence6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsw_1__36RECURSIVE_COUNT_GroupGraphPatternSub6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__27RECURSIVE_COUNT_BuiltInCall7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__29RECURSIVE_COUNT_GraphNodePath7___getitB5_:
   83|  2.12k|            unsafe fn __getit(
   84|  2.12k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  2.12k|            ) -> $crate::option::Option<&'static $t> {
   86|  2.12k|                #[thread_local]
   87|  2.12k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  2.12k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  2.12k|
   90|  2.12k|                unsafe {
   91|  2.12k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  2.12k|                    })
  101|  2.12k|                }
  102|  2.12k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsi_1__20RECURSIVE_COUNT_Move7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsm_1__27RECURSIVE_COUNT_DeleteWhere7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsv_1__33RECURSIVE_COUNT_GroupGraphPattern6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsU_1__32RECURSIVE_COUNT_PropertyListPath7___getitB5_:
   83|    964|            unsafe fn __getit(
   84|    964|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    964|            ) -> $crate::option::Option<&'static $t> {
   86|    964|                #[thread_local]
   87|    964|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    964|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    964|
   90|    964|                unsafe {
   91|    964|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    964|                    })
  101|    964|                }
  102|    964|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__40RECURSIVE_COUNT_ConditionalAndExpression7___getitB5_:
   83|  1.60k|            unsafe fn __getit(
   84|  1.60k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.60k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.60k|                #[thread_local]
   87|  1.60k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.60k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.60k|
   90|  1.60k|                unsafe {
   91|  1.60k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.60k|                    })
  101|  1.60k|                }
  102|  1.60k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths13_1__23RECURSIVE_COUNT_PathMod6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsH_1__30RECURSIVE_COUNT_DataBlockValue7___getitB5_:
   83|  3.89k|            unsafe fn __getit(
   84|  3.89k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  3.89k|            ) -> $crate::option::Option<&'static $t> {
   86|  3.89k|                #[thread_local]
   87|  3.89k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  3.89k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  3.89k|
   90|  3.89k|                unsafe {
   91|  3.89k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  3.89k|                    })
  101|  3.89k|                }
  102|  3.89k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__39RECURSIVE_COUNT_ConditionalOrExpression7___getitB5_:
   83|  1.61k|            unsafe fn __getit(
   84|  1.61k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.61k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.61k|                #[thread_local]
   87|  1.61k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.61k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.61k|
   90|  1.61k|                unsafe {
   91|  1.61k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.61k|                    })
  101|  1.61k|                }
  102|  1.61k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__36RECURSIVE_COUNT_RelationalExpression7___getitB5_:
   83|  1.61k|            unsafe fn __getit(
   84|  1.61k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.61k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.61k|                #[thread_local]
   87|  1.61k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.61k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.61k|
   90|  1.61k|                unsafe {
   91|  1.61k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.61k|                    })
  101|  1.61k|                }
  102|  1.61k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsW_1__44RECURSIVE_COUNT_PropertyListPathNotEmptyVerb7___getitB5_:
   83|     84|            unsafe fn __getit(
   84|     84|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     84|            ) -> $crate::option::Option<&'static $t> {
   86|     84|                #[thread_local]
   87|     84|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     84|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     84|
   90|     84|                unsafe {
   91|     84|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     84|                    })
  101|     84|                }
  102|     84|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsL_1__26RECURSIVE_COUNT_Constraint6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsy_1__28RECURSIVE_COUNT_TriplesBlock6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__25RECURSIVE_COUNT_GraphTerm7___getitB5_:
   83|      8|            unsafe fn __getit(
   84|      8|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      8|            ) -> $crate::option::Option<&'static $t> {
   86|      8|                #[thread_local]
   87|      8|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      8|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      8|
   90|      8|                unsafe {
   91|      8|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      8|                    })
  101|      8|                }
  102|      8|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsd_1__29RECURSIVE_COUNT_UpdateVariant7___getitB5_:
   83|     14|            unsafe fn __getit(
   84|     14|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     14|            ) -> $crate::option::Option<&'static $t> {
   86|     14|                #[thread_local]
   87|     14|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     14|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     14|
   90|     14|                unsafe {
   91|     14|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     14|                    })
  101|     14|                }
  102|     14|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsu_1__28RECURSIVE_COUNT_IriOrLiteral6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithso_1__30RECURSIVE_COUNT_GraphOrDefault7___getitB5_:
   83|     30|            unsafe fn __getit(
   84|     30|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     30|            ) -> $crate::option::Option<&'static $t> {
   86|     30|                #[thread_local]
   87|     30|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     30|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     30|
   90|     30|                unsafe {
   91|     30|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     30|                    })
  101|     30|                }
  102|     30|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsa_1__28RECURSIVE_COUNT_HavingClause7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths3_1__28RECURSIVE_COUNT_SelectOption6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths11_1__23RECURSIVE_COUNT_PathElt7___getitB5_:
   83|    676|            unsafe fn __getit(
   84|    676|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    676|            ) -> $crate::option::Option<&'static $t> {
   86|    676|                #[thread_local]
   87|    676|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    676|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    676|
   90|    676|                unsafe {
   91|    676|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    676|                    })
  101|    676|                }
  102|    676|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsx_1__46RECURSIVE_COUNT_GroupGraphPatternSubOtherBlock6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths4_1__28RECURSIVE_COUNT_SelectValues6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths12_1__32RECURSIVE_COUNT_PathEltOrInverse6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsH_1__30RECURSIVE_COUNT_DataBlockValue6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths7_1__32RECURSIVE_COUNT_SolutionModifier6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__24RECURSIVE_COUNT_VarOrIri6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__39RECURSIVE_COUNT_ConditionalOrExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsn_1__22RECURSIVE_COUNT_Modify6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsw_1__36RECURSIVE_COUNT_GroupGraphPatternSub7___getitB5_:
   83|    998|            unsafe fn __getit(
   84|    998|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    998|            ) -> $crate::option::Option<&'static $t> {
   86|    998|                #[thread_local]
   87|    998|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    998|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    998|
   90|    998|                unsafe {
   91|    998|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    998|                    })
  101|    998|                }
  102|    998|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsV_1__40RECURSIVE_COUNT_PropertyListPathNotEmpty7___getitB5_:
   83|     78|            unsafe fn __getit(
   84|     78|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     78|            ) -> $crate::option::Option<&'static $t> {
   86|     78|                #[thread_local]
   87|     78|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     78|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     78|
   90|     78|                unsafe {
   91|     78|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     78|                    })
  101|     78|                }
  102|     78|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__36RECURSIVE_COUNT_RelationalExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsq_1__27RECURSIVE_COUNT_GraphRefAll6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsR_1__20RECURSIVE_COUNT_Verb6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__33RECURSIVE_COUNT_PrimaryExpression7___getitB5_:
   83|  1.75k|            unsafe fn __getit(
   84|  1.75k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.75k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.75k|                #[thread_local]
   87|  1.75k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.75k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.75k|
   90|  1.75k|                unsafe {
   91|  1.75k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.75k|                    })
  101|  1.75k|                }
  102|  1.75k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsB_1__35RECURSIVE_COUNT_LateralGraphPattern7___getitB5_:
   83|      2|            unsafe fn __getit(
   84|      2|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      2|            ) -> $crate::option::Option<&'static $t> {
   86|      2|                #[thread_local]
   87|      2|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      2|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      2|
   90|      2|                unsafe {
   91|      2|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      2|                    })
  101|      2|                }
  102|      2|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths6_1__27RECURSIVE_COUNT_WhereClause6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths19_1__31RECURSIVE_COUNT_TriplesNodePath7___getitB5_:
   83|     12|            unsafe fn __getit(
   84|     12|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     12|            ) -> $crate::option::Option<&'static $t> {
   86|     12|                #[thread_local]
   87|     12|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     12|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     12|
   90|     12|                unsafe {
   91|     12|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     12|                    })
  101|     12|                }
  102|     12|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__34RECURSIVE_COUNT_AdditiveExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsp_1__24RECURSIVE_COUNT_GraphRef6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths11_1__23RECURSIVE_COUNT_PathElt6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths5_1__32RECURSIVE_COUNT_SelectProjection6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths13_1__23RECURSIVE_COUNT_PathMod7___getitB5_:
   83|     44|            unsafe fn __getit(
   84|     44|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     44|            ) -> $crate::option::Option<&'static $t> {
   86|     44|                #[thread_local]
   87|     44|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     44|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     44|
   90|     44|                unsafe {
   91|     44|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     44|                    })
  101|     44|                }
  102|     44|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsb_1__28RECURSIVE_COUNT_ValuesClause6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__25RECURSIVE_COUNT_VarOrTerm6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__41RECURSIVE_COUNT_BlankNodePropertyListPath7___getitB5_:
   83|     24|            unsafe fn __getit(
   84|     24|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     24|            ) -> $crate::option::Option<&'static $t> {
   86|     24|                #[thread_local]
   87|     24|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     24|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     24|
   90|     24|                unsafe {
   91|     24|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     24|                    })
  101|     24|                }
  102|     24|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsL_1__26RECURSIVE_COUNT_Constraint7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths15_1__38RECURSIVE_COUNT_PathNegatedPropertySet6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsB_1__35RECURSIVE_COUNT_LateralGraphPattern6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsy_1__28RECURSIVE_COUNT_TriplesBlock7___getitB5_:
   83|      8|            unsafe fn __getit(
   84|      8|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      8|            ) -> $crate::option::Option<&'static $t> {
   86|      8|                #[thread_local]
   87|      8|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      8|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      8|
   90|      8|                unsafe {
   91|      8|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      8|                    })
  101|      8|                }
  102|      8|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths19_1__31RECURSIVE_COUNT_TriplesNodePath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsu_1__28RECURSIVE_COUNT_IriOrLiteral7___getitB5_:
   83|     78|            unsafe fn __getit(
   84|     78|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     78|            ) -> $crate::option::Option<&'static $t> {
   86|     78|                #[thread_local]
   87|     78|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     78|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     78|
   90|     78|                unsafe {
   91|     78|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     78|                    })
  101|     78|                }
  102|     78|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1_1__25RECURSIVE_COUNT_SubSelect7___getitB5_:
   83|     18|            unsafe fn __getit(
   84|     18|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     18|            ) -> $crate::option::Option<&'static $t> {
   86|     18|                #[thread_local]
   87|     18|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     18|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     18|
   90|     18|                unsafe {
   91|     18|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     18|                    })
  101|     18|                }
  102|     18|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__31RECURSIVE_COUNT_PathAlternative6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsx_1__46RECURSIVE_COUNT_GroupGraphPatternSubOtherBlock7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths4_1__28RECURSIVE_COUNT_SelectValues7___getitB5_:
   83|     40|            unsafe fn __getit(
   84|     40|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     40|            ) -> $crate::option::Option<&'static $t> {
   86|     40|                #[thread_local]
   87|     40|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     40|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     40|
   90|     40|                unsafe {
   91|     40|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     40|                    })
  101|     40|                }
  102|     40|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths12_1__32RECURSIVE_COUNT_PathEltOrInverse7___getitB5_:
   83|    270|            unsafe fn __getit(
   84|    270|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    270|            ) -> $crate::option::Option<&'static $t> {
   86|    270|                #[thread_local]
   87|    270|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    270|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    270|
   90|    270|                unsafe {
   91|    270|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    270|                    })
  101|    270|                }
  102|    270|            }
_RNvNvNtNtCsaaDRjPSQBUt_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|  80.5k|            unsafe fn __getit(
   84|  80.5k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  80.5k|            ) -> $crate::option::Option<&'static $t> {
   86|  80.5k|                #[thread_local]
   87|  80.5k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  80.5k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  80.5k|
   90|  80.5k|                unsafe {
   91|  80.5k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  80.5k|                    })
  101|  80.5k|                }
  102|  80.5k|            }
_RNvNvNtNtCsaaDRjPSQBUt_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }

_RNCNvNvCs6R6jWqmh3zm_18sparql_update_eval1__19___libfuzzer_sys_run0B5_:
   11|      1|    let store = STORE.get_or_init(|| Store::new().unwrap());

_RNvXsn_NtNtCshC9BJcurWLf_8oxigraph6sparql7algebraNtB5_6UpdateNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  121|  2.53k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsu_NtNtCshC9BJcurWLf_8oxigraph6sparql7algebraNtB5_12QueryDatasetNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  197|  2.57k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNCNvMsa_NtNtCshC9BJcurWLf_8oxigraph6sparql7algebraNtB7_12QueryDataset12from_algebra0Bb_:
  214|  1.77k|                default: Some(inner.default.iter().map(|g| g.clone().into()).collect()),
_RNCNvXs9_NtNtCshC9BJcurWLf_8oxigraph6sparql7algebraNtB7_6UpdateINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsBlCKulpTva_9spargebra6update6UpdateE4from0Bb_:
  183|  5.03k|                .map(|operation| {
  184|  5.03k|                    if let GraphUpdateOperation::DeleteInsert { using, .. } = operation {
  185|  2.57k|                        Some(QueryDataset::from_algebra(using))
  186|       |                    } else {
  187|  2.45k|                        None
  188|       |                    }
  189|  5.03k|                })
_RNvMs4_NtNtCshC9BJcurWLf_8oxigraph6sparql7algebraNtB5_6Update5parse:
  129|  2.76k|    pub fn parse(
  130|  2.76k|        update: &str,
  131|  2.76k|        base_iri: Option<&str>,
  132|  2.76k|    ) -> Result<Self, spargebra::SparqlSyntaxError> {
  133|  2.76k|        Ok(spargebra::Update::parse(update, base_iri)?.into())
  134|  2.76k|    }
_RNvMsa_NtNtCshC9BJcurWLf_8oxigraph6sparql7algebraNtB5_12QueryDataset3new:
  204|  4.96k|    pub(crate) fn new() -> Self {
  205|  4.96k|        Self {
  206|  4.96k|            default: None,
  207|  4.96k|            named: None,
  208|  4.96k|        }
  209|  4.96k|    }
_RNvMsa_NtNtCshC9BJcurWLf_8oxigraph6sparql7algebraNtB5_12QueryDataset22available_named_graphs:
  286|  4.96k|    pub fn available_named_graphs(&self) -> Option<&[NamedOrBlankNode]> {
  287|  4.96k|        self.named.as_deref()
  288|  4.96k|    }
_RNvMsa_NtNtCshC9BJcurWLf_8oxigraph6sparql7algebraNtB5_12QueryDataset12from_algebra:
  211|  2.57k|    fn from_algebra(inner: &Option<spargebra::algebra::QueryDataset>) -> Self {
  212|  2.57k|        if let Some(inner) = inner {
  213|  1.77k|            Self {
  214|  1.77k|                default: Some(inner.default.iter().map(|g| g.clone().into()).collect()),
  215|  1.77k|                named: inner
  216|  1.77k|                    .named
  217|  1.77k|                    .as_ref()
  218|  1.77k|                    .map(|named| named.iter().map(|g| g.clone().into()).collect()),
  219|  1.77k|            }
  220|       |        } else {
  221|    803|            Self {
  222|    803|                default: Some(vec![GraphName::DefaultGraph]),
  223|    803|                named: None,
  224|    803|            }
  225|       |        }
  226|  2.57k|    }
_RNvXs9_NtNtCshC9BJcurWLf_8oxigraph6sparql7algebraNtB5_6UpdateINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsBlCKulpTva_9spargebra6update6UpdateE4from:
  178|  2.53k|    fn from(update: spargebra::Update) -> Self {
  179|  2.53k|        Self {
  180|  2.53k|            using_datasets: update
  181|  2.53k|                .operations
  182|  2.53k|                .iter()
  183|  2.53k|                .map(|operation| {
  184|       |                    if let GraphUpdateOperation::DeleteInsert { using, .. } = operation {
  185|       |                        Some(QueryDataset::from_algebra(using))
  186|       |                    } else {
  187|       |                        None
  188|       |                    }
  189|  2.53k|                })
  190|  2.53k|                .collect(),
  191|  2.53k|            inner: update,
  192|  2.53k|        }
  193|  2.53k|    }
_RNvMsa_NtNtCshC9BJcurWLf_8oxigraph6sparql7algebraNtB5_12QueryDataset20default_graph_graphs:
  255|  4.96k|    pub fn default_graph_graphs(&self) -> Option<&[GraphName]> {
  256|  4.96k|        self.default.as_deref()
  257|  4.96k|    }

_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB2_11DatasetView31store_encoded_quads_for_pattern:
   34|  31.9k|    fn store_encoded_quads_for_pattern(
   35|  31.9k|        &self,
   36|  31.9k|        subject: Option<&EncodedTerm>,
   37|  31.9k|        predicate: Option<&EncodedTerm>,
   38|  31.9k|        object: Option<&EncodedTerm>,
   39|  31.9k|        graph_name: Option<&EncodedTerm>,
   40|  31.9k|    ) -> impl Iterator<Item = Result<EncodedQuad, EvaluationError>> + 'static {
   41|  31.9k|        self.reader
   42|  31.9k|            .quads_for_pattern(subject, predicate, object, graph_name)
   43|  31.9k|            .map(|t| t.map_err(Into::into))
   44|  31.9k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB2_11DatasetView3new:
   18|  4.96k|    pub fn new(reader: StorageReader, dataset: &QueryDataset) -> Self {
   19|  4.96k|        let dataset = EncodedDatasetSpec {
   20|  4.96k|            default: dataset
   21|  4.96k|                .default_graph_graphs()
   22|  4.96k|                .map(|graphs| graphs.iter().map(|g| g.as_ref().into()).collect::<Vec<_>>()),
   23|  4.96k|            named: dataset
   24|  4.96k|                .available_named_graphs()
   25|  4.96k|                .map(|graphs| graphs.iter().map(|g| g.as_ref().into()).collect::<Vec<_>>()),
   26|  4.96k|        };
   27|  4.96k|        Self {
   28|  4.96k|            reader,
   29|  4.96k|            extra: RefCell::new(HashMap::default()),
   30|  4.96k|            dataset,
   31|  4.96k|        }
   32|  4.96k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB2_11DatasetView25encoded_quads_for_pattern:
   47|  31.9k|    pub fn encoded_quads_for_pattern(
   48|  31.9k|        &self,
   49|  31.9k|        subject: Option<&EncodedTerm>,
   50|  31.9k|        predicate: Option<&EncodedTerm>,
   51|  31.9k|        object: Option<&EncodedTerm>,
   52|  31.9k|        graph_name: Option<&EncodedTerm>,
   53|  31.9k|    ) -> Box<dyn Iterator<Item = Result<EncodedQuad, EvaluationError>>> {
   54|  31.9k|        if let Some(graph_name) = graph_name {
   55|  30.2k|            if graph_name.is_default_graph() {
   56|  28.0k|                if let Some(default_graph_graphs) = &self.dataset.default {
   57|  28.0k|                    if default_graph_graphs.len() == 1 {
   58|       |                        // Single graph optimization
   59|  28.0k|                        Box::new(
   60|  28.0k|                            self.store_encoded_quads_for_pattern(
   61|  28.0k|                                subject,
   62|  28.0k|                                predicate,
   63|  28.0k|                                object,
   64|  28.0k|                                Some(&default_graph_graphs[0]),
   65|  28.0k|                            )
   66|  28.0k|                            .map(|quad| {
   67|       |                                let quad = quad?;
   68|       |                                Ok(EncodedQuad::new(
   69|       |                                    quad.subject,
   70|       |                                    quad.predicate,
   71|       |                                    quad.object,
   72|       |                                    EncodedTerm::DefaultGraph,
   73|       |                                ))
   74|  28.0k|                            }),
   75|  28.0k|                        )
   76|       |                    } else {
   77|      0|                        let iters = default_graph_graphs
   78|      0|                            .iter()
   79|      0|                            .map(|graph_name| {
   80|       |                                self.store_encoded_quads_for_pattern(
   81|       |                                    subject,
   82|       |                                    predicate,
   83|       |                                    object,
   84|       |                                    Some(graph_name),
   85|       |                                )
   86|      0|                            })
   87|      0|                            .collect::<Vec<_>>();
   88|      0|                        Box::new(iters.into_iter().flatten().map(|quad| {
   89|       |                            let quad = quad?;
   90|       |                            Ok(EncodedQuad::new(
   91|       |                                quad.subject,
   92|       |                                quad.predicate,
   93|       |                                quad.object,
   94|       |                                EncodedTerm::DefaultGraph,
   95|       |                            ))
   96|      0|                        }))
   97|       |                    }
   98|       |                } else {
   99|      0|                    Box::new(
  100|      0|                        self.store_encoded_quads_for_pattern(subject, predicate, object, None)
  101|      0|                            .map(|quad| {
  102|       |                                let quad = quad?;
  103|       |                                Ok(EncodedQuad::new(
  104|       |                                    quad.subject,
  105|       |                                    quad.predicate,
  106|       |                                    quad.object,
  107|       |                                    EncodedTerm::DefaultGraph,
  108|       |                                ))
  109|      0|                            }),
  110|      0|                    )
  111|       |                }
  112|  2.23k|            } else if self
  113|  2.23k|                .dataset
  114|  2.23k|                .named
  115|  2.23k|                .as_ref()
  116|  2.23k|                .map_or(true, |d| d.contains(graph_name))
  117|       |            {
  118|  2.23k|                Box::new(self.store_encoded_quads_for_pattern(
  119|  2.23k|                    subject,
  120|  2.23k|                    predicate,
  121|  2.23k|                    object,
  122|  2.23k|                    Some(graph_name),
  123|  2.23k|                ))
  124|       |            } else {
  125|      0|                Box::new(empty())
  126|       |            }
  127|  1.66k|        } else if let Some(named_graphs) = &self.dataset.named {
  128|      0|            let iters = named_graphs
  129|      0|                .iter()
  130|      0|                .map(|graph_name| {
  131|       |                    self.store_encoded_quads_for_pattern(
  132|       |                        subject,
  133|       |                        predicate,
  134|       |                        object,
  135|       |                        Some(graph_name),
  136|       |                    )
  137|      0|                })
  138|      0|                .collect::<Vec<_>>();
  139|      0|            Box::new(iters.into_iter().flatten())
  140|       |        } else {
  141|  1.66k|            Box::new(
  142|  1.66k|                self.store_encoded_quads_for_pattern(subject, predicate, object, None)
  143|  1.66k|                    .filter(|quad| match quad {
  144|       |                        Err(_) => true,
  145|       |                        Ok(quad) => !quad.graph_name.is_default_graph(),
  146|  1.66k|                    }),
  147|  1.66k|            )
  148|       |        }
  149|  31.9k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB2_11DatasetView10insert_str:
  162|  75.3k|    pub fn insert_str(&self, key: &StrHash, value: &str) {
  163|  75.3k|        if let Entry::Vacant(e) = self.extra.borrow_mut().entry(*key) {
  164|  14.0k|            if !matches!(self.reader.contains_str(key), Ok(true)) {
  165|  13.4k|                e.insert(value.to_owned());
  166|  13.4k|            }
  167|  61.2k|        }
  168|  75.3k|    }
_RNvXs_NtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB4_11DatasetViewNtNtNtB8_7storage15numeric_encoder9StrLookup7get_str:
  172|    381|    fn get_str(&self, key: &StrHash) -> Result<Option<String>, StorageError> {
  173|    381|        Ok(if let Some(value) = self.extra.borrow().get(key) {
  174|    305|            Some(value.clone())
  175|       |        } else {
  176|     76|            self.reader.get_str(key)?
  177|       |        })
  178|    381|    }
_RINvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB3_11DatasetView11encode_termNtNtCs2RvTzHk1J7L_5oxrdf10named_node12NamedNodeRefEB7_:
  151|      2|    pub fn encode_term<'a>(&self, term: impl Into<TermRef<'a>>) -> EncodedTerm {
  152|      2|        let term = term.into();
  153|      2|        let encoded = term.into();
  154|      2|        insert_term(term, &encoded, &mut |key, value| {
  155|       |            self.insert_str(key, value);
  156|       |            Ok(())
  157|      2|        })
  158|      2|        .unwrap();
  159|      2|        encoded
  160|      2|    }
_RNCINvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB5_11DatasetView11encode_termRNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeE0B9_:
  154|  75.3k|        insert_term(term, &encoded, &mut |key, value| {
  155|  75.3k|            self.insert_str(key, value);
  156|  75.3k|            Ok(())
  157|  75.3k|        })
_RINvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB3_11DatasetView11encode_termRNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeEB7_:
  151|  75.3k|    pub fn encode_term<'a>(&self, term: impl Into<TermRef<'a>>) -> EncodedTerm {
  152|  75.3k|        let term = term.into();
  153|  75.3k|        let encoded = term.into();
  154|  75.3k|        insert_term(term, &encoded, &mut |key, value| {
  155|       |            self.insert_str(key, value);
  156|       |            Ok(())
  157|  75.3k|        })
  158|  75.3k|        .unwrap();
  159|  75.3k|        encoded
  160|  75.3k|    }
_RINvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB3_11DatasetView11encode_termRNtNtCs2RvTzHk1J7L_5oxrdf7literal7LiteralEB7_:
  151|  6.01k|    pub fn encode_term<'a>(&self, term: impl Into<TermRef<'a>>) -> EncodedTerm {
  152|  6.01k|        let term = term.into();
  153|  6.01k|        let encoded = term.into();
  154|  6.01k|        insert_term(term, &encoded, &mut |key, value| {
  155|       |            self.insert_str(key, value);
  156|       |            Ok(())
  157|  6.01k|        })
  158|  6.01k|        .unwrap();
  159|  6.01k|        encoded
  160|  6.01k|    }
_RNCINvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB5_11DatasetView11encode_termNtNtCs2RvTzHk1J7L_5oxrdf10named_node12NamedNodeRefE0B9_:
  154|      2|        insert_term(term, &encoded, &mut |key, value| {
  155|      2|            self.insert_str(key, value);
  156|      2|            Ok(())
  157|      2|        })
_RNCNvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB4_11DatasetView3new0B8_:
   22|  4.96k|                .map(|graphs| graphs.iter().map(|g| g.as_ref().into()).collect::<Vec<_>>()),
_RNCNvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB4_11DatasetView25encoded_quads_for_patterns4_0B8_:
  143|      6|                    .filter(|quad| match quad {
  144|      0|                        Err(_) => true,
  145|      6|                        Ok(quad) => !quad.graph_name.is_default_graph(),
  146|      6|                    }),
_RNCNvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB4_11DatasetView31store_encoded_quads_for_pattern0B8_:
   43|     89|            .map(|t| t.map_err(Into::into))
_RNCNvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB4_11DatasetView25encoded_quads_for_pattern0B8_:
   66|     61|                            .map(|quad| {
   67|     61|                                let quad = quad?;
   68|     61|                                Ok(EncodedQuad::new(
   69|     61|                                    quad.subject,
   70|     61|                                    quad.predicate,
   71|     61|                                    quad.object,
   72|     61|                                    EncodedTerm::DefaultGraph,
   73|     61|                                ))
   74|     61|                            }),
_RNCNCNvMNtNtCshC9BJcurWLf_8oxigraph6sparql7datasetNtB6_11DatasetView3new00Ba_:
   22|  4.96k|                .map(|graphs| graphs.iter().map(|g| g.as_ref().into()).collect::<Vec<_>>()),

_RNvXs4_NtNtCshC9BJcurWLf_8oxigraph6sparql5errorNtB5_15EvaluationErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtNtB9_7storage5error12StorageErrorE4from:
   11|      2|#[derive(Debug, thiserror::Error)]

_RNvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval7to_bool:
 2875|    146|fn to_bool(term: &EncodedTerm) -> Option<bool> {
 2876|    146|    match term {
 2877|    125|        EncodedTerm::BooleanLiteral(value) => Some((*value).into()),
 2878|      3|        EncodedTerm::SmallStringLiteral(value) => Some(!value.is_empty()),
 2879|       |        EncodedTerm::BigStringLiteral { .. } => {
 2880|      0|            Some(false) // A big literal can't be empty
 2881|       |        }
 2882|      0|        EncodedTerm::FloatLiteral(value) => Some(Boolean::from(*value).into()),
 2883|      0|        EncodedTerm::DoubleLiteral(value) => Some(Boolean::from(*value).into()),
 2884|      2|        EncodedTerm::IntegerLiteral(value) => Some(Boolean::from(*value).into()),
 2885|      2|        EncodedTerm::DecimalLiteral(value) => Some(Boolean::from(*value).into()),
 2886|     14|        _ => None,
 2887|       |    }
 2888|    146|}
_RNvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval15encode_variable:
 5502|   128k|fn encode_variable(variables: &mut Vec<Variable>, variable: &Variable) -> usize {
 5503|   128k|    if let Some(key) = slice_key(variables, variable) {
 5504|  84.8k|        key
 5505|       |    } else {
 5506|  43.2k|        variables.push(variable.clone());
 5507|  43.2k|        variables.len() - 1
 5508|       |    }
 5509|   128k|}
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB2_12EncodedTuple4iter:
   67|      8|    pub fn iter(&self) -> impl Iterator<Item = Option<EncodedTerm>> + '_ {
   68|      8|        self.inner.iter().cloned()
   69|      8|    }
_RNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13PathEvaluator24eval_to_in_unknown_graph:
 4392|     58|    fn eval_to_in_unknown_graph(
 4393|     58|        &self,
 4394|     58|        path: &PropertyPath,
 4395|     58|        end: &EncodedTerm,
 4396|     58|    ) -> Box<dyn Iterator<Item = Result<(EncodedTerm, EncodedTerm), EvaluationError>>> {
 4397|     58|        match path {
 4398|      9|            PropertyPath::Path(p) => Box::new(
 4399|      9|                self.dataset
 4400|      9|                    .encoded_quads_for_pattern(None, Some(p), Some(end), None)
 4401|      9|                    .map(|t| {
 4402|       |                        let t = t?;
 4403|       |                        Ok((t.subject, t.graph_name))
 4404|      9|                    }),
 4405|      9|            ),
 4406|     10|            PropertyPath::Reverse(p) => self.eval_from_in_unknown_graph(p, end),
 4407|      9|            PropertyPath::Sequence(a, b) => {
 4408|      9|                let eval = self.clone();
 4409|      9|                let a = Rc::clone(a);
 4410|      9|                Box::new(self.eval_to_in_unknown_graph(b, end).flat_map_ok(
 4411|      9|                    move |(middle, graph_name)| {
 4412|       |                        eval.eval_from_in_graph(&a, &middle, &graph_name)
 4413|       |                            .map(move |start| Ok((start?, graph_name.clone())))
 4414|      9|                    },
 4415|      9|                ))
 4416|       |            }
 4417|     16|            PropertyPath::Alternative(a, b) => Box::new(hash_deduplicate(
 4418|     16|                self.eval_to_in_unknown_graph(a, end)
 4419|     16|                    .chain(self.eval_to_in_unknown_graph(b, end)),
 4420|     16|            )),
 4421|      3|            PropertyPath::ZeroOrMore(p) => {
 4422|      3|                let end2 = end.clone();
 4423|      3|                let eval = self.clone();
 4424|      3|                let p = Rc::clone(p);
 4425|      3|                self.run_if_term_is_a_dataset_node(end, move |graph_name| {
 4426|       |                    let eval = eval.clone();
 4427|       |                    let p = Rc::clone(&p);
 4428|       |                    let graph_name2 = graph_name.clone();
 4429|       |                    transitive_closure(Some(Ok(end2.clone())), move |e| {
 4430|       |                        eval.eval_to_in_graph(&p, &e, &graph_name2)
 4431|       |                    })
 4432|       |                    .map(move |e| Ok((e?, graph_name.clone())))
 4433|      3|                })
 4434|       |            }
 4435|      1|            PropertyPath::OneOrMore(p) => {
 4436|      1|                let eval = self.clone();
 4437|      1|                let p = Rc::clone(p);
 4438|      1|                Box::new(transitive_closure(
 4439|      1|                    self.eval_to_in_unknown_graph(&p, end),
 4440|      1|                    move |(e, graph_name)| {
 4441|       |                        eval.eval_to_in_graph(&p, &e, &graph_name)
 4442|       |                            .map(move |e| Ok((e?, graph_name.clone())))
 4443|      1|                    },
 4444|      1|                ))
 4445|       |            }
 4446|      5|            PropertyPath::ZeroOrOne(p) => {
 4447|      5|                let eval = self.clone();
 4448|      5|                let end2 = end.clone();
 4449|      5|                let p = Rc::clone(p);
 4450|      5|                self.run_if_term_is_a_dataset_node(end, move |graph_name| {
 4451|       |                    hash_deduplicate(once(Ok(end2.clone())).chain(eval.eval_to_in_graph(
 4452|       |                        &p,
 4453|       |                        &end2,
 4454|       |                        &graph_name,
 4455|       |                    )))
 4456|       |                    .map(move |e| Ok((e?, graph_name.clone())))
 4457|      5|                })
 4458|       |            }
 4459|      5|            PropertyPath::NegatedPropertySet(ps) => {
 4460|      5|                let ps = Rc::clone(ps);
 4461|      5|                Box::new(
 4462|      5|                    self.dataset
 4463|      5|                        .encoded_quads_for_pattern(Some(end), None, None, None)
 4464|      5|                        .filter_map(move |t| match t {
 4465|       |                            Ok(t) => {
 4466|       |                                if ps.iter().any(|p| *p == t.predicate) {
 4467|       |                                    None
 4468|       |                                } else {
 4469|       |                                    Some(Ok((t.subject, t.graph_name)))
 4470|       |                                }
 4471|       |                            }
 4472|       |                            Err(e) => Some(Err(e)),
 4473|      5|                        }),
 4474|      5|                )
 4475|       |            }
 4476|       |        }
 4477|     58|    }
_RNvXs5_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_16HashJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hint:
 4790|      1|    fn size_hint(&self) -> (usize, Option<usize>) {
 4791|      1|        (
 4792|      1|            0,
 4793|      1|            self.probe_iter
 4794|      1|                .size_hint()
 4795|      1|                .1
 4796|      1|                .map(|v| v.saturating_mul(self.built.len())),
 4797|      1|        )
 4798|      1|    }
_RNvXs9_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_24ConsecutiveDeduplicationNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hint:
 4932|    797|    fn size_hint(&self) -> (usize, Option<usize>) {
 4933|    797|        let (min, max) = self.inner.size_hint();
 4934|    797|        ((min != 0).into(), max)
 4935|    797|    }
_RNvXsL_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13PathEvaluatorNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
 3981|  4.66k|#[derive(Clone)]
_RNvXs8_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13UnionIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 4886|     81|    fn next(&mut self) -> Option<Self::Item> {
 4887|       |        loop {
 4888|    157|            if let Some(tuple) = self.current_iterator.next() {
 4889|     34|                return Some(tuple);
 4890|    123|            }
 4891|    123|            if self.current_plan >= self.plans.len() {
 4892|     47|                return None;
 4893|     76|            }
 4894|     76|            self.current_iterator = self.plans[self.current_plan](self.input.clone());
 4895|     76|            self.current_plan += 1;
 4896|       |        }
 4897|     81|    }
_RNvXs9_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_24ConsecutiveDeduplicationNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 4908|  3.33k|    fn next(&mut self) -> Option<Self::Item> {
 4909|       |        // Basic idea. We buffer the previous result and we only emit it when we know the next one or it's the end
 4910|       |        loop {
 4911|  4.18k|            if let Some(next) = self.inner.next() {
 4912|    930|                match next {
 4913|    930|                    Ok(next) => match self.current.take() {
 4914|    136|                        Some(current) if current != next => {
 4915|     75|                            // We found a relevant value
 4916|     75|                            self.current = Some(next);
 4917|     75|                            return Some(Ok(current));
 4918|       |                        }
 4919|    855|                        _ => {
 4920|    855|                            //  We discard the value and move to the next one
 4921|    855|                            self.current = Some(next);
 4922|    855|                        }
 4923|       |                    },
 4924|      0|                    Err(error) => return Some(Err(error)), // We swap but it's fine. It's an error.
 4925|       |                }
 4926|       |            } else {
 4927|  3.25k|                return self.current.take().map(Ok);
 4928|       |            }
 4929|       |        }
 4930|  3.33k|    }
_RNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_15SimpleEvaluator29build_graph_pattern_evaluator:
  281|   106k|    fn build_graph_pattern_evaluator(
  282|   106k|        &self,
  283|   106k|        pattern: &GraphPattern,
  284|   106k|        encoded_variables: &mut Vec<Variable>,
  285|   106k|        stat_children: &mut Vec<Rc<EvalNodeWithStats>>,
  286|   106k|    ) -> Rc<dyn Fn(EncodedTuple) -> EncodedTuplesIterator> {
  287|   106k|        match pattern {
  288|       |            GraphPattern::Values {
  289|  2.40k|                variables,
  290|  2.40k|                bindings,
  291|  2.40k|            } => {
  292|  2.40k|                let encoding = variables
  293|  2.40k|                    .iter()
  294|  2.40k|                    .map(|v| encode_variable(encoded_variables, v))
  295|  2.40k|                    .collect::<Vec<_>>();
  296|  2.40k|                let encoded_tuples = bindings
  297|  2.40k|                    .iter()
  298|  2.40k|                    .map(|row| {
  299|       |                        let mut result = EncodedTuple::with_capacity(variables.len());
  300|       |                        for (key, value) in row.iter().enumerate() {
  301|       |                            if let Some(term) = value {
  302|       |                                result.set(
  303|       |                                    encoding[key],
  304|       |                                    match term {
  305|       |                                        GroundTerm::NamedNode(node) => self.encode_term(node),
  306|       |                                        GroundTerm::Literal(literal) => self.encode_term(literal),
  307|       |                                        GroundTerm::Triple(triple) => self.encode_triple(triple),
  308|       |                                    },
  309|       |                                );
  310|       |                            }
  311|       |                        }
  312|       |                        result
  313|  2.40k|                    })
  314|  2.40k|                    .collect::<Vec<_>>();
  315|  2.40k|                Rc::new(move |from| {
  316|       |                    Box::new(
  317|       |                        encoded_tuples
  318|       |                            .iter()
  319|       |                            .filter_map(move |t| Some(Ok(t.combine_with(&from)?)))
  320|       |                            .collect::<Vec<_>>()
  321|       |                            .into_iter(),
  322|       |                    )
  323|  2.40k|                })
  324|       |            }
  325|       |            GraphPattern::Service {
  326|      0|                name,
  327|      0|                inner,
  328|      0|                silent,
  329|      0|            } => {
  330|      0|                #[allow(clippy::shadow_same)]
  331|      0|                let silent = *silent;
  332|      0|                let service_name =
  333|      0|                    TupleSelector::from_named_node_pattern(name, encoded_variables, &self.dataset);
  334|      0|                self.build_graph_pattern_evaluator(inner, encoded_variables, &mut Vec::new()); // We call recursively to fill "encoded_variables"
  335|      0|                let graph_pattern = spargebra::algebra::GraphPattern::from(inner.as_ref());
  336|      0|                let variables = Rc::from(encoded_variables.as_slice());
  337|      0|                let eval = self.clone();
  338|      0|                Rc::new(move |from| {
  339|       |                    match eval.evaluate_service(
  340|       |                        &service_name,
  341|       |                        &graph_pattern,
  342|       |                        Rc::clone(&variables),
  343|       |                        &from,
  344|       |                    ) {
  345|       |                        Ok(result) => Box::new(result.filter_map(move |binding| {
  346|       |                            binding
  347|       |                                .map(|binding| binding.combine_with(&from))
  348|       |                                .transpose()
  349|       |                        })),
  350|       |                        Err(e) => {
  351|       |                            if silent {
  352|       |                                Box::new(once(Ok(from)))
  353|       |                            } else {
  354|       |                                Box::new(once(Err(e)))
  355|       |                            }
  356|       |                        }
  357|       |                    }
  358|      0|                })
  359|       |            }
  360|       |            GraphPattern::QuadPattern {
  361|  37.8k|                subject,
  362|  37.8k|                predicate,
  363|  37.8k|                object,
  364|  37.8k|                graph_name,
  365|  37.8k|            } => {
  366|  37.8k|                let subject = TupleSelector::from_ground_term_pattern(
  367|  37.8k|                    subject,
  368|  37.8k|                    encoded_variables,
  369|  37.8k|                    &self.dataset,
  370|  37.8k|                );
  371|  37.8k|                let predicate = TupleSelector::from_named_node_pattern(
  372|  37.8k|                    predicate,
  373|  37.8k|                    encoded_variables,
  374|  37.8k|                    &self.dataset,
  375|  37.8k|                );
  376|  37.8k|                let object = TupleSelector::from_ground_term_pattern(
  377|  37.8k|                    object,
  378|  37.8k|                    encoded_variables,
  379|  37.8k|                    &self.dataset,
  380|  37.8k|                );
  381|  37.8k|                let graph_name = TupleSelector::from_graph_name_pattern(
  382|  37.8k|                    graph_name,
  383|  37.8k|                    encoded_variables,
  384|  37.8k|                    &self.dataset,
  385|  37.8k|                );
  386|  37.8k|                let dataset = Rc::clone(&self.dataset);
  387|  37.8k|                Rc::new(move |from| {
  388|       |                    let iter = dataset.encoded_quads_for_pattern(
  389|       |                        subject.get_pattern_value(&from).as_ref(),
  390|       |                        predicate.get_pattern_value(&from).as_ref(),
  391|       |                        object.get_pattern_value(&from).as_ref(),
  392|       |                        graph_name.get_pattern_value(&from).as_ref(),
  393|       |                    );
  394|       |                    let subject = subject.clone();
  395|       |                    let predicate = predicate.clone();
  396|       |                    let object = object.clone();
  397|       |                    let graph_name = graph_name.clone();
  398|       |                    Box::new(iter.filter_map(move |quad| match quad {
  399|       |                        Ok(quad) => {
  400|       |                            let mut new_tuple = from.clone();
  401|       |                            put_pattern_value(&subject, quad.subject, &mut new_tuple)?;
  402|       |                            put_pattern_value(&predicate, quad.predicate, &mut new_tuple)?;
  403|       |                            put_pattern_value(&object, quad.object, &mut new_tuple)?;
  404|       |                            put_pattern_value(&graph_name, quad.graph_name, &mut new_tuple)?;
  405|       |                            Some(Ok(new_tuple))
  406|       |                        }
  407|       |                        Err(error) => Some(Err(error)),
  408|       |                    }))
  409|  37.8k|                })
  410|       |            }
  411|       |            GraphPattern::Path {
  412|  12.1k|                subject,
  413|  12.1k|                path,
  414|  12.1k|                object,
  415|  12.1k|                graph_name,
  416|  12.1k|            } => {
  417|  12.1k|                let subject = TupleSelector::from_ground_term_pattern(
  418|  12.1k|                    subject,
  419|  12.1k|                    encoded_variables,
  420|  12.1k|                    &self.dataset,
  421|  12.1k|                );
  422|  12.1k|                let path = self.encode_property_path(path);
  423|  12.1k|
  424|  12.1k|                let object = TupleSelector::from_ground_term_pattern(
  425|  12.1k|                    object,
  426|  12.1k|                    encoded_variables,
  427|  12.1k|                    &self.dataset,
  428|  12.1k|                );
  429|  12.1k|                let graph_name = TupleSelector::from_graph_name_pattern(
  430|  12.1k|                    graph_name,
  431|  12.1k|                    encoded_variables,
  432|  12.1k|                    &self.dataset,
  433|  12.1k|                );
  434|  12.1k|                let dataset = Rc::clone(&self.dataset);
  435|  12.1k|                Rc::new(move |from| {
  436|       |                    let input_subject = subject.get_pattern_value(&from);
  437|       |                    let input_object = object.get_pattern_value(&from);
  438|       |                    let input_graph_name = graph_name.get_pattern_value(&from);
  439|       |                    let path_eval = PathEvaluator {
  440|       |                        dataset: Rc::clone(&dataset),
  441|       |                    };
  442|       |                    match (input_subject, input_object, input_graph_name) {
  443|       |                        (Some(input_subject), Some(input_object), Some(input_graph_name)) => {
  444|       |                            match path_eval.eval_closed_in_graph(
  445|       |                                &path,
  446|       |                                &input_subject,
  447|       |                                &input_object,
  448|       |                                &input_graph_name,
  449|       |                            ) {
  450|       |                                Ok(true) => Box::new(once(Ok(from))),
  451|       |                                Ok(false) => Box::new(empty()),
  452|       |                                Err(e) => Box::new(once(Err(e))),
  453|       |                            }
  454|       |                        }
  455|       |                        (Some(input_subject), None, Some(input_graph_name)) => {
  456|       |                            let object = object.clone();
  457|       |                            Box::new(
  458|       |                                path_eval
  459|       |                                    .eval_from_in_graph(&path, &input_subject, &input_graph_name)
  460|       |                                    .filter_map(move |o| match o {
  461|       |                                        Ok(o) => {
  462|       |                                            let mut new_tuple = from.clone();
  463|       |                                            put_pattern_value(&object, o, &mut new_tuple)?;
  464|       |                                            Some(Ok(new_tuple))
  465|       |                                        }
  466|       |                                        Err(error) => Some(Err(error)),
  467|       |                                    }),
  468|       |                            )
  469|       |                        }
  470|       |                        (None, Some(input_object), Some(input_graph_name)) => {
  471|       |                            let subject = subject.clone();
  472|       |                            Box::new(
  473|       |                                path_eval
  474|       |                                    .eval_to_in_graph(&path, &input_object, &input_graph_name)
  475|       |                                    .filter_map(move |s| match s {
  476|       |                                        Ok(s) => {
  477|       |                                            let mut new_tuple = from.clone();
  478|       |                                            put_pattern_value(&subject, s, &mut new_tuple)?;
  479|       |                                            Some(Ok(new_tuple))
  480|       |                                        }
  481|       |                                        Err(error) => Some(Err(error)),
  482|       |                                    }),
  483|       |                            )
  484|       |                        }
  485|       |                        (None, None, Some(input_graph_name)) => {
  486|       |                            let subject = subject.clone();
  487|       |                            let object = object.clone();
  488|       |                            Box::new(
  489|       |                                path_eval
  490|       |                                    .eval_open_in_graph(&path, &input_graph_name)
  491|       |                                    .filter_map(move |so| match so {
  492|       |                                        Ok((s, o)) => {
  493|       |                                            let mut new_tuple = from.clone();
  494|       |                                            put_pattern_value(&subject, s, &mut new_tuple)?;
  495|       |                                            put_pattern_value(&object, o, &mut new_tuple)?;
  496|       |                                            Some(Ok(new_tuple))
  497|       |                                        }
  498|       |                                        Err(error) => Some(Err(error)),
  499|       |                                    }),
  500|       |                            )
  501|       |                        }
  502|       |                        (Some(input_subject), Some(input_object), None) => {
  503|       |                            let graph_name = graph_name.clone();
  504|       |                            Box::new(
  505|       |                                path_eval
  506|       |                                    .eval_closed_in_unknown_graph(
  507|       |                                        &path,
  508|       |                                        &input_subject,
  509|       |                                        &input_object,
  510|       |                                    )
  511|       |                                    .filter_map(move |r| match r {
  512|       |                                        Ok(g) => {
  513|       |                                            let mut new_tuple = from.clone();
  514|       |                                            put_pattern_value(&graph_name, g, &mut new_tuple)?;
  515|       |                                            Some(Ok(new_tuple))
  516|       |                                        }
  517|       |                                        Err(error) => Some(Err(error)),
  518|       |                                    }),
  519|       |                            )
  520|       |                        }
  521|       |                        (Some(input_subject), None, None) => {
  522|       |                            let object = object.clone();
  523|       |                            let graph_name = graph_name.clone();
  524|       |                            Box::new(
  525|       |                                path_eval
  526|       |                                    .eval_from_in_unknown_graph(&path, &input_subject)
  527|       |                                    .filter_map(move |r| match r {
  528|       |                                        Ok((o, g)) => {
  529|       |                                            let mut new_tuple = from.clone();
  530|       |                                            put_pattern_value(&object, o, &mut new_tuple)?;
  531|       |                                            put_pattern_value(&graph_name, g, &mut new_tuple)?;
  532|       |                                            Some(Ok(new_tuple))
  533|       |                                        }
  534|       |                                        Err(error) => Some(Err(error)),
  535|       |                                    }),
  536|       |                            )
  537|       |                        }
  538|       |                        (None, Some(input_object), None) => {
  539|       |                            let subject = subject.clone();
  540|       |                            let graph_name = graph_name.clone();
  541|       |                            Box::new(
  542|       |                                path_eval
  543|       |                                    .eval_to_in_unknown_graph(&path, &input_object)
  544|       |                                    .filter_map(move |r| match r {
  545|       |                                        Ok((s, g)) => {
  546|       |                                            let mut new_tuple = from.clone();
  547|       |                                            put_pattern_value(&subject, s, &mut new_tuple)?;
  548|       |                                            put_pattern_value(&graph_name, g, &mut new_tuple)?;
  549|       |
  550|       |                                            Some(Ok(new_tuple))
  551|       |                                        }
  552|       |                                        Err(error) => Some(Err(error)),
  553|       |                                    }),
  554|       |                            )
  555|       |                        }
  556|       |                        (None, None, None) => {
  557|       |                            let subject = subject.clone();
  558|       |                            let object = object.clone();
  559|       |                            let graph_name = graph_name.clone();
  560|       |                            Box::new(path_eval.eval_open_in_unknown_graph(&path).filter_map(
  561|       |                                move |r| match r {
  562|       |                                    Ok((s, o, g)) => {
  563|       |                                        let mut new_tuple = from.clone();
  564|       |                                        put_pattern_value(&subject, s, &mut new_tuple)?;
  565|       |                                        put_pattern_value(&object, o, &mut new_tuple)?;
  566|       |                                        put_pattern_value(&graph_name, g, &mut new_tuple)?;
  567|       |                                        Some(Ok(new_tuple))
  568|       |                                    }
  569|       |                                    Err(error) => Some(Err(error)),
  570|       |                                },
  571|       |                            ))
  572|       |                        }
  573|       |                    }
  574|  12.1k|                })
  575|       |            }
  576|       |            GraphPattern::Join {
  577|  24.5k|                left,
  578|  24.5k|                right,
  579|  24.5k|                algorithm,
  580|  24.5k|            } => {
  581|  24.5k|                let (left, left_stats) = self.graph_pattern_evaluator(left, encoded_variables);
  582|  24.5k|                stat_children.push(left_stats);
  583|  24.5k|                let (right, right_stats) = self.graph_pattern_evaluator(right, encoded_variables);
  584|  24.5k|                stat_children.push(right_stats);
  585|  24.5k|
  586|  24.5k|                match algorithm {
  587|  24.5k|                    JoinAlgorithm::HashBuildLeftProbeRight { keys } => {
  588|  24.5k|                        let build = left;
  589|  24.5k|                        let probe = right;
  590|  24.5k|                        if keys.is_empty() {
  591|       |                            // Cartesian product
  592|  24.5k|                            Rc::new(move |from| {
  593|       |                                let mut errors = Vec::default();
  594|       |                                let build_values = build(from.clone())
  595|       |                                    .filter_map(|result| match result {
  596|       |                                        Ok(result) => Some(result),
  597|       |                                        Err(error) => {
  598|       |                                            errors.push(Err(error));
  599|       |                                            None
  600|       |                                        }
  601|       |                                    })
  602|       |                                    .collect::<Vec<_>>();
  603|       |                                Box::new(CartesianProductJoinIterator {
  604|       |                                    probe_iter: probe(from),
  605|       |                                    built: build_values,
  606|       |                                    buffered_results: errors,
  607|       |                                })
  608|  24.5k|                            })
  609|       |                        } else {
  610|       |                            // Real hash join
  611|     17|                            let keys = keys
  612|     17|                                .iter()
  613|     17|                                .map(|v| encode_variable(encoded_variables, v))
  614|     17|                                .collect::<Vec<_>>();
  615|     17|                            Rc::new(move |from| {
  616|       |                                let mut errors = Vec::default();
  617|       |                                let mut built_values = EncodedTupleSet::new(keys.clone());
  618|       |                                built_values.extend(build(from.clone()).filter_map(|result| {
  619|       |                                    match result {
  620|       |                                        Ok(result) => Some(result),
  621|       |                                        Err(error) => {
  622|       |                                            errors.push(Err(error));
  623|       |                                            None
  624|       |                                        }
  625|       |                                    }
  626|       |                                }));
  627|       |                                Box::new(HashJoinIterator {
  628|       |                                    probe_iter: probe(from),
  629|       |                                    built: built_values,
  630|       |                                    buffered_results: errors,
  631|       |                                })
  632|     17|                            })
  633|       |                        }
  634|       |                    }
  635|       |                }
  636|       |            }
  637|  22.3k|            GraphPattern::Lateral { left, right } => {
  638|  22.3k|                let (left, left_stats) = self.graph_pattern_evaluator(left, encoded_variables);
  639|  22.3k|                stat_children.push(left_stats);
  640|       |
  641|       |                if let GraphPattern::LeftJoin {
  642|     38|                    left: nested_left,
  643|     38|                    right: nested_right,
  644|     38|                    expression,
  645|       |                    ..
  646|  22.3k|                } = right.as_ref()
  647|       |                {
  648|     38|                    if nested_left.is_empty_singleton() {
  649|       |                        // We are in a ForLoopLeftJoin
  650|     37|                        let right =
  651|     37|                            GraphPattern::filter(nested_right.as_ref().clone(), expression.clone());
  652|     37|                        let (right, right_stats) =
  653|     37|                            self.graph_pattern_evaluator(&right, encoded_variables);
  654|     37|                        stat_children.push(right_stats);
  655|     37|                        return Rc::new(move |from| {
  656|       |                            Box::new(ForLoopLeftJoinIterator {
  657|       |                                right_evaluator: Rc::clone(&right),
  658|       |                                left_iter: left(from),
  659|       |                                current_right: Box::new(empty()),
  660|       |                            })
  661|     37|                        });
  662|      1|                    }
  663|  22.2k|                }
  664|  22.2k|                let (right, right_stats) = self.graph_pattern_evaluator(right, encoded_variables);
  665|  22.2k|                stat_children.push(right_stats);
  666|  22.2k|                Rc::new(move |from| {
  667|       |                    let right = Rc::clone(&right);
  668|       |                    Box::new(left(from).flat_map(move |t| match t {
  669|       |                        Ok(t) => right(t),
  670|       |                        Err(e) => Box::new(once(Err(e))),
  671|       |                    }))
  672|  22.2k|                })
  673|       |            }
  674|       |            GraphPattern::Minus {
  675|     40|                left,
  676|     40|                right,
  677|     40|                algorithm,
  678|     40|            } => {
  679|     40|                let (left, left_stats) = self.graph_pattern_evaluator(left, encoded_variables);
  680|     40|                stat_children.push(left_stats);
  681|     40|                let (right, right_stats) = self.graph_pattern_evaluator(right, encoded_variables);
  682|     40|                stat_children.push(right_stats);
  683|     40|
  684|     40|                match algorithm {
  685|     40|                    MinusAlgorithm::HashBuildRightProbeLeft { keys } => {
  686|     40|                        if keys.is_empty() {
  687|     39|                            Rc::new(move |from| {
  688|       |                                let right: Vec<_> =
  689|       |                                    right(from.clone()).filter_map(Result::ok).collect();
  690|       |                                Box::new(left(from).filter(move |left_tuple| {
  691|       |                                    if let Ok(left_tuple) = left_tuple {
  692|       |                                        !right.iter().any(|right_tuple| {
  693|       |                                            are_compatible_and_not_disjointed(
  694|       |                                                left_tuple,
  695|       |                                                right_tuple,
  696|       |                                            )
  697|       |                                        })
  698|       |                                    } else {
  699|       |                                        true
  700|       |                                    }
  701|       |                                }))
  702|     39|                            })
  703|       |                        } else {
  704|      1|                            let keys = keys
  705|      1|                                .iter()
  706|      1|                                .map(|v| encode_variable(encoded_variables, v))
  707|      1|                                .collect::<Vec<_>>();
  708|      1|                            Rc::new(move |from| {
  709|       |                                let mut right_values = EncodedTupleSet::new(keys.clone());
  710|       |                                right_values.extend(right(from.clone()).filter_map(Result::ok));
  711|       |                                Box::new(left(from).filter(move |left_tuple| {
  712|       |                                    if let Ok(left_tuple) = left_tuple {
  713|       |                                        !right_values.get(left_tuple).iter().any(|right_tuple| {
  714|       |                                            are_compatible_and_not_disjointed(
  715|       |                                                left_tuple,
  716|       |                                                right_tuple,
  717|       |                                            )
  718|       |                                        })
  719|       |                                    } else {
  720|       |                                        true
  721|       |                                    }
  722|       |                                }))
  723|      1|                            })
  724|       |                        }
  725|       |                    }
  726|       |                }
  727|       |            }
  728|       |            GraphPattern::LeftJoin {
  729|    370|                left,
  730|    370|                right,
  731|    370|                expression,
  732|    370|                algorithm,
  733|    370|            } => {
  734|    370|                let (left, left_stats) = self.graph_pattern_evaluator(left, encoded_variables);
  735|    370|                stat_children.push(left_stats);
  736|    370|                let (right, right_stats) = self.graph_pattern_evaluator(right, encoded_variables);
  737|    370|                stat_children.push(right_stats);
  738|    370|                let expression =
  739|    370|                    self.expression_evaluator(expression, encoded_variables, stat_children);
  740|    370|
  741|    370|                match algorithm {
  742|    370|                    LeftJoinAlgorithm::HashBuildRightProbeLeft { keys } => {
  743|    370|                        // Real hash join
  744|    370|                        let keys = keys
  745|    370|                            .iter()
  746|    370|                            .map(|v| encode_variable(encoded_variables, v))
  747|    370|                            .collect::<Vec<_>>();
  748|    370|                        Rc::new(move |from| {
  749|       |                            let mut errors = Vec::default();
  750|       |                            let mut right_values = EncodedTupleSet::new(keys.clone());
  751|       |                            right_values.extend(right(from.clone()).filter_map(
  752|       |                                |result| match result {
  753|       |                                    Ok(result) => Some(result),
  754|       |                                    Err(error) => {
  755|       |                                        errors.push(Err(error));
  756|       |                                        None
  757|       |                                    }
  758|       |                                },
  759|       |                            ));
  760|       |                            Box::new(HashLeftJoinIterator {
  761|       |                                left_iter: left(from),
  762|       |                                right: right_values,
  763|       |                                buffered_results: errors,
  764|       |                                expression: Rc::clone(&expression),
  765|       |                            })
  766|    370|                        })
  767|    370|                    }
  768|    370|                }
  769|       |            }
  770|     44|            GraphPattern::Filter { inner, expression } => {
  771|     44|                let (child, child_stats) = self.graph_pattern_evaluator(inner, encoded_variables);
  772|     44|                stat_children.push(child_stats);
  773|     44|                let expression =
  774|     44|                    self.expression_evaluator(expression, encoded_variables, stat_children);
  775|     44|
  776|     44|                Rc::new(move |from| {
  777|       |                    let expression = Rc::clone(&expression);
  778|       |                    Box::new(child(from).filter(move |tuple| {
  779|       |                        match tuple {
  780|       |                            Ok(tuple) => expression(tuple)
  781|       |                                .and_then(|term| to_bool(&term))
  782|       |                                .unwrap_or(false),
  783|       |                            Err(_) => true,
  784|       |                        }
  785|       |                    }))
  786|     44|                })
  787|       |            }
  788|     38|            GraphPattern::Union { inner } => {
  789|     38|                let children = inner
  790|     38|                    .iter()
  791|     38|                    .map(|child| {
  792|       |                        let (child, child_stats) =
  793|       |                            self.graph_pattern_evaluator(child, encoded_variables);
  794|       |                        stat_children.push(child_stats);
  795|       |                        child
  796|     38|                    })
  797|     38|                    .collect::<Vec<_>>();
  798|     38|
  799|     38|                Rc::new(move |from| {
  800|       |                    Box::new(UnionIterator {
  801|       |                        plans: children.clone(),
  802|       |                        input: from,
  803|       |                        current_iterator: Box::new(empty()),
  804|       |                        current_plan: 0,
  805|       |                    })
  806|     38|                })
  807|       |            }
  808|       |            GraphPattern::Extend {
  809|    602|                inner,
  810|    602|                variable,
  811|    602|                expression,
  812|    602|            } => {
  813|    602|                let (child, child_stats) = self.graph_pattern_evaluator(inner, encoded_variables);
  814|    602|                stat_children.push(child_stats);
  815|    602|
  816|    602|                let position = encode_variable(encoded_variables, variable);
  817|    602|                let expression =
  818|    602|                    self.expression_evaluator(expression, encoded_variables, stat_children);
  819|    602|                Rc::new(move |from| {
  820|       |                    let expression = Rc::clone(&expression);
  821|       |                    Box::new(child(from).map(move |tuple| {
  822|       |                        let mut tuple = tuple?;
  823|       |                        if let Some(value) = expression(&tuple) {
  824|       |                            tuple.set(position, value);
  825|       |                        }
  826|       |                        Ok(tuple)
  827|       |                    }))
  828|    602|                })
  829|       |            }
  830|      0|            GraphPattern::OrderBy { inner, expression } => {
  831|      0|                let (child, child_stats) = self.graph_pattern_evaluator(inner, encoded_variables);
  832|      0|                stat_children.push(child_stats);
  833|      0|                let by = expression
  834|      0|                    .iter()
  835|      0|                    .map(|comp| match comp {
  836|       |                        OrderExpression::Asc(expression) => ComparatorFunction::Asc(
  837|       |                            self.expression_evaluator(expression, encoded_variables, stat_children),
  838|       |                        ),
  839|       |                        OrderExpression::Desc(expression) => ComparatorFunction::Desc(
  840|       |                            self.expression_evaluator(expression, encoded_variables, stat_children),
  841|       |                        ),
  842|      0|                    })
  843|      0|                    .collect::<Vec<_>>();
  844|      0|                let dataset = Rc::clone(&self.dataset);
  845|      0|                Rc::new(move |from| {
  846|       |                    let mut errors = Vec::default();
  847|       |                    let mut values = child(from)
  848|       |                        .filter_map(|result| match result {
  849|       |                            Ok(result) => Some(result),
  850|       |                            Err(error) => {
  851|       |                                errors.push(Err(error));
  852|       |                                None
  853|       |                            }
  854|       |                        })
  855|       |                        .collect::<Vec<_>>();
  856|       |                    values.sort_unstable_by(|a, b| {
  857|       |                        for comp in &by {
  858|       |                            match comp {
  859|       |                                ComparatorFunction::Asc(expression) => {
  860|       |                                    match cmp_terms(
  861|       |                                        &dataset,
  862|       |                                        expression(a).as_ref(),
  863|       |                                        expression(b).as_ref(),
  864|       |                                    ) {
  865|       |                                        Ordering::Greater => return Ordering::Greater,
  866|       |                                        Ordering::Less => return Ordering::Less,
  867|       |                                        Ordering::Equal => (),
  868|       |                                    }
  869|       |                                }
  870|       |                                ComparatorFunction::Desc(expression) => {
  871|       |                                    match cmp_terms(
  872|       |                                        &dataset,
  873|       |                                        expression(a).as_ref(),
  874|       |                                        expression(b).as_ref(),
  875|       |                                    ) {
  876|       |                                        Ordering::Greater => return Ordering::Less,
  877|       |                                        Ordering::Less => return Ordering::Greater,
  878|       |                                        Ordering::Equal => (),
  879|       |                                    }
  880|       |                                }
  881|       |                            }
  882|       |                        }
  883|       |                        Ordering::Equal
  884|       |                    });
  885|       |                    Box::new(errors.into_iter().chain(values.into_iter().map(Ok)))
  886|      0|                })
  887|       |            }
  888|  1.58k|            GraphPattern::Distinct { inner } => {
  889|  1.58k|                let (child, child_stats) = self.graph_pattern_evaluator(inner, encoded_variables);
  890|  1.58k|                stat_children.push(child_stats);
  891|  1.58k|                Rc::new(move |from| Box::new(hash_deduplicate(child(from))))
  892|       |            }
  893|  2.46k|            GraphPattern::Reduced { inner } => {
  894|  2.46k|                let (child, child_stats) = self.graph_pattern_evaluator(inner, encoded_variables);
  895|  2.46k|                stat_children.push(child_stats);
  896|  2.46k|                Rc::new(move |from| {
  897|       |                    Box::new(ConsecutiveDeduplication {
  898|       |                        inner: child(from),
  899|       |                        current: None,
  900|       |                    })
  901|  2.46k|                })
  902|       |            }
  903|       |            GraphPattern::Slice {
  904|      0|                inner,
  905|      0|                start,
  906|      0|                length,
  907|      0|            } => {
  908|      0|                let (mut child, child_stats) =
  909|      0|                    self.graph_pattern_evaluator(inner, encoded_variables);
  910|      0|                stat_children.push(child_stats);
  911|      0|                #[allow(clippy::shadow_same)]
  912|      0|                let start = *start;
  913|      0|                if start > 0 {
  914|      0|                    child = Rc::new(move |from| Box::new(child(from).skip(start)));
  915|      0|                }
  916|      0|                if let Some(length) = *length {
  917|      0|                    child = Rc::new(move |from| Box::new(child(from).take(length)));
  918|      0|                }
  919|      0|                child
  920|       |            }
  921|  2.06k|            GraphPattern::Project { inner, variables } => {
  922|  2.06k|                let mut inner_encoded_variables = variables.clone();
  923|  2.06k|                let (child, child_stats) =
  924|  2.06k|                    self.graph_pattern_evaluator(inner, &mut inner_encoded_variables);
  925|  2.06k|                stat_children.push(child_stats);
  926|  2.06k|                let mapping = variables
  927|  2.06k|                    .iter()
  928|  2.06k|                    .enumerate()
  929|  2.06k|                    .map(|(new_variable, variable)| {
  930|       |                        (new_variable, encode_variable(encoded_variables, variable))
  931|  2.06k|                    })
  932|  2.06k|                    .collect::<Rc<[(usize, usize)]>>();
  933|  2.06k|                Rc::new(move |from| {
  934|       |                    let mapping = Rc::clone(&mapping);
  935|       |                    let mut input_tuple = EncodedTuple::with_capacity(mapping.len());
  936|       |                    for (input_key, output_key) in &*mapping {
  937|       |                        if let Some(value) = from.get(*output_key) {
  938|       |                            input_tuple.set(*input_key, value.clone());
  939|       |                        }
  940|       |                    }
  941|       |                    Box::new(child(input_tuple).filter_map(move |tuple| {
  942|       |                        match tuple {
  943|       |                            Ok(tuple) => {
  944|       |                                let mut output_tuple = from.clone();
  945|       |                                for (input_key, output_key) in &*mapping {
  946|       |                                    if let Some(value) = tuple.get(*input_key) {
  947|       |                                        if let Some(existing_value) = output_tuple.get(*output_key)
  948|       |                                        {
  949|       |                                            if existing_value != value {
  950|       |                                                return None; // Conflict
  951|       |                                            }
  952|       |                                        } else {
  953|       |                                            output_tuple.set(*output_key, value.clone());
  954|       |                                        }
  955|       |                                    }
  956|       |                                }
  957|       |                                Some(Ok(output_tuple))
  958|       |                            }
  959|       |                            Err(e) => Some(Err(e)),
  960|       |                        }
  961|       |                    }))
  962|  2.06k|                })
  963|       |            }
  964|       |            GraphPattern::Group {
  965|     16|                inner,
  966|     16|                aggregates,
  967|     16|                variables,
  968|     16|            } => {
  969|     16|                let (child, child_stats) = self.graph_pattern_evaluator(inner, encoded_variables);
  970|     16|                stat_children.push(child_stats);
  971|     16|                let key_variables = variables
  972|     16|                    .iter()
  973|     16|                    .map(|k| encode_variable(encoded_variables, k))
  974|     16|                    .collect::<Rc<[_]>>();
  975|     16|                let aggregate_input_expressions = aggregates
  976|     16|                    .iter()
  977|     16|                    .map(|(_, expression)| match expression {
  978|       |                        AggregateExpression::CountSolutions { .. } => None,
  979|       |                        AggregateExpression::FunctionCall { expr, .. } => {
  980|       |                            Some(self.expression_evaluator(expr, encoded_variables, stat_children))
  981|       |                        }
  982|     16|                    })
  983|     16|                    .collect::<Vec<_>>();
  984|     16|                let accumulator_builders = aggregates
  985|     16|                    .iter()
  986|     16|                    .map(|(_, aggregate)| Self::accumulator_builder(&self.dataset, aggregate))
  987|     16|                    .collect::<Vec<_>>();
  988|     16|                let accumulator_variables = aggregates
  989|     16|                    .iter()
  990|     16|                    .map(|(variable, _)| encode_variable(encoded_variables, variable))
  991|     16|                    .collect::<Vec<_>>();
  992|     16|                Rc::new(move |from| {
  993|       |                    let tuple_size = from.capacity();
  994|       |                    let key_variables = Rc::clone(&key_variables);
  995|       |                    let mut errors = Vec::default();
  996|       |                    let mut accumulators_for_group =
  997|       |                        HashMap::<Vec<Option<EncodedTerm>>, Vec<Box<dyn Accumulator>>>::default();
  998|       |                    if key_variables.is_empty() {
  999|       |                        // There is always a single group if there is no GROUP BY
 1000|       |                        accumulators_for_group.insert(
 1001|       |                            Vec::new(),
 1002|       |                            accumulator_builders.iter().map(|c| c()).collect::<Vec<_>>(),
 1003|       |                        );
 1004|       |                    }
 1005|       |                    child(from)
 1006|       |                        .filter_map(|result| match result {
 1007|       |                            Ok(result) => Some(result),
 1008|       |                            Err(error) => {
 1009|       |                                errors.push(error);
 1010|       |                                None
 1011|       |                            }
 1012|       |                        })
 1013|       |                        .for_each(|tuple| {
 1014|       |                            // TODO avoid copy for key?
 1015|       |                            let key = key_variables
 1016|       |                                .iter()
 1017|       |                                .map(|v| tuple.get(*v).cloned())
 1018|       |                                .collect();
 1019|       |
 1020|       |                            let key_accumulators =
 1021|       |                                accumulators_for_group.entry(key).or_insert_with(|| {
 1022|       |                                    accumulator_builders.iter().map(|c| c()).collect::<Vec<_>>()
 1023|       |                                });
 1024|       |                            for (accumulator, input_expression) in key_accumulators
 1025|       |                                .iter_mut()
 1026|       |                                .zip(&aggregate_input_expressions)
 1027|       |                            {
 1028|       |                                accumulator.add(
 1029|       |                                    input_expression
 1030|       |                                        .as_ref()
 1031|       |                                        .and_then(|parameter| parameter(&tuple)),
 1032|       |                                );
 1033|       |                            }
 1034|       |                        });
 1035|       |                    let accumulator_variables = accumulator_variables.clone();
 1036|       |                    Box::new(
 1037|       |                        errors
 1038|       |                            .into_iter()
 1039|       |                            .map(Err)
 1040|       |                            .chain(accumulators_for_group.into_iter().map(
 1041|       |                                move |(key, accumulators)| {
 1042|       |                                    let mut result = EncodedTuple::with_capacity(tuple_size);
 1043|       |                                    for (variable, value) in key_variables.iter().zip(key) {
 1044|       |                                        if let Some(value) = value {
 1045|       |                                            result.set(*variable, value);
 1046|       |                                        }
 1047|       |                                    }
 1048|       |                                    for (accumulator, variable) in
 1049|       |                                        accumulators.into_iter().zip(&accumulator_variables)
 1050|       |                                    {
 1051|       |                                        if let Some(value) = accumulator.state() {
 1052|       |                                            result.set(*variable, value);
 1053|       |                                        }
 1054|       |                                    }
 1055|       |                                    Ok(result)
 1056|       |                                },
 1057|       |                            )),
 1058|       |                    )
 1059|     16|                })
 1060|       |            }
 1061|       |        }
 1062|   106k|    }
_RNvMsw_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_15EncodedTupleSet3get:
 5608|    291|    fn get(&self, tuple: &EncodedTuple) -> &[EncodedTuple] {
 5609|    291|        self.map.get(&self.tuple_key(tuple)).map_or(&[], |v| v)
 5610|    291|    }
_RNvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval15eval_node_label:
 5713|   106k|fn eval_node_label(node: &GraphPattern) -> String {
 5714|   106k|    match node {
 5715|  1.58k|        GraphPattern::Distinct { .. } => "Distinct(Hash)".to_owned(),
 5716|       |        GraphPattern::Extend {
 5717|    602|            expression,
 5718|    602|            variable,
 5719|    602|            ..
 5720|    602|        } => format!(
 5721|    602|            "Extend({} -> {variable})",
 5722|    602|            spargebra::algebra::Expression::from(expression)
 5723|    602|        ),
 5724|     44|        GraphPattern::Filter { expression, .. } => format!(
 5725|     44|            "Filter({})",
 5726|     44|            spargebra::algebra::Expression::from(expression)
 5727|     44|        ),
 5728|       |        GraphPattern::Group {
 5729|     16|            variables,
 5730|     16|            aggregates,
 5731|     16|            ..
 5732|     16|        } => {
 5733|     16|            format!(
 5734|     16|                "Aggregate({})",
 5735|     16|                format_list(variables.iter().map(ToString::to_string).chain(
 5736|     16|                    aggregates.iter().map(|(v, agg)| format!(
 5737|       |                        "{} -> {v}",
 5738|       |                        spargebra::algebra::AggregateExpression::from(agg)
 5739|     16|                    ))
 5740|     16|                ))
 5741|     16|            )
 5742|       |        }
 5743|  24.5k|        GraphPattern::Join { algorithm, .. } => match algorithm {
 5744|  24.5k|            JoinAlgorithm::HashBuildLeftProbeRight { keys } => format!(
 5745|  24.5k|                "LeftJoin(HashBuildLeftProbeRight, keys = {})",
 5746|  24.5k|                format_list(keys)
 5747|  24.5k|            ),
 5748|       |        },
 5749|  22.3k|        GraphPattern::Lateral { right, .. } => {
 5750|       |            if let GraphPattern::LeftJoin {
 5751|     38|                left: nested_left,
 5752|     38|                expression,
 5753|       |                ..
 5754|  22.3k|            } = right.as_ref()
 5755|       |            {
 5756|     38|                if nested_left.is_empty_singleton() {
 5757|       |                    // We are in a ForLoopLeftJoin
 5758|     37|                    return format!(
 5759|     37|                        "ForLoopLeftJoin(expression = {})",
 5760|     37|                        spargebra::algebra::Expression::from(expression)
 5761|     37|                    );
 5762|      1|                }
 5763|  22.2k|            }
 5764|  22.2k|            "Lateral".to_owned()
 5765|       |        }
 5766|       |        GraphPattern::LeftJoin {
 5767|    370|            algorithm,
 5768|    370|            expression,
 5769|    370|            ..
 5770|    370|        } => match algorithm {
 5771|    370|            LeftJoinAlgorithm::HashBuildRightProbeLeft { keys } => format!(
 5772|    370|                "LeftJoin(HashBuildRightProbeLeft, keys = {}, expression = {})",
 5773|    370|                format_list(keys),
 5774|    370|                spargebra::algebra::Expression::from(expression)
 5775|    370|            ),
 5776|       |        },
 5777|     40|        GraphPattern::Minus { algorithm, .. } => match algorithm {
 5778|     40|            MinusAlgorithm::HashBuildRightProbeLeft { keys } => format!(
 5779|     40|                "AntiJoin(HashBuildRightProbeLeft, keys = {})",
 5780|     40|                format_list(keys)
 5781|     40|            ),
 5782|       |        },
 5783|      0|        GraphPattern::OrderBy { expression, .. } => {
 5784|      0|            format!(
 5785|      0|                "Sort({})",
 5786|      0|                format_list(
 5787|      0|                    expression
 5788|      0|                        .iter()
 5789|      0|                        .map(spargebra::algebra::OrderExpression::from)
 5790|      0|                )
 5791|      0|            )
 5792|       |        }
 5793|       |        GraphPattern::Path {
 5794|  12.1k|            subject,
 5795|  12.1k|            path,
 5796|  12.1k|            object,
 5797|  12.1k|            graph_name,
 5798|       |        } => {
 5799|  12.1k|            if let Some(graph_name) = graph_name {
 5800|    724|                format!("Path({subject} {path} {object} {graph_name})")
 5801|       |            } else {
 5802|  11.4k|                format!("Path({subject} {path} {object})")
 5803|       |            }
 5804|       |        }
 5805|  2.06k|        GraphPattern::Project { variables, .. } => {
 5806|  2.06k|            format!("Project({})", format_list(variables))
 5807|       |        }
 5808|       |        GraphPattern::QuadPattern {
 5809|  37.8k|            subject,
 5810|  37.8k|            predicate,
 5811|  37.8k|            object,
 5812|  37.8k|            graph_name,
 5813|       |        } => {
 5814|  37.8k|            if let Some(graph_name) = graph_name {
 5815|  5.52k|                format!("QuadPattern({subject} {predicate} {object} {graph_name})")
 5816|       |            } else {
 5817|  32.3k|                format!("QuadPattern({subject} {predicate} {object})")
 5818|       |            }
 5819|       |        }
 5820|  2.46k|        GraphPattern::Reduced { .. } => "Reduced".to_owned(),
 5821|      0|        GraphPattern::Service { name, silent, .. } => {
 5822|      0|            if *silent {
 5823|      0|                format!("Service({name}, Silent)")
 5824|       |            } else {
 5825|      0|                format!("Service({name})")
 5826|       |            }
 5827|       |        }
 5828|      0|        GraphPattern::Slice { start, length, .. } => {
 5829|      0|            if let Some(length) = length {
 5830|      0|                format!("Slice(start = {start}, length = {length})")
 5831|       |            } else {
 5832|      0|                format!("Slice(start = {start})")
 5833|       |            }
 5834|       |        }
 5835|     38|        GraphPattern::Union { .. } => "Union".to_owned(),
 5836|  2.40k|        GraphPattern::Values { variables, .. } => {
 5837|  2.40k|            format!("StaticBindings({})", format_list(variables))
 5838|       |        }
 5839|       |    }
 5840|   106k|}
_RNvMs2_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13TupleSelector23from_graph_name_pattern:
 3882|  50.0k|    fn from_graph_name_pattern(
 3883|  50.0k|        graph_name_pattern: &Option<NamedNodePattern>,
 3884|  50.0k|        variables: &mut Vec<Variable>,
 3885|  50.0k|        dataset: &DatasetView,
 3886|  50.0k|    ) -> Self {
 3887|  50.0k|        if let Some(graph_name_pattern) = graph_name_pattern {
 3888|  6.25k|            Self::from_named_node_pattern(graph_name_pattern, variables, dataset)
 3889|       |        } else {
 3890|  43.7k|            Self::Constant(EncodedTerm::DefaultGraph)
 3891|       |        }
 3892|  50.0k|    }
_RNvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval17put_pattern_value:
 3916|    310|fn put_pattern_value(
 3917|    310|    selector: &TupleSelector,
 3918|    310|    value: EncodedTerm,
 3919|    310|    tuple: &mut EncodedTuple,
 3920|    310|) -> Option<()> {
 3921|    310|    match selector {
 3922|     79|        TupleSelector::Constant(c) => (*c == value).then_some(()),
 3923|    231|        TupleSelector::Variable(v) => {
 3924|    231|            if let Some(old) = tuple.get(*v) {
 3925|      5|                (value == *old).then_some(())
 3926|       |            } else {
 3927|    226|                tuple.set(*v, value);
 3928|    226|                Some(())
 3929|       |            }
 3930|       |        }
 3931|      0|        TupleSelector::TriplePattern(triple) => {
 3932|      0|            if let EncodedTerm::Triple(value) = value {
 3933|      0|                put_pattern_value(&triple.subject, value.subject.clone(), tuple)?;
 3934|      0|                put_pattern_value(&triple.predicate, value.predicate.clone(), tuple)?;
 3935|      0|                put_pattern_value(&triple.object, value.object.clone(), tuple)
 3936|       |            } else {
 3937|      0|                None
 3938|       |            }
 3939|       |        }
 3940|       |    }
 3941|    310|}
_RNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_15SimpleEvaluator20expression_evaluator:
 1138|  21.7k|    fn expression_evaluator(
 1139|  21.7k|        &self,
 1140|  21.7k|        expression: &Expression,
 1141|  21.7k|        encoded_variables: &mut Vec<Variable>,
 1142|  21.7k|        stat_children: &mut Vec<Rc<EvalNodeWithStats>>,
 1143|  21.7k|    ) -> Rc<dyn Fn(&EncodedTuple) -> Option<EncodedTerm>> {
 1144|  21.7k|        match expression {
 1145|    594|            Expression::NamedNode(t) => {
 1146|    594|                let t = self.encode_term(t);
 1147|    594|                Rc::new(move |_| Some(t.clone()))
 1148|       |            }
 1149|  3.96k|            Expression::Literal(t) => {
 1150|  3.96k|                let t = self.encode_term(t);
 1151|  3.96k|                Rc::new(move |_| Some(t.clone()))
 1152|       |            }
 1153|  4.45k|            Expression::Variable(v) => {
 1154|  4.45k|                let v = encode_variable(encoded_variables, v);
 1155|  4.45k|                Rc::new(move |tuple| tuple.get(v).cloned())
 1156|       |            }
 1157|    194|            Expression::Bound(v) => {
 1158|    194|                let v = encode_variable(encoded_variables, v);
 1159|    194|                Rc::new(move |tuple| Some(tuple.contains(v).into()))
 1160|       |            }
 1161|    134|            Expression::Exists(plan) => {
 1162|    134|                let (eval, stats) = self.graph_pattern_evaluator(plan, encoded_variables);
 1163|    134|                stat_children.push(stats);
 1164|    134|                Rc::new(move |tuple| Some(eval(tuple.clone()).next().is_some().into()))
 1165|       |            }
 1166|     32|            Expression::Or(inner) => {
 1167|     32|                let children = inner
 1168|     32|                    .iter()
 1169|     32|                    .map(|i| self.expression_evaluator(i, encoded_variables, stat_children))
 1170|     32|                    .collect::<Rc<[_]>>();
 1171|     32|                Rc::new(move |tuple| {
 1172|       |                    let mut error = false;
 1173|       |                    for child in &*children {
 1174|       |                        match child(tuple).and_then(|v| to_bool(&v)) {
 1175|       |                            Some(true) => return Some(true.into()),
 1176|       |                            Some(false) => continue,
 1177|       |                            None => error = true,
 1178|       |                        }
 1179|       |                    }
 1180|       |                    if error {
 1181|       |                        None
 1182|       |                    } else {
 1183|       |                        Some(false.into())
 1184|       |                    }
 1185|     32|                })
 1186|       |            }
 1187|    265|            Expression::And(inner) => {
 1188|    265|                let children = inner
 1189|    265|                    .iter()
 1190|    265|                    .map(|i| self.expression_evaluator(i, encoded_variables, stat_children))
 1191|    265|                    .collect::<Rc<[_]>>();
 1192|    265|                Rc::new(move |tuple| {
 1193|       |                    let mut error = false;
 1194|       |                    for child in &*children {
 1195|       |                        match child(tuple).and_then(|v| to_bool(&v)) {
 1196|       |                            Some(true) => continue,
 1197|       |                            Some(false) => return Some(false.into()),
 1198|       |                            None => error = true,
 1199|       |                        }
 1200|       |                    }
 1201|       |                    if error {
 1202|       |                        None
 1203|       |                    } else {
 1204|       |                        Some(true.into())
 1205|       |                    }
 1206|    265|                })
 1207|       |            }
 1208|    834|            Expression::Equal(a, b) => {
 1209|    834|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1210|    834|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1211|    834|                Rc::new(move |tuple| equals(&a(tuple)?, &b(tuple)?).map(Into::into))
 1212|       |            }
 1213|      3|            Expression::SameTerm(a, b) => {
 1214|      3|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1215|      3|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1216|      3|                Rc::new(move |tuple| Some((a(tuple)? == b(tuple)?).into()))
 1217|       |            }
 1218|     36|            Expression::Greater(a, b) => {
 1219|     36|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1220|     36|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1221|     36|                let dataset = Rc::clone(&self.dataset);
 1222|     36|                Rc::new(move |tuple| {
 1223|       |                    Some(
 1224|       |                        (partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? == Ordering::Greater)
 1225|       |                            .into(),
 1226|       |                    )
 1227|     36|                })
 1228|       |            }
 1229|    150|            Expression::GreaterOrEqual(a, b) => {
 1230|    150|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1231|    150|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1232|    150|                let dataset = Rc::clone(&self.dataset);
 1233|    150|                Rc::new(move |tuple| {
 1234|       |                    Some(
 1235|       |                        match partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? {
 1236|       |                            Ordering::Greater | Ordering::Equal => true,
 1237|       |                            Ordering::Less => false,
 1238|       |                        }
 1239|       |                        .into(),
 1240|       |                    )
 1241|    150|                })
 1242|       |            }
 1243|     14|            Expression::Less(a, b) => {
 1244|     14|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1245|     14|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1246|     14|                let dataset = Rc::clone(&self.dataset);
 1247|     14|                Rc::new(move |tuple| {
 1248|       |                    Some((partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? == Ordering::Less).into())
 1249|     14|                })
 1250|       |            }
 1251|     30|            Expression::LessOrEqual(a, b) => {
 1252|     30|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1253|     30|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1254|     30|                let dataset = Rc::clone(&self.dataset);
 1255|     30|                Rc::new(move |tuple| {
 1256|       |                    Some(
 1257|       |                        match partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? {
 1258|       |                            Ordering::Less | Ordering::Equal => true,
 1259|       |                            Ordering::Greater => false,
 1260|       |                        }
 1261|       |                        .into(),
 1262|       |                    )
 1263|     30|                })
 1264|       |            }
 1265|    270|            Expression::Add(a, b) => {
 1266|    270|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1267|    270|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1268|    270|                Rc::new(
 1269|    270|                    move |tuple| match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1270|       |                        NumericBinaryOperands::Float(v1, v2) => Some((v1 + v2).into()),
 1271|       |                        NumericBinaryOperands::Double(v1, v2) => Some((v1 + v2).into()),
 1272|       |                        NumericBinaryOperands::Integer(v1, v2) => Some(v1.checked_add(v2)?.into()),
 1273|       |                        NumericBinaryOperands::Decimal(v1, v2) => Some(v1.checked_add(v2)?.into()),
 1274|       |                        NumericBinaryOperands::Duration(v1, v2) => Some(v1.checked_add(v2)?.into()),
 1275|       |                        NumericBinaryOperands::YearMonthDuration(v1, v2) => {
 1276|       |                            Some(v1.checked_add(v2)?.into())
 1277|       |                        }
 1278|       |                        NumericBinaryOperands::DayTimeDuration(v1, v2) => {
 1279|       |                            Some(v1.checked_add(v2)?.into())
 1280|       |                        }
 1281|       |                        NumericBinaryOperands::DateTimeDuration(v1, v2) => {
 1282|       |                            Some(v1.checked_add_duration(v2)?.into())
 1283|       |                        }
 1284|       |                        NumericBinaryOperands::DateTimeYearMonthDuration(v1, v2) => {
 1285|       |                            Some(v1.checked_add_year_month_duration(v2)?.into())
 1286|       |                        }
 1287|       |                        NumericBinaryOperands::DateTimeDayTimeDuration(v1, v2) => {
 1288|       |                            Some(v1.checked_add_day_time_duration(v2)?.into())
 1289|       |                        }
 1290|       |                        NumericBinaryOperands::DateDuration(v1, v2) => {
 1291|       |                            Some(v1.checked_add_duration(v2)?.into())
 1292|       |                        }
 1293|       |                        NumericBinaryOperands::DateYearMonthDuration(v1, v2) => {
 1294|       |                            Some(v1.checked_add_year_month_duration(v2)?.into())
 1295|       |                        }
 1296|       |                        NumericBinaryOperands::DateDayTimeDuration(v1, v2) => {
 1297|       |                            Some(v1.checked_add_day_time_duration(v2)?.into())
 1298|       |                        }
 1299|       |                        NumericBinaryOperands::TimeDuration(v1, v2) => {
 1300|       |                            Some(v1.checked_add_duration(v2)?.into())
 1301|       |                        }
 1302|       |                        NumericBinaryOperands::TimeDayTimeDuration(v1, v2) => {
 1303|       |                            Some(v1.checked_add_day_time_duration(v2)?.into())
 1304|       |                        }
 1305|       |                        NumericBinaryOperands::DateTime(_, _)
 1306|       |                        | NumericBinaryOperands::Time(_, _)
 1307|       |                        | NumericBinaryOperands::Date(_, _) => None,
 1308|    270|                    },
 1309|    270|                )
 1310|       |            }
 1311|  1.65k|            Expression::Subtract(a, b) => {
 1312|  1.65k|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1313|  1.65k|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1314|  1.65k|                Rc::new(move |tuple| {
 1315|       |                    Some(match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1316|       |                        NumericBinaryOperands::Float(v1, v2) => (v1 - v2).into(),
 1317|       |                        NumericBinaryOperands::Double(v1, v2) => (v1 - v2).into(),
 1318|       |                        NumericBinaryOperands::Integer(v1, v2) => v1.checked_sub(v2)?.into(),
 1319|       |                        NumericBinaryOperands::Decimal(v1, v2) => v1.checked_sub(v2)?.into(),
 1320|       |                        NumericBinaryOperands::DateTime(v1, v2) => v1.checked_sub(v2)?.into(),
 1321|       |                        NumericBinaryOperands::Date(v1, v2) => v1.checked_sub(v2)?.into(),
 1322|       |                        NumericBinaryOperands::Time(v1, v2) => v1.checked_sub(v2)?.into(),
 1323|       |                        NumericBinaryOperands::Duration(v1, v2) => v1.checked_sub(v2)?.into(),
 1324|       |                        NumericBinaryOperands::YearMonthDuration(v1, v2) => {
 1325|       |                            v1.checked_sub(v2)?.into()
 1326|       |                        }
 1327|       |                        NumericBinaryOperands::DayTimeDuration(v1, v2) => {
 1328|       |                            v1.checked_sub(v2)?.into()
 1329|       |                        }
 1330|       |                        NumericBinaryOperands::DateTimeDuration(v1, v2) => {
 1331|       |                            v1.checked_sub_duration(v2)?.into()
 1332|       |                        }
 1333|       |                        NumericBinaryOperands::DateTimeYearMonthDuration(v1, v2) => {
 1334|       |                            v1.checked_sub_year_month_duration(v2)?.into()
 1335|       |                        }
 1336|       |                        NumericBinaryOperands::DateTimeDayTimeDuration(v1, v2) => {
 1337|       |                            v1.checked_sub_day_time_duration(v2)?.into()
 1338|       |                        }
 1339|       |                        NumericBinaryOperands::DateDuration(v1, v2) => {
 1340|       |                            v1.checked_sub_duration(v2)?.into()
 1341|       |                        }
 1342|       |                        NumericBinaryOperands::DateYearMonthDuration(v1, v2) => {
 1343|       |                            v1.checked_sub_year_month_duration(v2)?.into()
 1344|       |                        }
 1345|       |                        NumericBinaryOperands::DateDayTimeDuration(v1, v2) => {
 1346|       |                            v1.checked_sub_day_time_duration(v2)?.into()
 1347|       |                        }
 1348|       |                        NumericBinaryOperands::TimeDuration(v1, v2) => {
 1349|       |                            v1.checked_sub_duration(v2)?.into()
 1350|       |                        }
 1351|       |                        NumericBinaryOperands::TimeDayTimeDuration(v1, v2) => {
 1352|       |                            v1.checked_sub_day_time_duration(v2)?.into()
 1353|       |                        }
 1354|       |                    })
 1355|  1.65k|                })
 1356|       |            }
 1357|    586|            Expression::Multiply(a, b) => {
 1358|    586|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1359|    586|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1360|    586|                Rc::new(
 1361|    586|                    move |tuple| match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1362|       |                        NumericBinaryOperands::Float(v1, v2) => Some((v1 * v2).into()),
 1363|       |                        NumericBinaryOperands::Double(v1, v2) => Some((v1 * v2).into()),
 1364|       |                        NumericBinaryOperands::Integer(v1, v2) => Some(v1.checked_mul(v2)?.into()),
 1365|       |                        NumericBinaryOperands::Decimal(v1, v2) => Some(v1.checked_mul(v2)?.into()),
 1366|       |                        _ => None,
 1367|    586|                    },
 1368|    586|                )
 1369|       |            }
 1370|  3.13k|            Expression::Divide(a, b) => {
 1371|  3.13k|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1372|  3.13k|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1373|  3.13k|                Rc::new(
 1374|  3.13k|                    move |tuple| match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1375|       |                        NumericBinaryOperands::Float(v1, v2) => Some((v1 / v2).into()),
 1376|       |                        NumericBinaryOperands::Double(v1, v2) => Some((v1 / v2).into()),
 1377|       |                        NumericBinaryOperands::Integer(v1, v2) => {
 1378|       |                            Some(Decimal::from(v1).checked_div(v2)?.into())
 1379|       |                        }
 1380|       |                        NumericBinaryOperands::Decimal(v1, v2) => Some(v1.checked_div(v2)?.into()),
 1381|       |                        _ => None,
 1382|  3.13k|                    },
 1383|  3.13k|                )
 1384|       |            }
 1385|    314|            Expression::UnaryPlus(e) => {
 1386|    314|                let e = self.expression_evaluator(e, encoded_variables, stat_children);
 1387|    314|                Rc::new(move |tuple| match e(tuple)? {
 1388|       |                    EncodedTerm::FloatLiteral(value) => Some(value.into()),
 1389|       |                    EncodedTerm::DoubleLiteral(value) => Some(value.into()),
 1390|       |                    EncodedTerm::IntegerLiteral(value) => Some(value.into()),
 1391|       |                    EncodedTerm::DecimalLiteral(value) => Some(value.into()),
 1392|       |                    EncodedTerm::DurationLiteral(value) => Some(value.into()),
 1393|       |                    EncodedTerm::YearMonthDurationLiteral(value) => Some(value.into()),
 1394|       |                    EncodedTerm::DayTimeDurationLiteral(value) => Some(value.into()),
 1395|       |                    _ => None,
 1396|    314|                })
 1397|       |            }
 1398|  2.16k|            Expression::UnaryMinus(e) => {
 1399|  2.16k|                let e = self.expression_evaluator(e, encoded_variables, stat_children);
 1400|  2.16k|                Rc::new(move |tuple| match e(tuple)? {
 1401|       |                    EncodedTerm::FloatLiteral(value) => Some((-value).into()),
 1402|       |                    EncodedTerm::DoubleLiteral(value) => Some((-value).into()),
 1403|       |                    EncodedTerm::IntegerLiteral(value) => Some(value.checked_neg()?.into()),
 1404|       |                    EncodedTerm::DecimalLiteral(value) => Some(value.checked_neg()?.into()),
 1405|       |                    EncodedTerm::DurationLiteral(value) => Some(value.checked_neg()?.into()),
 1406|       |                    EncodedTerm::YearMonthDurationLiteral(value) => {
 1407|       |                        Some(value.checked_neg()?.into())
 1408|       |                    }
 1409|       |                    EncodedTerm::DayTimeDurationLiteral(value) => Some(value.checked_neg()?.into()),
 1410|       |                    _ => None,
 1411|  2.16k|                })
 1412|       |            }
 1413|  2.14k|            Expression::Not(e) => {
 1414|  2.14k|                let e = self.expression_evaluator(e, encoded_variables, stat_children);
 1415|  2.14k|                Rc::new(move |tuple| to_bool(&e(tuple)?).map(|v| (!v).into()))
 1416|       |            }
 1417|     80|            Expression::Coalesce(l) => {
 1418|     80|                let l: Vec<_> = l
 1419|     80|                    .iter()
 1420|     80|                    .map(|e| self.expression_evaluator(e, encoded_variables, stat_children))
 1421|     80|                    .collect();
 1422|     80|                Rc::new(move |tuple| {
 1423|       |                    for e in &l {
 1424|       |                        if let Some(result) = e(tuple) {
 1425|       |                            return Some(result);
 1426|       |                        }
 1427|       |                    }
 1428|       |                    None
 1429|     80|                })
 1430|       |            }
 1431|    686|            Expression::If(a, b, c) => {
 1432|    686|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1433|    686|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1434|    686|                let c = self.expression_evaluator(c, encoded_variables, stat_children);
 1435|    686|                Rc::new(move |tuple| {
 1436|       |                    if to_bool(&a(tuple)?)? {
 1437|       |                        b(tuple)
 1438|       |                    } else {
 1439|       |                        c(tuple)
 1440|       |                    }
 1441|    686|                })
 1442|       |            }
 1443|     58|            Expression::FunctionCall(function, parameters) => {
 1444|     58|                match function {
 1445|       |                    Function::Str => {
 1446|     10|                        let e = self.expression_evaluator(
 1447|     10|                            &parameters[0],
 1448|     10|                            encoded_variables,
 1449|     10|                            stat_children,
 1450|     10|                        );
 1451|     10|                        let dataset = Rc::clone(&self.dataset);
 1452|     10|                        Rc::new(move |tuple| {
 1453|       |                            Some(build_string_literal_from_id(to_string_id(
 1454|       |                                &dataset,
 1455|       |                                &e(tuple)?,
 1456|       |                            )?))
 1457|     10|                        })
 1458|       |                    }
 1459|       |                    Function::Lang => {
 1460|      6|                        let e = self.expression_evaluator(
 1461|      6|                            &parameters[0],
 1462|      6|                            encoded_variables,
 1463|      6|                            stat_children,
 1464|      6|                        );
 1465|      6|                        let dataset = Rc::clone(&self.dataset);
 1466|      6|                        Rc::new(move |tuple| match e(tuple)? {
 1467|       |                            EncodedTerm::SmallSmallLangStringLiteral { language, .. }
 1468|       |                            | EncodedTerm::BigSmallLangStringLiteral { language, .. } => {
 1469|       |                                Some(build_string_literal_from_id(language.into()))
 1470|       |                            }
 1471|       |                            EncodedTerm::SmallBigLangStringLiteral { language_id, .. }
 1472|       |                            | EncodedTerm::BigBigLangStringLiteral { language_id, .. } => {
 1473|       |                                Some(build_string_literal_from_id(language_id.into()))
 1474|       |                            }
 1475|       |                            e if e.is_literal() => Some(build_string_literal(&dataset, "")),
 1476|       |                            _ => None,
 1477|      6|                        })
 1478|       |                    }
 1479|       |                    Function::LangMatches => {
 1480|      0|                        let language_tag = self.expression_evaluator(
 1481|      0|                            &parameters[0],
 1482|      0|                            encoded_variables,
 1483|      0|                            stat_children,
 1484|      0|                        );
 1485|      0|                        let language_range = self.expression_evaluator(
 1486|      0|                            &parameters[1],
 1487|      0|                            encoded_variables,
 1488|      0|                            stat_children,
 1489|      0|                        );
 1490|      0|                        let dataset = Rc::clone(&self.dataset);
 1491|      0|                        Rc::new(move |tuple| {
 1492|       |                            let mut language_tag =
 1493|       |                                to_simple_string(&dataset, &language_tag(tuple)?)?;
 1494|       |                            language_tag.make_ascii_lowercase();
 1495|       |                            let mut language_range =
 1496|       |                                to_simple_string(&dataset, &language_range(tuple)?)?;
 1497|       |                            language_range.make_ascii_lowercase();
 1498|       |                            Some(
 1499|       |                                if &*language_range == "*" {
 1500|       |                                    !language_tag.is_empty()
 1501|       |                                } else {
 1502|       |                                    !ZipLongest::new(
 1503|       |                                        language_range.split('-'),
 1504|       |                                        language_tag.split('-'),
 1505|       |                                    )
 1506|       |                                    .any(|parts| match parts {
 1507|       |                                        (Some(range_subtag), Some(language_subtag)) => {
 1508|       |                                            range_subtag != language_subtag
 1509|       |                                        }
 1510|       |                                        (Some(_), None) => true,
 1511|       |                                        (None, _) => false,
 1512|       |                                    })
 1513|       |                                }
 1514|       |                                .into(),
 1515|       |                            )
 1516|      0|                        })
 1517|       |                    }
 1518|       |                    Function::Datatype => {
 1519|      2|                        let e = self.expression_evaluator(
 1520|      2|                            &parameters[0],
 1521|      2|                            encoded_variables,
 1522|      2|                            stat_children,
 1523|      2|                        );
 1524|      2|                        let dataset = Rc::clone(&self.dataset);
 1525|      2|                        Rc::new(move |tuple| datatype(&dataset, &e(tuple)?))
 1526|       |                    }
 1527|       |                    Function::Iri => {
 1528|      4|                        let e = self.expression_evaluator(
 1529|      4|                            &parameters[0],
 1530|      4|                            encoded_variables,
 1531|      4|                            stat_children,
 1532|      4|                        );
 1533|      4|                        let dataset = Rc::clone(&self.dataset);
 1534|      4|                        let base_iri = self.base_iri.clone();
 1535|      4|                        Rc::new(move |tuple| {
 1536|       |                            let e = e(tuple)?;
 1537|       |                            if e.is_named_node() {
 1538|       |                                Some(e)
 1539|       |                            } else {
 1540|       |                                let iri = to_simple_string(&dataset, &e)?;
 1541|       |                                Some(build_named_node(
 1542|       |                                    &dataset,
 1543|       |                                    &if let Some(base_iri) = &base_iri {
 1544|       |                                        base_iri.resolve(&iri)
 1545|       |                                    } else {
 1546|       |                                        Iri::parse(iri)
 1547|       |                                    }
 1548|       |                                    .ok()?
 1549|       |                                    .into_inner(),
 1550|       |                                ))
 1551|       |                            }
 1552|      4|                        })
 1553|       |                    }
 1554|      8|                    Function::BNode => match parameters.first() {
 1555|      8|                        Some(id) => {
 1556|      8|                            let id =
 1557|      8|                                self.expression_evaluator(id, encoded_variables, stat_children);
 1558|      8|                            let dataset = Rc::clone(&self.dataset);
 1559|      8|                            Rc::new(move |tuple| {
 1560|       |                                Some(
 1561|       |                                    dataset.encode_term(
 1562|       |                                        BlankNode::new(to_simple_string(&dataset, &id(tuple)?)?)
 1563|       |                                            .ok()?
 1564|       |                                            .as_ref(),
 1565|       |                                    ),
 1566|       |                                )
 1567|      8|                            })
 1568|       |                        }
 1569|      0|                        None => Rc::new(|_| {
 1570|       |                            Some(EncodedTerm::NumericalBlankNode {
 1571|       |                                id: random::<u128>(),
 1572|       |                            })
 1573|      0|                        }),
 1574|       |                    },
 1575|      0|                    Function::Rand => Rc::new(|_| Some(random::<f64>().into())),
 1576|       |                    Function::Abs => {
 1577|      0|                        let e = self.expression_evaluator(
 1578|      0|                            &parameters[0],
 1579|      0|                            encoded_variables,
 1580|      0|                            stat_children,
 1581|      0|                        );
 1582|      0|                        Rc::new(move |tuple| match e(tuple)? {
 1583|       |                            EncodedTerm::IntegerLiteral(value) => Some(value.checked_abs()?.into()),
 1584|       |                            EncodedTerm::DecimalLiteral(value) => Some(value.checked_abs()?.into()),
 1585|       |                            EncodedTerm::FloatLiteral(value) => Some(value.abs().into()),
 1586|       |                            EncodedTerm::DoubleLiteral(value) => Some(value.abs().into()),
 1587|       |                            _ => None,
 1588|      0|                        })
 1589|       |                    }
 1590|       |                    Function::Ceil => {
 1591|      0|                        let e = self.expression_evaluator(
 1592|      0|                            &parameters[0],
 1593|      0|                            encoded_variables,
 1594|      0|                            stat_children,
 1595|      0|                        );
 1596|      0|                        Rc::new(move |tuple| match e(tuple)? {
 1597|       |                            EncodedTerm::IntegerLiteral(value) => Some(value.into()),
 1598|       |                            EncodedTerm::DecimalLiteral(value) => {
 1599|       |                                Some(value.checked_ceil()?.into())
 1600|       |                            }
 1601|       |                            EncodedTerm::FloatLiteral(value) => Some(value.ceil().into()),
 1602|       |                            EncodedTerm::DoubleLiteral(value) => Some(value.ceil().into()),
 1603|       |                            _ => None,
 1604|      0|                        })
 1605|       |                    }
 1606|       |                    Function::Floor => {
 1607|      0|                        let e = self.expression_evaluator(
 1608|      0|                            &parameters[0],
 1609|      0|                            encoded_variables,
 1610|      0|                            stat_children,
 1611|      0|                        );
 1612|      0|                        Rc::new(move |tuple| match e(tuple)? {
 1613|       |                            EncodedTerm::IntegerLiteral(value) => Some(value.into()),
 1614|       |                            EncodedTerm::DecimalLiteral(value) => {
 1615|       |                                Some(value.checked_floor()?.into())
 1616|       |                            }
 1617|       |                            EncodedTerm::FloatLiteral(value) => Some(value.floor().into()),
 1618|       |                            EncodedTerm::DoubleLiteral(value) => Some(value.floor().into()),
 1619|       |                            _ => None,
 1620|      0|                        })
 1621|       |                    }
 1622|       |                    Function::Round => {
 1623|      0|                        let e = self.expression_evaluator(
 1624|      0|                            &parameters[0],
 1625|      0|                            encoded_variables,
 1626|      0|                            stat_children,
 1627|      0|                        );
 1628|      0|                        Rc::new(move |tuple| match e(tuple)? {
 1629|       |                            EncodedTerm::IntegerLiteral(value) => Some(value.into()),
 1630|       |                            EncodedTerm::DecimalLiteral(value) => {
 1631|       |                                Some(value.checked_round()?.into())
 1632|       |                            }
 1633|       |                            EncodedTerm::FloatLiteral(value) => Some(value.round().into()),
 1634|       |                            EncodedTerm::DoubleLiteral(value) => Some(value.round().into()),
 1635|       |                            _ => None,
 1636|      0|                        })
 1637|       |                    }
 1638|       |                    Function::Concat => {
 1639|      0|                        let l: Vec<_> = parameters
 1640|      0|                            .iter()
 1641|      0|                            .map(|e| self.expression_evaluator(e, encoded_variables, stat_children))
 1642|      0|                            .collect();
 1643|      0|                        let dataset = Rc::clone(&self.dataset);
 1644|      0|                        Rc::new(move |tuple| {
 1645|       |                            let mut result = String::default();
 1646|       |                            let mut language = None;
 1647|       |                            for e in &l {
 1648|       |                                let (value, e_language) =
 1649|       |                                    to_string_and_language(&dataset, &e(tuple)?)?;
 1650|       |                                if let Some(lang) = language {
 1651|       |                                    if lang != e_language {
 1652|       |                                        language = Some(None)
 1653|       |                                    }
 1654|       |                                } else {
 1655|       |                                    language = Some(e_language)
 1656|       |                                }
 1657|       |                                result += &value
 1658|       |                            }
 1659|       |                            Some(build_plain_literal(
 1660|       |                                &dataset,
 1661|       |                                &result,
 1662|       |                                language.and_then(|v| v),
 1663|       |                            ))
 1664|      0|                        })
 1665|       |                    }
 1666|       |                    Function::SubStr => {
 1667|      0|                        let source = self.expression_evaluator(
 1668|      0|                            &parameters[0],
 1669|      0|                            encoded_variables,
 1670|      0|                            stat_children,
 1671|      0|                        );
 1672|      0|                        let starting_loc = self.expression_evaluator(
 1673|      0|                            &parameters[1],
 1674|      0|                            encoded_variables,
 1675|      0|                            stat_children,
 1676|      0|                        );
 1677|      0|                        let length = parameters.get(2).map(|l| {
 1678|       |                            self.expression_evaluator(l, encoded_variables, stat_children)
 1679|      0|                        });
 1680|      0|                        let dataset = Rc::clone(&self.dataset);
 1681|      0|                        Rc::new(move |tuple| {
 1682|       |                            let (source, language) =
 1683|       |                                to_string_and_language(&dataset, &source(tuple)?)?;
 1684|       |
 1685|       |                            let starting_location: usize =
 1686|       |                                if let EncodedTerm::IntegerLiteral(v) = starting_loc(tuple)? {
 1687|       |                                    i64::from(v).try_into().ok()?
 1688|       |                                } else {
 1689|       |                                    return None;
 1690|       |                                };
 1691|       |                            let length: Option<usize> = if let Some(length) = &length {
 1692|       |                                if let EncodedTerm::IntegerLiteral(v) = length(tuple)? {
 1693|       |                                    Some(i64::from(v).try_into().ok()?)
 1694|       |                                } else {
 1695|       |                                    return None;
 1696|       |                                }
 1697|       |                            } else {
 1698|       |                                None
 1699|       |                            };
 1700|       |
 1701|       |                            // We want to slice on char indices, not byte indices
 1702|       |                            let mut start_iter = source
 1703|       |                                .char_indices()
 1704|       |                                .skip(starting_location.checked_sub(1)?)
 1705|       |                                .peekable();
 1706|       |                            let result =
 1707|       |                                if let Some((start_position, _)) = start_iter.peek().copied() {
 1708|       |                                    if let Some(length) = length {
 1709|       |                                        let mut end_iter = start_iter.skip(length).peekable();
 1710|       |                                        if let Some((end_position, _)) = end_iter.peek() {
 1711|       |                                            &source[start_position..*end_position]
 1712|       |                                        } else {
 1713|       |                                            &source[start_position..]
 1714|       |                                        }
 1715|       |                                    } else {
 1716|       |                                        &source[start_position..]
 1717|       |                                    }
 1718|       |                                } else {
 1719|       |                                    ""
 1720|       |                                };
 1721|       |                            Some(build_plain_literal(&dataset, result, language))
 1722|      0|                        })
 1723|       |                    }
 1724|       |                    Function::StrLen => {
 1725|      0|                        let arg = self.expression_evaluator(
 1726|      0|                            &parameters[0],
 1727|      0|                            encoded_variables,
 1728|      0|                            stat_children,
 1729|      0|                        );
 1730|      0|                        let dataset = Rc::clone(&self.dataset);
 1731|      0|                        Rc::new(move |tuple| {
 1732|       |                            Some(
 1733|       |                                i64::try_from(to_string(&dataset, &arg(tuple)?)?.chars().count())
 1734|       |                                    .ok()?
 1735|       |                                    .into(),
 1736|       |                            )
 1737|      0|                        })
 1738|       |                    }
 1739|       |                    Function::Replace => {
 1740|      0|                        let arg = self.expression_evaluator(
 1741|      0|                            &parameters[0],
 1742|      0|                            encoded_variables,
 1743|      0|                            stat_children,
 1744|      0|                        );
 1745|      0|                        let replacement = self.expression_evaluator(
 1746|      0|                            &parameters[2],
 1747|      0|                            encoded_variables,
 1748|      0|                            stat_children,
 1749|      0|                        );
 1750|      0|                        let dataset = Rc::clone(&self.dataset);
 1751|      0|                        if let Some(regex) =
 1752|      0|                            compile_static_pattern_if_exists(&parameters[1], parameters.get(3))
 1753|       |                        {
 1754|      0|                            Rc::new(move |tuple| {
 1755|       |                                let (text, language) =
 1756|       |                                    to_string_and_language(&dataset, &arg(tuple)?)?;
 1757|       |                                let replacement = to_simple_string(&dataset, &replacement(tuple)?)?;
 1758|       |                                Some(build_plain_literal(
 1759|       |                                    &dataset,
 1760|       |                                    &regex.replace_all(&text, replacement.as_str()),
 1761|       |                                    language,
 1762|       |                                ))
 1763|      0|                            })
 1764|       |                        } else {
 1765|      0|                            let pattern = self.expression_evaluator(
 1766|      0|                                &parameters[1],
 1767|      0|                                encoded_variables,
 1768|      0|                                stat_children,
 1769|      0|                            );
 1770|      0|                            let flags = parameters.get(3).map(|flags| {
 1771|       |                                self.expression_evaluator(flags, encoded_variables, stat_children)
 1772|      0|                            });
 1773|      0|                            Rc::new(move |tuple| {
 1774|       |                                let pattern = to_simple_string(&dataset, &pattern(tuple)?)?;
 1775|       |                                let options = if let Some(flags) = &flags {
 1776|       |                                    Some(to_simple_string(&dataset, &flags(tuple)?)?)
 1777|       |                                } else {
 1778|       |                                    None
 1779|       |                                };
 1780|       |                                let regex = compile_pattern(&pattern, options.as_deref())?;
 1781|       |                                let (text, language) =
 1782|       |                                    to_string_and_language(&dataset, &arg(tuple)?)?;
 1783|       |                                let replacement = to_simple_string(&dataset, &replacement(tuple)?)?;
 1784|       |                                Some(build_plain_literal(
 1785|       |                                    &dataset,
 1786|       |                                    &regex.replace_all(&text, replacement.as_str()),
 1787|       |                                    language,
 1788|       |                                ))
 1789|      0|                            })
 1790|       |                        }
 1791|       |                    }
 1792|       |                    Function::UCase => {
 1793|      0|                        let e = self.expression_evaluator(
 1794|      0|                            &parameters[0],
 1795|      0|                            encoded_variables,
 1796|      0|                            stat_children,
 1797|      0|                        );
 1798|      0|                        let dataset = Rc::clone(&self.dataset);
 1799|      0|                        Rc::new(move |tuple| {
 1800|       |                            let (value, language) = to_string_and_language(&dataset, &e(tuple)?)?;
 1801|       |                            Some(build_plain_literal(
 1802|       |                                &dataset,
 1803|       |                                &value.to_uppercase(),
 1804|       |                                language,
 1805|       |                            ))
 1806|      0|                        })
 1807|       |                    }
 1808|       |                    Function::LCase => {
 1809|      0|                        let e = self.expression_evaluator(
 1810|      0|                            &parameters[0],
 1811|      0|                            encoded_variables,
 1812|      0|                            stat_children,
 1813|      0|                        );
 1814|      0|                        let dataset = Rc::clone(&self.dataset);
 1815|      0|                        Rc::new(move |tuple| {
 1816|       |                            let (value, language) = to_string_and_language(&dataset, &e(tuple)?)?;
 1817|       |                            Some(build_plain_literal(
 1818|       |                                &dataset,
 1819|       |                                &value.to_lowercase(),
 1820|       |                                language,
 1821|       |                            ))
 1822|      0|                        })
 1823|       |                    }
 1824|       |                    Function::StrStarts => {
 1825|      0|                        let arg1 = self.expression_evaluator(
 1826|      0|                            &parameters[0],
 1827|      0|                            encoded_variables,
 1828|      0|                            stat_children,
 1829|      0|                        );
 1830|      0|                        let arg2 = self.expression_evaluator(
 1831|      0|                            &parameters[1],
 1832|      0|                            encoded_variables,
 1833|      0|                            stat_children,
 1834|      0|                        );
 1835|      0|                        let dataset = Rc::clone(&self.dataset);
 1836|      0|                        Rc::new(move |tuple| {
 1837|       |                            let (arg1, arg2, _) = to_argument_compatible_strings(
 1838|       |                                &dataset,
 1839|       |                                &arg1(tuple)?,
 1840|       |                                &arg2(tuple)?,
 1841|       |                            )?;
 1842|       |                            Some(arg1.starts_with(arg2.as_str()).into())
 1843|      0|                        })
 1844|       |                    }
 1845|       |                    Function::EncodeForUri => {
 1846|      0|                        let ltrl = self.expression_evaluator(
 1847|      0|                            &parameters[0],
 1848|      0|                            encoded_variables,
 1849|      0|                            stat_children,
 1850|      0|                        );
 1851|      0|                        let dataset = Rc::clone(&self.dataset);
 1852|      0|                        Rc::new(move |tuple| {
 1853|       |                            let ltlr = to_string(&dataset, &ltrl(tuple)?)?;
 1854|       |                            let mut result = Vec::with_capacity(ltlr.len());
 1855|       |                            for c in ltlr.bytes() {
 1856|       |                                match c {
 1857|       |                                    b'A'..=b'Z'
 1858|       |                                    | b'a'..=b'z'
 1859|       |                                    | b'0'..=b'9'
 1860|       |                                    | b'-'
 1861|       |                                    | b'_'
 1862|       |                                    | b'.'
 1863|       |                                    | b'~' => result.push(c),
 1864|       |                                    _ => {
 1865|       |                                        result.push(b'%');
 1866|       |                                        let high = c / 16;
 1867|       |                                        let low = c % 16;
 1868|       |                                        result.push(if high < 10 {
 1869|       |                                            b'0' + high
 1870|       |                                        } else {
 1871|       |                                            b'A' + (high - 10)
 1872|       |                                        });
 1873|       |                                        result.push(if low < 10 {
 1874|       |                                            b'0' + low
 1875|       |                                        } else {
 1876|       |                                            b'A' + (low - 10)
 1877|       |                                        });
 1878|       |                                    }
 1879|       |                                }
 1880|       |                            }
 1881|       |                            Some(build_string_literal(
 1882|       |                                &dataset,
 1883|       |                                str::from_utf8(&result).ok()?,
 1884|       |                            ))
 1885|      0|                        })
 1886|       |                    }
 1887|       |                    Function::StrEnds => {
 1888|      0|                        let arg1 = self.expression_evaluator(
 1889|      0|                            &parameters[0],
 1890|      0|                            encoded_variables,
 1891|      0|                            stat_children,
 1892|      0|                        );
 1893|      0|                        let arg2 = self.expression_evaluator(
 1894|      0|                            &parameters[1],
 1895|      0|                            encoded_variables,
 1896|      0|                            stat_children,
 1897|      0|                        );
 1898|      0|                        let dataset = Rc::clone(&self.dataset);
 1899|      0|                        Rc::new(move |tuple| {
 1900|       |                            let (arg1, arg2, _) = to_argument_compatible_strings(
 1901|       |                                &dataset,
 1902|       |                                &arg1(tuple)?,
 1903|       |                                &arg2(tuple)?,
 1904|       |                            )?;
 1905|       |                            Some(arg1.ends_with(arg2.as_str()).into())
 1906|      0|                        })
 1907|       |                    }
 1908|       |                    Function::Contains => {
 1909|      0|                        let arg1 = self.expression_evaluator(
 1910|      0|                            &parameters[0],
 1911|      0|                            encoded_variables,
 1912|      0|                            stat_children,
 1913|      0|                        );
 1914|      0|                        let arg2 = self.expression_evaluator(
 1915|      0|                            &parameters[1],
 1916|      0|                            encoded_variables,
 1917|      0|                            stat_children,
 1918|      0|                        );
 1919|      0|                        let dataset = Rc::clone(&self.dataset);
 1920|      0|                        Rc::new(move |tuple| {
 1921|       |                            let (arg1, arg2, _) = to_argument_compatible_strings(
 1922|       |                                &dataset,
 1923|       |                                &arg1(tuple)?,
 1924|       |                                &arg2(tuple)?,
 1925|       |                            )?;
 1926|       |                            Some(arg1.contains(arg2.as_str()).into())
 1927|      0|                        })
 1928|       |                    }
 1929|       |                    Function::StrBefore => {
 1930|      0|                        let arg1 = self.expression_evaluator(
 1931|      0|                            &parameters[0],
 1932|      0|                            encoded_variables,
 1933|      0|                            stat_children,
 1934|      0|                        );
 1935|      0|                        let arg2 = self.expression_evaluator(
 1936|      0|                            &parameters[1],
 1937|      0|                            encoded_variables,
 1938|      0|                            stat_children,
 1939|      0|                        );
 1940|      0|                        let dataset = Rc::clone(&self.dataset);
 1941|      0|                        Rc::new(move |tuple| {
 1942|       |                            let (arg1, arg2, language) = to_argument_compatible_strings(
 1943|       |                                &dataset,
 1944|       |                                &arg1(tuple)?,
 1945|       |                                &arg2(tuple)?,
 1946|       |                            )?;
 1947|       |                            Some(if let Some(position) = arg1.find(arg2.as_str()) {
 1948|       |                                build_plain_literal(&dataset, &arg1[..position], language)
 1949|       |                            } else {
 1950|       |                                build_string_literal(&dataset, "")
 1951|       |                            })
 1952|      0|                        })
 1953|       |                    }
 1954|       |                    Function::StrAfter => {
 1955|      0|                        let arg1 = self.expression_evaluator(
 1956|      0|                            &parameters[0],
 1957|      0|                            encoded_variables,
 1958|      0|                            stat_children,
 1959|      0|                        );
 1960|      0|                        let arg2 = self.expression_evaluator(
 1961|      0|                            &parameters[1],
 1962|      0|                            encoded_variables,
 1963|      0|                            stat_children,
 1964|      0|                        );
 1965|      0|                        let dataset = Rc::clone(&self.dataset);
 1966|      0|                        Rc::new(move |tuple| {
 1967|       |                            let (arg1, arg2, language) = to_argument_compatible_strings(
 1968|       |                                &dataset,
 1969|       |                                &arg1(tuple)?,
 1970|       |                                &arg2(tuple)?,
 1971|       |                            )?;
 1972|       |                            Some(if let Some(position) = arg1.find(arg2.as_str()) {
 1973|       |                                build_plain_literal(
 1974|       |                                    &dataset,
 1975|       |                                    &arg1[position + arg2.len()..],
 1976|       |                                    language,
 1977|       |                                )
 1978|       |                            } else {
 1979|       |                                build_string_literal(&dataset, "")
 1980|       |                            })
 1981|      0|                        })
 1982|       |                    }
 1983|       |                    Function::Year => {
 1984|      0|                        let e = self.expression_evaluator(
 1985|      0|                            &parameters[0],
 1986|      0|                            encoded_variables,
 1987|      0|                            stat_children,
 1988|      0|                        );
 1989|      0|                        Rc::new(move |tuple| match e(tuple)? {
 1990|       |                            EncodedTerm::DateTimeLiteral(date_time) => {
 1991|       |                                Some(date_time.year().into())
 1992|       |                            }
 1993|       |                            EncodedTerm::DateLiteral(date) => Some(date.year().into()),
 1994|       |                            EncodedTerm::GYearMonthLiteral(year_month) => {
 1995|       |                                Some(year_month.year().into())
 1996|       |                            }
 1997|       |                            EncodedTerm::GYearLiteral(year) => Some(year.year().into()),
 1998|       |                            _ => None,
 1999|      0|                        })
 2000|       |                    }
 2001|       |                    Function::Month => {
 2002|      0|                        let e = self.expression_evaluator(
 2003|      0|                            &parameters[0],
 2004|      0|                            encoded_variables,
 2005|      0|                            stat_children,
 2006|      0|                        );
 2007|      0|                        Rc::new(move |tuple| match e(tuple)? {
 2008|       |                            EncodedTerm::DateTimeLiteral(date_time) => {
 2009|       |                                Some(date_time.month().into())
 2010|       |                            }
 2011|       |                            EncodedTerm::DateLiteral(date) => Some(date.month().into()),
 2012|       |                            EncodedTerm::GYearMonthLiteral(year_month) => {
 2013|       |                                Some(year_month.month().into())
 2014|       |                            }
 2015|       |                            EncodedTerm::GMonthDayLiteral(month_day) => {
 2016|       |                                Some(month_day.month().into())
 2017|       |                            }
 2018|       |                            EncodedTerm::GMonthLiteral(month) => Some(month.month().into()),
 2019|       |                            _ => None,
 2020|      0|                        })
 2021|       |                    }
 2022|       |                    Function::Day => {
 2023|      0|                        let e = self.expression_evaluator(
 2024|      0|                            &parameters[0],
 2025|      0|                            encoded_variables,
 2026|      0|                            stat_children,
 2027|      0|                        );
 2028|      0|                        Rc::new(move |tuple| match e(tuple)? {
 2029|       |                            EncodedTerm::DateTimeLiteral(date_time) => Some(date_time.day().into()),
 2030|       |                            EncodedTerm::DateLiteral(date) => Some(date.day().into()),
 2031|       |                            EncodedTerm::GMonthDayLiteral(month_day) => {
 2032|       |                                Some(month_day.day().into())
 2033|       |                            }
 2034|       |                            EncodedTerm::GDayLiteral(day) => Some(day.day().into()),
 2035|       |                            _ => None,
 2036|      0|                        })
 2037|       |                    }
 2038|       |                    Function::Hours => {
 2039|      0|                        let e = self.expression_evaluator(
 2040|      0|                            &parameters[0],
 2041|      0|                            encoded_variables,
 2042|      0|                            stat_children,
 2043|      0|                        );
 2044|      0|                        Rc::new(move |tuple| match e(tuple)? {
 2045|       |                            EncodedTerm::DateTimeLiteral(date_time) => {
 2046|       |                                Some(date_time.hour().into())
 2047|       |                            }
 2048|       |                            EncodedTerm::TimeLiteral(time) => Some(time.hour().into()),
 2049|       |                            _ => None,
 2050|      0|                        })
 2051|       |                    }
 2052|       |                    Function::Minutes => {
 2053|      0|                        let e = self.expression_evaluator(
 2054|      0|                            &parameters[0],
 2055|      0|                            encoded_variables,
 2056|      0|                            stat_children,
 2057|      0|                        );
 2058|      0|                        Rc::new(move |tuple| match e(tuple)? {
 2059|       |                            EncodedTerm::DateTimeLiteral(date_time) => {
 2060|       |                                Some(date_time.minute().into())
 2061|       |                            }
 2062|       |                            EncodedTerm::TimeLiteral(time) => Some(time.minute().into()),
 2063|       |                            _ => None,
 2064|      0|                        })
 2065|       |                    }
 2066|       |                    Function::Seconds => {
 2067|      0|                        let e = self.expression_evaluator(
 2068|      0|                            &parameters[0],
 2069|      0|                            encoded_variables,
 2070|      0|                            stat_children,
 2071|      0|                        );
 2072|      0|                        Rc::new(move |tuple| match e(tuple)? {
 2073|       |                            EncodedTerm::DateTimeLiteral(date_time) => {
 2074|       |                                Some(date_time.second().into())
 2075|       |                            }
 2076|       |                            EncodedTerm::TimeLiteral(time) => Some(time.second().into()),
 2077|       |                            _ => None,
 2078|      0|                        })
 2079|       |                    }
 2080|       |                    Function::Timezone => {
 2081|      0|                        let e = self.expression_evaluator(
 2082|      0|                            &parameters[0],
 2083|      0|                            encoded_variables,
 2084|      0|                            stat_children,
 2085|      0|                        );
 2086|      0|                        Rc::new(move |tuple| {
 2087|       |                            Some(
 2088|       |                                match e(tuple)? {
 2089|       |                                    EncodedTerm::DateTimeLiteral(date_time) => date_time.timezone(),
 2090|       |                                    EncodedTerm::TimeLiteral(time) => time.timezone(),
 2091|       |                                    EncodedTerm::DateLiteral(date) => date.timezone(),
 2092|       |                                    EncodedTerm::GYearMonthLiteral(year_month) => {
 2093|       |                                        year_month.timezone()
 2094|       |                                    }
 2095|       |                                    EncodedTerm::GYearLiteral(year) => year.timezone(),
 2096|       |                                    EncodedTerm::GMonthDayLiteral(month_day) => {
 2097|       |                                        month_day.timezone()
 2098|       |                                    }
 2099|       |                                    EncodedTerm::GDayLiteral(day) => day.timezone(),
 2100|       |                                    EncodedTerm::GMonthLiteral(month) => month.timezone(),
 2101|       |                                    _ => None,
 2102|       |                                }?
 2103|       |                                .into(),
 2104|       |                            )
 2105|      0|                        })
 2106|       |                    }
 2107|       |                    Function::Tz => {
 2108|      0|                        let e = self.expression_evaluator(
 2109|      0|                            &parameters[0],
 2110|      0|                            encoded_variables,
 2111|      0|                            stat_children,
 2112|      0|                        );
 2113|      0|                        let dataset = Rc::clone(&self.dataset);
 2114|      0|                        Rc::new(move |tuple| {
 2115|       |                            let timezone_offset = match e(tuple)? {
 2116|       |                                EncodedTerm::DateTimeLiteral(date_time) => {
 2117|       |                                    date_time.timezone_offset()
 2118|       |                                }
 2119|       |                                EncodedTerm::TimeLiteral(time) => time.timezone_offset(),
 2120|       |                                EncodedTerm::DateLiteral(date) => date.timezone_offset(),
 2121|       |                                EncodedTerm::GYearMonthLiteral(year_month) => {
 2122|       |                                    year_month.timezone_offset()
 2123|       |                                }
 2124|       |                                EncodedTerm::GYearLiteral(year) => year.timezone_offset(),
 2125|       |                                EncodedTerm::GMonthDayLiteral(month_day) => {
 2126|       |                                    month_day.timezone_offset()
 2127|       |                                }
 2128|       |                                EncodedTerm::GDayLiteral(day) => day.timezone_offset(),
 2129|       |                                EncodedTerm::GMonthLiteral(month) => month.timezone_offset(),
 2130|       |                                _ => return None,
 2131|       |                            };
 2132|       |                            Some(match timezone_offset {
 2133|       |                                Some(timezone_offset) => {
 2134|       |                                    build_string_literal(&dataset, &timezone_offset.to_string())
 2135|       |                                }
 2136|       |                                None => build_string_literal(&dataset, ""),
 2137|       |                            })
 2138|      0|                        })
 2139|       |                    }
 2140|       |                    Function::Adjust => {
 2141|      0|                        let dt = self.expression_evaluator(
 2142|      0|                            &parameters[0],
 2143|      0|                            encoded_variables,
 2144|      0|                            stat_children,
 2145|      0|                        );
 2146|      0|                        let tz = self.expression_evaluator(
 2147|      0|                            &parameters[1],
 2148|      0|                            encoded_variables,
 2149|      0|                            stat_children,
 2150|      0|                        );
 2151|      0|                        Rc::new(move |tuple| {
 2152|       |                            let timezone_offset = Some(
 2153|       |                                match tz(tuple)? {
 2154|       |                                    EncodedTerm::DayTimeDurationLiteral(tz) => {
 2155|       |                                        TimezoneOffset::try_from(tz)
 2156|       |                                    }
 2157|       |                                    EncodedTerm::DurationLiteral(tz) => {
 2158|       |                                        TimezoneOffset::try_from(tz)
 2159|       |                                    }
 2160|       |                                    _ => return None,
 2161|       |                                }
 2162|       |                                .ok()?,
 2163|       |                            );
 2164|       |                            Some(match dt(tuple)? {
 2165|       |                                EncodedTerm::DateTimeLiteral(date_time) => {
 2166|       |                                    date_time.adjust(timezone_offset)?.into()
 2167|       |                                }
 2168|       |                                EncodedTerm::TimeLiteral(time) => {
 2169|       |                                    time.adjust(timezone_offset)?.into()
 2170|       |                                }
 2171|       |                                EncodedTerm::DateLiteral(date) => {
 2172|       |                                    date.adjust(timezone_offset)?.into()
 2173|       |                                }
 2174|       |                                EncodedTerm::GYearMonthLiteral(year_month) => {
 2175|       |                                    year_month.adjust(timezone_offset)?.into()
 2176|       |                                }
 2177|       |                                EncodedTerm::GYearLiteral(year) => {
 2178|       |                                    year.adjust(timezone_offset)?.into()
 2179|       |                                }
 2180|       |                                EncodedTerm::GMonthDayLiteral(month_day) => {
 2181|       |                                    month_day.adjust(timezone_offset)?.into()
 2182|       |                                }
 2183|       |                                EncodedTerm::GDayLiteral(day) => {
 2184|       |                                    day.adjust(timezone_offset)?.into()
 2185|       |                                }
 2186|       |                                EncodedTerm::GMonthLiteral(month) => {
 2187|       |                                    month.adjust(timezone_offset)?.into()
 2188|       |                                }
 2189|       |                                _ => return None,
 2190|       |                            })
 2191|      0|                        })
 2192|       |                    }
 2193|       |                    Function::Now => {
 2194|      0|                        let now = self.now;
 2195|      0|                        Rc::new(move |_| Some(now.into()))
 2196|       |                    }
 2197|       |                    Function::Uuid => {
 2198|      0|                        let dataset = Rc::clone(&self.dataset);
 2199|      0|                        Rc::new(move |_| {
 2200|       |                            let mut buffer = String::with_capacity(44);
 2201|       |                            buffer.push_str("urn:uuid:");
 2202|       |                            generate_uuid(&mut buffer);
 2203|       |                            Some(build_named_node(&dataset, &buffer))
 2204|      0|                        })
 2205|       |                    }
 2206|       |                    Function::StrUuid => {
 2207|      0|                        let dataset = Rc::clone(&self.dataset);
 2208|      0|                        Rc::new(move |_| {
 2209|       |                            let mut buffer = String::with_capacity(36);
 2210|       |                            generate_uuid(&mut buffer);
 2211|       |                            Some(build_string_literal(&dataset, &buffer))
 2212|      0|                        })
 2213|       |                    }
 2214|      0|                    Function::Md5 => self.hash::<Md5>(parameters, encoded_variables, stat_children),
 2215|       |                    Function::Sha1 => {
 2216|      0|                        self.hash::<Sha1>(parameters, encoded_variables, stat_children)
 2217|       |                    }
 2218|       |                    Function::Sha256 => {
 2219|      0|                        self.hash::<Sha256>(parameters, encoded_variables, stat_children)
 2220|       |                    }
 2221|       |                    Function::Sha384 => {
 2222|      0|                        self.hash::<Sha384>(parameters, encoded_variables, stat_children)
 2223|       |                    }
 2224|       |                    Function::Sha512 => {
 2225|      0|                        self.hash::<Sha512>(parameters, encoded_variables, stat_children)
 2226|       |                    }
 2227|       |                    Function::StrLang => {
 2228|      0|                        let lexical_form = self.expression_evaluator(
 2229|      0|                            &parameters[0],
 2230|      0|                            encoded_variables,
 2231|      0|                            stat_children,
 2232|      0|                        );
 2233|      0|                        let lang_tag = self.expression_evaluator(
 2234|      0|                            &parameters[1],
 2235|      0|                            encoded_variables,
 2236|      0|                            stat_children,
 2237|      0|                        );
 2238|      0|                        let dataset = Rc::clone(&self.dataset);
 2239|      0|                        Rc::new(move |tuple| {
 2240|       |                            Some(build_lang_string_literal_from_id(
 2241|       |                                to_simple_string_id(&lexical_form(tuple)?)?,
 2242|       |                                build_language_id(&dataset, &lang_tag(tuple)?)?,
 2243|       |                            ))
 2244|      0|                        })
 2245|       |                    }
 2246|       |                    Function::StrDt => {
 2247|      2|                        let lexical_form = self.expression_evaluator(
 2248|      2|                            &parameters[0],
 2249|      2|                            encoded_variables,
 2250|      2|                            stat_children,
 2251|      2|                        );
 2252|      2|                        let datatype = self.expression_evaluator(
 2253|      2|                            &parameters[1],
 2254|      2|                            encoded_variables,
 2255|      2|                            stat_children,
 2256|      2|                        );
 2257|      2|                        let dataset = Rc::clone(&self.dataset);
 2258|      2|                        Rc::new(move |tuple| {
 2259|       |                            let value = to_simple_string(&dataset, &lexical_form(tuple)?)?;
 2260|       |                            let datatype =
 2261|       |                                if let EncodedTerm::NamedNode { iri_id } = datatype(tuple)? {
 2262|       |                                    dataset.get_str(&iri_id).ok()?
 2263|       |                                } else {
 2264|       |                                    None
 2265|       |                                }?;
 2266|       |                            Some(dataset.encode_term(LiteralRef::new_typed_literal(
 2267|       |                                &value,
 2268|       |                                NamedNodeRef::new_unchecked(&datatype),
 2269|       |                            )))
 2270|      2|                        })
 2271|       |                    }
 2272|       |                    Function::IsIri => {
 2273|      6|                        let e = self.expression_evaluator(
 2274|      6|                            &parameters[0],
 2275|      6|                            encoded_variables,
 2276|      6|                            stat_children,
 2277|      6|                        );
 2278|      6|                        Rc::new(move |tuple| Some(e(tuple)?.is_named_node().into()))
 2279|       |                    }
 2280|       |                    Function::IsBlank => {
 2281|     14|                        let e = self.expression_evaluator(
 2282|     14|                            &parameters[0],
 2283|     14|                            encoded_variables,
 2284|     14|                            stat_children,
 2285|     14|                        );
 2286|     14|                        Rc::new(move |tuple| Some(e(tuple)?.is_blank_node().into()))
 2287|       |                    }
 2288|       |                    Function::IsLiteral => {
 2289|      0|                        let e = self.expression_evaluator(
 2290|      0|                            &parameters[0],
 2291|      0|                            encoded_variables,
 2292|      0|                            stat_children,
 2293|      0|                        );
 2294|      0|                        Rc::new(move |tuple| Some(e(tuple)?.is_literal().into()))
 2295|       |                    }
 2296|       |                    Function::IsNumeric => {
 2297|      6|                        let e = self.expression_evaluator(
 2298|      6|                            &parameters[0],
 2299|      6|                            encoded_variables,
 2300|      6|                            stat_children,
 2301|      6|                        );
 2302|      6|                        Rc::new(move |tuple| {
 2303|       |                            Some(
 2304|       |                                matches!(
 2305|       |                                    e(tuple)?,
 2306|       |                                    EncodedTerm::FloatLiteral(_)
 2307|       |                                        | EncodedTerm::DoubleLiteral(_)
 2308|       |                                        | EncodedTerm::IntegerLiteral(_)
 2309|       |                                        | EncodedTerm::DecimalLiteral(_)
 2310|       |                                )
 2311|       |                                .into(),
 2312|       |                            )
 2313|      6|                        })
 2314|       |                    }
 2315|       |                    Function::Regex => {
 2316|      0|                        let text = self.expression_evaluator(
 2317|      0|                            &parameters[0],
 2318|      0|                            encoded_variables,
 2319|      0|                            stat_children,
 2320|      0|                        );
 2321|      0|                        let dataset = Rc::clone(&self.dataset);
 2322|      0|                        if let Some(regex) =
 2323|      0|                            compile_static_pattern_if_exists(&parameters[1], parameters.get(2))
 2324|       |                        {
 2325|      0|                            Rc::new(move |tuple| {
 2326|       |                                let text = to_string(&dataset, &text(tuple)?)?;
 2327|       |                                Some(regex.is_match(&text).into())
 2328|      0|                            })
 2329|       |                        } else {
 2330|      0|                            let pattern = self.expression_evaluator(
 2331|      0|                                &parameters[0],
 2332|      0|                                encoded_variables,
 2333|      0|                                stat_children,
 2334|      0|                            );
 2335|      0|                            let flags = parameters.get(2).map(|flags| {
 2336|       |                                self.expression_evaluator(flags, encoded_variables, stat_children)
 2337|      0|                            });
 2338|      0|                            Rc::new(move |tuple| {
 2339|       |                                let pattern = to_simple_string(&dataset, &pattern(tuple)?)?;
 2340|       |                                let options = if let Some(flags) = &flags {
 2341|       |                                    Some(to_simple_string(&dataset, &flags(tuple)?)?)
 2342|       |                                } else {
 2343|       |                                    None
 2344|       |                                };
 2345|       |                                let regex = compile_pattern(&pattern, options.as_deref())?;
 2346|       |                                let text = to_string(&dataset, &text(tuple)?)?;
 2347|       |                                Some(regex.is_match(&text).into())
 2348|      0|                            })
 2349|       |                        }
 2350|       |                    }
 2351|       |                    Function::Triple => {
 2352|      0|                        let s = self.expression_evaluator(
 2353|      0|                            &parameters[0],
 2354|      0|                            encoded_variables,
 2355|      0|                            stat_children,
 2356|      0|                        );
 2357|      0|                        let p = self.expression_evaluator(
 2358|      0|                            &parameters[1],
 2359|      0|                            encoded_variables,
 2360|      0|                            stat_children,
 2361|      0|                        );
 2362|      0|                        let o = self.expression_evaluator(
 2363|      0|                            &parameters[2],
 2364|      0|                            encoded_variables,
 2365|      0|                            stat_children,
 2366|      0|                        );
 2367|      0|                        Rc::new(move |tuple| {
 2368|       |                            let s = s(tuple)?;
 2369|       |                            let p = p(tuple)?;
 2370|       |                            let o = o(tuple)?;
 2371|       |                            (!s.is_literal()
 2372|       |                                && !s.is_default_graph()
 2373|       |                                && p.is_named_node()
 2374|       |                                && !o.is_default_graph())
 2375|       |                            .then(|| EncodedTriple::new(s, p, o).into())
 2376|      0|                        })
 2377|       |                    }
 2378|       |                    Function::Subject => {
 2379|      0|                        let e = self.expression_evaluator(
 2380|      0|                            &parameters[0],
 2381|      0|                            encoded_variables,
 2382|      0|                            stat_children,
 2383|      0|                        );
 2384|      0|                        Rc::new(move |tuple| {
 2385|       |                            if let EncodedTerm::Triple(t) = e(tuple)? {
 2386|       |                                Some(t.subject.clone())
 2387|       |                            } else {
 2388|       |                                None
 2389|       |                            }
 2390|      0|                        })
 2391|       |                    }
 2392|       |                    Function::Predicate => {
 2393|      0|                        let e = self.expression_evaluator(
 2394|      0|                            &parameters[0],
 2395|      0|                            encoded_variables,
 2396|      0|                            stat_children,
 2397|      0|                        );
 2398|      0|                        Rc::new(move |tuple| {
 2399|       |                            if let EncodedTerm::Triple(t) = e(tuple)? {
 2400|       |                                Some(t.predicate.clone())
 2401|       |                            } else {
 2402|       |                                None
 2403|       |                            }
 2404|      0|                        })
 2405|       |                    }
 2406|       |                    Function::Object => {
 2407|      0|                        let e = self.expression_evaluator(
 2408|      0|                            &parameters[0],
 2409|      0|                            encoded_variables,
 2410|      0|                            stat_children,
 2411|      0|                        );
 2412|      0|                        Rc::new(move |tuple| {
 2413|       |                            if let EncodedTerm::Triple(t) = e(tuple)? {
 2414|       |                                Some(t.object.clone())
 2415|       |                            } else {
 2416|       |                                None
 2417|       |                            }
 2418|      0|                        })
 2419|       |                    }
 2420|       |                    Function::IsTriple => {
 2421|      0|                        let e = self.expression_evaluator(
 2422|      0|                            &parameters[0],
 2423|      0|                            encoded_variables,
 2424|      0|                            stat_children,
 2425|      0|                        );
 2426|      0|                        Rc::new(move |tuple| Some(e(tuple)?.is_triple().into()))
 2427|       |                    }
 2428|      0|                    Function::Custom(function_name) => {
 2429|      0|                        if let Some(function) = self.custom_functions.get(function_name).cloned() {
 2430|      0|                            let args = parameters
 2431|      0|                                .iter()
 2432|      0|                                .map(|e| {
 2433|       |                                    self.expression_evaluator(e, encoded_variables, stat_children)
 2434|      0|                                })
 2435|      0|                                .collect::<Vec<_>>();
 2436|      0|                            let dataset = Rc::clone(&self.dataset);
 2437|      0|                            return Rc::new(move |tuple| {
 2438|       |                                let args = args
 2439|       |                                    .iter()
 2440|       |                                    .map(|f| dataset.decode_term(&f(tuple)?).ok())
 2441|       |                                    .collect::<Option<Vec<_>>>()?;
 2442|       |                                Some(dataset.encode_term(&function(&args)?))
 2443|      0|                            });
 2444|      0|                        }
 2445|      0|                        match function_name.as_ref() {
 2446|      0|                            xsd::STRING => {
 2447|      0|                                let e = self.expression_evaluator(
 2448|      0|                                    &parameters[0],
 2449|      0|                                    encoded_variables,
 2450|      0|                                    stat_children,
 2451|      0|                                );
 2452|      0|                                let dataset = Rc::clone(&self.dataset);
 2453|      0|                                Rc::new(move |tuple| {
 2454|       |                                    Some(build_string_literal_from_id(to_string_id(
 2455|       |                                        &dataset,
 2456|       |                                        &e(tuple)?,
 2457|       |                                    )?))
 2458|      0|                                })
 2459|       |                            }
 2460|      0|                            xsd::BOOLEAN => {
 2461|      0|                                let e = self.expression_evaluator(
 2462|      0|                                    &parameters[0],
 2463|      0|                                    encoded_variables,
 2464|      0|                                    stat_children,
 2465|      0|                                );
 2466|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2467|       |                                    EncodedTerm::BooleanLiteral(value) => Some(value.into()),
 2468|       |                                    EncodedTerm::FloatLiteral(value) => {
 2469|       |                                        Some(Boolean::from(value).into())
 2470|       |                                    }
 2471|       |                                    EncodedTerm::DoubleLiteral(value) => {
 2472|       |                                        Some(Boolean::from(value).into())
 2473|       |                                    }
 2474|       |                                    EncodedTerm::IntegerLiteral(value) => {
 2475|       |                                        Some(Boolean::from(value).into())
 2476|       |                                    }
 2477|       |                                    EncodedTerm::DecimalLiteral(value) => {
 2478|       |                                        Some(Boolean::from(value).into())
 2479|       |                                    }
 2480|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2481|       |                                        parse_boolean_str(&value)
 2482|       |                                    }
 2483|       |                                    _ => None,
 2484|      0|                                })
 2485|       |                            }
 2486|      0|                            xsd::DOUBLE => {
 2487|      0|                                let e = self.expression_evaluator(
 2488|      0|                                    &parameters[0],
 2489|      0|                                    encoded_variables,
 2490|      0|                                    stat_children,
 2491|      0|                                );
 2492|      0|                                let dataset = Rc::clone(&self.dataset);
 2493|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2494|       |                                    EncodedTerm::FloatLiteral(value) => {
 2495|       |                                        Some(Double::from(value).into())
 2496|       |                                    }
 2497|       |                                    EncodedTerm::DoubleLiteral(value) => Some(value.into()),
 2498|       |                                    EncodedTerm::IntegerLiteral(value) => {
 2499|       |                                        Some(Double::from(value).into())
 2500|       |                                    }
 2501|       |                                    EncodedTerm::DecimalLiteral(value) => {
 2502|       |                                        Some(Double::from(value).into())
 2503|       |                                    }
 2504|       |                                    EncodedTerm::BooleanLiteral(value) => {
 2505|       |                                        Some(Double::from(value).into())
 2506|       |                                    }
 2507|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2508|       |                                        parse_double_str(&value)
 2509|       |                                    }
 2510|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2511|       |                                        parse_double_str(&dataset.get_str(&value_id).ok()??)
 2512|       |                                    }
 2513|       |                                    _ => None,
 2514|      0|                                })
 2515|       |                            }
 2516|      0|                            xsd::FLOAT => {
 2517|      0|                                let e = self.expression_evaluator(
 2518|      0|                                    &parameters[0],
 2519|      0|                                    encoded_variables,
 2520|      0|                                    stat_children,
 2521|      0|                                );
 2522|      0|                                let dataset = Rc::clone(&self.dataset);
 2523|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2524|       |                                    EncodedTerm::FloatLiteral(value) => Some(value.into()),
 2525|       |                                    EncodedTerm::DoubleLiteral(value) => {
 2526|       |                                        Some(Float::from(value).into())
 2527|       |                                    }
 2528|       |                                    EncodedTerm::IntegerLiteral(value) => {
 2529|       |                                        Some(Float::from(value).into())
 2530|       |                                    }
 2531|       |                                    EncodedTerm::DecimalLiteral(value) => {
 2532|       |                                        Some(Float::from(value).into())
 2533|       |                                    }
 2534|       |                                    EncodedTerm::BooleanLiteral(value) => {
 2535|       |                                        Some(Float::from(value).into())
 2536|       |                                    }
 2537|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2538|       |                                        parse_float_str(&value)
 2539|       |                                    }
 2540|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2541|       |                                        parse_float_str(&dataset.get_str(&value_id).ok()??)
 2542|       |                                    }
 2543|       |                                    _ => None,
 2544|      0|                                })
 2545|       |                            }
 2546|      0|                            xsd::INTEGER => {
 2547|      0|                                let e = self.expression_evaluator(
 2548|      0|                                    &parameters[0],
 2549|      0|                                    encoded_variables,
 2550|      0|                                    stat_children,
 2551|      0|                                );
 2552|      0|                                let dataset = Rc::clone(&self.dataset);
 2553|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2554|       |                                    EncodedTerm::FloatLiteral(value) => {
 2555|       |                                        Some(Integer::try_from(value).ok()?.into())
 2556|       |                                    }
 2557|       |                                    EncodedTerm::DoubleLiteral(value) => {
 2558|       |                                        Some(Integer::try_from(value).ok()?.into())
 2559|       |                                    }
 2560|       |                                    EncodedTerm::IntegerLiteral(value) => Some(value.into()),
 2561|       |                                    EncodedTerm::DecimalLiteral(value) => {
 2562|       |                                        Some(Integer::try_from(value).ok()?.into())
 2563|       |                                    }
 2564|       |                                    EncodedTerm::BooleanLiteral(value) => {
 2565|       |                                        Some(Integer::from(value).into())
 2566|       |                                    }
 2567|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2568|       |                                        parse_integer_str(&value)
 2569|       |                                    }
 2570|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2571|       |                                        parse_integer_str(&dataset.get_str(&value_id).ok()??)
 2572|       |                                    }
 2573|       |                                    _ => None,
 2574|      0|                                })
 2575|       |                            }
 2576|      0|                            xsd::DECIMAL => {
 2577|      0|                                let e = self.expression_evaluator(
 2578|      0|                                    &parameters[0],
 2579|      0|                                    encoded_variables,
 2580|      0|                                    stat_children,
 2581|      0|                                );
 2582|      0|                                let dataset = Rc::clone(&self.dataset);
 2583|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2584|       |                                    EncodedTerm::FloatLiteral(value) => {
 2585|       |                                        Some(Decimal::try_from(value).ok()?.into())
 2586|       |                                    }
 2587|       |                                    EncodedTerm::DoubleLiteral(value) => {
 2588|       |                                        Some(Decimal::try_from(value).ok()?.into())
 2589|       |                                    }
 2590|       |                                    EncodedTerm::IntegerLiteral(value) => {
 2591|       |                                        Some(Decimal::from(value).into())
 2592|       |                                    }
 2593|       |                                    EncodedTerm::DecimalLiteral(value) => Some(value.into()),
 2594|       |                                    EncodedTerm::BooleanLiteral(value) => {
 2595|       |                                        Some(Decimal::from(value).into())
 2596|       |                                    }
 2597|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2598|       |                                        parse_decimal_str(&value)
 2599|       |                                    }
 2600|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2601|       |                                        parse_decimal_str(&dataset.get_str(&value_id).ok()??)
 2602|       |                                    }
 2603|       |                                    _ => None,
 2604|      0|                                })
 2605|       |                            }
 2606|      0|                            xsd::DATE => {
 2607|      0|                                let e = self.expression_evaluator(
 2608|      0|                                    &parameters[0],
 2609|      0|                                    encoded_variables,
 2610|      0|                                    stat_children,
 2611|      0|                                );
 2612|      0|                                let dataset = Rc::clone(&self.dataset);
 2613|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2614|       |                                    EncodedTerm::DateLiteral(value) => Some(value.into()),
 2615|       |                                    EncodedTerm::DateTimeLiteral(value) => {
 2616|       |                                        Some(Date::try_from(value).ok()?.into())
 2617|       |                                    }
 2618|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2619|       |                                        parse_date_str(&value)
 2620|       |                                    }
 2621|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2622|       |                                        parse_date_str(&dataset.get_str(&value_id).ok()??)
 2623|       |                                    }
 2624|       |                                    _ => None,
 2625|      0|                                })
 2626|       |                            }
 2627|      0|                            xsd::TIME => {
 2628|      0|                                let e = self.expression_evaluator(
 2629|      0|                                    &parameters[0],
 2630|      0|                                    encoded_variables,
 2631|      0|                                    stat_children,
 2632|      0|                                );
 2633|      0|                                let dataset = Rc::clone(&self.dataset);
 2634|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2635|       |                                    EncodedTerm::TimeLiteral(value) => Some(value.into()),
 2636|       |                                    EncodedTerm::DateTimeLiteral(value) => {
 2637|       |                                        Some(Time::from(value).into())
 2638|       |                                    }
 2639|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2640|       |                                        parse_time_str(&value)
 2641|       |                                    }
 2642|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2643|       |                                        parse_time_str(&dataset.get_str(&value_id).ok()??)
 2644|       |                                    }
 2645|       |                                    _ => None,
 2646|      0|                                })
 2647|       |                            }
 2648|      0|                            xsd::DATE_TIME => {
 2649|      0|                                let e = self.expression_evaluator(
 2650|      0|                                    &parameters[0],
 2651|      0|                                    encoded_variables,
 2652|      0|                                    stat_children,
 2653|      0|                                );
 2654|      0|                                let dataset = Rc::clone(&self.dataset);
 2655|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2656|       |                                    EncodedTerm::DateTimeLiteral(value) => Some(value.into()),
 2657|       |                                    EncodedTerm::DateLiteral(value) => {
 2658|       |                                        Some(DateTime::try_from(value).ok()?.into())
 2659|       |                                    }
 2660|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2661|       |                                        parse_date_time_str(&value)
 2662|       |                                    }
 2663|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2664|       |                                        parse_date_time_str(&dataset.get_str(&value_id).ok()??)
 2665|       |                                    }
 2666|       |                                    _ => None,
 2667|      0|                                })
 2668|       |                            }
 2669|      0|                            xsd::DURATION => {
 2670|      0|                                let e = self.expression_evaluator(
 2671|      0|                                    &parameters[0],
 2672|      0|                                    encoded_variables,
 2673|      0|                                    stat_children,
 2674|      0|                                );
 2675|      0|                                let dataset = Rc::clone(&self.dataset);
 2676|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2677|       |                                    EncodedTerm::DurationLiteral(value) => Some(value.into()),
 2678|       |                                    EncodedTerm::YearMonthDurationLiteral(value) => {
 2679|       |                                        Some(Duration::from(value).into())
 2680|       |                                    }
 2681|       |                                    EncodedTerm::DayTimeDurationLiteral(value) => {
 2682|       |                                        Some(Duration::from(value).into())
 2683|       |                                    }
 2684|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2685|       |                                        parse_duration_str(&value)
 2686|       |                                    }
 2687|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2688|       |                                        parse_duration_str(&dataset.get_str(&value_id).ok()??)
 2689|       |                                    }
 2690|       |                                    _ => None,
 2691|      0|                                })
 2692|       |                            }
 2693|      0|                            xsd::YEAR_MONTH_DURATION => {
 2694|      0|                                let e = self.expression_evaluator(
 2695|      0|                                    &parameters[0],
 2696|      0|                                    encoded_variables,
 2697|      0|                                    stat_children,
 2698|      0|                                );
 2699|      0|                                let dataset = Rc::clone(&self.dataset);
 2700|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2701|       |                                    EncodedTerm::DurationLiteral(value) => {
 2702|       |                                        Some(YearMonthDuration::try_from(value).ok()?.into())
 2703|       |                                    }
 2704|       |                                    EncodedTerm::YearMonthDurationLiteral(value) => {
 2705|       |                                        Some(value.into())
 2706|       |                                    }
 2707|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2708|       |                                        parse_year_month_duration_str(&value)
 2709|       |                                    }
 2710|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2711|       |                                        parse_year_month_duration_str(
 2712|       |                                            &dataset.get_str(&value_id).ok()??,
 2713|       |                                        )
 2714|       |                                    }
 2715|       |                                    _ => None,
 2716|      0|                                })
 2717|       |                            }
 2718|      0|                            xsd::DAY_TIME_DURATION => {
 2719|      0|                                let e = self.expression_evaluator(
 2720|      0|                                    &parameters[0],
 2721|      0|                                    encoded_variables,
 2722|      0|                                    stat_children,
 2723|      0|                                );
 2724|      0|                                let dataset = Rc::clone(&self.dataset);
 2725|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2726|       |                                    EncodedTerm::DurationLiteral(value) => {
 2727|       |                                        Some(DayTimeDuration::try_from(value).ok()?.into())
 2728|       |                                    }
 2729|       |                                    EncodedTerm::DayTimeDurationLiteral(value) => {
 2730|       |                                        Some(value.into())
 2731|       |                                    }
 2732|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2733|       |                                        parse_day_time_duration_str(&value)
 2734|       |                                    }
 2735|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2736|       |                                        parse_day_time_duration_str(
 2737|       |                                            &dataset.get_str(&value_id).ok()??,
 2738|       |                                        )
 2739|       |                                    }
 2740|       |                                    _ => None,
 2741|      0|                                })
 2742|       |                            }
 2743|      0|                            _ => Rc::new(|_| None),
 2744|       |                        }
 2745|       |                    }
 2746|       |                }
 2747|       |            }
 2748|       |        }
 2749|  21.7k|    }
_RNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13PathEvaluator26eval_from_in_unknown_graph:
 4233|     31|    fn eval_from_in_unknown_graph(
 4234|     31|        &self,
 4235|     31|        path: &PropertyPath,
 4236|     31|        start: &EncodedTerm,
 4237|     31|    ) -> Box<dyn Iterator<Item = Result<(EncodedTerm, EncodedTerm), EvaluationError>>> {
 4238|     31|        match path {
 4239|      7|            PropertyPath::Path(p) => Box::new(
 4240|      7|                self.dataset
 4241|      7|                    .encoded_quads_for_pattern(Some(start), Some(p), None, None)
 4242|      7|                    .map(|t| {
 4243|       |                        let t = t?;
 4244|       |                        Ok((t.object, t.graph_name))
 4245|      7|                    }),
 4246|      7|            ),
 4247|      5|            PropertyPath::Reverse(p) => self.eval_to_in_unknown_graph(p, start),
 4248|      3|            PropertyPath::Sequence(a, b) => {
 4249|      3|                let eval = self.clone();
 4250|      3|                let b = Rc::clone(b);
 4251|      3|                Box::new(self.eval_from_in_unknown_graph(a, start).flat_map_ok(
 4252|      3|                    move |(middle, graph_name)| {
 4253|       |                        eval.eval_from_in_graph(&b, &middle, &graph_name)
 4254|       |                            .map(move |end| Ok((end?, graph_name.clone())))
 4255|      3|                    },
 4256|      3|                ))
 4257|       |            }
 4258|      5|            PropertyPath::Alternative(a, b) => Box::new(hash_deduplicate(
 4259|      5|                self.eval_from_in_unknown_graph(a, start)
 4260|      5|                    .chain(self.eval_from_in_unknown_graph(b, start)),
 4261|      5|            )),
 4262|      5|            PropertyPath::ZeroOrMore(p) => {
 4263|      5|                let start2 = start.clone();
 4264|      5|                let eval = self.clone();
 4265|      5|                let p = Rc::clone(p);
 4266|      5|                self.run_if_term_is_a_dataset_node(start, move |graph_name| {
 4267|       |                    let eval = eval.clone();
 4268|       |                    let p = Rc::clone(&p);
 4269|       |                    let graph_name2 = graph_name.clone();
 4270|       |                    transitive_closure(Some(Ok(start2.clone())), move |e| {
 4271|       |                        eval.eval_from_in_graph(&p, &e, &graph_name2)
 4272|       |                    })
 4273|       |                    .map(move |e| Ok((e?, graph_name.clone())))
 4274|      5|                })
 4275|       |            }
 4276|      0|            PropertyPath::OneOrMore(p) => {
 4277|      0|                let eval = self.clone();
 4278|      0|                let p = Rc::clone(p);
 4279|      0|                Box::new(transitive_closure(
 4280|      0|                    self.eval_from_in_unknown_graph(&p, start),
 4281|      0|                    move |(e, graph_name)| {
 4282|       |                        eval.eval_from_in_graph(&p, &e, &graph_name)
 4283|       |                            .map(move |e| Ok((e?, graph_name.clone())))
 4284|      0|                    },
 4285|      0|                ))
 4286|       |            }
 4287|      1|            PropertyPath::ZeroOrOne(p) => {
 4288|      1|                let eval = self.clone();
 4289|      1|                let start2 = start.clone();
 4290|      1|                let p = Rc::clone(p);
 4291|      1|                self.run_if_term_is_a_dataset_node(start, move |graph_name| {
 4292|       |                    hash_deduplicate(once(Ok(start2.clone())).chain(eval.eval_from_in_graph(
 4293|       |                        &p,
 4294|       |                        &start2,
 4295|       |                        &graph_name,
 4296|       |                    )))
 4297|       |                    .map(move |e| Ok((e?, graph_name.clone())))
 4298|      1|                })
 4299|       |            }
 4300|      5|            PropertyPath::NegatedPropertySet(ps) => {
 4301|      5|                let ps = Rc::clone(ps);
 4302|      5|                Box::new(
 4303|      5|                    self.dataset
 4304|      5|                        .encoded_quads_for_pattern(Some(start), None, None, None)
 4305|      5|                        .filter_map(move |t| match t {
 4306|       |                            Ok(t) => {
 4307|       |                                if ps.iter().any(|p| *p == t.predicate) {
 4308|       |                                    None
 4309|       |                                } else {
 4310|       |                                    Some(Ok((t.object, t.graph_name)))
 4311|       |                                }
 4312|       |                            }
 4313|       |                            Err(e) => Some(Err(e)),
 4314|      5|                        }),
 4315|      5|                )
 4316|       |            }
 4317|       |        }
 4318|     31|    }
_RNvXs6_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_20HashLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 4811|    739|    fn next(&mut self) -> Option<Self::Item> {
 4812|       |        loop {
 4813|    807|            if let Some(result) = self.buffered_results.pop() {
 4814|     68|                return Some(result);
 4815|    739|            }
 4816|    739|            let left_tuple = match self.left_iter.next()? {
 4817|    291|                Ok(left_tuple) => left_tuple,
 4818|      0|                Err(error) => return Some(Err(error)),
 4819|       |            };
 4820|    291|            self.buffered_results.extend(
 4821|    291|                self.right
 4822|    291|                    .get(&left_tuple)
 4823|    291|                    .iter()
 4824|    291|                    .filter_map(|right_tuple| left_tuple.combine_with(right_tuple))
 4825|    291|                    .filter(|tuple| {
 4826|       |                        (self.expression)(tuple)
 4827|       |                            .and_then(|term| to_bool(&term))
 4828|       |                            .unwrap_or(false)
 4829|    291|                    })
 4830|    291|                    .map(Ok),
 4831|    291|            );
 4832|    291|            if self.buffered_results.is_empty() {
 4833|       |                // We have not manage to join with anything
 4834|    223|                return Some(Ok(left_tuple));
 4835|     68|            }
 4836|       |        }
 4837|    739|    }
_RNvMs2_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13TupleSelector23from_named_node_pattern:
 3869|  44.1k|    fn from_named_node_pattern(
 3870|  44.1k|        named_node_pattern: &NamedNodePattern,
 3871|  44.1k|        variables: &mut Vec<Variable>,
 3872|  44.1k|        dataset: &DatasetView,
 3873|  44.1k|    ) -> Self {
 3874|  44.1k|        match named_node_pattern {
 3875|  24.0k|            NamedNodePattern::Variable(variable) => {
 3876|  24.0k|                Self::Variable(encode_variable(variables, variable))
 3877|       |            }
 3878|  20.0k|            NamedNodePattern::NamedNode(term) => Self::Constant(dataset.encode_term(term)),
 3879|       |        }
 3880|  44.1k|    }
_RNvXs7_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_23ForLoopLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 4859|     38|    fn next(&mut self) -> Option<Self::Item> {
 4860|     38|        if let Some(tuple) = self.current_right.next() {
 4861|      0|            return Some(tuple);
 4862|     38|        }
 4863|     38|        let left_tuple = match self.left_iter.next()? {
 4864|      1|            Ok(left_tuple) => left_tuple,
 4865|      0|            Err(error) => return Some(Err(error)),
 4866|       |        };
 4867|      1|        self.current_right = (self.right_evaluator)(left_tuple.clone());
 4868|      1|        if let Some(right_tuple) = self.current_right.next() {
 4869|      1|            Some(right_tuple)
 4870|       |        } else {
 4871|      0|            Some(Ok(left_tuple))
 4872|       |        }
 4873|     38|    }
_RNvXs4_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_28CartesianProductJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hint:
 4754|    733|    fn size_hint(&self) -> (usize, Option<usize>) {
 4755|    733|        let (min, max) = self.probe_iter.size_hint();
 4756|    733|        (
 4757|    733|            min.saturating_mul(self.built.len()),
 4758|    733|            max.map(|v| v.saturating_mul(self.built.len())),
 4759|    733|        )
 4760|    733|    }
_RNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13PathEvaluator18eval_open_in_graph:
 4479|  17.5k|    fn eval_open_in_graph(
 4480|  17.5k|        &self,
 4481|  17.5k|        path: &PropertyPath,
 4482|  17.5k|        graph_name: &EncodedTerm,
 4483|  17.5k|    ) -> Box<dyn Iterator<Item = Result<(EncodedTerm, EncodedTerm), EvaluationError>>> {
 4484|  17.5k|        match path {
 4485|  4.88k|            PropertyPath::Path(p) => Box::new(
 4486|  4.88k|                self.dataset
 4487|  4.88k|                    .encoded_quads_for_pattern(None, Some(p), None, Some(graph_name))
 4488|  4.88k|                    .map(|t| t.map(|t| (t.subject, t.object))),
 4489|  4.88k|            ),
 4490|  3.19k|            PropertyPath::Reverse(p) => Box::new(
 4491|  3.19k|                self.eval_open_in_graph(p, graph_name)
 4492|  3.19k|                    .map(|t| t.map(|(s, o)| (o, s))),
 4493|  3.19k|            ),
 4494|  2.10k|            PropertyPath::Sequence(a, b) => {
 4495|  2.10k|                let eval = self.clone();
 4496|  2.10k|                let b = Rc::clone(b);
 4497|  2.10k|                let graph_name2 = graph_name.clone();
 4498|  2.10k|                Box::new(self.eval_open_in_graph(a, graph_name).flat_map_ok(
 4499|  2.10k|                    move |(start, middle)| {
 4500|       |                        eval.eval_from_in_graph(&b, &middle, &graph_name2)
 4501|       |                            .map(move |end| Ok((start.clone(), end?)))
 4502|  2.10k|                    },
 4503|  2.10k|                ))
 4504|       |            }
 4505|  1.19k|            PropertyPath::Alternative(a, b) => Box::new(hash_deduplicate(
 4506|  1.19k|                self.eval_open_in_graph(a, graph_name)
 4507|  1.19k|                    .chain(self.eval_open_in_graph(b, graph_name)),
 4508|  1.19k|            )),
 4509|    691|            PropertyPath::ZeroOrMore(p) => {
 4510|    691|                let eval = self.clone();
 4511|    691|                let p = Rc::clone(p);
 4512|    691|                let graph_name2 = graph_name.clone();
 4513|    691|                Box::new(transitive_closure(
 4514|    691|                    self.get_subject_or_object_identity_pairs_in_graph(graph_name),
 4515|    691|                    move |(start, middle)| {
 4516|       |                        eval.eval_from_in_graph(&p, &middle, &graph_name2)
 4517|       |                            .map(move |end| Ok((start.clone(), end?)))
 4518|    691|                    },
 4519|    691|                ))
 4520|       |            }
 4521|  1.22k|            PropertyPath::OneOrMore(p) => {
 4522|  1.22k|                let eval = self.clone();
 4523|  1.22k|                let p = Rc::clone(p);
 4524|  1.22k|                let graph_name2 = graph_name.clone();
 4525|  1.22k|                Box::new(transitive_closure(
 4526|  1.22k|                    self.eval_open_in_graph(&p, graph_name),
 4527|  1.22k|                    move |(start, middle)| {
 4528|       |                        eval.eval_from_in_graph(&p, &middle, &graph_name2)
 4529|       |                            .map(move |end| Ok((start.clone(), end?)))
 4530|  1.22k|                    },
 4531|  1.22k|                ))
 4532|       |            }
 4533|  3.35k|            PropertyPath::ZeroOrOne(p) => Box::new(hash_deduplicate(
 4534|  3.35k|                self.get_subject_or_object_identity_pairs_in_graph(graph_name)
 4535|  3.35k|                    .chain(self.eval_open_in_graph(p, graph_name)),
 4536|  3.35k|            )),
 4537|    871|            PropertyPath::NegatedPropertySet(ps) => {
 4538|    871|                let ps = Rc::clone(ps);
 4539|    871|                Box::new(
 4540|    871|                    self.dataset
 4541|    871|                        .encoded_quads_for_pattern(None, None, None, Some(graph_name))
 4542|    871|                        .filter_map(move |t| match t {
 4543|       |                            Ok(t) => {
 4544|       |                                if ps.iter().any(|p| *p == t.predicate) {
 4545|       |                                    None
 4546|       |                                } else {
 4547|       |                                    Some(Ok((t.subject, t.object)))
 4548|       |                                }
 4549|       |                            }
 4550|       |                            Err(e) => Some(Err(e)),
 4551|    871|                        }),
 4552|    871|                )
 4553|       |            }
 4554|       |        }
 4555|  17.5k|    }
_RNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_15SimpleEvaluator3new:
  135|  4.96k|    pub fn new(
  136|  4.96k|        dataset: Rc<DatasetView>,
  137|  4.96k|        base_iri: Option<Rc<Iri<String>>>,
  138|  4.96k|        service_handler: Arc<dyn ServiceHandler<Error = EvaluationError>>,
  139|  4.96k|        custom_functions: Arc<CustomFunctionRegistry>,
  140|  4.96k|        run_stats: bool,
  141|  4.96k|    ) -> Self {
  142|  4.96k|        Self {
  143|  4.96k|            dataset,
  144|  4.96k|            base_iri,
  145|  4.96k|            now: DateTime::now(),
  146|  4.96k|            service_handler,
  147|  4.96k|            custom_functions,
  148|  4.96k|            run_stats,
  149|  4.96k|        }
  150|  4.96k|    }
_RNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_15SimpleEvaluator23graph_pattern_evaluator:
  244|   106k|    pub fn graph_pattern_evaluator(
  245|   106k|        &self,
  246|   106k|        pattern: &GraphPattern,
  247|   106k|        encoded_variables: &mut Vec<Variable>,
  248|   106k|    ) -> (
  249|   106k|        Rc<dyn Fn(EncodedTuple) -> EncodedTuplesIterator>,
  250|   106k|        Rc<EvalNodeWithStats>,
  251|   106k|    ) {
  252|   106k|        let mut stat_children = Vec::new();
  253|   106k|        let mut evaluator =
  254|   106k|            self.build_graph_pattern_evaluator(pattern, encoded_variables, &mut stat_children);
  255|   106k|        let stats = Rc::new(EvalNodeWithStats {
  256|   106k|            label: eval_node_label(pattern),
  257|   106k|            children: stat_children,
  258|   106k|            exec_count: Cell::new(0),
  259|   106k|            exec_duration: Cell::new(self.run_stats.then(DayTimeDuration::default)),
  260|   106k|        });
  261|   106k|        if self.run_stats {
  262|      0|            let stats = Rc::clone(&stats);
  263|      0|            evaluator = Rc::new(move |tuple| {
  264|       |                let start = Timer::now();
  265|       |                let inner = evaluator(tuple);
  266|       |                stats.exec_duration.set(
  267|       |                    stats
  268|       |                        .exec_duration
  269|       |                        .get()
  270|       |                        .and_then(|stat| stat.checked_add(start.elapsed()?)),
  271|       |                );
  272|       |                Box::new(StatsIterator {
  273|       |                    inner,
  274|       |                    stats: Rc::clone(&stats),
  275|       |                })
  276|      0|            })
  277|   106k|        }
  278|   106k|        (evaluator, stats)
  279|   106k|    }
_RNvMsw_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_15EncodedTupleSet3len:
 5622|    299|    fn len(&self) -> usize {
 5623|    299|        self.len
 5624|    299|    }
_RNvXsK_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13TupleSelectorNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
 3820|  94.7k|#[derive(Clone)]
_RNvXs6_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_20HashLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hint:
 4839|    332|    fn size_hint(&self) -> (usize, Option<usize>) {
 4840|    332|        (
 4841|    332|            0,
 4842|    332|            self.left_iter
 4843|    332|                .size_hint()
 4844|    332|                .1
 4845|    332|                .map(|v| v.saturating_mul(self.right.len())),
 4846|    332|        )
 4847|    332|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB2_12EncodedTuple13with_capacity:
   49|  9.96k|    pub fn with_capacity(capacity: usize) -> Self {
   50|  9.96k|        Self {
   51|  9.96k|            inner: Vec::with_capacity(capacity),
   52|  9.96k|        }
   53|  9.96k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB2_12EncodedTuple12combine_with:
   78|  3.09k|    pub fn combine_with(&self, other: &Self) -> Option<Self> {
   79|  3.09k|        if self.inner.len() < other.inner.len() {
   80|     10|            let mut result = other.inner.clone();
   81|     10|            for (key, self_value) in self.inner.iter().enumerate() {
   82|      0|                if let Some(self_value) = self_value {
   83|      0|                    match &other.inner[key] {
   84|      0|                        Some(other_value) => {
   85|      0|                            if self_value != other_value {
   86|      0|                                return None;
   87|      0|                            }
   88|       |                        }
   89|      0|                        None => result[key] = Some(self_value.clone()),
   90|       |                    }
   91|      0|                }
   92|       |            }
   93|     10|            Some(Self { inner: result })
   94|       |        } else {
   95|  3.08k|            let mut result = self.inner.clone();
   96|  3.08k|            for (key, other_value) in other.inner.iter().enumerate() {
   97|      4|                if let Some(other_value) = other_value {
   98|      4|                    match &self.inner[key] {
   99|      4|                        Some(self_value) => {
  100|      4|                            if self_value != other_value {
  101|      2|                                return None;
  102|      2|                            }
  103|       |                        }
  104|      0|                        None => result[key] = Some(other_value.clone()),
  105|       |                    }
  106|      0|                }
  107|       |            }
  108|  3.08k|            Some(Self { inner: result })
  109|       |        }
  110|  3.09k|    }
_RNvMsw_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_15EncodedTupleSet9tuple_key:
 5612|    386|    fn tuple_key(&self, tuple: &EncodedTuple) -> u64 {
 5613|    386|        let mut hasher = DefaultHasher::default();
 5614|    389|        for v in &self.key {
 5615|      3|            if let Some(val) = tuple.get(*v) {
 5616|      3|                val.hash(&mut hasher);
 5617|      3|            }
 5618|       |        }
 5619|    386|        hasher.finish()
 5620|    386|    }
_RNvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval8datatype:
 3635|      2|fn datatype(dataset: &DatasetView, value: &EncodedTerm) -> Option<EncodedTerm> {
 3636|      2|    // TODO: optimize?
 3637|      2|    match value {
 3638|       |        EncodedTerm::NamedNode { .. }
 3639|       |        | EncodedTerm::SmallBlankNode { .. }
 3640|       |        | EncodedTerm::BigBlankNode { .. }
 3641|       |        | EncodedTerm::NumericalBlankNode { .. }
 3642|       |        | EncodedTerm::DefaultGraph
 3643|      0|        | EncodedTerm::Triple(_) => None,
 3644|       |        EncodedTerm::SmallStringLiteral(_) | EncodedTerm::BigStringLiteral { .. } => {
 3645|      0|            Some(encode_named_node(dataset, xsd::STRING))
 3646|       |        }
 3647|       |        EncodedTerm::SmallSmallLangStringLiteral { .. }
 3648|       |        | EncodedTerm::SmallBigLangStringLiteral { .. }
 3649|       |        | EncodedTerm::BigSmallLangStringLiteral { .. }
 3650|       |        | EncodedTerm::BigBigLangStringLiteral { .. } => {
 3651|      0|            Some(encode_named_node(dataset, rdf::LANG_STRING))
 3652|       |        }
 3653|      0|        EncodedTerm::SmallTypedLiteral { datatype_id, .. }
 3654|      0|        | EncodedTerm::BigTypedLiteral { datatype_id, .. } => Some(EncodedTerm::NamedNode {
 3655|      0|            iri_id: *datatype_id,
 3656|      0|        }),
 3657|      2|        EncodedTerm::BooleanLiteral(..) => Some(encode_named_node(dataset, xsd::BOOLEAN)),
 3658|      0|        EncodedTerm::FloatLiteral(..) => Some(encode_named_node(dataset, xsd::FLOAT)),
 3659|      0|        EncodedTerm::DoubleLiteral(..) => Some(encode_named_node(dataset, xsd::DOUBLE)),
 3660|      0|        EncodedTerm::IntegerLiteral(..) => Some(encode_named_node(dataset, xsd::INTEGER)),
 3661|      0|        EncodedTerm::DecimalLiteral(..) => Some(encode_named_node(dataset, xsd::DECIMAL)),
 3662|      0|        EncodedTerm::DateTimeLiteral(..) => Some(encode_named_node(dataset, xsd::DATE_TIME)),
 3663|      0|        EncodedTerm::TimeLiteral(..) => Some(encode_named_node(dataset, xsd::TIME)),
 3664|      0|        EncodedTerm::DateLiteral(..) => Some(encode_named_node(dataset, xsd::DATE)),
 3665|      0|        EncodedTerm::GYearMonthLiteral(..) => Some(encode_named_node(dataset, xsd::G_YEAR_MONTH)),
 3666|      0|        EncodedTerm::GYearLiteral(..) => Some(encode_named_node(dataset, xsd::G_YEAR)),
 3667|      0|        EncodedTerm::GMonthDayLiteral(..) => Some(encode_named_node(dataset, xsd::G_MONTH_DAY)),
 3668|      0|        EncodedTerm::GDayLiteral(..) => Some(encode_named_node(dataset, xsd::G_DAY)),
 3669|      0|        EncodedTerm::GMonthLiteral(..) => Some(encode_named_node(dataset, xsd::G_MONTH)),
 3670|      0|        EncodedTerm::DurationLiteral(..) => Some(encode_named_node(dataset, xsd::DURATION)),
 3671|       |        EncodedTerm::YearMonthDurationLiteral(..) => {
 3672|      0|            Some(encode_named_node(dataset, xsd::YEAR_MONTH_DURATION))
 3673|       |        }
 3674|       |        EncodedTerm::DayTimeDurationLiteral(..) => {
 3675|      0|            Some(encode_named_node(dataset, xsd::DAY_TIME_DURATION))
 3676|       |        }
 3677|       |    }
 3678|      2|}
_RNvMs1_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_21NumericBinaryOperands3new:
 3702|    138|    fn new(a: EncodedTerm, b: EncodedTerm) -> Option<Self> {
 3703|    138|        match (a, b) {
 3704|      0|            (EncodedTerm::FloatLiteral(v1), EncodedTerm::FloatLiteral(v2)) => {
 3705|      0|                Some(Self::Float(v1, v2))
 3706|       |            }
 3707|      0|            (EncodedTerm::FloatLiteral(v1), EncodedTerm::DoubleLiteral(v2)) => {
 3708|      0|                Some(Self::Double(v1.into(), v2))
 3709|       |            }
 3710|      0|            (EncodedTerm::FloatLiteral(v1), EncodedTerm::IntegerLiteral(v2)) => {
 3711|      0|                Some(Self::Float(v1, v2.into()))
 3712|       |            }
 3713|      0|            (EncodedTerm::FloatLiteral(v1), EncodedTerm::DecimalLiteral(v2)) => {
 3714|      0|                Some(Self::Float(v1, v2.into()))
 3715|       |            }
 3716|      0|            (EncodedTerm::DoubleLiteral(v1), EncodedTerm::FloatLiteral(v2)) => {
 3717|      0|                Some(Self::Double(v1, v2.into()))
 3718|       |            }
 3719|      0|            (EncodedTerm::DoubleLiteral(v1), EncodedTerm::DoubleLiteral(v2)) => {
 3720|      0|                Some(Self::Double(v1, v2))
 3721|       |            }
 3722|      0|            (EncodedTerm::DoubleLiteral(v1), EncodedTerm::IntegerLiteral(v2)) => {
 3723|      0|                Some(Self::Double(v1, v2.into()))
 3724|       |            }
 3725|      0|            (EncodedTerm::DoubleLiteral(v1), EncodedTerm::DecimalLiteral(v2)) => {
 3726|      0|                Some(Self::Double(v1, v2.into()))
 3727|       |            }
 3728|      0|            (EncodedTerm::IntegerLiteral(v1), EncodedTerm::FloatLiteral(v2)) => {
 3729|      0|                Some(Self::Float(v1.into(), v2))
 3730|       |            }
 3731|      0|            (EncodedTerm::IntegerLiteral(v1), EncodedTerm::DoubleLiteral(v2)) => {
 3732|      0|                Some(Self::Double(v1.into(), v2))
 3733|       |            }
 3734|     64|            (EncodedTerm::IntegerLiteral(v1), EncodedTerm::IntegerLiteral(v2)) => {
 3735|     64|                Some(Self::Integer(v1, v2))
 3736|       |            }
 3737|      3|            (EncodedTerm::IntegerLiteral(v1), EncodedTerm::DecimalLiteral(v2)) => {
 3738|      3|                Some(Self::Decimal(v1.into(), v2))
 3739|       |            }
 3740|      0|            (EncodedTerm::DecimalLiteral(v1), EncodedTerm::FloatLiteral(v2)) => {
 3741|      0|                Some(Self::Float(v1.into(), v2))
 3742|       |            }
 3743|      0|            (EncodedTerm::DecimalLiteral(v1), EncodedTerm::DoubleLiteral(v2)) => {
 3744|      0|                Some(Self::Double(v1.into(), v2))
 3745|       |            }
 3746|      0|            (EncodedTerm::DecimalLiteral(v1), EncodedTerm::IntegerLiteral(v2)) => {
 3747|      0|                Some(Self::Decimal(v1, v2.into()))
 3748|       |            }
 3749|     36|            (EncodedTerm::DecimalLiteral(v1), EncodedTerm::DecimalLiteral(v2)) => {
 3750|     36|                Some(Self::Decimal(v1, v2))
 3751|       |            }
 3752|      0|            (EncodedTerm::DurationLiteral(v1), EncodedTerm::DurationLiteral(v2)) => {
 3753|      0|                Some(Self::Duration(v1, v2))
 3754|       |            }
 3755|      0|            (EncodedTerm::DurationLiteral(v1), EncodedTerm::YearMonthDurationLiteral(v2)) => {
 3756|      0|                Some(Self::Duration(v1, v2.into()))
 3757|       |            }
 3758|      0|            (EncodedTerm::DurationLiteral(v1), EncodedTerm::DayTimeDurationLiteral(v2)) => {
 3759|      0|                Some(Self::Duration(v1, v2.into()))
 3760|       |            }
 3761|      0|            (EncodedTerm::YearMonthDurationLiteral(v1), EncodedTerm::DurationLiteral(v2)) => {
 3762|      0|                Some(Self::Duration(v1.into(), v2))
 3763|       |            }
 3764|       |            (
 3765|      0|                EncodedTerm::YearMonthDurationLiteral(v1),
 3766|      0|                EncodedTerm::YearMonthDurationLiteral(v2),
 3767|      0|            ) => Some(Self::YearMonthDuration(v1, v2)),
 3768|       |            (
 3769|      0|                EncodedTerm::YearMonthDurationLiteral(v1),
 3770|      0|                EncodedTerm::DayTimeDurationLiteral(v2),
 3771|      0|            ) => Some(Self::Duration(v1.into(), v2.into())),
 3772|      0|            (EncodedTerm::DayTimeDurationLiteral(v1), EncodedTerm::DurationLiteral(v2)) => {
 3773|      0|                Some(Self::Duration(v1.into(), v2))
 3774|       |            }
 3775|       |            (
 3776|      0|                EncodedTerm::DayTimeDurationLiteral(v1),
 3777|      0|                EncodedTerm::YearMonthDurationLiteral(v2),
 3778|      0|            ) => Some(Self::Duration(v1.into(), v2.into())),
 3779|      0|            (EncodedTerm::DayTimeDurationLiteral(v1), EncodedTerm::DayTimeDurationLiteral(v2)) => {
 3780|      0|                Some(Self::DayTimeDuration(v1, v2))
 3781|       |            }
 3782|      0|            (EncodedTerm::DateTimeLiteral(v1), EncodedTerm::DateTimeLiteral(v2)) => {
 3783|      0|                Some(Self::DateTime(v1, v2))
 3784|       |            }
 3785|      0|            (EncodedTerm::DateLiteral(v1), EncodedTerm::DateLiteral(v2)) => {
 3786|      0|                Some(Self::Date(v1, v2))
 3787|       |            }
 3788|      0|            (EncodedTerm::TimeLiteral(v1), EncodedTerm::TimeLiteral(v2)) => {
 3789|      0|                Some(Self::Time(v1, v2))
 3790|       |            }
 3791|      0|            (EncodedTerm::DateTimeLiteral(v1), EncodedTerm::DurationLiteral(v2)) => {
 3792|      0|                Some(Self::DateTimeDuration(v1, v2))
 3793|       |            }
 3794|      0|            (EncodedTerm::DateTimeLiteral(v1), EncodedTerm::YearMonthDurationLiteral(v2)) => {
 3795|      0|                Some(Self::DateTimeYearMonthDuration(v1, v2))
 3796|       |            }
 3797|      0|            (EncodedTerm::DateTimeLiteral(v1), EncodedTerm::DayTimeDurationLiteral(v2)) => {
 3798|      0|                Some(Self::DateTimeDayTimeDuration(v1, v2))
 3799|       |            }
 3800|      0|            (EncodedTerm::DateLiteral(v1), EncodedTerm::DurationLiteral(v2)) => {
 3801|      0|                Some(Self::DateDuration(v1, v2))
 3802|       |            }
 3803|      0|            (EncodedTerm::DateLiteral(v1), EncodedTerm::YearMonthDurationLiteral(v2)) => {
 3804|      0|                Some(Self::DateYearMonthDuration(v1, v2))
 3805|       |            }
 3806|      0|            (EncodedTerm::DateLiteral(v1), EncodedTerm::DayTimeDurationLiteral(v2)) => {
 3807|      0|                Some(Self::DateDayTimeDuration(v1, v2))
 3808|       |            }
 3809|      0|            (EncodedTerm::TimeLiteral(v1), EncodedTerm::DurationLiteral(v2)) => {
 3810|      0|                Some(Self::TimeDuration(v1, v2))
 3811|       |            }
 3812|      0|            (EncodedTerm::TimeLiteral(v1), EncodedTerm::DayTimeDurationLiteral(v2)) => {
 3813|      0|                Some(Self::TimeDayTimeDuration(v1, v2))
 3814|       |            }
 3815|     35|            _ => None,
 3816|       |        }
 3817|    138|    }
_RNvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval6equals:
 3178|     12|fn equals(a: &EncodedTerm, b: &EncodedTerm) -> Option<bool> {
 3179|     12|    match a {
 3180|       |        EncodedTerm::DefaultGraph
 3181|       |        | EncodedTerm::NamedNode { .. }
 3182|       |        | EncodedTerm::NumericalBlankNode { .. }
 3183|       |        | EncodedTerm::SmallBlankNode { .. }
 3184|       |        | EncodedTerm::BigBlankNode { .. }
 3185|       |        | EncodedTerm::SmallSmallLangStringLiteral { .. }
 3186|       |        | EncodedTerm::SmallBigLangStringLiteral { .. }
 3187|       |        | EncodedTerm::BigSmallLangStringLiteral { .. }
 3188|      0|        | EncodedTerm::BigBigLangStringLiteral { .. } => Some(a == b),
 3189|      0|        EncodedTerm::SmallStringLiteral(a) => match b {
 3190|      0|            EncodedTerm::SmallStringLiteral(b) => Some(a == b),
 3191|      0|            EncodedTerm::SmallTypedLiteral { .. } | EncodedTerm::BigTypedLiteral { .. } => None,
 3192|      0|            _ => Some(false),
 3193|       |        },
 3194|      0|        EncodedTerm::BigStringLiteral { value_id: a } => match b {
 3195|      0|            EncodedTerm::BigStringLiteral { value_id: b } => Some(a == b),
 3196|      0|            EncodedTerm::SmallTypedLiteral { .. } | EncodedTerm::BigTypedLiteral { .. } => None,
 3197|      0|            _ => Some(false),
 3198|       |        },
 3199|      0|        EncodedTerm::SmallTypedLiteral { .. } => match b {
 3200|      0|            EncodedTerm::SmallTypedLiteral { .. } if a == b => Some(true),
 3201|       |            EncodedTerm::NamedNode { .. }
 3202|       |            | EncodedTerm::NumericalBlankNode { .. }
 3203|       |            | EncodedTerm::SmallBlankNode { .. }
 3204|       |            | EncodedTerm::BigBlankNode { .. }
 3205|       |            | EncodedTerm::SmallSmallLangStringLiteral { .. }
 3206|       |            | EncodedTerm::SmallBigLangStringLiteral { .. }
 3207|       |            | EncodedTerm::BigSmallLangStringLiteral { .. }
 3208|       |            | EncodedTerm::BigBigLangStringLiteral { .. }
 3209|      0|            | EncodedTerm::BigTypedLiteral { .. } => Some(false),
 3210|      0|            _ => None,
 3211|       |        },
 3212|      0|        EncodedTerm::BigTypedLiteral { .. } => match b {
 3213|      0|            EncodedTerm::BigTypedLiteral { .. } if a == b => Some(true),
 3214|       |            EncodedTerm::NamedNode { .. }
 3215|       |            | EncodedTerm::NumericalBlankNode { .. }
 3216|       |            | EncodedTerm::SmallBlankNode { .. }
 3217|       |            | EncodedTerm::BigBlankNode { .. }
 3218|       |            | EncodedTerm::SmallSmallLangStringLiteral { .. }
 3219|       |            | EncodedTerm::SmallBigLangStringLiteral { .. }
 3220|       |            | EncodedTerm::BigSmallLangStringLiteral { .. }
 3221|       |            | EncodedTerm::BigBigLangStringLiteral { .. }
 3222|      0|            | EncodedTerm::SmallTypedLiteral { .. } => Some(false),
 3223|      0|            _ => None,
 3224|       |        },
 3225|     12|        EncodedTerm::BooleanLiteral(a) => match b {
 3226|     12|            EncodedTerm::BooleanLiteral(b) => Some(a == b),
 3227|      0|            _ if b.is_unknown_typed_literal() => None,
 3228|      0|            _ => Some(false),
 3229|       |        },
 3230|      0|        EncodedTerm::FloatLiteral(a) => match b {
 3231|      0|            EncodedTerm::FloatLiteral(b) => Some(a == b),
 3232|      0|            EncodedTerm::DoubleLiteral(b) => Some(Double::from(*a) == *b),
 3233|      0|            EncodedTerm::IntegerLiteral(b) => Some(*a == (*b).into()),
 3234|      0|            EncodedTerm::DecimalLiteral(b) => Some(*a == (*b).into()),
 3235|      0|            _ if b.is_unknown_typed_literal() => None,
 3236|      0|            _ => Some(false),
 3237|       |        },
 3238|      0|        EncodedTerm::DoubleLiteral(a) => match b {
 3239|      0|            EncodedTerm::FloatLiteral(b) => Some(*a == (*b).into()),
 3240|      0|            EncodedTerm::DoubleLiteral(b) => Some(a == b),
 3241|      0|            EncodedTerm::IntegerLiteral(b) => Some(*a == (*b).into()),
 3242|      0|            EncodedTerm::DecimalLiteral(b) => Some(*a == (*b).into()),
 3243|      0|            _ if b.is_unknown_typed_literal() => None,
 3244|      0|            _ => Some(false),
 3245|       |        },
 3246|      0|        EncodedTerm::IntegerLiteral(a) => match b {
 3247|      0|            EncodedTerm::FloatLiteral(b) => Some(Float::from(*a) == *b),
 3248|      0|            EncodedTerm::DoubleLiteral(b) => Some(Double::from(*a) == *b),
 3249|      0|            EncodedTerm::IntegerLiteral(b) => Some(a == b),
 3250|      0|            EncodedTerm::DecimalLiteral(b) => Some(Decimal::from(*a) == *b),
 3251|      0|            _ if b.is_unknown_typed_literal() => None,
 3252|      0|            _ => Some(false),
 3253|       |        },
 3254|      0|        EncodedTerm::DecimalLiteral(a) => match b {
 3255|      0|            EncodedTerm::FloatLiteral(b) => Some(Float::from(*a) == *b),
 3256|      0|            EncodedTerm::DoubleLiteral(b) => Some(Double::from(*a) == *b),
 3257|      0|            EncodedTerm::IntegerLiteral(b) => Some(*a == (*b).into()),
 3258|      0|            EncodedTerm::DecimalLiteral(b) => Some(a == b),
 3259|      0|            _ if b.is_unknown_typed_literal() => None,
 3260|      0|            _ => Some(false),
 3261|       |        },
 3262|      0|        EncodedTerm::DateTimeLiteral(a) => match b {
 3263|      0|            EncodedTerm::DateTimeLiteral(b) => Some(a == b),
 3264|      0|            _ if b.is_unknown_typed_literal() => None,
 3265|      0|            _ => Some(false),
 3266|       |        },
 3267|      0|        EncodedTerm::TimeLiteral(a) => match b {
 3268|      0|            EncodedTerm::TimeLiteral(b) => Some(a == b),
 3269|      0|            _ if b.is_unknown_typed_literal() => None,
 3270|      0|            _ => Some(false),
 3271|       |        },
 3272|      0|        EncodedTerm::DateLiteral(a) => match b {
 3273|      0|            EncodedTerm::DateLiteral(b) => Some(a == b),
 3274|      0|            _ if b.is_unknown_typed_literal() => None,
 3275|      0|            _ => Some(false),
 3276|       |        },
 3277|      0|        EncodedTerm::GYearMonthLiteral(a) => match b {
 3278|      0|            EncodedTerm::GYearMonthLiteral(b) => Some(a == b),
 3279|      0|            _ if b.is_unknown_typed_literal() => None,
 3280|      0|            _ => Some(false),
 3281|       |        },
 3282|      0|        EncodedTerm::GYearLiteral(a) => match b {
 3283|      0|            EncodedTerm::GYearLiteral(b) => Some(a == b),
 3284|      0|            _ if b.is_unknown_typed_literal() => None,
 3285|      0|            _ => Some(false),
 3286|       |        },
 3287|      0|        EncodedTerm::GMonthDayLiteral(a) => match b {
 3288|      0|            EncodedTerm::GMonthDayLiteral(b) => Some(a == b),
 3289|      0|            _ if b.is_unknown_typed_literal() => None,
 3290|      0|            _ => Some(false),
 3291|       |        },
 3292|      0|        EncodedTerm::GDayLiteral(a) => match b {
 3293|      0|            EncodedTerm::GDayLiteral(b) => Some(a == b),
 3294|      0|            _ if b.is_unknown_typed_literal() => None,
 3295|      0|            _ => Some(false),
 3296|       |        },
 3297|      0|        EncodedTerm::GMonthLiteral(a) => match b {
 3298|      0|            EncodedTerm::GMonthLiteral(b) => Some(a == b),
 3299|      0|            _ if b.is_unknown_typed_literal() => None,
 3300|      0|            _ => Some(false),
 3301|       |        },
 3302|      0|        EncodedTerm::DurationLiteral(a) => match b {
 3303|      0|            EncodedTerm::DurationLiteral(b) => Some(a == b),
 3304|      0|            EncodedTerm::YearMonthDurationLiteral(b) => Some(a == b),
 3305|      0|            EncodedTerm::DayTimeDurationLiteral(b) => Some(a == b),
 3306|      0|            _ if b.is_unknown_typed_literal() => None,
 3307|      0|            _ => Some(false),
 3308|       |        },
 3309|      0|        EncodedTerm::YearMonthDurationLiteral(a) => match b {
 3310|      0|            EncodedTerm::DurationLiteral(b) => Some(a == b),
 3311|      0|            EncodedTerm::YearMonthDurationLiteral(b) => Some(a == b),
 3312|      0|            EncodedTerm::DayTimeDurationLiteral(b) => Some(a == b),
 3313|      0|            _ if b.is_unknown_typed_literal() => None,
 3314|      0|            _ => Some(false),
 3315|       |        },
 3316|      0|        EncodedTerm::DayTimeDurationLiteral(a) => match b {
 3317|      0|            EncodedTerm::DurationLiteral(b) => Some(a == b),
 3318|      0|            EncodedTerm::YearMonthDurationLiteral(b) => Some(a == b),
 3319|      0|            EncodedTerm::DayTimeDurationLiteral(b) => Some(a == b),
 3320|      0|            _ if b.is_unknown_typed_literal() => None,
 3321|      0|            _ => Some(false),
 3322|       |        },
 3323|      0|        EncodedTerm::Triple(a) => {
 3324|      0|            if let EncodedTerm::Triple(b) = b {
 3325|       |                Some(
 3326|      0|                    equals(&a.subject, &b.subject)?
 3327|      0|                        && equals(&a.predicate, &b.predicate)?
 3328|      0|                        && equals(&a.object, &b.object)?,
 3329|       |                )
 3330|       |            } else {
 3331|      0|                Some(false)
 3332|       |            }
 3333|       |        }
 3334|       |    }
 3335|     12|}
_RNvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval33are_compatible_and_not_disjointed:
 3957|      4|pub fn are_compatible_and_not_disjointed(a: &EncodedTuple, b: &EncodedTuple) -> bool {
 3958|      4|    let mut found_intersection = false;
 3959|      4|    for (a_value, b_value) in a.iter().zip(b.iter()) {
 3960|      0|        if let (Some(a_value), Some(b_value)) = (a_value, b_value) {
 3961|      0|            if a_value != b_value {
 3962|      0|                return false;
 3963|      0|            }
 3964|      0|            found_intersection = true;
 3965|      0|        }
 3966|       |    }
 3967|      4|    found_intersection
 3968|      4|}
_RNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13PathEvaluator32find_graphs_where_the_node_is_in:
 4714|     14|    fn find_graphs_where_the_node_is_in(
 4715|     14|        &self,
 4716|     14|        term: &EncodedTerm,
 4717|     14|    ) -> impl Iterator<Item = Result<EncodedTerm, EvaluationError>> {
 4718|     14|        self.dataset
 4719|     14|            .encoded_quads_for_pattern(Some(term), None, None, None)
 4720|     14|            .chain(
 4721|     14|                self.dataset
 4722|     14|                    .encoded_quads_for_pattern(None, None, Some(term), None),
 4723|     14|            )
 4724|     14|            .map(|q| Ok(q?.graph_name))
 4725|     14|    }
_RNvMs2_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13TupleSelector17get_pattern_value:
 3894|   100k|    fn get_pattern_value(&self, tuple: &EncodedTuple) -> Option<EncodedTerm> {
 3895|   100k|        match self {
 3896|  42.1k|            Self::Constant(c) => Some(c.clone()),
 3897|  58.7k|            Self::Variable(v) => tuple.get(*v).cloned(),
 3898|      0|            Self::TriplePattern(triple) => Some(
 3899|      0|                EncodedTriple {
 3900|      0|                    subject: triple.subject.get_pattern_value(tuple)?,
 3901|      0|                    predicate: triple.predicate.get_pattern_value(tuple)?,
 3902|      0|                    object: triple.object.get_pattern_value(tuple)?,
 3903|       |                }
 3904|      0|                .into(),
 3905|       |            ),
 3906|       |        }
 3907|   100k|    }
_RNvXs5_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_16HashJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 4772|     17|    fn next(&mut self) -> Option<Self::Item> {
 4773|       |        loop {
 4774|     17|            if let Some(result) = self.buffered_results.pop() {
 4775|      0|                return Some(result);
 4776|     17|            }
 4777|     17|            let probe_tuple = match self.probe_iter.next()? {
 4778|      0|                Ok(probe_tuple) => probe_tuple,
 4779|      0|                Err(error) => return Some(Err(error)),
 4780|       |            };
 4781|      0|            self.buffered_results.extend(
 4782|      0|                self.built
 4783|      0|                    .get(&probe_tuple)
 4784|      0|                    .iter()
 4785|      0|                    .filter_map(|built_tuple| probe_tuple.combine_with(built_tuple).map(Ok)),
 4786|      0|            )
 4787|       |        }
 4788|     17|    }
_RNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13PathEvaluator16eval_to_in_graph:
 4320|    955|    fn eval_to_in_graph(
 4321|    955|        &self,
 4322|    955|        path: &PropertyPath,
 4323|    955|        end: &EncodedTerm,
 4324|    955|        graph_name: &EncodedTerm,
 4325|    955|    ) -> Box<dyn Iterator<Item = Result<EncodedTerm, EvaluationError>>> {
 4326|    955|        match path {
 4327|    117|            PropertyPath::Path(p) => Box::new(
 4328|    117|                self.dataset
 4329|    117|                    .encoded_quads_for_pattern(None, Some(p), Some(end), Some(graph_name))
 4330|    117|                    .map(|t| Ok(t?.subject)),
 4331|    117|            ),
 4332|    411|            PropertyPath::Reverse(p) => self.eval_from_in_graph(p, end, graph_name),
 4333|    105|            PropertyPath::Sequence(a, b) => {
 4334|    105|                let eval = self.clone();
 4335|    105|                let a = Rc::clone(a);
 4336|    105|                let graph_name2 = graph_name.clone();
 4337|    105|                Box::new(
 4338|    105|                    self.eval_to_in_graph(b, end, graph_name)
 4339|    105|                        .flat_map_ok(move |middle| {
 4340|       |                            eval.eval_to_in_graph(&a, &middle, &graph_name2)
 4341|    105|                        }),
 4342|    105|                )
 4343|       |            }
 4344|    126|            PropertyPath::Alternative(a, b) => Box::new(hash_deduplicate(
 4345|    126|                self.eval_to_in_graph(a, end, graph_name)
 4346|    126|                    .chain(self.eval_to_in_graph(b, end, graph_name)),
 4347|    126|            )),
 4348|     37|            PropertyPath::ZeroOrMore(p) => {
 4349|     37|                self.run_if_term_is_a_graph_node(end, graph_name, || {
 4350|       |                    let eval = self.clone();
 4351|       |                    let p = Rc::clone(p);
 4352|       |                    let graph_name2 = graph_name.clone();
 4353|       |                    transitive_closure(Some(Ok(end.clone())), move |e| {
 4354|       |                        eval.eval_to_in_graph(&p, &e, &graph_name2)
 4355|       |                    })
 4356|     37|                })
 4357|       |            }
 4358|     24|            PropertyPath::OneOrMore(p) => {
 4359|     24|                let eval = self.clone();
 4360|     24|                let p = Rc::clone(p);
 4361|     24|                let graph_name2 = graph_name.clone();
 4362|     24|                Box::new(transitive_closure(
 4363|     24|                    self.eval_to_in_graph(&p, end, graph_name),
 4364|     24|                    move |e| eval.eval_to_in_graph(&p, &e, &graph_name2),
 4365|     24|                ))
 4366|       |            }
 4367|     94|            PropertyPath::ZeroOrOne(p) => self.run_if_term_is_a_graph_node(end, graph_name, || {
 4368|       |                hash_deduplicate(
 4369|       |                    once(Ok(end.clone())).chain(self.eval_to_in_graph(p, end, graph_name)),
 4370|       |                )
 4371|     94|            }),
 4372|     41|            PropertyPath::NegatedPropertySet(ps) => {
 4373|     41|                let ps = Rc::clone(ps);
 4374|     41|                Box::new(
 4375|     41|                    self.dataset
 4376|     41|                        .encoded_quads_for_pattern(None, None, Some(end), Some(graph_name))
 4377|     41|                        .filter_map(move |t| match t {
 4378|       |                            Ok(t) => {
 4379|       |                                if ps.iter().any(|p| *p == t.predicate) {
 4380|       |                                    None
 4381|       |                                } else {
 4382|       |                                    Some(Ok(t.subject))
 4383|       |                                }
 4384|       |                            }
 4385|       |                            Err(e) => Some(Err(e)),
 4386|     41|                        }),
 4387|     41|                )
 4388|       |            }
 4389|       |        }
 4390|    955|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB2_12EncodedTuple3get:
   63|  66.3k|    pub fn get(&self, index: usize) -> Option<&EncodedTerm> {
   64|  66.3k|        self.inner.get(index).unwrap_or(&None).as_ref()
   65|  66.3k|    }
_RNvMsw_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_15EncodedTupleSet6insert:
 5600|     95|    fn insert(&mut self, tuple: EncodedTuple) {
 5601|     95|        self.map
 5602|     95|            .entry(self.tuple_key(&tuple))
 5603|     95|            .or_default()
 5604|     95|            .push(tuple);
 5605|     95|        self.len += 1;
 5606|     95|    }
_RNvXsF_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_12EncodedTupleNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
   43|    326|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB2_12EncodedTuple8contains:
   59|     46|    pub fn contains(&self, index: usize) -> bool {
   60|     46|        self.inner.get(index).map_or(false, Option::is_some)
   61|     46|    }
_RNvMsw_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_15EncodedTupleSet3new:
 5592|    375|    fn new(key: Vec<usize>) -> Self {
 5593|    375|        Self {
 5594|    375|            key,
 5595|    375|            map: HashMap::new(),
 5596|    375|            len: 0,
 5597|    375|        }
 5598|    375|    }
_RNvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval20partial_cmp_literals:
 3445|      2|fn partial_cmp_literals(
 3446|      2|    dataset: &DatasetView,
 3447|      2|    a: &EncodedTerm,
 3448|      2|    b: &EncodedTerm,
 3449|      2|) -> Option<Ordering> {
 3450|      2|    match a {
 3451|      0|        EncodedTerm::SmallStringLiteral(a) => match b {
 3452|      0|            EncodedTerm::SmallStringLiteral(b) => a.partial_cmp(b),
 3453|      0|            EncodedTerm::BigStringLiteral { value_id: b } => compare_str_str_id(dataset, a, b),
 3454|      0|            _ => None,
 3455|       |        },
 3456|      0|        EncodedTerm::BigStringLiteral { value_id: a } => match b {
 3457|      0|            EncodedTerm::SmallStringLiteral(b) => compare_str_id_str(dataset, a, b),
 3458|      0|            EncodedTerm::BigStringLiteral { value_id: b } => compare_str_ids(dataset, a, b),
 3459|      0|            _ => None,
 3460|       |        },
 3461|       |        EncodedTerm::SmallSmallLangStringLiteral {
 3462|      0|            value: a,
 3463|      0|            language: la,
 3464|      0|        } => match b {
 3465|      0|            EncodedTerm::SmallSmallLangStringLiteral {
 3466|      0|                value: b,
 3467|      0|                language: lb,
 3468|      0|            } if la == lb => a.partial_cmp(b),
 3469|       |            EncodedTerm::BigSmallLangStringLiteral {
 3470|      0|                value_id: b,
 3471|      0|                language: lb,
 3472|      0|            } if la == lb => compare_str_str_id(dataset, a, b),
 3473|      0|            _ => None,
 3474|       |        },
 3475|       |        EncodedTerm::SmallBigLangStringLiteral {
 3476|      0|            value: a,
 3477|      0|            language_id: la,
 3478|      0|        } => match b {
 3479|      0|            EncodedTerm::SmallBigLangStringLiteral {
 3480|      0|                value: b,
 3481|      0|                language_id: lb,
 3482|      0|            } if la == lb => a.partial_cmp(b),
 3483|       |            EncodedTerm::BigBigLangStringLiteral {
 3484|      0|                value_id: b,
 3485|      0|                language_id: lb,
 3486|      0|            } if la == lb => compare_str_str_id(dataset, a, b),
 3487|      0|            _ => None,
 3488|       |        },
 3489|       |        EncodedTerm::BigSmallLangStringLiteral {
 3490|      0|            value_id: a,
 3491|      0|            language: la,
 3492|      0|        } => match b {
 3493|      0|            EncodedTerm::SmallSmallLangStringLiteral {
 3494|      0|                value: b,
 3495|      0|                language: lb,
 3496|      0|            } if la == lb => compare_str_id_str(dataset, a, b),
 3497|       |            EncodedTerm::BigSmallLangStringLiteral {
 3498|      0|                value_id: b,
 3499|      0|                language: lb,
 3500|      0|            } if la == lb => compare_str_ids(dataset, a, b),
 3501|      0|            _ => None,
 3502|       |        },
 3503|       |        EncodedTerm::BigBigLangStringLiteral {
 3504|      0|            value_id: a,
 3505|      0|            language_id: la,
 3506|      0|        } => match b {
 3507|      0|            EncodedTerm::SmallBigLangStringLiteral {
 3508|      0|                value: b,
 3509|      0|                language_id: lb,
 3510|      0|            } if la == lb => compare_str_id_str(dataset, a, b),
 3511|       |            EncodedTerm::BigBigLangStringLiteral {
 3512|      0|                value_id: b,
 3513|      0|                language_id: lb,
 3514|      0|            } if la == lb => compare_str_ids(dataset, a, b),
 3515|      0|            _ => None,
 3516|       |        },
 3517|      0|        EncodedTerm::FloatLiteral(a) => match b {
 3518|      0|            EncodedTerm::FloatLiteral(b) => a.partial_cmp(b),
 3519|      0|            EncodedTerm::DoubleLiteral(b) => Double::from(*a).partial_cmp(b),
 3520|      0|            EncodedTerm::IntegerLiteral(b) => a.partial_cmp(&Float::from(*b)),
 3521|      0|            EncodedTerm::DecimalLiteral(b) => a.partial_cmp(&(*b).into()),
 3522|      0|            _ => None,
 3523|       |        },
 3524|      0|        EncodedTerm::DoubleLiteral(a) => match b {
 3525|      0|            EncodedTerm::FloatLiteral(b) => a.partial_cmp(&(*b).into()),
 3526|      0|            EncodedTerm::DoubleLiteral(b) => a.partial_cmp(b),
 3527|      0|            EncodedTerm::IntegerLiteral(b) => a.partial_cmp(&Double::from(*b)),
 3528|      0|            EncodedTerm::DecimalLiteral(b) => a.partial_cmp(&(*b).into()),
 3529|      0|            _ => None,
 3530|       |        },
 3531|      0|        EncodedTerm::IntegerLiteral(a) => match b {
 3532|      0|            EncodedTerm::FloatLiteral(b) => Float::from(*a).partial_cmp(b),
 3533|      0|            EncodedTerm::DoubleLiteral(b) => Double::from(*a).partial_cmp(b),
 3534|      0|            EncodedTerm::IntegerLiteral(b) => a.partial_cmp(b),
 3535|      0|            EncodedTerm::DecimalLiteral(b) => Decimal::from(*a).partial_cmp(b),
 3536|      0|            _ => None,
 3537|       |        },
 3538|      2|        EncodedTerm::DecimalLiteral(a) => match b {
 3539|      0|            EncodedTerm::FloatLiteral(b) => Float::from(*a).partial_cmp(b),
 3540|      0|            EncodedTerm::DoubleLiteral(b) => Double::from(*a).partial_cmp(b),
 3541|      2|            EncodedTerm::IntegerLiteral(b) => a.partial_cmp(&Decimal::from(*b)),
 3542|      0|            EncodedTerm::DecimalLiteral(b) => a.partial_cmp(b),
 3543|      0|            _ => None,
 3544|       |        },
 3545|      0|        EncodedTerm::DateTimeLiteral(a) => {
 3546|      0|            if let EncodedTerm::DateTimeLiteral(b) = b {
 3547|      0|                a.partial_cmp(b)
 3548|       |            } else {
 3549|      0|                None
 3550|       |            }
 3551|       |        }
 3552|      0|        EncodedTerm::TimeLiteral(a) => {
 3553|      0|            if let EncodedTerm::TimeLiteral(b) = b {
 3554|      0|                a.partial_cmp(b)
 3555|       |            } else {
 3556|      0|                None
 3557|       |            }
 3558|       |        }
 3559|      0|        EncodedTerm::DateLiteral(a) => {
 3560|      0|            if let EncodedTerm::DateLiteral(b) = b {
 3561|      0|                a.partial_cmp(b)
 3562|       |            } else {
 3563|      0|                None
 3564|       |            }
 3565|       |        }
 3566|      0|        EncodedTerm::GYearMonthLiteral(a) => {
 3567|      0|            if let EncodedTerm::GYearMonthLiteral(b) = b {
 3568|      0|                a.partial_cmp(b)
 3569|       |            } else {
 3570|      0|                None
 3571|       |            }
 3572|       |        }
 3573|      0|        EncodedTerm::GYearLiteral(a) => {
 3574|      0|            if let EncodedTerm::GYearLiteral(b) = b {
 3575|      0|                a.partial_cmp(b)
 3576|       |            } else {
 3577|      0|                None
 3578|       |            }
 3579|       |        }
 3580|      0|        EncodedTerm::GMonthDayLiteral(a) => {
 3581|      0|            if let EncodedTerm::GMonthDayLiteral(b) = b {
 3582|      0|                a.partial_cmp(b)
 3583|       |            } else {
 3584|      0|                None
 3585|       |            }
 3586|       |        }
 3587|      0|        EncodedTerm::GDayLiteral(a) => {
 3588|      0|            if let EncodedTerm::GDayLiteral(b) = b {
 3589|      0|                a.partial_cmp(b)
 3590|       |            } else {
 3591|      0|                None
 3592|       |            }
 3593|       |        }
 3594|      0|        EncodedTerm::GMonthLiteral(a) => {
 3595|      0|            if let EncodedTerm::GMonthLiteral(b) = b {
 3596|      0|                a.partial_cmp(b)
 3597|       |            } else {
 3598|      0|                None
 3599|       |            }
 3600|       |        }
 3601|      0|        EncodedTerm::DurationLiteral(a) => match b {
 3602|      0|            EncodedTerm::DurationLiteral(b) => a.partial_cmp(b),
 3603|      0|            EncodedTerm::YearMonthDurationLiteral(b) => a.partial_cmp(b),
 3604|      0|            EncodedTerm::DayTimeDurationLiteral(b) => a.partial_cmp(b),
 3605|      0|            _ => None,
 3606|       |        },
 3607|      0|        EncodedTerm::YearMonthDurationLiteral(a) => match b {
 3608|      0|            EncodedTerm::DurationLiteral(b) => a.partial_cmp(b),
 3609|      0|            EncodedTerm::YearMonthDurationLiteral(b) => a.partial_cmp(b),
 3610|      0|            EncodedTerm::DayTimeDurationLiteral(b) => a.partial_cmp(b),
 3611|      0|            _ => None,
 3612|       |        },
 3613|      0|        EncodedTerm::DayTimeDurationLiteral(a) => match b {
 3614|      0|            EncodedTerm::DurationLiteral(b) => a.partial_cmp(b),
 3615|      0|            EncodedTerm::YearMonthDurationLiteral(b) => a.partial_cmp(b),
 3616|      0|            EncodedTerm::DayTimeDurationLiteral(b) => a.partial_cmp(b),
 3617|      0|            _ => None,
 3618|       |        },
 3619|      0|        _ => None,
 3620|       |    }
 3621|      2|}
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB2_12EncodedTuple8capacity:
   55|     16|    pub fn capacity(&self) -> usize {
   56|     16|        self.inner.capacity()
   57|     16|    }
_RNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13PathEvaluator47get_subject_or_object_identity_pairs_in_dataset:
 4646|    119|    fn get_subject_or_object_identity_pairs_in_dataset(
 4647|    119|        &self,
 4648|    119|    ) -> impl Iterator<Item = Result<(EncodedTerm, EncodedTerm, EncodedTerm), EvaluationError>>
 4649|    119|    {
 4650|    119|        self.dataset
 4651|    119|            .encoded_quads_for_pattern(None, None, None, None)
 4652|    119|            .flat_map_ok(|t| {
 4653|       |                [
 4654|       |                    Ok((t.subject.clone(), t.subject, t.graph_name.clone())),
 4655|       |                    Ok((t.object.clone(), t.object, t.graph_name)),
 4656|       |                ]
 4657|    119|            })
 4658|    119|    }
_RNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_15SimpleEvaluator20encode_property_path:
 2786|  92.7k|    fn encode_property_path(&self, path: &PropertyPathExpression) -> Rc<PropertyPath> {
 2787|  92.7k|        Rc::new(match path {
 2788|  23.6k|            PropertyPathExpression::NamedNode(node) => PropertyPath::Path(self.encode_term(node)),
 2789|  29.1k|            PropertyPathExpression::Reverse(p) => {
 2790|  29.1k|                PropertyPath::Reverse(self.encode_property_path(p))
 2791|       |            }
 2792|  10.9k|            PropertyPathExpression::Sequence(a, b) => {
 2793|  10.9k|                PropertyPath::Sequence(self.encode_property_path(a), self.encode_property_path(b))
 2794|       |            }
 2795|  4.71k|            PropertyPathExpression::Alternative(a, b) => PropertyPath::Alternative(
 2796|  4.71k|                self.encode_property_path(a),
 2797|  4.71k|                self.encode_property_path(b),
 2798|  4.71k|            ),
 2799|  2.81k|            PropertyPathExpression::ZeroOrMore(p) => {
 2800|  2.81k|                PropertyPath::ZeroOrMore(self.encode_property_path(p))
 2801|       |            }
 2802|  5.19k|            PropertyPathExpression::OneOrMore(p) => {
 2803|  5.19k|                PropertyPath::OneOrMore(self.encode_property_path(p))
 2804|       |            }
 2805|  12.2k|            PropertyPathExpression::ZeroOrOne(p) => {
 2806|  12.2k|                PropertyPath::ZeroOrOne(self.encode_property_path(p))
 2807|       |            }
 2808|  4.14k|            PropertyPathExpression::NegatedPropertySet(ps) => {
 2809|  4.14k|                PropertyPath::NegatedPropertySet(ps.iter().map(|p| self.encode_term(p)).collect())
 2810|       |            }
 2811|       |        })
 2812|  92.7k|    }
_RNvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval11partial_cmp:
 3425|      6|fn partial_cmp(dataset: &DatasetView, a: &EncodedTerm, b: &EncodedTerm) -> Option<Ordering> {
 3426|      6|    if a == b {
 3427|      4|        Some(Ordering::Equal)
 3428|      2|    } else if let EncodedTerm::Triple(a) = a {
 3429|      0|        if let EncodedTerm::Triple(b) = b {
 3430|      0|            match partial_cmp(dataset, &a.subject, &b.subject) {
 3431|      0|                Some(Ordering::Equal) => match partial_cmp(dataset, &a.predicate, &b.predicate) {
 3432|      0|                    Some(Ordering::Equal) => partial_cmp(dataset, &a.object, &b.object),
 3433|      0|                    o => o,
 3434|       |                },
 3435|      0|                o => o,
 3436|       |            }
 3437|       |        } else {
 3438|      0|            None
 3439|       |        }
 3440|       |    } else {
 3441|      2|        partial_cmp_literals(dataset, a, b)
 3442|       |    }
 3443|      6|}
_RNvMs2_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13TupleSelector24from_ground_term_pattern:
 3828|   100k|    fn from_ground_term_pattern(
 3829|   100k|        term_pattern: &GroundTermPattern,
 3830|   100k|        variables: &mut Vec<Variable>,
 3831|   100k|        dataset: &DatasetView,
 3832|   100k|    ) -> Self {
 3833|   100k|        match term_pattern {
 3834|  89.6k|            GroundTermPattern::Variable(variable) => {
 3835|  89.6k|                Self::Variable(encode_variable(variables, variable))
 3836|       |            }
 3837|  9.01k|            GroundTermPattern::NamedNode(term) => Self::Constant(dataset.encode_term(term)),
 3838|  1.32k|            GroundTermPattern::Literal(term) => Self::Constant(dataset.encode_term(term)),
 3839|      0|            GroundTermPattern::Triple(triple) => {
 3840|      0|                match (
 3841|      0|                    Self::from_ground_term_pattern(&triple.subject, variables, dataset),
 3842|      0|                    Self::from_named_node_pattern(&triple.predicate, variables, dataset),
 3843|      0|                    Self::from_ground_term_pattern(&triple.object, variables, dataset),
 3844|       |                ) {
 3845|       |                    (
 3846|      0|                        Self::Constant(subject),
 3847|      0|                        Self::Constant(predicate),
 3848|      0|                        Self::Constant(object),
 3849|      0|                    ) => Self::Constant(
 3850|      0|                        EncodedTriple {
 3851|      0|                            subject,
 3852|      0|                            predicate,
 3853|      0|                            object,
 3854|      0|                        }
 3855|      0|                        .into(),
 3856|      0|                    ),
 3857|      0|                    (subject, predicate, object) => {
 3858|      0|                        Self::TriplePattern(Rc::new(TripleTupleSelector {
 3859|      0|                            subject,
 3860|      0|                            predicate,
 3861|      0|                            object,
 3862|      0|                        }))
 3863|       |                    }
 3864|       |                }
 3865|       |            }
 3866|       |        }
 3867|   100k|    }
_RNvXsH_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_12EncodedTupleNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   43|  25.7k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13PathEvaluator20eval_closed_in_graph:
 3987|     70|    fn eval_closed_in_graph(
 3988|     70|        &self,
 3989|     70|        path: &PropertyPath,
 3990|     70|        start: &EncodedTerm,
 3991|     70|        end: &EncodedTerm,
 3992|     70|        graph_name: &EncodedTerm,
 3993|     70|    ) -> Result<bool, EvaluationError> {
 3994|     70|        Ok(match path {
 3995|     14|            PropertyPath::Path(p) => self
 3996|     14|                .dataset
 3997|     14|                .encoded_quads_for_pattern(Some(start), Some(p), Some(end), Some(graph_name))
 3998|     14|                .next()
 3999|     14|                .transpose()?
 4000|     14|                .is_some(),
 4001|     30|            PropertyPath::Reverse(p) => self.eval_closed_in_graph(p, end, start, graph_name)?,
 4002|      8|            PropertyPath::Sequence(a, b) => self
 4003|      8|                .eval_from_in_graph(a, start, graph_name)
 4004|      8|                .find_map(|middle| {
 4005|       |                    middle
 4006|       |                        .and_then(|middle| {
 4007|       |                            Ok(self
 4008|       |                                .eval_closed_in_graph(b, &middle, end, graph_name)?
 4009|       |                                .then_some(()))
 4010|       |                        })
 4011|       |                        .transpose()
 4012|      8|                })
 4013|      8|                .transpose()?
 4014|      8|                .is_some(),
 4015|     12|            PropertyPath::Alternative(a, b) => {
 4016|     12|                self.eval_closed_in_graph(a, start, end, graph_name)?
 4017|     12|                    || self.eval_closed_in_graph(b, start, end, graph_name)?
 4018|       |            }
 4019|      0|            PropertyPath::ZeroOrMore(p) => {
 4020|      0|                if start == end {
 4021|      0|                    self.is_subject_or_object_in_graph(start, graph_name)?
 4022|       |                } else {
 4023|      0|                    look_in_transitive_closure(
 4024|      0|                        self.eval_from_in_graph(p, start, graph_name),
 4025|      0|                        move |e| self.eval_from_in_graph(p, &e, graph_name),
 4026|      0|                        end,
 4027|      0|                    )?
 4028|       |                }
 4029|       |            }
 4030|      0|            PropertyPath::OneOrMore(p) => look_in_transitive_closure(
 4031|      0|                self.eval_from_in_graph(p, start, graph_name),
 4032|      0|                move |e| self.eval_from_in_graph(p, &e, graph_name),
 4033|      0|                end,
 4034|      0|            )?,
 4035|      6|            PropertyPath::ZeroOrOne(p) => {
 4036|      6|                if start == end {
 4037|      4|                    self.is_subject_or_object_in_graph(start, graph_name)
 4038|       |                } else {
 4039|      2|                    self.eval_closed_in_graph(p, start, end, graph_name)
 4040|      0|                }?
 4041|       |            }
 4042|      0|            PropertyPath::NegatedPropertySet(ps) => self
 4043|      0|                .dataset
 4044|      0|                .encoded_quads_for_pattern(Some(start), None, Some(end), Some(graph_name))
 4045|      0|                .find_map(move |t| match t {
 4046|       |                    Ok(t) => {
 4047|       |                        if ps.iter().any(|p| *p == t.predicate) {
 4048|       |                            None
 4049|       |                        } else {
 4050|       |                            Some(Ok(()))
 4051|       |                        }
 4052|       |                    }
 4053|       |                    Err(e) => Some(Err(e)),
 4054|      0|                })
 4055|      0|                .transpose()?
 4056|      0|                .is_some(),
 4057|       |        })
 4058|     70|    }
_RNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13PathEvaluator29is_subject_or_object_in_graph:
 4678|    292|    fn is_subject_or_object_in_graph(
 4679|    292|        &self,
 4680|    292|        term: &EncodedTerm,
 4681|    292|        graph_name: &EncodedTerm,
 4682|    292|    ) -> Result<bool, EvaluationError> {
 4683|    292|        Ok(self
 4684|    292|            .dataset
 4685|    292|            .encoded_quads_for_pattern(Some(term), None, None, Some(graph_name))
 4686|    292|            .next()
 4687|    292|            .transpose()?
 4688|    292|            .is_some()
 4689|    292|            || self
 4690|    292|                .dataset
 4691|    292|                .encoded_quads_for_pattern(None, None, Some(term), Some(graph_name))
 4692|    292|                .next()
 4693|    292|                .transpose()?
 4694|    292|                .is_some())
 4695|    292|    }
_RNvXs4_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_28CartesianProductJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 4737|  23.3k|    fn next(&mut self) -> Option<Self::Item> {
 4738|       |        loop {
 4739|  23.5k|            if let Some(result) = self.buffered_results.pop() {
 4740|     27|                return Some(result);
 4741|  23.4k|            }
 4742|  23.4k|            let probe_tuple = match self.probe_iter.next()? {
 4743|    164|                Ok(probe_tuple) => probe_tuple,
 4744|      0|                Err(error) => return Some(Err(error)),
 4745|       |            };
 4746|    193|            for built_tuple in &self.built {
 4747|     29|                if let Some(result_tuple) = probe_tuple.combine_with(built_tuple) {
 4748|     27|                    self.buffered_results.push(Ok(result_tuple))
 4749|      2|                }
 4750|       |            }
 4751|       |        }
 4752|  23.3k|    }
_RNvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval17encode_named_node:
 3001|      2|fn encode_named_node(dataset: &DatasetView, node: NamedNodeRef<'_>) -> EncodedTerm {
 3002|      2|    dataset.encode_term(node)
 3003|      2|}
_RNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13PathEvaluator45get_subject_or_object_identity_pairs_in_graph:
 4632|  4.04k|    fn get_subject_or_object_identity_pairs_in_graph(
 4633|  4.04k|        &self,
 4634|  4.04k|        graph_name: &EncodedTerm,
 4635|  4.04k|    ) -> impl Iterator<Item = Result<(EncodedTerm, EncodedTerm), EvaluationError>> {
 4636|  4.04k|        self.dataset
 4637|  4.04k|            .encoded_quads_for_pattern(None, None, None, Some(graph_name))
 4638|  4.04k|            .flat_map_ok(|t| {
 4639|       |                [
 4640|       |                    Ok((t.subject.clone(), t.subject)),
 4641|       |                    Ok((t.object.clone(), t.object)),
 4642|       |                ]
 4643|  4.04k|            })
 4644|  4.04k|    }
_RNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13PathEvaluator18eval_from_in_graph:
 4158|  1.13k|    fn eval_from_in_graph(
 4159|  1.13k|        &self,
 4160|  1.13k|        path: &PropertyPath,
 4161|  1.13k|        start: &EncodedTerm,
 4162|  1.13k|        graph_name: &EncodedTerm,
 4163|  1.13k|    ) -> Box<dyn Iterator<Item = Result<EncodedTerm, EvaluationError>>> {
 4164|  1.13k|        match path {
 4165|    184|            PropertyPath::Path(p) => Box::new(
 4166|    184|                self.dataset
 4167|    184|                    .encoded_quads_for_pattern(Some(start), Some(p), None, Some(graph_name))
 4168|    184|                    .map(|t| Ok(t?.object)),
 4169|    184|            ),
 4170|    392|            PropertyPath::Reverse(p) => self.eval_to_in_graph(p, start, graph_name),
 4171|    188|            PropertyPath::Sequence(a, b) => {
 4172|    188|                let eval = self.clone();
 4173|    188|                let b = Rc::clone(b);
 4174|    188|                let graph_name2 = graph_name.clone();
 4175|    188|                Box::new(
 4176|    188|                    self.eval_from_in_graph(a, start, graph_name)
 4177|    188|                        .flat_map_ok(move |middle| {
 4178|       |                            eval.eval_from_in_graph(&b, &middle, &graph_name2)
 4179|    188|                        }),
 4180|    188|                )
 4181|       |            }
 4182|    118|            PropertyPath::Alternative(a, b) => Box::new(hash_deduplicate(
 4183|    118|                self.eval_from_in_graph(a, start, graph_name)
 4184|    118|                    .chain(self.eval_from_in_graph(b, start, graph_name)),
 4185|    118|            )),
 4186|     19|            PropertyPath::ZeroOrMore(p) => {
 4187|     19|                self.run_if_term_is_a_graph_node(start, graph_name, || {
 4188|       |                    let eval = self.clone();
 4189|       |                    let p = Rc::clone(p);
 4190|       |                    let graph_name2 = graph_name.clone();
 4191|       |                    transitive_closure(Some(Ok(start.clone())), move |e| {
 4192|       |                        eval.eval_from_in_graph(&p, &e, &graph_name2)
 4193|       |                    })
 4194|     19|                })
 4195|       |            }
 4196|     62|            PropertyPath::OneOrMore(p) => {
 4197|     62|                let eval = self.clone();
 4198|     62|                let p = Rc::clone(p);
 4199|     62|                let graph_name2 = graph_name.clone();
 4200|     62|                Box::new(transitive_closure(
 4201|     62|                    self.eval_from_in_graph(&p, start, graph_name),
 4202|     62|                    move |e| eval.eval_from_in_graph(&p, &e, &graph_name2),
 4203|     62|                ))
 4204|       |            }
 4205|    138|            PropertyPath::ZeroOrOne(p) => {
 4206|    138|                self.run_if_term_is_a_graph_node(start, graph_name, || {
 4207|       |                    hash_deduplicate(
 4208|       |                        once(Ok(start.clone()))
 4209|       |                            .chain(self.eval_from_in_graph(p, start, graph_name)),
 4210|       |                    )
 4211|    138|                })
 4212|       |            }
 4213|     34|            PropertyPath::NegatedPropertySet(ps) => {
 4214|     34|                let ps = Rc::clone(ps);
 4215|     34|                Box::new(
 4216|     34|                    self.dataset
 4217|     34|                        .encoded_quads_for_pattern(Some(start), None, None, Some(graph_name))
 4218|     34|                        .filter_map(move |t| match t {
 4219|       |                            Ok(t) => {
 4220|       |                                if ps.iter().any(|p| *p == t.predicate) {
 4221|       |                                    None
 4222|       |                                } else {
 4223|       |                                    Some(Ok(t.object))
 4224|       |                                }
 4225|       |                            }
 4226|       |                            Err(e) => Some(Err(e)),
 4227|     34|                        }),
 4228|     34|                )
 4229|       |            }
 4230|       |        }
 4231|  1.13k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB2_12EncodedTuple3set:
   71|  7.37k|    pub fn set(&mut self, index: usize, value: EncodedTerm) {
   72|  7.37k|        if self.inner.len() <= index {
   73|  1.62k|            self.inner.resize(index + 1, None);
   74|  5.75k|        }
   75|  7.37k|        self.inner[index] = Some(value);
   76|  7.37k|    }
_RNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB5_13PathEvaluator26eval_open_in_unknown_graph:
 4557|    640|    fn eval_open_in_unknown_graph(
 4558|    640|        &self,
 4559|    640|        path: &PropertyPath,
 4560|    640|    ) -> Box<dyn Iterator<Item = Result<(EncodedTerm, EncodedTerm, EncodedTerm), EvaluationError>>>
 4561|    640|    {
 4562|    640|        match path {
 4563|    124|            PropertyPath::Path(p) => Box::new(
 4564|    124|                self.dataset
 4565|    124|                    .encoded_quads_for_pattern(None, Some(p), None, None)
 4566|    124|                    .map(|t| t.map(|t| (t.subject, t.object, t.graph_name))),
 4567|    124|            ),
 4568|     91|            PropertyPath::Reverse(p) => Box::new(
 4569|     91|                self.eval_open_in_unknown_graph(p)
 4570|     91|                    .map(|t| t.map(|(s, o, g)| (o, s, g))),
 4571|     91|            ),
 4572|    167|            PropertyPath::Sequence(a, b) => {
 4573|    167|                let eval = self.clone();
 4574|    167|                let b = Rc::clone(b);
 4575|    167|                Box::new(self.eval_open_in_unknown_graph(a).flat_map_ok(
 4576|    167|                    move |(start, middle, graph_name)| {
 4577|       |                        eval.eval_from_in_graph(&b, &middle, &graph_name)
 4578|       |                            .map(move |end| Ok((start.clone(), end?, graph_name.clone())))
 4579|    167|                    },
 4580|    167|                ))
 4581|       |            }
 4582|     58|            PropertyPath::Alternative(a, b) => Box::new(hash_deduplicate(
 4583|     58|                self.eval_open_in_unknown_graph(a)
 4584|     58|                    .chain(self.eval_open_in_unknown_graph(b)),
 4585|     58|            )),
 4586|     43|            PropertyPath::ZeroOrMore(p) => {
 4587|     43|                let eval = self.clone();
 4588|     43|                let p = Rc::clone(p);
 4589|     43|                Box::new(transitive_closure(
 4590|     43|                    self.get_subject_or_object_identity_pairs_in_dataset(),
 4591|     43|                    move |(start, middle, graph_name)| {
 4592|       |                        eval.eval_from_in_graph(&p, &middle, &graph_name)
 4593|       |                            .map(move |end| Ok((start.clone(), end?, graph_name.clone())))
 4594|     43|                    },
 4595|     43|                ))
 4596|       |            }
 4597|     24|            PropertyPath::OneOrMore(p) => {
 4598|     24|                let eval = self.clone();
 4599|     24|                let p = Rc::clone(p);
 4600|     24|                Box::new(transitive_closure(
 4601|     24|                    self.eval_open_in_unknown_graph(&p),
 4602|     24|                    move |(start, middle, graph_name)| {
 4603|       |                        eval.eval_from_in_graph(&p, &middle, &graph_name)
 4604|       |                            .map(move |end| Ok((start.clone(), end?, graph_name.clone())))
 4605|     24|                    },
 4606|     24|                ))
 4607|       |            }
 4608|     76|            PropertyPath::ZeroOrOne(p) => Box::new(hash_deduplicate(
 4609|     76|                self.get_subject_or_object_identity_pairs_in_dataset()
 4610|     76|                    .chain(self.eval_open_in_unknown_graph(p)),
 4611|     76|            )),
 4612|     57|            PropertyPath::NegatedPropertySet(ps) => {
 4613|     57|                let ps = Rc::clone(ps);
 4614|     57|                Box::new(
 4615|     57|                    self.dataset
 4616|     57|                        .encoded_quads_for_pattern(None, None, None, None)
 4617|     57|                        .filter_map(move |t| match t {
 4618|       |                            Ok(t) => {
 4619|       |                                if ps.iter().any(|p| *p == t.predicate) {
 4620|       |                                    None
 4621|       |                                } else {
 4622|       |                                    Some(Ok((t.subject, t.object, t.graph_name)))
 4623|       |                                }
 4624|       |                            }
 4625|       |                            Err(e) => Some(Err(e)),
 4626|     57|                        }),
 4627|     57|                )
 4628|       |            }
 4629|       |        }
 4630|    640|    }
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorsu_0s1_0Bd_:
 1041|     14|                                move |(key, accumulators)| {
 1042|     14|                                    let mut result = EncodedTuple::with_capacity(tuple_size);
 1043|     40|                                    for (variable, value) in key_variables.iter().zip(key) {
 1044|     40|                                        if let Some(value) = value {
 1045|      4|                                            result.set(*variable, value);
 1046|     36|                                        }
 1047|       |                                    }
 1048|      0|                                    for (accumulator, variable) in
 1049|     14|                                        accumulators.into_iter().zip(&accumulator_variables)
 1050|       |                                    {
 1051|      0|                                        if let Some(value) = accumulator.state() {
 1052|      0|                                            result.set(*variable, value);
 1053|      0|                                        }
 1054|       |                                    }
 1055|     14|                                    Ok(result)
 1056|     14|                                },
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsf_0Bb_:
 1361|    101|                    move |tuple| match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1362|      0|                        NumericBinaryOperands::Float(v1, v2) => Some((v1 * v2).into()),
 1363|      0|                        NumericBinaryOperands::Double(v1, v2) => Some((v1 * v2).into()),
 1364|      2|                        NumericBinaryOperands::Integer(v1, v2) => Some(v1.checked_mul(v2)?.into()),
 1365|     12|                        NumericBinaryOperands::Decimal(v1, v2) => Some(v1.checked_mul(v2)?.into()),
 1366|      0|                        _ => None,
 1367|    101|                    },
_RNCNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_13PathEvaluator18eval_open_in_graphs3_0Bb_:
 4542|     16|                        .filter_map(move |t| match t {
 4543|     16|                            Ok(t) => {
 4544|     16|                                if ps.iter().any(|p| *p == t.predicate) {
 4545|      2|                                    None
 4546|       |                                } else {
 4547|     14|                                    Some(Ok((t.subject, t.object)))
 4548|       |                                }
 4549|       |                            }
 4550|      0|                            Err(e) => Some(Err(e)),
 4551|     16|                        }),
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators14_0Bb_:
 2286|     10|                        Rc::new(move |tuple| Some(e(tuple)?.is_blank_node().into()))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators8_0Bb_:
  666|  21.5k|                Rc::new(move |from| {
  667|  21.5k|                    let right = Rc::clone(&right);
  668|  21.5k|                    Box::new(left(from).flat_map(move |t| match t {
  669|       |                        Ok(t) => right(t),
  670|       |                        Err(e) => Box::new(once(Err(e))),
  671|  21.5k|                    }))
  672|  21.5k|                })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorse_0Bb_:
 1314|    520|                Rc::new(move |tuple| {
 1315|    520|                    Some(match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1316|      0|                        NumericBinaryOperands::Float(v1, v2) => (v1 - v2).into(),
 1317|      0|                        NumericBinaryOperands::Double(v1, v2) => (v1 - v2).into(),
 1318|      0|                        NumericBinaryOperands::Integer(v1, v2) => v1.checked_sub(v2)?.into(),
 1319|     22|                        NumericBinaryOperands::Decimal(v1, v2) => v1.checked_sub(v2)?.into(),
 1320|      0|                        NumericBinaryOperands::DateTime(v1, v2) => v1.checked_sub(v2)?.into(),
 1321|      0|                        NumericBinaryOperands::Date(v1, v2) => v1.checked_sub(v2)?.into(),
 1322|      0|                        NumericBinaryOperands::Time(v1, v2) => v1.checked_sub(v2)?.into(),
 1323|      0|                        NumericBinaryOperands::Duration(v1, v2) => v1.checked_sub(v2)?.into(),
 1324|      0|                        NumericBinaryOperands::YearMonthDuration(v1, v2) => {
 1325|      0|                            v1.checked_sub(v2)?.into()
 1326|       |                        }
 1327|      0|                        NumericBinaryOperands::DayTimeDuration(v1, v2) => {
 1328|      0|                            v1.checked_sub(v2)?.into()
 1329|       |                        }
 1330|      0|                        NumericBinaryOperands::DateTimeDuration(v1, v2) => {
 1331|      0|                            v1.checked_sub_duration(v2)?.into()
 1332|       |                        }
 1333|      0|                        NumericBinaryOperands::DateTimeYearMonthDuration(v1, v2) => {
 1334|      0|                            v1.checked_sub_year_month_duration(v2)?.into()
 1335|       |                        }
 1336|      0|                        NumericBinaryOperands::DateTimeDayTimeDuration(v1, v2) => {
 1337|      0|                            v1.checked_sub_day_time_duration(v2)?.into()
 1338|       |                        }
 1339|      0|                        NumericBinaryOperands::DateDuration(v1, v2) => {
 1340|      0|                            v1.checked_sub_duration(v2)?.into()
 1341|       |                        }
 1342|      0|                        NumericBinaryOperands::DateYearMonthDuration(v1, v2) => {
 1343|      0|                            v1.checked_sub_year_month_duration(v2)?.into()
 1344|       |                        }
 1345|      0|                        NumericBinaryOperands::DateDayTimeDuration(v1, v2) => {
 1346|      0|                            v1.checked_sub_day_time_duration(v2)?.into()
 1347|       |                        }
 1348|      0|                        NumericBinaryOperands::TimeDuration(v1, v2) => {
 1349|      0|                            v1.checked_sub_duration(v2)?.into()
 1350|       |                        }
 1351|      0|                        NumericBinaryOperands::TimeDayTimeDuration(v1, v2) => {
 1352|      0|                            v1.checked_sub_day_time_duration(v2)?.into()
 1353|       |                        }
 1354|       |                    })
 1355|    520|                })
_RINvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_13PathEvaluator29run_if_term_is_a_dataset_nodeTNtNtNtBa_7storage15numeric_encoder11EncodedTermB1z_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtB2u_6filter6FilterINtNtB2u_5chain5ChainINtNtNtB2w_7sources4once4OnceINtNtB2y_6result6ResultB1z_NtNtB8_5error15EvaluationErrorEEINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB2w_6traits8iterator8Iteratorp4ItemB4o_EL_EENCINvB6_16hash_deduplicateB1z_B3A_E0ENCNCNvB2_26eval_from_in_unknown_graphs2_00ENCB7o_s2_0EBa_:
 4697|      1|    fn run_if_term_is_a_dataset_node<
 4698|      1|        T: 'static,
 4699|      1|        I: IntoIterator<Item = Result<T, EvaluationError>> + 'static,
 4700|      1|    >(
 4701|      1|        &self,
 4702|      1|        term: &EncodedTerm,
 4703|      1|        f: impl FnMut(EncodedTerm) -> I + 'static,
 4704|      1|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4705|      1|        match self
 4706|      1|            .find_graphs_where_the_node_is_in(term)
 4707|      1|            .collect::<Result<HashSet<_>, _>>()
 4708|       |        {
 4709|      1|            Ok(graph_names) => Box::new(graph_names.into_iter().flat_map(f)),
 4710|      0|            Err(error) => Box::new(once(Err(error))),
 4711|       |        }
 4712|      1|    }
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators5_0Bb_:
  613|     19|                                .map(|v| encode_variable(encoded_variables, v))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsg_0Bb_:
  799|     38|                Rc::new(move |from| {
  800|     38|                    Box::new(UnionIterator {
  801|     38|                        plans: children.clone(),
  802|     38|                        input: from,
  803|     38|                        current_iterator: Box::new(empty()),
  804|     38|                        current_plan: 0,
  805|     38|                    })
  806|     38|                })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators9_0Bb_:
  687|     39|                            Rc::new(move |from| {
  688|     39|                                let right: Vec<_> =
  689|     39|                                    right(from.clone()).filter_map(Result::ok).collect();
  690|     39|                                Box::new(left(from).filter(move |left_tuple| {
  691|       |                                    if let Ok(left_tuple) = left_tuple {
  692|       |                                        !right.iter().any(|right_tuple| {
  693|       |                                            are_compatible_and_not_disjointed(
  694|       |                                                left_tuple,
  695|       |                                                right_tuple,
  696|       |                                            )
  697|       |                                        })
  698|       |                                    } else {
  699|       |                                        true
  700|       |                                    }
  701|     39|                                }))
  702|     39|                            })
_RNCNvXs6_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_20HashLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nexts_0Bb_:
 4825|     68|                    .filter(|tuple| {
 4826|     68|                        (self.expression)(tuple)
 4827|     68|                            .and_then(|term| to_bool(&term))
 4828|     68|                            .unwrap_or(false)
 4829|     68|                    })
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator20expression_evaluatorsj_00Bd_:
 1415|     56|                Rc::new(move |tuple| to_bool(&e(tuple)?).map(|v| (!v).into()))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators9_0Bb_:
 1222|     22|                Rc::new(move |tuple| {
 1223|     22|                    Some(
 1224|     22|                        (partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? == Ordering::Greater)
 1225|      0|                            .into(),
 1226|       |                    )
 1227|     22|                })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsc_0Bb_:
 1255|     17|                Rc::new(move |tuple| {
 1256|     17|                    Some(
 1257|     17|                        match partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? {
 1258|      0|                            Ordering::Less | Ordering::Equal => true,
 1259|      0|                            Ordering::Greater => false,
 1260|       |                        }
 1261|      0|                        .into(),
 1262|       |                    )
 1263|     17|                })
_RINvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_13PathEvaluator27run_if_term_is_a_graph_nodeNtNtNtBa_7storage15numeric_encoder11EncodedTermINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtB2m_3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterNtNtB8_5error15EvaluationErrorENcNtINtNtB2q_6result6ResultB1w_B4e_E3Err0EIB3a_INtNtNtNtCsc4CYCHgsNRQ_3std11collections4hash3set8IntoIterB1w_ENcNtB4N_2Ok0EENCNvB2_16eval_to_in_graphs0_0EBa_:
 4660|     37|    fn run_if_term_is_a_graph_node<
 4661|     37|        T: 'static,
 4662|     37|        I: Iterator<Item = Result<T, EvaluationError>> + 'static,
 4663|     37|    >(
 4664|     37|        &self,
 4665|     37|        term: &EncodedTerm,
 4666|     37|        graph_name: &EncodedTerm,
 4667|     37|        f: impl FnOnce() -> I,
 4668|     37|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4669|     37|        match self.is_subject_or_object_in_graph(term, graph_name) {
 4670|      0|            Ok(true) => Box::new(f()),
 4671|       |            Ok(false) => {
 4672|     37|                Box::new(empty()) // Not in the database
 4673|       |            }
 4674|      0|            Err(error) => Box::new(once(Err(error))),
 4675|       |        }
 4676|     37|    }
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsb_0Bb_:
 1247|      4|                Rc::new(move |tuple| {
 1248|      4|                    Some((partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? == Ordering::Less).into())
 1249|      4|                })
_RNvXsf_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtB5_9FlatMapOkNtNtNtB9_7storage15numeric_encoder11EncodedQuadTNtB10_11EncodedTermB1K_EINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2Q_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator45get_subject_or_object_identity_pairs_in_graph0AIB3K_B1J_B49_Ej2_EB2I_4nextB9_:
 5235|  4.04k|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|  4.04k|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|  4.04k|            }
 5242|  4.04k|            self.current = None;
 5243|  4.04k|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|  4.04k|    }
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsn_0Bb_:
 1452|      4|                        Rc::new(move |tuple| {
 1453|      4|                            Some(build_string_literal_from_id(to_string_id(
 1454|      4|                                &dataset,
 1455|      4|                                &e(tuple)?,
 1456|      0|                            )?))
 1457|      4|                        })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators0_0Bb_:
 1155|    427|                Rc::new(move |tuple| tuple.get(v).cloned())
_RNvXsf_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtB5_9FlatMapOkTNtNtNtB9_7storage15numeric_encoder11EncodedTermBZ_BZ_EBY_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2C_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator26eval_open_in_unknown_graphs0_0INtNtNtB2A_8adapters3map3MapIB1V_DB2u_p4ItemIB3w_BZ_B3V_EEL_ENCNCB4w_s0_00EEB2u_4nextB9_:
 5235|    167|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|    167|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|    167|            }
 5242|    167|            self.current = None;
 5243|    167|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|    167|    }
_RINvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_13PathEvaluator29run_if_term_is_a_dataset_nodeTNtNtNtBa_7storage15numeric_encoder11EncodedTermB1z_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtB2u_5chain5ChainIB2q_INtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterNtNtB8_5error15EvaluationErrorENcNtINtNtB2y_6result6ResultB1z_B4r_E3Err0EIB2q_INtNtNtNtCsc4CYCHgsNRQ_3std11collections4hash3set8IntoIterB1z_ENcNtB50_2Ok0EENCNCNvB2_24eval_to_in_unknown_graphs0_0s_0ENCB70_s0_0EBa_:
 4697|      3|    fn run_if_term_is_a_dataset_node<
 4698|      3|        T: 'static,
 4699|      3|        I: IntoIterator<Item = Result<T, EvaluationError>> + 'static,
 4700|      3|    >(
 4701|      3|        &self,
 4702|      3|        term: &EncodedTerm,
 4703|      3|        f: impl FnMut(EncodedTerm) -> I + 'static,
 4704|      3|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4705|      3|        match self
 4706|      3|            .find_graphs_where_the_node_is_in(term)
 4707|      3|            .collect::<Result<HashSet<_>, _>>()
 4708|       |        {
 4709|      3|            Ok(graph_names) => Box::new(graph_names.into_iter().flat_map(f)),
 4710|      0|            Err(error) => Box::new(once(Err(error))),
 4711|       |        }
 4712|      3|    }
_RNCNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtBb_15SimpleEvaluator29build_graph_pattern_evaluatorsu_0s0_00Bf_:
 1017|     40|                                .map(|v| tuple.get(*v).cloned())
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval16hash_deduplicateNtNtNtB6_7storage15numeric_encoder11EncodedTermINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1P_6traits8iterator8Iteratorp4ItemINtNtB1R_6result6ResultBX_NtNtB4_5error15EvaluationErrorEEL_EB2A_EEB6_:
 5175|    244|fn hash_deduplicate<T: Eq + Hash + Clone>(
 5176|    244|    iter: impl Iterator<Item = Result<T, EvaluationError>>,
 5177|    244|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5178|    244|    let mut already_seen = HashSet::with_capacity(iter.size_hint().0);
 5179|    244|    iter.filter(move |e| {
 5180|       |        if let Ok(e) = e {
 5181|       |            if already_seen.contains(e) {
 5182|       |                false
 5183|       |            } else {
 5184|       |                already_seen.insert(e.clone());
 5185|       |                true
 5186|       |            }
 5187|       |        } else {
 5188|       |            true
 5189|       |        }
 5190|    244|    })
 5191|    244|}
_RINvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_13PathEvaluator29run_if_term_is_a_dataset_nodeTNtNtNtBa_7storage15numeric_encoder11EncodedTermB1z_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtB2u_6filter6FilterINtNtB2u_5chain5ChainINtNtNtB2w_7sources4once4OnceINtNtB2y_6result6ResultB1z_NtNtB8_5error15EvaluationErrorEEINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB2w_6traits8iterator8Iteratorp4ItemB4o_EL_EENCINvB6_16hash_deduplicateB1z_B3A_E0ENCNCNvB2_24eval_to_in_unknown_graphs2_00ENCB7o_s2_0EBa_:
 4697|      5|    fn run_if_term_is_a_dataset_node<
 4698|      5|        T: 'static,
 4699|      5|        I: IntoIterator<Item = Result<T, EvaluationError>> + 'static,
 4700|      5|    >(
 4701|      5|        &self,
 4702|      5|        term: &EncodedTerm,
 4703|      5|        f: impl FnMut(EncodedTerm) -> I + 'static,
 4704|      5|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4705|      5|        match self
 4706|      5|            .find_graphs_where_the_node_is_in(term)
 4707|      5|            .collect::<Result<HashSet<_>, _>>()
 4708|       |        {
 4709|      5|            Ok(graph_names) => Box::new(graph_names.into_iter().flat_map(f)),
 4710|      0|            Err(error) => Box::new(once(Err(error))),
 4711|       |        }
 4712|      5|    }
_RNCNvXs4_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_28CartesianProductJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hint0Bb_:
 4758|     77|            max.map(|v| v.saturating_mul(self.built.len())),
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval16hash_deduplicateTNtNtNtB6_7storage15numeric_encoder11EncodedTermBY_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtB2_9FlatMapOkNtB10_11EncodedQuadBX_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1U_6traits8iterator8Iteratorp4ItemINtNtB1W_6result6ResultB2V_NtNtB4_5error15EvaluationErrorEEL_ENCNvMs3_B2_NtB2_13PathEvaluator45get_subject_or_object_identity_pairs_in_graph0AIB4x_BX_B4X_Ej2_EIB3i_DB3R_p4ItemB6O_EL_EEEB6_:
 5175|  3.35k|fn hash_deduplicate<T: Eq + Hash + Clone>(
 5176|  3.35k|    iter: impl Iterator<Item = Result<T, EvaluationError>>,
 5177|  3.35k|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5178|  3.35k|    let mut already_seen = HashSet::with_capacity(iter.size_hint().0);
 5179|  3.35k|    iter.filter(move |e| {
 5180|       |        if let Ok(e) = e {
 5181|       |            if already_seen.contains(e) {
 5182|       |                false
 5183|       |            } else {
 5184|       |                already_seen.insert(e.clone());
 5185|       |                true
 5186|       |            }
 5187|       |        } else {
 5188|       |            true
 5189|       |        }
 5190|  3.35k|    })
 5191|  3.35k|}
_RNvXsf_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtB5_9FlatMapOkNtNtNtB9_7storage15numeric_encoder11EncodedTermBY_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2u_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator18eval_from_in_graphs_0B1M_EB2m_4nextB9_:
 5235|    188|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|    188|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|    188|            }
 5242|    188|            self.current = None;
 5243|    188|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|    188|    }
_RNCNCNvXs6_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_20HashLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nexts_00Bd_:
 4827|     68|                            .and_then(|term| to_bool(&term))
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval9slice_keyNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableEB6_:
 5520|   128k|fn slice_key<T: Eq>(slice: &[T], element: &T) -> Option<usize> {
 5521|  1.55M|    for (i, item) in slice.iter().enumerate() {
 5522|  1.55M|        if item == element {
 5523|  84.8k|            return Some(i);
 5524|  1.47M|        }
 5525|       |    }
 5526|  43.2k|    None
 5527|   128k|}
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators_0Bb_:
  298|  3.07k|                    .map(|row| {
  299|  3.07k|                        let mut result = EncodedTuple::with_capacity(variables.len());
  300|  9.11k|                        for (key, value) in row.iter().enumerate() {
  301|  9.11k|                            if let Some(term) = value {
  302|  6.60k|                                result.set(
  303|  6.60k|                                    encoding[key],
  304|  6.60k|                                    match term {
  305|  5.86k|                                        GroundTerm::NamedNode(node) => self.encode_term(node),
  306|    734|                                        GroundTerm::Literal(literal) => self.encode_term(literal),
  307|      0|                                        GroundTerm::Triple(triple) => self.encode_triple(triple),
  308|       |                                    },
  309|       |                                );
  310|  2.51k|                            }
  311|       |                        }
  312|  3.07k|                        result
  313|  3.07k|                    })
_RNvXsf_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtB5_9FlatMapOkTNtNtNtB9_7storage15numeric_encoder11EncodedTermBZ_EBY_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2z_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator18eval_open_in_graphs0_0INtNtNtB2x_8adapters3map3MapIB1S_DB2r_p4ItemIB3t_BZ_B3S_EEL_ENCNCB4t_s0_00EEB2r_4nextB9_:
 5235|  2.10k|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|  2.10k|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|  2.10k|            }
 5242|  2.10k|            self.current = None;
 5243|  2.10k|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|  2.10k|    }
_RINvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_13PathEvaluator27run_if_term_is_a_graph_nodeNtNtNtBa_7storage15numeric_encoder11EncodedTermINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtB2m_3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterNtNtB8_5error15EvaluationErrorENcNtINtNtB2q_6result6ResultB1w_B4e_E3Err0EIB3a_INtNtNtNtCsc4CYCHgsNRQ_3std11collections4hash3set8IntoIterB1w_ENcNtB4N_2Ok0EENCNvB2_18eval_from_in_graphs0_0EBa_:
 4660|     19|    fn run_if_term_is_a_graph_node<
 4661|     19|        T: 'static,
 4662|     19|        I: Iterator<Item = Result<T, EvaluationError>> + 'static,
 4663|     19|    >(
 4664|     19|        &self,
 4665|     19|        term: &EncodedTerm,
 4666|     19|        graph_name: &EncodedTerm,
 4667|     19|        f: impl FnOnce() -> I,
 4668|     19|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4669|     19|        match self.is_subject_or_object_in_graph(term, graph_name) {
 4670|      0|            Ok(true) => Box::new(f()),
 4671|       |            Ok(false) => {
 4672|     19|                Box::new(empty()) // Not in the database
 4673|       |            }
 4674|      0|            Err(error) => Box::new(once(Err(error))),
 4675|       |        }
 4676|     19|    }
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorsh_00Bd_:
  821|    510|                    Box::new(child(from).map(move |tuple| {
  822|    510|                        let mut tuple = tuple?;
  823|    510|                        if let Some(value) = expression(&tuple) {
  824|     14|                            tuple.set(position, value);
  825|    496|                        }
  826|    510|                        Ok(tuple)
  827|    510|                    }))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators8_0Bb_:
 1216|      1|                Rc::new(move |tuple| Some((a(tuple)? == b(tuple)?).into()))
_RNCNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtBb_15SimpleEvaluator29build_graph_pattern_evaluators9_000Bf_:
  692|      4|                                        !right.iter().any(|right_tuple| {
  693|      4|                                            are_compatible_and_not_disjointed(
  694|      4|                                                left_tuple,
  695|      4|                                                right_tuple,
  696|      4|                                            )
  697|      4|                                        })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsp_0Bb_:
  933|  1.90k|                Rc::new(move |from| {
  934|  1.90k|                    let mapping = Rc::clone(&mapping);
  935|  1.90k|                    let mut input_tuple = EncodedTuple::with_capacity(mapping.len());
  936|  3.24k|                    for (input_key, output_key) in &*mapping {
  937|  3.24k|                        if let Some(value) = from.get(*output_key) {
  938|      0|                            input_tuple.set(*input_key, value.clone());
  939|  3.24k|                        }
  940|       |                    }
  941|  1.90k|                    Box::new(child(input_tuple).filter_map(move |tuple| {
  942|       |                        match tuple {
  943|       |                            Ok(tuple) => {
  944|       |                                let mut output_tuple = from.clone();
  945|       |                                for (input_key, output_key) in &*mapping {
  946|       |                                    if let Some(value) = tuple.get(*input_key) {
  947|       |                                        if let Some(existing_value) = output_tuple.get(*output_key)
  948|       |                                        {
  949|       |                                            if existing_value != value {
  950|       |                                                return None; // Conflict
  951|       |                                            }
  952|       |                                        } else {
  953|       |                                            output_tuple.set(*output_key, value.clone());
  954|       |                                        }
  955|       |                                    }
  956|       |                                }
  957|       |                                Some(Ok(output_tuple))
  958|       |                            }
  959|       |                            Err(e) => Some(Err(e)),
  960|       |                        }
  961|  1.90k|                    }))
  962|  1.90k|                })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsd_0Bb_:
 1269|     96|                    move |tuple| match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1270|      0|                        NumericBinaryOperands::Float(v1, v2) => Some((v1 + v2).into()),
 1271|      0|                        NumericBinaryOperands::Double(v1, v2) => Some((v1 + v2).into()),
 1272|      0|                        NumericBinaryOperands::Integer(v1, v2) => Some(v1.checked_add(v2)?.into()),
 1273|      3|                        NumericBinaryOperands::Decimal(v1, v2) => Some(v1.checked_add(v2)?.into()),
 1274|      0|                        NumericBinaryOperands::Duration(v1, v2) => Some(v1.checked_add(v2)?.into()),
 1275|      0|                        NumericBinaryOperands::YearMonthDuration(v1, v2) => {
 1276|      0|                            Some(v1.checked_add(v2)?.into())
 1277|       |                        }
 1278|      0|                        NumericBinaryOperands::DayTimeDuration(v1, v2) => {
 1279|      0|                            Some(v1.checked_add(v2)?.into())
 1280|       |                        }
 1281|      0|                        NumericBinaryOperands::DateTimeDuration(v1, v2) => {
 1282|      0|                            Some(v1.checked_add_duration(v2)?.into())
 1283|       |                        }
 1284|      0|                        NumericBinaryOperands::DateTimeYearMonthDuration(v1, v2) => {
 1285|      0|                            Some(v1.checked_add_year_month_duration(v2)?.into())
 1286|       |                        }
 1287|      0|                        NumericBinaryOperands::DateTimeDayTimeDuration(v1, v2) => {
 1288|      0|                            Some(v1.checked_add_day_time_duration(v2)?.into())
 1289|       |                        }
 1290|      0|                        NumericBinaryOperands::DateDuration(v1, v2) => {
 1291|      0|                            Some(v1.checked_add_duration(v2)?.into())
 1292|       |                        }
 1293|      0|                        NumericBinaryOperands::DateYearMonthDuration(v1, v2) => {
 1294|      0|                            Some(v1.checked_add_year_month_duration(v2)?.into())
 1295|       |                        }
 1296|      0|                        NumericBinaryOperands::DateDayTimeDuration(v1, v2) => {
 1297|      0|                            Some(v1.checked_add_day_time_duration(v2)?.into())
 1298|       |                        }
 1299|      0|                        NumericBinaryOperands::TimeDuration(v1, v2) => {
 1300|      0|                            Some(v1.checked_add_duration(v2)?.into())
 1301|       |                        }
 1302|      0|                        NumericBinaryOperands::TimeDayTimeDuration(v1, v2) => {
 1303|      0|                            Some(v1.checked_add_day_time_duration(v2)?.into())
 1304|       |                        }
 1305|       |                        NumericBinaryOperands::DateTime(_, _)
 1306|       |                        | NumericBinaryOperands::Time(_, _)
 1307|      0|                        | NumericBinaryOperands::Date(_, _) => None,
 1308|     96|                    },
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators7_0Bb_:
  655|     37|                        return Rc::new(move |from| {
  656|     37|                            Box::new(ForLoopLeftJoinIterator {
  657|     37|                                right_evaluator: Rc::clone(&right),
  658|     37|                                left_iter: left(from),
  659|     37|                                current_right: Box::new(empty()),
  660|     37|                            })
  661|     37|                        });
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators0_0Bb_:
  315|  2.32k|                Rc::new(move |from| {
  316|  2.32k|                    Box::new(
  317|  2.32k|                        encoded_tuples
  318|  2.32k|                            .iter()
  319|  2.32k|                            .filter_map(move |t| Some(Ok(t.combine_with(&from)?)))
  320|  2.32k|                            .collect::<Vec<_>>()
  321|  2.32k|                            .into_iter(),
  322|  2.32k|                    )
  323|  2.32k|                })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators3_0Bb_:
  435|  5.86k|                Rc::new(move |from| {
  436|  5.86k|                    let input_subject = subject.get_pattern_value(&from);
  437|  5.86k|                    let input_object = object.get_pattern_value(&from);
  438|  5.86k|                    let input_graph_name = graph_name.get_pattern_value(&from);
  439|  5.86k|                    let path_eval = PathEvaluator {
  440|  5.86k|                        dataset: Rc::clone(&dataset),
  441|  5.86k|                    };
  442|  5.86k|                    match (input_subject, input_object, input_graph_name) {
  443|     14|                        (Some(input_subject), Some(input_object), Some(input_graph_name)) => {
  444|     14|                            match path_eval.eval_closed_in_graph(
  445|     14|                                &path,
  446|     14|                                &input_subject,
  447|     14|                                &input_object,
  448|     14|                                &input_graph_name,
  449|     14|                            ) {
  450|      0|                                Ok(true) => Box::new(once(Ok(from))),
  451|     14|                                Ok(false) => Box::new(empty()),
  452|      0|                                Err(e) => Box::new(once(Err(e))),
  453|       |                            }
  454|       |                        }
  455|    230|                        (Some(input_subject), None, Some(input_graph_name)) => {
  456|    230|                            let object = object.clone();
  457|    230|                            Box::new(
  458|    230|                                path_eval
  459|    230|                                    .eval_from_in_graph(&path, &input_subject, &input_graph_name)
  460|    230|                                    .filter_map(move |o| match o {
  461|       |                                        Ok(o) => {
  462|       |                                            let mut new_tuple = from.clone();
  463|       |                                            put_pattern_value(&object, o, &mut new_tuple)?;
  464|       |                                            Some(Ok(new_tuple))
  465|       |                                        }
  466|       |                                        Err(error) => Some(Err(error)),
  467|    230|                                    }),
  468|    230|                            )
  469|       |                        }
  470|    182|                        (None, Some(input_object), Some(input_graph_name)) => {
  471|    182|                            let subject = subject.clone();
  472|    182|                            Box::new(
  473|    182|                                path_eval
  474|    182|                                    .eval_to_in_graph(&path, &input_object, &input_graph_name)
  475|    182|                                    .filter_map(move |s| match s {
  476|       |                                        Ok(s) => {
  477|       |                                            let mut new_tuple = from.clone();
  478|       |                                            put_pattern_value(&subject, s, &mut new_tuple)?;
  479|       |                                            Some(Ok(new_tuple))
  480|       |                                        }
  481|       |                                        Err(error) => Some(Err(error)),
  482|    182|                                    }),
  483|    182|                            )
  484|       |                        }
  485|  5.25k|                        (None, None, Some(input_graph_name)) => {
  486|  5.25k|                            let subject = subject.clone();
  487|  5.25k|                            let object = object.clone();
  488|  5.25k|                            Box::new(
  489|  5.25k|                                path_eval
  490|  5.25k|                                    .eval_open_in_graph(&path, &input_graph_name)
  491|  5.25k|                                    .filter_map(move |so| match so {
  492|       |                                        Ok((s, o)) => {
  493|       |                                            let mut new_tuple = from.clone();
  494|       |                                            put_pattern_value(&subject, s, &mut new_tuple)?;
  495|       |                                            put_pattern_value(&object, o, &mut new_tuple)?;
  496|       |                                            Some(Ok(new_tuple))
  497|       |                                        }
  498|       |                                        Err(error) => Some(Err(error)),
  499|  5.25k|                                    }),
  500|  5.25k|                            )
  501|       |                        }
  502|      0|                        (Some(input_subject), Some(input_object), None) => {
  503|      0|                            let graph_name = graph_name.clone();
  504|      0|                            Box::new(
  505|      0|                                path_eval
  506|      0|                                    .eval_closed_in_unknown_graph(
  507|      0|                                        &path,
  508|      0|                                        &input_subject,
  509|      0|                                        &input_object,
  510|      0|                                    )
  511|      0|                                    .filter_map(move |r| match r {
  512|       |                                        Ok(g) => {
  513|       |                                            let mut new_tuple = from.clone();
  514|       |                                            put_pattern_value(&graph_name, g, &mut new_tuple)?;
  515|       |                                            Some(Ok(new_tuple))
  516|       |                                        }
  517|       |                                        Err(error) => Some(Err(error)),
  518|      0|                                    }),
  519|      0|                            )
  520|       |                        }
  521|      8|                        (Some(input_subject), None, None) => {
  522|      8|                            let object = object.clone();
  523|      8|                            let graph_name = graph_name.clone();
  524|      8|                            Box::new(
  525|      8|                                path_eval
  526|      8|                                    .eval_from_in_unknown_graph(&path, &input_subject)
  527|      8|                                    .filter_map(move |r| match r {
  528|       |                                        Ok((o, g)) => {
  529|       |                                            let mut new_tuple = from.clone();
  530|       |                                            put_pattern_value(&object, o, &mut new_tuple)?;
  531|       |                                            put_pattern_value(&graph_name, g, &mut new_tuple)?;
  532|       |                                            Some(Ok(new_tuple))
  533|       |                                        }
  534|       |                                        Err(error) => Some(Err(error)),
  535|      8|                                    }),
  536|      8|                            )
  537|       |                        }
  538|     11|                        (None, Some(input_object), None) => {
  539|     11|                            let subject = subject.clone();
  540|     11|                            let graph_name = graph_name.clone();
  541|     11|                            Box::new(
  542|     11|                                path_eval
  543|     11|                                    .eval_to_in_unknown_graph(&path, &input_object)
  544|     11|                                    .filter_map(move |r| match r {
  545|       |                                        Ok((s, g)) => {
  546|       |                                            let mut new_tuple = from.clone();
  547|       |                                            put_pattern_value(&subject, s, &mut new_tuple)?;
  548|       |                                            put_pattern_value(&graph_name, g, &mut new_tuple)?;
  549|       |
  550|       |                                            Some(Ok(new_tuple))
  551|       |                                        }
  552|       |                                        Err(error) => Some(Err(error)),
  553|     11|                                    }),
  554|     11|                            )
  555|       |                        }
  556|       |                        (None, None, None) => {
  557|    166|                            let subject = subject.clone();
  558|    166|                            let object = object.clone();
  559|    166|                            let graph_name = graph_name.clone();
  560|    166|                            Box::new(path_eval.eval_open_in_unknown_graph(&path).filter_map(
  561|    166|                                move |r| match r {
  562|       |                                    Ok((s, o, g)) => {
  563|       |                                        let mut new_tuple = from.clone();
  564|       |                                        put_pattern_value(&subject, s, &mut new_tuple)?;
  565|       |                                        put_pattern_value(&object, o, &mut new_tuple)?;
  566|       |                                        put_pattern_value(&graph_name, g, &mut new_tuple)?;
  567|       |                                        Some(Ok(new_tuple))
  568|       |                                    }
  569|       |                                    Err(error) => Some(Err(error)),
  570|    166|                                },
  571|    166|                            ))
  572|       |                        }
  573|       |                    }
  574|  5.86k|                })
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluators6_00Bd_:
  618|      1|                                built_values.extend(build(from.clone()).filter_map(|result| {
  619|      1|                                    match result {
  620|      1|                                        Ok(result) => Some(result),
  621|      0|                                        Err(error) => {
  622|      0|                                            errors.push(Err(error));
  623|      0|                                            None
  624|       |                                        }
  625|       |                                    }
  626|      1|                                }));
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval18transitive_closureTNtNtNtB6_7storage15numeric_encoder11EncodedTermB10_B10_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB21_6traits8iterator8Iteratorp4ItemINtNtB23_6result6ResultB10_NtNtB4_5error15EvaluationErrorEEL_ENCNCNvMs3_B2_NtB2_13PathEvaluator26eval_open_in_unknown_graphs1_00EINtB2_9FlatMapOkNtB12_11EncodedQuadBZ_IB2J_DB3i_p4ItemIB3Y_B6i_B4o_EEL_ENCNvB53_47get_subject_or_object_identity_pairs_in_dataset0AIB3Y_BZ_B4o_Ej2_ENCB51_s1_0EB6_:
 5120|     43|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|     43|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|     43|    mut next: impl FnMut(T) -> NI,
 5123|     43|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|     43|    let mut errors = Vec::new();
 5125|     43|    let mut todo = start
 5126|     43|        .into_iter()
 5127|     43|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|     43|        })
 5134|     43|        .collect::<Vec<_>>();
 5135|     43|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|     43|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|     43|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|     43|}
_RNCNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_13PathEvaluator18eval_open_in_graphs_0Bb_:
 4492|      6|                    .map(|t| t.map(|(s, o)| (o, s))),
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorsp_00Bd_:
  941|  1.20k|                    Box::new(child(input_tuple).filter_map(move |tuple| {
  942|  1.20k|                        match tuple {
  943|  1.20k|                            Ok(tuple) => {
  944|  1.20k|                                let mut output_tuple = from.clone();
  945|  1.48k|                                for (input_key, output_key) in &*mapping {
  946|  1.48k|                                    if let Some(value) = tuple.get(*input_key) {
  947|    532|                                        if let Some(existing_value) = output_tuple.get(*output_key)
  948|       |                                        {
  949|      0|                                            if existing_value != value {
  950|      0|                                                return None; // Conflict
  951|      0|                                            }
  952|    532|                                        } else {
  953|    532|                                            output_tuple.set(*output_key, value.clone());
  954|    532|                                        }
  955|    952|                                    }
  956|       |                                }
  957|  1.20k|                                Some(Ok(output_tuple))
  958|       |                            }
  959|      0|                            Err(e) => Some(Err(e)),
  960|       |                        }
  961|  1.20k|                    }))
_RNCNCNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_13PathEvaluator18eval_open_in_graphs_00Bd_:
 4492|      6|                    .map(|t| t.map(|(s, o)| (o, s))),
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsq_0Bb_:
 1525|      2|                        Rc::new(move |tuple| datatype(&dataset, &e(tuple)?))
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluators9_00Bd_:
  690|     36|                                Box::new(left(from).filter(move |left_tuple| {
  691|     36|                                    if let Ok(left_tuple) = left_tuple {
  692|     36|                                        !right.iter().any(|right_tuple| {
  693|       |                                            are_compatible_and_not_disjointed(
  694|       |                                                left_tuple,
  695|       |                                                right_tuple,
  696|       |                                            )
  697|     36|                                        })
  698|       |                                    } else {
  699|      0|                                        true
  700|       |                                    }
  701|     36|                                }))
_RNvXsf_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtB5_9FlatMapOkTNtNtNtB9_7storage15numeric_encoder11EncodedTermBZ_EBY_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2z_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator24eval_to_in_unknown_graphs_0INtNtNtB2x_8adapters3map3MapIB1S_DB2r_p4ItemIB3t_BZ_B3S_EEL_ENCNCB4t_s_00EEB2r_4nextB9_:
 5235|      9|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|      9|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|      9|            }
 5242|      9|            self.current = None;
 5243|      9|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|      9|    }
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsd_0Bb_:
  748|    357|                        Rc::new(move |from| {
  749|    357|                            let mut errors = Vec::default();
  750|    357|                            let mut right_values = EncodedTupleSet::new(keys.clone());
  751|    357|                            right_values.extend(right(from.clone()).filter_map(
  752|    357|                                |result| match result {
  753|       |                                    Ok(result) => Some(result),
  754|       |                                    Err(error) => {
  755|       |                                        errors.push(Err(error));
  756|       |                                        None
  757|       |                                    }
  758|    357|                                },
  759|    357|                            ));
  760|    357|                            Box::new(HashLeftJoinIterator {
  761|    357|                                left_iter: left(from),
  762|    357|                                right: right_values,
  763|    357|                                buffered_results: errors,
  764|    357|                                expression: Rc::clone(&expression),
  765|    357|                            })
  766|    357|                        })
_RNvXsf_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtB5_9FlatMapOkNtNtNtB9_7storage15numeric_encoder11EncodedQuadTNtB10_11EncodedTermB1K_B1K_EINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2U_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator47get_subject_or_object_identity_pairs_in_dataset0AIB3O_B1J_B4d_Ej2_EB2M_4nextB9_:
 5235|    119|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|    119|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|    119|            }
 5242|    119|            self.current = None;
 5243|    119|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|    119|    }
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorse_00Bd_:
  778|     22|                    Box::new(child(from).filter(move |tuple| {
  779|     22|                        match tuple {
  780|     22|                            Ok(tuple) => expression(tuple)
  781|     22|                                .and_then(|term| to_bool(&term))
  782|     22|                                .unwrap_or(false),
  783|      0|                            Err(_) => true,
  784|       |                        }
  785|     22|                    }))
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval16hash_deduplicateTNtNtNtB6_7storage15numeric_encoder11EncodedTermBY_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1U_6traits8iterator8Iteratorp4ItemINtNtB1W_6result6ResultBX_NtNtB4_5error15EvaluationErrorEEL_EB2F_EEB6_:
 5175|  1.21k|fn hash_deduplicate<T: Eq + Hash + Clone>(
 5176|  1.21k|    iter: impl Iterator<Item = Result<T, EvaluationError>>,
 5177|  1.21k|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5178|  1.21k|    let mut already_seen = HashSet::with_capacity(iter.size_hint().0);
 5179|  1.21k|    iter.filter(move |e| {
 5180|       |        if let Ok(e) = e {
 5181|       |            if already_seen.contains(e) {
 5182|       |                false
 5183|       |            } else {
 5184|       |                already_seen.insert(e.clone());
 5185|       |                true
 5186|       |            }
 5187|       |        } else {
 5188|       |            true
 5189|       |        }
 5190|  1.21k|    })
 5191|  1.21k|}
_RINvXsx_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_15EncodedTupleSetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendNtB6_12EncodedTupleE6extendINtNtNtB1c_8adapters10filter_map9FilterMapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtB1a_8iterator8Iteratorp4ItemINtNtB1e_6result6ResultB1Y_NtNtB8_5error15EvaluationErrorEEL_ENvMB4e_B4b_2okEEBa_:
 5628|      1|    fn extend<T: IntoIterator<Item = EncodedTuple>>(&mut self, iter: T) {
 5629|      1|        let iter = iter.into_iter();
 5630|      1|        self.map.reserve(iter.size_hint().0);
 5631|      1|        for tuple in iter {
 5632|      0|            self.insert(tuple);
 5633|      0|        }
 5634|      1|    }
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluators3_0s0_0Bd_:
  491|     12|                                    .filter_map(move |so| match so {
  492|     12|                                        Ok((s, o)) => {
  493|     12|                                            let mut new_tuple = from.clone();
  494|     12|                                            put_pattern_value(&subject, s, &mut new_tuple)?;
  495|     12|                                            put_pattern_value(&object, o, &mut new_tuple)?;
  496|     12|                                            Some(Ok(new_tuple))
  497|       |                                        }
  498|      0|                                        Err(error) => Some(Err(error)),
  499|     12|                                    }),
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluators8_00Bd_:
  668|    272|                    Box::new(left(from).flat_map(move |t| match t {
  669|    272|                        Ok(t) => right(t),
  670|      0|                        Err(e) => Box::new(once(Err(e))),
  671|    272|                    }))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsi_0Bb_:
 1400|    342|                Rc::new(move |tuple| match e(tuple)? {
 1401|      0|                    EncodedTerm::FloatLiteral(value) => Some((-value).into()),
 1402|      0|                    EncodedTerm::DoubleLiteral(value) => Some((-value).into()),
 1403|    151|                    EncodedTerm::IntegerLiteral(value) => Some(value.checked_neg()?.into()),
 1404|     30|                    EncodedTerm::DecimalLiteral(value) => Some(value.checked_neg()?.into()),
 1405|      0|                    EncodedTerm::DurationLiteral(value) => Some(value.checked_neg()?.into()),
 1406|      0|                    EncodedTerm::YearMonthDurationLiteral(value) => {
 1407|      0|                        Some(value.checked_neg()?.into())
 1408|       |                    }
 1409|      0|                    EncodedTerm::DayTimeDurationLiteral(value) => Some(value.checked_neg()?.into()),
 1410|    139|                    _ => None,
 1411|    342|                })
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluators2_00Bd_:
  398|     72|                    Box::new(iter.filter_map(move |quad| match quad {
  399|     72|                        Ok(quad) => {
  400|     72|                            let mut new_tuple = from.clone();
  401|     72|                            put_pattern_value(&subject, quad.subject, &mut new_tuple)?;
  402|     72|                            put_pattern_value(&predicate, quad.predicate, &mut new_tuple)?;
  403|     72|                            put_pattern_value(&object, quad.object, &mut new_tuple)?;
  404|     70|                            put_pattern_value(&graph_name, quad.graph_name, &mut new_tuple)?;
  405|     68|                            Some(Ok(new_tuple))
  406|       |                        }
  407|      0|                        Err(error) => Some(Err(error)),
  408|     72|                    }))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsa_0Bb_:
 1233|     87|                Rc::new(move |tuple| {
 1234|     87|                    Some(
 1235|     87|                        match partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? {
 1236|      6|                            Ordering::Greater | Ordering::Equal => true,
 1237|      0|                            Ordering::Less => false,
 1238|       |                        }
 1239|      6|                        .into(),
 1240|       |                    )
 1241|     87|                })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators2_0Bb_:
  387|  20.8k|                Rc::new(move |from| {
  388|  20.8k|                    let iter = dataset.encoded_quads_for_pattern(
  389|  20.8k|                        subject.get_pattern_value(&from).as_ref(),
  390|  20.8k|                        predicate.get_pattern_value(&from).as_ref(),
  391|  20.8k|                        object.get_pattern_value(&from).as_ref(),
  392|  20.8k|                        graph_name.get_pattern_value(&from).as_ref(),
  393|  20.8k|                    );
  394|  20.8k|                    let subject = subject.clone();
  395|  20.8k|                    let predicate = predicate.clone();
  396|  20.8k|                    let object = object.clone();
  397|  20.8k|                    let graph_name = graph_name.clone();
  398|  20.8k|                    Box::new(iter.filter_map(move |quad| match quad {
  399|       |                        Ok(quad) => {
  400|       |                            let mut new_tuple = from.clone();
  401|       |                            put_pattern_value(&subject, quad.subject, &mut new_tuple)?;
  402|       |                            put_pattern_value(&predicate, quad.predicate, &mut new_tuple)?;
  403|       |                            put_pattern_value(&object, quad.object, &mut new_tuple)?;
  404|       |                            put_pattern_value(&graph_name, quad.graph_name, &mut new_tuple)?;
  405|       |                            Some(Ok(new_tuple))
  406|       |                        }
  407|       |                        Err(error) => Some(Err(error)),
  408|  20.8k|                    }))
  409|  20.8k|                })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsq_0Bb_:
  973|     44|                    .map(|k| encode_variable(encoded_variables, k))
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval18transitive_closureTNtNtNtB6_7storage15numeric_encoder11EncodedTermB10_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1X_6traits8iterator8Iteratorp4ItemINtNtB1Z_6result6ResultB10_NtNtB4_5error15EvaluationErrorEEL_ENCNCNvMs3_B2_NtB2_13PathEvaluator18eval_open_in_graphs1_00EINtB2_9FlatMapOkNtB12_11EncodedQuadBZ_IB2F_DB3e_p4ItemIB3U_B66_B4k_EEL_ENCNvB4Z_45get_subject_or_object_identity_pairs_in_graph0AIB3U_BZ_B4k_Ej2_ENCB4X_s1_0EB6_:
 5120|    691|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|    691|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|    691|    mut next: impl FnMut(T) -> NI,
 5123|    691|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|    691|    let mut errors = Vec::new();
 5125|    691|    let mut todo = start
 5126|    691|        .into_iter()
 5127|    691|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|    691|        })
 5134|    691|        .collect::<Vec<_>>();
 5135|    691|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|    691|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|    691|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|    691|}
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20encode_property_path0Bb_:
 2809|  16.1k|                PropertyPath::NegatedPropertySet(ps.iter().map(|p| self.encode_term(p)).collect())
_RNCINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval16hash_deduplicateTNtNtNtB8_7storage15numeric_encoder11EncodedTermB10_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1X_6traits8iterator8Iteratorp4ItemINtNtB1Z_6result6ResultBZ_NtNtB6_5error15EvaluationErrorEEL_EB2I_EE0B8_:
 5179|     14|    iter.filter(move |e| {
 5180|     14|        if let Ok(e) = e {
 5181|     14|            if already_seen.contains(e) {
 5182|      2|                false
 5183|       |            } else {
 5184|     12|                already_seen.insert(e.clone());
 5185|     12|                true
 5186|       |            }
 5187|       |        } else {
 5188|      0|            true
 5189|       |        }
 5190|     14|    })
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorsu_0s0_0Bd_:
 1013|     14|                        .for_each(|tuple| {
 1014|     14|                            // TODO avoid copy for key?
 1015|     14|                            let key = key_variables
 1016|     14|                                .iter()
 1017|     14|                                .map(|v| tuple.get(*v).cloned())
 1018|     14|                                .collect();
 1019|     14|
 1020|     14|                            let key_accumulators =
 1021|     14|                                accumulators_for_group.entry(key).or_insert_with(|| {
 1022|       |                                    accumulator_builders.iter().map(|c| c()).collect::<Vec<_>>()
 1023|     14|                                });
 1024|     14|                            for (accumulator, input_expression) in key_accumulators
 1025|     14|                                .iter_mut()
 1026|     14|                                .zip(&aggregate_input_expressions)
 1027|      0|                            {
 1028|      0|                                accumulator.add(
 1029|      0|                                    input_expression
 1030|      0|                                        .as_ref()
 1031|      0|                                        .and_then(|parameter| parameter(&tuple)),
 1032|      0|                                );
 1033|      0|                            }
 1034|     14|                        });
_RINvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_15SimpleEvaluator11encode_termRNtNtCs2RvTzHk1J7L_5oxrdf7literal7LiteralEBa_:
 2766|  4.69k|    fn encode_term<'b>(&self, term: impl Into<TermRef<'b>>) -> EncodedTerm {
 2767|  4.69k|        self.dataset.encode_term(term)
 2768|  4.69k|    }
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators1_0Bb_:
 1159|     46|                Rc::new(move |tuple| Some(tuple.contains(v).into()))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators2_0Bb_:
 1164|      5|                Rc::new(move |tuple| Some(eval(tuple.clone()).next().is_some().into()))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsu_0Bb_:
  992|     16|                Rc::new(move |from| {
  993|     16|                    let tuple_size = from.capacity();
  994|     16|                    let key_variables = Rc::clone(&key_variables);
  995|     16|                    let mut errors = Vec::default();
  996|     16|                    let mut accumulators_for_group =
  997|     16|                        HashMap::<Vec<Option<EncodedTerm>>, Vec<Box<dyn Accumulator>>>::default();
  998|     16|                    if key_variables.is_empty() {
  999|      0|                        // There is always a single group if there is no GROUP BY
 1000|      0|                        accumulators_for_group.insert(
 1001|      0|                            Vec::new(),
 1002|      0|                            accumulator_builders.iter().map(|c| c()).collect::<Vec<_>>(),
 1003|      0|                        );
 1004|     16|                    }
 1005|     16|                    child(from)
 1006|     16|                        .filter_map(|result| match result {
 1007|       |                            Ok(result) => Some(result),
 1008|       |                            Err(error) => {
 1009|       |                                errors.push(error);
 1010|       |                                None
 1011|       |                            }
 1012|     16|                        })
 1013|     16|                        .for_each(|tuple| {
 1014|       |                            // TODO avoid copy for key?
 1015|       |                            let key = key_variables
 1016|       |                                .iter()
 1017|       |                                .map(|v| tuple.get(*v).cloned())
 1018|       |                                .collect();
 1019|       |
 1020|       |                            let key_accumulators =
 1021|       |                                accumulators_for_group.entry(key).or_insert_with(|| {
 1022|       |                                    accumulator_builders.iter().map(|c| c()).collect::<Vec<_>>()
 1023|       |                                });
 1024|       |                            for (accumulator, input_expression) in key_accumulators
 1025|       |                                .iter_mut()
 1026|       |                                .zip(&aggregate_input_expressions)
 1027|       |                            {
 1028|       |                                accumulator.add(
 1029|       |                                    input_expression
 1030|       |                                        .as_ref()
 1031|       |                                        .and_then(|parameter| parameter(&tuple)),
 1032|       |                                );
 1033|       |                            }
 1034|     16|                        });
 1035|     16|                    let accumulator_variables = accumulator_variables.clone();
 1036|     16|                    Box::new(
 1037|     16|                        errors
 1038|     16|                            .into_iter()
 1039|     16|                            .map(Err)
 1040|     16|                            .chain(accumulators_for_group.into_iter().map(
 1041|     16|                                move |(key, accumulators)| {
 1042|       |                                    let mut result = EncodedTuple::with_capacity(tuple_size);
 1043|       |                                    for (variable, value) in key_variables.iter().zip(key) {
 1044|       |                                        if let Some(value) = value {
 1045|       |                                            result.set(*variable, value);
 1046|       |                                        }
 1047|       |                                    }
 1048|       |                                    for (accumulator, variable) in
 1049|       |                                        accumulators.into_iter().zip(&accumulator_variables)
 1050|       |                                    {
 1051|       |                                        if let Some(value) = accumulator.state() {
 1052|       |                                            result.set(*variable, value);
 1053|       |                                        }
 1054|       |                                    }
 1055|       |                                    Ok(result)
 1056|     16|                                },
 1057|     16|                            )),
 1058|     16|                    )
 1059|     16|                })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators4_0Bb_:
 1171|     10|                Rc::new(move |tuple| {
 1172|     10|                    let mut error = false;
 1173|     20|                    for child in &*children {
 1174|     20|                        match child(tuple).and_then(|v| to_bool(&v)) {
 1175|      0|                            Some(true) => return Some(true.into()),
 1176|      0|                            Some(false) => continue,
 1177|     20|                            None => error = true,
 1178|       |                        }
 1179|       |                    }
 1180|     10|                    if error {
 1181|     10|                        None
 1182|       |                    } else {
 1183|      0|                        Some(false.into())
 1184|       |                    }
 1185|     10|                })
_RINvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_13PathEvaluator27run_if_term_is_a_graph_nodeNtNtNtBa_7storage15numeric_encoder11EncodedTermINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters6filter6FilterINtNtB2m_5chain5ChainINtNtNtB2o_7sources4once4OnceINtNtB2q_6result6ResultB1w_NtNtB8_5error15EvaluationErrorEEINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB2o_6traits8iterator8Iteratorp4ItemB3Z_EL_EENCINvB6_16hash_deduplicateB1w_B3b_E0ENCNvB2_16eval_to_in_graphs2_0EBa_:
 4660|     94|    fn run_if_term_is_a_graph_node<
 4661|     94|        T: 'static,
 4662|     94|        I: Iterator<Item = Result<T, EvaluationError>> + 'static,
 4663|     94|    >(
 4664|     94|        &self,
 4665|     94|        term: &EncodedTerm,
 4666|     94|        graph_name: &EncodedTerm,
 4667|     94|        f: impl FnOnce() -> I,
 4668|     94|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4669|     94|        match self.is_subject_or_object_in_graph(term, graph_name) {
 4670|      0|            Ok(true) => Box::new(f()),
 4671|       |            Ok(false) => {
 4672|     94|                Box::new(empty()) // Not in the database
 4673|       |            }
 4674|      0|            Err(error) => Box::new(once(Err(error))),
 4675|       |        }
 4676|     94|    }
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators7_0Bb_:
 1211|    317|                Rc::new(move |tuple| equals(&a(tuple)?, &b(tuple)?).map(Into::into))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsc_0Bb_:
  746|      6|                            .map(|v| encode_variable(encoded_variables, v))
_RNCNvXs6_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_20HashLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0Bb_:
 4824|     68|                    .filter_map(|right_tuple| left_tuple.combine_with(right_tuple))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators_0Bb_:
 1151|    419|                Rc::new(move |_| Some(t.clone()))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsb_0Bb_:
  708|      1|                            Rc::new(move |from| {
  709|      1|                                let mut right_values = EncodedTupleSet::new(keys.clone());
  710|      1|                                right_values.extend(right(from.clone()).filter_map(Result::ok));
  711|      1|                                Box::new(left(from).filter(move |left_tuple| {
  712|       |                                    if let Ok(left_tuple) = left_tuple {
  713|       |                                        !right_values.get(left_tuple).iter().any(|right_tuple| {
  714|       |                                            are_compatible_and_not_disjointed(
  715|       |                                                left_tuple,
  716|       |                                                right_tuple,
  717|       |                                            )
  718|       |                                        })
  719|       |                                    } else {
  720|       |                                        true
  721|       |                                    }
  722|      1|                                }))
  723|      1|                            })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorso_0Bb_:
 1466|      6|                        Rc::new(move |tuple| match e(tuple)? {
 1467|      0|                            EncodedTerm::SmallSmallLangStringLiteral { language, .. }
 1468|      0|                            | EncodedTerm::BigSmallLangStringLiteral { language, .. } => {
 1469|      0|                                Some(build_string_literal_from_id(language.into()))
 1470|       |                            }
 1471|      0|                            EncodedTerm::SmallBigLangStringLiteral { language_id, .. }
 1472|      0|                            | EncodedTerm::BigBigLangStringLiteral { language_id, .. } => {
 1473|      0|                                Some(build_string_literal_from_id(language_id.into()))
 1474|       |                            }
 1475|      0|                            e if e.is_literal() => Some(build_string_literal(&dataset, "")),
 1476|      0|                            _ => None,
 1477|      6|                        })
_RNCNCNvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_13PathEvaluator18eval_open_in_graphs3_00Bd_:
 4544|     34|                                if ps.iter().any(|p| *p == t.predicate) {
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators4_0Bb_:
  592|  23.3k|                            Rc::new(move |from| {
  593|  23.3k|                                let mut errors = Vec::default();
  594|  23.3k|                                let build_values = build(from.clone())
  595|  23.3k|                                    .filter_map(|result| match result {
  596|       |                                        Ok(result) => Some(result),
  597|       |                                        Err(error) => {
  598|       |                                            errors.push(Err(error));
  599|       |                                            None
  600|       |                                        }
  601|  23.3k|                                    })
  602|  23.3k|                                    .collect::<Vec<_>>();
  603|  23.3k|                                Box::new(CartesianProductJoinIterator {
  604|  23.3k|                                    probe_iter: probe(from),
  605|  23.3k|                                    built: build_values,
  606|  23.3k|                                    buffered_results: errors,
  607|  23.3k|                                })
  608|  23.3k|                            })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsh_0Bb_:
 1387|     24|                Rc::new(move |tuple| match e(tuple)? {
 1388|      0|                    EncodedTerm::FloatLiteral(value) => Some(value.into()),
 1389|      0|                    EncodedTerm::DoubleLiteral(value) => Some(value.into()),
 1390|      4|                    EncodedTerm::IntegerLiteral(value) => Some(value.into()),
 1391|      0|                    EncodedTerm::DecimalLiteral(value) => Some(value.into()),
 1392|      0|                    EncodedTerm::DurationLiteral(value) => Some(value.into()),
 1393|      0|                    EncodedTerm::YearMonthDurationLiteral(value) => Some(value.into()),
 1394|      0|                    EncodedTerm::DayTimeDurationLiteral(value) => Some(value.into()),
 1395|     10|                    _ => None,
 1396|     24|                })
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval11format_listRNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableRINtNtCsjOdcKtOMjJI_5alloc3vec3VecBT_EEB6_:
 5842|  29.4k|fn format_list<T: ToString>(values: impl IntoIterator<Item = T>) -> String {
 5843|  29.4k|    values
 5844|  29.4k|        .into_iter()
 5845|  29.4k|        .map(|v| v.to_string())
 5846|  29.4k|        .collect::<Vec<_>>()
 5847|  29.4k|        .join(", ")
 5848|  29.4k|}
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval18transitive_closureTNtNtNtB6_7storage15numeric_encoder11EncodedTermB10_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1X_6traits8iterator8Iteratorp4ItemINtNtB1Z_6result6ResultB10_NtNtB4_5error15EvaluationErrorEEL_ENCNCNvMs3_B2_NtB2_13PathEvaluator18eval_open_in_graphs2_00EIB2F_DB3e_p4ItemIB3U_BZ_B4k_EEL_ENCB4X_s2_0EB6_:
 5120|  1.22k|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|  1.22k|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|  1.22k|    mut next: impl FnMut(T) -> NI,
 5123|  1.22k|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|  1.22k|    let mut errors = Vec::new();
 5125|  1.22k|    let mut todo = start
 5126|  1.22k|        .into_iter()
 5127|  1.22k|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|  1.22k|        })
 5134|  1.22k|        .collect::<Vec<_>>();
 5135|  1.22k|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|  1.22k|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|  1.22k|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|  1.22k|}
_RINvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_15SimpleEvaluator11encode_termRNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeEBa_:
 2766|  46.2k|    fn encode_term<'b>(&self, term: impl Into<TermRef<'b>>) -> EncodedTerm {
 2767|  46.2k|        self.dataset.encode_term(term)
 2768|  46.2k|    }
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval16hash_deduplicateTNtNtNtB6_7storage15numeric_encoder11EncodedTermBY_BY_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1X_6traits8iterator8Iteratorp4ItemINtNtB1Z_6result6ResultBX_NtNtB4_5error15EvaluationErrorEEL_EB2I_EEB6_:
 5175|     58|fn hash_deduplicate<T: Eq + Hash + Clone>(
 5176|     58|    iter: impl Iterator<Item = Result<T, EvaluationError>>,
 5177|     58|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5178|     58|    let mut already_seen = HashSet::with_capacity(iter.size_hint().0);
 5179|     58|    iter.filter(move |e| {
 5180|       |        if let Ok(e) = e {
 5181|       |            if already_seen.contains(e) {
 5182|       |                false
 5183|       |            } else {
 5184|       |                already_seen.insert(e.clone());
 5185|       |                true
 5186|       |            }
 5187|       |        } else {
 5188|       |            true
 5189|       |        }
 5190|     58|    })
 5191|     58|}
_RNCNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtBb_15SimpleEvaluator29build_graph_pattern_evaluatorsu_0s0_0s_0Bf_:
 1021|     14|                                accumulators_for_group.entry(key).or_insert_with(|| {
 1022|     14|                                    accumulator_builders.iter().map(|c| c()).collect::<Vec<_>>()
 1023|     14|                                });
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval16hash_deduplicateTNtNtNtB6_7storage15numeric_encoder11EncodedTermBY_BY_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtB2_9FlatMapOkNtB10_11EncodedQuadBX_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1X_6traits8iterator8Iteratorp4ItemINtNtB1Z_6result6ResultB2Y_NtNtB4_5error15EvaluationErrorEEL_ENCNvMs3_B2_NtB2_13PathEvaluator47get_subject_or_object_identity_pairs_in_dataset0AIB4A_BX_B50_Ej2_EIB3l_DB3U_p4ItemB6T_EL_EEEB6_:
 5175|     76|fn hash_deduplicate<T: Eq + Hash + Clone>(
 5176|     76|    iter: impl Iterator<Item = Result<T, EvaluationError>>,
 5177|     76|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5178|     76|    let mut already_seen = HashSet::with_capacity(iter.size_hint().0);
 5179|     76|    iter.filter(move |e| {
 5180|       |        if let Ok(e) = e {
 5181|       |            if already_seen.contains(e) {
 5182|       |                false
 5183|       |            } else {
 5184|       |                already_seen.insert(e.clone());
 5185|       |                true
 5186|       |            }
 5187|       |        } else {
 5188|       |            true
 5189|       |        }
 5190|     76|    })
 5191|     76|}
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsa_0Bb_:
  706|      1|                                .map(|v| encode_variable(encoded_variables, v))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsk_0Bb_:
  891|  1.45k|                Rc::new(move |from| Box::new(hash_deduplicate(child(from))))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators3_0Bb_:
 1169|     64|                    .map(|i| self.expression_evaluator(i, encoded_variables, stat_children))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsm_0Bb_:
 1435|    241|                Rc::new(move |tuple| {
 1436|    241|                    if to_bool(&a(tuple)?)? {
 1437|      0|                        b(tuple)
 1438|       |                    } else {
 1439|      2|                        c(tuple)
 1440|       |                    }
 1441|    241|                })
_RNCINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval11format_listNtNtCsjOdcKtOMjJI_5alloc6string6StringINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtB1B_3map3MapINtNtNtB1F_5slice4iter4IterNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableENvYB36_NtBW_8ToString9to_stringEIB2p_IB2G_TB36_NtNtCsftsRMVBFYTr_7sparopt7algebra19AggregateExpressionEENCNvB4_15eval_node_label0EEE0B8_:
 5845|     44|        .map(|v| v.to_string())
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsg_0Bb_:
 1374|    559|                    move |tuple| match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1375|      0|                        NumericBinaryOperands::Float(v1, v2) => Some((v1 / v2).into()),
 1376|      0|                        NumericBinaryOperands::Double(v1, v2) => Some((v1 / v2).into()),
 1377|     62|                        NumericBinaryOperands::Integer(v1, v2) => {
 1378|     62|                            Some(Decimal::from(v1).checked_div(v2)?.into())
 1379|       |                        }
 1380|      2|                        NumericBinaryOperands::Decimal(v1, v2) => Some(v1.checked_div(v2)?.into()),
 1381|      0|                        _ => None,
 1382|    559|                    },
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorso_0Bb_:
  929|  3.43k|                    .map(|(new_variable, variable)| {
  930|  3.43k|                        (new_variable, encode_variable(encoded_variables, variable))
  931|  3.43k|                    })
_RINvXsx_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_15EncodedTupleSetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendNtB6_12EncodedTupleE6extendINtNtNtB1c_8adapters10filter_map9FilterMapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtB1a_8iterator8Iteratorp4ItemINtNtB1e_6result6ResultB1Y_NtNtB8_5error15EvaluationErrorEEL_ENCNCNvMs0_B6_NtB6_15SimpleEvaluator29build_graph_pattern_evaluators6_00EEBa_:
 5628|     17|    fn extend<T: IntoIterator<Item = EncodedTuple>>(&mut self, iter: T) {
 5629|     17|        let iter = iter.into_iter();
 5630|     17|        self.map.reserve(iter.size_hint().0);
 5631|     18|        for tuple in iter {
 5632|      1|            self.insert(tuple);
 5633|      1|        }
 5634|     17|    }
_RINvXsx_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_15EncodedTupleSetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendNtB6_12EncodedTupleE6extendINtNtNtB1c_8adapters10filter_map9FilterMapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtB1a_8iterator8Iteratorp4ItemINtNtB1e_6result6ResultB1Y_NtNtB8_5error15EvaluationErrorEEL_ENCNCNvMs0_B6_NtB6_15SimpleEvaluator29build_graph_pattern_evaluatorsd_00EEBa_:
 5628|    357|    fn extend<T: IntoIterator<Item = EncodedTuple>>(&mut self, iter: T) {
 5629|    357|        let iter = iter.into_iter();
 5630|    357|        self.map.reserve(iter.size_hint().0);
 5631|    451|        for tuple in iter {
 5632|     94|            self.insert(tuple);
 5633|     94|        }
 5634|    357|    }
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsj_0Bb_:
 1415|    682|                Rc::new(move |tuple| to_bool(&e(tuple)?).map(|v| (!v).into()))
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval18transitive_closureNtNtNtB6_7storage15numeric_encoder11EncodedTermINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2s_6result6ResultBZ_NtNtB4_5error15EvaluationErrorEEL_EB1K_NCNvMs3_B2_NtB2_13PathEvaluator16eval_to_in_graphs1_0EB6_:
 5120|     24|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|     24|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|     24|    mut next: impl FnMut(T) -> NI,
 5123|     24|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|     24|    let mut errors = Vec::new();
 5125|     24|    let mut todo = start
 5126|     24|        .into_iter()
 5127|     24|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|     24|        })
 5134|     24|        .collect::<Vec<_>>();
 5135|     24|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|     24|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|     24|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|     24|}
_RNCINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval11format_listRNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableRINtNtCsjOdcKtOMjJI_5alloc3vec3VecBV_EE0B8_:
 5845|  9.08k|        .map(|v| v.to_string())
_RNvXsf_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtB5_9FlatMapOkNtNtNtB9_7storage15numeric_encoder11EncodedTermBY_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2u_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator16eval_to_in_graphs_0B1M_EB2m_4nextB9_:
 5235|    105|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|    105|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|    105|            }
 5242|    105|            self.current = None;
 5243|    105|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|    105|    }
_RNCINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval16hash_deduplicateNtB4_12EncodedTupleINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB20_6result6ResultBZ_NtNtB6_5error15EvaluationErrorEEL_EE0B8_:
 5179|    889|    iter.filter(move |e| {
 5180|    889|        if let Ok(e) = e {
 5181|    889|            if already_seen.contains(e) {
 5182|    188|                false
 5183|       |            } else {
 5184|    701|                already_seen.insert(e.clone());
 5185|    701|                true
 5186|       |            }
 5187|       |        } else {
 5188|      0|            true
 5189|       |        }
 5190|    889|    })
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorsu_0s_0Bd_:
 1006|     14|                        .filter_map(|result| match result {
 1007|     14|                            Ok(result) => Some(result),
 1008|      0|                            Err(error) => {
 1009|      0|                                errors.push(error);
 1010|      0|                                None
 1011|       |                            }
 1012|     14|                        })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsf_0Bb_:
  791|     76|                    .map(|child| {
  792|     76|                        let (child, child_stats) =
  793|     76|                            self.graph_pattern_evaluator(child, encoded_variables);
  794|     76|                        stat_children.push(child_stats);
  795|     76|                        child
  796|     76|                    })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsl_0Bb_:
 1422|      5|                Rc::new(move |tuple| {
 1423|      5|                    for e in &l {
 1424|      0|                        if let Some(result) = e(tuple) {
 1425|      0|                            return Some(result);
 1426|      0|                        }
 1427|       |                    }
 1428|      5|                    None
 1429|      5|                })
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval18transitive_closureTNtNtNtB6_7storage15numeric_encoder11EncodedTermB10_B10_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB21_6traits8iterator8Iteratorp4ItemINtNtB23_6result6ResultB10_NtNtB4_5error15EvaluationErrorEEL_ENCNCNvMs3_B2_NtB2_13PathEvaluator26eval_open_in_unknown_graphs2_00EIB2J_DB3i_p4ItemIB3Y_BZ_B4o_EEL_ENCB51_s2_0EB6_:
 5120|     24|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|     24|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|     24|    mut next: impl FnMut(T) -> NI,
 5123|     24|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|     24|    let mut errors = Vec::new();
 5125|     24|    let mut todo = start
 5126|     24|        .into_iter()
 5127|     24|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|     24|        })
 5134|     24|        .collect::<Vec<_>>();
 5135|     24|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|     24|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|     24|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|     24|}
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluator0Bb_:
  294|  5.62k|                    .map(|v| encode_variable(encoded_variables, v))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators5_0Bb_:
 1190|    539|                    .map(|i| self.expression_evaluator(i, encoded_variables, stat_children))
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorsd_00Bd_:
  752|     94|                                |result| match result {
  753|     94|                                    Ok(result) => Some(result),
  754|      0|                                    Err(error) => {
  755|      0|                                        errors.push(Err(error));
  756|      0|                                        None
  757|       |                                    }
  758|     94|                                },
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators6_0Bb_:
  615|     17|                            Rc::new(move |from| {
  616|     17|                                let mut errors = Vec::default();
  617|     17|                                let mut built_values = EncodedTupleSet::new(keys.clone());
  618|     17|                                built_values.extend(build(from.clone()).filter_map(|result| {
  619|       |                                    match result {
  620|       |                                        Ok(result) => Some(result),
  621|       |                                        Err(error) => {
  622|       |                                            errors.push(Err(error));
  623|       |                                            None
  624|       |                                        }
  625|       |                                    }
  626|     17|                                }));
  627|     17|                                Box::new(HashJoinIterator {
  628|     17|                                    probe_iter: probe(from),
  629|     17|                                    built: built_values,
  630|     17|                                    buffered_results: errors,
  631|     17|                                })
  632|     17|                            })
_RNCNvXs6_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_20HashLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hint0Bb_:
 4845|    299|                .map(|v| v.saturating_mul(self.right.len())),
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorse_0Bb_:
  776|     44|                Rc::new(move |from| {
  777|     44|                    let expression = Rc::clone(&expression);
  778|     44|                    Box::new(child(from).filter(move |tuple| {
  779|       |                        match tuple {
  780|       |                            Ok(tuple) => expression(tuple)
  781|       |                                .and_then(|term| to_bool(&term))
  782|       |                                .unwrap_or(false),
  783|       |                            Err(_) => true,
  784|       |                        }
  785|     44|                    }))
  786|     44|                })
_RNCNvMsw_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15EncodedTupleSet3get0Bb_:
 5609|     68|        self.map.get(&self.tuple_key(tuple)).map_or(&[], |v| v)
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsk_0Bb_:
 1420|     16|                    .map(|e| self.expression_evaluator(e, encoded_variables, stat_children))
_RNCNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtBb_15SimpleEvaluator29build_graph_pattern_evaluatorse_000Bf_:
  781|      3|                                .and_then(|term| to_bool(&term))
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluators0_00Bd_:
  319|  3.00k|                            .filter_map(move |t| Some(Ok(t.combine_with(&from)?)))
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators6_0Bb_:
 1192|    101|                Rc::new(move |tuple| {
 1193|    101|                    let mut error = false;
 1194|    211|                    for child in &*children {
 1195|    211|                        match child(tuple).and_then(|v| to_bool(&v)) {
 1196|      0|                            Some(true) => continue,
 1197|      4|                            Some(false) => return Some(false.into()),
 1198|    207|                            None => error = true,
 1199|       |                        }
 1200|       |                    }
 1201|     97|                    if error {
 1202|     97|                        None
 1203|       |                    } else {
 1204|      0|                        Some(true.into())
 1205|       |                    }
 1206|    101|                })
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval16hash_deduplicateNtB2_12EncodedTupleINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1Y_6result6ResultBX_NtNtB4_5error15EvaluationErrorEEL_EEB6_:
 5175|  1.45k|fn hash_deduplicate<T: Eq + Hash + Clone>(
 5176|  1.45k|    iter: impl Iterator<Item = Result<T, EvaluationError>>,
 5177|  1.45k|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5178|  1.45k|    let mut already_seen = HashSet::with_capacity(iter.size_hint().0);
 5179|  1.45k|    iter.filter(move |e| {
 5180|       |        if let Ok(e) = e {
 5181|       |            if already_seen.contains(e) {
 5182|       |                false
 5183|       |            } else {
 5184|       |                already_seen.insert(e.clone());
 5185|       |                true
 5186|       |            }
 5187|       |        } else {
 5188|       |            true
 5189|       |        }
 5190|  1.45k|    })
 5191|  1.45k|}
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator20expression_evaluators6_00Bd_:
 1195|      4|                        match child(tuple).and_then(|v| to_bool(&v)) {
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsh_0Bb_:
  819|    568|                Rc::new(move |from| {
  820|    568|                    let expression = Rc::clone(&expression);
  821|    568|                    Box::new(child(from).map(move |tuple| {
  822|       |                        let mut tuple = tuple?;
  823|       |                        if let Some(value) = expression(&tuple) {
  824|       |                            tuple.set(position, value);
  825|       |                        }
  826|       |                        Ok(tuple)
  827|    568|                    }))
  828|    568|                })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluator0Bb_:
 1147|     80|                Rc::new(move |_| Some(t.clone()))
_RINvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_13PathEvaluator27run_if_term_is_a_graph_nodeNtNtNtBa_7storage15numeric_encoder11EncodedTermINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters6filter6FilterINtNtB2m_5chain5ChainINtNtNtB2o_7sources4once4OnceINtNtB2q_6result6ResultB1w_NtNtB8_5error15EvaluationErrorEEINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB2o_6traits8iterator8Iteratorp4ItemB3Z_EL_EENCINvB6_16hash_deduplicateB1w_B3b_E0ENCNvB2_18eval_from_in_graphs2_0EBa_:
 4660|    138|    fn run_if_term_is_a_graph_node<
 4661|    138|        T: 'static,
 4662|    138|        I: Iterator<Item = Result<T, EvaluationError>> + 'static,
 4663|    138|    >(
 4664|    138|        &self,
 4665|    138|        term: &EncodedTerm,
 4666|    138|        graph_name: &EncodedTerm,
 4667|    138|        f: impl FnOnce() -> I,
 4668|    138|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4669|    138|        match self.is_subject_or_object_in_graph(term, graph_name) {
 4670|      0|            Ok(true) => Box::new(f()),
 4671|       |            Ok(false) => {
 4672|    138|                Box::new(empty()) // Not in the database
 4673|       |            }
 4674|      0|            Err(error) => Box::new(once(Err(error))),
 4675|       |        }
 4676|    138|    }
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval18transitive_closureTNtNtNtB6_7storage15numeric_encoder11EncodedTermB10_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1X_6traits8iterator8Iteratorp4ItemINtNtB1Z_6result6ResultB10_NtNtB4_5error15EvaluationErrorEEL_ENCNCNvMs3_B2_NtB2_13PathEvaluator24eval_to_in_unknown_graphs1_00EIB2F_DB3e_p4ItemIB3U_BZ_B4k_EEL_ENCB4X_s1_0EB6_:
 5120|      1|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|      1|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|      1|    mut next: impl FnMut(T) -> NI,
 5123|      1|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|      1|    let mut errors = Vec::new();
 5125|      1|    let mut todo = start
 5126|      1|        .into_iter()
 5127|      1|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|      1|        })
 5134|      1|        .collect::<Vec<_>>();
 5135|      1|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|      1|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|      1|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|      1|}
_RINvMs3_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_13PathEvaluator29run_if_term_is_a_dataset_nodeTNtNtNtBa_7storage15numeric_encoder11EncodedTermB1z_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtB2u_5chain5ChainIB2q_INtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterNtNtB8_5error15EvaluationErrorENcNtINtNtB2y_6result6ResultB1z_B4r_E3Err0EIB2q_INtNtNtNtCsc4CYCHgsNRQ_3std11collections4hash3set8IntoIterB1z_ENcNtB50_2Ok0EENCNCNvB2_26eval_from_in_unknown_graphs0_0s_0ENCB70_s0_0EBa_:
 4697|      5|    fn run_if_term_is_a_dataset_node<
 4698|      5|        T: 'static,
 4699|      5|        I: IntoIterator<Item = Result<T, EvaluationError>> + 'static,
 4700|      5|    >(
 4701|      5|        &self,
 4702|      5|        term: &EncodedTerm,
 4703|      5|        f: impl FnMut(EncodedTerm) -> I + 'static,
 4704|      5|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4705|      5|        match self
 4706|      5|            .find_graphs_where_the_node_is_in(term)
 4707|      5|            .collect::<Result<HashSet<_>, _>>()
 4708|       |        {
 4709|      5|            Ok(graph_names) => Box::new(graph_names.into_iter().flat_map(f)),
 4710|      0|            Err(error) => Box::new(once(Err(error))),
 4711|       |        }
 4712|      5|    }
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval18transitive_closureNtNtNtB6_7storage15numeric_encoder11EncodedTermINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2s_6result6ResultBZ_NtNtB4_5error15EvaluationErrorEEL_EB1K_NCNvMs3_B2_NtB2_13PathEvaluator18eval_from_in_graphs1_0EB6_:
 5120|     62|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|     62|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|     62|    mut next: impl FnMut(T) -> NI,
 5123|     62|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|     62|    let mut errors = Vec::new();
 5125|     62|    let mut todo = start
 5126|     62|        .into_iter()
 5127|     62|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|     62|        })
 5134|     62|        .collect::<Vec<_>>();
 5135|     62|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|     62|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|     62|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|     62|}
_RNCNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluators4_00Bd_:
  595|    499|                                    .filter_map(|result| match result {
  596|    499|                                        Ok(result) => Some(result),
  597|      0|                                        Err(error) => {
  598|      0|                                            errors.push(Err(error));
  599|      0|                                            None
  600|       |                                        }
  601|    499|                                    })
_RNCNvMs0_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsl_0Bb_:
  896|  2.46k|                Rc::new(move |from| {
  897|  2.46k|                    Box::new(ConsecutiveDeduplication {
  898|  2.46k|                        inner: child(from),
  899|  2.46k|                        current: None,
  900|  2.46k|                    })
  901|  2.46k|                })
_RNvXsf_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtB5_9FlatMapOkTNtNtNtB9_7storage15numeric_encoder11EncodedTermBZ_EBY_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2z_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator26eval_from_in_unknown_graphs_0INtNtNtB2x_8adapters3map3MapIB1S_DB2r_p4ItemIB3t_BZ_B3S_EEL_ENCNCB4t_s_00EEB2r_4nextB9_:
 5235|      3|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|      3|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|      3|            }
 5242|      3|            self.current = None;
 5243|      3|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|      3|    }
_RINvNtNtCshC9BJcurWLf_8oxigraph6sparql4eval11format_listNtNtCsjOdcKtOMjJI_5alloc6string6StringINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtB1z_3map3MapINtNtNtB1D_5slice4iter4IterNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableENvYB34_NtBU_8ToString9to_stringEIB2n_IB2E_TB34_NtNtCsftsRMVBFYTr_7sparopt7algebra19AggregateExpressionEENCNvB2_15eval_node_label0EEEB6_:
 5842|     16|fn format_list<T: ToString>(values: impl IntoIterator<Item = T>) -> String {
 5843|     16|    values
 5844|     16|        .into_iter()
 5845|     16|        .map(|v| v.to_string())
 5846|     16|        .collect::<Vec<_>>()
 5847|     16|        .join(", ")
 5848|     16|}
_RINvXsI_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalNtB6_12EncodedTupleNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEBa_:
   43|    971|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvXse_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultNtNtNtBa_7storage15numeric_encoder11EncodedQuadNtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okTNtB2J_11EncodedTermB4G_B4G_ENCNvMs3_B6_NtB6_13PathEvaluator47get_subject_or_object_identity_pairs_in_dataset0AIB2l_B4F_B3s_Ej2_EBa_:
 5201|    119|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|    119|        self,
 5203|    119|        f: F,
 5204|    119|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|    119|        FlatMapOk {
 5206|    119|            inner: self,
 5207|    119|            f,
 5208|    119|            current: None,
 5209|    119|        }
 5210|    119|    }
_RINvXse_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultNtNtNtBa_7storage15numeric_encoder11EncodedQuadNtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okTNtB2J_11EncodedTermB4G_ENCNvMs3_B6_NtB6_13PathEvaluator45get_subject_or_object_identity_pairs_in_graph0AIB2l_B4F_B3s_Ej2_EBa_:
 5201|  4.04k|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|  4.04k|        self,
 5203|  4.04k|        f: F,
 5204|  4.04k|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|  4.04k|        FlatMapOk {
 5206|  4.04k|            inner: self,
 5207|  4.04k|            f,
 5208|  4.04k|            current: None,
 5209|  4.04k|        }
 5210|  4.04k|    }
_RINvXse_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultNtNtNtBa_7storage15numeric_encoder11EncodedTermNtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okB2H_NCNvMs3_B6_NtB6_13PathEvaluator18eval_from_in_graphs_0BJ_EBa_:
 5201|    188|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|    188|        self,
 5203|    188|        f: F,
 5204|    188|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|    188|        FlatMapOk {
 5206|    188|            inner: self,
 5207|    188|            f,
 5208|    188|            current: None,
 5209|    188|        }
 5210|    188|    }
_RINvXse_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultTNtNtNtBa_7storage15numeric_encoder11EncodedTermB2I_B2I_ENtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okB2H_NCNvMs3_B6_NtB6_13PathEvaluator26eval_open_in_unknown_graphs0_0INtNtNtB1p_8adapters3map3MapIBK_DB1j_p4ItemIB2l_B2I_B3C_EEL_ENCNCB4V_s0_00EEBa_:
 5201|    167|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|    167|        self,
 5203|    167|        f: F,
 5204|    167|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|    167|        FlatMapOk {
 5206|    167|            inner: self,
 5207|    167|            f,
 5208|    167|            current: None,
 5209|    167|        }
 5210|    167|    }
_RINvXse_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultTNtNtNtBa_7storage15numeric_encoder11EncodedTermB2I_ENtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okB2H_NCNvMs3_B6_NtB6_13PathEvaluator26eval_from_in_unknown_graphs_0INtNtNtB1p_8adapters3map3MapIBK_DB1j_p4ItemIB2l_B2I_B3y_EEL_ENCNCB4R_s_00EEBa_:
 5201|      3|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|      3|        self,
 5203|      3|        f: F,
 5204|      3|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|      3|        FlatMapOk {
 5206|      3|            inner: self,
 5207|      3|            f,
 5208|      3|            current: None,
 5209|      3|        }
 5210|      3|    }
_RINvXse_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultNtNtNtBa_7storage15numeric_encoder11EncodedTermNtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okB2H_NCNvMs3_B6_NtB6_13PathEvaluator16eval_to_in_graphs_0BJ_EBa_:
 5201|    105|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|    105|        self,
 5203|    105|        f: F,
 5204|    105|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|    105|        FlatMapOk {
 5206|    105|            inner: self,
 5207|    105|            f,
 5208|    105|            current: None,
 5209|    105|        }
 5210|    105|    }
_RINvXse_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultTNtNtNtBa_7storage15numeric_encoder11EncodedTermB2I_ENtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okB2H_NCNvMs3_B6_NtB6_13PathEvaluator18eval_open_in_graphs0_0INtNtNtB1p_8adapters3map3MapIBK_DB1j_p4ItemIB2l_B2I_B3y_EEL_ENCNCB4R_s0_00EEBa_:
 5201|  2.10k|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|  2.10k|        self,
 5203|  2.10k|        f: F,
 5204|  2.10k|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|  2.10k|        FlatMapOk {
 5206|  2.10k|            inner: self,
 5207|  2.10k|            f,
 5208|  2.10k|            current: None,
 5209|  2.10k|        }
 5210|  2.10k|    }
_RINvXse_NtNtCshC9BJcurWLf_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultTNtNtNtBa_7storage15numeric_encoder11EncodedTermB2I_ENtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okB2H_NCNvMs3_B6_NtB6_13PathEvaluator24eval_to_in_unknown_graphs_0INtNtNtB1p_8adapters3map3MapIBK_DB1j_p4ItemIB2l_B2I_B3y_EEL_ENCNCB4R_s_00EEBa_:
 5201|      9|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|      9|        self,
 5203|      9|        f: F,
 5204|      9|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|      9|        FlatMapOk {
 5206|      9|            inner: self,
 5207|      9|            f,
 5208|      9|            current: None,
 5209|      9|        }
 5210|      9|    }

_RNvMNtNtNtCshC9BJcurWLf_8oxigraph6sparql4http5dummyNtB2_6Client3new:
    9|  5.07k|    pub fn new(_timeout: Option<Duration>, _redirection_limit: usize) -> Self {
   10|  5.07k|        Self
   11|  5.07k|    }

_RNvXs2_NtCshC9BJcurWLf_8oxigraph6sparqlNtB5_12QueryOptionsNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  157|  2.53k|#[derive(Clone, Default)]
_RNvMNtCshC9BJcurWLf_8oxigraph6sparqlNtB2_12QueryOptions21without_optimizationsCs6R6jWqmh3zm_18sparql_update_eval:
  259|  2.53k|    pub fn without_optimizations(mut self) -> Self {
  260|  2.53k|        self.without_optimizations = true;
  261|  2.53k|        self
  262|  2.53k|    }
_RNvXs3_NtCshC9BJcurWLf_8oxigraph6sparqlNtB5_12QueryOptionsNtNtCs9nhK3FOW46N_4core7default7Default7defaultCs6R6jWqmh3zm_18sparql_update_eval:
  157|  2.53k|#[derive(Clone, Default)]
_RNvXs_NtCshC9BJcurWLf_8oxigraph6sparqlNtB4_13UpdateOptionsINtNtCs9nhK3FOW46N_4core7convert4FromNtB4_12QueryOptionsE4fromCs6R6jWqmh3zm_18sparql_update_eval:
  273|  5.07k|    fn from(query_options: QueryOptions) -> Self {
  274|  5.07k|        Self { query_options }
  275|  5.07k|    }
_RNvXs2_NtCshC9BJcurWLf_8oxigraph6sparqlNtB5_12QueryOptionsNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  157|  5.07k|#[derive(Clone, Default)]
_RNvXs4_NtCshC9BJcurWLf_8oxigraph6sparqlNtB5_13UpdateOptionsNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  266|  5.07k|#[derive(Clone, Default)]
_RNvMNtCshC9BJcurWLf_8oxigraph6sparqlNtB2_12QueryOptions15service_handler:
  243|  4.96k|    fn service_handler(&self) -> Arc<dyn ServiceHandler<Error = EvaluationError>> {
  244|  4.96k|        self.service_handler.clone().unwrap_or_else(|| {
  245|       |            if cfg!(feature = "http-client") {
  246|       |                Arc::new(service::SimpleServiceHandler::new(
  247|       |                    self.http_timeout,
  248|       |                    self.http_redirection_limit,
  249|       |                ))
  250|       |            } else {
  251|       |                Arc::new(EmptyServiceHandler)
  252|       |            }
  253|  4.96k|        })
  254|  4.96k|    }
_RNCNvMNtCshC9BJcurWLf_8oxigraph6sparqlNtB4_12QueryOptions15service_handler0B6_:
  244|  4.96k|        self.service_handler.clone().unwrap_or_else(|| {
  245|  4.96k|            if cfg!(feature = "http-client") {
  246|      0|                Arc::new(service::SimpleServiceHandler::new(
  247|      0|                    self.http_timeout,
  248|      0|                    self.http_redirection_limit,
  249|      0|                ))
  250|       |            } else {
  251|  4.96k|                Arc::new(EmptyServiceHandler)
  252|       |            }
  253|  4.96k|        })

_RNCNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB4_21SimpleUpdateEvaluator25convert_named_node_or_var0B8_:
  395|     37|                .map(|node| dataset.decode_named_node(&node))
_RNCNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB4_21SimpleUpdateEvaluator25convert_graph_name_or_var0B8_:
  410|     16|                .map(|node| {
  411|     16|                    Ok(if node == EncodedTerm::DefaultGraph {
  412|      0|                        OxGraphName::DefaultGraph
  413|       |                    } else {
  414|     16|                        dataset.decode_named_node(&node)?.into()
  415|       |                    })
  416|     16|                })
_RNCNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB4_21SimpleUpdateEvaluator15lookup_variable0B8_:
  561|  12.1k|            .position(|v2| v == v2)
_RNCNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB4_21SimpleUpdateEvaluator26convert_ground_term_or_var0B8_:
  514|    341|                .map(|node| dataset.decode_term(&node))
_RNCNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB4_21SimpleUpdateEvaluator15lookup_variables_0B8_:
  562|  1.71k|            .and_then(|i| values.get(i))
_RNCNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB4_21SimpleUpdateEvaluator19convert_term_or_var0B8_:
  381|     88|                .map(|node| dataset.decode_term(&node))
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator8eval_all:
   49|  5.07k|    fn eval_all(
   50|  5.07k|        &mut self,
   51|  5.07k|        updates: &[GraphUpdateOperation],
   52|  5.07k|        using_datasets: &[Option<QueryDataset>],
   53|  5.07k|    ) -> Result<(), EvaluationError> {
   54|  9.33k|        for (update, using_dataset) in updates.iter().zip(using_datasets) {
   55|  9.33k|            self.eval(update, using_dataset)?;
   56|       |        }
   57|  4.74k|        Ok(())
   58|  5.07k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator20convert_quad_pattern:
  321|  2.70k|    fn convert_quad_pattern(
  322|  2.70k|        quad: &QuadPattern,
  323|  2.70k|        variables: &[Variable],
  324|  2.70k|        values: &EncodedTuple,
  325|  2.70k|        dataset: &DatasetView,
  326|  2.70k|        bnodes: &mut HashMap<BlankNode, BlankNode>,
  327|  2.70k|    ) -> Result<Option<OxQuad>, EvaluationError> {
  328|  2.70k|        Ok(Some(OxQuad {
  329|  2.70k|            subject: match Self::convert_term_or_var(
  330|  2.70k|                &quad.subject,
  331|  2.70k|                variables,
  332|  2.70k|                values,
  333|  2.70k|                dataset,
  334|  2.70k|                bnodes,
  335|  2.70k|            )? {
  336|  1.91k|                Some(Term::NamedNode(node)) => node.into(),
  337|      0|                Some(Term::BlankNode(node)) => node.into(),
  338|      0|                Some(Term::Triple(triple)) => triple.into(),
  339|    783|                Some(Term::Literal(_)) | None => return Ok(None),
  340|       |            },
  341|  1.78k|            predicate: if let Some(predicate) =
  342|  1.91k|                Self::convert_named_node_or_var(&quad.predicate, variables, values, dataset)?
  343|       |            {
  344|  1.78k|                predicate
  345|       |            } else {
  346|    130|                return Ok(None);
  347|       |            },
  348|    492|            object: if let Some(object) =
  349|  1.78k|                Self::convert_term_or_var(&quad.object, variables, values, dataset, bnodes)?
  350|       |            {
  351|    492|                object
  352|       |            } else {
  353|  1.29k|                return Ok(None);
  354|       |            },
  355|    402|            graph_name: if let Some(graph_name) =
  356|    492|                Self::convert_graph_name_or_var(&quad.graph_name, variables, values, dataset)?
  357|       |            {
  358|    402|                graph_name
  359|       |            } else {
  360|     88|                return Ok(None);
  361|       |            },
  362|       |        }))
  363|  2.70k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator4eval:
   60|  9.33k|    fn eval(
   61|  9.33k|        &mut self,
   62|  9.33k|        update: &GraphUpdateOperation,
   63|  9.33k|        using_dataset: &Option<QueryDataset>,
   64|  9.33k|    ) -> Result<(), EvaluationError> {
   65|  9.33k|        match update {
   66|    486|            GraphUpdateOperation::InsertData { data } => self.eval_insert_data(data),
   67|    130|            GraphUpdateOperation::DeleteData { data } => self.eval_delete_data(data),
   68|       |            GraphUpdateOperation::DeleteInsert {
   69|  4.96k|                delete,
   70|  4.96k|                insert,
   71|  4.96k|                pattern,
   72|  4.96k|                ..
   73|  4.96k|            } => self.eval_delete_insert(
   74|  4.96k|                delete,
   75|  4.96k|                insert,
   76|  4.96k|                using_dataset.as_ref().unwrap_or(&QueryDataset::new()),
   77|  4.96k|                pattern,
   78|  4.96k|            ),
   79|       |            GraphUpdateOperation::Load {
   80|      0|                silent,
   81|      0|                source,
   82|      0|                destination,
   83|       |            } => {
   84|      0|                if let Err(error) = self.eval_load(source, destination) {
   85|      0|                    if *silent {
   86|      0|                        Ok(())
   87|       |                    } else {
   88|      0|                        Err(error)
   89|       |                    }
   90|       |                } else {
   91|      0|                    Ok(())
   92|       |                }
   93|       |            }
   94|  2.19k|            GraphUpdateOperation::Clear { graph, silent } => self.eval_clear(graph, *silent),
   95|    446|            GraphUpdateOperation::Create { graph, silent } => self.eval_create(graph, *silent),
   96|  1.11k|            GraphUpdateOperation::Drop { graph, silent } => self.eval_drop(graph, *silent),
   97|       |        }
   98|  9.33k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator25convert_graph_name_or_var:
  400|  1.58k|    fn convert_graph_name_or_var(
  401|  1.58k|        term: &GraphNamePattern,
  402|  1.58k|        variables: &[Variable],
  403|  1.58k|        values: &EncodedTuple,
  404|  1.58k|        dataset: &DatasetView,
  405|  1.58k|    ) -> Result<Option<OxGraphName>, EvaluationError> {
  406|  1.58k|        match term {
  407|  1.25k|            GraphNamePattern::NamedNode(term) => Ok(Some(term.clone().into())),
  408|     36|            GraphNamePattern::DefaultGraph => Ok(Some(OxGraphName::DefaultGraph)),
  409|    293|            GraphNamePattern::Variable(v) => Self::lookup_variable(v, variables, values)
  410|    293|                .map(|node| {
  411|       |                    Ok(if node == EncodedTerm::DefaultGraph {
  412|       |                        OxGraphName::DefaultGraph
  413|       |                    } else {
  414|       |                        dataset.decode_named_node(&node)?.into()
  415|       |                    })
  416|    293|                })
  417|    293|                .transpose(),
  418|       |        }
  419|  1.58k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator16eval_insert_data:
  100|    486|    fn eval_insert_data(&mut self, data: &[Quad]) -> Result<(), EvaluationError> {
  101|    486|        let mut bnodes = HashMap::new();
  102|  5.44k|        for quad in data {
  103|  4.96k|            let quad = Self::convert_quad(quad, &mut bnodes);
  104|  4.96k|            self.transaction.insert(quad.as_ref())?;
  105|       |        }
  106|    486|        Ok(())
  107|    486|    }
_RNvNtNtCshC9BJcurWLf_8oxigraph6sparql6update15evaluate_update:
   24|  5.07k|pub fn evaluate_update<'a, 'b: 'a>(
   25|  5.07k|    transaction: &'a mut StorageWriter<'b>,
   26|  5.07k|    update: &Update,
   27|  5.07k|    options: &UpdateOptions,
   28|  5.07k|) -> Result<(), EvaluationError> {
   29|  5.07k|    SimpleUpdateEvaluator {
   30|  5.07k|        transaction,
   31|  5.07k|        base_iri: update.inner.base_iri.clone().map(Rc::new),
   32|  5.07k|        options: options.clone(),
   33|  5.07k|        client: Client::new(
   34|  5.07k|            options.query_options.http_timeout,
   35|  5.07k|            options.query_options.http_redirection_limit,
   36|  5.07k|        ),
   37|  5.07k|    }
   38|  5.07k|    .eval_all(&update.inner.operations, &update.using_datasets)
   39|  5.07k|}
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator11eval_create:
  193|    446|    fn eval_create(&mut self, graph_name: &NamedNode, silent: bool) -> Result<(), EvaluationError> {
  194|    446|        if self.transaction.insert_named_graph(graph_name.into())? || silent {
  195|    444|            Ok(())
  196|       |        } else {
  197|      2|            Err(EvaluationError::GraphAlreadyExists(graph_name.clone()))
  198|       |        }
  199|    446|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator19convert_ground_quad:
  287|  2.33k|    fn convert_ground_quad(quad: &GroundQuad) -> OxQuad {
  288|  2.33k|        OxQuad {
  289|  2.33k|            subject: match &quad.subject {
  290|  2.33k|                GroundSubject::NamedNode(subject) => subject.clone().into(),
  291|      0|                GroundSubject::Triple(subject) => Self::convert_ground_triple(subject).into(),
  292|       |            },
  293|  2.33k|            predicate: quad.predicate.clone(),
  294|  2.33k|            object: match &quad.object {
  295|  1.06k|                GroundTerm::NamedNode(object) => object.clone().into(),
  296|  1.27k|                GroundTerm::Literal(object) => object.clone().into(),
  297|      0|                GroundTerm::Triple(subject) => Self::convert_ground_triple(subject).into(),
  298|       |            },
  299|  2.33k|            graph_name: match &quad.graph_name {
  300|  2.20k|                GraphName::NamedNode(graph_name) => graph_name.clone().into(),
  301|    126|                GraphName::DefaultGraph => OxGraphName::DefaultGraph,
  302|       |            },
  303|       |        }
  304|  2.33k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator15lookup_variable:
  554|  10.0k|    fn lookup_variable(
  555|  10.0k|        v: &Variable,
  556|  10.0k|        variables: &[Variable],
  557|  10.0k|        values: &EncodedTuple,
  558|  10.0k|    ) -> Option<EncodedTerm> {
  559|  10.0k|        variables
  560|  10.0k|            .iter()
  561|  10.0k|            .position(|v2| v == v2)
  562|  10.0k|            .and_then(|i| values.get(i))
  563|  10.0k|            .cloned()
  564|  10.0k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator26convert_ground_term_or_var:
  500|  13.6k|    fn convert_ground_term_or_var(
  501|  13.6k|        term: &GroundTermPattern,
  502|  13.6k|        variables: &[Variable],
  503|  13.6k|        values: &EncodedTuple,
  504|  13.6k|        dataset: &DatasetView,
  505|  13.6k|    ) -> Result<Option<Term>, EvaluationError> {
  506|  13.6k|        Ok(match term {
  507|  6.33k|            GroundTermPattern::NamedNode(term) => Some(term.clone().into()),
  508|    394|            GroundTermPattern::Literal(term) => Some(term.clone().into()),
  509|      0|            GroundTermPattern::Triple(triple) => {
  510|      0|                Self::convert_ground_triple_pattern(triple, variables, values, dataset)?
  511|      0|                    .map(Into::into)
  512|       |            }
  513|  6.95k|            GroundTermPattern::Variable(v) => Self::lookup_variable(v, variables, values)
  514|  6.95k|                .map(|node| dataset.decode_term(&node))
  515|  6.95k|                .transpose()?,
  516|       |        })
  517|  13.6k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator10eval_clear:
  201|  2.19k|    fn eval_clear(&mut self, graph: &GraphTarget, silent: bool) -> Result<(), EvaluationError> {
  202|  2.19k|        match graph {
  203|  1.39k|            GraphTarget::NamedNode(graph_name) => {
  204|  1.39k|                if self
  205|  1.39k|                    .transaction
  206|  1.39k|                    .reader()
  207|  1.39k|                    .contains_named_graph(&graph_name.as_ref().into())?
  208|       |                {
  209|     86|                    Ok(self.transaction.clear_graph(graph_name.into())?)
  210|  1.30k|                } else if silent {
  211|  1.02k|                    Ok(())
  212|       |                } else {
  213|    284|                    Err(EvaluationError::GraphDoesNotExist(graph_name.clone()))
  214|       |                }
  215|       |            }
  216|       |            GraphTarget::DefaultGraph => {
  217|    412|                self.transaction.clear_graph(GraphNameRef::DefaultGraph)?;
  218|    412|                Ok(())
  219|       |            }
  220|     88|            GraphTarget::NamedGraphs => Ok(self.transaction.clear_all_named_graphs()?),
  221|    306|            GraphTarget::AllGraphs => Ok(self.transaction.clear_all_graphs()?),
  222|       |        }
  223|  2.19k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator9eval_drop:
  225|  1.11k|    fn eval_drop(&mut self, graph: &GraphTarget, silent: bool) -> Result<(), EvaluationError> {
  226|  1.11k|        match graph {
  227|    632|            GraphTarget::NamedNode(graph_name) => {
  228|    632|                if self.transaction.remove_named_graph(graph_name.into())? || silent {
  229|    596|                    Ok(())
  230|       |                } else {
  231|     36|                    Err(EvaluationError::GraphDoesNotExist(graph_name.clone()))
  232|       |                }
  233|       |            }
  234|       |            GraphTarget::DefaultGraph => {
  235|    296|                Ok(self.transaction.clear_graph(GraphNameRef::DefaultGraph)?)
  236|       |            }
  237|     16|            GraphTarget::NamedGraphs => Ok(self.transaction.remove_all_named_graphs()?),
  238|    166|            GraphTarget::AllGraphs => Ok(self.transaction.clear()?),
  239|       |        }
  240|  1.11k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator12convert_quad:
  242|  4.96k|    fn convert_quad(quad: &Quad, bnodes: &mut HashMap<BlankNode, BlankNode>) -> OxQuad {
  243|  4.96k|        OxQuad {
  244|  4.96k|            subject: match &quad.subject {
  245|  4.96k|                Subject::NamedNode(subject) => subject.clone().into(),
  246|      0|                Subject::BlankNode(subject) => Self::convert_blank_node(subject, bnodes).into(),
  247|      0|                Subject::Triple(subject) => Self::convert_triple(subject, bnodes).into(),
  248|       |            },
  249|  4.96k|            predicate: quad.predicate.clone(),
  250|  4.96k|            object: match &quad.object {
  251|  1.37k|                Term::NamedNode(object) => object.clone().into(),
  252|      0|                Term::BlankNode(object) => Self::convert_blank_node(object, bnodes).into(),
  253|  3.58k|                Term::Literal(object) => object.clone().into(),
  254|      0|                Term::Triple(subject) => Self::convert_triple(subject, bnodes).into(),
  255|       |            },
  256|  4.96k|            graph_name: match &quad.graph_name {
  257|  4.50k|                GraphName::NamedNode(graph_name) => graph_name.clone().into(),
  258|    462|                GraphName::DefaultGraph => OxGraphName::DefaultGraph,
  259|       |            },
  260|       |        }
  261|  4.96k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator19convert_term_or_var:
  365|  4.48k|    fn convert_term_or_var(
  366|  4.48k|        term: &TermPattern,
  367|  4.48k|        variables: &[Variable],
  368|  4.48k|        values: &EncodedTuple,
  369|  4.48k|        dataset: &DatasetView,
  370|  4.48k|        bnodes: &mut HashMap<BlankNode, BlankNode>,
  371|  4.48k|    ) -> Result<Option<Term>, EvaluationError> {
  372|  4.48k|        Ok(match term {
  373|  2.06k|            TermPattern::NamedNode(term) => Some(term.clone().into()),
  374|      0|            TermPattern::BlankNode(bnode) => Some(Self::convert_blank_node(bnode, bnodes).into()),
  375|    256|            TermPattern::Literal(term) => Some(term.clone().into()),
  376|      0|            TermPattern::Triple(triple) => {
  377|      0|                Self::convert_triple_pattern(triple, variables, values, dataset, bnodes)?
  378|      0|                    .map(Into::into)
  379|       |            }
  380|  2.16k|            TermPattern::Variable(v) => Self::lookup_variable(v, variables, values)
  381|  2.16k|                .map(|node| dataset.decode_term(&node))
  382|  2.16k|                .transpose()?,
  383|       |        })
  384|  4.48k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator16eval_delete_data:
  109|    130|    fn eval_delete_data(&mut self, data: &[GroundQuad]) -> Result<(), EvaluationError> {
  110|  2.46k|        for quad in data {
  111|  2.33k|            let quad = Self::convert_ground_quad(quad);
  112|  2.33k|            self.transaction.remove(quad.as_ref())?;
  113|       |        }
  114|    130|        Ok(())
  115|    130|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator25convert_named_node_or_var:
  386|  7.86k|    fn convert_named_node_or_var(
  387|  7.86k|        term: &NamedNodePattern,
  388|  7.86k|        variables: &[Variable],
  389|  7.86k|        values: &EncodedTuple,
  390|  7.86k|        dataset: &DatasetView,
  391|  7.86k|    ) -> Result<Option<NamedNode>, EvaluationError> {
  392|  7.86k|        Ok(match term {
  393|  7.26k|            NamedNodePattern::NamedNode(term) => Some(term.clone()),
  394|    603|            NamedNodePattern::Variable(v) => Self::lookup_variable(v, variables, values)
  395|    603|                .map(|node| dataset.decode_named_node(&node))
  396|    603|                .transpose()?,
  397|       |        })
  398|  7.86k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator18eval_delete_insert:
  117|  4.96k|    fn eval_delete_insert(
  118|  4.96k|        &mut self,
  119|  4.96k|        delete: &[GroundQuadPattern],
  120|  4.96k|        insert: &[QuadPattern],
  121|  4.96k|        using: &QueryDataset,
  122|  4.96k|        algebra: &GraphPattern,
  123|  4.96k|    ) -> Result<(), EvaluationError> {
  124|  4.96k|        let dataset = Rc::new(DatasetView::new(self.transaction.reader(), using));
  125|  4.96k|        let mut pattern = sparopt::algebra::GraphPattern::from(algebra);
  126|  4.96k|        if !self.options.query_options.without_optimizations {
  127|  2.48k|            pattern = Optimizer::optimize_graph_pattern(sparopt::algebra::GraphPattern::Reduced {
  128|  2.48k|                inner: Box::new(pattern),
  129|  2.48k|            });
  130|  2.48k|        }
  131|  4.96k|        let evaluator = SimpleEvaluator::new(
  132|  4.96k|            Rc::clone(&dataset),
  133|  4.96k|            self.base_iri.clone(),
  134|  4.96k|            self.options.query_options.service_handler(),
  135|  4.96k|            Arc::new(self.options.query_options.custom_functions.clone()),
  136|  4.96k|            false,
  137|  4.96k|        );
  138|  4.96k|        let mut variables = Vec::new();
  139|  4.96k|        let mut bnodes = HashMap::new();
  140|  4.96k|        let (eval, _) = evaluator.graph_pattern_evaluator(&pattern, &mut variables);
  141|  4.96k|        let tuples =
  142|  4.96k|            eval(EncodedTuple::with_capacity(variables.len())).collect::<Result<Vec<_>, _>>()?; // TODO: would be much better to stream
  143|  6.76k|        for tuple in tuples {
  144|  9.96k|            for quad in delete {
  145|    907|                if let Some(quad) =
  146|  8.16k|                    Self::convert_ground_quad_pattern(quad, &variables, &tuple, &dataset)?
  147|       |                {
  148|    907|                    self.transaction.remove(quad.as_ref())?;
  149|  7.25k|                }
  150|       |            }
  151|  4.49k|            for quad in insert {
  152|    402|                if let Some(quad) =
  153|  2.70k|                    Self::convert_quad_pattern(quad, &variables, &tuple, &dataset, &mut bnodes)?
  154|       |                {
  155|    402|                    self.transaction.insert(quad.as_ref())?;
  156|  2.29k|                }
  157|       |            }
  158|  1.79k|            bnodes.clear();
  159|       |        }
  160|  4.96k|        Ok(())
  161|  4.96k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator27convert_ground_quad_pattern:
  458|  8.16k|    fn convert_ground_quad_pattern(
  459|  8.16k|        quad: &GroundQuadPattern,
  460|  8.16k|        variables: &[Variable],
  461|  8.16k|        values: &EncodedTuple,
  462|  8.16k|        dataset: &DatasetView,
  463|  8.16k|    ) -> Result<Option<OxQuad>, EvaluationError> {
  464|  8.16k|        Ok(Some(OxQuad {
  465|  8.16k|            subject: match Self::convert_ground_term_or_var(
  466|  8.16k|                &quad.subject,
  467|  8.16k|                variables,
  468|  8.16k|                values,
  469|  8.16k|                dataset,
  470|  8.16k|            )? {
  471|  5.95k|                Some(Term::NamedNode(node)) => node.into(),
  472|      0|                Some(Term::BlankNode(node)) => node.into(),
  473|      0|                Some(Term::Triple(triple)) => triple.into(),
  474|  2.21k|                Some(Term::Literal(_)) | None => return Ok(None),
  475|       |            },
  476|  5.51k|            predicate: if let Some(predicate) =
  477|  5.95k|                Self::convert_named_node_or_var(&quad.predicate, variables, values, dataset)?
  478|       |            {
  479|  5.51k|                predicate
  480|       |            } else {
  481|    436|                return Ok(None);
  482|       |            },
  483|  1.09k|            object: if let Some(object) =
  484|  5.51k|                Self::convert_ground_term_or_var(&quad.object, variables, values, dataset)?
  485|       |            {
  486|  1.09k|                object
  487|       |            } else {
  488|  4.41k|                return Ok(None);
  489|       |            },
  490|    907|            graph_name: if let Some(graph_name) =
  491|  1.09k|                Self::convert_graph_name_or_var(&quad.graph_name, variables, values, dataset)?
  492|       |            {
  493|    907|                graph_name
  494|       |            } else {
  495|    189|                return Ok(None);
  496|       |            },
  497|       |        }))
  498|  8.16k|    }

_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder14write_osp_quad:
  457|    462|pub fn write_osp_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  458|    462|    write_term(sink, &quad.object);
  459|    462|    write_term(sink, &quad.subject);
  460|    462|    write_term(sink, &quad.predicate);
  461|    462|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder15write_gpos_quad:
  431|  2.70k|pub fn write_gpos_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  432|  2.70k|    write_term(sink, &quad.graph_name);
  433|  2.70k|    write_term(sink, &quad.predicate);
  434|  2.70k|    write_term(sink, &quad.object);
  435|  2.70k|    write_term(sink, &quad.subject);
  436|  2.70k|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder16encode_term_pair:
  469|  11.8k|pub fn encode_term_pair(t1: &EncodedTerm, t2: &EncodedTerm) -> Vec<u8> {
  470|  11.8k|    let mut vec = Vec::with_capacity(2 * WRITTEN_TERM_MAX_SIZE);
  471|  11.8k|    write_term(&mut vec, t1);
  472|  11.8k|    write_term(&mut vec, t2);
  473|  11.8k|    vec
  474|  11.8k|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder15write_spog_quad:
  403|  8.05k|pub fn write_spog_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  404|  8.05k|    write_term(sink, &quad.subject);
  405|  8.05k|    write_term(sink, &quad.predicate);
  406|  8.05k|    write_term(sink, &quad.object);
  407|  8.05k|    write_term(sink, &quad.graph_name);
  408|  8.05k|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder14write_spo_quad:
  445|    624|pub fn write_spo_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  446|    624|    write_term(sink, &quad.subject);
  447|    624|    write_term(sink, &quad.predicate);
  448|    624|    write_term(sink, &quad.object);
  449|    624|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder16encode_term_quad:
  484|    496|pub fn encode_term_quad(
  485|    496|    t1: &EncodedTerm,
  486|    496|    t2: &EncodedTerm,
  487|    496|    t3: &EncodedTerm,
  488|    496|    t4: &EncodedTerm,
  489|    496|) -> Vec<u8> {
  490|    496|    let mut vec = Vec::with_capacity(4 * WRITTEN_TERM_MAX_SIZE);
  491|    496|    write_term(&mut vec, t1);
  492|    496|    write_term(&mut vec, t2);
  493|    496|    write_term(&mut vec, t3);
  494|    496|    write_term(&mut vec, t4);
  495|    496|    vec
  496|    496|}
_RNvMNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoderNtB2_12QuadEncoding6decode:
   65|  3.07k|    pub fn decode(self, mut buffer: &[u8]) -> Result<EncodedQuad, StorageError> {
   66|  3.07k|        match self {
   67|      2|            Self::Spog => buffer.read_spog_quad(),
   68|      3|            Self::Posg => buffer.read_posg_quad(),
   69|      0|            Self::Ospg => buffer.read_ospg_quad(),
   70|  2.59k|            Self::Gspo => buffer.read_gspo_quad(),
   71|      7|            Self::Gpos => buffer.read_gpos_quad(),
   72|      0|            Self::Gosp => buffer.read_gosp_quad(),
   73|    462|            Self::Dspo => buffer.read_dspo_quad(),
   74|      1|            Self::Dpos => buffer.read_dpos_quad(),
   75|      0|            Self::Dosp => buffer.read_dosp_quad(),
   76|       |        }
   77|  3.07k|    }
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder10write_term:
  498|   142k|pub fn write_term(sink: &mut Vec<u8>, term: &EncodedTerm) {
  499|   142k|    match term {
  500|      0|        EncodedTerm::DefaultGraph => (),
  501|   126k|        EncodedTerm::NamedNode { iri_id } => {
  502|   126k|            sink.push(TYPE_NAMED_NODE_ID);
  503|   126k|            sink.extend_from_slice(&iri_id.to_be_bytes());
  504|   126k|        }
  505|      0|        EncodedTerm::NumericalBlankNode { id } => {
  506|      0|            sink.push(TYPE_NUMERICAL_BLANK_NODE_ID);
  507|      0|            sink.extend_from_slice(&id.to_be_bytes())
  508|       |        }
  509|      0|        EncodedTerm::SmallBlankNode(id) => {
  510|      0|            sink.push(TYPE_SMALL_BLANK_NODE_ID);
  511|      0|            sink.extend_from_slice(&id.to_be_bytes())
  512|       |        }
  513|      0|        EncodedTerm::BigBlankNode { id_id } => {
  514|      0|            sink.push(TYPE_BIG_BLANK_NODE_ID);
  515|      0|            sink.extend_from_slice(&id_id.to_be_bytes());
  516|      0|        }
  517|    915|        EncodedTerm::SmallStringLiteral(value) => {
  518|    915|            sink.push(TYPE_SMALL_STRING_LITERAL);
  519|    915|            sink.extend_from_slice(&value.to_be_bytes())
  520|       |        }
  521|      0|        EncodedTerm::BigStringLiteral { value_id } => {
  522|      0|            sink.push(TYPE_BIG_STRING_LITERAL);
  523|      0|            sink.extend_from_slice(&value_id.to_be_bytes());
  524|      0|        }
  525|  5.01k|        EncodedTerm::SmallSmallLangStringLiteral { value, language } => {
  526|  5.01k|            sink.push(TYPE_SMALL_SMALL_LANG_STRING_LITERAL);
  527|  5.01k|            sink.extend_from_slice(&language.to_be_bytes());
  528|  5.01k|            sink.extend_from_slice(&value.to_be_bytes());
  529|  5.01k|        }
  530|      0|        EncodedTerm::SmallBigLangStringLiteral { value, language_id } => {
  531|      0|            sink.push(TYPE_SMALL_BIG_LANG_STRING_LITERAL);
  532|      0|            sink.extend_from_slice(&language_id.to_be_bytes());
  533|      0|            sink.extend_from_slice(&value.to_be_bytes());
  534|      0|        }
  535|      0|        EncodedTerm::BigSmallLangStringLiteral { value_id, language } => {
  536|      0|            sink.push(TYPE_BIG_SMALL_LANG_STRING_LITERAL);
  537|      0|            sink.extend_from_slice(&language.to_be_bytes());
  538|      0|            sink.extend_from_slice(&value_id.to_be_bytes());
  539|      0|        }
  540|       |        EncodedTerm::BigBigLangStringLiteral {
  541|      0|            value_id,
  542|      0|            language_id,
  543|      0|        } => {
  544|      0|            sink.push(TYPE_BIG_BIG_LANG_STRING_LITERAL);
  545|      0|            sink.extend_from_slice(&language_id.to_be_bytes());
  546|      0|            sink.extend_from_slice(&value_id.to_be_bytes());
  547|      0|        }
  548|      0|        EncodedTerm::SmallTypedLiteral { value, datatype_id } => {
  549|      0|            sink.push(TYPE_SMALL_TYPED_LITERAL);
  550|      0|            sink.extend_from_slice(&datatype_id.to_be_bytes());
  551|      0|            sink.extend_from_slice(&value.to_be_bytes());
  552|      0|        }
  553|       |        EncodedTerm::BigTypedLiteral {
  554|      0|            value_id,
  555|      0|            datatype_id,
  556|      0|        } => {
  557|      0|            sink.push(TYPE_BIG_TYPED_LITERAL);
  558|      0|            sink.extend_from_slice(&datatype_id.to_be_bytes());
  559|      0|            sink.extend_from_slice(&value_id.to_be_bytes());
  560|      0|        }
  561|  2.22k|        EncodedTerm::BooleanLiteral(value) => sink.push(if bool::from(*value) {
  562|    543|            TYPE_BOOLEAN_LITERAL_TRUE
  563|       |        } else {
  564|  1.67k|            TYPE_BOOLEAN_LITERAL_FALSE
  565|       |        }),
  566|      0|        EncodedTerm::FloatLiteral(value) => {
  567|      0|            sink.push(TYPE_FLOAT_LITERAL);
  568|      0|            sink.extend_from_slice(&value.to_be_bytes())
  569|       |        }
  570|  1.28k|        EncodedTerm::DoubleLiteral(value) => {
  571|  1.28k|            sink.push(TYPE_DOUBLE_LITERAL);
  572|  1.28k|            sink.extend_from_slice(&value.to_be_bytes())
  573|       |        }
  574|  2.34k|        EncodedTerm::IntegerLiteral(value) => {
  575|  2.34k|            sink.push(TYPE_INTEGER_LITERAL);
  576|  2.34k|            sink.extend_from_slice(&value.to_be_bytes())
  577|       |        }
  578|  5.00k|        EncodedTerm::DecimalLiteral(value) => {
  579|  5.00k|            sink.push(TYPE_DECIMAL_LITERAL);
  580|  5.00k|            sink.extend_from_slice(&value.to_be_bytes())
  581|       |        }
  582|      0|        EncodedTerm::DateTimeLiteral(value) => {
  583|      0|            sink.push(TYPE_DATE_TIME_LITERAL);
  584|      0|            sink.extend_from_slice(&value.to_be_bytes())
  585|       |        }
  586|      0|        EncodedTerm::TimeLiteral(value) => {
  587|      0|            sink.push(TYPE_TIME_LITERAL);
  588|      0|            sink.extend_from_slice(&value.to_be_bytes())
  589|       |        }
  590|      0|        EncodedTerm::DurationLiteral(value) => {
  591|      0|            sink.push(TYPE_DURATION_LITERAL);
  592|      0|            sink.extend_from_slice(&value.to_be_bytes())
  593|       |        }
  594|      0|        EncodedTerm::DateLiteral(value) => {
  595|      0|            sink.push(TYPE_DATE_LITERAL);
  596|      0|            sink.extend_from_slice(&value.to_be_bytes())
  597|       |        }
  598|      0|        EncodedTerm::GYearMonthLiteral(value) => {
  599|      0|            sink.push(TYPE_G_YEAR_MONTH_LITERAL);
  600|      0|            sink.extend_from_slice(&value.to_be_bytes())
  601|       |        }
  602|      0|        EncodedTerm::GYearLiteral(value) => {
  603|      0|            sink.push(TYPE_G_YEAR_LITERAL);
  604|      0|            sink.extend_from_slice(&value.to_be_bytes())
  605|       |        }
  606|      0|        EncodedTerm::GMonthDayLiteral(value) => {
  607|      0|            sink.push(TYPE_G_MONTH_DAY_LITERAL);
  608|      0|            sink.extend_from_slice(&value.to_be_bytes())
  609|       |        }
  610|      0|        EncodedTerm::GDayLiteral(value) => {
  611|      0|            sink.push(TYPE_G_DAY_LITERAL);
  612|      0|            sink.extend_from_slice(&value.to_be_bytes())
  613|       |        }
  614|      0|        EncodedTerm::GMonthLiteral(value) => {
  615|      0|            sink.push(TYPE_G_MONTH_LITERAL);
  616|      0|            sink.extend_from_slice(&value.to_be_bytes())
  617|       |        }
  618|      0|        EncodedTerm::YearMonthDurationLiteral(value) => {
  619|      0|            sink.push(TYPE_YEAR_MONTH_DURATION_LITERAL);
  620|      0|            sink.extend_from_slice(&value.to_be_bytes())
  621|       |        }
  622|      0|        EncodedTerm::DayTimeDurationLiteral(value) => {
  623|      0|            sink.push(TYPE_DAY_TIME_DURATION_LITERAL);
  624|      0|            sink.extend_from_slice(&value.to_be_bytes())
  625|       |        }
  626|      0|        EncodedTerm::Triple(value) => {
  627|      0|            sink.push(TYPE_TRIPLE);
  628|      0|            write_term(sink, &value.subject);
  629|      0|            write_term(sink, &value.predicate);
  630|      0|            write_term(sink, &value.object);
  631|      0|        }
  632|       |    }
  633|   142k|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder15write_gspo_quad:
  424|  2.70k|pub fn write_gspo_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  425|  2.70k|    write_term(sink, &quad.graph_name);
  426|  2.70k|    write_term(sink, &quad.subject);
  427|  2.70k|    write_term(sink, &quad.predicate);
  428|  2.70k|    write_term(sink, &quad.object);
  429|  2.70k|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder11encode_term:
  463|  15.3k|pub fn encode_term(t: &EncodedTerm) -> Vec<u8> {
  464|  15.3k|    let mut vec = Vec::with_capacity(WRITTEN_TERM_MAX_SIZE);
  465|  15.3k|    write_term(&mut vec, t);
  466|  15.3k|    vec
  467|  15.3k|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder15write_gosp_quad:
  438|  2.70k|pub fn write_gosp_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  439|  2.70k|    write_term(sink, &quad.graph_name);
  440|  2.70k|    write_term(sink, &quad.object);
  441|  2.70k|    write_term(sink, &quad.subject);
  442|  2.70k|    write_term(sink, &quad.predicate);
  443|  2.70k|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder18encode_term_triple:
  476|  3.63k|pub fn encode_term_triple(t1: &EncodedTerm, t2: &EncodedTerm, t3: &EncodedTerm) -> Vec<u8> {
  477|  3.63k|    let mut vec = Vec::with_capacity(3 * WRITTEN_TERM_MAX_SIZE);
  478|  3.63k|    write_term(&mut vec, t1);
  479|  3.63k|    write_term(&mut vec, t2);
  480|  3.63k|    write_term(&mut vec, t3);
  481|  3.63k|    vec
  482|  3.63k|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder15write_posg_quad:
  410|  2.70k|pub fn write_posg_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  411|  2.70k|    write_term(sink, &quad.predicate);
  412|  2.70k|    write_term(sink, &quad.object);
  413|  2.70k|    write_term(sink, &quad.subject);
  414|  2.70k|    write_term(sink, &quad.graph_name);
  415|  2.70k|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder14write_pos_quad:
  451|    462|pub fn write_pos_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  452|    462|    write_term(sink, &quad.predicate);
  453|    462|    write_term(sink, &quad.object);
  454|    462|    write_term(sink, &quad.subject);
  455|    462|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder15write_ospg_quad:
  417|  2.70k|pub fn write_ospg_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  418|  2.70k|    write_term(sink, &quad.object);
  419|  2.70k|    write_term(sink, &quad.subject);
  420|  2.70k|    write_term(sink, &quad.predicate);
  421|  2.70k|    write_term(sink, &quad.graph_name);
  422|  2.70k|}
_RNvYRShNtNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder10TermReader14read_gspo_quadBb_:
  127|  2.59k|    fn read_gspo_quad(&mut self) -> Result<EncodedQuad, StorageError> {
  128|  2.59k|        let graph_name = self.read_term()?;
  129|  2.59k|        let subject = self.read_term()?;
  130|  2.59k|        let predicate = self.read_term()?;
  131|  2.59k|        let object = self.read_term()?;
  132|  2.59k|        Ok(EncodedQuad {
  133|  2.59k|            subject,
  134|  2.59k|            predicate,
  135|  2.59k|            object,
  136|  2.59k|            graph_name,
  137|  2.59k|        })
  138|  2.59k|    }
_RNvXs_NtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoderRShNtB4_10TermReader9read_termB8_:
  204|  11.8k|    fn read_term(&mut self) -> Result<EncodedTerm, StorageError> {
  205|  11.8k|        let mut type_buffer = [0];
  206|  11.8k|        self.read_exact(&mut type_buffer)?;
  207|  11.8k|        match type_buffer[0] {
  208|       |            TYPE_NAMED_NODE_ID => {
  209|  9.83k|                let mut buffer = [0; 16];
  210|  9.83k|                self.read_exact(&mut buffer)?;
  211|  9.83k|                Ok(EncodedTerm::NamedNode {
  212|  9.83k|                    iri_id: StrHash::from_be_bytes(buffer),
  213|  9.83k|                })
  214|       |            }
  215|       |            TYPE_NUMERICAL_BLANK_NODE_ID => {
  216|      0|                let mut buffer = [0; 16];
  217|      0|                self.read_exact(&mut buffer)?;
  218|      0|                Ok(EncodedTerm::NumericalBlankNode {
  219|      0|                    id: u128::from_be_bytes(buffer),
  220|      0|                })
  221|       |            }
  222|       |            TYPE_SMALL_BLANK_NODE_ID => {
  223|      0|                let mut buffer = [0; 16];
  224|      0|                self.read_exact(&mut buffer)?;
  225|       |                Ok(EncodedTerm::SmallBlankNode(
  226|      0|                    SmallString::from_be_bytes(buffer).map_err(CorruptionError::new)?,
  227|       |                ))
  228|       |            }
  229|       |            TYPE_BIG_BLANK_NODE_ID => {
  230|      0|                let mut buffer = [0; 16];
  231|      0|                self.read_exact(&mut buffer)?;
  232|      0|                Ok(EncodedTerm::BigBlankNode {
  233|      0|                    id_id: StrHash::from_be_bytes(buffer),
  234|      0|                })
  235|       |            }
  236|       |            TYPE_SMALL_SMALL_LANG_STRING_LITERAL => {
  237|    635|                let mut language_buffer = [0; 16];
  238|    635|                self.read_exact(&mut language_buffer)?;
  239|    635|                let mut value_buffer = [0; 16];
  240|    635|                self.read_exact(&mut value_buffer)?;
  241|       |                Ok(EncodedTerm::SmallSmallLangStringLiteral {
  242|    635|                    value: SmallString::from_be_bytes(value_buffer)
  243|    635|                        .map_err(CorruptionError::new)?,
  244|    635|                    language: SmallString::from_be_bytes(language_buffer)
  245|    635|                        .map_err(CorruptionError::new)?,
  246|       |                })
  247|       |            }
  248|       |            TYPE_SMALL_BIG_LANG_STRING_LITERAL => {
  249|      0|                let mut language_buffer = [0; 16];
  250|      0|                self.read_exact(&mut language_buffer)?;
  251|      0|                let mut value_buffer = [0; 16];
  252|      0|                self.read_exact(&mut value_buffer)?;
  253|       |                Ok(EncodedTerm::SmallBigLangStringLiteral {
  254|      0|                    value: SmallString::from_be_bytes(value_buffer)
  255|      0|                        .map_err(CorruptionError::new)?,
  256|      0|                    language_id: StrHash::from_be_bytes(language_buffer),
  257|       |                })
  258|       |            }
  259|       |            TYPE_BIG_SMALL_LANG_STRING_LITERAL => {
  260|      0|                let mut language_buffer = [0; 16];
  261|      0|                self.read_exact(&mut language_buffer)?;
  262|      0|                let mut value_buffer = [0; 16];
  263|      0|                self.read_exact(&mut value_buffer)?;
  264|       |                Ok(EncodedTerm::BigSmallLangStringLiteral {
  265|      0|                    value_id: StrHash::from_be_bytes(value_buffer),
  266|      0|                    language: SmallString::from_be_bytes(language_buffer)
  267|      0|                        .map_err(CorruptionError::new)?,
  268|       |                })
  269|       |            }
  270|       |            TYPE_BIG_BIG_LANG_STRING_LITERAL => {
  271|      0|                let mut language_buffer = [0; 16];
  272|      0|                self.read_exact(&mut language_buffer)?;
  273|      0|                let mut value_buffer = [0; 16];
  274|      0|                self.read_exact(&mut value_buffer)?;
  275|      0|                Ok(EncodedTerm::BigBigLangStringLiteral {
  276|      0|                    value_id: StrHash::from_be_bytes(value_buffer),
  277|      0|                    language_id: StrHash::from_be_bytes(language_buffer),
  278|      0|                })
  279|       |            }
  280|       |            TYPE_SMALL_TYPED_LITERAL => {
  281|      0|                let mut datatype_buffer = [0; 16];
  282|      0|                self.read_exact(&mut datatype_buffer)?;
  283|      0|                let mut value_buffer = [0; 16];
  284|      0|                self.read_exact(&mut value_buffer)?;
  285|       |                Ok(EncodedTerm::SmallTypedLiteral {
  286|      0|                    datatype_id: StrHash::from_be_bytes(datatype_buffer),
  287|      0|                    value: SmallString::from_be_bytes(value_buffer)
  288|      0|                        .map_err(CorruptionError::new)?,
  289|       |                })
  290|       |            }
  291|       |            TYPE_BIG_TYPED_LITERAL => {
  292|      0|                let mut datatype_buffer = [0; 16];
  293|      0|                self.read_exact(&mut datatype_buffer)?;
  294|      0|                let mut value_buffer = [0; 16];
  295|      0|                self.read_exact(&mut value_buffer)?;
  296|      0|                Ok(EncodedTerm::BigTypedLiteral {
  297|      0|                    datatype_id: StrHash::from_be_bytes(datatype_buffer),
  298|      0|                    value_id: StrHash::from_be_bytes(value_buffer),
  299|      0|                })
  300|       |            }
  301|       |            TYPE_SMALL_STRING_LITERAL => {
  302|     78|                let mut buffer = [0; 16];
  303|     78|                self.read_exact(&mut buffer)?;
  304|       |                Ok(EncodedTerm::SmallStringLiteral(
  305|     78|                    SmallString::from_be_bytes(buffer).map_err(CorruptionError::new)?,
  306|       |                ))
  307|       |            }
  308|       |            TYPE_BIG_STRING_LITERAL => {
  309|      0|                let mut buffer = [0; 16];
  310|      0|                self.read_exact(&mut buffer)?;
  311|      0|                Ok(EncodedTerm::BigStringLiteral {
  312|      0|                    value_id: StrHash::from_be_bytes(buffer),
  313|      0|                })
  314|       |            }
  315|     44|            TYPE_BOOLEAN_LITERAL_TRUE => Ok(true.into()),
  316|    196|            TYPE_BOOLEAN_LITERAL_FALSE => Ok(false.into()),
  317|       |            TYPE_FLOAT_LITERAL => {
  318|      0|                let mut buffer = [0; 4];
  319|      0|                self.read_exact(&mut buffer)?;
  320|      0|                Ok(Float::from_be_bytes(buffer).into())
  321|       |            }
  322|       |            TYPE_DOUBLE_LITERAL => {
  323|     78|                let mut buffer = [0; 8];
  324|     78|                self.read_exact(&mut buffer)?;
  325|     78|                Ok(Double::from_be_bytes(buffer).into())
  326|       |            }
  327|       |            TYPE_INTEGER_LITERAL => {
  328|    262|                let mut buffer = [0; 8];
  329|    262|                self.read_exact(&mut buffer)?;
  330|    262|                Ok(Integer::from_be_bytes(buffer).into())
  331|       |            }
  332|       |            TYPE_DECIMAL_LITERAL => {
  333|    699|                let mut buffer = [0; 16];
  334|    699|                self.read_exact(&mut buffer)?;
  335|    699|                Ok(Decimal::from_be_bytes(buffer).into())
  336|       |            }
  337|       |            TYPE_DATE_TIME_LITERAL => {
  338|      0|                let mut buffer = [0; 18];
  339|      0|                self.read_exact(&mut buffer)?;
  340|      0|                Ok(DateTime::from_be_bytes(buffer).into())
  341|       |            }
  342|       |            TYPE_TIME_LITERAL => {
  343|      0|                let mut buffer = [0; 18];
  344|      0|                self.read_exact(&mut buffer)?;
  345|      0|                Ok(Time::from_be_bytes(buffer).into())
  346|       |            }
  347|       |            TYPE_DATE_LITERAL => {
  348|      0|                let mut buffer = [0; 18];
  349|      0|                self.read_exact(&mut buffer)?;
  350|      0|                Ok(Date::from_be_bytes(buffer).into())
  351|       |            }
  352|       |            TYPE_G_YEAR_MONTH_LITERAL => {
  353|      0|                let mut buffer = [0; 18];
  354|      0|                self.read_exact(&mut buffer)?;
  355|      0|                Ok(GYearMonth::from_be_bytes(buffer).into())
  356|       |            }
  357|       |            TYPE_G_YEAR_LITERAL => {
  358|      0|                let mut buffer = [0; 18];
  359|      0|                self.read_exact(&mut buffer)?;
  360|      0|                Ok(GYear::from_be_bytes(buffer).into())
  361|       |            }
  362|       |            TYPE_G_MONTH_DAY_LITERAL => {
  363|      0|                let mut buffer = [0; 18];
  364|      0|                self.read_exact(&mut buffer)?;
  365|      0|                Ok(GMonthDay::from_be_bytes(buffer).into())
  366|       |            }
  367|       |            TYPE_G_DAY_LITERAL => {
  368|      0|                let mut buffer = [0; 18];
  369|      0|                self.read_exact(&mut buffer)?;
  370|      0|                Ok(GDay::from_be_bytes(buffer).into())
  371|       |            }
  372|       |            TYPE_G_MONTH_LITERAL => {
  373|      0|                let mut buffer = [0; 18];
  374|      0|                self.read_exact(&mut buffer)?;
  375|      0|                Ok(GMonth::from_be_bytes(buffer).into())
  376|       |            }
  377|       |            TYPE_DURATION_LITERAL => {
  378|      0|                let mut buffer = [0; 24];
  379|      0|                self.read_exact(&mut buffer)?;
  380|      0|                Ok(Duration::from_be_bytes(buffer).into())
  381|       |            }
  382|       |            TYPE_YEAR_MONTH_DURATION_LITERAL => {
  383|      0|                let mut buffer = [0; 8];
  384|      0|                self.read_exact(&mut buffer)?;
  385|      0|                Ok(YearMonthDuration::from_be_bytes(buffer).into())
  386|       |            }
  387|       |            TYPE_DAY_TIME_DURATION_LITERAL => {
  388|      0|                let mut buffer = [0; 16];
  389|      0|                self.read_exact(&mut buffer)?;
  390|      0|                Ok(DayTimeDuration::from_be_bytes(buffer).into())
  391|       |            }
  392|       |            TYPE_TRIPLE => Ok(EncodedTriple {
  393|      0|                subject: self.read_term()?,
  394|      0|                predicate: self.read_term()?,
  395|      0|                object: self.read_term()?,
  396|       |            }
  397|      0|            .into()),
  398|      0|            _ => Err(CorruptionError::msg("the term buffer has an invalid type id").into()),
  399|       |        }
  400|  11.8k|    }
_RNvYRShNtNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder10TermReader14read_gpos_quadBb_:
  140|      7|    fn read_gpos_quad(&mut self) -> Result<EncodedQuad, StorageError> {
  141|      7|        let graph_name = self.read_term()?;
  142|      7|        let predicate = self.read_term()?;
  143|      7|        let object = self.read_term()?;
  144|      7|        let subject = self.read_term()?;
  145|      7|        Ok(EncodedQuad {
  146|      7|            subject,
  147|      7|            predicate,
  148|      7|            object,
  149|      7|            graph_name,
  150|      7|        })
  151|      7|    }
_RNvYRShNtNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder10TermReader14read_spog_quadBb_:
   88|      2|    fn read_spog_quad(&mut self) -> Result<EncodedQuad, StorageError> {
   89|      2|        let subject = self.read_term()?;
   90|      2|        let predicate = self.read_term()?;
   91|      2|        let object = self.read_term()?;
   92|      2|        let graph_name = self.read_term()?;
   93|      2|        Ok(EncodedQuad {
   94|      2|            subject,
   95|      2|            predicate,
   96|      2|            object,
   97|      2|            graph_name,
   98|      2|        })
   99|      2|    }
_RNvYRShNtNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder10TermReader14read_dspo_quadBb_:
  166|    462|    fn read_dspo_quad(&mut self) -> Result<EncodedQuad, StorageError> {
  167|    462|        let subject = self.read_term()?;
  168|    462|        let predicate = self.read_term()?;
  169|    462|        let object = self.read_term()?;
  170|    462|        Ok(EncodedQuad {
  171|    462|            subject,
  172|    462|            predicate,
  173|    462|            object,
  174|    462|            graph_name: EncodedTerm::DefaultGraph,
  175|    462|        })
  176|    462|    }
_RNvYRShNtNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder10TermReader14read_posg_quadBb_:
  101|      3|    fn read_posg_quad(&mut self) -> Result<EncodedQuad, StorageError> {
  102|      3|        let predicate = self.read_term()?;
  103|      3|        let object = self.read_term()?;
  104|      3|        let subject = self.read_term()?;
  105|      3|        let graph_name = self.read_term()?;
  106|      3|        Ok(EncodedQuad {
  107|      3|            subject,
  108|      3|            predicate,
  109|      3|            object,
  110|      3|            graph_name,
  111|      3|        })
  112|      3|    }
_RNvYRShNtNtNtCshC9BJcurWLf_8oxigraph7storage14binary_encoder10TermReader14read_dpos_quadBb_:
  178|      1|    fn read_dpos_quad(&mut self) -> Result<EncodedQuad, StorageError> {
  179|      1|        let predicate = self.read_term()?;
  180|      1|        let object = self.read_term()?;
  181|      1|        let subject = self.read_term()?;
  182|      1|        Ok(EncodedQuad {
  183|      1|            subject,
  184|      1|            predicate,
  185|      1|            object,
  186|      1|            graph_name: EncodedTerm::DefaultGraph,
  187|      1|        })
  188|      1|    }

_RNvXs7_NtNtCshC9BJcurWLf_8oxigraph7storage5errorNtB5_12StorageErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_15CorruptionErrorE4from:
    9|      2|#[derive(Debug, thiserror::Error)]
_RINvMs_NtNtCshC9BJcurWLf_8oxigraph7storage5errorNtB5_15CorruptionError3msgReEB9_:
   70|      2|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   71|      2|        Self(CorruptionErrorKind::Msg(msg.into()))
   72|      2|    }

_RINvMNtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB3_13MemoryStorage11transactionuNtNtNtB7_6sparql5error15EvaluationErrorNCINvMB5_NtB5_7Storage11transactionuB1h_NCINvMNtB7_5storeNtB2E_5Store10update_optNtNtCs9nhK3FOW46N_4core7convert10InfallibleNtNtB1l_7algebra6UpdateNtB1l_12QueryOptionsE0E0ECs6R6jWqmh3zm_18sparql_update_eval:
   67|  5.07k|    pub fn transaction<'a, 'b: 'a, T, E: Error + 'static + From<StorageError>>(
   68|  5.07k|        &'b self,
   69|  5.07k|        f: impl Fn(MemoryStorageWriter<'a>) -> Result<T, E>,
   70|  5.07k|    ) -> Result<T, E> {
   71|  5.07k|        f(MemoryStorageWriter {
   72|  5.07k|            content: Rc::new(RefCell::new(
   73|  5.07k|                self.content.write().map_err(poison_corruption_error)?,
   74|       |            )),
   75|  5.07k|            id2str: Arc::clone(&self.id2str),
   76|       |        })
   77|  5.07k|    }
_RNCNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB7_19MemoryStorageWriter11insert_term0Bb_:
  616|  8.70k|        insert_term(term, encoded, &mut |key, value| self.insert_str(key, value))
_RNCNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB7_19MemoryStorageWriter10insert_str0Bb_:
  625|  2.25k|            .or_insert_with(|| value.into())
_RINvMNtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB3_13MemoryStorage11transactionuNtNtB5_5error12StorageErrorNCINvMB5_NtB5_7Storage11transactionuB1h_NCINvMNtB7_5storeNtB2s_5Store11transactionuB1h_NCNvB2r_5clear0E0E0EB7_:
   67|  5.07k|    pub fn transaction<'a, 'b: 'a, T, E: Error + 'static + From<StorageError>>(
   68|  5.07k|        &'b self,
   69|  5.07k|        f: impl Fn(MemoryStorageWriter<'a>) -> Result<T, E>,
   70|  5.07k|    ) -> Result<T, E> {
   71|  5.07k|        f(MemoryStorageWriter {
   72|  5.07k|            content: Rc::new(RefCell::new(
   73|  5.07k|                self.content.write().map_err(poison_corruption_error)?,
   74|       |            )),
   75|  5.07k|            id2str: Arc::clone(&self.id2str),
   76|       |        })
   77|  5.07k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader10posg_quads:
  314|    440|    fn posg_quads(&self, prefix: Vec<u8>) -> MemoryDecodingQuadIterator {
  315|    440|        Self::inner_quads(&self.content().unwrap().posg, prefix, QuadEncoding::Posg)
  316|    440|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter14remove_encoded:
  638|  3.31k|    fn remove_encoded(&mut self, quad: &EncodedQuad) -> Result<bool, StorageError> {
  639|  3.31k|        let mut content = self.content.try_borrow_mut().map_err(borrow_mut_error)?;
  640|  3.31k|        let mut buffer = Vec::new();
  641|  3.31k|        Ok(if quad.graph_name.is_default_graph() {
  642|    144|            write_spo_quad(&mut buffer, quad);
  643|    144|            if content.dspo.remove(&buffer) {
  644|      0|                buffer.clear();
  645|      0|                write_pos_quad(&mut buffer, quad);
  646|      0|                content.dpos.remove(&buffer);
  647|      0|
  648|      0|                buffer.clear();
  649|      0|                write_osp_quad(&mut buffer, quad);
  650|      0|                content.dosp.remove(&buffer);
  651|      0|
  652|      0|                true
  653|       |            } else {
  654|    144|                false
  655|       |            }
  656|       |        } else {
  657|  3.17k|            write_spog_quad(&mut buffer, quad);
  658|  3.17k|            if content.spog.remove(&buffer) {
  659|     78|                buffer.clear();
  660|     78|                write_posg_quad(&mut buffer, quad);
  661|     78|                content.posg.remove(&buffer);
  662|     78|
  663|     78|                buffer.clear();
  664|     78|                write_ospg_quad(&mut buffer, quad);
  665|     78|                content.ospg.remove(&buffer);
  666|     78|
  667|     78|                buffer.clear();
  668|     78|                write_gspo_quad(&mut buffer, quad);
  669|     78|                content.gspo.remove(&buffer);
  670|     78|
  671|     78|                buffer.clear();
  672|     78|                write_gpos_quad(&mut buffer, quad);
  673|     78|                content.gpos.remove(&buffer);
  674|     78|
  675|     78|                buffer.clear();
  676|     78|                write_gosp_quad(&mut buffer, quad);
  677|     78|                content.gosp.remove(&buffer);
  678|     78|
  679|     78|                true
  680|       |            } else {
  681|  3.09k|                false
  682|       |            }
  683|       |        })
  684|  3.31k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader25quads_for_predicate_graph:
  256|  10.2k|    pub fn quads_for_predicate_graph(
  257|  10.2k|        &self,
  258|  10.2k|        predicate: &EncodedTerm,
  259|  10.2k|        graph_name: &EncodedTerm,
  260|  10.2k|    ) -> MemoryChainedDecodingQuadIterator {
  261|  10.2k|        MemoryChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  262|    973|            self.dpos_quads(encode_term(predicate))
  263|       |        } else {
  264|  9.25k|            self.gpos_quads(encode_term_pair(graph_name, predicate))
  265|       |        })
  266|  10.2k|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter23remove_all_named_graphs:
  754|     16|    pub fn remove_all_named_graphs(&mut self) -> Result<(), StorageError> {
  755|     16|        let mut content = self.content.try_borrow_mut().map_err(borrow_mut_error)?;
  756|     16|        content.gspo.clear();
  757|     16|        content.gpos.clear();
  758|     16|        content.gosp.clear();
  759|     16|        content.spog.clear();
  760|     16|        content.posg.clear();
  761|     16|        content.ospg.clear();
  762|     16|        content.graphs.clear();
  763|     16|        Ok(())
  764|     16|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter5clear:
  766|  5.23k|    pub fn clear(&mut self) -> Result<(), StorageError> {
  767|  5.23k|        {
  768|  5.23k|            let mut content = self.content.try_borrow_mut().map_err(borrow_mut_error)?;
  769|  5.23k|            content.dspo.clear();
  770|  5.23k|            content.dpos.clear();
  771|  5.23k|            content.dosp.clear();
  772|  5.23k|            content.gspo.clear();
  773|  5.23k|            content.gpos.clear();
  774|  5.23k|            content.gosp.clear();
  775|  5.23k|            content.spog.clear();
  776|  5.23k|            content.posg.clear();
  777|  5.23k|            content.ospg.clear();
  778|  5.23k|            content.graphs.clear();
  779|  5.23k|        }
  780|  5.23k|        self.id2str
  781|  5.23k|            .write()
  782|  5.23k|            .map_err(poison_corruption_error)?
  783|  5.23k|            .clear();
  784|  5.23k|        Ok(())
  785|  5.23k|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter6insert:
  518|  5.36k|    pub fn insert(&mut self, quad: QuadRef<'_>) -> Result<bool, StorageError> {
  519|  5.36k|        let encoded = quad.into();
  520|  5.36k|        Ok(if quad.graph_name.is_default_graph() {
  521|    480|            let mut buffer = Vec::new();
  522|    480|            write_spo_quad(&mut buffer, &encoded);
  523|    480|            if self.content.borrow_mut().dspo.insert(buffer) {
  524|    462|                let mut buffer = Vec::new();
  525|    462|                write_pos_quad(&mut buffer, &encoded);
  526|    462|                self.content.borrow_mut().dpos.insert(buffer);
  527|    462|
  528|    462|                let mut buffer = Vec::new();
  529|    462|                write_osp_quad(&mut buffer, &encoded);
  530|    462|                self.content.borrow_mut().dosp.insert(buffer);
  531|    462|
  532|    462|                self.insert_term(quad.subject.into(), &encoded.subject)?;
  533|    462|                self.insert_term(quad.predicate.into(), &encoded.predicate)?;
  534|    462|                self.insert_term(quad.object, &encoded.object)?;
  535|       |
  536|    462|                true
  537|       |            } else {
  538|     18|                false
  539|       |            }
  540|       |        } else {
  541|  4.88k|            let mut buffer = Vec::new();
  542|  4.88k|            write_spog_quad(&mut buffer, &encoded);
  543|  4.88k|            if self.content.borrow_mut().spog.insert(buffer) {
  544|  2.62k|                let mut buffer = Vec::new();
  545|  2.62k|                write_posg_quad(&mut buffer, &encoded);
  546|  2.62k|                self.content.borrow_mut().posg.insert(buffer);
  547|  2.62k|
  548|  2.62k|                let mut buffer = Vec::new();
  549|  2.62k|                write_ospg_quad(&mut buffer, &encoded);
  550|  2.62k|                self.content.borrow_mut().ospg.insert(buffer);
  551|  2.62k|
  552|  2.62k|                let mut buffer = Vec::new();
  553|  2.62k|                write_gspo_quad(&mut buffer, &encoded);
  554|  2.62k|                self.content.borrow_mut().gspo.insert(buffer);
  555|  2.62k|
  556|  2.62k|                let mut buffer = Vec::new();
  557|  2.62k|                write_gpos_quad(&mut buffer, &encoded);
  558|  2.62k|                self.content.borrow_mut().gpos.insert(buffer);
  559|  2.62k|
  560|  2.62k|                let mut buffer = Vec::new();
  561|  2.62k|                write_gosp_quad(&mut buffer, &encoded);
  562|  2.62k|                self.content.borrow_mut().gosp.insert(buffer);
  563|  2.62k|
  564|  2.62k|                self.insert_term(quad.subject.into(), &encoded.subject)?;
  565|  2.62k|                self.insert_term(quad.predicate.into(), &encoded.predicate)?;
  566|  2.62k|                self.insert_term(quad.object, &encoded.object)?;
  567|       |
  568|  2.62k|                if self
  569|  2.62k|                    .content
  570|  2.62k|                    .borrow_mut()
  571|  2.62k|                    .graphs
  572|  2.62k|                    .insert(encoded.graph_name.clone())
  573|       |                {
  574|  1.24k|                    match quad.graph_name {
  575|  1.24k|                        GraphNameRef::NamedNode(graph_name) => {
  576|  1.24k|                            self.insert_term(graph_name.into(), &encoded.graph_name)?;
  577|       |                        }
  578|      0|                        GraphNameRef::BlankNode(graph_name) => {
  579|      0|                            self.insert_term(graph_name.into(), &encoded.graph_name)?;
  580|       |                        }
  581|      0|                        GraphNameRef::DefaultGraph => (),
  582|       |                    }
  583|  1.38k|                }
  584|  2.62k|                true
  585|       |            } else {
  586|  2.25k|                false
  587|       |            }
  588|       |        })
  589|  5.36k|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter6remove:
  634|  3.24k|    pub fn remove(&mut self, quad: QuadRef<'_>) -> Result<bool, StorageError> {
  635|  3.24k|        self.remove_encoded(&quad.into())
  636|  3.24k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader10dosp_quads:
  342|    560|    fn dosp_quads(&self, prefix: Vec<u8>) -> MemoryDecodingQuadIterator {
  343|    560|        Self::inner_quads(&self.content().unwrap().dosp, prefix, QuadEncoding::Dosp)
  344|    560|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter26remove_encoded_named_graph:
  732|    632|    fn remove_encoded_named_graph(
  733|    632|        &mut self,
  734|    632|        graph_name: &EncodedTerm,
  735|    632|    ) -> Result<bool, StorageError> {
  736|    632|        Ok(
  737|    632|            if self
  738|    632|                .content
  739|    632|                .try_borrow_mut()
  740|    632|                .map_err(borrow_mut_error)?
  741|       |                .graphs
  742|    632|                .remove(graph_name)
  743|       |            {
  744|     12|                for quad in self.reader().quads_for_graph(graph_name) {
  745|     10|                    self.remove_encoded(&quad?)?;
  746|       |                }
  747|     12|                true
  748|       |            } else {
  749|    620|                false
  750|       |            },
  751|       |        )
  752|    632|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter22clear_all_named_graphs:
  700|     88|    pub fn clear_all_named_graphs(&mut self) -> Result<(), StorageError> {
  701|     88|        let mut content = self.content.try_borrow_mut().map_err(borrow_mut_error)?;
  702|     88|        content.gspo.clear();
  703|     88|        content.gpos.clear();
  704|     88|        content.gosp.clear();
  705|     88|        content.spog.clear();
  706|     88|        content.posg.clear();
  707|     88|        content.ospg.clear();
  708|     88|        Ok(())
  709|     88|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader10dpos_quads:
  338|  1.56k|    fn dpos_quads(&self, prefix: Vec<u8>) -> MemoryDecodingQuadIterator {
  339|  1.56k|        Self::inner_quads(&self.content().unwrap().dpos, prefix, QuadEncoding::Dpos)
  340|  1.56k|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter6reader:
  509|  6.45k|    pub fn reader(&self) -> MemoryStorageReader {
  510|  6.45k|        // SAFETY: This transmute is safe because we take a weak reference and the only Rc reference used is guarded by the lifetime.
  511|  6.45k|        let content = unsafe { transmute(&self.content) };
  512|  6.45k|        MemoryStorageReader {
  513|  6.45k|            content: MemoryStorageReaderContent::Transaction(Rc::downgrade(content)),
  514|  6.45k|            id2str: Arc::clone(&self.id2str),
  515|  6.45k|        }
  516|  6.45k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader5quads:
  120|  5.55k|    pub fn quads(&self) -> MemoryChainedDecodingQuadIterator {
  121|  5.55k|        MemoryChainedDecodingQuadIterator::pair(
  122|  5.55k|            self.dspo_quads(Vec::new()),
  123|  5.55k|            self.gspo_quads(Vec::new()),
  124|  5.55k|        )
  125|  5.55k|    }
_RNvMs2_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_33MemoryChainedDecodingQuadIterator3new:
  448|  30.3k|    fn new(first: MemoryDecodingQuadIterator) -> Self {
  449|  30.3k|        Self {
  450|  30.3k|            first,
  451|  30.3k|            second: None,
  452|  30.3k|        }
  453|  30.3k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader26quads_for_predicate_object:
  178|     98|    pub fn quads_for_predicate_object(
  179|     98|        &self,
  180|     98|        predicate: &EncodedTerm,
  181|     98|        object: &EncodedTerm,
  182|     98|    ) -> MemoryChainedDecodingQuadIterator {
  183|     98|        MemoryChainedDecodingQuadIterator::pair(
  184|     98|            self.dpos_quads(encode_term_pair(predicate, object)),
  185|     98|            self.posg_quads(encode_term_pair(predicate, object)),
  186|     98|        )
  187|     98|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader30quads_for_subject_object_graph:
  243|    153|    pub fn quads_for_subject_object_graph(
  244|    153|        &self,
  245|    153|        subject: &EncodedTerm,
  246|    153|        object: &EncodedTerm,
  247|    153|        graph_name: &EncodedTerm,
  248|    153|    ) -> MemoryChainedDecodingQuadIterator {
  249|    153|        MemoryChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  250|     54|            self.dosp_quads(encode_term_pair(object, subject))
  251|       |        } else {
  252|     99|            self.gosp_quads(encode_term_triple(graph_name, object, subject))
  253|       |        })
  254|    153|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter11insert_term:
  611|  10.7k|    fn insert_term(
  612|  10.7k|        &mut self,
  613|  10.7k|        term: TermRef<'_>,
  614|  10.7k|        encoded: &EncodedTerm,
  615|  10.7k|    ) -> Result<(), StorageError> {
  616|  10.7k|        insert_term(term, encoded, &mut |key, value| self.insert_str(key, value))
  617|  10.7k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader7content:
  389|  45.2k|    fn content<'a>(&'a self) -> Result<ContentRef<'a>, StorageError> {
  390|  45.2k|        Ok(match &self.content {
  391|  10.1k|            MemoryStorageReaderContent::Simple(reader) => {
  392|  10.1k|                ContentRef::Simple(reader.read().map_err(poison_corruption_error)?)
  393|       |            }
  394|  35.0k|            MemoryStorageReaderContent::Transaction(reader) => {
  395|  35.0k|                let Some(rc) = reader.upgrade() else {
  396|      0|                    return Err(StorageError::Other(
  397|      0|                        "The transaction is already ended".into(),
  398|      0|                    ));
  399|       |                };
  400|  35.0k|                let element: Ref<'_, _> = rc.as_ref().borrow();
  401|  35.0k|                // SAFETY: ok because we keep the Rc too inside of ContentRef
  402|  35.0k|                let element = unsafe { transmute::<_, Ref<'a, _>>(element) };
  403|  35.0k|                ContentRef::Transaction {
  404|  35.0k|                    _rc: Rc::clone(&rc),
  405|  35.0k|                    element,
  406|  35.0k|                }
  407|       |            }
  408|       |        })
  409|  45.2k|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter11clear_graph:
  686|    794|    pub fn clear_graph(&mut self, graph_name: GraphNameRef<'_>) -> Result<(), StorageError> {
  687|    794|        if graph_name.is_default_graph() {
  688|    708|            let mut content = self.content.try_borrow_mut().map_err(borrow_mut_error)?;
  689|    708|            content.dspo.clear();
  690|    708|            content.dpos.clear();
  691|    708|            content.dosp.clear();
  692|       |        } else {
  693|     86|            for quad in self.reader().quads_for_graph(&graph_name.into()) {
  694|     66|                self.remove_encoded(&quad?)?;
  695|       |            }
  696|       |        }
  697|    794|        Ok(())
  698|    794|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader24quads_for_subject_object:
  157|     86|    pub fn quads_for_subject_object(
  158|     86|        &self,
  159|     86|        subject: &EncodedTerm,
  160|     86|        object: &EncodedTerm,
  161|     86|    ) -> MemoryChainedDecodingQuadIterator {
  162|     86|        MemoryChainedDecodingQuadIterator::pair(
  163|     86|            self.dosp_quads(encode_term_pair(object, subject)),
  164|     86|            self.ospg_quads(encode_term_pair(object, subject)),
  165|     86|        )
  166|     86|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader10spog_quads:
  310|    438|    fn spog_quads(&self, prefix: Vec<u8>) -> MemoryDecodingQuadIterator {
  311|    438|        Self::inner_quads(&self.content().unwrap().spog, prefix, QuadEncoding::Spog)
  312|    438|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader10dspo_quads:
  334|  7.88k|    fn dspo_quads(&self, prefix: Vec<u8>) -> MemoryDecodingQuadIterator {
  335|  7.88k|        Self::inner_quads(&self.content().unwrap().dspo, prefix, QuadEncoding::Dspo)
  336|  7.88k|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter18insert_named_graph:
  591|    446|    pub fn insert_named_graph(
  592|    446|        &mut self,
  593|    446|        graph_name: NamedOrBlankNodeRef<'_>,
  594|    446|    ) -> Result<bool, StorageError> {
  595|    446|        let encoded_graph_name = EncodedTerm::from(graph_name);
  596|    446|        Ok(
  597|    446|            if self
  598|    446|                .content
  599|    446|                .borrow_mut()
  600|    446|                .graphs
  601|    446|                .insert(encoded_graph_name.clone())
  602|       |            {
  603|    206|                self.insert_term(graph_name.into(), &encoded_graph_name)?;
  604|    206|                true
  605|       |            } else {
  606|    240|                false
  607|       |            },
  608|       |        )
  609|    446|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader19quads_for_predicate:
  168|    342|    pub fn quads_for_predicate(
  169|    342|        &self,
  170|    342|        predicate: &EncodedTerm,
  171|    342|    ) -> MemoryChainedDecodingQuadIterator {
  172|    342|        MemoryChainedDecodingQuadIterator::pair(
  173|    342|            self.dpos_quads(encode_term(predicate)),
  174|    342|            self.posg_quads(encode_term(predicate)),
  175|    342|        )
  176|    342|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader40quads_for_subject_predicate_object_graph:
  229|    656|    pub fn quads_for_subject_predicate_object_graph(
  230|    656|        &self,
  231|    656|        subject: &EncodedTerm,
  232|    656|        predicate: &EncodedTerm,
  233|    656|        object: &EncodedTerm,
  234|    656|        graph_name: &EncodedTerm,
  235|    656|    ) -> MemoryChainedDecodingQuadIterator {
  236|    656|        MemoryChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  237|    160|            self.dspo_quads(encode_term_triple(subject, predicate, object))
  238|       |        } else {
  239|    496|            self.gspo_quads(encode_term_quad(graph_name, subject, predicate, object))
  240|       |        })
  241|    656|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader20contains_named_graph:
  306|  1.39k|    pub fn contains_named_graph(&self, graph_name: &EncodedTerm) -> Result<bool, StorageError> {
  307|  1.39k|        Ok(self.content()?.graphs.contains(graph_name))
  308|  1.39k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB2_13MemoryStorage8snapshot:
   60|  5.07k|    pub fn snapshot(&self) -> MemoryStorageReader {
   61|  5.07k|        MemoryStorageReader {
   62|  5.07k|            content: MemoryStorageReaderContent::Simple(Arc::clone(&self.content)),
   63|  5.07k|            id2str: Arc::clone(&self.id2str),
   64|  5.07k|        }
   65|  5.07k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader10gosp_quads:
  330|    975|    fn gosp_quads(&self, prefix: Vec<u8>) -> MemoryDecodingQuadIterator {
  331|    975|        Self::inner_quads(&self.content().unwrap().gosp, prefix, QuadEncoding::Gosp)
  332|    975|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader33quads_for_subject_predicate_graph:
  216|  1.24k|    pub fn quads_for_subject_predicate_graph(
  217|  1.24k|        &self,
  218|  1.24k|        subject: &EncodedTerm,
  219|  1.24k|        predicate: &EncodedTerm,
  220|  1.24k|        graph_name: &EncodedTerm,
  221|  1.24k|    ) -> MemoryChainedDecodingQuadIterator {
  222|  1.24k|        MemoryChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  223|    182|            self.dspo_quads(encode_term_pair(subject, predicate))
  224|       |        } else {
  225|  1.06k|            self.gspo_quads(encode_term_triple(graph_name, subject, predicate))
  226|       |        })
  227|  1.24k|    }
_RNvXs3_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_33MemoryChainedDecodingQuadIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
  466|  40.1k|    fn next(&mut self) -> Option<Self::Item> {
  467|  40.1k|        if let Some(result) = self.first.next() {
  468|    604|            Some(result)
  469|  39.5k|        } else if let Some(second) = self.second.as_mut() {
  470|  9.20k|            second.next()
  471|       |        } else {
  472|  30.3k|            None
  473|       |        }
  474|  40.1k|    }
_RNvXs4_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_26MemoryDecodingQuadIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
  485|  49.3k|    fn next(&mut self) -> Option<Self::Item> {
  486|  49.3k|        Some(self.encoding.decode(&self.iter.next()?))
  487|  49.3k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader34quads_for_subject_predicate_object:
  145|    145|    pub fn quads_for_subject_predicate_object(
  146|    145|        &self,
  147|    145|        subject: &EncodedTerm,
  148|    145|        predicate: &EncodedTerm,
  149|    145|        object: &EncodedTerm,
  150|    145|    ) -> MemoryChainedDecodingQuadIterator {
  151|    145|        MemoryChainedDecodingQuadIterator::pair(
  152|    145|            self.dspo_quads(encode_term_triple(subject, predicate, object)),
  153|    145|            self.spog_quads(encode_term_triple(subject, predicate, object)),
  154|    145|        )
  155|    145|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader23quads_for_subject_graph:
  204|    576|    pub fn quads_for_subject_graph(
  205|    576|        &self,
  206|    576|        subject: &EncodedTerm,
  207|    576|        graph_name: &EncodedTerm,
  208|    576|    ) -> MemoryChainedDecodingQuadIterator {
  209|    576|        MemoryChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  210|    110|            self.dspo_quads(encode_term(subject))
  211|       |        } else {
  212|    466|            self.gspo_quads(encode_term_pair(graph_name, subject))
  213|       |        })
  214|    576|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader22quads_for_object_graph:
  281|  1.08k|    pub fn quads_for_object_graph(
  282|  1.08k|        &self,
  283|  1.08k|        object: &EncodedTerm,
  284|  1.08k|        graph_name: &EncodedTerm,
  285|  1.08k|    ) -> MemoryChainedDecodingQuadIterator {
  286|  1.08k|        MemoryChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  287|    211|            self.dosp_quads(encode_term(object))
  288|       |        } else {
  289|    876|            self.gosp_quads(encode_term_pair(graph_name, object))
  290|       |        })
  291|  1.08k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB2_13MemoryStorage3new:
   42|      1|    pub fn new() -> Self {
   43|      1|        Self {
   44|      1|            content: Arc::new(RwLock::new(Content {
   45|      1|                spog: BTreeSet::new(),
   46|      1|                posg: BTreeSet::new(),
   47|      1|                ospg: BTreeSet::new(),
   48|      1|                gspo: BTreeSet::new(),
   49|      1|                gpos: BTreeSet::new(),
   50|      1|                gosp: BTreeSet::new(),
   51|      1|                dspo: BTreeSet::new(),
   52|      1|                dpos: BTreeSet::new(),
   53|      1|                dosp: BTreeSet::new(),
   54|      1|                graphs: HashSet::new(),
   55|      1|            })),
   56|      1|            id2str: Arc::new(RwLock::new(HashMap::new())),
   57|      1|        }
   58|      1|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader10gpos_quads:
  326|  11.2k|    fn gpos_quads(&self, prefix: Vec<u8>) -> MemoryDecodingQuadIterator {
  327|  11.2k|        Self::inner_quads(&self.content().unwrap().gpos, prefix, QuadEncoding::Gpos)
  328|  11.2k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader12contains_str:
  374|  14.0k|    pub fn contains_str(&self, key: &StrHash) -> Result<bool, StorageError> {
  375|  14.0k|        Ok(self
  376|  14.0k|            .id2str
  377|  14.0k|            .read()
  378|  14.0k|            .map_err(poison_corruption_error)?
  379|  14.0k|            .contains_key(key))
  380|  14.0k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader27quads_for_subject_predicate:
  134|    242|    pub fn quads_for_subject_predicate(
  135|    242|        &self,
  136|    242|        subject: &EncodedTerm,
  137|    242|        predicate: &EncodedTerm,
  138|    242|    ) -> MemoryChainedDecodingQuadIterator {
  139|    242|        MemoryChainedDecodingQuadIterator::pair(
  140|    242|            self.dspo_quads(encode_term_pair(subject, predicate)),
  141|    242|            self.spog_quads(encode_term_pair(subject, predicate)),
  142|    242|        )
  143|    242|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader15quads_for_graph:
  196|  14.2k|    pub fn quads_for_graph(&self, graph_name: &EncodedTerm) -> MemoryChainedDecodingQuadIterator {
  197|  14.2k|        MemoryChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  198|  1.43k|            self.dspo_quads(Vec::new())
  199|       |        } else {
  200|  12.8k|            self.gspo_quads(encode_term(graph_name))
  201|       |        })
  202|  14.2k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader32quads_for_predicate_object_graph:
  268|  2.17k|    pub fn quads_for_predicate_object_graph(
  269|  2.17k|        &self,
  270|  2.17k|        predicate: &EncodedTerm,
  271|  2.17k|        object: &EncodedTerm,
  272|  2.17k|        graph_name: &EncodedTerm,
  273|  2.17k|    ) -> MemoryChainedDecodingQuadIterator {
  274|  2.17k|        MemoryChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  275|    152|            self.dpos_quads(encode_term_pair(predicate, object))
  276|       |        } else {
  277|  2.02k|            self.gpos_quads(encode_term_triple(graph_name, predicate, object))
  278|       |        })
  279|  2.17k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader10ospg_quads:
  318|    295|    fn ospg_quads(&self, prefix: Vec<u8>) -> MemoryDecodingQuadIterator {
  319|    295|        Self::inner_quads(&self.content().unwrap().ospg, prefix, QuadEncoding::Ospg)
  320|    295|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter10insert_str:
  619|  8.70k|    fn insert_str(&mut self, key: &StrHash, value: &str) -> Result<(), StorageError> {
  620|  8.70k|        if self
  621|  8.70k|            .id2str
  622|  8.70k|            .write()
  623|  8.70k|            .map_err(poison_corruption_error)?
  624|  8.70k|            .entry(*key)
  625|  8.70k|            .or_insert_with(|| value.into())
  626|  8.70k|            == value
  627|       |        {
  628|  8.70k|            Ok(())
  629|       |        } else {
  630|      0|            Err(StorageError::Other("Hash conflict for two strings".into()))
  631|       |        }
  632|  8.70k|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter16clear_all_graphs:
  711|    306|    pub fn clear_all_graphs(&mut self) -> Result<(), StorageError> {
  712|    306|        let mut content = self.content.try_borrow_mut().map_err(borrow_mut_error)?;
  713|    306|        content.dspo.clear();
  714|    306|        content.dpos.clear();
  715|    306|        content.dosp.clear();
  716|    306|        content.gspo.clear();
  717|    306|        content.gpos.clear();
  718|    306|        content.gosp.clear();
  719|    306|        content.spog.clear();
  720|    306|        content.posg.clear();
  721|    306|        content.ospg.clear();
  722|    306|        Ok(())
  723|    306|    }
_RNvXs1_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_10ContentRefNtNtNtCs9nhK3FOW46N_4core3ops5deref5Deref5deref:
  434|  45.2k|    fn deref(&self) -> &Content {
  435|  45.2k|        match self {
  436|  10.1k|            ContentRef::Simple(r) => r,
  437|  35.0k|            ContentRef::Transaction { element, .. } => element,
  438|       |        }
  439|  45.2k|    }
_RNvMs6_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageWriter18remove_named_graph:
  725|    632|    pub fn remove_named_graph(
  726|    632|        &mut self,
  727|    632|        graph_name: NamedOrBlankNodeRef<'_>,
  728|    632|    ) -> Result<bool, StorageError> {
  729|    632|        self.remove_encoded_named_graph(&graph_name.into())
  730|    632|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader11inner_quads:
  346|  43.8k|    fn inner_quads(
  347|  43.8k|        set: &BTreeSet<Vec<u8>>,
  348|  43.8k|        prefix: Vec<u8>,
  349|  43.8k|        encoding: QuadEncoding,
  350|  43.8k|    ) -> MemoryDecodingQuadIterator {
  351|  43.8k|        let start = prefix.clone();
  352|  43.8k|
  353|  43.8k|        // We compute the end
  354|  43.8k|        let mut end = prefix;
  355|  43.8k|        let mut i = 1;
  356|  43.8k|        while i <= end.len() && end[end.len() - i] == u8::MAX {
  357|      0|            i += 1;
  358|      0|        }
  359|       |
  360|  43.8k|        let range = if i > end.len() {
  361|       |            // No end
  362|  12.5k|            set.range(start..)
  363|       |        } else {
  364|  31.2k|            let k = end.len() - i;
  365|  31.2k|            end[k] += 1;
  366|  31.2k|            set.range(start..end)
  367|       |        };
  368|  43.8k|        MemoryDecodingQuadIterator {
  369|  43.8k|            iter: range.cloned().collect::<Vec<_>>().into_iter(),
  370|  43.8k|            encoding,
  371|  43.8k|        }
  372|  43.8k|    }
_RNvXs0_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_19MemoryStorageReaderNtNtB7_15numeric_encoder9StrLookup7get_str:
  413|  9.35k|    fn get_str(&self, key: &StrHash) -> Result<Option<String>, StorageError> {
  414|  9.35k|        Ok(self
  415|  9.35k|            .id2str
  416|  9.35k|            .read()
  417|  9.35k|            .map_err(poison_corruption_error)?
  418|  9.35k|            .get(key)
  419|  9.35k|            .cloned())
  420|  9.35k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader10gspo_quads:
  322|  20.4k|    fn gspo_quads(&self, prefix: Vec<u8>) -> MemoryDecodingQuadIterator {
  323|  20.4k|        Self::inner_quads(&self.content().unwrap().gspo, prefix, QuadEncoding::Gspo)
  324|  20.4k|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader17quads_for_subject:
  127|     51|    pub fn quads_for_subject(&self, subject: &EncodedTerm) -> MemoryChainedDecodingQuadIterator {
  128|     51|        MemoryChainedDecodingQuadIterator::pair(
  129|     51|            self.dspo_quads(encode_term(subject)),
  130|     51|            self.spog_quads(encode_term(subject)),
  131|     51|        )
  132|     51|    }
_RNvMs_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB4_19MemoryStorageReader16quads_for_object:
  189|    209|    pub fn quads_for_object(&self, object: &EncodedTerm) -> MemoryChainedDecodingQuadIterator {
  190|    209|        MemoryChainedDecodingQuadIterator::pair(
  191|    209|            self.dosp_quads(encode_term(object)),
  192|    209|            self.ospg_quads(encode_term(object)),
  193|    209|        )
  194|    209|    }
_RNvMs2_NtNtCshC9BJcurWLf_8oxigraph7storage6memoryNtB5_33MemoryChainedDecodingQuadIterator4pair:
  455|  6.73k|    fn pair(first: MemoryDecodingQuadIterator, second: MemoryDecodingQuadIterator) -> Self {
  456|  6.73k|        Self {
  457|  6.73k|            first,
  458|  6.73k|            second: Some(second),
  459|  6.73k|        }
  460|  6.73k|    }

_RINvMNtCshC9BJcurWLf_8oxigraph7storageNtB3_7Storage11transactionuNtNtNtB5_6sparql5error15EvaluationErrorNCINvMNtB5_5storeNtB1K_5Store10update_optNtNtCs9nhK3FOW46N_4core7convert10InfallibleNtNtB15_7algebra6UpdateNtB15_12QueryOptionsE0ECs6R6jWqmh3zm_18sparql_update_eval:
  107|  5.07k|    pub fn transaction<'a, 'b: 'a, T, E: Error + 'static + From<StorageError>>(
  108|  5.07k|        &'b self,
  109|  5.07k|        f: impl Fn(StorageWriter<'a>) -> Result<T, E>,
  110|  5.07k|    ) -> Result<T, E> {
  111|  5.07k|        match &self.kind {
  112|  5.07k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  113|  5.07k|            StorageKind::RocksDb(storage) => storage.transaction(|transaction| {
  114|  5.07k|                f(StorageWriter {
  115|  5.07k|                    kind: StorageWriterKind::RocksDb(transaction),
  116|  5.07k|                })
  117|  5.07k|            }),
  118|  5.07k|            StorageKind::Memory(storage) => storage.transaction(|transaction| {
  119|       |                f(StorageWriter {
  120|       |                    kind: StorageWriterKind::Memory(transaction),
  121|       |                })
  122|  5.07k|            }),
  123|  5.07k|        }
  124|  5.07k|    }
_RNCINvMNtCshC9BJcurWLf_8oxigraph7storageNtB5_7Storage11transactionuNtNtNtB7_6sparql5error15EvaluationErrorNCINvMNtB7_5storeNtB1M_5Store10update_optNtNtCs9nhK3FOW46N_4core7convert10InfallibleNtNtB17_7algebra6UpdateNtB17_12QueryOptionsE0E0Cs6R6jWqmh3zm_18sparql_update_eval:
  118|  5.07k|            StorageKind::Memory(storage) => storage.transaction(|transaction| {
  119|  5.07k|                f(StorageWriter {
  120|  5.07k|                    kind: StorageWriterKind::Memory(transaction),
  121|  5.07k|                })
  122|  5.07k|            }),
_RNCINvMNtCshC9BJcurWLf_8oxigraph7storageNtB5_7Storage11transactionuNtNtB5_5error12StorageErrorNCINvMNtB7_5storeNtB1A_5Store11transactionuB13_NCNvB1z_5clear0E0E0B7_:
  118|  5.07k|            StorageKind::Memory(storage) => storage.transaction(|transaction| {
  119|  5.07k|                f(StorageWriter {
  120|  5.07k|                    kind: StorageWriterKind::Memory(transaction),
  121|  5.07k|                })
  122|  5.07k|            }),
_RINvMNtCshC9BJcurWLf_8oxigraph7storageNtB3_7Storage11transactionuNtNtB3_5error12StorageErrorNCINvMNtB5_5storeNtB1y_5Store11transactionuB11_NCNvB1x_5clear0E0EB5_:
  107|  5.07k|    pub fn transaction<'a, 'b: 'a, T, E: Error + 'static + From<StorageError>>(
  108|  5.07k|        &'b self,
  109|  5.07k|        f: impl Fn(StorageWriter<'a>) -> Result<T, E>,
  110|  5.07k|    ) -> Result<T, E> {
  111|  5.07k|        match &self.kind {
  112|  5.07k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  113|  5.07k|            StorageKind::RocksDb(storage) => storage.transaction(|transaction| {
  114|  5.07k|                f(StorageWriter {
  115|  5.07k|                    kind: StorageWriterKind::RocksDb(transaction),
  116|  5.07k|                })
  117|  5.07k|            }),
  118|  5.07k|            StorageKind::Memory(storage) => storage.transaction(|transaction| {
  119|       |                f(StorageWriter {
  120|       |                    kind: StorageWriterKind::Memory(transaction),
  121|       |                })
  122|  5.07k|            }),
  123|  5.07k|        }
  124|  5.07k|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader25quads_for_predicate_graph:
  495|  10.2k|    fn quads_for_predicate_graph(
  496|  10.2k|        &self,
  497|  10.2k|        predicate: &EncodedTerm,
  498|  10.2k|        graph_name: &EncodedTerm,
  499|  10.2k|    ) -> DecodingQuadIterator {
  500|  10.2k|        match &self.kind {
  501|  10.2k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  502|  10.2k|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  503|  10.2k|                kind: DecodingQuadIteratorKind::RocksDb(
  504|  10.2k|                    reader.quads_for_predicate_graph(predicate, graph_name),
  505|  10.2k|                ),
  506|  10.2k|            },
  507|  10.2k|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  508|  10.2k|                kind: DecodingQuadIteratorKind::Memory(
  509|  10.2k|                    reader.quads_for_predicate_graph(predicate, graph_name),
  510|  10.2k|                ),
  511|  10.2k|            },
  512|  10.2k|        }
  513|  10.2k|    }
_RNvMNtCshC9BJcurWLf_8oxigraph7storageNtB2_7Storage8snapshot:
   95|  5.07k|    pub fn snapshot(&self) -> StorageReader {
   96|  5.07k|        match &self.kind {
   97|  5.07k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
   98|  5.07k|            StorageKind::RocksDb(storage) => StorageReader {
   99|  5.07k|                kind: StorageReaderKind::RocksDb(storage.snapshot()),
  100|  5.07k|            },
  101|  5.07k|            StorageKind::Memory(storage) => StorageReader {
  102|  5.07k|                kind: StorageReaderKind::Memory(storage.snapshot()),
  103|  5.07k|            },
  104|  5.07k|        }
  105|  5.07k|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader34quads_for_subject_predicate_object:
  310|    145|    fn quads_for_subject_predicate_object(
  311|    145|        &self,
  312|    145|        subject: &EncodedTerm,
  313|    145|        predicate: &EncodedTerm,
  314|    145|        object: &EncodedTerm,
  315|    145|    ) -> DecodingQuadIterator {
  316|    145|        match &self.kind {
  317|    145|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  318|    145|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  319|    145|                kind: DecodingQuadIteratorKind::RocksDb(
  320|    145|                    reader.quads_for_subject_predicate_object(subject, predicate, object),
  321|    145|                ),
  322|    145|            },
  323|    145|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  324|    145|                kind: DecodingQuadIteratorKind::Memory(
  325|    145|                    reader.quads_for_subject_predicate_object(subject, predicate, object),
  326|    145|                ),
  327|    145|            },
  328|    145|        }
  329|    145|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader23quads_for_subject_graph:
  407|    576|    fn quads_for_subject_graph(
  408|    576|        &self,
  409|    576|        subject: &EncodedTerm,
  410|    576|        graph_name: &EncodedTerm,
  411|    576|    ) -> DecodingQuadIterator {
  412|    576|        match &self.kind {
  413|    576|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  414|    576|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  415|    576|                kind: DecodingQuadIteratorKind::RocksDb(
  416|    576|                    reader.quads_for_subject_graph(subject, graph_name),
  417|    576|                ),
  418|    576|            },
  419|    576|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  420|    576|                kind: DecodingQuadIteratorKind::Memory(
  421|    576|                    reader.quads_for_subject_graph(subject, graph_name),
  422|    576|                ),
  423|    576|            },
  424|    576|        }
  425|    576|    }
_RNvMs3_NtCshC9BJcurWLf_8oxigraph7storageNtB5_13StorageWriter11clear_graph:
  698|    794|    pub fn clear_graph(&mut self, graph_name: GraphNameRef<'_>) -> Result<(), StorageError> {
  699|    794|        match &mut self.kind {
  700|    794|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  701|    794|            StorageWriterKind::RocksDb(writer) => writer.clear_graph(graph_name),
  702|    794|            StorageWriterKind::Memory(writer) => writer.clear_graph(graph_name),
  703|    794|        }
  704|    794|    }
_RNvMs3_NtCshC9BJcurWLf_8oxigraph7storageNtB5_13StorageWriter18insert_named_graph:
  679|    446|    pub fn insert_named_graph(
  680|    446|        &mut self,
  681|    446|        graph_name: NamedOrBlankNodeRef<'_>,
  682|    446|    ) -> Result<bool, StorageError> {
  683|    446|        match &mut self.kind {
  684|    446|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  685|    446|            StorageWriterKind::RocksDb(writer) => writer.insert_named_graph(graph_name),
  686|    446|            StorageWriterKind::Memory(writer) => writer.insert_named_graph(graph_name),
  687|    446|        }
  688|    446|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader33quads_for_subject_predicate_graph:
  427|  1.24k|    fn quads_for_subject_predicate_graph(
  428|  1.24k|        &self,
  429|  1.24k|        subject: &EncodedTerm,
  430|  1.24k|        predicate: &EncodedTerm,
  431|  1.24k|        graph_name: &EncodedTerm,
  432|  1.24k|    ) -> DecodingQuadIterator {
  433|  1.24k|        match &self.kind {
  434|  1.24k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  435|  1.24k|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  436|  1.24k|                kind: DecodingQuadIteratorKind::RocksDb(
  437|  1.24k|                    reader.quads_for_subject_predicate_graph(subject, predicate, graph_name),
  438|  1.24k|                ),
  439|  1.24k|            },
  440|  1.24k|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  441|  1.24k|                kind: DecodingQuadIteratorKind::Memory(
  442|  1.24k|                    reader.quads_for_subject_predicate_graph(subject, predicate, graph_name),
  443|  1.24k|                ),
  444|  1.24k|            },
  445|  1.24k|        }
  446|  1.24k|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader5quads:
  266|  5.55k|    pub fn quads(&self) -> DecodingQuadIterator {
  267|  5.55k|        match &self.kind {
  268|  5.55k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  269|  5.55k|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  270|  5.55k|                kind: DecodingQuadIteratorKind::RocksDb(reader.quads()),
  271|  5.55k|            },
  272|  5.55k|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  273|  5.55k|                kind: DecodingQuadIteratorKind::Memory(reader.quads()),
  274|  5.55k|            },
  275|  5.55k|        }
  276|  5.55k|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader26quads_for_predicate_object:
  363|     98|    fn quads_for_predicate_object(
  364|     98|        &self,
  365|     98|        predicate: &EncodedTerm,
  366|     98|        object: &EncodedTerm,
  367|     98|    ) -> DecodingQuadIterator {
  368|     98|        match &self.kind {
  369|     98|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  370|     98|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  371|     98|                kind: DecodingQuadIteratorKind::RocksDb(
  372|     98|                    reader.quads_for_predicate_object(predicate, object),
  373|     98|                ),
  374|     98|            },
  375|     98|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  376|     98|                kind: DecodingQuadIteratorKind::Memory(
  377|     98|                    reader.quads_for_predicate_object(predicate, object),
  378|     98|                ),
  379|     98|            },
  380|     98|        }
  381|     98|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader30quads_for_subject_object_graph:
  474|    153|    fn quads_for_subject_object_graph(
  475|    153|        &self,
  476|    153|        subject: &EncodedTerm,
  477|    153|        object: &EncodedTerm,
  478|    153|        graph_name: &EncodedTerm,
  479|    153|    ) -> DecodingQuadIterator {
  480|    153|        match &self.kind {
  481|    153|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  482|    153|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  483|    153|                kind: DecodingQuadIteratorKind::RocksDb(
  484|    153|                    reader.quads_for_subject_object_graph(subject, object, graph_name),
  485|    153|                ),
  486|    153|            },
  487|    153|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  488|    153|                kind: DecodingQuadIteratorKind::Memory(
  489|    153|                    reader.quads_for_subject_object_graph(subject, object, graph_name),
  490|    153|                ),
  491|    153|            },
  492|    153|        }
  493|    153|    }
_RNvMNtCshC9BJcurWLf_8oxigraph7storageNtB2_7Storage13new_in_memory:
   55|      1|    pub fn new_in_memory() -> Result<Self, StorageError> {
   56|      1|        Ok(Self {
   57|      1|            kind: StorageKind::Memory(MemoryStorage::new()),
   58|      1|        })
   59|      1|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader27quads_for_subject_predicate:
  290|    242|    fn quads_for_subject_predicate(
  291|    242|        &self,
  292|    242|        subject: &EncodedTerm,
  293|    242|        predicate: &EncodedTerm,
  294|    242|    ) -> DecodingQuadIterator {
  295|    242|        match &self.kind {
  296|    242|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  297|    242|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  298|    242|                kind: DecodingQuadIteratorKind::RocksDb(
  299|    242|                    reader.quads_for_subject_predicate(subject, predicate),
  300|    242|                ),
  301|    242|            },
  302|    242|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  303|    242|                kind: DecodingQuadIteratorKind::Memory(
  304|    242|                    reader.quads_for_subject_predicate(subject, predicate),
  305|    242|                ),
  306|    242|            },
  307|    242|        }
  308|    242|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader15quads_for_graph:
  395|  14.1k|    fn quads_for_graph(&self, graph_name: &EncodedTerm) -> DecodingQuadIterator {
  396|  14.1k|        match &self.kind {
  397|  14.1k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  398|  14.1k|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  399|  14.1k|                kind: DecodingQuadIteratorKind::RocksDb(reader.quads_for_graph(graph_name)),
  400|  14.1k|            },
  401|  14.1k|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  402|  14.1k|                kind: DecodingQuadIteratorKind::Memory(reader.quads_for_graph(graph_name)),
  403|  14.1k|            },
  404|  14.1k|        }
  405|  14.1k|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader24quads_for_subject_object:
  331|     86|    fn quads_for_subject_object(
  332|     86|        &self,
  333|     86|        subject: &EncodedTerm,
  334|     86|        object: &EncodedTerm,
  335|     86|    ) -> DecodingQuadIterator {
  336|     86|        match &self.kind {
  337|     86|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  338|     86|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  339|     86|                kind: DecodingQuadIteratorKind::RocksDb(
  340|     86|                    reader.quads_for_subject_object(subject, object),
  341|     86|                ),
  342|     86|            },
  343|     86|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  344|     86|                kind: DecodingQuadIteratorKind::Memory(
  345|     86|                    reader.quads_for_subject_object(subject, object),
  346|     86|                ),
  347|     86|            },
  348|     86|        }
  349|     86|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader32quads_for_predicate_object_graph:
  515|  2.17k|    fn quads_for_predicate_object_graph(
  516|  2.17k|        &self,
  517|  2.17k|        predicate: &EncodedTerm,
  518|  2.17k|        object: &EncodedTerm,
  519|  2.17k|        graph_name: &EncodedTerm,
  520|  2.17k|    ) -> DecodingQuadIterator {
  521|  2.17k|        match &self.kind {
  522|  2.17k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  523|  2.17k|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  524|  2.17k|                kind: DecodingQuadIteratorKind::RocksDb(
  525|  2.17k|                    reader.quads_for_predicate_object_graph(predicate, object, graph_name),
  526|  2.17k|                ),
  527|  2.17k|            },
  528|  2.17k|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  529|  2.17k|                kind: DecodingQuadIteratorKind::Memory(
  530|  2.17k|                    reader.quads_for_predicate_object_graph(predicate, object, graph_name),
  531|  2.17k|                ),
  532|  2.17k|            },
  533|  2.17k|        }
  534|  2.17k|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader12contains_str:
  576|  14.0k|    pub fn contains_str(&self, key: &StrHash) -> Result<bool, StorageError> {
  577|  14.0k|        match &self.kind {
  578|  14.0k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  579|  14.0k|            StorageReaderKind::RocksDb(reader) => reader.contains_str(key),
  580|  14.0k|            StorageReaderKind::Memory(reader) => reader.contains_str(key),
  581|  14.0k|        }
  582|  14.0k|    }
_RNvXs0_NtCshC9BJcurWLf_8oxigraph7storageNtB5_20DecodingQuadIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
  607|  40.0k|    fn next(&mut self) -> Option<Self::Item> {
  608|  40.0k|        match &mut self.kind {
  609|  40.0k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  610|  40.0k|            DecodingQuadIteratorKind::RocksDb(iter) => iter.next(),
  611|  40.0k|            DecodingQuadIteratorKind::Memory(iter) => iter.next(),
  612|  40.0k|        }
  613|  40.0k|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader22quads_for_object_graph:
  536|  1.08k|    fn quads_for_object_graph(
  537|  1.08k|        &self,
  538|  1.08k|        object: &EncodedTerm,
  539|  1.08k|        graph_name: &EncodedTerm,
  540|  1.08k|    ) -> DecodingQuadIterator {
  541|  1.08k|        match &self.kind {
  542|  1.08k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  543|  1.08k|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  544|  1.08k|                kind: DecodingQuadIteratorKind::RocksDb(
  545|  1.08k|                    reader.quads_for_object_graph(object, graph_name),
  546|  1.08k|                ),
  547|  1.08k|            },
  548|  1.08k|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  549|  1.08k|                kind: DecodingQuadIteratorKind::Memory(
  550|  1.08k|                    reader.quads_for_object_graph(object, graph_name),
  551|  1.08k|                ),
  552|  1.08k|            },
  553|  1.08k|        }
  554|  1.08k|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader17quads_for_pattern:
  203|  37.0k|    pub fn quads_for_pattern(
  204|  37.0k|        &self,
  205|  37.0k|        subject: Option<&EncodedTerm>,
  206|  37.0k|        predicate: Option<&EncodedTerm>,
  207|  37.0k|        object: Option<&EncodedTerm>,
  208|  37.0k|        graph_name: Option<&EncodedTerm>,
  209|  37.0k|    ) -> DecodingQuadIterator {
  210|  37.0k|        match subject {
  211|  3.15k|            Some(subject) => match predicate {
  212|  2.28k|                Some(predicate) => match object {
  213|    801|                    Some(object) => match graph_name {
  214|    656|                        Some(graph_name) => self.quads_for_subject_predicate_object_graph(
  215|    656|                            subject, predicate, object, graph_name,
  216|    656|                        ),
  217|    145|                        None => self.quads_for_subject_predicate_object(subject, predicate, object),
  218|       |                    },
  219|  1.48k|                    None => match graph_name {
  220|  1.24k|                        Some(graph_name) => {
  221|  1.24k|                            self.quads_for_subject_predicate_graph(subject, predicate, graph_name)
  222|       |                        }
  223|    242|                        None => self.quads_for_subject_predicate(subject, predicate),
  224|       |                    },
  225|       |                },
  226|    866|                None => match object {
  227|    239|                    Some(object) => match graph_name {
  228|    153|                        Some(graph_name) => {
  229|    153|                            self.quads_for_subject_object_graph(subject, object, graph_name)
  230|       |                        }
  231|     86|                        None => self.quads_for_subject_object(subject, object),
  232|       |                    },
  233|    627|                    None => match graph_name {
  234|    576|                        Some(graph_name) => self.quads_for_subject_graph(subject, graph_name),
  235|     51|                        None => self.quads_for_subject(subject),
  236|       |                    },
  237|       |                },
  238|       |            },
  239|  33.8k|            None => match predicate {
  240|  12.8k|                Some(predicate) => match object {
  241|  2.27k|                    Some(object) => match graph_name {
  242|  2.17k|                        Some(graph_name) => {
  243|  2.17k|                            self.quads_for_predicate_object_graph(predicate, object, graph_name)
  244|       |                        }
  245|     98|                        None => self.quads_for_predicate_object(predicate, object),
  246|       |                    },
  247|  10.5k|                    None => match graph_name {
  248|  10.2k|                        Some(graph_name) => self.quads_for_predicate_graph(predicate, graph_name),
  249|    342|                        None => self.quads_for_predicate(predicate),
  250|       |                    },
  251|       |                },
  252|  21.0k|                None => match object {
  253|  1.29k|                    Some(object) => match graph_name {
  254|  1.08k|                        Some(graph_name) => self.quads_for_object_graph(object, graph_name),
  255|    209|                        None => self.quads_for_object(object),
  256|       |                    },
  257|  19.7k|                    None => match graph_name {
  258|  14.1k|                        Some(graph_name) => self.quads_for_graph(graph_name),
  259|  5.55k|                        None => self.quads(),
  260|       |                    },
  261|       |                },
  262|       |            },
  263|       |        }
  264|  37.0k|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader19quads_for_predicate:
  351|    342|    fn quads_for_predicate(&self, predicate: &EncodedTerm) -> DecodingQuadIterator {
  352|    342|        match &self.kind {
  353|    342|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  354|    342|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  355|    342|                kind: DecodingQuadIteratorKind::RocksDb(reader.quads_for_predicate(predicate)),
  356|    342|            },
  357|    342|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  358|    342|                kind: DecodingQuadIteratorKind::Memory(reader.quads_for_predicate(predicate)),
  359|    342|            },
  360|    342|        }
  361|    342|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader40quads_for_subject_predicate_object_graph:
  448|    656|    fn quads_for_subject_predicate_object_graph(
  449|    656|        &self,
  450|    656|        subject: &EncodedTerm,
  451|    656|        predicate: &EncodedTerm,
  452|    656|        object: &EncodedTerm,
  453|    656|        graph_name: &EncodedTerm,
  454|    656|    ) -> DecodingQuadIterator {
  455|    656|        match &self.kind {
  456|    656|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  457|    656|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  458|    656|                kind: DecodingQuadIteratorKind::RocksDb(
  459|    656|                    reader.quads_for_subject_predicate_object_graph(
  460|    656|                        subject, predicate, object, graph_name,
  461|    656|                    ),
  462|    656|                ),
  463|    656|            },
  464|    656|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  465|    656|                kind: DecodingQuadIteratorKind::Memory(
  466|    656|                    reader.quads_for_subject_predicate_object_graph(
  467|    656|                        subject, predicate, object, graph_name,
  468|    656|                    ),
  469|    656|                ),
  470|    656|            },
  471|    656|        }
  472|    656|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader20contains_named_graph:
  568|  1.39k|    pub fn contains_named_graph(&self, graph_name: &EncodedTerm) -> Result<bool, StorageError> {
  569|  1.39k|        match &self.kind {
  570|  1.39k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  571|  1.39k|            StorageReaderKind::RocksDb(reader) => reader.contains_named_graph(graph_name),
  572|  1.39k|            StorageReaderKind::Memory(reader) => reader.contains_named_graph(graph_name),
  573|  1.39k|        }
  574|  1.39k|    }
_RNvMNtCshC9BJcurWLf_8oxigraph7storageNtB2_7Storage3new:
   50|      1|    pub fn new() -> Result<Self, StorageError> {
   51|      1|        Self::new_in_memory()
   52|      1|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader16quads_for_object:
  383|    209|    fn quads_for_object(&self, object: &EncodedTerm) -> DecodingQuadIterator {
  384|    209|        match &self.kind {
  385|    209|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  386|    209|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  387|    209|                kind: DecodingQuadIteratorKind::RocksDb(reader.quads_for_object(object)),
  388|    209|            },
  389|    209|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  390|    209|                kind: DecodingQuadIteratorKind::Memory(reader.quads_for_object(object)),
  391|    209|            },
  392|    209|        }
  393|    209|    }
_RNvMs_NtCshC9BJcurWLf_8oxigraph7storageNtB4_13StorageReader17quads_for_subject:
  278|     51|    fn quads_for_subject(&self, subject: &EncodedTerm) -> DecodingQuadIterator {
  279|     51|        match &self.kind {
  280|     51|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  281|     51|            StorageReaderKind::RocksDb(reader) => DecodingQuadIterator {
  282|     51|                kind: DecodingQuadIteratorKind::RocksDb(reader.quads_for_subject(subject)),
  283|     51|            },
  284|     51|            StorageReaderKind::Memory(reader) => DecodingQuadIterator {
  285|     51|                kind: DecodingQuadIteratorKind::Memory(reader.quads_for_subject(subject)),
  286|     51|            },
  287|     51|        }
  288|     51|    }
_RNvXs2_NtCshC9BJcurWLf_8oxigraph7storageNtB5_13StorageReaderNtNtB5_15numeric_encoder9StrLookup7get_str:
  639|  9.35k|    fn get_str(&self, key: &StrHash) -> Result<Option<String>, StorageError> {
  640|  9.35k|        match &self.kind {
  641|  9.35k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  642|  9.35k|            StorageReaderKind::RocksDb(reader) => reader.get_str(key),
  643|  9.35k|            StorageReaderKind::Memory(reader) => reader.get_str(key),
  644|  9.35k|        }
  645|  9.35k|    }
_RNvMs3_NtCshC9BJcurWLf_8oxigraph7storageNtB5_13StorageWriter6reader:
  659|  6.35k|    pub fn reader(&self) -> StorageReader {
  660|  6.35k|        match &self.kind {
  661|  6.35k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  662|  6.35k|            StorageWriterKind::RocksDb(writer) => StorageReader {
  663|  6.35k|                kind: StorageReaderKind::RocksDb(writer.reader()),
  664|  6.35k|            },
  665|  6.35k|            StorageWriterKind::Memory(writer) => StorageReader {
  666|  6.35k|                kind: StorageReaderKind::Memory(writer.reader()),
  667|  6.35k|            },
  668|  6.35k|        }
  669|  6.35k|    }
_RNvMs3_NtCshC9BJcurWLf_8oxigraph7storageNtB5_13StorageWriter6remove:
  690|  3.24k|    pub fn remove(&mut self, quad: QuadRef<'_>) -> Result<bool, StorageError> {
  691|  3.24k|        match &mut self.kind {
  692|  3.24k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  693|  3.24k|            StorageWriterKind::RocksDb(writer) => writer.remove(quad),
  694|  3.24k|            StorageWriterKind::Memory(writer) => writer.remove(quad),
  695|  3.24k|        }
  696|  3.24k|    }
_RNvMs3_NtCshC9BJcurWLf_8oxigraph7storageNtB5_13StorageWriter22clear_all_named_graphs:
  706|     88|    pub fn clear_all_named_graphs(&mut self) -> Result<(), StorageError> {
  707|     88|        match &mut self.kind {
  708|     88|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  709|     88|            StorageWriterKind::RocksDb(writer) => writer.clear_all_named_graphs(),
  710|     88|            StorageWriterKind::Memory(writer) => writer.clear_all_named_graphs(),
  711|     88|        }
  712|     88|    }
_RNvMs3_NtCshC9BJcurWLf_8oxigraph7storageNtB5_13StorageWriter16clear_all_graphs:
  714|    306|    pub fn clear_all_graphs(&mut self) -> Result<(), StorageError> {
  715|    306|        match &mut self.kind {
  716|    306|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  717|    306|            StorageWriterKind::RocksDb(writer) => writer.clear_all_graphs(),
  718|    306|            StorageWriterKind::Memory(writer) => writer.clear_all_graphs(),
  719|    306|        }
  720|    306|    }
_RNvMs3_NtCshC9BJcurWLf_8oxigraph7storageNtB5_13StorageWriter6insert:
  671|  5.36k|    pub fn insert(&mut self, quad: QuadRef<'_>) -> Result<bool, StorageError> {
  672|  5.36k|        match &mut self.kind {
  673|  5.36k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  674|  5.36k|            StorageWriterKind::RocksDb(writer) => writer.insert(quad),
  675|  5.36k|            StorageWriterKind::Memory(writer) => writer.insert(quad),
  676|  5.36k|        }
  677|  5.36k|    }
_RNvMs3_NtCshC9BJcurWLf_8oxigraph7storageNtB5_13StorageWriter23remove_all_named_graphs:
  733|     16|    pub fn remove_all_named_graphs(&mut self) -> Result<(), StorageError> {
  734|     16|        match &mut self.kind {
  735|     16|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  736|     16|            StorageWriterKind::RocksDb(writer) => writer.remove_all_named_graphs(),
  737|     16|            StorageWriterKind::Memory(writer) => writer.remove_all_named_graphs(),
  738|     16|        }
  739|     16|    }
_RNvMs3_NtCshC9BJcurWLf_8oxigraph7storageNtB5_13StorageWriter5clear:
  741|  5.23k|    pub fn clear(&mut self) -> Result<(), StorageError> {
  742|  5.23k|        match &mut self.kind {
  743|  5.23k|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  744|  5.23k|            StorageWriterKind::RocksDb(writer) => writer.clear(),
  745|  5.23k|            StorageWriterKind::Memory(writer) => writer.clear(),
  746|  5.23k|        }
  747|  5.23k|    }
_RNvMs3_NtCshC9BJcurWLf_8oxigraph7storageNtB5_13StorageWriter18remove_named_graph:
  722|    632|    pub fn remove_named_graph(
  723|    632|        &mut self,
  724|    632|        graph_name: NamedOrBlankNodeRef<'_>,
  725|    632|    ) -> Result<bool, StorageError> {
  726|    632|        match &mut self.kind {
  727|    632|            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  728|    632|            StorageWriterKind::RocksDb(writer) => writer.remove_named_graph(graph_name),
  729|    632|            StorageWriterKind::Memory(writer) => writer.remove_named_graph(graph_name),
  730|    632|        }
  731|    632|    }

_RNvXsD_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB7_13StorageReaderNtB5_7Decoder11decode_termB9_:
  945|  11.1k|    fn decode_term(&self, encoded: &EncodedTerm) -> Result<Term, StorageError> {
  946|  11.1k|        match encoded {
  947|       |            EncodedTerm::DefaultGraph => {
  948|      0|                Err(CorruptionError::msg("The default graph tag is not a valid term").into())
  949|       |            }
  950|  9.28k|            EncodedTerm::NamedNode { iri_id } => {
  951|  9.28k|                Ok(NamedNode::new_unchecked(get_required_str(self, iri_id)?).into())
  952|       |            }
  953|      0|            EncodedTerm::NumericalBlankNode { id } => Ok(BlankNode::new_from_unique_id(*id).into()),
  954|      0|            EncodedTerm::SmallBlankNode(id) => Ok(BlankNode::new_unchecked(id.as_str()).into()),
  955|      0|            EncodedTerm::BigBlankNode { id_id } => {
  956|      0|                Ok(BlankNode::new_unchecked(get_required_str(self, id_id)?).into())
  957|       |            }
  958|     72|            EncodedTerm::SmallStringLiteral(value) => {
  959|     72|                Ok(Literal::new_simple_literal(*value).into())
  960|       |            }
  961|      0|            EncodedTerm::BigStringLiteral { value_id } => {
  962|      0|                Ok(Literal::new_simple_literal(get_required_str(self, value_id)?).into())
  963|       |            }
  964|    604|            EncodedTerm::SmallSmallLangStringLiteral { value, language } => {
  965|    604|                Ok(Literal::new_language_tagged_literal_unchecked(*value, *language).into())
  966|       |            }
  967|      0|            EncodedTerm::SmallBigLangStringLiteral { value, language_id } => {
  968|      0|                Ok(Literal::new_language_tagged_literal_unchecked(
  969|      0|                    *value,
  970|      0|                    get_required_str(self, language_id)?,
  971|       |                )
  972|      0|                .into())
  973|       |            }
  974|      0|            EncodedTerm::BigSmallLangStringLiteral { value_id, language } => {
  975|      0|                Ok(Literal::new_language_tagged_literal_unchecked(
  976|      0|                    get_required_str(self, value_id)?,
  977|      0|                    *language,
  978|      0|                )
  979|      0|                .into())
  980|       |            }
  981|       |            EncodedTerm::BigBigLangStringLiteral {
  982|      0|                value_id,
  983|      0|                language_id,
  984|      0|            } => Ok(Literal::new_language_tagged_literal_unchecked(
  985|      0|                get_required_str(self, value_id)?,
  986|      0|                get_required_str(self, language_id)?,
  987|       |            )
  988|      0|            .into()),
  989|      0|            EncodedTerm::SmallTypedLiteral { value, datatype_id } => {
  990|      0|                Ok(Literal::new_typed_literal(
  991|      0|                    *value,
  992|      0|                    NamedNode::new_unchecked(get_required_str(self, datatype_id)?),
  993|       |                )
  994|      0|                .into())
  995|       |            }
  996|       |            EncodedTerm::BigTypedLiteral {
  997|      0|                value_id,
  998|      0|                datatype_id,
  999|      0|            } => Ok(Literal::new_typed_literal(
 1000|      0|                get_required_str(self, value_id)?,
 1001|      0|                NamedNode::new_unchecked(get_required_str(self, datatype_id)?),
 1002|       |            )
 1003|      0|            .into()),
 1004|    224|            EncodedTerm::BooleanLiteral(value) => Ok(Literal::from(*value).into()),
 1005|      0|            EncodedTerm::FloatLiteral(value) => Ok(Literal::from(*value).into()),
 1006|     76|            EncodedTerm::DoubleLiteral(value) => Ok(Literal::from(*value).into()),
 1007|    260|            EncodedTerm::IntegerLiteral(value) => Ok(Literal::from(*value).into()),
 1008|    672|            EncodedTerm::DecimalLiteral(value) => Ok(Literal::from(*value).into()),
 1009|      0|            EncodedTerm::DateTimeLiteral(value) => Ok(Literal::from(*value).into()),
 1010|      0|            EncodedTerm::DateLiteral(value) => Ok(Literal::from(*value).into()),
 1011|      0|            EncodedTerm::TimeLiteral(value) => Ok(Literal::from(*value).into()),
 1012|      0|            EncodedTerm::GYearMonthLiteral(value) => Ok(Literal::from(*value).into()),
 1013|      0|            EncodedTerm::GYearLiteral(value) => Ok(Literal::from(*value).into()),
 1014|      0|            EncodedTerm::GMonthDayLiteral(value) => Ok(Literal::from(*value).into()),
 1015|      0|            EncodedTerm::GDayLiteral(value) => Ok(Literal::from(*value).into()),
 1016|      0|            EncodedTerm::GMonthLiteral(value) => Ok(Literal::from(*value).into()),
 1017|      0|            EncodedTerm::DurationLiteral(value) => Ok(Literal::from(*value).into()),
 1018|      0|            EncodedTerm::YearMonthDurationLiteral(value) => Ok(Literal::from(*value).into()),
 1019|      0|            EncodedTerm::DayTimeDurationLiteral(value) => Ok(Literal::from(*value).into()),
 1020|      0|            EncodedTerm::Triple(triple) => Ok(self.decode_triple(triple)?.into()),
 1021|       |        }
 1022|  11.1k|    }
_RNvYNtNtCshC9BJcurWLf_8oxigraph7storage13StorageReaderNtNtB4_15numeric_encoder7Decoder17decode_named_nodeB6_:
  893|  2.90k|    fn decode_named_node(&self, encoded: &EncodedTerm) -> Result<NamedNode, StorageError> {
  894|  2.90k|        match self.decode_term(encoded)? {
  895|  2.90k|            Term::NamedNode(named_node) => Ok(named_node),
  896|      0|            Term::BlankNode(_) => Err(CorruptionError::msg(
  897|      0|                "A blank node has been found instead of a named node",
  898|      0|            )
  899|      0|            .into()),
  900|       |            Term::Literal(_) => {
  901|      0|                Err(CorruptionError::msg("A literal has been found instead of a named node").into())
  902|       |            }
  903|       |            Term::Triple(_) => {
  904|      0|                Err(CorruptionError::msg("A triple has been found instead of a named node").into())
  905|       |            }
  906|       |        }
  907|  2.90k|    }
_RNvYNtNtCshC9BJcurWLf_8oxigraph7storage13StorageReaderNtNtB4_15numeric_encoder7Decoder11decode_quadB6_:
  917|  2.90k|    fn decode_quad(&self, encoded: &EncodedQuad) -> Result<Quad, StorageError> {
  918|  2.90k|        Ok(Quad::new(
  919|  2.90k|            self.decode_subject(&encoded.subject)?,
  920|  2.90k|            self.decode_named_node(&encoded.predicate)?,
  921|  2.90k|            self.decode_term(&encoded.object)?,
  922|  2.90k|            if encoded.graph_name == EncodedTerm::DefaultGraph {
  923|    444|                GraphName::DefaultGraph
  924|       |            } else {
  925|  2.46k|                match self.decode_term(&encoded.graph_name)? {
  926|  2.46k|                    Term::NamedNode(named_node) => named_node.into(),
  927|      0|                    Term::BlankNode(blank_node) => blank_node.into(),
  928|       |                    Term::Literal(_) => {
  929|      0|                        return Err(
  930|      0|                            CorruptionError::msg("A literal is not a valid graph name").into()
  931|      0|                        )
  932|       |                    }
  933|       |                    Term::Triple(_) => {
  934|      0|                        return Err(
  935|      0|                            CorruptionError::msg("A triple is not a valid graph name").into()
  936|      0|                        )
  937|       |                    }
  938|       |                }
  939|       |            },
  940|       |        ))
  941|  2.90k|    }
_RNvYNtNtCshC9BJcurWLf_8oxigraph7storage13StorageReaderNtNtB4_15numeric_encoder7Decoder14decode_subjectB6_:
  863|  2.90k|    fn decode_subject(&self, encoded: &EncodedTerm) -> Result<Subject, StorageError> {
  864|  2.90k|        match self.decode_term(encoded)? {
  865|  2.90k|            Term::NamedNode(named_node) => Ok(named_node.into()),
  866|      0|            Term::BlankNode(blank_node) => Ok(blank_node.into()),
  867|      0|            Term::Literal(_) => Err(CorruptionError::msg(
  868|      0|                "A literal has been found instead of a subject node",
  869|      0|            )
  870|      0|            .into()),
  871|      0|            Term::Triple(triple) => Ok(Subject::Triple(triple)),
  872|       |        }
  873|  2.90k|    }
_RNvXse_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes7decimal7DecimalE4from:
  400|    816|    fn from(value: Decimal) -> Self {
  401|    816|        Self::DecimalLiteral(value)
  402|    816|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB2_7StrHash11to_be_bytesB6_:
   36|   126k|    pub fn to_be_bytes(self) -> [u8; 16] {
   37|   126k|        self.hash.to_be_bytes()
   38|   126k|    }
_RNvXsr_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf10named_node12NamedNodeRefE4from:
  478|   109k|    fn from(named_node: NamedNodeRef<'_>) -> Self {
  479|   109k|        Self::NamedNode {
  480|   109k|            iri_id: StrHash::new(named_node.as_str()),
  481|   109k|        }
  482|   109k|    }
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoder16parse_double_str:
  801|  1.01k|pub fn parse_double_str(value: &str) -> Option<EncodedTerm> {
  802|  1.01k|    value.parse().map(EncodedTerm::DoubleLiteral).ok()
  803|  1.01k|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoder17parse_decimal_str:
  809|  1.90k|pub fn parse_decimal_str(value: &str) -> Option<EncodedTerm> {
  810|  1.90k|    value.parse().map(EncodedTerm::DecimalLiteral).ok()
  811|  1.90k|}
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoder17parse_integer_str:
  805|  2.02k|pub fn parse_integer_str(value: &str) -> Option<EncodedTerm> {
  806|  2.02k|    value.parse().map(EncodedTerm::IntegerLiteral).ok()
  807|  2.02k|}
_RNvXsH_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_7StrHashNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
   13|  80.3k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXsC_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedQuadINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf6triple7QuadRefE4from:
  692|  8.60k|    fn from(quad: QuadRef<'_>) -> Self {
  693|  8.60k|        Self {
  694|  8.60k|            subject: quad.subject.into(),
  695|  8.60k|            predicate: quad.predicate.into(),
  696|  8.60k|            object: quad.object.into(),
  697|  8.60k|            graph_name: quad.graph_name.into(),
  698|  8.60k|        }
  699|  8.60k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB2_7StrHash3new:
   20|   109k|    pub fn new(value: &str) -> Self {
   21|   109k|        let mut hasher = SipHasher24::new();
   22|   109k|        hasher.write(value.as_bytes());
   23|   109k|        Self {
   24|   109k|            hash: hasher.finish128().into(),
   25|   109k|        }
   26|   109k|    }
_RNvXsx_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf6triple12GraphNameRefE4from:
  625|  13.6k|    fn from(name: GraphNameRef<'_>) -> Self {
  626|  13.6k|        match name {
  627|  11.4k|            GraphNameRef::NamedNode(named_node) => named_node.into(),
  628|      0|            GraphNameRef::BlankNode(blank_node) => blank_node.into(),
  629|  2.17k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  630|       |        }
  631|  13.6k|    }
_RNvXsd_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes7integer7IntegerE4from:
  394|    419|    fn from(value: Integer) -> Self {
  395|    419|        Self::IntegerLiteral(value)
  396|    419|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB2_7StrHash13from_be_bytesB6_:
   29|  9.83k|    pub fn from_be_bytes(bytes: [u8; 16]) -> Self {
   30|  9.83k|        Self {
   31|  9.83k|            hash: u128::from_be_bytes(bytes),
   32|  9.83k|        }
   33|  9.83k|    }
_RNvXs3_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FrombE4from:
  334|    369|    fn from(value: bool) -> Self {
  335|    369|        Self::BooleanLiteral(value.into())
  336|    369|    }
_RNvXsv_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf6triple10SubjectRefE4from:
  604|  8.60k|    fn from(term: SubjectRef<'_>) -> Self {
  605|  8.60k|        match term {
  606|  8.60k|            SubjectRef::NamedNode(named_node) => named_node.into(),
  607|      0|            SubjectRef::BlankNode(blank_node) => blank_node.into(),
  608|      0|            SubjectRef::Triple(triple) => triple.as_ref().into(),
  609|       |        }
  610|  8.60k|    }
_RNvNtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoder17parse_boolean_str:
  793|  3.02k|pub fn parse_boolean_str(value: &str) -> Option<EncodedTerm> {
  794|  3.02k|    value.parse().map(EncodedTerm::BooleanLiteral).ok()
  795|  3.02k|}
_RNvMsB_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedQuad3new:
  676|     61|    pub fn new(
  677|     61|        subject: EncodedTerm,
  678|     61|        predicate: EncodedTerm,
  679|     61|        object: EncodedTerm,
  680|     61|        graph_name: EncodedTerm,
  681|     61|    ) -> Self {
  682|     61|        Self {
  683|     61|            subject,
  684|     61|            predicate,
  685|     61|            object,
  686|     61|            graph_name,
  687|     61|        }
  688|     61|    }
_RNvXs_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB4_11EncodedTermNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eq:
  102|  4.92k|    fn eq(&self, other: &Self) -> bool {
  103|  4.92k|        match (self, other) {
  104|    489|            (Self::DefaultGraph, Self::DefaultGraph) => true,
  105|  1.92k|            (Self::NamedNode { iri_id: iri_id_a }, Self::NamedNode { iri_id: iri_id_b }) => {
  106|  1.92k|                iri_id_a == iri_id_b
  107|       |            }
  108|      0|            (Self::NumericalBlankNode { id: id_a }, Self::NumericalBlankNode { id: id_b }) => {
  109|      0|                id_a == id_b
  110|       |            }
  111|      0|            (Self::SmallBlankNode(id_a), Self::SmallBlankNode(id_b)) => id_a == id_b,
  112|      0|            (Self::BigBlankNode { id_id: id_a }, Self::BigBlankNode { id_id: id_b }) => {
  113|      0|                id_a == id_b
  114|       |            }
  115|      1|            (Self::SmallStringLiteral(a), Self::SmallStringLiteral(b)) => a == b,
  116|       |            (
  117|       |                Self::BigStringLiteral {
  118|      0|                    value_id: value_id_a,
  119|      0|                },
  120|      0|                Self::BigStringLiteral {
  121|      0|                    value_id: value_id_b,
  122|      0|                },
  123|      0|            ) => value_id_a == value_id_b,
  124|       |            (
  125|       |                Self::SmallSmallLangStringLiteral {
  126|      0|                    value: value_a,
  127|      0|                    language: language_a,
  128|      0|                },
  129|      0|                Self::SmallSmallLangStringLiteral {
  130|      0|                    value: value_b,
  131|      0|                    language: language_b,
  132|      0|                },
  133|      0|            ) => value_a == value_b && language_a == language_b,
  134|       |            (
  135|       |                Self::SmallBigLangStringLiteral {
  136|      0|                    value: value_a,
  137|      0|                    language_id: language_id_a,
  138|      0|                },
  139|      0|                Self::SmallBigLangStringLiteral {
  140|      0|                    value: value_b,
  141|      0|                    language_id: language_id_b,
  142|      0|                },
  143|      0|            ) => value_a == value_b && language_id_a == language_id_b,
  144|       |            (
  145|       |                Self::BigSmallLangStringLiteral {
  146|      0|                    value_id: value_id_a,
  147|      0|                    language: language_a,
  148|      0|                },
  149|      0|                Self::BigSmallLangStringLiteral {
  150|      0|                    value_id: value_id_b,
  151|      0|                    language: language_b,
  152|      0|                },
  153|      0|            ) => value_id_a == value_id_b && language_a == language_b,
  154|       |            (
  155|       |                Self::BigBigLangStringLiteral {
  156|      0|                    value_id: value_id_a,
  157|      0|                    language_id: language_id_a,
  158|      0|                },
  159|      0|                Self::BigBigLangStringLiteral {
  160|      0|                    value_id: value_id_b,
  161|      0|                    language_id: language_id_b,
  162|      0|                },
  163|      0|            ) => value_id_a == value_id_b && language_id_a == language_id_b,
  164|       |            (
  165|       |                Self::SmallTypedLiteral {
  166|      0|                    value: value_a,
  167|      0|                    datatype_id: datatype_id_a,
  168|      0|                },
  169|      0|                Self::SmallTypedLiteral {
  170|      0|                    value: value_b,
  171|      0|                    datatype_id: datatype_id_b,
  172|      0|                },
  173|      0|            ) => value_a == value_b && datatype_id_a == datatype_id_b,
  174|       |            (
  175|       |                Self::BigTypedLiteral {
  176|      0|                    value_id: value_id_a,
  177|      0|                    datatype_id: datatype_id_a,
  178|      0|                },
  179|      0|                Self::BigTypedLiteral {
  180|      0|                    value_id: value_id_b,
  181|      0|                    datatype_id: datatype_id_b,
  182|      0|                },
  183|      0|            ) => value_id_a == value_id_b && datatype_id_a == datatype_id_b,
  184|      4|            (Self::BooleanLiteral(a), Self::BooleanLiteral(b)) => a == b,
  185|      0|            (Self::FloatLiteral(a), Self::FloatLiteral(b)) => a.is_identical_with(*b),
  186|      0|            (Self::DoubleLiteral(a), Self::DoubleLiteral(b)) => a.is_identical_with(*b),
  187|      4|            (Self::IntegerLiteral(a), Self::IntegerLiteral(b)) => a.is_identical_with(*b),
  188|      8|            (Self::DecimalLiteral(a), Self::DecimalLiteral(b)) => a.is_identical_with(*b),
  189|      0|            (Self::DateTimeLiteral(a), Self::DateTimeLiteral(b)) => a.is_identical_with(*b),
  190|      0|            (Self::TimeLiteral(a), Self::TimeLiteral(b)) => a.is_identical_with(*b),
  191|      0|            (Self::DateLiteral(a), Self::DateLiteral(b)) => a.is_identical_with(*b),
  192|      0|            (Self::GYearMonthLiteral(a), Self::GYearMonthLiteral(b)) => a.is_identical_with(*b),
  193|      0|            (Self::GYearLiteral(a), Self::GYearLiteral(b)) => a.is_identical_with(*b),
  194|      0|            (Self::GMonthDayLiteral(a), Self::GMonthDayLiteral(b)) => a.is_identical_with(*b),
  195|      0|            (Self::GMonthLiteral(a), Self::GMonthLiteral(b)) => a.is_identical_with(*b),
  196|      0|            (Self::GDayLiteral(a), Self::GDayLiteral(b)) => a.is_identical_with(*b),
  197|      0|            (Self::DurationLiteral(a), Self::DurationLiteral(b)) => a.is_identical_with(*b),
  198|      0|            (Self::YearMonthDurationLiteral(a), Self::YearMonthDurationLiteral(b)) => {
  199|      0|                a.is_identical_with(*b)
  200|       |            }
  201|      0|            (Self::DayTimeDurationLiteral(a), Self::DayTimeDurationLiteral(b)) => {
  202|      0|                a.is_identical_with(*b)
  203|       |            }
  204|      0|            (Self::Triple(a), Self::Triple(b)) => a == b,
  205|  2.49k|            (_, _) => false,
  206|       |        }
  207|  4.92k|    }
_RNvXsJ_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_7StrHashNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   13|  41.3k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXsw_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf6triple7TermRefE4from:
  614|  89.9k|    fn from(term: TermRef<'_>) -> Self {
  615|  89.9k|        match term {
  616|  78.4k|            TermRef::NamedNode(named_node) => named_node.into(),
  617|      0|            TermRef::BlankNode(blank_node) => blank_node.into(),
  618|  11.5k|            TermRef::Literal(literal) => literal.into(),
  619|      0|            TermRef::Triple(triple) => triple.as_ref().into(),
  620|       |        }
  621|  89.9k|    }
_RNvXsN_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   41|  88.7k|#[derive(Debug, Clone)]
_RNvXsc_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes6double6DoubleE4from:
  388|     78|    fn from(value: Double) -> Self {
  389|     78|        Self::DoubleLiteral(value)
  390|     78|    }
_RNvXsu_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf6triple19NamedOrBlankNodeRefE4from:
  595|  1.07k|    fn from(term: NamedOrBlankNodeRef<'_>) -> Self {
  596|  1.07k|        match term {
  597|  1.07k|            NamedOrBlankNodeRef::NamedNode(named_node) => named_node.into(),
  598|      0|            NamedOrBlankNodeRef::BlankNode(blank_node) => blank_node.into(),
  599|       |        }
  600|  1.07k|    }
_RNvXst_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf7literal10LiteralRefE4from:
  503|  11.5k|    fn from(literal: LiteralRef<'_>) -> Self {
  504|  11.5k|        let value = literal.value();
  505|  11.5k|        let datatype = literal.datatype().as_str();
  506|  11.5k|        let native_encoding = match datatype {
  507|  11.5k|            "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" => {
  508|  2.84k|                literal.language().map(|language| {
  509|       |                    if let Ok(value) = SmallString::try_from(value) {
  510|       |                        if let Ok(language) = SmallString::try_from(language) {
  511|       |                            Self::SmallSmallLangStringLiteral { value, language }
  512|       |                        } else {
  513|       |                            Self::SmallBigLangStringLiteral {
  514|       |                                value,
  515|       |                                language_id: StrHash::new(language),
  516|       |                            }
  517|       |                        }
  518|       |                    } else if let Ok(language) = SmallString::try_from(language) {
  519|       |                        Self::BigSmallLangStringLiteral {
  520|       |                            value_id: StrHash::new(value),
  521|       |                            language,
  522|       |                        }
  523|       |                    } else {
  524|       |                        Self::BigBigLangStringLiteral {
  525|       |                            value_id: StrHash::new(value),
  526|       |                            language_id: StrHash::new(language),
  527|       |                        }
  528|       |                    }
  529|  2.84k|                })
  530|       |            }
  531|  8.72k|            "http://www.w3.org/2001/XMLSchema#boolean" => parse_boolean_str(value),
  532|  5.70k|            "http://www.w3.org/2001/XMLSchema#string" => {
  533|    760|                Some(if let Ok(value) = SmallString::try_from(value) {
  534|    760|                    Self::SmallStringLiteral(value)
  535|       |                } else {
  536|      0|                    Self::BigStringLiteral {
  537|      0|                        value_id: StrHash::new(value),
  538|      0|                    }
  539|       |                })
  540|       |            }
  541|  4.94k|            "http://www.w3.org/2001/XMLSchema#float" => parse_float_str(value),
  542|  4.94k|            "http://www.w3.org/2001/XMLSchema#double" => parse_double_str(value),
  543|  3.92k|            "http://www.w3.org/2001/XMLSchema#integer"
  544|  1.90k|            | "http://www.w3.org/2001/XMLSchema#byte"
  545|  1.90k|            | "http://www.w3.org/2001/XMLSchema#short"
  546|  1.90k|            | "http://www.w3.org/2001/XMLSchema#int"
  547|  1.90k|            | "http://www.w3.org/2001/XMLSchema#long"
  548|  1.90k|            | "http://www.w3.org/2001/XMLSchema#unsignedByte"
  549|  1.90k|            | "http://www.w3.org/2001/XMLSchema#unsignedShort"
  550|  1.90k|            | "http://www.w3.org/2001/XMLSchema#unsignedInt"
  551|  1.90k|            | "http://www.w3.org/2001/XMLSchema#unsignedLong"
  552|  1.90k|            | "http://www.w3.org/2001/XMLSchema#positiveInteger"
  553|  1.90k|            | "http://www.w3.org/2001/XMLSchema#negativeInteger"
  554|  1.90k|            | "http://www.w3.org/2001/XMLSchema#nonPositiveInteger"
  555|  2.02k|            | "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" => parse_integer_str(value),
  556|  1.90k|            "http://www.w3.org/2001/XMLSchema#decimal" => parse_decimal_str(value),
  557|      0|            "http://www.w3.org/2001/XMLSchema#dateTime"
  558|      0|            | "http://www.w3.org/2001/XMLSchema#dateTimeStamp" => parse_date_time_str(value),
  559|      0|            "http://www.w3.org/2001/XMLSchema#time" => parse_time_str(value),
  560|      0|            "http://www.w3.org/2001/XMLSchema#date" => parse_date_str(value),
  561|      0|            "http://www.w3.org/2001/XMLSchema#gYearMonth" => parse_g_year_month_str(value),
  562|      0|            "http://www.w3.org/2001/XMLSchema#gYear" => parse_g_year_str(value),
  563|      0|            "http://www.w3.org/2001/XMLSchema#gMonthDay" => parse_g_month_day_str(value),
  564|      0|            "http://www.w3.org/2001/XMLSchema#gDay" => parse_g_day_str(value),
  565|      0|            "http://www.w3.org/2001/XMLSchema#gMonth" => parse_g_month_str(value),
  566|      0|            "http://www.w3.org/2001/XMLSchema#duration" => parse_duration_str(value),
  567|      0|            "http://www.w3.org/2001/XMLSchema#yearMonthDuration" => {
  568|      0|                parse_year_month_duration_str(value)
  569|       |            }
  570|      0|            "http://www.w3.org/2001/XMLSchema#dayTimeDuration" => {
  571|      0|                parse_day_time_duration_str(value)
  572|       |            }
  573|      0|            _ => None,
  574|       |        };
  575|  11.5k|        match native_encoding {
  576|  11.5k|            Some(term) => term,
  577|       |            None => {
  578|      0|                if let Ok(value) = SmallString::try_from(value) {
  579|      0|                    Self::SmallTypedLiteral {
  580|      0|                        value,
  581|      0|                        datatype_id: StrHash::new(datatype),
  582|      0|                    }
  583|       |                } else {
  584|      0|                    Self::BigTypedLiteral {
  585|      0|                        value_id: StrHash::new(value),
  586|      0|                        datatype_id: StrHash::new(datatype),
  587|      0|                    }
  588|       |                }
  589|       |            }
  590|       |        }
  591|  11.5k|    }
_RNvMs2_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB5_11EncodedTerm16is_default_graph:
  324|  63.9k|    pub fn is_default_graph(&self) -> bool {
  325|  63.9k|        matches!(self, Self::DefaultGraph)
  326|  63.9k|    }
_RNvYNtNtNtCshC9BJcurWLf_8oxigraph6sparql7dataset11DatasetViewNtNtNtB8_7storage15numeric_encoder7Decoder17decode_named_nodeB8_:
  893|     53|    fn decode_named_node(&self, encoded: &EncodedTerm) -> Result<NamedNode, StorageError> {
  894|     53|        match self.decode_term(encoded)? {
  895|     51|            Term::NamedNode(named_node) => Ok(named_node),
  896|      0|            Term::BlankNode(_) => Err(CorruptionError::msg(
  897|      0|                "A blank node has been found instead of a named node",
  898|      0|            )
  899|      0|            .into()),
  900|       |            Term::Literal(_) => {
  901|      2|                Err(CorruptionError::msg("A literal has been found instead of a named node").into())
  902|       |            }
  903|       |            Term::Triple(_) => {
  904|      0|                Err(CorruptionError::msg("A triple has been found instead of a named node").into())
  905|       |            }
  906|       |        }
  907|     53|    }
_RNvXsD_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtNtNtB9_6sparql7dataset11DatasetViewNtB5_7Decoder11decode_termB9_:
  945|    482|    fn decode_term(&self, encoded: &EncodedTerm) -> Result<Term, StorageError> {
  946|    482|        match encoded {
  947|       |            EncodedTerm::DefaultGraph => {
  948|      0|                Err(CorruptionError::msg("The default graph tag is not a valid term").into())
  949|       |            }
  950|    381|            EncodedTerm::NamedNode { iri_id } => {
  951|    381|                Ok(NamedNode::new_unchecked(get_required_str(self, iri_id)?).into())
  952|       |            }
  953|      0|            EncodedTerm::NumericalBlankNode { id } => Ok(BlankNode::new_from_unique_id(*id).into()),
  954|      0|            EncodedTerm::SmallBlankNode(id) => Ok(BlankNode::new_unchecked(id.as_str()).into()),
  955|      0|            EncodedTerm::BigBlankNode { id_id } => {
  956|      0|                Ok(BlankNode::new_unchecked(get_required_str(self, id_id)?).into())
  957|       |            }
  958|      5|            EncodedTerm::SmallStringLiteral(value) => {
  959|      5|                Ok(Literal::new_simple_literal(*value).into())
  960|       |            }
  961|      0|            EncodedTerm::BigStringLiteral { value_id } => {
  962|      0|                Ok(Literal::new_simple_literal(get_required_str(self, value_id)?).into())
  963|       |            }
  964|     26|            EncodedTerm::SmallSmallLangStringLiteral { value, language } => {
  965|     26|                Ok(Literal::new_language_tagged_literal_unchecked(*value, *language).into())
  966|       |            }
  967|      0|            EncodedTerm::SmallBigLangStringLiteral { value, language_id } => {
  968|      0|                Ok(Literal::new_language_tagged_literal_unchecked(
  969|      0|                    *value,
  970|      0|                    get_required_str(self, language_id)?,
  971|       |                )
  972|      0|                .into())
  973|       |            }
  974|      0|            EncodedTerm::BigSmallLangStringLiteral { value_id, language } => {
  975|      0|                Ok(Literal::new_language_tagged_literal_unchecked(
  976|      0|                    get_required_str(self, value_id)?,
  977|      0|                    *language,
  978|      0|                )
  979|      0|                .into())
  980|       |            }
  981|       |            EncodedTerm::BigBigLangStringLiteral {
  982|      0|                value_id,
  983|      0|                language_id,
  984|      0|            } => Ok(Literal::new_language_tagged_literal_unchecked(
  985|      0|                get_required_str(self, value_id)?,
  986|      0|                get_required_str(self, language_id)?,
  987|       |            )
  988|      0|            .into()),
  989|      0|            EncodedTerm::SmallTypedLiteral { value, datatype_id } => {
  990|      0|                Ok(Literal::new_typed_literal(
  991|      0|                    *value,
  992|      0|                    NamedNode::new_unchecked(get_required_str(self, datatype_id)?),
  993|       |                )
  994|      0|                .into())
  995|       |            }
  996|       |            EncodedTerm::BigTypedLiteral {
  997|      0|                value_id,
  998|      0|                datatype_id,
  999|      0|            } => Ok(Literal::new_typed_literal(
 1000|      0|                get_required_str(self, value_id)?,
 1001|      0|                NamedNode::new_unchecked(get_required_str(self, datatype_id)?),
 1002|       |            )
 1003|      0|            .into()),
 1004|     20|            EncodedTerm::BooleanLiteral(value) => Ok(Literal::from(*value).into()),
 1005|      0|            EncodedTerm::FloatLiteral(value) => Ok(Literal::from(*value).into()),
 1006|      4|            EncodedTerm::DoubleLiteral(value) => Ok(Literal::from(*value).into()),
 1007|     30|            EncodedTerm::IntegerLiteral(value) => Ok(Literal::from(*value).into()),
 1008|     16|            EncodedTerm::DecimalLiteral(value) => Ok(Literal::from(*value).into()),
 1009|      0|            EncodedTerm::DateTimeLiteral(value) => Ok(Literal::from(*value).into()),
 1010|      0|            EncodedTerm::DateLiteral(value) => Ok(Literal::from(*value).into()),
 1011|      0|            EncodedTerm::TimeLiteral(value) => Ok(Literal::from(*value).into()),
 1012|      0|            EncodedTerm::GYearMonthLiteral(value) => Ok(Literal::from(*value).into()),
 1013|      0|            EncodedTerm::GYearLiteral(value) => Ok(Literal::from(*value).into()),
 1014|      0|            EncodedTerm::GMonthDayLiteral(value) => Ok(Literal::from(*value).into()),
 1015|      0|            EncodedTerm::GDayLiteral(value) => Ok(Literal::from(*value).into()),
 1016|      0|            EncodedTerm::GMonthLiteral(value) => Ok(Literal::from(*value).into()),
 1017|      0|            EncodedTerm::DurationLiteral(value) => Ok(Literal::from(*value).into()),
 1018|      0|            EncodedTerm::YearMonthDurationLiteral(value) => Ok(Literal::from(*value).into()),
 1019|      0|            EncodedTerm::DayTimeDurationLiteral(value) => Ok(Literal::from(*value).into()),
 1020|      0|            EncodedTerm::Triple(triple) => Ok(self.decode_triple(triple)?.into()),
 1021|       |        }
 1022|    482|    }
_RINvNtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoder11insert_termNCINvMNtNtB6_6sparql7datasetNtB1b_11DatasetView11encode_termRNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeE0EB6_:
  706|  75.3k|pub fn insert_term<F: FnMut(&StrHash, &str) -> Result<(), StorageError>>(
  707|  75.3k|    term: TermRef<'_>,
  708|  75.3k|    encoded: &EncodedTerm,
  709|  75.3k|    insert_str: &mut F,
  710|  75.3k|) -> Result<(), StorageError> {
  711|  75.3k|    match term {
  712|  75.3k|        TermRef::NamedNode(node) => {
  713|  75.3k|            if let EncodedTerm::NamedNode { iri_id } = encoded {
  714|  75.3k|                insert_str(iri_id, node.as_str())
  715|       |            } else {
  716|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  717|       |            }
  718|       |        }
  719|      0|        TermRef::BlankNode(node) => match encoded {
  720|      0|            EncodedTerm::BigBlankNode { id_id } => insert_str(id_id, node.as_str()),
  721|      0|            EncodedTerm::SmallBlankNode(..) | EncodedTerm::NumericalBlankNode { .. } => Ok(()),
  722|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  723|       |        },
  724|      0|        TermRef::Literal(literal) => match encoded {
  725|      0|            EncodedTerm::BigStringLiteral { value_id }
  726|      0|            | EncodedTerm::BigSmallLangStringLiteral { value_id, .. } => {
  727|      0|                insert_str(value_id, literal.value())
  728|       |            }
  729|      0|            EncodedTerm::SmallBigLangStringLiteral { language_id, .. } => {
  730|      0|                if let Some(language) = literal.language() {
  731|      0|                    insert_str(language_id, language)
  732|       |                } else {
  733|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  734|       |                }
  735|       |            }
  736|       |            EncodedTerm::BigBigLangStringLiteral {
  737|      0|                value_id,
  738|      0|                language_id,
  739|      0|            } => {
  740|      0|                insert_str(value_id, literal.value())?;
  741|      0|                if let Some(language) = literal.language() {
  742|      0|                    insert_str(language_id, language)
  743|       |                } else {
  744|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  745|       |                }
  746|       |            }
  747|      0|            EncodedTerm::SmallTypedLiteral { datatype_id, .. } => {
  748|      0|                insert_str(datatype_id, literal.datatype().as_str())
  749|       |            }
  750|       |            EncodedTerm::BigTypedLiteral {
  751|      0|                value_id,
  752|      0|                datatype_id,
  753|      0|            } => {
  754|      0|                insert_str(value_id, literal.value())?;
  755|      0|                insert_str(datatype_id, literal.datatype().as_str())
  756|       |            }
  757|       |            EncodedTerm::SmallStringLiteral(..)
  758|       |            | EncodedTerm::SmallSmallLangStringLiteral { .. }
  759|       |            | EncodedTerm::BooleanLiteral(..)
  760|       |            | EncodedTerm::FloatLiteral(..)
  761|       |            | EncodedTerm::DoubleLiteral(..)
  762|       |            | EncodedTerm::IntegerLiteral(..)
  763|       |            | EncodedTerm::DecimalLiteral(..)
  764|       |            | EncodedTerm::DateTimeLiteral(..)
  765|       |            | EncodedTerm::TimeLiteral(..)
  766|       |            | EncodedTerm::DateLiteral(..)
  767|       |            | EncodedTerm::GYearMonthLiteral(..)
  768|       |            | EncodedTerm::GYearLiteral(..)
  769|       |            | EncodedTerm::GMonthDayLiteral(..)
  770|       |            | EncodedTerm::GDayLiteral(..)
  771|       |            | EncodedTerm::GMonthLiteral(..)
  772|       |            | EncodedTerm::DurationLiteral(..)
  773|       |            | EncodedTerm::YearMonthDurationLiteral(..)
  774|      0|            | EncodedTerm::DayTimeDurationLiteral(..) => Ok(()),
  775|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  776|       |        },
  777|      0|        TermRef::Triple(triple) => {
  778|      0|            if let EncodedTerm::Triple(encoded) = encoded {
  779|      0|                insert_term(triple.subject.as_ref().into(), &encoded.subject, insert_str)?;
  780|      0|                insert_term(
  781|      0|                    triple.predicate.as_ref().into(),
  782|      0|                    &encoded.predicate,
  783|      0|                    insert_str,
  784|      0|                )?;
  785|      0|                insert_term(triple.object.as_ref(), &encoded.object, insert_str)
  786|       |            } else {
  787|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  788|       |            }
  789|       |        }
  790|       |    }
  791|  75.3k|}
_RINvNtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoder16get_required_strNtB4_13StorageReaderEB6_:
 1025|  9.28k|fn get_required_str<L: StrLookup>(lookup: &L, id: &StrHash) -> Result<String, StorageError> {
 1026|  9.28k|    Ok(lookup.get_str(id)?.ok_or_else(|| {
 1027|       |        CorruptionError::new(format!(
 1028|       |            "Not able to find the string with id {id:?} in the string store"
 1029|       |        ))
 1030|  9.28k|    })?)
 1031|  9.28k|}
_RINvXsL_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB6_7StrHashNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEBa_:
   13|   106k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RINvNtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoder11insert_termNCINvMNtNtB6_6sparql7datasetNtB1b_11DatasetView11encode_termRNtNtCs2RvTzHk1J7L_5oxrdf7literal7LiteralE0EB6_:
  706|  6.01k|pub fn insert_term<F: FnMut(&StrHash, &str) -> Result<(), StorageError>>(
  707|  6.01k|    term: TermRef<'_>,
  708|  6.01k|    encoded: &EncodedTerm,
  709|  6.01k|    insert_str: &mut F,
  710|  6.01k|) -> Result<(), StorageError> {
  711|  6.01k|    match term {
  712|      0|        TermRef::NamedNode(node) => {
  713|      0|            if let EncodedTerm::NamedNode { iri_id } = encoded {
  714|      0|                insert_str(iri_id, node.as_str())
  715|       |            } else {
  716|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  717|       |            }
  718|       |        }
  719|      0|        TermRef::BlankNode(node) => match encoded {
  720|      0|            EncodedTerm::BigBlankNode { id_id } => insert_str(id_id, node.as_str()),
  721|      0|            EncodedTerm::SmallBlankNode(..) | EncodedTerm::NumericalBlankNode { .. } => Ok(()),
  722|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  723|       |        },
  724|  6.01k|        TermRef::Literal(literal) => match encoded {
  725|      0|            EncodedTerm::BigStringLiteral { value_id }
  726|      0|            | EncodedTerm::BigSmallLangStringLiteral { value_id, .. } => {
  727|      0|                insert_str(value_id, literal.value())
  728|       |            }
  729|      0|            EncodedTerm::SmallBigLangStringLiteral { language_id, .. } => {
  730|      0|                if let Some(language) = literal.language() {
  731|      0|                    insert_str(language_id, language)
  732|       |                } else {
  733|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  734|       |                }
  735|       |            }
  736|       |            EncodedTerm::BigBigLangStringLiteral {
  737|      0|                value_id,
  738|      0|                language_id,
  739|      0|            } => {
  740|      0|                insert_str(value_id, literal.value())?;
  741|      0|                if let Some(language) = literal.language() {
  742|      0|                    insert_str(language_id, language)
  743|       |                } else {
  744|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  745|       |                }
  746|       |            }
  747|      0|            EncodedTerm::SmallTypedLiteral { datatype_id, .. } => {
  748|      0|                insert_str(datatype_id, literal.datatype().as_str())
  749|       |            }
  750|       |            EncodedTerm::BigTypedLiteral {
  751|      0|                value_id,
  752|      0|                datatype_id,
  753|      0|            } => {
  754|      0|                insert_str(value_id, literal.value())?;
  755|      0|                insert_str(datatype_id, literal.datatype().as_str())
  756|       |            }
  757|       |            EncodedTerm::SmallStringLiteral(..)
  758|       |            | EncodedTerm::SmallSmallLangStringLiteral { .. }
  759|       |            | EncodedTerm::BooleanLiteral(..)
  760|       |            | EncodedTerm::FloatLiteral(..)
  761|       |            | EncodedTerm::DoubleLiteral(..)
  762|       |            | EncodedTerm::IntegerLiteral(..)
  763|       |            | EncodedTerm::DecimalLiteral(..)
  764|       |            | EncodedTerm::DateTimeLiteral(..)
  765|       |            | EncodedTerm::TimeLiteral(..)
  766|       |            | EncodedTerm::DateLiteral(..)
  767|       |            | EncodedTerm::GYearMonthLiteral(..)
  768|       |            | EncodedTerm::GYearLiteral(..)
  769|       |            | EncodedTerm::GMonthDayLiteral(..)
  770|       |            | EncodedTerm::GDayLiteral(..)
  771|       |            | EncodedTerm::GMonthLiteral(..)
  772|       |            | EncodedTerm::DurationLiteral(..)
  773|       |            | EncodedTerm::YearMonthDurationLiteral(..)
  774|  6.01k|            | EncodedTerm::DayTimeDurationLiteral(..) => Ok(()),
  775|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  776|       |        },
  777|      0|        TermRef::Triple(triple) => {
  778|      0|            if let EncodedTerm::Triple(encoded) = encoded {
  779|      0|                insert_term(triple.subject.as_ref().into(), &encoded.subject, insert_str)?;
  780|      0|                insert_term(
  781|      0|                    triple.predicate.as_ref().into(),
  782|      0|                    &encoded.predicate,
  783|      0|                    insert_str,
  784|      0|                )?;
  785|      0|                insert_term(triple.object.as_ref(), &encoded.object, insert_str)
  786|       |            } else {
  787|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  788|       |            }
  789|       |        }
  790|       |    }
  791|  6.01k|}
_RINvNtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoder11insert_termNCNvMs6_NtB4_6memoryNtB1d_19MemoryStorageWriter11insert_term0EB6_:
  706|  10.7k|pub fn insert_term<F: FnMut(&StrHash, &str) -> Result<(), StorageError>>(
  707|  10.7k|    term: TermRef<'_>,
  708|  10.7k|    encoded: &EncodedTerm,
  709|  10.7k|    insert_str: &mut F,
  710|  10.7k|) -> Result<(), StorageError> {
  711|  10.7k|    match term {
  712|  8.70k|        TermRef::NamedNode(node) => {
  713|  8.70k|            if let EncodedTerm::NamedNode { iri_id } = encoded {
  714|  8.70k|                insert_str(iri_id, node.as_str())
  715|       |            } else {
  716|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  717|       |            }
  718|       |        }
  719|      0|        TermRef::BlankNode(node) => match encoded {
  720|      0|            EncodedTerm::BigBlankNode { id_id } => insert_str(id_id, node.as_str()),
  721|      0|            EncodedTerm::SmallBlankNode(..) | EncodedTerm::NumericalBlankNode { .. } => Ok(()),
  722|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  723|       |        },
  724|  2.01k|        TermRef::Literal(literal) => match encoded {
  725|      0|            EncodedTerm::BigStringLiteral { value_id }
  726|      0|            | EncodedTerm::BigSmallLangStringLiteral { value_id, .. } => {
  727|      0|                insert_str(value_id, literal.value())
  728|       |            }
  729|      0|            EncodedTerm::SmallBigLangStringLiteral { language_id, .. } => {
  730|      0|                if let Some(language) = literal.language() {
  731|      0|                    insert_str(language_id, language)
  732|       |                } else {
  733|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  734|       |                }
  735|       |            }
  736|       |            EncodedTerm::BigBigLangStringLiteral {
  737|      0|                value_id,
  738|      0|                language_id,
  739|      0|            } => {
  740|      0|                insert_str(value_id, literal.value())?;
  741|      0|                if let Some(language) = literal.language() {
  742|      0|                    insert_str(language_id, language)
  743|       |                } else {
  744|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  745|       |                }
  746|       |            }
  747|      0|            EncodedTerm::SmallTypedLiteral { datatype_id, .. } => {
  748|      0|                insert_str(datatype_id, literal.datatype().as_str())
  749|       |            }
  750|       |            EncodedTerm::BigTypedLiteral {
  751|      0|                value_id,
  752|      0|                datatype_id,
  753|      0|            } => {
  754|      0|                insert_str(value_id, literal.value())?;
  755|      0|                insert_str(datatype_id, literal.datatype().as_str())
  756|       |            }
  757|       |            EncodedTerm::SmallStringLiteral(..)
  758|       |            | EncodedTerm::SmallSmallLangStringLiteral { .. }
  759|       |            | EncodedTerm::BooleanLiteral(..)
  760|       |            | EncodedTerm::FloatLiteral(..)
  761|       |            | EncodedTerm::DoubleLiteral(..)
  762|       |            | EncodedTerm::IntegerLiteral(..)
  763|       |            | EncodedTerm::DecimalLiteral(..)
  764|       |            | EncodedTerm::DateTimeLiteral(..)
  765|       |            | EncodedTerm::TimeLiteral(..)
  766|       |            | EncodedTerm::DateLiteral(..)
  767|       |            | EncodedTerm::GYearMonthLiteral(..)
  768|       |            | EncodedTerm::GYearLiteral(..)
  769|       |            | EncodedTerm::GMonthDayLiteral(..)
  770|       |            | EncodedTerm::GDayLiteral(..)
  771|       |            | EncodedTerm::GMonthLiteral(..)
  772|       |            | EncodedTerm::DurationLiteral(..)
  773|       |            | EncodedTerm::YearMonthDurationLiteral(..)
  774|  2.01k|            | EncodedTerm::DayTimeDurationLiteral(..) => Ok(()),
  775|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  776|       |        },
  777|      0|        TermRef::Triple(triple) => {
  778|      0|            if let EncodedTerm::Triple(encoded) = encoded {
  779|      0|                insert_term(triple.subject.as_ref().into(), &encoded.subject, insert_str)?;
  780|      0|                insert_term(
  781|      0|                    triple.predicate.as_ref().into(),
  782|      0|                    &encoded.predicate,
  783|      0|                    insert_str,
  784|      0|                )?;
  785|      0|                insert_term(triple.object.as_ref(), &encoded.object, insert_str)
  786|       |            } else {
  787|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  788|       |            }
  789|       |        }
  790|       |    }
  791|  10.7k|}
_RINvNtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoder16get_required_strNtNtNtB6_6sparql7dataset11DatasetViewEB6_:
 1025|    381|fn get_required_str<L: StrLookup>(lookup: &L, id: &StrHash) -> Result<String, StorageError> {
 1026|    381|    Ok(lookup.get_str(id)?.ok_or_else(|| {
 1027|       |        CorruptionError::new(format!(
 1028|       |            "Not able to find the string with id {id:?} in the string store"
 1029|       |        ))
 1030|    381|    })?)
 1031|    381|}
_RINvNtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoder11insert_termNCINvMNtNtB6_6sparql7datasetNtB1b_11DatasetView11encode_termNtNtCs2RvTzHk1J7L_5oxrdf10named_node12NamedNodeRefE0EB6_:
  706|      2|pub fn insert_term<F: FnMut(&StrHash, &str) -> Result<(), StorageError>>(
  707|      2|    term: TermRef<'_>,
  708|      2|    encoded: &EncodedTerm,
  709|      2|    insert_str: &mut F,
  710|      2|) -> Result<(), StorageError> {
  711|      2|    match term {
  712|      2|        TermRef::NamedNode(node) => {
  713|      2|            if let EncodedTerm::NamedNode { iri_id } = encoded {
  714|      2|                insert_str(iri_id, node.as_str())
  715|       |            } else {
  716|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  717|       |            }
  718|       |        }
  719|      0|        TermRef::BlankNode(node) => match encoded {
  720|      0|            EncodedTerm::BigBlankNode { id_id } => insert_str(id_id, node.as_str()),
  721|      0|            EncodedTerm::SmallBlankNode(..) | EncodedTerm::NumericalBlankNode { .. } => Ok(()),
  722|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  723|       |        },
  724|      0|        TermRef::Literal(literal) => match encoded {
  725|      0|            EncodedTerm::BigStringLiteral { value_id }
  726|      0|            | EncodedTerm::BigSmallLangStringLiteral { value_id, .. } => {
  727|      0|                insert_str(value_id, literal.value())
  728|       |            }
  729|      0|            EncodedTerm::SmallBigLangStringLiteral { language_id, .. } => {
  730|      0|                if let Some(language) = literal.language() {
  731|      0|                    insert_str(language_id, language)
  732|       |                } else {
  733|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  734|       |                }
  735|       |            }
  736|       |            EncodedTerm::BigBigLangStringLiteral {
  737|      0|                value_id,
  738|      0|                language_id,
  739|      0|            } => {
  740|      0|                insert_str(value_id, literal.value())?;
  741|      0|                if let Some(language) = literal.language() {
  742|      0|                    insert_str(language_id, language)
  743|       |                } else {
  744|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  745|       |                }
  746|       |            }
  747|      0|            EncodedTerm::SmallTypedLiteral { datatype_id, .. } => {
  748|      0|                insert_str(datatype_id, literal.datatype().as_str())
  749|       |            }
  750|       |            EncodedTerm::BigTypedLiteral {
  751|      0|                value_id,
  752|      0|                datatype_id,
  753|      0|            } => {
  754|      0|                insert_str(value_id, literal.value())?;
  755|      0|                insert_str(datatype_id, literal.datatype().as_str())
  756|       |            }
  757|       |            EncodedTerm::SmallStringLiteral(..)
  758|       |            | EncodedTerm::SmallSmallLangStringLiteral { .. }
  759|       |            | EncodedTerm::BooleanLiteral(..)
  760|       |            | EncodedTerm::FloatLiteral(..)
  761|       |            | EncodedTerm::DoubleLiteral(..)
  762|       |            | EncodedTerm::IntegerLiteral(..)
  763|       |            | EncodedTerm::DecimalLiteral(..)
  764|       |            | EncodedTerm::DateTimeLiteral(..)
  765|       |            | EncodedTerm::TimeLiteral(..)
  766|       |            | EncodedTerm::DateLiteral(..)
  767|       |            | EncodedTerm::GYearMonthLiteral(..)
  768|       |            | EncodedTerm::GYearLiteral(..)
  769|       |            | EncodedTerm::GMonthDayLiteral(..)
  770|       |            | EncodedTerm::GDayLiteral(..)
  771|       |            | EncodedTerm::GMonthLiteral(..)
  772|       |            | EncodedTerm::DurationLiteral(..)
  773|       |            | EncodedTerm::YearMonthDurationLiteral(..)
  774|      0|            | EncodedTerm::DayTimeDurationLiteral(..) => Ok(()),
  775|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  776|       |        },
  777|      0|        TermRef::Triple(triple) => {
  778|      0|            if let EncodedTerm::Triple(encoded) = encoded {
  779|      0|                insert_term(triple.subject.as_ref().into(), &encoded.subject, insert_str)?;
  780|      0|                insert_term(
  781|      0|                    triple.predicate.as_ref().into(),
  782|      0|                    &encoded.predicate,
  783|      0|                    insert_str,
  784|      0|                )?;
  785|      0|                insert_term(triple.object.as_ref(), &encoded.object, insert_str)
  786|       |            } else {
  787|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  788|       |            }
  789|       |        }
  790|       |    }
  791|      2|}
_RNCNvXst_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB7_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf7literal10LiteralRefE4from0Bb_:
  508|  2.84k|                literal.language().map(|language| {
  509|  2.84k|                    if let Ok(value) = SmallString::try_from(value) {
  510|  2.84k|                        if let Ok(language) = SmallString::try_from(language) {
  511|  2.84k|                            Self::SmallSmallLangStringLiteral { value, language }
  512|       |                        } else {
  513|      0|                            Self::SmallBigLangStringLiteral {
  514|      0|                                value,
  515|      0|                                language_id: StrHash::new(language),
  516|      0|                            }
  517|       |                        }
  518|      0|                    } else if let Ok(language) = SmallString::try_from(language) {
  519|      0|                        Self::BigSmallLangStringLiteral {
  520|      0|                            value_id: StrHash::new(value),
  521|      0|                            language,
  522|      0|                        }
  523|       |                    } else {
  524|      0|                        Self::BigBigLangStringLiteral {
  525|      0|                            value_id: StrHash::new(value),
  526|      0|                            language_id: StrHash::new(language),
  527|      0|                        }
  528|       |                    }
  529|  2.84k|                })
_RINvXs1_NtNtCshC9BJcurWLf_8oxigraph7storage15numeric_encoderNtB6_11EncodedTermNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEBa_:
  213|  4.65k|    fn hash<H: Hasher>(&self, state: &mut H) {
  214|  4.65k|        match self {
  215|  4.52k|            Self::NamedNode { iri_id } => iri_id.hash(state),
  216|      0|            Self::NumericalBlankNode { id } => id.hash(state),
  217|      0|            Self::SmallBlankNode(id) => id.hash(state),
  218|      0|            Self::BigBlankNode { id_id } => id_id.hash(state),
  219|      0|            Self::DefaultGraph => (),
  220|     16|            Self::SmallStringLiteral(value) => value.hash(state),
  221|      0|            Self::BigStringLiteral { value_id } => value_id.hash(state),
  222|     32|            Self::SmallSmallLangStringLiteral { value, language } => {
  223|     32|                value.hash(state);
  224|     32|                language.hash(state);
  225|     32|            }
  226|      0|            Self::SmallBigLangStringLiteral { value, language_id } => {
  227|      0|                value.hash(state);
  228|      0|                language_id.hash(state);
  229|      0|            }
  230|      0|            Self::BigSmallLangStringLiteral { value_id, language } => {
  231|      0|                value_id.hash(state);
  232|      0|                language.hash(state);
  233|      0|            }
  234|       |            Self::BigBigLangStringLiteral {
  235|      0|                value_id,
  236|      0|                language_id,
  237|      0|            } => {
  238|      0|                value_id.hash(state);
  239|      0|                language_id.hash(state);
  240|      0|            }
  241|      0|            Self::SmallTypedLiteral { value, datatype_id } => {
  242|      0|                value.hash(state);
  243|      0|                datatype_id.hash(state);
  244|      0|            }
  245|       |            Self::BigTypedLiteral {
  246|      0|                value_id,
  247|      0|                datatype_id,
  248|      0|            } => {
  249|      0|                value_id.hash(state);
  250|      0|                datatype_id.hash(state);
  251|      0|            }
  252|     38|            Self::BooleanLiteral(value) => value.hash(state),
  253|      0|            Self::FloatLiteral(value) => value.to_be_bytes().hash(state),
  254|      4|            Self::DoubleLiteral(value) => value.to_be_bytes().hash(state),
  255|     22|            Self::IntegerLiteral(value) => value.hash(state),
  256|     20|            Self::DecimalLiteral(value) => value.hash(state),
  257|      0|            Self::DateTimeLiteral(value) => value.hash(state),
  258|      0|            Self::TimeLiteral(value) => value.hash(state),
  259|      0|            Self::DateLiteral(value) => value.hash(state),
  260|      0|            Self::GYearMonthLiteral(value) => value.hash(state),
  261|      0|            Self::GYearLiteral(value) => value.hash(state),
  262|      0|            Self::GMonthDayLiteral(value) => value.hash(state),
  263|      0|            Self::GDayLiteral(value) => value.hash(state),
  264|      0|            Self::GMonthLiteral(value) => value.hash(state),
  265|      0|            Self::DurationLiteral(value) => value.hash(state),
  266|      0|            Self::YearMonthDurationLiteral(value) => value.hash(state),
  267|      0|            Self::DayTimeDurationLiteral(value) => value.hash(state),
  268|      0|            Self::Triple(value) => value.hash(state),
  269|       |        }
  270|  4.65k|    }

_RINvXs8_NtNtCshC9BJcurWLf_8oxigraph7storage12small_stringNtB6_11SmallStringNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEBa_:
  124|     80|    fn hash<H: Hasher>(&self, state: &mut H) {
  125|     80|        self.as_str().hash(state)
  126|     80|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph7storage12small_stringNtB2_11SmallString11to_be_bytesB6_:
   57|  10.9k|    pub fn to_be_bytes(self) -> [u8; 16] {
   58|  10.9k|        self.inner
   59|  10.9k|    }
_RNvXsd_NtNtCshC9BJcurWLf_8oxigraph7storage12small_stringNtB5_11SmallStringNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
    9|    975|#[derive(Clone, Copy, Default)]
_RNvMNtNtCshC9BJcurWLf_8oxigraph7storage12small_stringNtB2_11SmallString13from_be_bytesB6_:
   27|  1.34k|    pub fn from_be_bytes(bytes: [u8; 16]) -> Result<Self, BadSmallStringError> {
   28|  1.34k|        // We check that it is valid UTF-8
   29|  1.34k|        str::from_utf8(&bytes.as_ref()[..bytes[15].into()])
   30|  1.34k|            .map_err(BadSmallStringError::BadUtf8)?;
   31|  1.34k|        Ok(Self { inner: bytes })
   32|  1.34k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph7storage12small_stringNtB2_11SmallString3lenB6_:
   35|  1.42k|    pub fn len(&self) -> usize {
   36|  1.42k|        self.inner[15].into()
   37|  1.42k|    }
_RNvXsb_NtNtCshC9BJcurWLf_8oxigraph7storage12small_stringNtB5_11SmallStringNtNtNtCs9nhK3FOW46N_4core3str6traits7FromStr8from_strB9_:
  147|  6.45k|    fn from_str(value: &str) -> Result<Self, Self::Err> {
  148|  6.45k|        if value.len() <= 15 {
  149|  6.45k|            let mut inner = [0; 16];
  150|  6.45k|            inner[..value.len()].copy_from_slice(value.as_bytes());
  151|  6.45k|            inner[15] = value
  152|  6.45k|                .len()
  153|  6.45k|                .try_into()
  154|  6.45k|                .map_err(|_| Self::Err::TooLong(value.len()))?;
  155|  6.45k|            Ok(Self { inner })
  156|       |        } else {
  157|      0|            Err(Self::Err::TooLong(value.len()))
  158|       |        }
  159|  6.45k|    }
_RNvXs4_NtNtCshC9BJcurWLf_8oxigraph7storage12small_stringNtB5_11SmallStringNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
  101|      1|    fn eq(&self, other: &Self) -> bool {
  102|      1|        self.as_str() == other.as_str()
  103|      1|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph7storage12small_stringNtB2_11SmallString6as_strB6_:
   46|  1.41k|    pub fn as_str(&self) -> &str {
   47|  1.41k|        // SAFETY: safe because we ensured it in constructors
   48|  1.41k|        unsafe { str::from_utf8_unchecked(self.as_bytes()) }
   49|  1.41k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph7storage12small_stringNtB2_11SmallString8as_bytesB6_:
   52|  1.41k|    pub fn as_bytes(&self) -> &[u8] {
   53|  1.41k|        &self.inner[..self.len()]
   54|  1.41k|    }
_RNvMNtNtCshC9BJcurWLf_8oxigraph7storage12small_stringNtB2_11SmallString8is_emptyB6_:
   40|      3|    pub fn is_empty(&self) -> bool {
   41|      3|        self.len() == 0
   42|      3|    }
_RNvXsc_NtNtCshC9BJcurWLf_8oxigraph7storage12small_stringNtB5_11SmallStringINtNtCs9nhK3FOW46N_4core7convert7TryFromReE8try_fromB9_:
  166|  6.45k|    fn try_from(value: &'a str) -> Result<Self, Self::Error> {
  167|  6.45k|        Self::from_str(value)
  168|  6.45k|    }
_RNvXs9_NtNtCshC9BJcurWLf_8oxigraph7storage12small_stringNtNtCsjOdcKtOMjJI_5alloc6string6StringINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_11SmallStringE4fromB9_:
  131|  1.33k|    fn from(value: SmallString) -> Self {
  132|  1.33k|        value.as_str().into()
  133|  1.33k|    }

_RINvMNtCshC9BJcurWLf_8oxigraph5storeNtB3_5Store10update_optNtNtCs9nhK3FOW46N_4core7convert10InfallibleNtNtNtB5_6sparql7algebra6UpdateNtB1G_12QueryOptionsECs6R6jWqmh3zm_18sparql_update_eval:
  456|  5.07k|    pub fn update_opt(
  457|  5.07k|        &self,
  458|  5.07k|        update: impl TryInto<Update, Error = impl Into<EvaluationError>>,
  459|  5.07k|        options: impl Into<UpdateOptions>,
  460|  5.07k|    ) -> Result<(), EvaluationError> {
  461|  5.07k|        let update = update.try_into().map_err(Into::into)?;
  462|  5.07k|        let options = options.into();
  463|  5.07k|        self.storage
  464|  5.07k|            .transaction(|mut t| evaluate_update(&mut t, &update, &options))
  465|  5.07k|    }
_RNCINvMNtCshC9BJcurWLf_8oxigraph5storeNtB5_5Store10update_optNtNtCs9nhK3FOW46N_4core7convert10InfallibleNtNtNtB7_6sparql7algebra6UpdateNtB1I_12QueryOptionsE0Cs6R6jWqmh3zm_18sparql_update_eval:
  464|  5.07k|            .transaction(|mut t| evaluate_update(&mut t, &update, &options))
_RNCINvMNtCshC9BJcurWLf_8oxigraph5storeNtB5_5Store11transactionuNtNtNtB7_7storage5error12StorageErrorNCNvB4_5clear0E0B7_:
  411|  5.07k|        self.storage.transaction(|writer| f(Transaction { writer }))
_RINvMNtCshC9BJcurWLf_8oxigraph5storeNtB3_5Store11transactionuNtNtNtB5_7storage5error12StorageErrorNCNvB2_5clear0EB5_:
  407|  5.07k|    pub fn transaction<'a, 'b: 'a, T, E: Error + 'static + From<StorageError>>(
  408|  5.07k|        &'b self,
  409|  5.07k|        f: impl Fn(Transaction<'a>) -> Result<T, E>,
  410|  5.07k|    ) -> Result<T, E> {
  411|  5.07k|        self.storage.transaction(|writer| f(Transaction { writer }))
  412|  5.07k|    }
_RNCNvMNtCshC9BJcurWLf_8oxigraph5storeNtB4_5Store5clear0B6_:
  932|  5.07k|        self.transaction(|mut t| t.clear())
_RNvMNtCshC9BJcurWLf_8oxigraph5storeNtB2_5Store3new:
   89|      1|    pub fn new() -> Result<Self, StorageError> {
   90|      1|        Ok(Self {
   91|      1|            storage: Storage::new()?,
   92|       |        })
   93|      1|    }
_RNvMNtCshC9BJcurWLf_8oxigraph5storeNtB2_5Store4iter:
  317|  5.07k|    pub fn iter(&self) -> QuadIter {
  318|  5.07k|        self.quads_for_pattern(None, None, None, None)
  319|  5.07k|    }
_RNvMNtCshC9BJcurWLf_8oxigraph5storeNtB2_5Store5clear:
  931|  5.07k|    pub fn clear(&self) -> Result<(), StorageError> {
  932|  5.07k|        self.transaction(|mut t| t.clear())
  933|  5.07k|    }
_RNvXs3_NtCshC9BJcurWLf_8oxigraph5storeNtB5_8QuadIterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 1550|  7.97k|    fn next(&mut self) -> Option<Self::Item> {
 1551|  7.97k|        Some(match self.iter.next()? {
 1552|  2.90k|            Ok(quad) => self.reader.decode_quad(&quad),
 1553|      0|            Err(error) => Err(error),
 1554|       |        })
 1555|  7.97k|    }
_RNvMNtCshC9BJcurWLf_8oxigraph5storeNtB2_5Store17quads_for_pattern:
  279|  5.07k|    pub fn quads_for_pattern(
  280|  5.07k|        &self,
  281|  5.07k|        subject: Option<SubjectRef<'_>>,
  282|  5.07k|        predicate: Option<NamedNodeRef<'_>>,
  283|  5.07k|        object: Option<TermRef<'_>>,
  284|  5.07k|        graph_name: Option<GraphNameRef<'_>>,
  285|  5.07k|    ) -> QuadIter {
  286|  5.07k|        let reader = self.storage.snapshot();
  287|  5.07k|        QuadIter {
  288|  5.07k|            iter: reader.quads_for_pattern(
  289|  5.07k|                subject.map(EncodedTerm::from).as_ref(),
  290|  5.07k|                predicate.map(EncodedTerm::from).as_ref(),
  291|  5.07k|                object.map(EncodedTerm::from).as_ref(),
  292|  5.07k|                graph_name.map(EncodedTerm::from).as_ref(),
  293|  5.07k|            ),
  294|  5.07k|            reader,
  295|  5.07k|        }
  296|  5.07k|    }
_RNvMs1_NtCshC9BJcurWLf_8oxigraph5storeNtB5_11Transaction5clear:
 1526|  5.07k|    pub fn clear(&mut self) -> Result<(), StorageError> {
 1527|  5.07k|        self.writer.clear()
 1528|  5.07k|    }

_RNvXsH_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
  249|  10.0k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsk_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
   22|  10.0k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
   19|  10.0k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsH_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsftsRMVBFYTr_7sparopt:
  249|  72.6k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsb_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsftsRMVBFYTr_7sparopt:
   19|  43.1k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsd_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsftsRMVBFYTr_7sparopt:
   19|  72.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsg_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsftsRMVBFYTr_7sparopt:
   22|  43.1k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsD_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsftsRMVBFYTr_7sparopt:
  249|  40.9k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsk_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsftsRMVBFYTr_7sparopt:
   22|  72.6k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsH_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsBlCKulpTva_9spargebra:
  249|  53.6k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs7_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_5IdStr3newCsBlCKulpTva_9spargebra:
  254|  48.6k|    fn new(id: u128) -> Self {
  255|  48.6k|        let mut str = [0; 32];
  256|  48.6k|        write!(&mut str[..], "{id:x}").unwrap();
  257|  48.6k|        Self(str)
  258|  48.6k|    }
_RNvXsk_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsBlCKulpTva_9spargebra:
   22|  53.6k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs7_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_5IdStr6as_strCsBlCKulpTva_9spargebra:
  261|  48.6k|    fn as_str(&self) -> &str {
  262|  48.6k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|  48.6k|        str::from_utf8(&self.0[..len]).unwrap()
  264|  48.6k|    }
_RNvXsd_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsBlCKulpTva_9spargebra:
   19|  53.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs0_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsBlCKulpTva_9spargebra:
  108|  19.2k|    fn default() -> Self {
  109|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  110|  48.6k|        loop {
  111|  48.6k|            let id = random();
  112|  48.6k|            let str = IdStr::new(id);
  113|  48.6k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  114|  19.2k|                return Self(BlankNodeContent::Anonymous { id, str });
  115|  29.3k|            }
  116|       |        }
  117|  19.2k|    }
_RINvXsl_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB6_16BlankNodeContentNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsBlCKulpTva_9spargebra:
   22|   109k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvXse_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB6_9BlankNodeNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsBlCKulpTva_9spargebra:
   19|   109k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvXsI_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB6_5IdStrNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsBlCKulpTva_9spargebra:
  249|   109k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNCNvMs7_NtCs2RvTzHk1J7L_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  262|  1.55M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RINvXs4_NtCs2RvTzHk1J7L_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendNtNtB8_6triple4QuadE6extendINtNtBU_8adapters12GenericShuntNtNtCshC9BJcurWLf_8oxigraph5store8QuadIterINtNtBW_6result6ResultNtNtBW_7convert10InfallibleNtNtNtB2G_7storage5error12StorageErrorEEECs6R6jWqmh3zm_18sparql_update_eval:
  973|  5.07k|    fn extend<I: IntoIterator<Item = Quad>>(&mut self, iter: I) {
  974|  7.97k|        for t in iter {
  975|  2.90k|            self.insert(&t);
  976|  2.90k|        }
  977|  5.07k|    }
_RINvXs2_NtCs2RvTzHk1J7L_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect12FromIteratorNtNtB8_6triple4QuadE9from_iterINtNtBU_8adapters12GenericShuntNtNtCshC9BJcurWLf_8oxigraph5store8QuadIterINtNtBW_6result6ResultNtNtBW_7convert10InfallibleNtNtNtB2Q_7storage5error12StorageErrorEEECs6R6jWqmh3zm_18sparql_update_eval:
  957|  5.07k|    fn from_iter<I: IntoIterator<Item = Quad>>(iter: I) -> Self {
  958|  5.07k|        let mut g = Self::new();
  959|  5.07k|        g.extend(iter);
  960|  5.07k|        g
  961|  5.07k|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECs6R6jWqmh3zm_18sparql_update_eval:
  360|  2.90k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  361|  2.90k|        let quad = self.encode_quad(quad.into());
  362|  2.90k|        self.insert_encoded(quad)
  363|  2.90k|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|  1.45k|    pub(super) fn encoded_named_node<'a>(
  455|  1.45k|        &self,
  456|  1.45k|        node: impl Into<NamedNodeRef<'a>>,
  457|  1.45k|    ) -> Option<InternedNamedNode> {
  458|  1.45k|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|  1.45k|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|  1.45k|    pub(super) fn encoded_subject<'a>(
  462|  1.45k|        &self,
  463|  1.45k|        node: impl Into<SubjectRef<'a>>,
  464|  1.45k|    ) -> Option<InternedSubject> {
  465|  1.45k|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|  1.45k|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|  1.45k|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|  1.45k|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|  1.45k|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|  1.45k|    pub(super) fn encoded_graph_name<'a>(
  473|  1.45k|        &self,
  474|  1.45k|        graph_name: impl Into<GraphNameRef<'a>>,
  475|  1.45k|    ) -> Option<InternedGraphName> {
  476|  1.45k|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|  1.45k|    }
_RNCNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB4_7Dataset15map_blank_nodes0B6_:
  856|  2.90k|            .map(|(s, p, o, g)| {
  857|  2.90k|                (
  858|  2.90k|                    match s {
  859|  2.90k|                        InternedSubject::NamedNode(_) => s,
  860|      0|                        InternedSubject::BlankNode(bnode) => {
  861|      0|                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|      0|                                bnode_mapping[&bnode].as_ref(),
  863|      0|                                &mut self.interner,
  864|      0|                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|      0|                        InternedSubject::Triple(triple) => {
  868|      0|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|      0|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|      0|                                &mut self.interner,
  871|      0|                            )))
  872|       |                        }
  873|       |                    },
  874|  2.90k|                    p,
  875|  2.90k|                    match o {
  876|  2.90k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|      0|                        InternedTerm::BlankNode(bnode) => {
  878|      0|                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|      0|                                bnode_mapping[&bnode].as_ref(),
  880|      0|                                &mut self.interner,
  881|      0|                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|      0|                        InternedTerm::Triple(triple) => {
  885|      0|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|      0|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|      0|                                &mut self.interner,
  888|      0|                            )))
  889|       |                        }
  890|       |                    },
  891|  2.90k|                    match g {
  892|  2.90k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|      0|                        InternedGraphName::BlankNode(bnode) => {
  894|      0|                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|      0|                                bnode_mapping[&bnode].as_ref(),
  896|      0|                                &mut self.interner,
  897|      0|                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  2.90k|            })
_RNCNvXsg_NtCs2RvTzHk1J7L_5oxrdf7datasetNtB7_4IterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0B9_:
 1554|  1.45k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
_RINvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|  1.45k|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|  1.45k|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|  1.45k|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|  1.45k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  539|  5.07k|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  540|  5.07k|        let bnode_mapping = self.canonicalize_interned_blank_nodes(algorithm);
  541|  5.07k|        let new_quads = self.map_blank_nodes(&bnode_mapping);
  542|  5.07k|        self.clear();
  543|  7.97k|        for quad in new_quads {
  544|  2.90k|            self.insert_encoded(quad);
  545|  2.90k|        }
  546|  5.07k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  582|  5.07k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  583|  5.07k|        let mut bnodes = HashSet::new();
  584|  7.97k|        for (g, s, _, o) in &self.gspo {
  585|  2.90k|            if let InternedSubject::BlankNode(bnode) = s {
  586|      0|                bnodes.insert(*bnode);
  587|  2.90k|            }
  588|       |            #[cfg(feature = "rdf-star")]
  589|  2.90k|            if let InternedSubject::Triple(triple) = s {
  590|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  591|  2.90k|            }
  592|  2.90k|            if let InternedTerm::BlankNode(bnode) = o {
  593|      0|                bnodes.insert(*bnode);
  594|  2.90k|            }
  595|       |            #[cfg(feature = "rdf-star")]
  596|  2.90k|            if let InternedTerm::Triple(triple) = o {
  597|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  598|  2.90k|            }
  599|  2.90k|            if let InternedGraphName::BlankNode(bnode) = g {
  600|      0|                bnodes.insert(*bnode);
  601|  2.90k|            }
  602|       |        }
  603|  5.07k|        bnodes
  604|  5.07k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset15map_blank_nodes:
  844|  5.07k|    fn map_blank_nodes(
  845|  5.07k|        &mut self,
  846|  5.07k|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  847|  5.07k|    ) -> Vec<(
  848|  5.07k|        InternedSubject,
  849|  5.07k|        InternedNamedNode,
  850|  5.07k|        InternedTerm,
  851|  5.07k|        InternedGraphName,
  852|  5.07k|    )> {
  853|  5.07k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  854|  5.07k|        old_quads
  855|  5.07k|            .into_iter()
  856|  5.07k|            .map(|(s, p, o, g)| {
  857|       |                (
  858|       |                    match s {
  859|       |                        InternedSubject::NamedNode(_) => s,
  860|       |                        InternedSubject::BlankNode(bnode) => {
  861|       |                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|       |                                bnode_mapping[&bnode].as_ref(),
  863|       |                                &mut self.interner,
  864|       |                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|       |                        InternedSubject::Triple(triple) => {
  868|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|       |                                &mut self.interner,
  871|       |                            )))
  872|       |                        }
  873|       |                    },
  874|       |                    p,
  875|       |                    match o {
  876|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|       |                        InternedTerm::BlankNode(bnode) => {
  878|       |                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|       |                                bnode_mapping[&bnode].as_ref(),
  880|       |                                &mut self.interner,
  881|       |                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|       |                        InternedTerm::Triple(triple) => {
  885|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|       |                                &mut self.interner,
  888|       |                            )))
  889|       |                        }
  890|       |                    },
  891|       |                    match g {
  892|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|       |                        InternedGraphName::BlankNode(bnode) => {
  894|       |                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|       |                                bnode_mapping[&bnode].as_ref(),
  896|       |                                &mut self.interner,
  897|       |                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  5.07k|            })
  902|  5.07k|            .collect()
  903|  5.07k|    }
_RNvXsg_NtCs2RvTzHk1J7L_5oxrdf7datasetNtB5_4IterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 1551|  3.98k|    fn next(&mut self) -> Option<Self::Item> {
 1552|  3.98k|        self.inner
 1553|  3.98k|            .next()
 1554|  3.98k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1555|  3.98k|    }
_RNvXsj_NtCs2RvTzHk1J7L_5oxrdf7datasetNtB5_7DatasetNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
   66|  5.07k|#[derive(Debug, Default, Clone)]
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|  1.45k|    fn decode_spog(
  480|  1.45k|        &self,
  481|  1.45k|        quad: (
  482|  1.45k|            &InternedSubject,
  483|  1.45k|            &InternedNamedNode,
  484|  1.45k|            &InternedTerm,
  485|  1.45k|            &InternedGraphName,
  486|  1.45k|        ),
  487|  1.45k|    ) -> QuadRef<'_> {
  488|  1.45k|        QuadRef {
  489|  1.45k|            subject: quad.0.decode_from(&self.interner),
  490|  1.45k|            predicate: quad.1.decode_from(&self.interner),
  491|  1.45k|            object: quad.2.decode_from(&self.interner),
  492|  1.45k|            graph_name: quad.3.decode_from(&self.interner),
  493|  1.45k|        }
  494|  1.45k|    }
_RNvXs_NtCs2RvTzHk1J7L_5oxrdf7datasetNtB4_7DatasetNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eq:
  932|  2.53k|    fn eq(&self, other: &Self) -> bool {
  933|  2.53k|        if self.len() != other.len() {
  934|      0|            return false;
  935|  2.53k|        }
  936|  3.98k|        for q in self {
  937|  1.45k|            if !other.contains(q) {
  938|      0|                return false;
  939|  1.45k|            }
  940|       |        }
  941|  2.53k|        true
  942|  2.53k|    }
_RNvXs1_NtCs2RvTzHk1J7L_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect12IntoIterator9into_iter:
  951|  2.53k|    fn into_iter(self) -> Self::IntoIter {
  952|  2.53k|        self.iter()
  953|  2.53k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset3len:
  350|  5.07k|    pub fn len(&self) -> usize {
  351|  5.07k|        self.gspo.len()
  352|  5.07k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset33canonicalize_interned_blank_nodes:
  562|  5.07k|    fn canonicalize_interned_blank_nodes(
  563|  5.07k|        &self,
  564|  5.07k|        algorithm: CanonicalizationAlgorithm,
  565|  5.07k|    ) -> HashMap<InternedBlankNode, BlankNode> {
  566|  5.07k|        match algorithm {
  567|  5.07k|            CanonicalizationAlgorithm::Unstable => {
  568|  5.07k|                let bnodes = self.blank_nodes();
  569|  5.07k|                let quads_per_blank_node = self.quads_per_blank_nodes();
  570|  5.07k|                let (hash, partition) = self.hash_bnodes(
  571|  5.07k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  572|  5.07k|                    &quads_per_blank_node,
  573|  5.07k|                );
  574|  5.07k|                self.distinguish(hash, &partition, &quads_per_blank_node)
  575|  5.07k|                    .into_iter()
  576|  5.07k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
  577|  5.07k|                    .collect()
  578|  5.07k|            }
  579|  5.07k|        }
  580|  5.07k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  669|  5.07k|    fn hash_bnodes(
  670|  5.07k|        &self,
  671|  5.07k|        mut hashes: HashMap<InternedBlankNode, u64>,
  672|  5.07k|        quads_per_blank_node: &QuadsPerBlankNode,
  673|  5.07k|    ) -> (
  674|  5.07k|        HashMap<InternedBlankNode, u64>,
  675|  5.07k|        Vec<(u64, Vec<InternedBlankNode>)>,
  676|  5.07k|    ) {
  677|  5.07k|        let mut to_hash = Vec::new();
  678|  5.07k|        let mut to_do = hashes
  679|  5.07k|            .keys()
  680|  5.07k|            .map(|bnode| (*bnode, true))
  681|  5.07k|            .collect::<HashMap<_, _>>();
  682|  5.07k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  683|  5.07k|        let mut old_partition_count = usize::MAX;
  684|  10.1k|        while old_partition_count != partition.len() {
  685|  5.07k|            old_partition_count = partition.len();
  686|  5.07k|            partition.clear();
  687|  5.07k|            let mut new_hashes = hashes.clone();
  688|  5.07k|            for bnode in hashes.keys() {
  689|      0|                let hash = if to_do.contains_key(bnode) {
  690|      0|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  691|      0|                        to_hash.push((
  692|      0|                            self.hash_subject(s, *bnode, &hashes),
  693|      0|                            self.hash_named_node(*p),
  694|      0|                            self.hash_term(o, *bnode, &hashes),
  695|      0|                            self.hash_graph_name(g, *bnode, &hashes),
  696|      0|                        ));
  697|      0|                    }
  698|      0|                    to_hash.sort_unstable();
  699|      0|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  700|      0|                    to_hash.clear();
  701|      0|                    if hash == hashes[bnode] {
  702|      0|                        to_do.insert(*bnode, false);
  703|      0|                    } else {
  704|      0|                        new_hashes.insert(*bnode, hash);
  705|      0|                    }
  706|      0|                    hash
  707|       |                } else {
  708|      0|                    hashes[bnode]
  709|       |                };
  710|      0|                partition.entry(hash).or_default().push(*bnode);
  711|       |            }
  712|  5.07k|            hashes = new_hashes;
  713|       |        }
  714|  5.07k|        let mut partition: Vec<_> = partition.into_iter().collect();
  715|  5.07k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  716|  5.07k|        (hashes, partition)
  717|  5.07k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  2.53k|    pub fn iter(&self) -> Iter<'_> {
  170|  2.53k|        let iter = self.spog.iter();
  171|  2.53k|        Iter {
  172|  2.53k|            dataset: self,
  173|  2.53k|            inner: iter,
  174|  2.53k|        }
  175|  2.53k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset3new:
  109|  5.07k|    pub fn new() -> Self {
  110|  5.07k|        Self::default()
  111|  5.07k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  620|  5.07k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  621|  5.07k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  622|  7.97k|        for quad in &self.spog {
  623|  2.90k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  624|      0|                map.entry(*bnode).or_default().push(quad.clone());
  625|  2.90k|            }
  626|       |            #[cfg(feature = "rdf-star")]
  627|  2.90k|            if let InternedSubject::Triple(t) = &quad.0 {
  628|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  629|  2.90k|            }
  630|  2.90k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  631|      0|                map.entry(*bnode).or_default().push(quad.clone());
  632|  2.90k|            }
  633|       |            #[cfg(feature = "rdf-star")]
  634|  2.90k|            if let InternedTerm::Triple(t) = &quad.2 {
  635|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  636|  2.90k|            }
  637|  2.90k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  638|      0|                map.entry(*bnode).or_default().push(quad.clone());
  639|  2.90k|            }
  640|       |        }
  641|  5.07k|        map
  642|  5.07k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset11distinguish:
  809|  5.07k|    fn distinguish(
  810|  5.07k|        &self,
  811|  5.07k|        hash: HashMap<InternedBlankNode, u64>,
  812|  5.07k|        partition: &[(u64, Vec<InternedBlankNode>)],
  813|  5.07k|        quads_per_blank_node: &QuadsPerBlankNode,
  814|  5.07k|    ) -> HashMap<InternedBlankNode, u64> {
  815|  5.07k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  816|  5.07k|        if let Some(b_prime) = b_prime {
  817|      0|            b_prime
  818|      0|                .iter()
  819|      0|                .map(|b| {
  820|       |                    let mut hash_prime = hash.clone();
  821|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|       |                    let (hash_prime_prime, partition_prime) =
  823|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|       |                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|      0|                })
  826|      0|                .reduce(|a, b| {
  827|       |                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|       |                    a_hashes.sort();
  829|       |                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|       |                    b_hashes.sort();
  831|       |                    if a_hashes <= b_hashes {
  832|       |                        a
  833|       |                    } else {
  834|       |                        b
  835|       |                    }
  836|      0|                })
  837|      0|                .unwrap_or_default()
  838|       |        } else {
  839|  5.07k|            hash
  840|       |        }
  841|  5.07k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  420|  2.90k|    fn encode_quad(
  421|  2.90k|        &mut self,
  422|  2.90k|        quad: QuadRef<'_>,
  423|  2.90k|    ) -> (
  424|  2.90k|        InternedSubject,
  425|  2.90k|        InternedNamedNode,
  426|  2.90k|        InternedTerm,
  427|  2.90k|        InternedGraphName,
  428|  2.90k|    ) {
  429|  2.90k|        (
  430|  2.90k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  431|  2.90k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  432|  2.90k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  433|  2.90k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  434|  2.90k|        )
  435|  2.90k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|  5.81k|    fn insert_encoded(
  366|  5.81k|        &mut self,
  367|  5.81k|        quad: (
  368|  5.81k|            InternedSubject,
  369|  5.81k|            InternedNamedNode,
  370|  5.81k|            InternedTerm,
  371|  5.81k|            InternedGraphName,
  372|  5.81k|        ),
  373|  5.81k|    ) -> bool {
  374|  5.81k|        let (s, p, o, g) = quad;
  375|  5.81k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|  5.81k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|  5.81k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|  5.81k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|  5.81k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|  5.81k|        self.ospg.insert((o, s, p, g))
  381|  5.81k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|  1.45k|    fn encoded_quad(
  438|  1.45k|        &self,
  439|  1.45k|        quad: QuadRef<'_>,
  440|  1.45k|    ) -> Option<(
  441|  1.45k|        InternedSubject,
  442|  1.45k|        InternedNamedNode,
  443|  1.45k|        InternedTerm,
  444|  1.45k|        InternedGraphName,
  445|  1.45k|    )> {
  446|  1.45k|        Some((
  447|  1.45k|            self.encoded_subject(quad.subject)?,
  448|  1.45k|            self.encoded_named_node(quad.predicate)?,
  449|  1.45k|            self.encoded_term(quad.object)?,
  450|  1.45k|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|  1.45k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  5.07k|    pub fn clear(&mut self) {
  412|  5.07k|        self.gspo.clear();
  413|  5.07k|        self.gpos.clear();
  414|  5.07k|        self.gosp.clear();
  415|  5.07k|        self.spog.clear();
  416|  5.07k|        self.posg.clear();
  417|  5.07k|        self.ospg.clear();
  418|  5.07k|    }

_RNvMNtCs2RvTzHk1J7L_5oxrdf9interningNtB2_8Interner4hash:
   53|  19.5k|    fn hash(&self, value: &str) -> u64 {
   54|  19.5k|        let mut hasher = self.hasher.build_hasher();
   55|  19.5k|        hasher.write(value.as_bytes());
   56|  19.5k|        let hash = hasher.finish();
   57|  19.5k|        if hash == u64::MAX {
   58|      0|            0
   59|       |        } else {
   60|  19.5k|            hash
   61|       |        }
   62|  19.5k|    }
_RNvMs5_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  436|  1.45k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  437|  1.45k|        match self {
  438|    500|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  439|      0|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  440|    954|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  441|       |            #[cfg(feature = "rdf-star")]
  442|      0|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  443|       |        }
  444|  1.45k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  13.0k|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  13.0k|        let mut hash = self.hash(value);
   20|  13.0k|        loop {
   21|  13.0k|            match self.string_for_hash.entry(hash) {
   22|  3.81k|                Entry::Vacant(e) => {
   23|  3.81k|                    e.insert(value.into());
   24|  3.81k|                    return Key(hash);
   25|       |                }
   26|  9.21k|                Entry::Occupied(e) => loop {
   27|  9.21k|                    if e.get() == value {
   28|  9.21k|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  13.0k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf9interningNtB2_8Interner3get:
   39|  6.51k|    fn get(&self, value: &str) -> Option<Key> {
   40|  6.51k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  6.51k|            let v = self.string_for_hash.get(&hash)?;
   43|  6.51k|            if v == value {
   44|  6.51k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  6.51k|    }
_RNvMs5_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  419|  1.45k|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  420|  1.45k|        Some(match term {
  421|    500|            TermRef::NamedNode(term) => {
  422|    500|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  423|       |            }
  424|      0|            TermRef::BlankNode(term) => {
  425|      0|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  426|       |            }
  427|    954|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  428|       |            #[cfg(feature = "rdf-star")]
  429|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  430|      0|                triple.as_ref(),
  431|      0|                interner,
  432|      0|            )?)),
  433|       |        })
  434|  1.45k|    }
_RNvXs7_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCs9nhK3FOW46N_4core4hash11BuildHasher12build_hasher:
  513|  28.9k|    fn build_hasher(&self) -> Self::Hasher {
  514|  28.9k|        Self::Hasher::default()
  515|  28.9k|    }
_RNvXsX_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_15InternedSubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  267|  31.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1c_NtCs2RvTzHk1J7L_5oxrdf9interningNtB6_12InternedTermNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB8_:
  392|  33.4k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs4_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  367|  1.45k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  368|  1.45k|        match self {
  369|    222|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  370|  1.23k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  371|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  372|       |        }
  373|  1.45k|    }
_RNvMs5_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  402|  2.90k|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  403|  2.90k|        match term {
  404|  1.00k|            TermRef::NamedNode(term) => {
  405|  1.00k|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  406|       |            }
  407|      0|            TermRef::BlankNode(term) => {
  408|      0|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  409|       |            }
  410|  1.90k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  411|       |            #[cfg(feature = "rdf-star")]
  412|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  413|      0|                triple.as_ref(),
  414|      0|                interner,
  415|      0|            ))),
  416|       |        }
  417|  2.90k|    }
_RNvXsq_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
   86|   113k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXst_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   86|  73.0k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs1f_NtCs2RvTzHk1J7L_5oxrdf9interningNtB6_12InternedTermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  392|  31.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsK_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_15InternedLiteralNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
  174|  15.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsN_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_15InternedLiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  174|  20.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  355|  1.45k|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  356|  1.45k|        Some(match node {
  357|    222|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  358|  1.23k|            GraphNameRef::NamedNode(node) => {
  359|  1.23k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  360|       |            }
  361|      0|            GraphNameRef::BlankNode(node) => {
  362|      0|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  363|       |            }
  364|       |        })
  365|  1.45k|    }
_RNvMs2_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  228|    954|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  229|    954|        match self {
  230|     36|            Self::String { value_id } => {
  231|     36|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  232|       |            }
  233|       |            Self::LanguageTaggedString {
  234|    302|                value_id,
  235|    302|                language_id,
  236|    302|            } => LiteralRef::new_language_tagged_literal_unchecked(
  237|    302|                interner.resolve(*value_id),
  238|    302|                interner.resolve(*language_id),
  239|    302|            ),
  240|    616|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  241|    616|                interner.resolve(*value_id),
  242|    616|                datatype.decode_from(interner),
  243|    616|            ),
  244|       |        }
  245|    954|    }
_RNvMs3_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  308|  1.45k|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  309|  1.45k|        match self {
  310|  1.45k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  311|      0|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  312|       |            #[cfg(feature = "rdf-star")]
  313|      0|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  314|       |        }
  315|  1.45k|    }
_RNvMs4_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  343|  2.90k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  344|  2.90k|        match node {
  345|    444|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  346|  2.46k|            GraphNameRef::NamedNode(node) => {
  347|  2.46k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  348|       |            }
  349|      0|            GraphNameRef::BlankNode(node) => {
  350|      0|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  351|       |            }
  352|       |        }
  353|  2.90k|    }
_RNvMs0_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   98|  5.25k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   99|  5.25k|        Some(Self {
  100|  5.25k|            id: interner.get(named_node.as_str())?,
  101|       |        })
  102|  5.25k|    }
_RNvMs0_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  104|  5.25k|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  105|  5.25k|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  106|  5.25k|    }
_RNvXs8_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_14IdentityHasherNtNtCs9nhK3FOW46N_4core4hash6Hasher9write_u64:
  532|  28.9k|    fn write_u64(&mut self, i: u64) {
  533|  28.9k|        self.value = i
  534|  28.9k|    }
_RNvMs2_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  209|    954|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  210|    954|        let value_id = interner.get(literal.value())?;
  211|    954|        Some(if literal.is_plain() {
  212|    338|            if let Some(language) = literal.language() {
  213|       |                Self::LanguageTaggedString {
  214|    302|                    value_id,
  215|    302|                    language_id: interner.get(language)?,
  216|       |                }
  217|       |            } else {
  218|     36|                Self::String { value_id }
  219|       |            }
  220|       |        } else {
  221|       |            Self::TypedLiteral {
  222|    616|                value_id,
  223|    616|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  224|       |            }
  225|       |        })
  226|    954|    }
_RNvMs3_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  292|  1.45k|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  293|  1.45k|        Some(match node {
  294|  1.45k|            SubjectRef::NamedNode(node) => {
  295|  1.45k|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  296|       |            }
  297|      0|            SubjectRef::BlankNode(node) => {
  298|      0|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  299|       |            }
  300|       |            #[cfg(feature = "rdf-star")]
  301|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  302|      0|                triple.as_ref(),
  303|      0|                interner,
  304|      0|            )?)),
  305|       |        })
  306|  1.45k|    }
_RNvXsa_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_8InternerNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
    7|  5.07k|#[derive(Debug, Default, Clone)]
_RNvMNtCs2RvTzHk1J7L_5oxrdf9interningNtB2_8Interner7resolve:
   64|  6.51k|    fn resolve(&self, key: Key) -> &str {
   65|  6.51k|        &self.string_for_hash[&key.0]
   66|  6.51k|    }
_RNvXsg_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_3KeyNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
   69|   126k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs2_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  190|  1.90k|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  191|  1.90k|        let value_id = interner.get_or_intern(literal.value());
  192|  1.90k|        if literal.is_plain() {
  193|    676|            if let Some(language) = literal.language() {
  194|    604|                Self::LanguageTaggedString {
  195|    604|                    value_id,
  196|    604|                    language_id: interner.get_or_intern(language),
  197|    604|                }
  198|       |            } else {
  199|     72|                Self::String { value_id }
  200|       |            }
  201|       |        } else {
  202|  1.23k|            Self::TypedLiteral {
  203|  1.23k|                value_id,
  204|  1.23k|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  205|  1.23k|            }
  206|       |        }
  207|  1.90k|    }
_RNvMs3_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  276|  2.90k|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  277|  2.90k|        match node {
  278|  2.90k|            SubjectRef::NamedNode(node) => {
  279|  2.90k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  280|       |            }
  281|      0|            SubjectRef::BlankNode(node) => {
  282|      0|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  283|       |            }
  284|       |            #[cfg(feature = "rdf-star")]
  285|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  286|      0|                triple.as_ref(),
  287|      0|                interner,
  288|      0|            ))),
  289|       |        }
  290|  2.90k|    }
_RNvXs1q_NtCs2RvTzHk1J7L_5oxrdf9interningNtB6_21IdentityHasherBuilderNtNtCs9nhK3FOW46N_4core7default7Default7defaultB8_:
  507|  5.07k|#[derive(Default, Clone)]
_RNvXs1s_NtCs2RvTzHk1J7L_5oxrdf9interningNtB6_14IdentityHasherNtNtCs9nhK3FOW46N_4core7default7Default7defaultB8_:
  518|  28.9k|#[derive(Default)]
_RNvXs13_NtCs2RvTzHk1J7L_5oxrdf9interningNtB6_17InternedGraphNameNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB8_:
  335|  48.3k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs16_NtCs2RvTzHk1J7L_5oxrdf9interningNtB6_17InternedGraphNameNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  335|  31.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsU_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_15InternedSubjectNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
  267|  34.7k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs0_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   92|  10.5k|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   93|  10.5k|        Self {
   94|  10.5k|            id: interner.get_or_intern(named_node.as_str()),
   95|  10.5k|        }
   96|  10.5k|    }
_RNvXs8_NtCs2RvTzHk1J7L_5oxrdf9interningNtB5_14IdentityHasherNtNtCs9nhK3FOW46N_4core4hash6Hasher6finish:
  524|  28.9k|    fn finish(&self) -> u64 {
  525|  28.9k|        self.value
  526|  28.9k|    }

_RNvMNtCs2RvTzHk1J7L_5oxrdf7literalNtB2_7Literal6as_refCs6R6jWqmh3zm_18sparql_update_eval:
  129|  1.90k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  1.90k|        LiteralRef(match &self.0 {
  131|     72|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|    604|            LiteralContent::LanguageTaggedString { value, language } => {
  133|    604|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  1.23k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  1.23k|                value,
  137|  1.23k|                datatype: datatype.as_ref(),
  138|  1.23k|            },
  139|       |        })
  140|  1.90k|    }
_RNvXsM_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
   37|  3.84k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsF_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
   34|  3.84k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvMNtCs2RvTzHk1J7L_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtNtCshC9BJcurWLf_8oxigraph7storage12small_string11SmallStringB1n_EB1t_:
   85|    630|    pub fn new_language_tagged_literal_unchecked(
   86|    630|        value: impl Into<String>,
   87|    630|        language: impl Into<String>,
   88|    630|    ) -> Self {
   89|    630|        Self(LiteralContent::LanguageTaggedString {
   90|    630|            value: value.into(),
   91|    630|            language: language.into(),
   92|    630|        })
   93|    630|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtNtCshC9BJcurWLf_8oxigraph7storage12small_string11SmallStringEB1a_:
   47|     77|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|     77|        Self(LiteralContent::String(value.into()))
   49|     77|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringNtNtB5_10named_node12NamedNodeRefECshC9BJcurWLf_8oxigraph:
   53|  1.30k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  1.30k|        let value = value.into();
   55|  1.30k|        let datatype = datatype.into();
   56|  1.30k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|  1.30k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  1.30k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7literalNtB2_7Literal6as_refCshC9BJcurWLf_8oxigraph:
  129|  12.8k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  12.8k|        LiteralRef(match &self.0 {
  131|    858|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  2.97k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  2.97k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  9.06k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  9.06k|                value,
  137|  9.06k|                datatype: datatype.as_ref(),
  138|  9.06k|            },
  139|       |        })
  140|  12.8k|    }
_RNvXsM_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
   37|  6.60k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMst_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_10LiteralRef5valueCshC9BJcurWLf_8oxigraph:
  488|  11.5k|    pub const fn value(self) -> &'a str {
  489|  11.5k|        match self.0 {
  490|    760|            LiteralRefContent::String(value)
  491|  2.84k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  11.5k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  11.5k|        }
  494|  11.5k|    }
_RNvMst_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_10LiteralRef8languageCshC9BJcurWLf_8oxigraph:
  501|  2.84k|    pub const fn language(self) -> Option<&'a str> {
  502|  2.84k|        match self.0 {
  503|  2.84k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|      0|            _ => None,
  505|       |        }
  506|  2.84k|    }
_RNvXsu_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_10LiteralRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCshC9BJcurWLf_8oxigraph:
  565|  1.32k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  1.32k|        match self.0 {
  567|     98|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|    122|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|    122|                print_quoted_str(value, f)?;
  570|    122|                write!(f, "@{language}")
  571|       |            }
  572|  1.10k|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|  1.10k|                print_quoted_str(value, f)?;
  574|  1.10k|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  1.32k|    }
_RNvMst_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_10LiteralRef8datatypeCshC9BJcurWLf_8oxigraph:
  513|  11.5k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  11.5k|        match self.0 {
  515|    760|            LiteralRefContent::String(_) => xsd::STRING,
  516|  2.84k|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  7.96k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  11.5k|    }
_RNvXsh_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_7LiteralINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes7decimal7DecimalE4fromCshC9BJcurWLf_8oxigraph:
  330|    688|    fn from(value: Decimal) -> Self {
  331|    688|        Self::new_typed_literal(value.to_string(), xsd::DECIMAL)
  332|    688|    }
_RNvXs_NtCs2RvTzHk1J7L_5oxrdf7literalNtB4_7LiteralNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCshC9BJcurWLf_8oxigraph:
  157|  1.32k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  158|  1.32k|        self.as_ref().fmt(f)
  159|  1.32k|    }
_RNvXsf_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_7LiteralINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes6double6DoubleE4fromCshC9BJcurWLf_8oxigraph:
  314|     80|    fn from(value: Double) -> Self {
  315|     80|        Self::new_typed_literal(value.to_string(), xsd::DOUBLE)
  316|     80|    }
_RNvXsF_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
   34|  6.60k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsd_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_7LiteralINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes7boolean7BooleanE4fromCshC9BJcurWLf_8oxigraph:
  298|    244|    fn from(value: Boolean) -> Self {
  299|    244|        Self::new_typed_literal(value.to_string(), xsd::BOOLEAN)
  300|    244|    }
_RNvXsg_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_7LiteralINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes7integer7IntegerE4fromCshC9BJcurWLf_8oxigraph:
  322|    290|    fn from(value: Integer) -> Self {
  323|    290|        Self::new_typed_literal(value.to_string(), xsd::INTEGER)
  324|    290|    }
_RNvXsD_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsftsRMVBFYTr_7sparopt:
   34|      7|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtCs2RvTzHk1J7L_5oxrdf7literalNtB2_7Literal5valueCsftsRMVBFYTr_7sparopt:
   97|  27.6k|    pub fn value(&self) -> &str {
   98|  27.6k|        self.as_ref().value()
   99|  27.6k|    }
_RNvXsM_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsftsRMVBFYTr_7sparopt:
   37|  9.50k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXs3_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_7LiteralINtNtCs9nhK3FOW46N_4core7convert4FrombE4fromCsftsRMVBFYTr_7sparopt:
  185|  29.4k|    fn from(value: bool) -> Self {
  186|  29.4k|        Self(LiteralContent::TypedLiteral {
  187|  29.4k|            value: value.to_string(),
  188|  29.4k|            datatype: xsd::BOOLEAN.into(),
  189|  29.4k|        })
  190|  29.4k|    }
_RNvMst_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_10LiteralRef5valueCsftsRMVBFYTr_7sparopt:
  488|  27.6k|    pub const fn value(self) -> &'a str {
  489|  27.6k|        match self.0 {
  490|      6|            LiteralRefContent::String(value)
  491|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  27.6k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  27.6k|        }
  494|  27.6k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7literalNtB2_7Literal8datatypeCsftsRMVBFYTr_7sparopt:
  115|  27.7k|    pub fn datatype(&self) -> NamedNodeRef<'_> {
  116|  27.7k|        self.as_ref().datatype()
  117|  27.7k|    }
_RNvXsI_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsftsRMVBFYTr_7sparopt:
   37|      7|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMst_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_10LiteralRef8datatypeCsftsRMVBFYTr_7sparopt:
  513|  27.7k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  27.7k|        match self.0 {
  515|      6|            LiteralRefContent::String(_) => xsd::STRING,
  516|     30|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  27.7k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  27.7k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf7literalNtB2_7Literal6as_refCsftsRMVBFYTr_7sparopt:
  129|  55.4k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  55.4k|        LiteralRef(match &self.0 {
  131|     12|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|     30|            LiteralContent::LanguageTaggedString { value, language } => {
  133|     30|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  55.3k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  55.3k|                value,
  137|  55.3k|                datatype: datatype.as_ref(),
  138|  55.3k|            },
  139|       |        })
  140|  55.4k|    }
_RNvXsF_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsftsRMVBFYTr_7sparopt:
   34|  9.50k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvXsN_NtCs2RvTzHk1J7L_5oxrdf7literalNtB6_14LiteralContentNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsftsRMVBFYTr_7sparopt:
   37|  4.21k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvXsG_NtCs2RvTzHk1J7L_5oxrdf7literalNtB6_7LiteralNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsftsRMVBFYTr_7sparopt:
   34|  4.21k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsu_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_10LiteralRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsBlCKulpTva_9spargebra:
  565|  4.22k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  4.22k|        match self.0 {
  567|    168|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|    918|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|    918|                print_quoted_str(value, f)?;
  570|    918|                write!(f, "@{language}")
  571|       |            }
  572|  3.13k|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|  3.13k|                print_quoted_str(value, f)?;
  574|  3.13k|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  4.22k|    }
_RNvXs_NtCs2RvTzHk1J7L_5oxrdf7literalNtB4_7LiteralNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsBlCKulpTva_9spargebra:
  157|  4.22k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  158|  4.22k|        self.as_ref().fmt(f)
  159|  4.22k|    }
_RNvXsF_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsBlCKulpTva_9spargebra:
   34|  1.26k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtCs2RvTzHk1J7L_5oxrdf7literalNtB2_7Literal6as_refCsBlCKulpTva_9spargebra:
  129|  4.22k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  4.22k|        LiteralRef(match &self.0 {
  131|    168|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|    918|            LiteralContent::LanguageTaggedString { value, language } => {
  133|    918|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  3.13k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  3.13k|                value,
  137|  3.13k|                datatype: datatype.as_ref(),
  138|  3.13k|            },
  139|       |        })
  140|  4.22k|    }
_RNvXsM_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsBlCKulpTva_9spargebra:
   37|  1.26k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCs2RvTzHk1J7L_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|    214|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|    214|        let value = value.into();
   55|    214|        let datatype = datatype.into();
   56|    214|        Self(if datatype == xsd::STRING {
   57|    214|            LiteralContent::String(value)
   58|       |        } else {
   59|      0|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|    214|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|  5.23k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  5.23k|        let value = value.into();
   55|  5.23k|        let datatype = datatype.into();
   56|  5.23k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|  5.23k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  5.23k|    }
_RINvMst_NtCs2RvTzHk1J7L_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  465|    616|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  466|    616|        let datatype = datatype.into();
  467|    616|        LiteralRef(if datatype == xsd::STRING {
  468|      0|            LiteralRefContent::String(value)
  469|       |        } else {
  470|    616|            LiteralRefContent::TypedLiteral { value, datatype }
  471|       |        })
  472|    616|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringB1n_EB5_:
   85|  2.06k|    pub fn new_language_tagged_literal_unchecked(
   86|  2.06k|        value: impl Into<String>,
   87|  2.06k|        language: impl Into<String>,
   88|  2.06k|    ) -> Self {
   89|  2.06k|        Self(LiteralContent::LanguageTaggedString {
   90|  2.06k|            value: value.into(),
   91|  2.06k|            language: language.into(),
   92|  2.06k|        })
   93|  2.06k|    }
_RINvNtCs2RvTzHk1J7L_5oxrdf7literal16print_quoted_strNtNtCs9nhK3FOW46N_4core3fmt9FormatterEB4_:
  616|  5.54k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  617|  5.54k|    f.write_char('"')?;
  618|  18.7k|    for c in string.chars() {
  619|  18.7k|        match c {
  620|      0|            '\u{08}' => f.write_str("\\b"),
  621|      0|            '\t' => f.write_str("\\t"),
  622|      0|            '\n' => f.write_str("\\n"),
  623|      0|            '\u{0C}' => f.write_str("\\f"),
  624|      0|            '\r' => f.write_str("\\r"),
  625|      0|            '"' => f.write_str("\\\""),
  626|      0|            '\\' => f.write_str("\\\\"),
  627|  18.7k|            '\0'..='\u{1F}' | '\u{7F}' => write!(f, "\\u{:04X}", u32::from(c)),
  628|  18.7k|            _ => f.write_char(c),
  629|      0|        }?;
  630|       |    }
  631|  5.54k|    f.write_char('"')
  632|  5.54k|}
_RINvMNtCs2RvTzHk1J7L_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   47|    470|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|    470|        Self(LiteralContent::String(value.into()))
   49|    470|    }
_RNvMst_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  501|  1.01k|    pub const fn language(self) -> Option<&'a str> {
  502|  1.01k|        match self.0 {
  503|    906|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|    108|            _ => None,
  505|       |        }
  506|  1.01k|    }
_RNvMst_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  513|  1.84k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  1.84k|        match self.0 {
  515|      0|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  1.84k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  1.84k|    }
_RNvMst_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  459|     36|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|     36|        LiteralRef(LiteralRefContent::String(value))
  461|     36|    }
_RNvMst_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  526|  2.86k|    pub const fn is_plain(self) -> bool {
  527|  1.84k|        matches!(
  528|  2.86k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  2.86k|    }
_RNvMst_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_10LiteralRef37new_language_tagged_literal_uncheckedB7_:
  482|    302|    pub const fn new_language_tagged_literal_unchecked(value: &'a str, language: &'a str) -> Self {
  483|    302|        LiteralRef(LiteralRefContent::LanguageTaggedString { value, language })
  484|    302|    }
_RNvMst_NtCs2RvTzHk1J7L_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  488|  2.86k|    pub const fn value(self) -> &'a str {
  489|  2.86k|        match self.0 {
  490|    108|            LiteralRefContent::String(value)
  491|    906|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  2.86k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  2.86k|        }
  494|  2.86k|    }

_RNvXsp_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
   17|  46.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB2_9NamedNode6as_refCs6R6jWqmh3zm_18sparql_update_eval:
   54|  10.5k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  10.5k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  10.5k|    }
_RNvMs4_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCs6R6jWqmh3zm_18sparql_update_eval:
  128|  10.5k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  10.5k|        Self { iri }
  130|  10.5k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB2_9NamedNode6as_strCshC9BJcurWLf_8oxigraph:
   44|  1.30k|    pub fn as_str(&self) -> &str {
   45|  1.30k|        self.iri.as_str()
   46|  1.30k|    }
_RNvXsp_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
   17|  48.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB2_9NamedNode6as_refCshC9BJcurWLf_8oxigraph:
   54|   127k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|   127k|        NamedNodeRef::new_unchecked(&self.iri)
   56|   127k|    }
_RNvXs5_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCshC9BJcurWLf_8oxigraph:
  145|  10.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  10.1k|        write!(f, "<{}>", self.as_str())
  147|  10.1k|    }
_RNvMs4_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCshC9BJcurWLf_8oxigraph:
  128|   127k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|   127k|        Self { iri }
  130|   127k|    }
_RNvMs4_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCshC9BJcurWLf_8oxigraph:
  133|   216k|    pub const fn as_str(self) -> &'a str {
  134|   216k|        self.iri
  135|   216k|    }
_RNvXs9_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqCshC9BJcurWLf_8oxigraph:
  173|  1.30k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  1.30k|        self.as_str() == other.as_str()
  175|  1.30k|    }
_RNvXs_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB4_9NamedNodeNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCshC9BJcurWLf_8oxigraph:
   61|  9.01k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|  9.01k|        self.as_ref().fmt(f)
   63|  9.01k|    }
_RINvXsq_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB6_9NamedNodeNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsftsRMVBFYTr_7sparopt:
   17|  7.59k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs4_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsftsRMVBFYTr_7sparopt:
  128|  55.3k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  55.3k|        Self { iri }
  130|  55.3k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsftsRMVBFYTr_7sparopt:
   54|  55.3k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  55.3k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  55.3k|    }
_RNvXsl_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsftsRMVBFYTr_7sparopt:
   17|      3|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsftsRMVBFYTr_7sparopt:
  106|     59|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsp_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsftsRMVBFYTr_7sparopt:
   17|  60.6k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs4_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsBlCKulpTva_9spargebra:
  128|  66.0k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  66.0k|        Self { iri }
  130|  66.0k|    }
_RNvMs4_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsBlCKulpTva_9spargebra:
  133|  66.0k|    pub const fn as_str(self) -> &'a str {
  134|  66.0k|        self.iri
  135|  66.0k|    }
_RNvMs4_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCsBlCKulpTva_9spargebra:
  138|  21.1k|    pub fn into_owned(self) -> NamedNode {
  139|  21.1k|        NamedNode::new_unchecked(self.iri)
  140|  21.1k|    }
_RNvXs_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB4_9NamedNodeNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsBlCKulpTva_9spargebra:
   61|  62.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|  62.8k|        self.as_ref().fmt(f)
   63|  62.8k|    }
_RNvXsp_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsBlCKulpTva_9spargebra:
   17|   169k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsg_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core7convert4FromINtCsbOXESBDtkxG_5oxiri3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromCsBlCKulpTva_9spargebra:
  222|  57.0k|    fn from(iri: Iri<String>) -> Self {
  223|  57.0k|        Self {
  224|  57.0k|            iri: iri.into_inner(),
  225|  57.0k|        }
  226|  57.0k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsBlCKulpTva_9spargebra:
   54|  66.0k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  66.0k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  66.0k|    }
_RNvXsl_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsBlCKulpTva_9spargebra:
   17|    500|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs5_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsBlCKulpTva_9spargebra:
  145|  66.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  66.0k|        write!(f, "<{}>", self.as_str())
  147|  66.0k|    }
_RNvMs4_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  21.2k|    pub const fn as_str(self) -> &'a str {
  134|  21.2k|        self.iri
  135|  21.2k|    }
_RNvXsu_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  106|    616|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  39.9k|    pub fn into_owned(self) -> NamedNode {
  139|  39.9k|        NamedNode::new_unchecked(self.iri)
  140|  39.9k|    }
_RNvXs9_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  5.45k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  5.45k|        self.as_str() == other.as_str()
  175|  5.45k|    }
_RNvMNtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  5.45k|    pub fn as_str(&self) -> &str {
   45|  5.45k|        self.iri.as_str()
   46|  5.45k|    }
_RNvMs4_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  5.25k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  5.25k|        Self { iri }
  130|  5.25k|    }
_RNvXs6_NtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  39.9k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  39.9k|        node.into_owned()
  154|  39.9k|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  61.0k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  61.0k|        Self { iri: iri.into() }
   41|  61.0k|    }
_RINvMNtCs2RvTzHk1J7L_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   39|  9.66k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  9.66k|        Self { iri: iri.into() }
   41|  9.66k|    }

_RNvXs2c_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_4TermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  385|  2.51k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs1u_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_4Quad6as_refCs6R6jWqmh3zm_18sparql_update_eval:
 1182|  2.90k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1183|  2.90k|        QuadRef {
 1184|  2.90k|            subject: self.subject.as_ref(),
 1185|  2.90k|            predicate: self.predicate.as_ref(),
 1186|  2.90k|            object: self.object.as_ref(),
 1187|  2.90k|            graph_name: self.graph_name.as_ref(),
 1188|  2.90k|        }
 1189|  2.90k|    }
_RNvMs1c_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_9GraphName6as_refCs6R6jWqmh3zm_18sparql_update_eval:
  965|  2.90k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  966|  2.90k|        match self {
  967|  2.46k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  968|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  969|    444|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  970|       |        }
  971|  2.90k|    }
_RNvXs1X_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  155|  2.51k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2G_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_9GraphNameNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  940|  2.57k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvMsc_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB5_7Subject6as_refCs6R6jWqmh3zm_18sparql_update_eval:
  181|  2.90k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  2.90k|        match self {
  183|  2.90k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|      0|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  2.90k|    }
_RNvMsy_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB5_4Term6as_refCs6R6jWqmh3zm_18sparql_update_eval:
  417|  2.90k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  2.90k|        match self {
  419|  1.00k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|      0|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  1.90k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  2.90k|    }
_RNvXs1A_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_7QuadRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtB6_4QuadE4fromCs6R6jWqmh3zm_18sparql_update_eval:
 1298|  2.90k|    fn from(quad: &'a Quad) -> Self {
 1299|  2.90k|        quad.as_ref()
 1300|  2.90k|    }
_RNvMs1c_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_9GraphName6as_refCshC9BJcurWLf_8oxigraph:
  965|  13.5k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  966|  13.5k|        match self {
  967|  11.3k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  968|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  969|  2.17k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  970|       |        }
  971|  13.5k|    }
_RNvMsc_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB5_7Subject6as_refCshC9BJcurWLf_8oxigraph:
  181|  8.60k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  8.60k|        match self {
  183|  8.60k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|      0|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  8.60k|    }
_RNvXs1n_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_12GraphNameRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtNtB8_10named_node9NamedNodeE4fromCshC9BJcurWLf_8oxigraph:
 1082|     86|    fn from(node: &'a NamedNode) -> Self {
 1083|     86|        node.as_ref().into()
 1084|     86|    }
_RNvXsU_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCshC9BJcurWLf_8oxigraph:
  672|  75.3k|    fn from(node: &'a NamedNode) -> Self {
  673|  75.3k|        node.as_ref().into()
  674|  75.3k|    }
_RNvMs1u_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_4Quad6as_refCshC9BJcurWLf_8oxigraph:
 1182|  8.60k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1183|  8.60k|        QuadRef {
 1184|  8.60k|            subject: self.subject.as_ref(),
 1185|  8.60k|            predicate: self.predicate.as_ref(),
 1186|  8.60k|            object: self.object.as_ref(),
 1187|  8.60k|            graph_name: self.graph_name.as_ref(),
 1188|  8.60k|        }
 1189|  8.60k|    }
_RNvMs1k_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCshC9BJcurWLf_8oxigraph:
 1048|  6.15k|    pub fn is_default_graph(&self) -> bool {
 1049|  6.15k|        matches!(self, Self::DefaultGraph)
 1050|  6.15k|    }
_RNvXs1m_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_12GraphNameRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB8_10named_node12NamedNodeRefE4fromCshC9BJcurWLf_8oxigraph:
 1075|     86|    fn from(node: NamedNodeRef<'a>) -> Self {
 1076|     86|        Self::NamedNode(node)
 1077|     86|    }
_RNvXsX_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7literal10LiteralRefE4fromCshC9BJcurWLf_8oxigraph:
  693|  6.01k|    fn from(literal: LiteralRef<'a>) -> Self {
  694|  6.01k|        Self::Literal(literal)
  695|  6.01k|    }
_RNvXsY_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtNtB7_7literal7LiteralE4fromCshC9BJcurWLf_8oxigraph:
  700|  6.01k|    fn from(literal: &'a Literal) -> Self {
  701|  6.01k|        literal.as_ref().into()
  702|  6.01k|    }
_RNvXs6_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB5_19NamedOrBlankNodeRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCshC9BJcurWLf_8oxigraph:
  114|  1.07k|    fn from(node: NamedNodeRef<'a>) -> Self {
  115|  1.07k|        Self::NamedNode(node)
  116|  1.07k|    }
_RNvXs7_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB5_19NamedOrBlankNodeRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCshC9BJcurWLf_8oxigraph:
  121|  1.07k|    fn from(node: &'a NamedNode) -> Self {
  122|  1.07k|        node.as_ref().into()
  123|  1.07k|    }
_RNvMsy_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB5_4Term6as_refCshC9BJcurWLf_8oxigraph:
  417|  8.60k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  8.60k|        match self {
  419|  3.05k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|      0|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  5.55k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  8.60k|    }
_RNvXs10_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtB6_19NamedOrBlankNodeRefE4fromCshC9BJcurWLf_8oxigraph:
  715|    206|    fn from(node: NamedOrBlankNodeRef<'a>) -> Self {
  716|    206|        match node {
  717|    206|            NamedOrBlankNodeRef::NamedNode(node) => node.into(),
  718|      0|            NamedOrBlankNodeRef::BlankNode(node) => node.into(),
  719|       |        }
  720|    206|    }
_RNvXs12_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtB6_10SubjectRefE4fromCsgMjAnBzbjp4_5oxttl:
  732|  3.09k|    fn from(node: SubjectRef<'a>) -> Self {
  733|  3.09k|        match node {
  734|  3.09k|            SubjectRef::NamedNode(node) => node.into(),
  735|      0|            SubjectRef::BlankNode(node) => node.into(),
  736|       |            #[cfg(feature = "rdf-star")]
  737|      0|            SubjectRef::Triple(triple) => triple.into(),
  738|       |        }
  739|  3.09k|    }
_RNvXsT_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCsgMjAnBzbjp4_5oxttl:
  665|  82.9k|    fn from(node: NamedNodeRef<'a>) -> Self {
  666|  82.9k|        Self::NamedNode(node)
  667|  82.9k|    }
_RNvXs1e_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB6_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCsgMjAnBzbjp4_5oxttl:
  983|  12.2k|    fn from(node: NamedNode) -> Self {
  984|  12.2k|        Self::NamedNode(node)
  985|  12.2k|    }
_RINvMs1u_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECsgMjAnBzbjp4_5oxttl:
 1167|  2.90k|    pub fn new(
 1168|  2.90k|        subject: impl Into<Subject>,
 1169|  2.90k|        predicate: impl Into<NamedNode>,
 1170|  2.90k|        object: impl Into<Term>,
 1171|  2.90k|        graph_name: impl Into<GraphName>,
 1172|  2.90k|    ) -> Self {
 1173|  2.90k|        Self {
 1174|  2.90k|            subject: subject.into(),
 1175|  2.90k|            predicate: predicate.into(),
 1176|  2.90k|            object: object.into(),
 1177|  2.90k|            graph_name: graph_name.into(),
 1178|  2.90k|        }
 1179|  2.90k|    }
_RNvXsA_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  40.8k|    fn from(node: NamedNode) -> Self {
  438|  40.8k|        Self::NamedNode(node)
  439|  40.8k|    }
_RNvXse_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  21.7k|    fn from(node: NamedNode) -> Self {
  201|  21.7k|        Self::NamedNode(node)
  202|  21.7k|    }
_RNvXsE_NtCs2RvTzHk1J7L_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  13.9k|    fn from(literal: Literal) -> Self {
  466|  13.9k|        Self::Literal(literal)
  467|  13.9k|    }

_RNvXsf_NtCs2RvTzHk1J7L_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
   13|  16.8k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs_NtCs2RvTzHk1J7L_5oxrdf8variableNtB4_8VariableNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCshC9BJcurWLf_8oxigraph:
   57|  89.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|  89.7k|        self.as_ref().fmt(f)
   59|  89.7k|    }
_RNvXsf_NtCs2RvTzHk1J7L_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
   13|  48.7k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCs2RvTzHk1J7L_5oxrdf8variableNtB2_8Variable6as_refCshC9BJcurWLf_8oxigraph:
   50|  89.7k|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|  89.7k|        VariableRef { name: &self.name }
   52|  89.7k|    }
_RNvXs1_NtCs2RvTzHk1J7L_5oxrdf8variableNtB5_11VariableRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCshC9BJcurWLf_8oxigraph:
  116|  89.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|  89.7k|        write!(f, "?{}", self.name)
  118|  89.7k|    }
_RNvXsb_NtCs2RvTzHk1J7L_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsftsRMVBFYTr_7sparopt:
   13|     80|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsf_NtCs2RvTzHk1J7L_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsftsRMVBFYTr_7sparopt:
   13|   335M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCs2RvTzHk1J7L_5oxrdf8variableNtB3_8Variable13new_uncheckedReECsBlCKulpTva_9spargebra:
   35|  50.5k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  50.5k|        Self { name: name.into() }
   37|  50.5k|    }
_RINvXsg_NtCs2RvTzHk1J7L_5oxrdf8variableNtB6_8VariableNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsBlCKulpTva_9spargebra:
   13|   832M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs_NtCs2RvTzHk1J7L_5oxrdf8variableNtB4_8VariableNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsBlCKulpTva_9spargebra:
   57|  41.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|  41.1k|        self.as_ref().fmt(f)
   59|  41.1k|    }
_RNvXsd_NtCs2RvTzHk1J7L_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core3cmp10PartialOrd11partial_cmpCsBlCKulpTva_9spargebra:
   13|  1.25k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsf_NtCs2RvTzHk1J7L_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsBlCKulpTva_9spargebra:
   13|  51.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCs2RvTzHk1J7L_5oxrdf8variableNtB2_8Variable6as_refCsBlCKulpTva_9spargebra:
   50|  41.1k|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|  41.1k|        VariableRef { name: &self.name }
   52|  41.1k|    }
_RNvXs1_NtCs2RvTzHk1J7L_5oxrdf8variableNtB5_11VariableRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsBlCKulpTva_9spargebra:
  116|  41.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|  41.1k|        write!(f, "?{}", self.name)
  118|  41.1k|    }
_RNvXsb_NtCs2RvTzHk1J7L_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsBlCKulpTva_9spargebra:
   13|   463M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCs2RvTzHk1J7L_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   35|  31.8k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  31.8k|        Self { name: name.into() }
   37|  31.8k|    }

_RINvXsh_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB6_7BooleanNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECshC9BJcurWLf_8oxigraph:
    8|     38|#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Ord, PartialOrd, Hash)]
_RNvXs4_NtCsaP05r1vbY5r_12oxsdatatypes7booleanbINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_7BooleanE4fromCshC9BJcurWLf_8oxigraph:
   60|  2.35k|    fn from(value: Boolean) -> Self {
   61|  2.35k|        value.value
   62|  2.35k|    }
_RNvXs1_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB5_7BooleanINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7decimal7DecimalE4fromCshC9BJcurWLf_8oxigraph:
   39|      2|    fn from(value: Decimal) -> Self {
   40|      2|        (value != Decimal::from(0)).into()
   41|      2|    }
_RNvXs8_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB5_7BooleanNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
    8|    799|#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Ord, PartialOrd, Hash)]
_RNvXs_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB4_7BooleanINtNtCs9nhK3FOW46N_4core7convert4FrombE4fromCshC9BJcurWLf_8oxigraph:
   25|  3.39k|    fn from(value: bool) -> Self {
   26|  3.39k|        Self { value }
   27|  3.39k|    }
_RNvXs0_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB5_7BooleanINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7integer7IntegerE4fromCshC9BJcurWLf_8oxigraph:
   32|      2|    fn from(value: Integer) -> Self {
   33|      2|        (value != Integer::from(0)).into()
   34|      2|    }
_RNvXs5_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB5_7BooleanNtNtNtCs9nhK3FOW46N_4core3str6traits7FromStr8from_strCshC9BJcurWLf_8oxigraph:
   69|  3.02k|    fn from_str(input: &str) -> Result<Self, Self::Err> {
   70|  3.02k|        Ok(match input {
   71|  3.02k|            "true" | "1" => true,
   72|  2.14k|            "false" | "0" => false,
   73|      0|            _ => bool::from_str(input)?,
   74|       |        }
   75|  3.02k|        .into())
   76|  3.02k|    }
_RNvXse_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB5_7BooleanNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCshC9BJcurWLf_8oxigraph:
    8|     16|#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Ord, PartialOrd, Hash)]
_RNvXs6_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB5_7BooleanNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCshC9BJcurWLf_8oxigraph:
   81|    244|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   82|    244|        self.value.fmt(f)
   83|    244|    }

_RNvMsN_NtCsaP05r1vbY5r_12oxsdatatypes9date_timeNtB5_9Timestamp3nowCshC9BJcurWLf_8oxigraph:
 1640|  4.96k|    fn now() -> Self {
 1641|  4.96k|        Self::new(
 1642|  4.96k|            &date_time_plus_duration(
 1643|  4.96k|                since_unix_epoch(),
 1644|  4.96k|                &DateTimeSevenPropertyModel {
 1645|  4.96k|                    year: Some(1970),
 1646|  4.96k|                    month: Some(1),
 1647|  4.96k|                    day: Some(1),
 1648|  4.96k|                    hour: Some(0),
 1649|  4.96k|                    minute: Some(0),
 1650|  4.96k|                    second: Some(Decimal::default()),
 1651|  4.96k|                    timezone_offset: Some(TimezoneOffset::UTC),
 1652|  4.96k|                },
 1653|  4.96k|            )
 1654|  4.96k|            .expect("The current time seems way in the future, it's strange"),
 1655|  4.96k|        )
 1656|  4.96k|        .expect("The current time seems way in the future, it's strange")
 1657|  4.96k|    }
_RNvMsN_NtCsaP05r1vbY5r_12oxsdatatypes9date_timeNtB5_9Timestamp3newCshC9BJcurWLf_8oxigraph:
 1632|  4.96k|    fn new(props: &DateTimeSevenPropertyModel) -> Result<Self, DateTimeOverflowError> {
 1633|  4.96k|        Ok(Self {
 1634|  4.96k|            timezone_offset: props.timezone_offset,
 1635|  4.96k|            value: time_on_timeline(props).ok_or(DateTimeOverflowError)?,
 1636|       |        })
 1637|  4.96k|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes9date_timeNtB2_8DateTime3nowCshC9BJcurWLf_8oxigraph:
   51|  4.96k|    pub fn now() -> Self {
   52|  4.96k|        Self {
   53|  4.96k|            timestamp: Timestamp::now(),
   54|  4.96k|        }
   55|  4.96k|    }
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time13normalize_day:
 1921|  4.96k|fn normalize_day(yr: i64, mo: i64, mut da: i64) -> Option<(i64, u8, u8)> {
 1922|  4.96k|    let (mut yr, mut mo) = normalize_month(yr, mo)?;
 1923|       |    loop {
 1924|  3.24M|        if da <= 0 {
 1925|      0|            let (yr2, mo2) = normalize_month(yr, i64::from(mo).checked_sub(1)?)?;
 1926|      0|            yr = yr2;
 1927|      0|            mo = mo2;
 1928|      0|            da = da.checked_add(days_in_month(Some(yr), mo).into())?;
 1929|  3.24M|        } else if da > days_in_month(Some(yr), mo).into() {
 1930|  3.23M|            da = da.checked_sub(days_in_month(Some(yr), mo).into())?;
 1931|  3.23M|            let (yr2, mo2) = normalize_month(yr, i64::from(mo).checked_add(1)?)?;
 1932|  3.23M|            yr = yr2;
 1933|  3.23M|            mo = mo2;
 1934|       |        } else {
 1935|  4.96k|            return Some((yr, mo, u8::try_from(da).ok()?));
 1936|       |        };
 1937|       |    }
 1938|  4.96k|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time15normalize_month:
 1902|  3.24M|fn normalize_month(yr: i64, mo: i64) -> Option<(i64, u8)> {
 1903|  3.24M|    if mo >= 0 {
 1904|  3.24M|        let yr = yr.checked_add(mo.checked_sub(1)?.checked_div(12)?)?;
 1905|  3.24M|        let mo = u8::try_from(mo.checked_sub(1)?.checked_rem(12)?.abs().checked_add(1)?).ok()?;
 1906|  3.24M|        Some((yr, mo))
 1907|       |    } else {
 1908|       |        // Needed to make it work with negative durations
 1909|      0|        let yr = yr.checked_add(mo.checked_sub(1)?.checked_div(12)?.checked_sub(1)?)?;
 1910|      0|        let mo = u8::try_from(
 1911|       |            12_i64
 1912|      0|                .checked_add(mo.checked_sub(1)?.checked_rem(12)?)?
 1913|      0|                .checked_add(1)?,
 1914|       |        )
 1915|      0|        .ok()?;
 1916|      0|        Some((yr, mo))
 1917|       |    }
 1918|  3.24M|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16time_on_timeline:
 2014|  4.96k|fn time_on_timeline(props: &DateTimeSevenPropertyModel) -> Option<Decimal> {
 2015|  4.96k|    let yr = props.year.map_or(1971, |y| y - 1);
 2016|  4.96k|    let mo = props.month.unwrap_or(12);
 2017|  4.96k|    let da = props
 2018|  4.96k|        .day
 2019|  4.96k|        .map_or_else(|| days_in_month(Some(yr + 1), mo) - 1, |d| d - 1);
 2020|  4.96k|    let hr = props.hour.unwrap_or(0);
 2021|  4.96k|    let mi = i128::from(props.minute.unwrap_or(0))
 2022|  4.96k|        - i128::from(props.timezone_offset.unwrap_or(TimezoneOffset::UTC).offset);
 2023|  4.96k|    let se = props.second.unwrap_or_default();
 2024|  4.96k|
 2025|  4.96k|    Decimal::try_from(
 2026|  4.96k|        31_536_000 * i128::from(yr)
 2027|  4.96k|            + 86400 * i128::from(yr.div_euclid(400) - yr.div_euclid(100) + yr.div_euclid(4))
 2028|  4.96k|            + 86400
 2029|  4.96k|                * (1..mo)
 2030|  4.96k|                    .map(|m| i128::from(days_in_month(Some(yr + 1), m)))
 2031|  4.96k|                    .sum::<i128>()
 2032|  4.96k|            + 86400 * i128::from(da)
 2033|  4.96k|            + 3600 * i128::from(hr)
 2034|  4.96k|            + 60 * mi,
 2035|  4.96k|    )
 2036|  4.96k|    .ok()?
 2037|  4.96k|    .checked_add(se)
 2038|  4.96k|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_duration:
 1985|  4.96k|fn date_time_plus_duration(
 1986|  4.96k|    du: Duration,
 1987|  4.96k|    dt: &DateTimeSevenPropertyModel,
 1988|  4.96k|) -> Option<DateTimeSevenPropertyModel> {
 1989|  4.96k|    let yr = dt.year.unwrap_or(1);
 1990|  4.96k|    let mo = dt.month.unwrap_or(1);
 1991|  4.96k|    let da = dt.day.unwrap_or(1);
 1992|  4.96k|    let hr = dt.hour.unwrap_or(0);
 1993|  4.96k|    let mi = dt.minute.unwrap_or(0);
 1994|  4.96k|    let se = dt.second.unwrap_or_default();
 1995|  4.96k|    let mo = i64::from(mo).checked_add(du.all_months())?;
 1996|  4.96k|    let (yr, mo) = normalize_month(yr, mo)?;
 1997|  4.96k|    let da = min(da, days_in_month(Some(yr), mo));
 1998|  4.96k|    let se = se.checked_add(du.all_seconds())?;
 1999|  4.96k|    let (yr, mo, da, hr, mi, se) =
 2000|  4.96k|        normalize_second(yr, mo.into(), da.into(), hr.into(), mi.into(), se)?;
 2001|       |
 2002|  4.96k|    Some(DateTimeSevenPropertyModel {
 2003|  4.96k|        year: dt.year.map(|_| yr),
 2004|  4.96k|        month: dt.month.map(|_| mo),
 2005|  4.96k|        day: dt.day.map(|_| da),
 2006|  4.96k|        hour: dt.hour.map(|_| hr),
 2007|  4.96k|        minute: dt.minute.map(|_| mi),
 2008|  4.96k|        second: dt.second.map(|_| se),
 2009|  4.96k|        timezone_offset: dt.timezone_offset,
 2010|  4.96k|    })
 2011|  4.96k|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16since_unix_epoch:
 1891|  4.96k|fn since_unix_epoch() -> Duration {
 1892|  4.96k|    use std::time::SystemTime;
 1893|  4.96k|
 1894|  4.96k|    SystemTime::now()
 1895|  4.96k|        .duration_since(SystemTime::UNIX_EPOCH)
 1896|  4.96k|        .expect("System time before UNIX epoch")
 1897|  4.96k|        .try_into()
 1898|  4.96k|        .expect("The current time seems way in the future, it's strange")
 1899|  4.96k|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time13days_in_month:
 1966|  6.50M|fn days_in_month(y: Option<i64>, m: u8) -> u8 {
 1967|  6.50M|    match m {
 1968|       |        2 => {
 1969|   551k|            if let Some(y) = y {
 1970|   551k|                if y % 4 != 0 || (y % 100 == 0 && y % 400 != 0) {
 1971|   407k|                    28
 1972|       |                } else {
 1973|   144k|                    29
 1974|       |                }
 1975|       |            } else {
 1976|      0|                28
 1977|       |            }
 1978|       |        }
 1979|  2.16M|        4 | 6 | 9 | 11 => 30,
 1980|  3.79M|        _ => 31,
 1981|       |    }
 1982|  6.50M|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16normalize_second:
 1951|  4.96k|fn normalize_second(
 1952|  4.96k|    yr: i64,
 1953|  4.96k|    mo: i64,
 1954|  4.96k|    da: i64,
 1955|  4.96k|    hr: i64,
 1956|  4.96k|    mi: i64,
 1957|  4.96k|    se: Decimal,
 1958|  4.96k|) -> Option<(i64, u8, u8, u8, u8, Decimal)> {
 1959|  4.96k|    let mi = mi.checked_add(i64::try_from(se.as_i128().checked_div(60)?).ok()?)?; // TODO: good idea?
 1960|  4.96k|    let se = se.checked_rem(60)?;
 1961|  4.96k|    let (yr, mo, da, hr, mi) = normalize_minute(yr, mo, da, hr, mi)?;
 1962|  4.96k|    Some((yr, mo, da, hr, mi, se))
 1963|  4.96k|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16normalize_minute:
 1941|  4.96k|fn normalize_minute(yr: i64, mo: i64, da: i64, hr: i64, mi: i64) -> Option<(i64, u8, u8, u8, u8)> {
 1942|  4.96k|    let hr = hr.checked_add(mi.checked_div(60)?)?;
 1943|  4.96k|    let mi = mi.checked_rem(60)?;
 1944|  4.96k|    let da = da.checked_add(hr.checked_div(24)?)?;
 1945|  4.96k|    let hr = hr.checked_rem(24)?;
 1946|  4.96k|    let (yr, mo, da) = normalize_day(yr, mo, da)?;
 1947|  4.96k|    Some((yr, mo, da, u8::try_from(hr).ok()?, u8::try_from(mi).ok()?))
 1948|  4.96k|}
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_durations1_0B5_:
 2006|  4.96k|        hour: dt.hour.map(|_| hr),
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16time_on_timeline0B5_:
 2015|  4.96k|    let yr = props.year.map_or(1971, |y| y - 1);
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_durations_0B5_:
 2004|  4.96k|        month: dt.month.map(|_| mo),
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16time_on_timelines0_0B5_:
 2019|  4.96k|        .map_or_else(|| days_in_month(Some(yr + 1), mo) - 1, |d| d - 1);
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_durations3_0B5_:
 2008|  4.96k|        second: dt.second.map(|_| se),
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_durations2_0B5_:
 2007|  4.96k|        minute: dt.minute.map(|_| mi),
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_durations0_0B5_:
 2005|  4.96k|        day: dt.day.map(|_| da),
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16time_on_timelines1_0B5_:
 2030|  19.8k|                    .map(|m| i128::from(days_in_month(Some(yr + 1), m)))
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_duration0B5_:
 2003|  4.96k|        year: dt.year.map(|_| yr),

_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB2_7Decimal11to_be_bytesCshC9BJcurWLf_8oxigraph:
   54|  5.00k|    pub fn to_be_bytes(self) -> [u8; 16] {
   55|  5.00k|        self.value.to_be_bytes()
   56|  5.00k|    }
_RNvXs2_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalINtNtCs9nhK3FOW46N_4core7convert4FromlE4fromCshC9BJcurWLf_8oxigraph:
  298|      2|    fn from(value: i32) -> Self {
  299|      2|        Self {
  300|      2|            value: i128::from(value) * DECIMAL_PART_POW,
  301|      2|        }
  302|      2|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB2_7Decimal11checked_negCshC9BJcurWLf_8oxigraph:
  177|     30|    pub fn checked_neg(self) -> Option<Self> {
  178|     30|        Some(Self {
  179|     30|            value: self.value.checked_neg()?,
  180|       |        })
  181|     30|    }
_RNvXsn_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCshC9BJcurWLf_8oxigraph:
   15|      8|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash, Default)]
_RNvXsp_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalNtNtCs9nhK3FOW46N_4core3cmp10PartialOrd11partial_cmpCshC9BJcurWLf_8oxigraph:
   15|      2|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash, Default)]
_RNvXsr_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
   15|    325|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash, Default)]
_RNvXsu_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalNtNtCs9nhK3FOW46N_4core7default7Default7defaultCshC9BJcurWLf_8oxigraph:
   15|  4.96k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash, Default)]
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB2_7Decimal17is_identical_withCshC9BJcurWLf_8oxigraph:
  258|      8|    pub fn is_identical_with(self, other: Self) -> bool {
  259|      8|        self == other
  260|      8|    }
_RNvXs8_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7integer7IntegerE4fromCshC9BJcurWLf_8oxigraph:
  352|    129|    fn from(value: Integer) -> Self {
  353|    129|        i64::from(value).into()
  354|    129|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB2_7Decimal13from_be_bytesCshC9BJcurWLf_8oxigraph:
   46|    699|    pub fn from_be_bytes(bytes: [u8; 16]) -> Self {
   47|    699|        Self {
   48|    699|            value: i128::from_be_bytes(bytes),
   49|    699|        }
   50|    699|    }
_RNvXs3_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalINtNtCs9nhK3FOW46N_4core7convert4FromxE4fromCshC9BJcurWLf_8oxigraph:
  307|    129|    fn from(value: i64) -> Self {
  308|    129|        Self {
  309|    129|            value: i128::from(value) * DECIMAL_PART_POW,
  310|    129|        }
  311|    129|    }
_RINvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB3_7Decimal11checked_subBF_ECshC9BJcurWLf_8oxigraph:
   74|     22|    pub fn checked_sub(self, rhs: impl Into<Self>) -> Option<Self> {
   75|     22|        Some(Self {
   76|     22|            value: self.value.checked_sub(rhs.into().value)?,
   77|       |        })
   78|     22|    }
_RINvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB3_7Decimal11checked_mulBF_ECshC9BJcurWLf_8oxigraph:
   85|     12|    pub fn checked_mul(self, rhs: impl Into<Self>) -> Option<Self> {
   86|     12|        // Idea: we shift right as much as possible to keep as much precision as possible
   87|     12|        // Do the multiplication and do the required left shift
   88|     12|        let mut left = self.value;
   89|     12|        let mut shift_left = 0_u32;
   90|     12|        if left != 0 {
   91|      0|            while left % 10 == 0 {
   92|      0|                left /= 10;
   93|      0|                shift_left += 1;
   94|      0|            }
   95|     12|        }
   96|       |
   97|     12|        let mut right = rhs.into().value;
   98|     12|        let mut shift_right = 0_u32;
   99|     12|        if right != 0 {
  100|      0|            while right % 10 == 0 {
  101|      0|                right /= 10;
  102|      0|                shift_right += 1;
  103|      0|            }
  104|     12|        }
  105|       |
  106|       |        // We do multiplication + shift
  107|     12|        let shift = (shift_left + shift_right).checked_sub(DECIMAL_PART_DIGITS)?;
  108|       |        Some(Self {
  109|      0|            value: left
  110|      0|                .checked_mul(right)?
  111|      0|                .checked_mul(10_i128.checked_pow(shift)?)?,
  112|       |        })
  113|     12|    }
_RINvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB3_7Decimal11checked_divNtNtB5_7integer7IntegerECshC9BJcurWLf_8oxigraph:
  120|     62|    pub fn checked_div(self, rhs: impl Into<Self>) -> Option<Self> {
  121|     62|        // Idea: we shift the dividend left as much as possible to keep as much precision as possible
  122|     62|        // And we shift right the divisor as much as possible
  123|     62|        // Do the multiplication and do the required shift
  124|     62|        let mut left = self.value;
  125|     62|        let mut shift_left = 0_u32;
  126|     62|        if left != 0 {
  127|  1.30k|            while let Some(r) = left.checked_mul(10) {
  128|  1.24k|                left = r;
  129|  1.24k|                shift_left += 1;
  130|  1.24k|            }
  131|      0|        }
  132|     62|        let mut right = rhs.into().value;
  133|     62|        let mut shift_right = 0_u32;
  134|     62|        if right != 0 {
  135|  1.17k|            while right % 10 == 0 {
  136|  1.11k|                right /= 10;
  137|  1.11k|                shift_right += 1;
  138|  1.11k|            }
  139|      0|        }
  140|       |
  141|       |        // We do division + shift
  142|     62|        let shift = (shift_left + shift_right).checked_sub(DECIMAL_PART_DIGITS)?;
  143|       |        Some(Self {
  144|     62|            value: left
  145|     62|                .checked_div(right)?
  146|     62|                .checked_div(10_i128.checked_pow(shift)?)?,
  147|       |        })
  148|     62|    }
_RINvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB3_7Decimal11checked_divBF_ECshC9BJcurWLf_8oxigraph:
  120|      2|    pub fn checked_div(self, rhs: impl Into<Self>) -> Option<Self> {
  121|      2|        // Idea: we shift the dividend left as much as possible to keep as much precision as possible
  122|      2|        // And we shift right the divisor as much as possible
  123|      2|        // Do the multiplication and do the required shift
  124|      2|        let mut left = self.value;
  125|      2|        let mut shift_left = 0_u32;
  126|      2|        if left != 0 {
  127|      0|            while let Some(r) = left.checked_mul(10) {
  128|      0|                left = r;
  129|      0|                shift_left += 1;
  130|      0|            }
  131|      2|        }
  132|      2|        let mut right = rhs.into().value;
  133|      2|        let mut shift_right = 0_u32;
  134|      2|        if right != 0 {
  135|      0|            while right % 10 == 0 {
  136|      0|                right /= 10;
  137|      0|                shift_right += 1;
  138|      0|            }
  139|      2|        }
  140|       |
  141|       |        // We do division + shift
  142|      2|        let shift = (shift_left + shift_right).checked_sub(DECIMAL_PART_DIGITS)?;
  143|       |        Some(Self {
  144|      0|            value: left
  145|      0|                .checked_div(right)?
  146|      0|                .checked_div(10_i128.checked_pow(shift)?)?,
  147|       |        })
  148|      2|    }
_RINvXst_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB6_7DecimalNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECshC9BJcurWLf_8oxigraph:
   15|     20|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash, Default)]
_RINvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB3_7Decimal11checked_addBF_EB5_:
   63|  9.93k|    pub fn checked_add(self, rhs: impl Into<Self>) -> Option<Self> {
   64|  9.93k|        Some(Self {
   65|  9.93k|            value: self.value.checked_add(rhs.into().value)?,
   66|       |        })
   67|  9.93k|    }
_RINvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB3_7Decimal11checked_remlEB5_:
  155|  4.96k|    pub fn checked_rem(self, rhs: impl Into<Self>) -> Option<Self> {
  156|  4.96k|        Some(Self {
  157|  4.96k|            value: self.value.checked_rem(rhs.into().value)?,
  158|       |        })
  159|  4.96k|    }
_RNCNvXsi_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB7_7DecimalNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt0B9_:
  567|  12.3k|            .find_map(|(i, v)| if v == b'0' { None } else { Some(i) })
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB2_7Decimal3newB4_:
   28|  4.96k|    pub const fn new(i: i128, n: u32) -> Result<Self, TooLargeForDecimalError> {
   29|  4.96k|        let Some(shift) = DECIMAL_PART_DIGITS.checked_sub(n) else {
   30|      0|            return Err(TooLargeForDecimalError);
   31|       |        };
   32|  4.96k|        let Some(value) = i.checked_mul(10_i128.pow(shift)) else {
   33|      0|            return Err(TooLargeForDecimalError);
   34|       |        };
   35|  4.96k|        Ok(Self { value })
   36|  4.96k|    }
_RNvXs2_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalINtNtCs9nhK3FOW46N_4core7convert4FromlE4fromB7_:
  298|  4.96k|    fn from(value: i32) -> Self {
  299|  4.96k|        Self {
  300|  4.96k|            value: i128::from(value) * DECIMAL_PART_POW,
  301|  4.96k|        }
  302|  4.96k|    }
_RNvXsh_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalNtNtNtCs9nhK3FOW46N_4core3str6traits7FromStr8from_str:
  464|  1.90k|    fn from_str(input: &str) -> Result<Self, Self::Err> {
  465|  1.90k|        // (\+|-)?([0-9]+(\.[0-9]*)?|\.[0-9]+)
  466|  1.90k|        let input = input.as_bytes();
  467|  1.90k|        if input.is_empty() {
  468|      0|            return Err(PARSE_UNEXPECTED_END);
  469|  1.90k|        }
  470|       |
  471|  1.90k|        let (sign, mut input) = match input.first() {
  472|      0|            Some(b'+') => (1_i128, &input[1..]),
  473|      0|            Some(b'-') => (-1_i128, &input[1..]),
  474|  1.90k|            _ => (1, input),
  475|       |        };
  476|       |
  477|  1.90k|        let mut value = 0_i128;
  478|  1.90k|        let with_before_dot = input.first().map_or(false, u8::is_ascii_digit);
  479|  3.81k|        while let Some(c) = input.first() {
  480|  3.80k|            if c.is_ascii_digit() {
  481|  1.90k|                value = value
  482|  1.90k|                    .checked_mul(10)
  483|  1.90k|                    .ok_or(PARSE_OVERFLOW)?
  484|  1.90k|                    .checked_add(sign * i128::from(*c - b'0'))
  485|  1.90k|                    .ok_or(PARSE_OVERFLOW)?;
  486|  1.90k|                input = &input[1..];
  487|       |            } else {
  488|  1.90k|                break;
  489|       |            }
  490|       |        }
  491|       |
  492|  1.90k|        let mut exp = DECIMAL_PART_POW;
  493|  1.90k|        if let Some(c) = input.first() {
  494|  1.90k|            if *c != b'.' {
  495|      0|                return Err(PARSE_UNEXPECTED_CHAR);
  496|  1.90k|            }
  497|  1.90k|            input = &input[1..];
  498|  1.90k|            if input.is_empty() && !with_before_dot {
  499|       |                // We only have a dot
  500|      0|                return Err(PARSE_UNEXPECTED_END);
  501|  1.90k|            }
  502|  3.80k|            while input.last() == Some(&b'0') {
  503|  1.90k|                // Hack to avoid underflows
  504|  1.90k|                input = &input[..input.len() - 1];
  505|  1.90k|            }
  506|  1.90k|            while let Some(c) = input.first() {
  507|      0|                if c.is_ascii_digit() {
  508|      0|                    exp /= 10;
  509|      0|                    value = value
  510|      0|                        .checked_mul(10)
  511|      0|                        .ok_or(PARSE_OVERFLOW)?
  512|      0|                        .checked_add(sign * i128::from(*c - b'0'))
  513|      0|                        .ok_or(PARSE_OVERFLOW)?;
  514|      0|                    input = &input[1..];
  515|       |                } else {
  516|      0|                    return Err(PARSE_UNEXPECTED_CHAR);
  517|       |                }
  518|       |            }
  519|  1.90k|            if exp == 0 {
  520|       |                // Underflow
  521|      0|                return Err(PARSE_UNDERFLOW);
  522|  1.90k|            }
  523|      8|        } else if !with_before_dot {
  524|       |            // It's empty
  525|      0|            return Err(PARSE_UNEXPECTED_END);
  526|      8|        }
  527|       |
  528|       |        Ok(Self {
  529|  1.90k|            value: value.checked_mul(exp).ok_or(PARSE_OVERFLOW)?,
  530|       |        })
  531|  1.90k|    }
_RNvXsi_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  537|    688|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  538|    688|        if self.value == 0 {
  539|     40|            return if let Some(width) = f.width() {
  540|      0|                for _ in 0..width {
  541|      0|                    f.write_char('0')?;
  542|       |                }
  543|      0|                Ok(())
  544|       |            } else {
  545|     40|                f.write_char('0')
  546|       |            };
  547|    648|        }
  548|    648|
  549|    648|        let mut value = self.value;
  550|    648|        if self.value.is_negative() {
  551|      0|            f.write_char('-')?;
  552|    648|        }
  553|       |
  554|    648|        let mut digits = [b'0'; 40];
  555|    648|        let mut i = 0;
  556|  12.9k|        while value != 0 {
  557|  12.3k|            digits[i] = b'0' + ((value % 10).unsigned_abs() as u8);
  558|  12.3k|            value /= 10;
  559|  12.3k|            i += 1;
  560|  12.3k|        }
  561|       |
  562|    648|        let last_non_zero = i - 1;
  563|    648|        let first_non_zero = digits
  564|    648|            .iter()
  565|    648|            .copied()
  566|    648|            .enumerate()
  567|    648|            .find_map(|(i, v)| if v == b'0' { None } else { Some(i) })
  568|    648|            .unwrap_or(40);
  569|       |
  570|    648|        let decimal_part_digits = usize::try_from(DECIMAL_PART_DIGITS).map_err(|_| fmt::Error)?;
  571|    648|        if last_non_zero >= decimal_part_digits {
  572|    648|            let end = if let Some(mut width) = f.width() {
  573|      0|                if self.value.is_negative() {
  574|      0|                    width -= 1;
  575|      0|                }
  576|      0|                if last_non_zero - decimal_part_digits + 1 < width {
  577|      0|                    decimal_part_digits + width
  578|       |                } else {
  579|      0|                    last_non_zero + 1
  580|       |                }
  581|       |            } else {
  582|    648|                last_non_zero + 1
  583|       |            };
  584|    648|            for c in digits[decimal_part_digits..end].iter().rev() {
  585|    648|                f.write_char(char::from(*c))?;
  586|       |            }
  587|       |        } else {
  588|      0|            f.write_char('0')?
  589|       |        }
  590|    648|        if decimal_part_digits > first_non_zero {
  591|      0|            f.write_char('.')?;
  592|      0|            let start = if let Some(precision) = f.precision() {
  593|      0|                if decimal_part_digits - first_non_zero > precision {
  594|      0|                    decimal_part_digits - precision
  595|       |                } else {
  596|      0|                    first_non_zero
  597|       |                }
  598|       |            } else {
  599|      0|                first_non_zero
  600|       |            };
  601|      0|            for c in digits[start..decimal_part_digits].iter().rev() {
  602|      0|                f.write_char(char::from(*c))?;
  603|       |            }
  604|    648|        }
  605|       |
  606|    648|        Ok(())
  607|    688|    }
_RNvXsn_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   15|      2|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash, Default)]
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB2_7Decimal7as_i128B4_:
  264|  4.96k|    pub(super) const fn as_i128(self) -> i128 {
  265|  4.96k|        self.value / DECIMAL_PART_POW
  266|  4.96k|    }
_RNvXs9_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalINtNtCs9nhK3FOW46N_4core7convert7TryFromnE8try_fromB7_:
  361|  4.96k|    fn try_from(value: i128) -> Result<Self, Self::Error> {
  362|  4.96k|        Ok(Self {
  363|  4.96k|            value: value
  364|  4.96k|                .checked_mul(DECIMAL_PART_POW)
  365|  4.96k|                .ok_or(TooLargeForDecimalError)?,
  366|       |        })
  367|  4.96k|    }

_RNvMNtCsaP05r1vbY5r_12oxsdatatypes6doubleNtB2_6Double13from_be_bytesCshC9BJcurWLf_8oxigraph:
   32|     78|    pub fn from_be_bytes(bytes: [u8; 8]) -> Self {
   33|     78|        Self {
   34|     78|            value: f64::from_be_bytes(bytes),
   35|     78|        }
   36|     78|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes6doubleNtB2_6Double11to_be_bytesCshC9BJcurWLf_8oxigraph:
   40|  1.28k|    pub fn to_be_bytes(self) -> [u8; 8] {
   41|  1.28k|        self.value.to_be_bytes()
   42|  1.28k|    }
_RNvXs0_NtCsaP05r1vbY5r_12oxsdatatypes6doubleNtB5_6DoubleINtNtCs9nhK3FOW46N_4core7convert4FromdE4fromCshC9BJcurWLf_8oxigraph:
  101|  1.01k|    fn from(value: f64) -> Self {
  102|  1.01k|        Self { value }
  103|  1.01k|    }
_RNvXsb_NtCsaP05r1vbY5r_12oxsdatatypes6doubleNtB5_6DoubleNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCshC9BJcurWLf_8oxigraph:
  195|     80|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  196|     80|        if self.value == f64::INFINITY {
  197|      0|            f.write_str("INF")
  198|     80|        } else if self.value == f64::NEG_INFINITY {
  199|      0|            f.write_str("-INF")
  200|       |        } else {
  201|     80|            self.value.fmt(f)
  202|       |        }
  203|     80|    }
_RNvXsa_NtCsaP05r1vbY5r_12oxsdatatypes6doubleNtB5_6DoubleNtNtNtCs9nhK3FOW46N_4core3str6traits7FromStr8from_strCshC9BJcurWLf_8oxigraph:
  188|  1.01k|    fn from_str(input: &str) -> Result<Self, Self::Err> {
  189|  1.01k|        Ok(f64::from_str(input)?.into())
  190|  1.01k|    }
_RNvXsj_NtCsaP05r1vbY5r_12oxsdatatypes6doubleNtB5_6DoubleNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
   13|    553|#[derive(Debug, Clone, Copy, Default, PartialEq)]

_RNvMNtCsaP05r1vbY5r_12oxsdatatypes8durationNtB2_8Duration11all_secondsB4_:
  112|  4.96k|    pub(crate) const fn all_seconds(self) -> Decimal {
  113|  4.96k|        self.day_time.as_seconds()
  114|  4.96k|    }
_RNvXsd_NtCsaP05r1vbY5r_12oxsdatatypes8durationNtB5_8DurationINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_15DayTimeDurationE4fromB7_:
  569|  4.96k|    fn from(value: DayTimeDuration) -> Self {
  570|  4.96k|        Self {
  571|  4.96k|            year_month: YearMonthDuration::default(),
  572|  4.96k|            day_time: value,
  573|  4.96k|        }
  574|  4.96k|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes8durationNtB2_8Duration10all_monthsB4_:
  106|  4.96k|    pub(crate) const fn all_months(self) -> i64 {
  107|  4.96k|        self.year_month.all_months()
  108|  4.96k|    }
_RNvMs3_NtCsaP05r1vbY5r_12oxsdatatypes8durationNtB5_17YearMonthDuration10all_monthsB7_:
  332|  4.96k|    pub(crate) const fn all_months(self) -> i64 {
  333|  4.96k|        self.months
  334|  4.96k|    }
_RNvXsM_NtCsaP05r1vbY5r_12oxsdatatypes8durationNtB5_17YearMonthDurationNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
  296|  4.96k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash, Default)]
_RNvMsc_NtCsaP05r1vbY5r_12oxsdatatypes8durationNtB5_15DayTimeDuration10as_secondsB7_:
  519|  4.96k|    pub const fn as_seconds(self) -> Decimal {
  520|  4.96k|        self.seconds
  521|  4.96k|    }
_RNvXs_NtCsaP05r1vbY5r_12oxsdatatypes8durationNtB4_8DurationINtNtCs9nhK3FOW46N_4core7convert7TryFromNtNtB10_4time8DurationE8try_fromB6_:
  177|  4.96k|    fn try_from(value: StdDuration) -> Result<Self, Self::Error> {
  178|  4.96k|        Ok(DayTimeDuration::try_from(value)?.into())
  179|  4.96k|    }
_RNvXsf_NtCsaP05r1vbY5r_12oxsdatatypes8durationNtB5_15DayTimeDurationINtNtCs9nhK3FOW46N_4core7convert7TryFromNtNtB19_4time8DurationE8try_fromB7_:
  594|  4.96k|    fn try_from(value: StdDuration) -> Result<Self, Self::Error> {
  595|  4.96k|        Ok(Self {
  596|  4.96k|            seconds: Decimal::new(
  597|  4.96k|                i128::try_from(value.as_nanos()).map_err(|_| DurationOverflowError)?,
  598|       |                9,
  599|       |            )
  600|  4.96k|            .map_err(|_| DurationOverflowError)?,
  601|       |        })
  602|  4.96k|    }

_RINvMNtCsaP05r1vbY5r_12oxsdatatypes7integerNtB3_7Integer11checked_mulBF_ECshC9BJcurWLf_8oxigraph:
   60|      2|    pub fn checked_mul(self, rhs: impl Into<Self>) -> Option<Self> {
   61|      2|        Some(Self {
   62|      2|            value: self.value.checked_mul(rhs.into().value)?,
   63|       |        })
   64|      2|    }
_RINvXsn_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB6_7IntegerNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECshC9BJcurWLf_8oxigraph:
    9|     22|#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Ord, PartialOrd, Hash)]
_RNvXs8_NtCsaP05r1vbY5r_12oxsdatatypes7integerxINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_7IntegerE4fromCshC9BJcurWLf_8oxigraph:
  220|    129|    fn from(value: Integer) -> Self {
  221|    129|        value.value
  222|    129|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7integerNtB2_7Integer13from_be_bytesCshC9BJcurWLf_8oxigraph:
   21|    262|    pub fn from_be_bytes(bytes: [u8; 8]) -> Self {
   22|    262|        Self {
   23|    262|            value: i64::from_be_bytes(bytes),
   24|    262|        }
   25|    262|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7integerNtB2_7Integer11to_be_bytesCshC9BJcurWLf_8oxigraph:
   29|  2.34k|    pub fn to_be_bytes(self) -> [u8; 8] {
   30|  2.34k|        self.value.to_be_bytes()
   31|  2.34k|    }
_RNvXse_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB5_7IntegerNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
    9|    532|#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Ord, PartialOrd, Hash)]
_RNvXs9_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB5_7IntegerNtNtNtCs9nhK3FOW46N_4core3str6traits7FromStr8from_strCshC9BJcurWLf_8oxigraph:
  229|  2.02k|    fn from_str(input: &str) -> Result<Self, Self::Err> {
  230|  2.02k|        Ok(i64::from_str(input)?.into())
  231|  2.02k|    }
_RNvXsa_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB5_7IntegerNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCshC9BJcurWLf_8oxigraph:
  236|    290|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  237|    290|        self.value.fmt(f)
  238|    290|    }
_RNvXsk_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB5_7IntegerNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCshC9BJcurWLf_8oxigraph:
    9|      6|#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Ord, PartialOrd, Hash)]
_RNvXs3_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB5_7IntegerINtNtCs9nhK3FOW46N_4core7convert4FromxE4fromCshC9BJcurWLf_8oxigraph:
  179|  2.02k|    fn from(value: i64) -> Self {
  180|  2.02k|        Self { value }
  181|  2.02k|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7integerNtB2_7Integer17is_identical_withCshC9BJcurWLf_8oxigraph:
  136|      4|    pub fn is_identical_with(self, other: Self) -> bool {
  137|      4|        self == other
  138|      4|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7integerNtB2_7Integer11checked_negCshC9BJcurWLf_8oxigraph:
  104|    151|    pub fn checked_neg(self) -> Option<Self> {
  105|    151|        Some(Self {
  106|    151|            value: self.value.checked_neg()?,
  107|       |        })
  108|    151|    }
_RNvXs2_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB5_7IntegerINtNtCs9nhK3FOW46N_4core7convert4FromlE4fromCshC9BJcurWLf_8oxigraph:
  170|      2|    fn from(value: i32) -> Self {
  171|      2|        Self {
  172|      2|            value: value.into(),
  173|      2|        }
  174|      2|    }

_RNvXs1o_NtCsBlCKulpTva_9spargebra7algebraNtB6_11GraphTargetNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
 1354|  1.88k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1h_NtCsBlCKulpTva_9spargebra7algebraNtB6_12QueryDatasetNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
 1309|  1.77k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsu_NtCsBlCKulpTva_9spargebra7algebraNtB5_22PropertyPathExpressionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
    8|  6.16k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsB_NtCsBlCKulpTva_9spargebra7algebraNtB5_10ExpressionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
  101|  10.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCsBlCKulpTva_9spargebra7algebraNtB5_8FunctionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
  321|     29|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsP_NtCsBlCKulpTva_9spargebra7algebraNtB5_12GraphPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
  518|  26.7k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCsBlCKulpTva_9spargebra7algebraNtB5_8FunctionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsftsRMVBFYTr_7sparopt:
  321|    118|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsu_NtCsBlCKulpTva_9spargebra7algebraNtB5_22PropertyPathExpressionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsftsRMVBFYTr_7sparopt:
    8|  18.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvXsJ_NtCsBlCKulpTva_9spargebra7algebraNtB6_8FunctionNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsftsRMVBFYTr_7sparopt:
  321|     33|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvXsv_NtCsBlCKulpTva_9spargebra7algebraNtB6_22PropertyPathExpressionNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsftsRMVBFYTr_7sparopt:
    8|  6.97k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs5_NtCsBlCKulpTva_9spargebra7algebraNtB5_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableE4from:
  290|  6.69k|    fn from(v: Variable) -> Self {
  291|  6.69k|        Self::Variable(v)
  292|  6.69k|    }
_RNvXsc_NtCsBlCKulpTva_9spargebra7algebraNtB5_22SparqlGraphRootPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1040|    134|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1041|    134|        let mut distinct = false;
 1042|    134|        let mut reduced = false;
 1043|    134|        let mut order = None;
 1044|    134|        let mut start = 0;
 1045|    134|        let mut length = None;
 1046|    134|        let mut project: &[Variable] = &[];
 1047|    134|
 1048|    134|        let mut child = self.pattern;
 1049|       |        loop {
 1050|    150|            match child {
 1051|      0|                GraphPattern::OrderBy { inner, expression } => {
 1052|      0|                    order = Some(expression);
 1053|      0|                    child = inner;
 1054|      0|                }
 1055|    150|                GraphPattern::Project { inner, variables } if project.is_empty() => {
 1056|    136|                    project = variables;
 1057|    136|                    child = inner;
 1058|    136|                }
 1059|    110|                GraphPattern::Distinct { inner } => {
 1060|    110|                    distinct = true;
 1061|    110|                    child = inner;
 1062|    110|                }
 1063|      0|                GraphPattern::Reduced { inner } => {
 1064|      0|                    reduced = true;
 1065|      0|                    child = inner;
 1066|      0|                }
 1067|       |                GraphPattern::Slice {
 1068|      0|                    inner,
 1069|      0|                    start: s,
 1070|      0|                    length: l,
 1071|      0|                } => {
 1072|      0|                    start = *s;
 1073|      0|                    length = *l;
 1074|      0|                    child = inner;
 1075|      0|                }
 1076|    134|                p => {
 1077|    134|                    f.write_str("SELECT")?;
 1078|    134|                    if distinct {
 1079|    102|                        f.write_str(" DISTINCT")?;
 1080|     32|                    }
 1081|    134|                    if reduced {
 1082|      0|                        f.write_str(" REDUCED")?;
 1083|    134|                    }
 1084|    134|                    if project.is_empty() {
 1085|     26|                        f.write_str(" *")?;
 1086|       |                    } else {
 1087|    280|                        for v in project {
 1088|    172|                            write!(f, " {v}")?;
 1089|       |                        }
 1090|       |                    }
 1091|    134|                    if let Some(dataset) = self.dataset {
 1092|      0|                        write!(f, " {dataset}")?;
 1093|    134|                    }
 1094|    134|                    write!(f, " WHERE {{ {p} }}")?;
 1095|    134|                    if let Some(order) = order {
 1096|      0|                        f.write_str(" ORDER BY")?;
 1097|      0|                        for c in order {
 1098|      0|                            write!(f, " {c}")?;
 1099|       |                        }
 1100|    134|                    }
 1101|    134|                    if start > 0 {
 1102|      0|                        write!(f, " OFFSET {start}")?;
 1103|    134|                    }
 1104|    134|                    if let Some(length) = length {
 1105|      0|                        write!(f, " LIMIT {length}")?;
 1106|    134|                    }
 1107|    134|                    return Ok(());
 1108|       |                }
 1109|       |            }
 1110|       |        }
 1111|    134|    }
_RNvXs0_NtCsBlCKulpTva_9spargebra7algebraNtB5_22PropertyPathExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeE4from:
   95|  11.4k|    fn from(p: NamedNode) -> Self {
   96|  11.4k|        Self::NamedNode(p)
   97|  11.4k|    }
_RNvXs3_NtCsBlCKulpTva_9spargebra7algebraNtB5_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeE4from:
  278|    763|    fn from(p: NamedNode) -> Self {
  279|    763|        Self::NamedNode(p)
  280|    763|    }
_RNvXs4_NtCsBlCKulpTva_9spargebra7algebraNtB5_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf7literal7LiteralE4from:
  284|  3.50k|    fn from(p: Literal) -> Self {
  285|  3.50k|        Self::Literal(p)
  286|  3.50k|    }
_RNvXs_NtCsBlCKulpTva_9spargebra7algebraNtB4_22PropertyPathExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
   71|  97.9k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   72|  97.9k|        match self {
   73|  24.4k|            Self::NamedNode(p) => p.fmt(f),
   74|  31.4k|            Self::Reverse(p) => write!(f, "^({p})"),
   75|  11.3k|            Self::Sequence(a, b) => write!(f, "({a} / {b})"),
   76|  4.96k|            Self::Alternative(a, b) => write!(f, "({a} | {b})"),
   77|  2.90k|            Self::ZeroOrMore(p) => write!(f, "({p})*"),
   78|  5.51k|            Self::OneOrMore(p) => write!(f, "({p})+"),
   79|  12.7k|            Self::ZeroOrOne(p) => write!(f, "({p})?"),
   80|  4.55k|            Self::NegatedPropertySet(p) => {
   81|  4.55k|                f.write_str("!(")?;
   82|  17.5k|                for (i, c) in p.iter().enumerate() {
   83|  17.5k|                    if i > 0 {
   84|  12.9k|                        f.write_str(" | ")?;
   85|  4.55k|                    }
   86|  17.5k|                    write!(f, "{c}")?;
   87|       |                }
   88|  4.55k|                f.write_str(")")
   89|       |            }
   90|       |        }
   91|  97.9k|    }
_RNvXs2_NtCsBlCKulpTva_9spargebra7algebraNtB5_10ExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  218|  23.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  219|  23.0k|        match self {
  220|    614|            Self::NamedNode(node) => node.fmt(f),
  221|  4.21k|            Self::Literal(l) => l.fmt(f),
  222|  4.74k|            Self::Variable(var) => var.fmt(f),
  223|     38|            Self::Or(a, b) => write!(f, "({a} || {b})"),
  224|    288|            Self::And(a, b) => write!(f, "({a} && {b})"),
  225|    888|            Self::Equal(a, b) => {
  226|    888|                write!(f, "({a} = {b})")
  227|       |            }
  228|      3|            Self::SameTerm(a, b) => {
  229|      3|                write!(f, "sameTerm({a}, {b})")
  230|       |            }
  231|     36|            Self::Greater(a, b) => {
  232|     36|                write!(f, "({a} > {b})")
  233|       |            }
  234|    154|            Self::GreaterOrEqual(a, b) => write!(f, "({a} >= {b})"),
  235|     16|            Self::Less(a, b) => {
  236|     16|                write!(f, "({a} < {b})")
  237|       |            }
  238|     32|            Self::LessOrEqual(a, b) => write!(f, "({a} <= {b})"),
  239|      0|            Self::In(a, b) => {
  240|      0|                write!(f, "({a} IN ")?;
  241|      0|                write_arg_list(b, f)?;
  242|      0|                f.write_str(")")
  243|       |            }
  244|    270|            Self::Add(a, b) => {
  245|    270|                write!(f, "{a} + {b}")
  246|       |            }
  247|  1.76k|            Self::Subtract(a, b) => {
  248|  1.76k|                write!(f, "{a} - {b}")
  249|       |            }
  250|    598|            Self::Multiply(a, b) => {
  251|    598|                write!(f, "{a} * {b}")
  252|       |            }
  253|  3.33k|            Self::Divide(a, b) => {
  254|  3.33k|                write!(f, "{a} / {b}")
  255|       |            }
  256|    328|            Self::UnaryPlus(e) => write!(f, "+{e}"),
  257|  2.28k|            Self::UnaryMinus(e) => write!(f, "-{e}"),
  258|  2.29k|            Self::Not(e) => match e.as_ref() {
  259|     67|                Self::Exists(p) => write!(f, "NOT EXISTS {{ {p} }}"),
  260|  2.22k|                e => write!(f, "!{e}"),
  261|       |            },
  262|     60|            Self::FunctionCall(function, parameters) => {
  263|     60|                write!(f, "{function}")?;
  264|     60|                write_arg_list(parameters, f)
  265|       |            }
  266|    203|            Self::Bound(v) => write!(f, "BOUND({v})"),
  267|     67|            Self::Exists(p) => write!(f, "EXISTS {{ {p} }}"),
  268|    734|            Self::If(a, b, c) => write!(f, "IF({a}, {b}, {c})"),
  269|     82|            Self::Coalesce(parameters) => {
  270|     82|                f.write_str("COALESCE")?;
  271|     82|                write_arg_list(parameters, f)
  272|       |            }
  273|       |        }
  274|  23.0k|    }
_RNvXso_NtCsBlCKulpTva_9spargebra7algebraNtB5_11GraphTargetINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_4term9GraphNameE4from:
 1392|    434|    fn from(graph_name: GraphName) -> Self {
 1393|    434|        match graph_name {
 1394|    297|            GraphName::NamedNode(node) => Self::NamedNode(node),
 1395|    137|            GraphName::DefaultGraph => Self::DefaultGraph,
 1396|       |        }
 1397|    434|    }
_RNvXsu_NtCsBlCKulpTva_9spargebra7algebraNtB5_22PropertyPathExpressionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
    8|   236k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsa_NtCsBlCKulpTva_9spargebra7algebraNtB5_12GraphPatternNtNtCs9nhK3FOW46N_4core7default7Default7default:
  719|  3.94k|    fn default() -> Self {
  720|  3.94k|        Self::Bgp {
  721|  3.94k|            patterns: Vec::default(),
  722|  3.94k|        }
  723|  3.94k|    }
_RNvXs8_NtCsBlCKulpTva_9spargebra7algebraNtB5_8FunctionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  452|     60|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  453|     60|        match self {
  454|     10|            Self::Str => f.write_str("STR"),
  455|      6|            Self::Lang => f.write_str("LANG"),
  456|      0|            Self::LangMatches => f.write_str("LANGMATCHES"),
  457|      2|            Self::Datatype => f.write_str("DATATYPE"),
  458|      4|            Self::Iri => f.write_str("IRI"),
  459|      8|            Self::BNode => f.write_str("BNODE"),
  460|      0|            Self::Rand => f.write_str("RAND"),
  461|      0|            Self::Abs => f.write_str("ABS"),
  462|      0|            Self::Ceil => f.write_str("CEIL"),
  463|      0|            Self::Floor => f.write_str("FLOOR"),
  464|      0|            Self::Round => f.write_str("ROUND"),
  465|      0|            Self::Concat => f.write_str("CONCAT"),
  466|      0|            Self::SubStr => f.write_str("SUBSTR"),
  467|      0|            Self::StrLen => f.write_str("STRLEN"),
  468|      0|            Self::Replace => f.write_str("REPLACE"),
  469|      0|            Self::UCase => f.write_str("UCASE"),
  470|      0|            Self::LCase => f.write_str("LCASE"),
  471|      0|            Self::EncodeForUri => f.write_str("ENCODE_FOR_URI"),
  472|      0|            Self::Contains => f.write_str("CONTAINS"),
  473|      0|            Self::StrStarts => f.write_str("STRSTARTS"),
  474|      0|            Self::StrEnds => f.write_str("STRENDS"),
  475|      0|            Self::StrBefore => f.write_str("STRBEFORE"),
  476|      0|            Self::StrAfter => f.write_str("STRAFTER"),
  477|      0|            Self::Year => f.write_str("YEAR"),
  478|      0|            Self::Month => f.write_str("MONTH"),
  479|      0|            Self::Day => f.write_str("DAY"),
  480|      0|            Self::Hours => f.write_str("HOURS"),
  481|      0|            Self::Minutes => f.write_str("MINUTES"),
  482|      0|            Self::Seconds => f.write_str("SECONDS"),
  483|      0|            Self::Timezone => f.write_str("TIMEZONE"),
  484|      0|            Self::Tz => f.write_str("TZ"),
  485|      0|            Self::Now => f.write_str("NOW"),
  486|      0|            Self::Uuid => f.write_str("UUID"),
  487|      0|            Self::StrUuid => f.write_str("STRUUID"),
  488|      0|            Self::Md5 => f.write_str("MD5"),
  489|      0|            Self::Sha1 => f.write_str("SHA1"),
  490|      0|            Self::Sha256 => f.write_str("SHA256"),
  491|      0|            Self::Sha384 => f.write_str("SHA384"),
  492|      0|            Self::Sha512 => f.write_str("SHA512"),
  493|      0|            Self::StrLang => f.write_str("STRLANG"),
  494|      2|            Self::StrDt => f.write_str("STRDT"),
  495|      6|            Self::IsIri => f.write_str("isIRI"),
  496|     14|            Self::IsBlank => f.write_str("isBLANK"),
  497|      0|            Self::IsLiteral => f.write_str("isLITERAL"),
  498|      8|            Self::IsNumeric => f.write_str("isNUMERIC"),
  499|      0|            Self::Regex => f.write_str("REGEX"),
  500|       |            #[cfg(feature = "rdf-star")]
  501|      0|            Self::Triple => f.write_str("TRIPLE"),
  502|       |            #[cfg(feature = "rdf-star")]
  503|      0|            Self::Subject => f.write_str("SUBJECT"),
  504|       |            #[cfg(feature = "rdf-star")]
  505|      0|            Self::Predicate => f.write_str("PREDICATE"),
  506|       |            #[cfg(feature = "rdf-star")]
  507|      0|            Self::Object => f.write_str("OBJECT"),
  508|       |            #[cfg(feature = "rdf-star")]
  509|      0|            Self::IsTriple => f.write_str("isTRIPLE"),
  510|       |            #[cfg(feature = "sep-0002")]
  511|      0|            Self::Adjust => f.write_str("ADJUST"),
  512|      0|            Self::Custom(iri) => iri.fmt(f),
  513|       |        }
  514|     60|    }
_RNvXs9_NtCsBlCKulpTva_9spargebra7algebraNtB5_12GraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  595|  1.84k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  596|  1.84k|        match self {
  597|    107|            Self::Bgp { patterns } => {
  598|    401|                for pattern in patterns {
  599|    294|                    write!(f, "{pattern} .")?
  600|       |                }
  601|    107|                Ok(())
  602|       |            }
  603|       |            Self::Path {
  604|    522|                subject,
  605|    522|                path,
  606|    522|                object,
  607|    522|            } => write!(f, "{subject} {path} {object} ."),
  608|    547|            Self::Join { left, right } => {
  609|    547|                #[allow(clippy::match_same_arms)]
  610|    547|                match right.as_ref() {
  611|       |                    Self::LeftJoin { .. }
  612|       |                    | Self::Minus { .. }
  613|       |                    | Self::Extend { .. }
  614|       |                    | Self::Filter { .. } => {
  615|       |                        // The second block might be considered as a modification of the first one.
  616|      0|                        write!(f, "{left} {{ {right} }}")
  617|       |                    }
  618|       |                    #[cfg(feature = "sep-0006")]
  619|       |                    Self::Lateral { .. } => {
  620|      0|                        write!(f, "{left} {{ {right} }}")
  621|       |                    }
  622|    547|                    _ => write!(f, "{left} {right}"),
  623|       |                }
  624|       |            }
  625|       |            Self::LeftJoin {
  626|     12|                left,
  627|     12|                right,
  628|     12|                expression,
  629|       |            } => {
  630|     12|                if let Some(expr) = expression {
  631|      0|                    write!(f, "{left} OPTIONAL {{ {right} FILTER({expr}) }}")
  632|       |                } else {
  633|     12|                    write!(f, "{left} OPTIONAL {{ {right} }}")
  634|       |                }
  635|       |            }
  636|       |            #[cfg(feature = "sep-0006")]
  637|      2|            Self::Lateral { left, right } => {
  638|      2|                write!(f, "{left} LATERAL {{ {right} }}")
  639|       |            }
  640|      0|            Self::Filter { expr, inner } => {
  641|      0|                write!(f, "{inner} FILTER({expr})")
  642|       |            }
  643|      0|            Self::Union { left, right } => write!(f, "{{ {left} }} UNION {{ {right} }}"),
  644|    418|            Self::Graph { name, inner } => {
  645|    418|                write!(f, "GRAPH {name} {{ {inner} }}")
  646|       |            }
  647|       |            Self::Extend {
  648|     34|                inner,
  649|     34|                variable,
  650|     34|                expression,
  651|     34|            } => write!(f, "{inner} BIND({expression} AS {variable})"),
  652|      0|            Self::Minus { left, right } => write!(f, "{left} MINUS {{ {right} }}"),
  653|       |            Self::Service {
  654|      0|                name,
  655|      0|                inner,
  656|      0|                silent,
  657|      0|            } => {
  658|      0|                if *silent {
  659|      0|                    write!(f, "SERVICE SILENT {name} {{ {inner} }}")
  660|       |                } else {
  661|      0|                    write!(f, "SERVICE {name} {{ {inner} }}")
  662|       |                }
  663|       |            }
  664|       |            Self::Values {
  665|     66|                variables,
  666|     66|                bindings,
  667|     66|            } => {
  668|     66|                f.write_str("VALUES ( ")?;
  669|    129|                for var in variables {
  670|     63|                    write!(f, "{var} ")?;
  671|       |                }
  672|     66|                f.write_str(") { ")?;
  673|    130|                for row in bindings {
  674|     64|                    f.write_str("( ")?;
  675|     74|                    for val in row {
  676|     10|                        match val {
  677|      4|                            Some(val) => write!(f, "{val} "),
  678|      6|                            None => f.write_str("UNDEF "),
  679|      0|                        }?;
  680|       |                    }
  681|     64|                    f.write_str(") ")?;
  682|       |                }
  683|     66|                f.write_str(" }")
  684|       |            }
  685|       |            Self::Group {
  686|      0|                inner,
  687|      0|                variables,
  688|      0|                aggregates,
  689|      0|            } => {
  690|      0|                f.write_str("{SELECT")?;
  691|      0|                for (a, v) in aggregates {
  692|      0|                    write!(f, " ({v} AS {a})")?;
  693|       |                }
  694|      0|                for b in variables {
  695|      0|                    write!(f, " {b}")?;
  696|       |                }
  697|      0|                write!(f, " WHERE {{ {inner} }}")?;
  698|      0|                if !variables.is_empty() {
  699|      0|                    f.write_str(" GROUP BY")?;
  700|      0|                    for v in variables {
  701|      0|                        write!(f, " {v}")?;
  702|       |                    }
  703|      0|                }
  704|      0|                f.write_str("}")
  705|       |            }
  706|    134|            p => write!(
  707|    134|                f,
  708|    134|                "{{ {} }}",
  709|    134|                SparqlGraphRootPattern {
  710|    134|                    pattern: p,
  711|    134|                    dataset: None
  712|    134|                }
  713|    134|            ),
  714|       |        }
  715|  1.84k|    }
_RNvXsn_NtCsBlCKulpTva_9spargebra7algebraNtB5_11GraphTargetINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeE4from:
 1386|    960|    fn from(node: NamedNode) -> Self {
 1387|    960|        Self::NamedNode(node)
 1388|    960|    }
_RINvMsb_NtCsBlCKulpTva_9spargebra7algebraNtB6_12GraphPattern25lookup_in_scope_variablesNCNvNtB8_6parser12build_selects_0EB8_:
  934|  6.27k|    fn lookup_in_scope_variables<'a>(&'a self, callback: &mut impl FnMut(&'a Variable)) {
  935|  6.27k|        #[allow(clippy::match_same_arms)]
  936|  6.27k|        match self {
  937|    890|            Self::Bgp { patterns } => {
  938|  6.06k|                for pattern in patterns {
  939|  5.17k|                    lookup_triple_pattern_variables(pattern, callback)
  940|       |                }
  941|       |            }
  942|       |            Self::Path {
  943|  2.28k|                subject, object, ..
  944|       |            } => {
  945|  2.28k|                if let TermPattern::Variable(s) = subject {
  946|    476|                    callback(s);
  947|  1.81k|                }
  948|       |                #[cfg(feature = "rdf-star")]
  949|  2.28k|                if let TermPattern::Triple(s) = subject {
  950|      0|                    lookup_triple_pattern_variables(s, callback)
  951|  2.28k|                }
  952|  2.28k|                if let TermPattern::Variable(o) = object {
  953|    432|                    callback(o);
  954|  1.85k|                }
  955|       |                #[cfg(feature = "rdf-star")]
  956|  2.28k|                if let TermPattern::Triple(o) = object {
  957|      0|                    lookup_triple_pattern_variables(o, callback)
  958|  2.28k|                }
  959|       |            }
  960|  2.58k|            Self::Join { left, right }
  961|     53|            | Self::LeftJoin { left, right, .. }
  962|  2.64k|            | Self::Union { left, right } => {
  963|  2.64k|                left.lookup_in_scope_variables(callback);
  964|  2.64k|                right.lookup_in_scope_variables(callback);
  965|  2.64k|            }
  966|       |            #[cfg(feature = "sep-0006")]
  967|     24|            Self::Lateral { left, right } => {
  968|     24|                left.lookup_in_scope_variables(callback);
  969|     24|                right.lookup_in_scope_variables(callback);
  970|     24|            }
  971|     14|            Self::Graph { name, inner } => {
  972|     14|                if let NamedNodePattern::Variable(g) = &name {
  973|     13|                    callback(g);
  974|     13|                }
  975|     14|                inner.lookup_in_scope_variables(callback);
  976|       |            }
  977|       |            Self::Extend {
  978|      0|                inner, variable, ..
  979|      0|            } => {
  980|      0|                callback(variable);
  981|      0|                inner.lookup_in_scope_variables(callback);
  982|      0|            }
  983|      2|            Self::Minus { left, .. } => left.lookup_in_scope_variables(callback),
  984|       |            Self::Group {
  985|      0|                variables,
  986|      0|                aggregates,
  987|       |                ..
  988|       |            } => {
  989|      0|                for v in variables {
  990|      0|                    callback(v);
  991|      0|                }
  992|      0|                for (v, _) in aggregates {
  993|      0|                    callback(v);
  994|      0|                }
  995|       |            }
  996|    140|            Self::Values { variables, .. } | Self::Project { variables, .. } => {
  997|  2.90k|                for v in variables {
  998|  2.63k|                    callback(v);
  999|  2.63k|                }
 1000|       |            }
 1001|      0|            Self::Service { inner, .. }
 1002|     17|            | Self::Filter { inner, .. }
 1003|      0|            | Self::OrderBy { inner, .. }
 1004|     39|            | Self::Distinct { inner }
 1005|     85|            | Self::Reduced { inner }
 1006|    141|            | Self::Slice { inner, .. } => inner.lookup_in_scope_variables(callback),
 1007|       |        }
 1008|  6.27k|    }
_RINvNtCsBlCKulpTva_9spargebra7algebra31lookup_triple_pattern_variablesNCNCNvNtNtB4_6parser6parser28___parse_GroupGraphPatternSub00EB4_:
 1011|    196|fn lookup_triple_pattern_variables<'a>(
 1012|    196|    pattern: &'a TriplePattern,
 1013|    196|    callback: &mut impl FnMut(&'a Variable),
 1014|    196|) {
 1015|    196|    if let TermPattern::Variable(s) = &pattern.subject {
 1016|      0|        callback(s);
 1017|    196|    }
 1018|       |    #[cfg(feature = "rdf-star")]
 1019|    196|    if let TermPattern::Triple(s) = &pattern.subject {
 1020|      0|        lookup_triple_pattern_variables(s, callback)
 1021|    196|    }
 1022|    196|    if let NamedNodePattern::Variable(p) = &pattern.predicate {
 1023|    110|        callback(p);
 1024|    110|    }
 1025|    196|    if let TermPattern::Variable(o) = &pattern.object {
 1026|     65|        callback(o);
 1027|    131|    }
 1028|       |    #[cfg(feature = "rdf-star")]
 1029|    196|    if let TermPattern::Triple(o) = &pattern.object {
 1030|      0|        lookup_triple_pattern_variables(o, callback)
 1031|    196|    }
 1032|    196|}
_RINvNtCsBlCKulpTva_9spargebra7algebra31lookup_triple_pattern_variablesNCNvNtB4_6parser12build_selects_0EB4_:
 1011|  5.17k|fn lookup_triple_pattern_variables<'a>(
 1012|  5.17k|    pattern: &'a TriplePattern,
 1013|  5.17k|    callback: &mut impl FnMut(&'a Variable),
 1014|  5.17k|) {
 1015|  5.17k|    if let TermPattern::Variable(s) = &pattern.subject {
 1016|    239|        callback(s);
 1017|  4.93k|    }
 1018|       |    #[cfg(feature = "rdf-star")]
 1019|  5.17k|    if let TermPattern::Triple(s) = &pattern.subject {
 1020|      0|        lookup_triple_pattern_variables(s, callback)
 1021|  5.17k|    }
 1022|  5.17k|    if let NamedNodePattern::Variable(p) = &pattern.predicate {
 1023|  3.16k|        callback(p);
 1024|  3.16k|    }
 1025|  5.17k|    if let TermPattern::Variable(o) = &pattern.object {
 1026|  1.18k|        callback(o);
 1027|  3.99k|    }
 1028|       |    #[cfg(feature = "rdf-star")]
 1029|  5.17k|    if let TermPattern::Triple(o) = &pattern.object {
 1030|      0|        lookup_triple_pattern_variables(o, callback)
 1031|  5.17k|    }
 1032|  5.17k|}
_RINvMsb_NtCsBlCKulpTva_9spargebra7algebraNtB6_12GraphPattern20on_in_scope_variableNCNCNvNtNtB8_6parser6parser28___parse_GroupGraphPatternSub00EB8_:
  930|    291|    pub fn on_in_scope_variable<'a>(&'a self, mut callback: impl FnMut(&'a Variable)) {
  931|    291|        self.lookup_in_scope_variables(&mut callback)
  932|    291|    }
_RINvMsb_NtCsBlCKulpTva_9spargebra7algebraNtB6_12GraphPattern20on_in_scope_variableNCNvNtB8_6parser12build_selects_0EB8_:
  930|    782|    pub fn on_in_scope_variable<'a>(&'a self, mut callback: impl FnMut(&'a Variable)) {
  931|    782|        self.lookup_in_scope_variables(&mut callback)
  932|    782|    }
_RINvMsb_NtCsBlCKulpTva_9spargebra7algebraNtB6_12GraphPattern25lookup_in_scope_variablesNCNvNtB8_6parser12build_select0EB8_:
  934|  3.21k|    fn lookup_in_scope_variables<'a>(&'a self, callback: &mut impl FnMut(&'a Variable)) {
  935|  3.21k|        #[allow(clippy::match_same_arms)]
  936|  3.21k|        match self {
  937|    741|            Self::Bgp { patterns } => {
  938|  3.12k|                for pattern in patterns {
  939|  2.38k|                    lookup_triple_pattern_variables(pattern, callback)
  940|       |                }
  941|       |            }
  942|       |            Self::Path {
  943|    862|                subject, object, ..
  944|       |            } => {
  945|    862|                if let TermPattern::Variable(s) = subject {
  946|    228|                    callback(s);
  947|    634|                }
  948|       |                #[cfg(feature = "rdf-star")]
  949|    862|                if let TermPattern::Triple(s) = subject {
  950|      0|                    lookup_triple_pattern_variables(s, callback)
  951|    862|                }
  952|    862|                if let TermPattern::Variable(o) = object {
  953|    138|                    callback(o);
  954|    724|                }
  955|       |                #[cfg(feature = "rdf-star")]
  956|    862|                if let TermPattern::Triple(o) = object {
  957|      0|                    lookup_triple_pattern_variables(o, callback)
  958|    862|                }
  959|       |            }
  960|  1.01k|            Self::Join { left, right }
  961|     21|            | Self::LeftJoin { left, right, .. }
  962|  1.03k|            | Self::Union { left, right } => {
  963|  1.03k|                left.lookup_in_scope_variables(callback);
  964|  1.03k|                right.lookup_in_scope_variables(callback);
  965|  1.03k|            }
  966|       |            #[cfg(feature = "sep-0006")]
  967|     12|            Self::Lateral { left, right } => {
  968|     12|                left.lookup_in_scope_variables(callback);
  969|     12|                right.lookup_in_scope_variables(callback);
  970|     12|            }
  971|     12|            Self::Graph { name, inner } => {
  972|     12|                if let NamedNodePattern::Variable(g) = &name {
  973|     12|                    callback(g);
  974|     12|                }
  975|     12|                inner.lookup_in_scope_variables(callback);
  976|       |            }
  977|       |            Self::Extend {
  978|      0|                inner, variable, ..
  979|      0|            } => {
  980|      0|                callback(variable);
  981|      0|                inner.lookup_in_scope_variables(callback);
  982|      0|            }
  983|      0|            Self::Minus { left, .. } => left.lookup_in_scope_variables(callback),
  984|       |            Self::Group {
  985|     42|                variables,
  986|     42|                aggregates,
  987|       |                ..
  988|       |            } => {
  989|    164|                for v in variables {
  990|    122|                    callback(v);
  991|    122|                }
  992|     42|                for (v, _) in aggregates {
  993|      0|                    callback(v);
  994|      0|                }
  995|       |            }
  996|    357|            Self::Values { variables, .. } | Self::Project { variables, .. } => {
  997|  1.14k|                for v in variables {
  998|    742|                    callback(v);
  999|    742|                }
 1000|       |            }
 1001|      0|            Self::Service { inner, .. }
 1002|      5|            | Self::Filter { inner, .. }
 1003|      0|            | Self::OrderBy { inner, .. }
 1004|     40|            | Self::Distinct { inner }
 1005|     54|            | Self::Reduced { inner }
 1006|     99|            | Self::Slice { inner, .. } => inner.lookup_in_scope_variables(callback),
 1007|       |        }
 1008|  3.21k|    }
_RINvNtCsBlCKulpTva_9spargebra7algebra31lookup_triple_pattern_variablesNCNvNtB4_6parser12build_select0EB4_:
 1011|  2.38k|fn lookup_triple_pattern_variables<'a>(
 1012|  2.38k|    pattern: &'a TriplePattern,
 1013|  2.38k|    callback: &mut impl FnMut(&'a Variable),
 1014|  2.38k|) {
 1015|  2.38k|    if let TermPattern::Variable(s) = &pattern.subject {
 1016|    120|        callback(s);
 1017|  2.26k|    }
 1018|       |    #[cfg(feature = "rdf-star")]
 1019|  2.38k|    if let TermPattern::Triple(s) = &pattern.subject {
 1020|      0|        lookup_triple_pattern_variables(s, callback)
 1021|  2.38k|    }
 1022|  2.38k|    if let NamedNodePattern::Variable(p) = &pattern.predicate {
 1023|  1.50k|        callback(p);
 1024|  1.50k|    }
 1025|  2.38k|    if let TermPattern::Variable(o) = &pattern.object {
 1026|    547|        callback(o);
 1027|  1.83k|    }
 1028|       |    #[cfg(feature = "rdf-star")]
 1029|  2.38k|    if let TermPattern::Triple(o) = &pattern.object {
 1030|      0|        lookup_triple_pattern_variables(o, callback)
 1031|  2.38k|    }
 1032|  2.38k|}
_RINvNtCsBlCKulpTva_9spargebra7algebra14write_arg_listRNtB2_10ExpressionRINtNtCsjOdcKtOMjJI_5alloc3vec3VecBQ_EEB4_:
  304|    142|fn write_arg_list(
  305|    142|    params: impl IntoIterator<Item = impl fmt::Display>,
  306|    142|    f: &mut fmt::Formatter<'_>,
  307|    142|) -> fmt::Result {
  308|    142|    f.write_str("(")?;
  309|    142|    let mut cont = false;
  310|    220|    for p in params {
  311|     78|        if cont {
  312|      2|            f.write_str(", ")?;
  313|     76|        }
  314|     78|        p.fmt(f)?;
  315|     78|        cont = true;
  316|       |    }
  317|    142|    f.write_str(")")
  318|    142|}
_RINvMsb_NtCsBlCKulpTva_9spargebra7algebraNtB6_12GraphPattern25lookup_in_scope_variablesNCNCNvNtNtB8_6parser6parser28___parse_GroupGraphPatternSub0s_0EB8_:
  934|      9|    fn lookup_in_scope_variables<'a>(&'a self, callback: &mut impl FnMut(&'a Variable)) {
  935|      9|        #[allow(clippy::match_same_arms)]
  936|      9|        match self {
  937|      3|            Self::Bgp { patterns } => {
  938|      3|                for pattern in patterns {
  939|      0|                    lookup_triple_pattern_variables(pattern, callback)
  940|       |                }
  941|       |            }
  942|       |            Self::Path {
  943|      0|                subject, object, ..
  944|       |            } => {
  945|      0|                if let TermPattern::Variable(s) = subject {
  946|      0|                    callback(s);
  947|      0|                }
  948|       |                #[cfg(feature = "rdf-star")]
  949|      0|                if let TermPattern::Triple(s) = subject {
  950|      0|                    lookup_triple_pattern_variables(s, callback)
  951|      0|                }
  952|      0|                if let TermPattern::Variable(o) = object {
  953|      0|                    callback(o);
  954|      0|                }
  955|       |                #[cfg(feature = "rdf-star")]
  956|      0|                if let TermPattern::Triple(o) = object {
  957|      0|                    lookup_triple_pattern_variables(o, callback)
  958|      0|                }
  959|       |            }
  960|      0|            Self::Join { left, right }
  961|      0|            | Self::LeftJoin { left, right, .. }
  962|      0|            | Self::Union { left, right } => {
  963|      0|                left.lookup_in_scope_variables(callback);
  964|      0|                right.lookup_in_scope_variables(callback);
  965|      0|            }
  966|       |            #[cfg(feature = "sep-0006")]
  967|      2|            Self::Lateral { left, right } => {
  968|      2|                left.lookup_in_scope_variables(callback);
  969|      2|                right.lookup_in_scope_variables(callback);
  970|      2|            }
  971|      0|            Self::Graph { name, inner } => {
  972|      0|                if let NamedNodePattern::Variable(g) = &name {
  973|      0|                    callback(g);
  974|      0|                }
  975|      0|                inner.lookup_in_scope_variables(callback);
  976|       |            }
  977|       |            Self::Extend {
  978|      0|                inner, variable, ..
  979|      0|            } => {
  980|      0|                callback(variable);
  981|      0|                inner.lookup_in_scope_variables(callback);
  982|      0|            }
  983|      0|            Self::Minus { left, .. } => left.lookup_in_scope_variables(callback),
  984|       |            Self::Group {
  985|      0|                variables,
  986|      0|                aggregates,
  987|       |                ..
  988|       |            } => {
  989|      0|                for v in variables {
  990|      0|                    callback(v);
  991|      0|                }
  992|      0|                for (v, _) in aggregates {
  993|      0|                    callback(v);
  994|      0|                }
  995|       |            }
  996|      2|            Self::Values { variables, .. } | Self::Project { variables, .. } => {
  997|      8|                for v in variables {
  998|      6|                    callback(v);
  999|      6|                }
 1000|       |            }
 1001|      0|            Self::Service { inner, .. }
 1002|      0|            | Self::Filter { inner, .. }
 1003|      0|            | Self::OrderBy { inner, .. }
 1004|      2|            | Self::Distinct { inner }
 1005|      0|            | Self::Reduced { inner }
 1006|      2|            | Self::Slice { inner, .. } => inner.lookup_in_scope_variables(callback),
 1007|       |        }
 1008|      9|    }
_RINvMsb_NtCsBlCKulpTva_9spargebra7algebraNtB6_12GraphPattern20on_in_scope_variableNCNCNvNtNtB8_6parser6parser28___parse_GroupGraphPatternSub0s_0EB8_:
  930|      3|    pub fn on_in_scope_variable<'a>(&'a self, mut callback: impl FnMut(&'a Variable)) {
  931|      3|        self.lookup_in_scope_variables(&mut callback)
  932|      3|    }
_RINvMsb_NtCsBlCKulpTva_9spargebra7algebraNtB6_12GraphPattern20on_in_scope_variableNCNvNtB8_6parser12build_select0EB8_:
  930|    998|    pub fn on_in_scope_variable<'a>(&'a self, mut callback: impl FnMut(&'a Variable)) {
  931|    998|        self.lookup_in_scope_variables(&mut callback)
  932|    998|    }
_RINvMsb_NtCsBlCKulpTva_9spargebra7algebraNtB6_12GraphPattern25lookup_in_scope_variablesNCNCNvNtNtB8_6parser6parser28___parse_GroupGraphPatternSub00EB8_:
  934|    633|    fn lookup_in_scope_variables<'a>(&'a self, callback: &mut impl FnMut(&'a Variable)) {
  935|    633|        #[allow(clippy::match_same_arms)]
  936|    633|        match self {
  937|    309|            Self::Bgp { patterns } => {
  938|    505|                for pattern in patterns {
  939|    196|                    lookup_triple_pattern_variables(pattern, callback)
  940|       |                }
  941|       |            }
  942|       |            Self::Path {
  943|    151|                subject, object, ..
  944|       |            } => {
  945|    151|                if let TermPattern::Variable(s) = subject {
  946|     17|                    callback(s);
  947|    134|                }
  948|       |                #[cfg(feature = "rdf-star")]
  949|    151|                if let TermPattern::Triple(s) = subject {
  950|      0|                    lookup_triple_pattern_variables(s, callback)
  951|    151|                }
  952|    151|                if let TermPattern::Variable(o) = object {
  953|      5|                    callback(o);
  954|    146|                }
  955|       |                #[cfg(feature = "rdf-star")]
  956|    151|                if let TermPattern::Triple(o) = object {
  957|      0|                    lookup_triple_pattern_variables(o, callback)
  958|    151|                }
  959|       |            }
  960|    168|            Self::Join { left, right }
  961|      1|            | Self::LeftJoin { left, right, .. }
  962|    169|            | Self::Union { left, right } => {
  963|    169|                left.lookup_in_scope_variables(callback);
  964|    169|                right.lookup_in_scope_variables(callback);
  965|    169|            }
  966|       |            #[cfg(feature = "sep-0006")]
  967|      2|            Self::Lateral { left, right } => {
  968|      2|                left.lookup_in_scope_variables(callback);
  969|      2|                right.lookup_in_scope_variables(callback);
  970|      2|            }
  971|      0|            Self::Graph { name, inner } => {
  972|      0|                if let NamedNodePattern::Variable(g) = &name {
  973|      0|                    callback(g);
  974|      0|                }
  975|      0|                inner.lookup_in_scope_variables(callback);
  976|       |            }
  977|       |            Self::Extend {
  978|      0|                inner, variable, ..
  979|      0|            } => {
  980|      0|                callback(variable);
  981|      0|                inner.lookup_in_scope_variables(callback);
  982|      0|            }
  983|      0|            Self::Minus { left, .. } => left.lookup_in_scope_variables(callback),
  984|       |            Self::Group {
  985|      0|                variables,
  986|      0|                aggregates,
  987|       |                ..
  988|       |            } => {
  989|      0|                for v in variables {
  990|      0|                    callback(v);
  991|      0|                }
  992|      0|                for (v, _) in aggregates {
  993|      0|                    callback(v);
  994|      0|                }
  995|       |            }
  996|      2|            Self::Values { variables, .. } | Self::Project { variables, .. } => {
  997|     27|                for v in variables {
  998|     25|                    callback(v);
  999|     25|                }
 1000|       |            }
 1001|      0|            Self::Service { inner, .. }
 1002|      0|            | Self::Filter { inner, .. }
 1003|      0|            | Self::OrderBy { inner, .. }
 1004|      0|            | Self::Distinct { inner }
 1005|      0|            | Self::Reduced { inner }
 1006|      0|            | Self::Slice { inner, .. } => inner.lookup_in_scope_variables(callback),
 1007|       |        }
 1008|    633|    }

_RNvXs0_NtCsBlCKulpTva_9spargebra6parserNtB5_22VariableOrPropertyPathINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableE4from:
   83|  9.69k|    fn from(var: Variable) -> Self {
   84|  9.69k|        Self::Variable(var)
   85|  9.69k|    }
_RNvNtCsBlCKulpTva_9spargebra6parser12parse_update:
   24|  2.76k|pub fn parse_update(update: &str, base_iri: Option<&str>) -> Result<Update, SparqlSyntaxError> {
   25|  2.76k|    let mut state = ParserState::from_base_iri(base_iri)?;
   26|  2.76k|    let operations = parser::UpdateInit(update, &mut state)
   27|  2.76k|        .map_err(|e| SparqlSyntaxError(ParseErrorKind::Syntax(e)))?;
   28|  2.53k|    Ok(Update {
   29|  2.53k|        operations,
   30|  2.53k|        base_iri: state.base_iri,
   31|  2.53k|    })
   32|  2.76k|}
_RNvXsk_NtCsBlCKulpTva_9spargebra6parserNtB5_22VariableOrPropertyPathNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   76|  15.3k|#[derive(Clone, Debug)]
_RNvNtCsBlCKulpTva_9spargebra6parser8variable:
  774|     51|fn variable() -> Variable {
  775|     51|    Variable::new_unchecked(format!("{:x}", random::<u128>()))
  776|     51|}
_RNvNtCsBlCKulpTva_9spargebra6parser12build_select:
  388|  1.82k|fn build_select(
  389|  1.82k|    select: Selection,
  390|  1.82k|    r#where: GraphPattern,
  391|  1.82k|    mut group: Option<(Vec<Variable>, Vec<(Expression, Variable)>)>,
  392|  1.82k|    having: Option<Expression>,
  393|  1.82k|    order_by: Option<Vec<OrderExpression>>,
  394|  1.82k|    offset_limit: Option<(usize, Option<usize>)>,
  395|  1.82k|    values: Option<GraphPattern>,
  396|  1.82k|    state: &mut ParserState,
  397|  1.82k|) -> Result<GraphPattern, &'static str> {
  398|  1.82k|    let mut p = r#where;
  399|  1.82k|    let mut with_aggregate = false;
  400|  1.82k|
  401|  1.82k|    // GROUP BY
  402|  1.82k|    let aggregates = state.aggregates.pop().unwrap_or_default();
  403|  1.82k|    if group.is_none() && !aggregates.is_empty() {
  404|      0|        group = Some((vec![], vec![]));
  405|  1.82k|    }
  406|       |
  407|  1.82k|    if let Some((clauses, binds)) = group {
  408|    135|        for (expression, variable) in binds {
  409|     51|            p = GraphPattern::Extend {
  410|     51|                inner: Box::new(p),
  411|     51|                variable,
  412|     51|                expression,
  413|     51|            };
  414|     51|        }
  415|     84|        p = GraphPattern::Group {
  416|     84|            inner: Box::new(p),
  417|     84|            variables: clauses,
  418|     84|            aggregates,
  419|     84|        };
  420|     84|        with_aggregate = true;
  421|  1.73k|    }
  422|       |
  423|       |    // HAVING
  424|  1.82k|    if let Some(expr) = having {
  425|     22|        p = GraphPattern::Filter {
  426|     22|            expr,
  427|     22|            inner: Box::new(p),
  428|     22|        };
  429|  1.80k|    }
  430|       |
  431|       |    // VALUES
  432|  1.82k|    if let Some(data) = values {
  433|     81|        p = new_join(p, data);
  434|  1.74k|    }
  435|       |
  436|       |    // SELECT
  437|  1.82k|    let mut pv = Vec::new();
  438|  1.82k|    let with_project = match select.variables {
  439|    998|        SelectionVariables::Explicit(sel_items) => {
  440|    998|            let mut visible = HashSet::default();
  441|    998|            p.on_in_scope_variable(|v| {
  442|       |                visible.insert(v.clone());
  443|    998|            });
  444|  1.75k|            for sel_item in sel_items {
  445|  1.16k|                let v = match sel_item {
  446|    404|                    SelectionMember::Variable(v) => {
  447|    404|                        if with_aggregate && !visible.contains(&v) {
  448|       |                            // We validate projection variables if there is an aggregate
  449|     16|                            return Err("The SELECT contains a variable that is unbound");
  450|    388|                        }
  451|    388|                        v
  452|       |                    }
  453|    757|                    SelectionMember::Expression(expression, variable) => {
  454|    757|                        if visible.contains(&variable) {
  455|       |                            // We disallow to override an existing variable with an expression
  456|    286|                            return Err(
  457|    286|                                "The SELECT overrides an existing variable using an expression",
  458|    286|                            );
  459|    471|                        }
  460|    471|                        if with_aggregate && !are_variables_bound(&expression, &visible) {
  461|       |                            // We validate projection variables if there is an aggregate
  462|      8|                            return Err(
  463|      8|                                "The SELECT contains an expression with a variable that is unbound",
  464|      8|                            );
  465|    463|                        }
  466|    463|                        p = GraphPattern::Extend {
  467|    463|                            inner: Box::new(p),
  468|    463|                            variable: variable.clone(),
  469|    463|                            expression,
  470|    463|                        };
  471|    463|                        variable
  472|       |                    }
  473|       |                };
  474|    851|                if pv.contains(&v) {
  475|     98|                    return Err("Duplicated variable name in SELECT");
  476|    753|                }
  477|    753|                pv.push(v)
  478|       |            }
  479|    590|            true
  480|       |        }
  481|       |        SelectionVariables::Star => {
  482|    824|            if with_aggregate {
  483|     42|                return Err("SELECT * is not authorized with GROUP BY");
  484|    782|            }
  485|    782|            // TODO: is it really useful to do a projection?
  486|    782|            p.on_in_scope_variable(|v| {
  487|       |                if !pv.contains(v) {
  488|       |                    pv.push(v.clone());
  489|       |                }
  490|    782|            });
  491|    782|            pv.sort();
  492|    782|            true
  493|       |        }
  494|      0|        SelectionVariables::Everything => false,
  495|       |    };
  496|       |
  497|  1.37k|    let mut m = p;
  498|       |
  499|       |    // ORDER BY
  500|  1.37k|    if let Some(expression) = order_by {
  501|      0|        m = GraphPattern::OrderBy {
  502|      0|            inner: Box::new(m),
  503|      0|            expression,
  504|      0|        };
  505|  1.37k|    }
  506|       |
  507|       |    // PROJECT
  508|  1.37k|    if with_project {
  509|  1.37k|        m = GraphPattern::Project {
  510|  1.37k|            inner: Box::new(m),
  511|  1.37k|            variables: pv,
  512|  1.37k|        };
  513|  1.37k|    }
  514|  1.37k|    match select.option {
  515|    296|        SelectionOption::Distinct => m = GraphPattern::Distinct { inner: Box::new(m) },
  516|    617|        SelectionOption::Reduced => m = GraphPattern::Reduced { inner: Box::new(m) },
  517|    459|        SelectionOption::Default => (),
  518|       |    }
  519|       |
  520|       |    // OFFSET LIMIT
  521|  1.37k|    if let Some((start, length)) = offset_limit {
  522|      0|        m = GraphPattern::Slice {
  523|      0|            inner: Box::new(m),
  524|      0|            start,
  525|      0|            length,
  526|      0|        }
  527|  1.37k|    }
  528|  1.37k|    Ok(m)
  529|  1.82k|}
_RNvNtCsBlCKulpTva_9spargebra6parser9build_bgp:
  207|  1.67k|fn build_bgp(patterns: Vec<TripleOrPathPattern>) -> GraphPattern {
  208|  1.67k|    let mut bgp = Vec::new();
  209|  1.67k|    let mut elements = Vec::with_capacity(patterns.len());
  210|  29.1k|    for pattern in patterns {
  211|  27.4k|        match pattern {
  212|  20.1k|            TripleOrPathPattern::Triple(t) => bgp.push(t),
  213|       |            TripleOrPathPattern::Path {
  214|  7.31k|                subject,
  215|  7.31k|                path,
  216|  7.31k|                object,
  217|  7.31k|            } => {
  218|  7.31k|                if !bgp.is_empty() {
  219|  1.55k|                    elements.push(GraphPattern::Bgp {
  220|  1.55k|                        patterns: take(&mut bgp),
  221|  1.55k|                    });
  222|  5.75k|                }
  223|  7.31k|                elements.push(GraphPattern::Path {
  224|  7.31k|                    subject,
  225|  7.31k|                    path,
  226|  7.31k|                    object,
  227|  7.31k|                })
  228|       |            }
  229|       |        }
  230|       |    }
  231|  1.67k|    if !bgp.is_empty() {
  232|  1.13k|        elements.push(GraphPattern::Bgp { patterns: bgp });
  233|  1.13k|    }
  234|  1.67k|    elements.into_iter().reduce(new_join).unwrap_or_default()
  235|  1.67k|}
_RNvNtCsBlCKulpTva_9spargebra6parser8new_join:
  316|  11.0k|fn new_join(l: GraphPattern, r: GraphPattern) -> GraphPattern {
  317|       |    // Avoid to output empty BGPs
  318|  11.0k|    if let GraphPattern::Bgp { patterns: pl } = &l {
  319|  1.01k|        if pl.is_empty() {
  320|    358|            return r;
  321|    658|        }
  322|  9.99k|    }
  323|  10.6k|    if let GraphPattern::Bgp { patterns: pr } = &r {
  324|  1.96k|        if pr.is_empty() {
  325|      2|            return l;
  326|  1.96k|        }
  327|  8.68k|    }
  328|       |
  329|  10.6k|    match (l, r) {
  330|     13|        (GraphPattern::Bgp { patterns: mut pl }, GraphPattern::Bgp { patterns: pr }) => {
  331|     13|            pl.extend(pr);
  332|     13|            GraphPattern::Bgp { patterns: pl }
  333|       |        }
  334|      0|        (GraphPattern::Bgp { patterns }, other) | (other, GraphPattern::Bgp { patterns })
  335|  2.59k|            if patterns.is_empty() =>
  336|       |        {
  337|      0|            other
  338|       |        }
  339|  10.6k|        (l, r) => GraphPattern::Join {
  340|  10.6k|            left: Box::new(l),
  341|  10.6k|            right: Box::new(r),
  342|  10.6k|        },
  343|       |    }
  344|  11.0k|}
_RNvNtCsBlCKulpTva_9spargebra6parser21add_defined_variables:
  572|  2.70k|fn add_defined_variables<'a>(pattern: &'a GraphPattern, set: &mut HashSet<&'a Variable>) {
  573|  2.70k|    match pattern {
  574|  1.40k|        GraphPattern::Bgp { .. } | GraphPattern::Path { .. } => {}
  575|  1.09k|        GraphPattern::Join { left, right }
  576|      8|        | GraphPattern::LeftJoin { left, right, .. }
  577|     12|        | GraphPattern::Lateral { left, right }
  578|      6|        | GraphPattern::Union { left, right }
  579|  1.12k|        | GraphPattern::Minus { left, right } => {
  580|  1.12k|            add_defined_variables(left, set);
  581|  1.12k|            add_defined_variables(right, set);
  582|  1.12k|        }
  583|      1|        GraphPattern::Graph { inner, .. } => {
  584|      1|            add_defined_variables(inner, set);
  585|      1|        }
  586|       |        GraphPattern::Extend {
  587|     19|            inner, variable, ..
  588|     19|        } => {
  589|     19|            set.insert(variable);
  590|     19|            add_defined_variables(inner, set);
  591|     19|        }
  592|       |        GraphPattern::Group {
  593|      0|            variables,
  594|      0|            aggregates,
  595|      0|            inner,
  596|       |        } => {
  597|      0|            for (v, _) in aggregates {
  598|      0|                set.insert(v);
  599|      0|            }
  600|      0|            let mut inner_variables = HashSet::new();
  601|      0|            add_defined_variables(inner, &mut inner_variables);
  602|      0|            for v in inner_variables {
  603|      0|                if variables.contains(v) {
  604|      0|                    set.insert(v);
  605|      0|                }
  606|       |            }
  607|       |        }
  608|      5|        GraphPattern::Values { variables, .. } => {
  609|     53|            for v in variables {
  610|     48|                set.insert(v);
  611|     48|            }
  612|       |        }
  613|     77|        GraphPattern::Project { variables, inner } => {
  614|     77|            let mut inner_variables = HashSet::new();
  615|     77|            add_defined_variables(inner, &mut inner_variables);
  616|     99|            for v in inner_variables {
  617|     22|                if variables.contains(v) {
  618|     19|                    set.insert(v);
  619|     19|                }
  620|       |            }
  621|       |        }
  622|      0|        GraphPattern::Service { inner, .. }
  623|      1|        | GraphPattern::Filter { inner, .. }
  624|      0|        | GraphPattern::OrderBy { inner, .. }
  625|     31|        | GraphPattern::Distinct { inner }
  626|     39|        | GraphPattern::Reduced { inner }
  627|     71|        | GraphPattern::Slice { inner, .. } => add_defined_variables(inner, set),
  628|       |    }
  629|  2.70k|}
_RNvNtCsBlCKulpTva_9spargebra6parser19are_variables_bound:
  531|    352|fn are_variables_bound(expression: &Expression, variables: &HashSet<Variable>) -> bool {
  532|    352|    match expression {
  533|       |        Expression::NamedNode(_)
  534|       |        | Expression::Literal(_)
  535|       |        | Expression::Bound(_)
  536|       |        | Expression::Coalesce(_)
  537|     88|        | Expression::Exists(_) => true,
  538|     28|        Expression::Variable(var) => variables.contains(var),
  539|     67|        Expression::UnaryPlus(e) | Expression::UnaryMinus(e) | Expression::Not(e) => {
  540|    105|            are_variables_bound(e, variables)
  541|       |        }
  542|      0|        Expression::Or(a, b)
  543|     12|        | Expression::And(a, b)
  544|      4|        | Expression::Equal(a, b)
  545|      0|        | Expression::SameTerm(a, b)
  546|      0|        | Expression::Greater(a, b)
  547|     13|        | Expression::GreaterOrEqual(a, b)
  548|      0|        | Expression::Less(a, b)
  549|      0|        | Expression::LessOrEqual(a, b)
  550|      2|        | Expression::Add(a, b)
  551|     35|        | Expression::Subtract(a, b)
  552|      4|        | Expression::Multiply(a, b)
  553|     48|        | Expression::Divide(a, b) => {
  554|    118|            are_variables_bound(a, variables) && are_variables_bound(b, variables)
  555|       |        }
  556|      9|        Expression::In(a, b) => {
  557|      9|            are_variables_bound(a, variables) && b.iter().all(|b| are_variables_bound(b, variables))
  558|       |        }
  559|      4|        Expression::FunctionCall(_, parameters) => {
  560|      4|            parameters.iter().all(|p| are_variables_bound(p, variables))
  561|       |        }
  562|      0|        Expression::If(a, b, c) => {
  563|      0|            are_variables_bound(a, variables)
  564|      0|                && are_variables_bound(b, variables)
  565|      0|                && are_variables_bound(c, variables)
  566|       |        }
  567|       |    }
  568|    352|}
_RNvMs9_NtCsBlCKulpTva_9spargebra6parserNtB5_11ParserState13from_base_iri:
  672|  2.76k|    pub(crate) fn from_base_iri(base_iri: Option<&str>) -> Result<Self, SparqlSyntaxError> {
  673|       |        Ok(Self {
  674|  2.76k|            base_iri: if let Some(base_iri) = base_iri {
  675|       |                Some(
  676|      0|                    Iri::parse(base_iri.to_owned())
  677|      0|                        .map_err(|e| SparqlSyntaxError(ParseErrorKind::InvalidBaseIri(e)))?,
  678|       |                )
  679|       |            } else {
  680|  2.76k|                None
  681|       |            },
  682|  2.76k|            namespaces: HashMap::default(),
  683|  2.76k|            used_bnodes: HashSet::default(),
  684|  2.76k|            currently_used_bnodes: HashSet::default(),
  685|  2.76k|            aggregates: Vec::new(),
  686|       |        })
  687|  2.76k|    }
_RNvNtCsBlCKulpTva_9spargebra6parser22add_to_triple_patterns:
  103|  17.4k|fn add_to_triple_patterns(
  104|  17.4k|    subject: TermPattern,
  105|  17.4k|    predicate: NamedNodePattern,
  106|  17.4k|    object: AnnotatedTerm,
  107|  17.4k|    patterns: &mut Vec<TriplePattern>,
  108|  17.4k|) -> Result<(), &'static str> {
  109|  17.4k|    let triple = TriplePattern::new(subject, predicate, object.term);
  110|       |    #[cfg(feature = "rdf-star")]
  111|  17.4k|    for (p, os) in object.annotations {
  112|      0|        for o in os {
  113|      0|            add_to_triple_patterns(triple.clone().into(), p.clone(), o, patterns)?
  114|       |        }
  115|       |    }
  116|       |    #[cfg(not(feature = "rdf-star"))]
  117|       |    if !object.annotations.is_empty() {
  118|       |        return Err("Embedded triples are only available in SPARQL-star");
  119|       |    }
  120|  17.4k|    patterns.push(triple);
  121|  17.4k|    Ok(())
  122|  17.4k|}
_RNvMs9_NtCsBlCKulpTva_9spargebra6parserNtB5_11ParserState9parse_iri:
  689|  57.0k|    fn parse_iri(&self, iri: String) -> Result<Iri<String>, IriParseError> {
  690|  57.0k|        if let Some(base_iri) = &self.base_iri {
  691|      0|            base_iri.resolve(&iri)
  692|       |        } else {
  693|  57.0k|            Iri::parse(iri)
  694|       |        }
  695|  57.0k|    }
_RNvNtCsBlCKulpTva_9spargebra6parser15unescape_iriref:
  711|  57.0k|fn unescape_iriref(mut input: &str) -> Result<String, &'static str> {
  712|  57.0k|    let mut output = String::with_capacity(input.len());
  713|  57.0k|    while let Some((before, after)) = input.split_once('\\') {
  714|      0|        output.push_str(before);
  715|      0|        let mut after = after.chars();
  716|      0|        let (escape, after) = match after.next() {
  717|      0|            Some('u') => read_hex_char::<4>(after.as_str())?,
  718|      0|            Some('U') => read_hex_char::<8>(after.as_str())?,
  719|       |            Some(_) => {
  720|      0|                return Err(
  721|      0|                    "IRIs are only allowed to contain escape sequences \\uXXXX and \\UXXXXXXXX",
  722|      0|                )
  723|       |            }
  724|      0|            None => return Err("IRIs are not allowed to end with a '\'"),
  725|       |        };
  726|      0|        output.push(escape);
  727|      0|        input = after;
  728|       |    }
  729|  57.0k|    output.push_str(input);
  730|  57.0k|    Ok(output)
  731|  57.0k|}
_RNvNtCsBlCKulpTva_9spargebra6parser15unescape_string:
  733|  5.74k|fn unescape_string(mut input: &str) -> Result<String, &'static str> {
  734|  5.74k|    let mut output = String::with_capacity(input.len());
  735|  5.74k|    while let Some((before, after)) = input.split_once('\\') {
  736|      0|        output.push_str(before);
  737|      0|        let mut after = after.chars();
  738|      0|        let (escape, after) = match after.next() {
  739|      0|            Some('t') => ('\u{0009}', after.as_str()),
  740|      0|            Some('b') => ('\u{0008}', after.as_str()),
  741|      0|            Some('n') => ('\u{000A}', after.as_str()),
  742|      0|            Some('r') => ('\u{000D}', after.as_str()),
  743|      0|            Some('f') => ('\u{000C}', after.as_str()),
  744|      0|            Some('"') => ('\u{0022}', after.as_str()),
  745|      0|            Some('\'') => ('\u{0027}', after.as_str()),
  746|      0|            Some('\\') => ('\u{005C}', after.as_str()),
  747|      0|            Some('u') => read_hex_char::<4>(after.as_str())?,
  748|      0|            Some('U') => read_hex_char::<8>(after.as_str())?,
  749|      0|            Some(_) => return Err("The character that can be escaped in strings are tbnrf\"'\\"),
  750|      0|            None => return Err("strings are not allowed to end with a '\'"),
  751|       |        };
  752|      0|        output.push(escape);
  753|      0|        input = after;
  754|       |    }
  755|  5.74k|    output.push_str(input);
  756|  5.74k|    Ok(output)
  757|  5.74k|}
_RNvXs2_NtCsBlCKulpTva_9spargebra6parserNtB5_22VariableOrPropertyPathINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7algebra22PropertyPathExpressionE4from:
   98|  25.2k|    fn from(path: PropertyPathExpression) -> Self {
   99|  25.2k|        Self::PropertyPath(path)
  100|  25.2k|    }
_RNvXs3_NtCsBlCKulpTva_9spargebra6parserNtB5_19TripleOrPathPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_4term13TriplePatternE4from:
  248|  20.1k|    fn from(tp: TriplePattern) -> Self {
  249|  20.1k|        Self::Triple(tp)
  250|  20.1k|    }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_PN_PREFIX:
 2060|   234k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_PNAME_NS:
 1970|   234k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser9___parse__:
 2073|   734k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_DOUBLE:
 2003|  51.2k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_DOUBLE_NEGATIVE:
 2015|  46.6k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser21___parse_iriOrFunction:
 1909|  12.8k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser35___parse_STRING_LITERAL2_simple_char:
 2028|  22.9k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_ObjectList:
 1386|  17.4k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_InlineDataOneVar_value:
 1283|    417|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_QuadsNotTriples:
 1163|  20.5k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_GraphGraphPattern:
 1262|  5.64k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_GraphRef:
 1139|  1.84k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_QuadData:
 1148|    250|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_Load:
  978|  8.53k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser29___parse_Quads_TriplesTemplate:
 1158|  22.7k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_Create:
  991|  5.92k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser32___parse_PropertyListPathNotEmpty:
 1442|  12.0k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_PathSequence_item:
 1515|  45.9k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser11___parse_Var:
 1693|   147k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser35___parse_PathNegatedPropertySet_item:
 1568|  7.83k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_TriplesSameSubjectPath:
 1417|  6.41k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser29___parse_InlineDataFull_values:
 1293|    519|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_VAR1:
 1991|   147k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser24___parse_QuotedTripleData:
 1671|  5.67k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_PNAME_LN:
 1974|   117k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser24___parse_ExprQuotedTriple:
 1782|  12.8k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser13___parse_ECHAR:
 2044|  5.74k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser15___parse_VARNAME:
 2056|  48.0k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_IRIREF:
 1966|   174k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_RegexExpression:
 1869|  1.66k|        rule RegexExpression() -> Expression =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_ExistsFunc:
 1883|  1.66k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser15___parse_INTEGER:
 1999|  49.3k|        rule INTEGER() = ['0'..='9']+
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_ServiceGraphPattern:
 1266|  5.56k|        rule ServiceGraphPattern() -> PartialGraphPattern =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_LimitClause:
  961|  1.82k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_GraphRefAll:
 1141|  1.55k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_Update:
  973|  2.98k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser11___parse_Add:
  995|  6.97k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser15___parse_PathElt:
 1517|  45.9k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_InsertClause:
 1123|  4.94k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_GraphOrDefault:
 1133|  2.09k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_Update1_silent:
  976|  2.89k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_InlineDataFull_value:
 1294|  5.26k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_PN_CHARS_U:
 2054|   335k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_ObjectPath:
 1479|  15.3k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_PathSequence:
 1510|  36.6k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_VarOrIri:
 1689|  32.5k|        rule VarOrIri() -> NamedNodePattern =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_PathNegatedPropertySet:
 1541|  1.64k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser33___parse_PropertyListNotEmpty_item:
 1377|  17.4k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_PathAlternative:
 1503|  35.0k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_BrackettedExpression:
 1787|  13.7k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_STRING_LITERAL_LONG2:
 2036|   159k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser26___parse_AdditiveExpression:
 1736|  8.02k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_UnaryExpression:
 1756|  13.6k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser21___parse_GraphNodePath:
 1651|  19.9k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser21___parse_NotExistsFunc:
 1885|  1.59k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_OptionalGraphPattern:
 1249|  6.20k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_EXPONENT:
 2017|  4.59k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_STRING_LITERAL_LONG1:
 2030|   159k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser15___parse_Update1:
  975|  8.53k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_BlankNode:
 1956|  41.8k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser21___parse_PN_CHARS_BASE:
 2052|   569k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser31___parse_GroupGraphPattern_clear:
 1175|  14.1k|        rule GroupGraphPattern_clear() = {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_OrderClause:
  948|  1.82k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_UsingClause:
 1125|  2.40k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser26___parse_LimitOffsetClauses:
  957|  1.82k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_SelectClause_option:
  820|  2.00k|        rule SelectClause_option() -> SelectionOption =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_ValuesClause:
  969|  1.82k|        rule ValuesClause() -> Option<GraphPattern> =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser11___parse_iri:
 1945|   174k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser37___parse_GroupOrUnionGraphPattern_item:
 1316|  6.35k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser29___parse_TriplesTemplate_inner:
 1170|  40.2k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_Path:
 1501|  35.0k|        rule Path() -> PropertyPathExpression = PathAlternative()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_GraphPatternNotTriples:
 1247|  6.33k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_DeleteClause:
 1119|  4.94k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_TriplesNodePath:
 1592|  17.9k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_NumericExpression:
 1734|  5.09k|        rule NumericExpression() -> Expression = AdditiveExpression()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser45___parse_PropertyListPathNotEmpty_item_content:
 1455|    598|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_MinusGraphPattern:
 1307|  5.66k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_Collection:
 1608|  22.7k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser32___parse_AdditiveExpression_inner:
 1742|  6.89k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_Annotation:
 1643|  17.4k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_PrimaryExpression:
 1764|  13.6k|        rule PrimaryExpression() -> Expression =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_VarOrTerm:
 1655|  84.0k|        rule VarOrTerm() -> TermPattern =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_HavingCondition:
  946|     44|        rule HavingCondition() -> Expression = Constraint()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_String:
 1943|   159k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_InsertData:
 1025|  5.63k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_GroupGraphPatternSub:
 1181|  5.37k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser15___parse_DECIMAL:
 2001|  50.6k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser24___parse_DECIMAL_NEGATIVE:
 2013|  46.6k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_GroupCondition_as:
  940|      2|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_Prologue:
  789|  2.98k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_SubSelect:
  807|  2.06k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_NumericLiteralUnsigned:
 1923|  51.2k|        rule NumericLiteralUnsigned() -> Literal =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_Filter:
 1318|  5.56k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_GroupGraphPattern:
 1172|  11.5k|        rule GroupGraphPattern() -> GraphPattern =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser33___parse_GroupGraphPatternSub_item:
 1234|  6.33k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_RDFLiteral:
 1916|  54.0k|        rule RDFLiteral() -> Literal =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_InlineDataFull:
 1285|    206|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_VerbPath:
 1462|  12.6k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser32___parse_GroupOrUnionGraphPattern:
 1311|  6.33k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_FunctionCall:
 1324|    420|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser24___parse_INTEGER_NEGATIVE:
 2011|  46.6k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_UpdateInit:
  787|  2.98k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_GraphTerm:
 1695|  63.8k|        rule GraphTerm() -> Term =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_NumericLiteral:
 1921|  51.2k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_PathOneInPropertySet:
 1570|  8.15k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_VAR2:
 1993|  99.9k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_GroupCondition_item:
  933|    442|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_BaseDecl:
  791|  2.98k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_WhereClause:
  916|  2.00k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_DOUBLE_POSITIVE:
 2009|  46.6k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser10UpdateInit:
  787|  2.76k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_DataBlock:
 1276|    258|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser13___parse_Clear:
  983|  8.53k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_Move:
 1005|  6.69k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser9___parse_i:
 2078|   371k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_PathElt_op:
 1526|  35.4k|        rule PathElt_op() -> char =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_ObjectList_item:
 1393|  17.4k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_StrReplaceExpression:
 1879|  1.88k|        rule StrReplaceExpression() -> Expression =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser24___parse_PathEltOrInverse:
 1531|  45.9k|        rule PathEltOrInverse() -> PropertyPathExpression =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_Expression:
 1703|  3.76k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_Verb:
 1384|  17.4k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCall:
 1789|  2.69k|        rule BuiltInCall() -> Expression =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_SelectClause_variables:
  824|  2.00k|        rule SelectClause_variables() -> SelectionVariables =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_ANON:
 2050|  41.8k|        rule ANON() = "[" WS()* "]"
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser15___parse_comment:
 2076|   734k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_Aggregate:
 1887|  2.69k|        rule Aggregate() -> AggregateExpression =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser24___parse_INTEGER_POSITIVE:
 2005|  46.6k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_Modify_clauses:
 1109|  4.94k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_LateralGraphPattern:
 1257|  5.95k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_PropertyListNotEmpty:
 1370|  17.4k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_QuadPattern:
 1146|  5.18k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser13___parse_Quads:
 1155|  5.51k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_Drop:
  987|  7.19k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser24___parse_BLANK_NODE_LABEL:
 1987|  41.8k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_ExpressionList_item:
 1336|  1.92k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser26___parse_TriplesSameSubject:
 1345|  40.2k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser26___parse_InlineDataFull_var:
 1292|  3.70k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser10___parse_WS:
 2048|  36.9k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_QuotedTriple:
 1663|  63.8k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_PathPrimary:
 1535|  45.9k|        rule PathPrimary() -> PropertyPathExpression =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_Bind:
 1270|  5.55k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_PrefixedName:
 1949|   117k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_SubstringExpression:
 1874|  1.88k|        rule SubstringExpression() -> Expression =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_NumericLiteralPositive:
 1928|  46.6k|        rule NumericLiteralPositive() -> Literal =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_OffsetClause:
  965|  1.82k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser32___parse_MultiplicativeExpression:
 1746|  13.6k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_AnnotationPath:
 1645|  15.3k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_NumericLiteralNegative:
 1934|  46.6k|        rule NumericLiteralNegative() -> Literal =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser11___parse_NIL:
 2046|  43.7k|        rule NIL() = "(" WS()* ")"
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_PN_CHARS:
 2058|   282k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_DeleteData:
 1029|  5.38k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_HavingClause:
  942|  1.82k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_SelectClause:
  811|  2.06k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_BooleanLiteral:
 1939|  46.6k|        rule BooleanLiteral() -> Literal =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_ObjectListPath_item:
 1477|  15.3k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_Constraint:
 1322|     47|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_PathAlternative_item:
 1508|  36.6k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_ExpressionList:
 1333|  1.91k|        rule ExpressionList() -> Vec<Expression> =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_TriplesBlock:
 1242|  6.33k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_InlineData:
 1274|  5.55k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_VerbSimple:
 1466|  10.5k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser15___parse_ArgList:
 1328|    763|        rule ArgList() -> Vec<Expression> =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser37___parse_ConditionalAndExpression_item:
 1713|  4.29k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_CollectionPath:
 1625|  17.9k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser38___parse_MultiplicativeExpression_inner:
 1752|  12.5k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_GraphNode:
 1647|  17.4k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
_RNvMNtNtCsBlCKulpTva_9spargebra6parser6parserNtB2_10ParseState3new:
  778|  2.98k|parser! {
  779|  2.98k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  2.98k|    grammar parser(state: &mut ParserState) for str {
  781|  2.98k|        pub rule QueryUnit() -> Query = Query()
  782|  2.98k|
  783|  2.98k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  2.98k|            q
  785|  2.98k|        }
  786|  2.98k|
  787|  2.98k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  2.98k|
  789|  2.98k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  2.98k|
  791|  2.98k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  2.98k|            state.base_iri = Some(i)
  793|  2.98k|        }
  794|  2.98k|
  795|  2.98k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  2.98k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  2.98k|        }
  798|  2.98k|
  799|  2.98k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  2.98k|            Ok(Query::Select {
  801|  2.98k|                dataset: d,
  802|  2.98k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  2.98k|                base_iri: state.base_iri.clone()
  804|  2.98k|            })
  805|  2.98k|        }
  806|  2.98k|
  807|  2.98k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  2.98k|            build_select(s, w, g, h, o, l, v, state)
  809|  2.98k|        }
  810|  2.98k|
  811|  2.98k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  2.98k|            Selection {
  813|  2.98k|                option: o,
  814|  2.98k|                variables: v
  815|  2.98k|            }
  816|  2.98k|        }
  817|  2.98k|        rule Selection_init() = {
  818|  2.98k|            state.aggregates.push(Vec::new())
  819|  2.98k|        }
  820|  2.98k|        rule SelectClause_option() -> SelectionOption =
  821|  2.98k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  2.98k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  2.98k|            { SelectionOption::Default }
  824|  2.98k|        rule SelectClause_variables() -> SelectionVariables =
  825|  2.98k|            "*" { SelectionVariables::Star } /
  826|  2.98k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  2.98k|        rule SelectClause_member() -> SelectionMember =
  828|  2.98k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  2.98k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  2.98k|
  831|  2.98k|        rule ConstructQuery() -> Query =
  832|  2.98k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  2.98k|                Ok(Query::Construct {
  834|  2.98k|                    template: c,
  835|  2.98k|                    dataset: d,
  836|  2.98k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  2.98k|                    base_iri: state.base_iri.clone()
  838|  2.98k|                })
  839|  2.98k|            } /
  840|  2.98k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  2.98k|                Ok(Query::Construct {
  842|  2.98k|                    template: c.clone(),
  843|  2.98k|                    dataset: d,
  844|  2.98k|                    pattern: build_select(
  845|  2.98k|                        Selection::no_op(),
  846|  2.98k|                        GraphPattern::Bgp { patterns: c },
  847|  2.98k|                        g, h, o, l, v, state
  848|  2.98k|                    )?,
  849|  2.98k|                    base_iri: state.base_iri.clone()
  850|  2.98k|                })
  851|  2.98k|            }
  852|  2.98k|
  853|  2.98k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  2.98k|
  855|  2.98k|        rule DescribeQuery() -> Query =
  856|  2.98k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  2.98k|                Ok(Query::Describe {
  858|  2.98k|                    dataset: d,
  859|  2.98k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  2.98k|                    base_iri: state.base_iri.clone()
  861|  2.98k|                })
  862|  2.98k|            } /
  863|  2.98k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  2.98k|                Ok(Query::Describe {
  865|  2.98k|                    dataset: d,
  866|  2.98k|                    pattern: build_select(Selection {
  867|  2.98k|                        option: SelectionOption::Default,
  868|  2.98k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  2.98k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  2.98k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  2.98k|                        }).collect())
  872|  2.98k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  2.98k|                    base_iri: state.base_iri.clone()
  874|  2.98k|                })
  875|  2.98k|            }
  876|  2.98k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  2.98k|
  878|  2.98k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  2.98k|            Ok(Query::Ask {
  880|  2.98k|                dataset: d,
  881|  2.98k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  2.98k|                base_iri: state.base_iri.clone()
  883|  2.98k|            })
  884|  2.98k|        }
  885|  2.98k|
  886|  2.98k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  2.98k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  2.98k|            if d.is_empty() {
  889|  2.98k|                return None;
  890|  2.98k|            }
  891|  2.98k|            let mut default = Vec::new();
  892|  2.98k|            let mut named = Vec::new();
  893|  2.98k|            for (d, n) in d {
  894|  2.98k|                if let Some(d) = d {
  895|  2.98k|                    default.push(d);
  896|  2.98k|                }
  897|  2.98k|                if let Some(n) = n {
  898|  2.98k|                    named.push(n);
  899|  2.98k|                }
  900|  2.98k|            }
  901|  2.98k|            Some(QueryDataset {
  902|  2.98k|                default, named: Some(named)
  903|  2.98k|            })
  904|  2.98k|        }
  905|  2.98k|
  906|  2.98k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  2.98k|            (Some(s), None)
  908|  2.98k|        }
  909|  2.98k|
  910|  2.98k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  2.98k|            (None, Some(s))
  912|  2.98k|        }
  913|  2.98k|
  914|  2.98k|        rule SourceSelector() -> NamedNode = iri()
  915|  2.98k|
  916|  2.98k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  2.98k|            p
  918|  2.98k|        }
  919|  2.98k|
  920|  2.98k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  2.98k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  2.98k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  2.98k|                if let Expression::Variable(v) = e {
  924|  2.98k|                    v
  925|  2.98k|                } else {
  926|  2.98k|                    let v = vo.unwrap_or_else(variable);
  927|  2.98k|                    projections.push((e, v.clone()));
  928|  2.98k|                    v
  929|  2.98k|                }
  930|  2.98k|            }).collect();
  931|  2.98k|            (clauses, projections)
  932|  2.98k|        }
  933|  2.98k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  2.98k|
  935|  2.98k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  2.98k|            e:BuiltInCall() { (e, None) } /
  937|  2.98k|            e:FunctionCall() { (e, None) } /
  938|  2.98k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  2.98k|            e:Var() { (e.into(), None) }
  940|  2.98k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  2.98k|
  942|  2.98k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  2.98k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  2.98k|        }
  945|  2.98k|
  946|  2.98k|        rule HavingCondition() -> Expression = Constraint()
  947|  2.98k|
  948|  2.98k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  2.98k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  2.98k|
  951|  2.98k|        rule OrderCondition() -> OrderExpression =
  952|  2.98k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  2.98k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  2.98k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  2.98k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  2.98k|
  957|  2.98k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  2.98k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  2.98k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  2.98k|
  961|  2.98k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  2.98k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  2.98k|        }
  964|  2.98k|
  965|  2.98k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  2.98k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  2.98k|        }
  968|  2.98k|
  969|  2.98k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  2.98k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  2.98k|            { None }
  972|  2.98k|
  973|  2.98k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  2.98k|
  975|  2.98k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  2.98k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  2.98k|
  978|  2.98k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  2.98k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  2.98k|        }
  981|  2.98k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  2.98k|
  983|  2.98k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  2.98k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  2.98k|        }
  986|  2.98k|
  987|  2.98k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  2.98k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  2.98k|        }
  990|  2.98k|
  991|  2.98k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  2.98k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  2.98k|        }
  994|  2.98k|
  995|  2.98k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  2.98k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  2.98k|            if from == to {
  998|  2.98k|                Vec::new() // identity case
  999|  2.98k|            } else {
 1000|  2.98k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  2.98k|                vec![copy_graph(from, to)]
 1002|  2.98k|            }
 1003|  2.98k|        }
 1004|  2.98k|
 1005|  2.98k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  2.98k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  2.98k|            if from == to {
 1008|  2.98k|                Vec::new() // identity case
 1009|  2.98k|            } else {
 1010|  2.98k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  2.98k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  2.98k|            }
 1013|  2.98k|        }
 1014|  2.98k|
 1015|  2.98k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  2.98k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  2.98k|            if from == to {
 1018|  2.98k|                Vec::new() // identity case
 1019|  2.98k|            } else {
 1020|  2.98k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  2.98k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  2.98k|            }
 1023|  2.98k|        }
 1024|  2.98k|
 1025|  2.98k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  2.98k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  2.98k|        }
 1028|  2.98k|
 1029|  2.98k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  2.98k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  2.98k|        }
 1032|  2.98k|
 1033|  2.98k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  2.98k|            let pattern = d.iter().map(|q| {
 1035|  2.98k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  2.98k|                match &q.graph_name {
 1037|  2.98k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  2.98k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  2.98k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  2.98k|                }
 1041|  2.98k|            }).reduce(new_join).unwrap_or_default();
 1042|  2.98k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  2.98k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  2.98k|                delete,
 1045|  2.98k|                insert: Vec::new(),
 1046|  2.98k|                using: None,
 1047|  2.98k|                pattern: Box::new(pattern)
 1048|  2.98k|            }])
 1049|  2.98k|        }
 1050|  2.98k|
 1051|  2.98k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  2.98k|            let (delete, insert) = c;
 1053|  2.98k|            let mut delete = delete.unwrap_or_default();
 1054|  2.98k|            let mut insert = insert.unwrap_or_default();
 1055|  2.98k|            #[allow(clippy::shadow_same)]
 1056|  2.98k|            let mut pattern = pattern;
 1057|  2.98k|
 1058|  2.98k|            let mut using = if u.is_empty() {
 1059|  2.98k|                None
 1060|  2.98k|            } else {
 1061|  2.98k|                let mut default = Vec::new();
 1062|  2.98k|                let mut named = Vec::new();
 1063|  2.98k|                for (d, n) in u {
 1064|  2.98k|                    if let Some(d) = d {
 1065|  2.98k|                        default.push(d)
 1066|  2.98k|                    }
 1067|  2.98k|                    if let Some(n) = n {
 1068|  2.98k|                        named.push(n)
 1069|  2.98k|                    }
 1070|  2.98k|                }
 1071|  2.98k|                Some(QueryDataset { default, named: Some(named) })
 1072|  2.98k|            };
 1073|  2.98k|
 1074|  2.98k|            if let Some(with) = with {
 1075|  2.98k|                // We inject WITH everywhere
 1076|  2.98k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  2.98k|                    GroundQuadPattern {
 1078|  2.98k|                        subject: q.subject,
 1079|  2.98k|                        predicate: q.predicate,
 1080|  2.98k|                        object: q.object,
 1081|  2.98k|                        graph_name: with.clone().into()
 1082|  2.98k|                    }
 1083|  2.98k|                } else {
 1084|  2.98k|                    q
 1085|  2.98k|                }).collect();
 1086|  2.98k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  2.98k|                    QuadPattern {
 1088|  2.98k|                        subject: q.subject,
 1089|  2.98k|                        predicate: q.predicate,
 1090|  2.98k|                        object: q.object,
 1091|  2.98k|                        graph_name: with.clone().into()
 1092|  2.98k|                    }
 1093|  2.98k|                } else {
 1094|  2.98k|                    q
 1095|  2.98k|                }).collect();
 1096|  2.98k|                if using.is_none() {
 1097|  2.98k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  2.98k|                }
 1099|  2.98k|            }
 1100|  2.98k|
 1101|  2.98k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  2.98k|                delete,
 1103|  2.98k|                insert,
 1104|  2.98k|                using,
 1105|  2.98k|                pattern: Box::new(pattern)
 1106|  2.98k|            }]
 1107|  2.98k|        }
 1108|  2.98k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  2.98k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  2.98k|            (Some(d), i)
 1111|  2.98k|        } / i:InsertClause() {
 1112|  2.98k|            (None, Some(i))
 1113|  2.98k|        }
 1114|  2.98k|        rule Modify_clear() = {
 1115|  2.98k|            state.used_bnodes.clear();
 1116|  2.98k|            state.currently_used_bnodes.clear();
 1117|  2.98k|        }
 1118|  2.98k|
 1119|  2.98k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  2.98k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  2.98k|        }
 1122|  2.98k|
 1123|  2.98k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  2.98k|
 1125|  2.98k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  2.98k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  2.98k|            (Some(i), None)
 1128|  2.98k|        }
 1129|  2.98k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  2.98k|            (None, Some(i))
 1131|  2.98k|        }
 1132|  2.98k|
 1133|  2.98k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  2.98k|            GraphName::DefaultGraph
 1135|  2.98k|        } / (i("GRAPH") _)? g:iri() {
 1136|  2.98k|            GraphName::NamedNode(g)
 1137|  2.98k|        }
 1138|  2.98k|
 1139|  2.98k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  2.98k|
 1141|  2.98k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  2.98k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  2.98k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  2.98k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  2.98k|
 1146|  2.98k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  2.98k|
 1148|  2.98k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  2.98k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  2.98k|        }
 1151|  2.98k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  2.98k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  2.98k|        }
 1154|  2.98k|
 1155|  2.98k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  2.98k|            q.into_iter().flatten().collect()
 1157|  2.98k|        }
 1158|  2.98k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  2.98k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  2.98k|        } //TODO: return iter?
 1161|  2.98k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  2.98k|
 1163|  2.98k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  2.98k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  2.98k|        }
 1166|  2.98k|
 1167|  2.98k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  2.98k|            ts.into_iter().flatten().collect()
 1169|  2.98k|        }
 1170|  2.98k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  2.98k|
 1172|  2.98k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  2.98k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  2.98k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  2.98k|        rule GroupGraphPattern_clear() = {
 1176|  2.98k|             // We deal with blank nodes aliases rule
 1177|  2.98k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  2.98k|            state.currently_used_bnodes.clear();
 1179|  2.98k|        }
 1180|  2.98k|
 1181|  2.98k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  2.98k|            let mut filter: Option<Expression> = None;
 1183|  2.98k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  2.98k|            for e in b.into_iter().flatten() {
 1185|  2.98k|                match e {
 1186|  2.98k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  2.98k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  2.98k|                    }
 1189|  2.98k|                    #[cfg(feature = "sep-0006")]
 1190|  2.98k|                    PartialGraphPattern::Lateral(p) => {
 1191|  2.98k|                        let mut defined_variables = HashSet::default();
 1192|  2.98k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  2.98k|                        let mut contains = false;
 1194|  2.98k|                        g.on_in_scope_variable(|v| {
 1195|  2.98k|                            if defined_variables.contains(v) {
 1196|  2.98k|                                contains = true;
 1197|  2.98k|                            }
 1198|  2.98k|                        });
 1199|  2.98k|                        if contains {
 1200|  2.98k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  2.98k|                        }
 1202|  2.98k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  2.98k|                    }
 1204|  2.98k|                    PartialGraphPattern::Minus(p) => {
 1205|  2.98k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  2.98k|                    }
 1207|  2.98k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  2.98k|                        let mut contains = false;
 1209|  2.98k|                        g.on_in_scope_variable(|v| {
 1210|  2.98k|                            if *v == variable {
 1211|  2.98k|                                contains = true;
 1212|  2.98k|                            }
 1213|  2.98k|                        });
 1214|  2.98k|                        if contains {
 1215|  2.98k|                            return Err("BIND is overriding an existing variable")
 1216|  2.98k|                        }
 1217|  2.98k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  2.98k|                    }
 1219|  2.98k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  2.98k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  2.98k|                    } else {
 1222|  2.98k|                        expr
 1223|  2.98k|                    }),
 1224|  2.98k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  2.98k|                }
 1226|  2.98k|            }
 1227|  2.98k|
 1228|  2.98k|            Ok(if let Some(expr) = filter {
 1229|  2.98k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  2.98k|            } else {
 1231|  2.98k|                g
 1232|  2.98k|            })
 1233|  2.98k|        }
 1234|  2.98k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  2.98k|            let mut result = vec![a];
 1236|  2.98k|            if let Some(v) = b {
 1237|  2.98k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  2.98k|            }
 1239|  2.98k|            result
 1240|  2.98k|        }
 1241|  2.98k|
 1242|  2.98k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  2.98k|            hs.into_iter().flatten().collect()
 1244|  2.98k|        }
 1245|  2.98k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  2.98k|
 1247|  2.98k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  2.98k|
 1249|  2.98k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  2.98k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  2.98k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  2.98k|            } else {
 1253|  2.98k|               PartialGraphPattern::Optional(p, None)
 1254|  2.98k|            }
 1255|  2.98k|        }
 1256|  2.98k|
 1257|  2.98k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  2.98k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  2.98k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  2.98k|        }
 1261|  2.98k|
 1262|  2.98k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  2.98k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  2.98k|        }
 1265|  2.98k|
 1266|  2.98k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  2.98k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  2.98k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  2.98k|
 1270|  2.98k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  2.98k|            PartialGraphPattern::Bind(e, v)
 1272|  2.98k|        }
 1273|  2.98k|
 1274|  2.98k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  2.98k|
 1276|  2.98k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  2.98k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  2.98k|        }
 1279|  2.98k|
 1280|  2.98k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  2.98k|            (vec![var], d)
 1282|  2.98k|        }
 1283|  2.98k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  2.98k|
 1285|  2.98k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  2.98k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  2.98k|                Ok((vars, vals))
 1288|  2.98k|            } else {
 1289|  2.98k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  2.98k|            }
 1291|  2.98k|        }
 1292|  2.98k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  2.98k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  2.98k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  2.98k|
 1296|  2.98k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  2.98k|            t:QuotedTripleData() {?
 1298|  2.98k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  2.98k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  2.98k|            } /
 1301|  2.98k|            i:iri() { Some(i.into()) } /
 1302|  2.98k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  2.98k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  2.98k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  2.98k|            i("UNDEF") { None }
 1306|  2.98k|
 1307|  2.98k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  2.98k|            PartialGraphPattern::Minus(p)
 1309|  2.98k|        }
 1310|  2.98k|
 1311|  2.98k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  2.98k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  2.98k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  2.98k|            }).map(PartialGraphPattern::Other)
 1315|  2.98k|        }
 1316|  2.98k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  2.98k|
 1318|  2.98k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  2.98k|            PartialGraphPattern::Filter(c)
 1320|  2.98k|        }
 1321|  2.98k|
 1322|  2.98k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  2.98k|
 1324|  2.98k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  2.98k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  2.98k|        }
 1327|  2.98k|
 1328|  2.98k|        rule ArgList() -> Vec<Expression> =
 1329|  2.98k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  2.98k|            NIL() { Vec::new() }
 1331|  2.98k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  2.98k|
 1333|  2.98k|        rule ExpressionList() -> Vec<Expression> =
 1334|  2.98k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  2.98k|            NIL() { Vec::new() }
 1336|  2.98k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  2.98k|
 1338|  2.98k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  2.98k|
 1340|  2.98k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  2.98k|            p.into_iter().flatten().collect()
 1342|  2.98k|        }
 1343|  2.98k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  2.98k|
 1345|  2.98k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  2.98k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  2.98k|                let mut patterns = po.patterns;
 1348|  2.98k|                for (p, os) in po.focus {
 1349|  2.98k|                    for o in os {
 1350|  2.98k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  2.98k|                    }
 1352|  2.98k|                }
 1353|  2.98k|                Ok(patterns)
 1354|  2.98k|            } /
 1355|  2.98k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  2.98k|                let mut patterns = s.patterns;
 1357|  2.98k|                patterns.extend(po.patterns);
 1358|  2.98k|                for (p, os) in po.focus {
 1359|  2.98k|                    for o in os {
 1360|  2.98k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  2.98k|                    }
 1362|  2.98k|                }
 1363|  2.98k|                Ok(patterns)
 1364|  2.98k|            }
 1365|  2.98k|
 1366|  2.98k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  2.98k|            PropertyListNotEmpty() /
 1368|  2.98k|            { FocusedTriplePattern::default() }
 1369|  2.98k|
 1370|  2.98k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  2.98k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  2.98k|                a.focus.push(b.focus);
 1373|  2.98k|                a.patterns.extend(b.patterns);
 1374|  2.98k|                a
 1375|  2.98k|            })
 1376|  2.98k|        }
 1377|  2.98k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  2.98k|            FocusedTriplePattern {
 1379|  2.98k|                focus: (p, o.focus),
 1380|  2.98k|                patterns: o.patterns
 1381|  2.98k|            }
 1382|  2.98k|        }
 1383|  2.98k|
 1384|  2.98k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  2.98k|
 1386|  2.98k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  2.98k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  2.98k|                a.focus.push(b.focus);
 1389|  2.98k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  2.98k|                a
 1391|  2.98k|            })
 1392|  2.98k|        }
 1393|  2.98k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  2.98k|
 1395|  2.98k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  2.98k|            if let Some(a) = a {
 1397|  2.98k|                let mut patterns = g.patterns;
 1398|  2.98k|                patterns.extend(a.patterns);
 1399|  2.98k|                FocusedTriplePattern {
 1400|  2.98k|                    focus: AnnotatedTerm {
 1401|  2.98k|                        term: g.focus,
 1402|  2.98k|                        annotations: a.focus
 1403|  2.98k|                    },
 1404|  2.98k|                    patterns
 1405|  2.98k|                }
 1406|  2.98k|            } else {
 1407|  2.98k|                FocusedTriplePattern {
 1408|  2.98k|                    focus: AnnotatedTerm {
 1409|  2.98k|                        term: g.focus,
 1410|  2.98k|                        annotations: Vec::new()
 1411|  2.98k|                    },
 1412|  2.98k|                    patterns: g.patterns
 1413|  2.98k|                }
 1414|  2.98k|            }
 1415|  2.98k|        }
 1416|  2.98k|
 1417|  2.98k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  2.98k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  2.98k|                let mut patterns = po.patterns;
 1420|  2.98k|                for (p, os) in po.focus {
 1421|  2.98k|                    for o in os {
 1422|  2.98k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  2.98k|                    }
 1424|  2.98k|                }
 1425|  2.98k|                Ok(patterns)
 1426|  2.98k|            } /
 1427|  2.98k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  2.98k|                let mut patterns = s.patterns;
 1429|  2.98k|                patterns.extend(po.patterns);
 1430|  2.98k|                for (p, os) in po.focus {
 1431|  2.98k|                    for o in os {
 1432|  2.98k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  2.98k|                    }
 1434|  2.98k|                }
 1435|  2.98k|                Ok(patterns)
 1436|  2.98k|            }
 1437|  2.98k|
 1438|  2.98k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  2.98k|            PropertyListPathNotEmpty() /
 1440|  2.98k|            { FocusedTripleOrPathPattern::default() }
 1441|  2.98k|
 1442|  2.98k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  2.98k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  2.98k|                    focus: vec![(hp, ho.focus)],
 1445|  2.98k|                    patterns: ho.patterns
 1446|  2.98k|                }, |mut a, b| {
 1447|  2.98k|                    a.focus.push(b.focus);
 1448|  2.98k|                    a.patterns.extend(b.patterns);
 1449|  2.98k|                    a
 1450|  2.98k|                })
 1451|  2.98k|        }
 1452|  2.98k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  2.98k|            c
 1454|  2.98k|        }
 1455|  2.98k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  2.98k|            FocusedTripleOrPathPattern {
 1457|  2.98k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  2.98k|                patterns: o.patterns
 1459|  2.98k|            }
 1460|  2.98k|        }
 1461|  2.98k|
 1462|  2.98k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  2.98k|            p.into()
 1464|  2.98k|        }
 1465|  2.98k|
 1466|  2.98k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  2.98k|            v.into()
 1468|  2.98k|        }
 1469|  2.98k|
 1470|  2.98k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  2.98k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  2.98k|                a.focus.push(b.focus);
 1473|  2.98k|                a.patterns.extend(b.patterns);
 1474|  2.98k|                a
 1475|  2.98k|            })
 1476|  2.98k|        }
 1477|  2.98k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  2.98k|
 1479|  2.98k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  2.98k|             if let Some(a) = a {
 1481|  2.98k|                let mut patterns = g.patterns;
 1482|  2.98k|                patterns.extend(a.patterns);
 1483|  2.98k|                FocusedTripleOrPathPattern {
 1484|  2.98k|                    focus: AnnotatedTermPath {
 1485|  2.98k|                        term: g.focus,
 1486|  2.98k|                        annotations: a.focus
 1487|  2.98k|                    },
 1488|  2.98k|                    patterns
 1489|  2.98k|                }
 1490|  2.98k|            } else {
 1491|  2.98k|                FocusedTripleOrPathPattern {
 1492|  2.98k|                    focus: AnnotatedTermPath {
 1493|  2.98k|                        term: g.focus,
 1494|  2.98k|                        annotations: Vec::new()
 1495|  2.98k|                    },
 1496|  2.98k|                    patterns: g.patterns
 1497|  2.98k|                }
 1498|  2.98k|            }
 1499|  2.98k|        }
 1500|  2.98k|
 1501|  2.98k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  2.98k|
 1503|  2.98k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  2.98k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  2.98k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  2.98k|            })
 1507|  2.98k|        }
 1508|  2.98k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  2.98k|
 1510|  2.98k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  2.98k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  2.98k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  2.98k|            })
 1514|  2.98k|        }
 1515|  2.98k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  2.98k|
 1517|  2.98k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  2.98k|            match o {
 1519|  2.98k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  2.98k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  2.98k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  2.98k|                Some(_) => unreachable!(),
 1523|  2.98k|                None => p
 1524|  2.98k|            }
 1525|  2.98k|        }
 1526|  2.98k|        rule PathElt_op() -> char =
 1527|  2.98k|            "*" { '*' } /
 1528|  2.98k|            "+" { '+' } /
 1529|  2.98k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  2.98k|
 1531|  2.98k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  2.98k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  2.98k|            PathElt()
 1534|  2.98k|
 1535|  2.98k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  2.98k|            v:iri() { v.into() } /
 1537|  2.98k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  2.98k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  2.98k|            "(" _ p:Path() _ ")" { p }
 1540|  2.98k|
 1541|  2.98k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  2.98k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  2.98k|                let mut direct = Vec::new();
 1544|  2.98k|                let mut inverse = Vec::new();
 1545|  2.98k|                for e in p {
 1546|  2.98k|                    match e {
 1547|  2.98k|                        Either::Left(a) => direct.push(a),
 1548|  2.98k|                        Either::Right(b) => inverse.push(b)
 1549|  2.98k|                    }
 1550|  2.98k|                }
 1551|  2.98k|                if inverse.is_empty() {
 1552|  2.98k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  2.98k|                } else if direct.is_empty() {
 1554|  2.98k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  2.98k|                } else {
 1556|  2.98k|                    PropertyPathExpression::Alternative(
 1557|  2.98k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  2.98k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  2.98k|                    )
 1560|  2.98k|                }
 1561|  2.98k|            } /
 1562|  2.98k|            p:PathOneInPropertySet() {
 1563|  2.98k|                match p {
 1564|  2.98k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  2.98k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  2.98k|                }
 1567|  2.98k|            }
 1568|  2.98k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  2.98k|
 1570|  2.98k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  2.98k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  2.98k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  2.98k|            v:iri() { Either::Left(v) } /
 1574|  2.98k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  2.98k|
 1576|  2.98k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  2.98k|
 1578|  2.98k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  2.98k|            let mut patterns = po.patterns;
 1580|  2.98k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  2.98k|            for (p, os) in po.focus {
 1582|  2.98k|                for o in os {
 1583|  2.98k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  2.98k|                }
 1585|  2.98k|            }
 1586|  2.98k|            Ok(FocusedTriplePattern {
 1587|  2.98k|                focus: bnode,
 1588|  2.98k|                patterns
 1589|  2.98k|            })
 1590|  2.98k|        }
 1591|  2.98k|
 1592|  2.98k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  2.98k|
 1594|  2.98k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  2.98k|            let mut patterns = po.patterns;
 1596|  2.98k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  2.98k|            for (p, os) in po.focus {
 1598|  2.98k|                for o in os {
 1599|  2.98k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  2.98k|                }
 1601|  2.98k|            }
 1602|  2.98k|            Ok(FocusedTripleOrPathPattern {
 1603|  2.98k|                focus: bnode,
 1604|  2.98k|                patterns
 1605|  2.98k|            })
 1606|  2.98k|        }
 1607|  2.98k|
 1608|  2.98k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  2.98k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  2.98k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  2.98k|            for objWithPatterns in o.into_iter().rev() {
 1612|  2.98k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  2.98k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  2.98k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  2.98k|                current_list_node = new_blank_node;
 1616|  2.98k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  2.98k|            }
 1618|  2.98k|            FocusedTriplePattern {
 1619|  2.98k|                focus: current_list_node,
 1620|  2.98k|                patterns
 1621|  2.98k|            }
 1622|  2.98k|        }
 1623|  2.98k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  2.98k|
 1625|  2.98k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  2.98k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  2.98k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  2.98k|            for objWithPatterns in o.into_iter().rev() {
 1629|  2.98k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  2.98k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  2.98k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  2.98k|                current_list_node = new_blank_node;
 1633|  2.98k|                patterns.extend(objWithPatterns.patterns);
 1634|  2.98k|            }
 1635|  2.98k|            FocusedTripleOrPathPattern {
 1636|  2.98k|                focus: current_list_node,
 1637|  2.98k|                patterns
 1638|  2.98k|            }
 1639|  2.98k|        }
 1640|  2.98k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  2.98k|
 1642|  2.98k|
 1643|  2.98k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  2.98k|
 1645|  2.98k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  2.98k|
 1647|  2.98k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  2.98k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  2.98k|            TriplesNode()
 1650|  2.98k|
 1651|  2.98k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  2.98k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  2.98k|            TriplesNodePath()
 1654|  2.98k|
 1655|  2.98k|        rule VarOrTerm() -> TermPattern =
 1656|  2.98k|            v:Var() { v.into() } /
 1657|  2.98k|            t:QuotedTriple() {?
 1658|  2.98k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  2.98k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  2.98k|            } /
 1661|  2.98k|            t:GraphTerm() { t.into() }
 1662|  2.98k|
 1663|  2.98k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  2.98k|            Ok(TriplePattern {
 1665|  2.98k|                subject: s,
 1666|  2.98k|                predicate: p,
 1667|  2.98k|                object: o
 1668|  2.98k|            })
 1669|  2.98k|        }
 1670|  2.98k|
 1671|  2.98k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  2.98k|            Ok(GroundTriple {
 1673|  2.98k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  2.98k|                predicate: p,
 1675|  2.98k|                object: o
 1676|  2.98k|            })
 1677|  2.98k|        }
 1678|  2.98k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  2.98k|
 1680|  2.98k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  2.98k|            l:RDFLiteral() { l.into() } /
 1682|  2.98k|            l:NumericLiteral() { l.into() } /
 1683|  2.98k|            l:BooleanLiteral() { l.into() } /
 1684|  2.98k|            t:QuotedTripleData() {?
 1685|  2.98k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  2.98k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  2.98k|            }
 1688|  2.98k|
 1689|  2.98k|        rule VarOrIri() -> NamedNodePattern =
 1690|  2.98k|            v:Var() { v.into() } /
 1691|  2.98k|            i:iri() { i.into() }
 1692|  2.98k|
 1693|  2.98k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  2.98k|
 1695|  2.98k|        rule GraphTerm() -> Term =
 1696|  2.98k|            i:iri() { i.into() } /
 1697|  2.98k|            l:RDFLiteral() { l.into() } /
 1698|  2.98k|            l:NumericLiteral() { l.into() } /
 1699|  2.98k|            l:BooleanLiteral() { l.into() } /
 1700|  2.98k|            b:BlankNode() { b.into() } /
 1701|  2.98k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  2.98k|
 1703|  2.98k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  2.98k|
 1705|  2.98k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  2.98k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  2.98k|        }
 1708|  2.98k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  2.98k|
 1710|  2.98k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  2.98k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  2.98k|        }
 1713|  2.98k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  2.98k|
 1715|  2.98k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  2.98k|
 1717|  2.98k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  2.98k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  2.98k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  2.98k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  2.98k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  2.98k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  2.98k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  2.98k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  2.98k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  2.98k|            Some(_) => unreachable!(),
 1727|  2.98k|            None => a
 1728|  2.98k|        } }
 1729|  2.98k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  2.98k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  2.98k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  2.98k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  2.98k|
 1734|  2.98k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  2.98k|
 1736|  2.98k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  2.98k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  2.98k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  2.98k|            Some(_) => unreachable!(),
 1740|  2.98k|            None => a,
 1741|  2.98k|        } }
 1742|  2.98k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  2.98k|            (s, e)
 1744|  2.98k|        }
 1745|  2.98k|
 1746|  2.98k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  2.98k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  2.98k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  2.98k|            Some(_) => unreachable!(),
 1750|  2.98k|            None => a
 1751|  2.98k|        } }
 1752|  2.98k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  2.98k|            (s, e)
 1754|  2.98k|        }
 1755|  2.98k|
 1756|  2.98k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  2.98k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  2.98k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  2.98k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  2.98k|            Some(_) => unreachable!(),
 1761|  2.98k|            None => e,
 1762|  2.98k|        } }
 1763|  2.98k|
 1764|  2.98k|        rule PrimaryExpression() -> Expression =
 1765|  2.98k|            BrackettedExpression()  /
 1766|  2.98k|            ExprQuotedTriple() /
 1767|  2.98k|            iriOrFunction() /
 1768|  2.98k|            v:Var() { v.into() } /
 1769|  2.98k|            l:RDFLiteral() { l.into() } /
 1770|  2.98k|            l:NumericLiteral() { l.into() } /
 1771|  2.98k|            l:BooleanLiteral() { l.into() } /
 1772|  2.98k|            BuiltInCall()
 1773|  2.98k|
 1774|  2.98k|        rule ExprVarOrTerm() -> Expression =
 1775|  2.98k|            ExprQuotedTriple() /
 1776|  2.98k|            i:iri() { i.into() } /
 1777|  2.98k|            l:RDFLiteral() { l.into() } /
 1778|  2.98k|            l:NumericLiteral() { l.into() } /
 1779|  2.98k|            l:BooleanLiteral() { l.into() } /
 1780|  2.98k|            v:Var() { v.into() }
 1781|  2.98k|
 1782|  2.98k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  2.98k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  2.98k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  2.98k|        }
 1786|  2.98k|
 1787|  2.98k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  2.98k|
 1789|  2.98k|        rule BuiltInCall() -> Expression =
 1790|  2.98k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  2.98k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  2.98k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  2.98k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  2.98k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  2.98k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  2.98k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  2.98k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  2.98k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  2.98k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  2.98k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  2.98k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  2.98k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  2.98k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  2.98k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  2.98k|            SubstringExpression() /
 1806|  2.98k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  2.98k|            StrReplaceExpression() /
 1808|  2.98k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  2.98k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  2.98k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  2.98k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  2.98k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  2.98k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  2.98k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  2.98k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  2.98k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  2.98k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  2.98k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  2.98k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  2.98k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  2.98k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  2.98k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  2.98k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  2.98k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  2.98k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  2.98k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  2.98k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  2.98k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  2.98k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  2.98k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  2.98k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  2.98k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  2.98k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  2.98k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  2.98k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  2.98k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  2.98k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  2.98k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  2.98k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  2.98k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  2.98k|            RegexExpression() /
 1842|  2.98k|            ExistsFunc() /
 1843|  2.98k|            NotExistsFunc() /
 1844|  2.98k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  2.98k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  2.98k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  2.98k|            } /
 1848|  2.98k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  2.98k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  2.98k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  2.98k|            } /
 1852|  2.98k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  2.98k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  2.98k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  2.98k|            } /
 1856|  2.98k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  2.98k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  2.98k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  2.98k|            } /
 1860|  2.98k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  2.98k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  2.98k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  2.98k|            } /
 1864|  2.98k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  2.98k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  2.98k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  2.98k|            }
 1868|  2.98k|
 1869|  2.98k|        rule RegexExpression() -> Expression =
 1870|  2.98k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  2.98k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  2.98k|
 1873|  2.98k|
 1874|  2.98k|        rule SubstringExpression() -> Expression =
 1875|  2.98k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  2.98k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  2.98k|
 1878|  2.98k|
 1879|  2.98k|        rule StrReplaceExpression() -> Expression =
 1880|  2.98k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  2.98k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  2.98k|
 1883|  2.98k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  2.98k|
 1885|  2.98k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  2.98k|
 1887|  2.98k|        rule Aggregate() -> AggregateExpression =
 1888|  2.98k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  2.98k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  2.98k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  2.98k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  2.98k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  2.98k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  2.98k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  2.98k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  2.98k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  2.98k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  2.98k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  2.98k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  2.98k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  2.98k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  2.98k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  2.98k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  2.98k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  2.98k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  2.98k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  2.98k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  2.98k|
 1909|  2.98k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  2.98k|            match a {
 1911|  2.98k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  2.98k|                None => i.into()
 1913|  2.98k|            }
 1914|  2.98k|        }
 1915|  2.98k|
 1916|  2.98k|        rule RDFLiteral() -> Literal =
 1917|  2.98k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  2.98k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  2.98k|            value:String() { Literal::new_simple_literal(value) }
 1920|  2.98k|
 1921|  2.98k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  2.98k|
 1923|  2.98k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  2.98k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  2.98k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  2.98k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  2.98k|
 1928|  2.98k|        rule NumericLiteralPositive() -> Literal =
 1929|  2.98k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  2.98k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  2.98k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  2.98k|
 1933|  2.98k|
 1934|  2.98k|        rule NumericLiteralNegative() -> Literal =
 1935|  2.98k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  2.98k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  2.98k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  2.98k|
 1939|  2.98k|        rule BooleanLiteral() -> Literal =
 1940|  2.98k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  2.98k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  2.98k|
 1943|  2.98k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  2.98k|
 1945|  2.98k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  2.98k|            NamedNode::from(i)
 1947|  2.98k|        }
 1948|  2.98k|
 1949|  2.98k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  2.98k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  2.98k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  2.98k|            } else {
 1953|  2.98k|                Err("Prefix not found")
 1954|  2.98k|            } }
 1955|  2.98k|
 1956|  2.98k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  2.98k|            let node = BlankNode::new_unchecked(id);
 1958|  2.98k|            if state.used_bnodes.contains(&node) {
 1959|  2.98k|                Err("Already used blank node id")
 1960|  2.98k|            } else {
 1961|  2.98k|                state.currently_used_bnodes.insert(node.clone());
 1962|  2.98k|                Ok(node)
 1963|  2.98k|            }
 1964|  2.98k|        } / ANON() { BlankNode::default() }
 1965|  2.98k|
 1966|  2.98k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  2.98k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  2.98k|        }
 1969|  2.98k|
 1970|  2.98k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  2.98k|            ns
 1972|  2.98k|        }
 1973|  2.98k|
 1974|  2.98k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  2.98k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  2.98k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  2.98k|                iri.push_str(base);
 1978|  2.98k|                for chunk in local.split('\\') { // We remove \
 1979|  2.98k|                    iri.push_str(chunk);
 1980|  2.98k|                }
 1981|  2.98k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  2.98k|            } else {
 1983|  2.98k|                Err("Prefix not found")
 1984|  2.98k|            }
 1985|  2.98k|        }
 1986|  2.98k|
 1987|  2.98k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  2.98k|            b
 1989|  2.98k|        }
 1990|  2.98k|
 1991|  2.98k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  2.98k|
 1993|  2.98k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  2.98k|
 1995|  2.98k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  2.98k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  2.98k|        }
 1998|  2.98k|
 1999|  2.98k|        rule INTEGER() = ['0'..='9']+
 2000|  2.98k|
 2001|  2.98k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  2.98k|
 2003|  2.98k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  2.98k|
 2005|  2.98k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  2.98k|
 2007|  2.98k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  2.98k|
 2009|  2.98k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  2.98k|
 2011|  2.98k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  2.98k|
 2013|  2.98k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  2.98k|
 2015|  2.98k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  2.98k|
 2017|  2.98k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  2.98k|
 2019|  2.98k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  2.98k|             unescape_string(l)
 2021|  2.98k|        }
 2022|  2.98k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  2.98k|
 2024|  2.98k|
 2025|  2.98k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  2.98k|             unescape_string(l)
 2027|  2.98k|        }
 2028|  2.98k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  2.98k|
 2030|  2.98k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  2.98k|             unescape_string(l)
 2032|  2.98k|        }
 2033|  2.98k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  2.98k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  2.98k|
 2036|  2.98k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  2.98k|             unescape_string(l)
 2038|  2.98k|        }
 2039|  2.98k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  2.98k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  2.98k|
 2042|  2.98k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  2.98k|
 2044|  2.98k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  2.98k|
 2046|  2.98k|        rule NIL() = "(" WS()* ")"
 2047|  2.98k|
 2048|  2.98k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  2.98k|
 2050|  2.98k|        rule ANON() = "[" WS()* "]"
 2051|  2.98k|
 2052|  2.98k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  2.98k|
 2054|  2.98k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  2.98k|
 2056|  2.98k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  2.98k|
 2058|  2.98k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  2.98k|
 2060|  2.98k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  2.98k|
 2062|  2.98k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  2.98k|
 2064|  2.98k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  2.98k|
 2066|  2.98k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  2.98k|
 2068|  2.98k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  2.98k|
 2070|  2.98k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  2.98k|
 2072|  2.98k|        //space
 2073|  2.98k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  2.98k|
 2075|  2.98k|        //comment
 2076|  2.98k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  2.98k|
 2078|  2.98k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  2.98k|            if input.eq_ignore_ascii_case(literal) {
 2080|  2.98k|                Ok(())
 2081|  2.98k|            } else {
 2082|  2.98k|                Err(literal)
 2083|  2.98k|            }
 2084|  2.98k|        }
 2085|  2.98k|    }
 2086|  2.98k|}
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser36___parse_ConditionalOrExpression_item:
 1708|  3.83k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_RelationalExpression:
 1717|  4.29k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_DeleteWhere:
 1033|  5.31k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser24___parse_DECIMAL_POSITIVE:
 2007|  46.6k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_GroupCondition:
  935|    442|        rule GroupCondition() -> (Expression, Option<Variable>) =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_STRING_LITERAL1:
 2019|   159k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_PrefixDecl:
  795|  2.98k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser15___parse_LANGTAG:
 1995|  2.53k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_Selection_init:
  817|  2.00k|        rule Selection_init() = {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser13___parse_UCHAR:
 2042|  5.74k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_SelectClause_member:
  827|  2.72k|        rule SelectClause_member() -> SelectionMember =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_DataBlockValue:
 1296|  5.67k|        rule DataBlockValue() -> Option<GroundTerm> =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_TriplesTemplate:
 1167|  37.8k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_GroupClause:
  920|  1.82k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_Modify:
 1051|  4.94k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser26___parse_TriplesBlock_inner:
 1245|  6.41k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_Modify_clear:
 1114|  4.94k|        rule Modify_clear() = {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_STRING_LITERAL2:
 2025|   159k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser24___parse_InlineDataOneVar:
 1280|    258|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser29___parse_BlankNodePropertyList:
 1578|  22.7k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_GroundQuadData:
 1151|     76|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser37___parse_PropertyListPathNotEmpty_item:
 1452|  12.0k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser29___parse_Quads_QuadsNotTriples:
 1161|  20.5k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_ObjectListPath:
 1470|  11.8k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_Modify_with:
 1108|  4.94k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_ValueLogical:
 1715|  4.29k|        rule ValueLogical() -> Expression = RelationalExpression()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser33___parse_BlankNodePropertyListPath:
 1594|  16.5k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser24___parse_PropertyListPath:
 1438|    639|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_CollectionPath_item:
 1640|  4.57k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser32___parse_ConditionalAndExpression:
 1710|  3.83k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_TriplesNode:
 1576|  22.7k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_Object:
 1395|  17.4k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser34___parse_RelationalExpression_inner:
 1729|  3.16k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_Copy:
 1015|  5.92k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
_RNvNtNtCsBlCKulpTva_9spargebra6parser6parser31___parse_ConditionalOrExpression:
 1705|  3.76k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
_RNCNvNtCsBlCKulpTva_9spargebra6parser12build_select0B5_:
  441|  3.41k|            p.on_in_scope_variable(|v| {
  442|  3.41k|                visible.insert(v.clone());
  443|  3.41k|            });
_RNvXsp_NtCsBlCKulpTva_9spargebra6parserINtB5_26FocusedTripleOrPathPatternINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtB5_17AnnotatedTermPathEENtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
  272|  11.8k|#[derive(Debug, Default)]
_RINvNtCsBlCKulpTva_9spargebra6parser37add_triple_to_triple_or_path_patternsNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeEB4_:
  186|  1.82k|fn add_triple_to_triple_or_path_patterns(
  187|  1.82k|    subject: TermPattern,
  188|  1.82k|    predicate: impl Into<NamedNodePattern>,
  189|  1.82k|    object: AnnotatedTermPath,
  190|  1.82k|    patterns: &mut Vec<TripleOrPathPattern>,
  191|  1.82k|) -> Result<(), &'static str> {
  192|  1.82k|    let triple = TriplePattern::new(subject, predicate, object.term);
  193|       |    #[cfg(feature = "rdf-star")]
  194|  1.82k|    for (p, os) in object.annotations {
  195|      0|        for o in os {
  196|      0|            add_to_triple_or_path_patterns(triple.clone().into(), p.clone(), o, patterns)?
  197|       |        }
  198|       |    }
  199|       |    #[cfg(not(feature = "rdf-star"))]
  200|       |    if !object.annotations.is_empty() {
  201|       |        return Err("Embedded triples are only available in SPARQL-star");
  202|       |    }
  203|  1.82k|    patterns.push(triple.into());
  204|  1.82k|    Ok(())
  205|  1.82k|}
_RNCINvNtCsBlCKulpTva_9spargebra6parser14not_empty_foldNtNtB6_7algebra10ExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBQ_ENCNCNvNtB4_6parser31___parse_ConditionalOrExpression00E0B6_:
  350|  2.70k|    iter.fold(None, |a, b| match a {
  351|     74|        Some(av) => Some(combine(av, b)),
  352|  2.63k|        None => Some(b),
  353|  2.70k|    })
_RNCNvNtCsBlCKulpTva_9spargebra6parser19are_variables_bounds_0B5_:
  560|      4|            parameters.iter().all(|p| are_variables_bound(p, variables))
_RINvNtCsBlCKulpTva_9spargebra6parser37add_triple_to_triple_or_path_patternsNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableEB4_:
  186|  12.0k|fn add_triple_to_triple_or_path_patterns(
  187|  12.0k|    subject: TermPattern,
  188|  12.0k|    predicate: impl Into<NamedNodePattern>,
  189|  12.0k|    object: AnnotatedTermPath,
  190|  12.0k|    patterns: &mut Vec<TripleOrPathPattern>,
  191|  12.0k|) -> Result<(), &'static str> {
  192|  12.0k|    let triple = TriplePattern::new(subject, predicate, object.term);
  193|       |    #[cfg(feature = "rdf-star")]
  194|  12.0k|    for (p, os) in object.annotations {
  195|      0|        for o in os {
  196|      0|            add_to_triple_or_path_patterns(triple.clone().into(), p.clone(), o, patterns)?
  197|       |        }
  198|       |    }
  199|       |    #[cfg(not(feature = "rdf-star"))]
  200|       |    if !object.annotations.is_empty() {
  201|       |        return Err("Embedded triples are only available in SPARQL-star");
  202|       |    }
  203|  12.0k|    patterns.push(triple.into());
  204|  12.0k|    Ok(())
  205|  12.0k|}
_RNCINvNtCsBlCKulpTva_9spargebra6parser14not_empty_foldNtNtB6_7algebra10ExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBQ_ENCNCNvNtB4_6parser20___parse_HavingClause00E0B6_:
  350|     22|    iter.fold(None, |a, b| match a {
  351|      0|        Some(av) => Some(combine(av, b)),
  352|     22|        None => Some(b),
  353|     22|    })
_RNvXsj_NtCsBlCKulpTva_9spargebra6parserINtB5_20FocusedTriplePatternINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtB5_13AnnotatedTermEENtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
   52|  17.4k|#[derive(Default)]
_RINvNtCsBlCKulpTva_9spargebra6parser30add_to_triple_or_path_patternsNtNtB4_7algebra22PropertyPathExpressionEB4_:
  124|  23.0k|fn add_to_triple_or_path_patterns(
  125|  23.0k|    subject: TermPattern,
  126|  23.0k|    predicate: impl Into<VariableOrPropertyPath>,
  127|  23.0k|    object: AnnotatedTermPath,
  128|  23.0k|    patterns: &mut Vec<TripleOrPathPattern>,
  129|  23.0k|) -> Result<(), &'static str> {
  130|  23.0k|    match predicate.into() {
  131|      0|        VariableOrPropertyPath::Variable(p) => {
  132|      0|            add_triple_to_triple_or_path_patterns(subject, p, object, patterns)?;
  133|       |        }
  134|  23.0k|        VariableOrPropertyPath::PropertyPath(p) => match p {
  135|  1.36k|            PropertyPathExpression::NamedNode(p) => {
  136|  1.36k|                add_triple_to_triple_or_path_patterns(subject, p, object, patterns)?;
  137|       |            }
  138|  10.6k|            PropertyPathExpression::Reverse(p) => add_to_triple_or_path_patterns(
  139|  10.6k|                object.term,
  140|  10.6k|                *p,
  141|  10.6k|                AnnotatedTermPath {
  142|  10.6k|                    term: subject,
  143|  10.6k|                    annotations: object.annotations,
  144|  10.6k|                },
  145|  10.6k|                patterns,
  146|  10.6k|            )?,
  147|  4.52k|            PropertyPathExpression::Sequence(a, b) => {
  148|  4.52k|                if !object.annotations.is_empty() {
  149|      0|                    return Err("Annotations are not allowed on property paths");
  150|  4.52k|                }
  151|  4.52k|                let middle = BlankNode::default();
  152|  4.52k|                add_to_triple_or_path_patterns(
  153|  4.52k|                    subject,
  154|  4.52k|                    *a,
  155|  4.52k|                    AnnotatedTermPath {
  156|  4.52k|                        term: middle.clone().into(),
  157|  4.52k|                        annotations: Vec::new(),
  158|  4.52k|                    },
  159|  4.52k|                    patterns,
  160|  4.52k|                )?;
  161|  4.52k|                add_to_triple_or_path_patterns(
  162|  4.52k|                    middle.into(),
  163|  4.52k|                    *b,
  164|  4.52k|                    AnnotatedTermPath {
  165|  4.52k|                        term: object.term,
  166|  4.52k|                        annotations: Vec::new(),
  167|  4.52k|                    },
  168|  4.52k|                    patterns,
  169|  4.52k|                )?;
  170|       |            }
  171|  6.53k|            path => {
  172|  6.53k|                if !object.annotations.is_empty() {
  173|      0|                    return Err("Annotations are not allowed on property paths");
  174|  6.53k|                }
  175|  6.53k|                patterns.push(TripleOrPathPattern::Path {
  176|  6.53k|                    subject,
  177|  6.53k|                    path,
  178|  6.53k|                    object: object.term,
  179|  6.53k|                })
  180|       |            }
  181|       |        },
  182|       |    }
  183|  23.0k|    Ok(())
  184|  23.0k|}
_RINvNtCsBlCKulpTva_9spargebra6parser14not_empty_foldNtNtB4_7algebra10ExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBO_ENCNCNvNtB2_6parser31___parse_ConditionalOrExpression00EB4_:
  346|  2.63k|fn not_empty_fold<T>(
  347|  2.63k|    iter: impl Iterator<Item = T>,
  348|  2.63k|    combine: impl Fn(T, T) -> T,
  349|  2.63k|) -> Result<T, &'static str> {
  350|  2.63k|    iter.fold(None, |a, b| match a {
  351|       |        Some(av) => Some(combine(av, b)),
  352|       |        None => Some(b),
  353|  2.63k|    })
  354|  2.63k|    .ok_or("The iterator should not be empty")
  355|  2.63k|}
_RINvNtCsBlCKulpTva_9spargebra6parser14not_empty_foldNtNtB4_7algebra22PropertyPathExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBO_ENCNCNvNtB2_6parser20___parse_PathSequence00EB4_:
  346|  26.1k|fn not_empty_fold<T>(
  347|  26.1k|    iter: impl Iterator<Item = T>,
  348|  26.1k|    combine: impl Fn(T, T) -> T,
  349|  26.1k|) -> Result<T, &'static str> {
  350|  26.1k|    iter.fold(None, |a, b| match a {
  351|       |        Some(av) => Some(combine(av, b)),
  352|       |        None => Some(b),
  353|  26.1k|    })
  354|  26.1k|    .ok_or("The iterator should not be empty")
  355|  26.1k|}
_RNCINvNtCsBlCKulpTva_9spargebra6parser14not_empty_foldNtNtB6_7algebra22PropertyPathExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBQ_ENCNCNvNtB4_6parser20___parse_PathSequence00E0B6_:
  350|  35.4k|    iter.fold(None, |a, b| match a {
  351|  9.29k|        Some(av) => Some(combine(av, b)),
  352|  26.1k|        None => Some(b),
  353|  35.4k|    })
_RNCINvNtCsBlCKulpTva_9spargebra6parser14not_empty_foldNtNtB6_7algebra22PropertyPathExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBQ_ENCNCNvNtB4_6parser23___parse_PathAlternative00E0B6_:
  350|  26.1k|    iter.fold(None, |a, b| match a {
  351|  1.61k|        Some(av) => Some(combine(av, b)),
  352|  24.5k|        None => Some(b),
  353|  26.1k|    })
_RNvMNtCsBlCKulpTva_9spargebra6parserINtB2_20FocusedTriplePatternNtNtB4_4term11TermPatternE3newB4_:
   59|  17.4k|    fn new(focus: F) -> Self {
   60|  17.4k|        Self {
   61|  17.4k|            focus,
   62|  17.4k|            patterns: Vec::new(),
   63|  17.4k|        }
   64|  17.4k|    }
_RNCNvNtCsBlCKulpTva_9spargebra6parser19are_variables_bound0B5_:
  557|      2|            are_variables_bound(a, variables) && b.iter().all(|b| are_variables_bound(b, variables))
_RINvNtCsBlCKulpTva_9spargebra6parser14not_empty_foldNtNtB4_7algebra22PropertyPathExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBO_ENCNCNvNtB2_6parser23___parse_PathAlternative00EB4_:
  346|  24.5k|fn not_empty_fold<T>(
  347|  24.5k|    iter: impl Iterator<Item = T>,
  348|  24.5k|    combine: impl Fn(T, T) -> T,
  349|  24.5k|) -> Result<T, &'static str> {
  350|  24.5k|    iter.fold(None, |a, b| match a {
  351|       |        Some(av) => Some(combine(av, b)),
  352|       |        None => Some(b),
  353|  24.5k|    })
  354|  24.5k|    .ok_or("The iterator should not be empty")
  355|  24.5k|}
_RNCINvNtCsBlCKulpTva_9spargebra6parser14not_empty_foldNtNtB6_7algebra10ExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBQ_ENCNCNvNtB4_6parser32___parse_ConditionalAndExpression00E0B6_:
  350|  3.16k|    iter.fold(None, |a, b| match a {
  351|    460|        Some(av) => Some(combine(av, b)),
  352|  2.70k|        None => Some(b),
  353|  3.16k|    })
_RINvNtCsBlCKulpTva_9spargebra6parser30add_to_triple_or_path_patternsNtB2_22VariableOrPropertyPathEB4_:
  124|  15.3k|fn add_to_triple_or_path_patterns(
  125|  15.3k|    subject: TermPattern,
  126|  15.3k|    predicate: impl Into<VariableOrPropertyPath>,
  127|  15.3k|    object: AnnotatedTermPath,
  128|  15.3k|    patterns: &mut Vec<TripleOrPathPattern>,
  129|  15.3k|) -> Result<(), &'static str> {
  130|  15.3k|    match predicate.into() {
  131|  12.0k|        VariableOrPropertyPath::Variable(p) => {
  132|  12.0k|            add_triple_to_triple_or_path_patterns(subject, p, object, patterns)?;
  133|       |        }
  134|  3.32k|        VariableOrPropertyPath::PropertyPath(p) => match p {
  135|    461|            PropertyPathExpression::NamedNode(p) => {
  136|    461|                add_triple_to_triple_or_path_patterns(subject, p, object, patterns)?;
  137|       |            }
  138|    798|            PropertyPathExpression::Reverse(p) => add_to_triple_or_path_patterns(
  139|    798|                object.term,
  140|    798|                *p,
  141|    798|                AnnotatedTermPath {
  142|    798|                    term: subject,
  143|    798|                    annotations: object.annotations,
  144|    798|                },
  145|    798|                patterns,
  146|    798|            )?,
  147|  1.29k|            PropertyPathExpression::Sequence(a, b) => {
  148|  1.29k|                if !object.annotations.is_empty() {
  149|      0|                    return Err("Annotations are not allowed on property paths");
  150|  1.29k|                }
  151|  1.29k|                let middle = BlankNode::default();
  152|  1.29k|                add_to_triple_or_path_patterns(
  153|  1.29k|                    subject,
  154|  1.29k|                    *a,
  155|  1.29k|                    AnnotatedTermPath {
  156|  1.29k|                        term: middle.clone().into(),
  157|  1.29k|                        annotations: Vec::new(),
  158|  1.29k|                    },
  159|  1.29k|                    patterns,
  160|  1.29k|                )?;
  161|  1.29k|                add_to_triple_or_path_patterns(
  162|  1.29k|                    middle.into(),
  163|  1.29k|                    *b,
  164|  1.29k|                    AnnotatedTermPath {
  165|  1.29k|                        term: object.term,
  166|  1.29k|                        annotations: Vec::new(),
  167|  1.29k|                    },
  168|  1.29k|                    patterns,
  169|  1.29k|                )?;
  170|       |            }
  171|    774|            path => {
  172|    774|                if !object.annotations.is_empty() {
  173|      0|                    return Err("Annotations are not allowed on property paths");
  174|    774|                }
  175|    774|                patterns.push(TripleOrPathPattern::Path {
  176|    774|                    subject,
  177|    774|                    path,
  178|    774|                    object: object.term,
  179|    774|                })
  180|       |            }
  181|       |        },
  182|       |    }
  183|  15.3k|    Ok(())
  184|  15.3k|}
_RINvNtCsBlCKulpTva_9spargebra6parser14not_empty_foldNtNtB4_7algebra10ExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBO_ENCNCNvNtB2_6parser32___parse_ConditionalAndExpression00EB4_:
  346|  2.70k|fn not_empty_fold<T>(
  347|  2.70k|    iter: impl Iterator<Item = T>,
  348|  2.70k|    combine: impl Fn(T, T) -> T,
  349|  2.70k|) -> Result<T, &'static str> {
  350|  2.70k|    iter.fold(None, |a, b| match a {
  351|       |        Some(av) => Some(combine(av, b)),
  352|       |        None => Some(b),
  353|  2.70k|    })
  354|  2.70k|    .ok_or("The iterator should not be empty")
  355|  2.70k|}
_RINvNtCsBlCKulpTva_9spargebra6parser14not_empty_foldNtNtB4_7algebra12GraphPatternINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBO_ENCNCNvNtB2_6parser32___parse_GroupOrUnionGraphPattern00EB4_:
  346|    133|fn not_empty_fold<T>(
  347|    133|    iter: impl Iterator<Item = T>,
  348|    133|    combine: impl Fn(T, T) -> T,
  349|    133|) -> Result<T, &'static str> {
  350|    133|    iter.fold(None, |a, b| match a {
  351|       |        Some(av) => Some(combine(av, b)),
  352|       |        None => Some(b),
  353|    133|    })
  354|    133|    .ok_or("The iterator should not be empty")
  355|    133|}
_RNCNvNtCsBlCKulpTva_9spargebra6parser12build_selects_0B5_:
  486|  8.13k|            p.on_in_scope_variable(|v| {
  487|  8.13k|                if !pv.contains(v) {
  488|  1.57k|                    pv.push(v.clone());
  489|  6.55k|                }
  490|  8.13k|            });
_RNvMs5_NtCsBlCKulpTva_9spargebra6parserINtB5_26FocusedTripleOrPathPatternNtNtB7_4term11TermPatternE3newB7_:
  279|  7.33k|    fn new(focus: F) -> Self {
  280|  7.33k|        Self {
  281|  7.33k|            focus,
  282|  7.33k|            patterns: Vec::new(),
  283|  7.33k|        }
  284|  7.33k|    }
_RNCNvNtCsBlCKulpTva_9spargebra6parser12parse_update0B5_:
   27|    226|        .map_err(|e| SparqlSyntaxError(ParseErrorKind::Syntax(e)))?;
_RNCINvNtCsBlCKulpTva_9spargebra6parser14not_empty_foldNtNtB6_7algebra12GraphPatternINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBQ_ENCNCNvNtB4_6parser32___parse_GroupOrUnionGraphPattern00E0B6_:
  350|    152|    iter.fold(None, |a, b| match a {
  351|     19|        Some(av) => Some(combine(av, b)),
  352|    133|        None => Some(b),
  353|    152|    })
_RINvNtCsBlCKulpTva_9spargebra6parser10copy_graphNtNtB4_4term9GraphNameBK_EB4_:
  631|    269|fn copy_graph(from: impl Into<GraphName>, to: impl Into<GraphNamePattern>) -> GraphUpdateOperation {
  632|    269|    let bgp = GraphPattern::Bgp {
  633|    269|        patterns: vec![TriplePattern::new(
  634|    269|            Variable::new_unchecked("s"),
  635|    269|            Variable::new_unchecked("p"),
  636|    269|            Variable::new_unchecked("o"),
  637|    269|        )],
  638|    269|    };
  639|    269|    GraphUpdateOperation::DeleteInsert {
  640|    269|        delete: Vec::new(),
  641|    269|        insert: vec![QuadPattern::new(
  642|    269|            Variable::new_unchecked("s"),
  643|    269|            Variable::new_unchecked("p"),
  644|    269|            Variable::new_unchecked("o"),
  645|    269|            to,
  646|    269|        )],
  647|    269|        using: None,
  648|    269|        pattern: Box::new(match from.into() {
  649|    157|            GraphName::NamedNode(from) => GraphPattern::Graph {
  650|    157|                name: from.into(),
  651|    157|                inner: Box::new(bgp),
  652|    157|            },
  653|    112|            GraphName::DefaultGraph => bgp,
  654|       |        }),
  655|       |    }
  656|    269|}
_RINvNtCsBlCKulpTva_9spargebra6parser14not_empty_foldNtNtB4_7algebra10ExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBO_ENCNCNvNtB2_6parser20___parse_HavingClause00EB4_:
  346|     22|fn not_empty_fold<T>(
  347|     22|    iter: impl Iterator<Item = T>,
  348|     22|    combine: impl Fn(T, T) -> T,
  349|     22|) -> Result<T, &'static str> {
  350|     22|    iter.fold(None, |a, b| match a {
  351|       |        Some(av) => Some(combine(av, b)),
  352|       |        None => Some(b),
  353|     22|    })
  354|     22|    .ok_or("The iterator should not be empty")
  355|     22|}
_RNvXsj_NtCsBlCKulpTva_9spargebra6parserINtB5_20FocusedTriplePatternINtNtCsjOdcKtOMjJI_5alloc3vec3VecTNtNtB7_4term16NamedNodePatternIB14_NtB5_13AnnotatedTermEEEENtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
   52|  17.4k|#[derive(Default)]
_RNvXsp_NtCsBlCKulpTva_9spargebra6parserINtB5_26FocusedTripleOrPathPatternINtNtCsjOdcKtOMjJI_5alloc3vec3VecTNtB5_22VariableOrPropertyPathIB1a_NtB5_17AnnotatedTermPathEEEENtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
  272|    609|#[derive(Debug, Default)]
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_VAR10B7_:
 1991|  48.0k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCalls5_0B7_:
 1797|     18|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser21___parse_GraphNodePath0B7_:
 1652|  7.33k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_GraphRefAlls_0B7_:
 1142|    249|            / i("DEFAULT") { GraphTarget::DefaultGraph }
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_QuadsNotTriples00B9_:
 1164|  15.0k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser32___parse_GroupOrUnionGraphPattern00B9_:
 1312|     19|            not_empty_fold(p.into_iter(), |a, b| {
 1313|     19|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|     19|            }).map(PartialGraphPattern::Other)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_DataBlockValues0_0B7_:
 1302|    150|            l:RDFLiteral() { Some(l.into()) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_PrimaryExpressions0_0B7_:
 1770|  2.22k|            l:NumericLiteral() { l.into() } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser26___parse_TriplesBlock_inner0B7_:
 1245|  1.73k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_VarOrTerm0B7_:
 1656|  20.1k|            v:Var() { v.into() } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_GraphOrDefault0B7_:
 1133|    922|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|    922|            GraphName::DefaultGraph
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser11___parse_iri0B7_:
 1945|  57.0k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  57.0k|            NamedNode::from(i)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_GraphRefAlls0_0B7_:
 1143|     52|            / i("NAMED") { GraphTarget::NamedGraphs }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser32___parse_ConditionalAndExpression0B7_:
  778|  2.70k|parser! {
  779|  2.70k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  2.70k|    grammar parser(state: &mut ParserState) for str {
  781|  2.70k|        pub rule QueryUnit() -> Query = Query()
  782|  2.70k|
  783|  2.70k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  2.70k|            q
  785|  2.70k|        }
  786|  2.70k|
  787|  2.70k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  2.70k|
  789|  2.70k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  2.70k|
  791|  2.70k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  2.70k|            state.base_iri = Some(i)
  793|  2.70k|        }
  794|  2.70k|
  795|  2.70k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  2.70k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  2.70k|        }
  798|  2.70k|
  799|  2.70k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  2.70k|            Ok(Query::Select {
  801|  2.70k|                dataset: d,
  802|  2.70k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  2.70k|                base_iri: state.base_iri.clone()
  804|  2.70k|            })
  805|  2.70k|        }
  806|  2.70k|
  807|  2.70k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  2.70k|            build_select(s, w, g, h, o, l, v, state)
  809|  2.70k|        }
  810|  2.70k|
  811|  2.70k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  2.70k|            Selection {
  813|  2.70k|                option: o,
  814|  2.70k|                variables: v
  815|  2.70k|            }
  816|  2.70k|        }
  817|  2.70k|        rule Selection_init() = {
  818|  2.70k|            state.aggregates.push(Vec::new())
  819|  2.70k|        }
  820|  2.70k|        rule SelectClause_option() -> SelectionOption =
  821|  2.70k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  2.70k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  2.70k|            { SelectionOption::Default }
  824|  2.70k|        rule SelectClause_variables() -> SelectionVariables =
  825|  2.70k|            "*" { SelectionVariables::Star } /
  826|  2.70k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  2.70k|        rule SelectClause_member() -> SelectionMember =
  828|  2.70k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  2.70k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  2.70k|
  831|  2.70k|        rule ConstructQuery() -> Query =
  832|  2.70k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  2.70k|                Ok(Query::Construct {
  834|  2.70k|                    template: c,
  835|  2.70k|                    dataset: d,
  836|  2.70k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  2.70k|                    base_iri: state.base_iri.clone()
  838|  2.70k|                })
  839|  2.70k|            } /
  840|  2.70k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  2.70k|                Ok(Query::Construct {
  842|  2.70k|                    template: c.clone(),
  843|  2.70k|                    dataset: d,
  844|  2.70k|                    pattern: build_select(
  845|  2.70k|                        Selection::no_op(),
  846|  2.70k|                        GraphPattern::Bgp { patterns: c },
  847|  2.70k|                        g, h, o, l, v, state
  848|  2.70k|                    )?,
  849|  2.70k|                    base_iri: state.base_iri.clone()
  850|  2.70k|                })
  851|  2.70k|            }
  852|  2.70k|
  853|  2.70k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  2.70k|
  855|  2.70k|        rule DescribeQuery() -> Query =
  856|  2.70k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  2.70k|                Ok(Query::Describe {
  858|  2.70k|                    dataset: d,
  859|  2.70k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  2.70k|                    base_iri: state.base_iri.clone()
  861|  2.70k|                })
  862|  2.70k|            } /
  863|  2.70k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  2.70k|                Ok(Query::Describe {
  865|  2.70k|                    dataset: d,
  866|  2.70k|                    pattern: build_select(Selection {
  867|  2.70k|                        option: SelectionOption::Default,
  868|  2.70k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  2.70k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  2.70k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  2.70k|                        }).collect())
  872|  2.70k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  2.70k|                    base_iri: state.base_iri.clone()
  874|  2.70k|                })
  875|  2.70k|            }
  876|  2.70k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  2.70k|
  878|  2.70k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  2.70k|            Ok(Query::Ask {
  880|  2.70k|                dataset: d,
  881|  2.70k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  2.70k|                base_iri: state.base_iri.clone()
  883|  2.70k|            })
  884|  2.70k|        }
  885|  2.70k|
  886|  2.70k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  2.70k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  2.70k|            if d.is_empty() {
  889|  2.70k|                return None;
  890|  2.70k|            }
  891|  2.70k|            let mut default = Vec::new();
  892|  2.70k|            let mut named = Vec::new();
  893|  2.70k|            for (d, n) in d {
  894|  2.70k|                if let Some(d) = d {
  895|  2.70k|                    default.push(d);
  896|  2.70k|                }
  897|  2.70k|                if let Some(n) = n {
  898|  2.70k|                    named.push(n);
  899|  2.70k|                }
  900|  2.70k|            }
  901|  2.70k|            Some(QueryDataset {
  902|  2.70k|                default, named: Some(named)
  903|  2.70k|            })
  904|  2.70k|        }
  905|  2.70k|
  906|  2.70k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  2.70k|            (Some(s), None)
  908|  2.70k|        }
  909|  2.70k|
  910|  2.70k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  2.70k|            (None, Some(s))
  912|  2.70k|        }
  913|  2.70k|
  914|  2.70k|        rule SourceSelector() -> NamedNode = iri()
  915|  2.70k|
  916|  2.70k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  2.70k|            p
  918|  2.70k|        }
  919|  2.70k|
  920|  2.70k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  2.70k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  2.70k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  2.70k|                if let Expression::Variable(v) = e {
  924|  2.70k|                    v
  925|  2.70k|                } else {
  926|  2.70k|                    let v = vo.unwrap_or_else(variable);
  927|  2.70k|                    projections.push((e, v.clone()));
  928|  2.70k|                    v
  929|  2.70k|                }
  930|  2.70k|            }).collect();
  931|  2.70k|            (clauses, projections)
  932|  2.70k|        }
  933|  2.70k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  2.70k|
  935|  2.70k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  2.70k|            e:BuiltInCall() { (e, None) } /
  937|  2.70k|            e:FunctionCall() { (e, None) } /
  938|  2.70k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  2.70k|            e:Var() { (e.into(), None) }
  940|  2.70k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  2.70k|
  942|  2.70k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  2.70k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  2.70k|        }
  945|  2.70k|
  946|  2.70k|        rule HavingCondition() -> Expression = Constraint()
  947|  2.70k|
  948|  2.70k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  2.70k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  2.70k|
  951|  2.70k|        rule OrderCondition() -> OrderExpression =
  952|  2.70k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  2.70k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  2.70k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  2.70k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  2.70k|
  957|  2.70k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  2.70k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  2.70k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  2.70k|
  961|  2.70k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  2.70k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  2.70k|        }
  964|  2.70k|
  965|  2.70k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  2.70k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  2.70k|        }
  968|  2.70k|
  969|  2.70k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  2.70k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  2.70k|            { None }
  972|  2.70k|
  973|  2.70k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  2.70k|
  975|  2.70k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  2.70k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  2.70k|
  978|  2.70k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  2.70k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  2.70k|        }
  981|  2.70k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  2.70k|
  983|  2.70k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  2.70k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  2.70k|        }
  986|  2.70k|
  987|  2.70k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  2.70k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  2.70k|        }
  990|  2.70k|
  991|  2.70k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  2.70k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  2.70k|        }
  994|  2.70k|
  995|  2.70k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  2.70k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  2.70k|            if from == to {
  998|  2.70k|                Vec::new() // identity case
  999|  2.70k|            } else {
 1000|  2.70k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  2.70k|                vec![copy_graph(from, to)]
 1002|  2.70k|            }
 1003|  2.70k|        }
 1004|  2.70k|
 1005|  2.70k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  2.70k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  2.70k|            if from == to {
 1008|  2.70k|                Vec::new() // identity case
 1009|  2.70k|            } else {
 1010|  2.70k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  2.70k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  2.70k|            }
 1013|  2.70k|        }
 1014|  2.70k|
 1015|  2.70k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  2.70k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  2.70k|            if from == to {
 1018|  2.70k|                Vec::new() // identity case
 1019|  2.70k|            } else {
 1020|  2.70k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  2.70k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  2.70k|            }
 1023|  2.70k|        }
 1024|  2.70k|
 1025|  2.70k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  2.70k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  2.70k|        }
 1028|  2.70k|
 1029|  2.70k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  2.70k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  2.70k|        }
 1032|  2.70k|
 1033|  2.70k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  2.70k|            let pattern = d.iter().map(|q| {
 1035|  2.70k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  2.70k|                match &q.graph_name {
 1037|  2.70k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  2.70k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  2.70k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  2.70k|                }
 1041|  2.70k|            }).reduce(new_join).unwrap_or_default();
 1042|  2.70k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  2.70k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  2.70k|                delete,
 1045|  2.70k|                insert: Vec::new(),
 1046|  2.70k|                using: None,
 1047|  2.70k|                pattern: Box::new(pattern)
 1048|  2.70k|            }])
 1049|  2.70k|        }
 1050|  2.70k|
 1051|  2.70k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  2.70k|            let (delete, insert) = c;
 1053|  2.70k|            let mut delete = delete.unwrap_or_default();
 1054|  2.70k|            let mut insert = insert.unwrap_or_default();
 1055|  2.70k|            #[allow(clippy::shadow_same)]
 1056|  2.70k|            let mut pattern = pattern;
 1057|  2.70k|
 1058|  2.70k|            let mut using = if u.is_empty() {
 1059|  2.70k|                None
 1060|  2.70k|            } else {
 1061|  2.70k|                let mut default = Vec::new();
 1062|  2.70k|                let mut named = Vec::new();
 1063|  2.70k|                for (d, n) in u {
 1064|  2.70k|                    if let Some(d) = d {
 1065|  2.70k|                        default.push(d)
 1066|  2.70k|                    }
 1067|  2.70k|                    if let Some(n) = n {
 1068|  2.70k|                        named.push(n)
 1069|  2.70k|                    }
 1070|  2.70k|                }
 1071|  2.70k|                Some(QueryDataset { default, named: Some(named) })
 1072|  2.70k|            };
 1073|  2.70k|
 1074|  2.70k|            if let Some(with) = with {
 1075|  2.70k|                // We inject WITH everywhere
 1076|  2.70k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  2.70k|                    GroundQuadPattern {
 1078|  2.70k|                        subject: q.subject,
 1079|  2.70k|                        predicate: q.predicate,
 1080|  2.70k|                        object: q.object,
 1081|  2.70k|                        graph_name: with.clone().into()
 1082|  2.70k|                    }
 1083|  2.70k|                } else {
 1084|  2.70k|                    q
 1085|  2.70k|                }).collect();
 1086|  2.70k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  2.70k|                    QuadPattern {
 1088|  2.70k|                        subject: q.subject,
 1089|  2.70k|                        predicate: q.predicate,
 1090|  2.70k|                        object: q.object,
 1091|  2.70k|                        graph_name: with.clone().into()
 1092|  2.70k|                    }
 1093|  2.70k|                } else {
 1094|  2.70k|                    q
 1095|  2.70k|                }).collect();
 1096|  2.70k|                if using.is_none() {
 1097|  2.70k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  2.70k|                }
 1099|  2.70k|            }
 1100|  2.70k|
 1101|  2.70k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  2.70k|                delete,
 1103|  2.70k|                insert,
 1104|  2.70k|                using,
 1105|  2.70k|                pattern: Box::new(pattern)
 1106|  2.70k|            }]
 1107|  2.70k|        }
 1108|  2.70k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  2.70k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  2.70k|            (Some(d), i)
 1111|  2.70k|        } / i:InsertClause() {
 1112|  2.70k|            (None, Some(i))
 1113|  2.70k|        }
 1114|  2.70k|        rule Modify_clear() = {
 1115|  2.70k|            state.used_bnodes.clear();
 1116|  2.70k|            state.currently_used_bnodes.clear();
 1117|  2.70k|        }
 1118|  2.70k|
 1119|  2.70k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  2.70k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  2.70k|        }
 1122|  2.70k|
 1123|  2.70k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  2.70k|
 1125|  2.70k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  2.70k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  2.70k|            (Some(i), None)
 1128|  2.70k|        }
 1129|  2.70k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  2.70k|            (None, Some(i))
 1131|  2.70k|        }
 1132|  2.70k|
 1133|  2.70k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  2.70k|            GraphName::DefaultGraph
 1135|  2.70k|        } / (i("GRAPH") _)? g:iri() {
 1136|  2.70k|            GraphName::NamedNode(g)
 1137|  2.70k|        }
 1138|  2.70k|
 1139|  2.70k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  2.70k|
 1141|  2.70k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  2.70k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  2.70k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  2.70k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  2.70k|
 1146|  2.70k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  2.70k|
 1148|  2.70k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  2.70k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  2.70k|        }
 1151|  2.70k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  2.70k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  2.70k|        }
 1154|  2.70k|
 1155|  2.70k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  2.70k|            q.into_iter().flatten().collect()
 1157|  2.70k|        }
 1158|  2.70k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  2.70k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  2.70k|        } //TODO: return iter?
 1161|  2.70k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  2.70k|
 1163|  2.70k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  2.70k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  2.70k|        }
 1166|  2.70k|
 1167|  2.70k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  2.70k|            ts.into_iter().flatten().collect()
 1169|  2.70k|        }
 1170|  2.70k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  2.70k|
 1172|  2.70k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  2.70k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  2.70k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  2.70k|        rule GroupGraphPattern_clear() = {
 1176|  2.70k|             // We deal with blank nodes aliases rule
 1177|  2.70k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  2.70k|            state.currently_used_bnodes.clear();
 1179|  2.70k|        }
 1180|  2.70k|
 1181|  2.70k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  2.70k|            let mut filter: Option<Expression> = None;
 1183|  2.70k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  2.70k|            for e in b.into_iter().flatten() {
 1185|  2.70k|                match e {
 1186|  2.70k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  2.70k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  2.70k|                    }
 1189|  2.70k|                    #[cfg(feature = "sep-0006")]
 1190|  2.70k|                    PartialGraphPattern::Lateral(p) => {
 1191|  2.70k|                        let mut defined_variables = HashSet::default();
 1192|  2.70k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  2.70k|                        let mut contains = false;
 1194|  2.70k|                        g.on_in_scope_variable(|v| {
 1195|  2.70k|                            if defined_variables.contains(v) {
 1196|  2.70k|                                contains = true;
 1197|  2.70k|                            }
 1198|  2.70k|                        });
 1199|  2.70k|                        if contains {
 1200|  2.70k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  2.70k|                        }
 1202|  2.70k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  2.70k|                    }
 1204|  2.70k|                    PartialGraphPattern::Minus(p) => {
 1205|  2.70k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  2.70k|                    }
 1207|  2.70k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  2.70k|                        let mut contains = false;
 1209|  2.70k|                        g.on_in_scope_variable(|v| {
 1210|  2.70k|                            if *v == variable {
 1211|  2.70k|                                contains = true;
 1212|  2.70k|                            }
 1213|  2.70k|                        });
 1214|  2.70k|                        if contains {
 1215|  2.70k|                            return Err("BIND is overriding an existing variable")
 1216|  2.70k|                        }
 1217|  2.70k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  2.70k|                    }
 1219|  2.70k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  2.70k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  2.70k|                    } else {
 1222|  2.70k|                        expr
 1223|  2.70k|                    }),
 1224|  2.70k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  2.70k|                }
 1226|  2.70k|            }
 1227|  2.70k|
 1228|  2.70k|            Ok(if let Some(expr) = filter {
 1229|  2.70k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  2.70k|            } else {
 1231|  2.70k|                g
 1232|  2.70k|            })
 1233|  2.70k|        }
 1234|  2.70k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  2.70k|            let mut result = vec![a];
 1236|  2.70k|            if let Some(v) = b {
 1237|  2.70k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  2.70k|            }
 1239|  2.70k|            result
 1240|  2.70k|        }
 1241|  2.70k|
 1242|  2.70k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  2.70k|            hs.into_iter().flatten().collect()
 1244|  2.70k|        }
 1245|  2.70k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  2.70k|
 1247|  2.70k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  2.70k|
 1249|  2.70k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  2.70k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  2.70k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  2.70k|            } else {
 1253|  2.70k|               PartialGraphPattern::Optional(p, None)
 1254|  2.70k|            }
 1255|  2.70k|        }
 1256|  2.70k|
 1257|  2.70k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  2.70k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  2.70k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  2.70k|        }
 1261|  2.70k|
 1262|  2.70k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  2.70k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  2.70k|        }
 1265|  2.70k|
 1266|  2.70k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  2.70k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  2.70k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  2.70k|
 1270|  2.70k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  2.70k|            PartialGraphPattern::Bind(e, v)
 1272|  2.70k|        }
 1273|  2.70k|
 1274|  2.70k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  2.70k|
 1276|  2.70k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  2.70k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  2.70k|        }
 1279|  2.70k|
 1280|  2.70k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  2.70k|            (vec![var], d)
 1282|  2.70k|        }
 1283|  2.70k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  2.70k|
 1285|  2.70k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  2.70k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  2.70k|                Ok((vars, vals))
 1288|  2.70k|            } else {
 1289|  2.70k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  2.70k|            }
 1291|  2.70k|        }
 1292|  2.70k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  2.70k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  2.70k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  2.70k|
 1296|  2.70k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  2.70k|            t:QuotedTripleData() {?
 1298|  2.70k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  2.70k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  2.70k|            } /
 1301|  2.70k|            i:iri() { Some(i.into()) } /
 1302|  2.70k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  2.70k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  2.70k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  2.70k|            i("UNDEF") { None }
 1306|  2.70k|
 1307|  2.70k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  2.70k|            PartialGraphPattern::Minus(p)
 1309|  2.70k|        }
 1310|  2.70k|
 1311|  2.70k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  2.70k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  2.70k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  2.70k|            }).map(PartialGraphPattern::Other)
 1315|  2.70k|        }
 1316|  2.70k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  2.70k|
 1318|  2.70k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  2.70k|            PartialGraphPattern::Filter(c)
 1320|  2.70k|        }
 1321|  2.70k|
 1322|  2.70k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  2.70k|
 1324|  2.70k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  2.70k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  2.70k|        }
 1327|  2.70k|
 1328|  2.70k|        rule ArgList() -> Vec<Expression> =
 1329|  2.70k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  2.70k|            NIL() { Vec::new() }
 1331|  2.70k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  2.70k|
 1333|  2.70k|        rule ExpressionList() -> Vec<Expression> =
 1334|  2.70k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  2.70k|            NIL() { Vec::new() }
 1336|  2.70k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  2.70k|
 1338|  2.70k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  2.70k|
 1340|  2.70k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  2.70k|            p.into_iter().flatten().collect()
 1342|  2.70k|        }
 1343|  2.70k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  2.70k|
 1345|  2.70k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  2.70k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  2.70k|                let mut patterns = po.patterns;
 1348|  2.70k|                for (p, os) in po.focus {
 1349|  2.70k|                    for o in os {
 1350|  2.70k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  2.70k|                    }
 1352|  2.70k|                }
 1353|  2.70k|                Ok(patterns)
 1354|  2.70k|            } /
 1355|  2.70k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  2.70k|                let mut patterns = s.patterns;
 1357|  2.70k|                patterns.extend(po.patterns);
 1358|  2.70k|                for (p, os) in po.focus {
 1359|  2.70k|                    for o in os {
 1360|  2.70k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  2.70k|                    }
 1362|  2.70k|                }
 1363|  2.70k|                Ok(patterns)
 1364|  2.70k|            }
 1365|  2.70k|
 1366|  2.70k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  2.70k|            PropertyListNotEmpty() /
 1368|  2.70k|            { FocusedTriplePattern::default() }
 1369|  2.70k|
 1370|  2.70k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  2.70k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  2.70k|                a.focus.push(b.focus);
 1373|  2.70k|                a.patterns.extend(b.patterns);
 1374|  2.70k|                a
 1375|  2.70k|            })
 1376|  2.70k|        }
 1377|  2.70k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  2.70k|            FocusedTriplePattern {
 1379|  2.70k|                focus: (p, o.focus),
 1380|  2.70k|                patterns: o.patterns
 1381|  2.70k|            }
 1382|  2.70k|        }
 1383|  2.70k|
 1384|  2.70k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  2.70k|
 1386|  2.70k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  2.70k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  2.70k|                a.focus.push(b.focus);
 1389|  2.70k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  2.70k|                a
 1391|  2.70k|            })
 1392|  2.70k|        }
 1393|  2.70k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  2.70k|
 1395|  2.70k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  2.70k|            if let Some(a) = a {
 1397|  2.70k|                let mut patterns = g.patterns;
 1398|  2.70k|                patterns.extend(a.patterns);
 1399|  2.70k|                FocusedTriplePattern {
 1400|  2.70k|                    focus: AnnotatedTerm {
 1401|  2.70k|                        term: g.focus,
 1402|  2.70k|                        annotations: a.focus
 1403|  2.70k|                    },
 1404|  2.70k|                    patterns
 1405|  2.70k|                }
 1406|  2.70k|            } else {
 1407|  2.70k|                FocusedTriplePattern {
 1408|  2.70k|                    focus: AnnotatedTerm {
 1409|  2.70k|                        term: g.focus,
 1410|  2.70k|                        annotations: Vec::new()
 1411|  2.70k|                    },
 1412|  2.70k|                    patterns: g.patterns
 1413|  2.70k|                }
 1414|  2.70k|            }
 1415|  2.70k|        }
 1416|  2.70k|
 1417|  2.70k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  2.70k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  2.70k|                let mut patterns = po.patterns;
 1420|  2.70k|                for (p, os) in po.focus {
 1421|  2.70k|                    for o in os {
 1422|  2.70k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  2.70k|                    }
 1424|  2.70k|                }
 1425|  2.70k|                Ok(patterns)
 1426|  2.70k|            } /
 1427|  2.70k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  2.70k|                let mut patterns = s.patterns;
 1429|  2.70k|                patterns.extend(po.patterns);
 1430|  2.70k|                for (p, os) in po.focus {
 1431|  2.70k|                    for o in os {
 1432|  2.70k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  2.70k|                    }
 1434|  2.70k|                }
 1435|  2.70k|                Ok(patterns)
 1436|  2.70k|            }
 1437|  2.70k|
 1438|  2.70k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  2.70k|            PropertyListPathNotEmpty() /
 1440|  2.70k|            { FocusedTripleOrPathPattern::default() }
 1441|  2.70k|
 1442|  2.70k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  2.70k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  2.70k|                    focus: vec![(hp, ho.focus)],
 1445|  2.70k|                    patterns: ho.patterns
 1446|  2.70k|                }, |mut a, b| {
 1447|  2.70k|                    a.focus.push(b.focus);
 1448|  2.70k|                    a.patterns.extend(b.patterns);
 1449|  2.70k|                    a
 1450|  2.70k|                })
 1451|  2.70k|        }
 1452|  2.70k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  2.70k|            c
 1454|  2.70k|        }
 1455|  2.70k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  2.70k|            FocusedTripleOrPathPattern {
 1457|  2.70k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  2.70k|                patterns: o.patterns
 1459|  2.70k|            }
 1460|  2.70k|        }
 1461|  2.70k|
 1462|  2.70k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  2.70k|            p.into()
 1464|  2.70k|        }
 1465|  2.70k|
 1466|  2.70k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  2.70k|            v.into()
 1468|  2.70k|        }
 1469|  2.70k|
 1470|  2.70k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  2.70k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  2.70k|                a.focus.push(b.focus);
 1473|  2.70k|                a.patterns.extend(b.patterns);
 1474|  2.70k|                a
 1475|  2.70k|            })
 1476|  2.70k|        }
 1477|  2.70k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  2.70k|
 1479|  2.70k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  2.70k|             if let Some(a) = a {
 1481|  2.70k|                let mut patterns = g.patterns;
 1482|  2.70k|                patterns.extend(a.patterns);
 1483|  2.70k|                FocusedTripleOrPathPattern {
 1484|  2.70k|                    focus: AnnotatedTermPath {
 1485|  2.70k|                        term: g.focus,
 1486|  2.70k|                        annotations: a.focus
 1487|  2.70k|                    },
 1488|  2.70k|                    patterns
 1489|  2.70k|                }
 1490|  2.70k|            } else {
 1491|  2.70k|                FocusedTripleOrPathPattern {
 1492|  2.70k|                    focus: AnnotatedTermPath {
 1493|  2.70k|                        term: g.focus,
 1494|  2.70k|                        annotations: Vec::new()
 1495|  2.70k|                    },
 1496|  2.70k|                    patterns: g.patterns
 1497|  2.70k|                }
 1498|  2.70k|            }
 1499|  2.70k|        }
 1500|  2.70k|
 1501|  2.70k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  2.70k|
 1503|  2.70k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  2.70k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  2.70k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  2.70k|            })
 1507|  2.70k|        }
 1508|  2.70k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  2.70k|
 1510|  2.70k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  2.70k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  2.70k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  2.70k|            })
 1514|  2.70k|        }
 1515|  2.70k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  2.70k|
 1517|  2.70k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  2.70k|            match o {
 1519|  2.70k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  2.70k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  2.70k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  2.70k|                Some(_) => unreachable!(),
 1523|  2.70k|                None => p
 1524|  2.70k|            }
 1525|  2.70k|        }
 1526|  2.70k|        rule PathElt_op() -> char =
 1527|  2.70k|            "*" { '*' } /
 1528|  2.70k|            "+" { '+' } /
 1529|  2.70k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  2.70k|
 1531|  2.70k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  2.70k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  2.70k|            PathElt()
 1534|  2.70k|
 1535|  2.70k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  2.70k|            v:iri() { v.into() } /
 1537|  2.70k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  2.70k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  2.70k|            "(" _ p:Path() _ ")" { p }
 1540|  2.70k|
 1541|  2.70k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  2.70k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  2.70k|                let mut direct = Vec::new();
 1544|  2.70k|                let mut inverse = Vec::new();
 1545|  2.70k|                for e in p {
 1546|  2.70k|                    match e {
 1547|  2.70k|                        Either::Left(a) => direct.push(a),
 1548|  2.70k|                        Either::Right(b) => inverse.push(b)
 1549|  2.70k|                    }
 1550|  2.70k|                }
 1551|  2.70k|                if inverse.is_empty() {
 1552|  2.70k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  2.70k|                } else if direct.is_empty() {
 1554|  2.70k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  2.70k|                } else {
 1556|  2.70k|                    PropertyPathExpression::Alternative(
 1557|  2.70k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  2.70k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  2.70k|                    )
 1560|  2.70k|                }
 1561|  2.70k|            } /
 1562|  2.70k|            p:PathOneInPropertySet() {
 1563|  2.70k|                match p {
 1564|  2.70k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  2.70k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  2.70k|                }
 1567|  2.70k|            }
 1568|  2.70k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  2.70k|
 1570|  2.70k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  2.70k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  2.70k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  2.70k|            v:iri() { Either::Left(v) } /
 1574|  2.70k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  2.70k|
 1576|  2.70k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  2.70k|
 1578|  2.70k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  2.70k|            let mut patterns = po.patterns;
 1580|  2.70k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  2.70k|            for (p, os) in po.focus {
 1582|  2.70k|                for o in os {
 1583|  2.70k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  2.70k|                }
 1585|  2.70k|            }
 1586|  2.70k|            Ok(FocusedTriplePattern {
 1587|  2.70k|                focus: bnode,
 1588|  2.70k|                patterns
 1589|  2.70k|            })
 1590|  2.70k|        }
 1591|  2.70k|
 1592|  2.70k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  2.70k|
 1594|  2.70k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  2.70k|            let mut patterns = po.patterns;
 1596|  2.70k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  2.70k|            for (p, os) in po.focus {
 1598|  2.70k|                for o in os {
 1599|  2.70k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  2.70k|                }
 1601|  2.70k|            }
 1602|  2.70k|            Ok(FocusedTripleOrPathPattern {
 1603|  2.70k|                focus: bnode,
 1604|  2.70k|                patterns
 1605|  2.70k|            })
 1606|  2.70k|        }
 1607|  2.70k|
 1608|  2.70k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  2.70k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  2.70k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  2.70k|            for objWithPatterns in o.into_iter().rev() {
 1612|  2.70k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  2.70k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  2.70k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  2.70k|                current_list_node = new_blank_node;
 1616|  2.70k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  2.70k|            }
 1618|  2.70k|            FocusedTriplePattern {
 1619|  2.70k|                focus: current_list_node,
 1620|  2.70k|                patterns
 1621|  2.70k|            }
 1622|  2.70k|        }
 1623|  2.70k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  2.70k|
 1625|  2.70k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  2.70k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  2.70k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  2.70k|            for objWithPatterns in o.into_iter().rev() {
 1629|  2.70k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  2.70k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  2.70k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  2.70k|                current_list_node = new_blank_node;
 1633|  2.70k|                patterns.extend(objWithPatterns.patterns);
 1634|  2.70k|            }
 1635|  2.70k|            FocusedTripleOrPathPattern {
 1636|  2.70k|                focus: current_list_node,
 1637|  2.70k|                patterns
 1638|  2.70k|            }
 1639|  2.70k|        }
 1640|  2.70k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  2.70k|
 1642|  2.70k|
 1643|  2.70k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  2.70k|
 1645|  2.70k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  2.70k|
 1647|  2.70k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  2.70k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  2.70k|            TriplesNode()
 1650|  2.70k|
 1651|  2.70k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  2.70k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  2.70k|            TriplesNodePath()
 1654|  2.70k|
 1655|  2.70k|        rule VarOrTerm() -> TermPattern =
 1656|  2.70k|            v:Var() { v.into() } /
 1657|  2.70k|            t:QuotedTriple() {?
 1658|  2.70k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  2.70k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  2.70k|            } /
 1661|  2.70k|            t:GraphTerm() { t.into() }
 1662|  2.70k|
 1663|  2.70k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  2.70k|            Ok(TriplePattern {
 1665|  2.70k|                subject: s,
 1666|  2.70k|                predicate: p,
 1667|  2.70k|                object: o
 1668|  2.70k|            })
 1669|  2.70k|        }
 1670|  2.70k|
 1671|  2.70k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  2.70k|            Ok(GroundTriple {
 1673|  2.70k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  2.70k|                predicate: p,
 1675|  2.70k|                object: o
 1676|  2.70k|            })
 1677|  2.70k|        }
 1678|  2.70k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  2.70k|
 1680|  2.70k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  2.70k|            l:RDFLiteral() { l.into() } /
 1682|  2.70k|            l:NumericLiteral() { l.into() } /
 1683|  2.70k|            l:BooleanLiteral() { l.into() } /
 1684|  2.70k|            t:QuotedTripleData() {?
 1685|  2.70k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  2.70k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  2.70k|            }
 1688|  2.70k|
 1689|  2.70k|        rule VarOrIri() -> NamedNodePattern =
 1690|  2.70k|            v:Var() { v.into() } /
 1691|  2.70k|            i:iri() { i.into() }
 1692|  2.70k|
 1693|  2.70k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  2.70k|
 1695|  2.70k|        rule GraphTerm() -> Term =
 1696|  2.70k|            i:iri() { i.into() } /
 1697|  2.70k|            l:RDFLiteral() { l.into() } /
 1698|  2.70k|            l:NumericLiteral() { l.into() } /
 1699|  2.70k|            l:BooleanLiteral() { l.into() } /
 1700|  2.70k|            b:BlankNode() { b.into() } /
 1701|  2.70k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  2.70k|
 1703|  2.70k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  2.70k|
 1705|  2.70k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  2.70k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  2.70k|        }
 1708|  2.70k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  2.70k|
 1710|  2.70k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  2.70k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  2.70k|        }
 1713|  2.70k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  2.70k|
 1715|  2.70k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  2.70k|
 1717|  2.70k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  2.70k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  2.70k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  2.70k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  2.70k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  2.70k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  2.70k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  2.70k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  2.70k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  2.70k|            Some(_) => unreachable!(),
 1727|  2.70k|            None => a
 1728|  2.70k|        } }
 1729|  2.70k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  2.70k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  2.70k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  2.70k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  2.70k|
 1734|  2.70k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  2.70k|
 1736|  2.70k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  2.70k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  2.70k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  2.70k|            Some(_) => unreachable!(),
 1740|  2.70k|            None => a,
 1741|  2.70k|        } }
 1742|  2.70k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  2.70k|            (s, e)
 1744|  2.70k|        }
 1745|  2.70k|
 1746|  2.70k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  2.70k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  2.70k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  2.70k|            Some(_) => unreachable!(),
 1750|  2.70k|            None => a
 1751|  2.70k|        } }
 1752|  2.70k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  2.70k|            (s, e)
 1754|  2.70k|        }
 1755|  2.70k|
 1756|  2.70k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  2.70k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  2.70k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  2.70k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  2.70k|            Some(_) => unreachable!(),
 1761|  2.70k|            None => e,
 1762|  2.70k|        } }
 1763|  2.70k|
 1764|  2.70k|        rule PrimaryExpression() -> Expression =
 1765|  2.70k|            BrackettedExpression()  /
 1766|  2.70k|            ExprQuotedTriple() /
 1767|  2.70k|            iriOrFunction() /
 1768|  2.70k|            v:Var() { v.into() } /
 1769|  2.70k|            l:RDFLiteral() { l.into() } /
 1770|  2.70k|            l:NumericLiteral() { l.into() } /
 1771|  2.70k|            l:BooleanLiteral() { l.into() } /
 1772|  2.70k|            BuiltInCall()
 1773|  2.70k|
 1774|  2.70k|        rule ExprVarOrTerm() -> Expression =
 1775|  2.70k|            ExprQuotedTriple() /
 1776|  2.70k|            i:iri() { i.into() } /
 1777|  2.70k|            l:RDFLiteral() { l.into() } /
 1778|  2.70k|            l:NumericLiteral() { l.into() } /
 1779|  2.70k|            l:BooleanLiteral() { l.into() } /
 1780|  2.70k|            v:Var() { v.into() }
 1781|  2.70k|
 1782|  2.70k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  2.70k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  2.70k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  2.70k|        }
 1786|  2.70k|
 1787|  2.70k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  2.70k|
 1789|  2.70k|        rule BuiltInCall() -> Expression =
 1790|  2.70k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  2.70k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  2.70k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  2.70k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  2.70k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  2.70k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  2.70k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  2.70k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  2.70k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  2.70k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  2.70k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  2.70k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  2.70k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  2.70k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  2.70k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  2.70k|            SubstringExpression() /
 1806|  2.70k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  2.70k|            StrReplaceExpression() /
 1808|  2.70k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  2.70k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  2.70k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  2.70k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  2.70k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  2.70k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  2.70k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  2.70k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  2.70k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  2.70k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  2.70k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  2.70k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  2.70k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  2.70k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  2.70k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  2.70k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  2.70k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  2.70k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  2.70k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  2.70k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  2.70k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  2.70k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  2.70k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  2.70k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  2.70k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  2.70k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  2.70k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  2.70k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  2.70k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  2.70k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  2.70k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  2.70k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  2.70k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  2.70k|            RegexExpression() /
 1842|  2.70k|            ExistsFunc() /
 1843|  2.70k|            NotExistsFunc() /
 1844|  2.70k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  2.70k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  2.70k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  2.70k|            } /
 1848|  2.70k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  2.70k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  2.70k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  2.70k|            } /
 1852|  2.70k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  2.70k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  2.70k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  2.70k|            } /
 1856|  2.70k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  2.70k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  2.70k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  2.70k|            } /
 1860|  2.70k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  2.70k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  2.70k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  2.70k|            } /
 1864|  2.70k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  2.70k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  2.70k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  2.70k|            }
 1868|  2.70k|
 1869|  2.70k|        rule RegexExpression() -> Expression =
 1870|  2.70k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  2.70k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  2.70k|
 1873|  2.70k|
 1874|  2.70k|        rule SubstringExpression() -> Expression =
 1875|  2.70k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  2.70k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  2.70k|
 1878|  2.70k|
 1879|  2.70k|        rule StrReplaceExpression() -> Expression =
 1880|  2.70k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  2.70k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  2.70k|
 1883|  2.70k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  2.70k|
 1885|  2.70k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  2.70k|
 1887|  2.70k|        rule Aggregate() -> AggregateExpression =
 1888|  2.70k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  2.70k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  2.70k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  2.70k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  2.70k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  2.70k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  2.70k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  2.70k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  2.70k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  2.70k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  2.70k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  2.70k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  2.70k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  2.70k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  2.70k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  2.70k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  2.70k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  2.70k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  2.70k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  2.70k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  2.70k|
 1909|  2.70k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  2.70k|            match a {
 1911|  2.70k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  2.70k|                None => i.into()
 1913|  2.70k|            }
 1914|  2.70k|        }
 1915|  2.70k|
 1916|  2.70k|        rule RDFLiteral() -> Literal =
 1917|  2.70k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  2.70k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  2.70k|            value:String() { Literal::new_simple_literal(value) }
 1920|  2.70k|
 1921|  2.70k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  2.70k|
 1923|  2.70k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  2.70k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  2.70k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  2.70k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  2.70k|
 1928|  2.70k|        rule NumericLiteralPositive() -> Literal =
 1929|  2.70k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  2.70k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  2.70k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  2.70k|
 1933|  2.70k|
 1934|  2.70k|        rule NumericLiteralNegative() -> Literal =
 1935|  2.70k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  2.70k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  2.70k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  2.70k|
 1939|  2.70k|        rule BooleanLiteral() -> Literal =
 1940|  2.70k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  2.70k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  2.70k|
 1943|  2.70k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  2.70k|
 1945|  2.70k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  2.70k|            NamedNode::from(i)
 1947|  2.70k|        }
 1948|  2.70k|
 1949|  2.70k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  2.70k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  2.70k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  2.70k|            } else {
 1953|  2.70k|                Err("Prefix not found")
 1954|  2.70k|            } }
 1955|  2.70k|
 1956|  2.70k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  2.70k|            let node = BlankNode::new_unchecked(id);
 1958|  2.70k|            if state.used_bnodes.contains(&node) {
 1959|  2.70k|                Err("Already used blank node id")
 1960|  2.70k|            } else {
 1961|  2.70k|                state.currently_used_bnodes.insert(node.clone());
 1962|  2.70k|                Ok(node)
 1963|  2.70k|            }
 1964|  2.70k|        } / ANON() { BlankNode::default() }
 1965|  2.70k|
 1966|  2.70k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  2.70k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  2.70k|        }
 1969|  2.70k|
 1970|  2.70k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  2.70k|            ns
 1972|  2.70k|        }
 1973|  2.70k|
 1974|  2.70k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  2.70k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  2.70k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  2.70k|                iri.push_str(base);
 1978|  2.70k|                for chunk in local.split('\\') { // We remove \
 1979|  2.70k|                    iri.push_str(chunk);
 1980|  2.70k|                }
 1981|  2.70k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  2.70k|            } else {
 1983|  2.70k|                Err("Prefix not found")
 1984|  2.70k|            }
 1985|  2.70k|        }
 1986|  2.70k|
 1987|  2.70k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  2.70k|            b
 1989|  2.70k|        }
 1990|  2.70k|
 1991|  2.70k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  2.70k|
 1993|  2.70k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  2.70k|
 1995|  2.70k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  2.70k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  2.70k|        }
 1998|  2.70k|
 1999|  2.70k|        rule INTEGER() = ['0'..='9']+
 2000|  2.70k|
 2001|  2.70k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  2.70k|
 2003|  2.70k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  2.70k|
 2005|  2.70k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  2.70k|
 2007|  2.70k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  2.70k|
 2009|  2.70k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  2.70k|
 2011|  2.70k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  2.70k|
 2013|  2.70k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  2.70k|
 2015|  2.70k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  2.70k|
 2017|  2.70k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  2.70k|
 2019|  2.70k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  2.70k|             unescape_string(l)
 2021|  2.70k|        }
 2022|  2.70k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  2.70k|
 2024|  2.70k|
 2025|  2.70k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  2.70k|             unescape_string(l)
 2027|  2.70k|        }
 2028|  2.70k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  2.70k|
 2030|  2.70k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  2.70k|             unescape_string(l)
 2032|  2.70k|        }
 2033|  2.70k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  2.70k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  2.70k|
 2036|  2.70k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  2.70k|             unescape_string(l)
 2038|  2.70k|        }
 2039|  2.70k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  2.70k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  2.70k|
 2042|  2.70k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  2.70k|
 2044|  2.70k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  2.70k|
 2046|  2.70k|        rule NIL() = "(" WS()* ")"
 2047|  2.70k|
 2048|  2.70k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  2.70k|
 2050|  2.70k|        rule ANON() = "[" WS()* "]"
 2051|  2.70k|
 2052|  2.70k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  2.70k|
 2054|  2.70k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  2.70k|
 2056|  2.70k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  2.70k|
 2058|  2.70k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  2.70k|
 2060|  2.70k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  2.70k|
 2062|  2.70k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  2.70k|
 2064|  2.70k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  2.70k|
 2066|  2.70k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  2.70k|
 2068|  2.70k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  2.70k|
 2070|  2.70k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  2.70k|
 2072|  2.70k|        //space
 2073|  2.70k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  2.70k|
 2075|  2.70k|        //comment
 2076|  2.70k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  2.70k|
 2078|  2.70k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  2.70k|            if input.eq_ignore_ascii_case(literal) {
 2080|  2.70k|                Ok(())
 2081|  2.70k|            } else {
 2082|  2.70k|                Err(literal)
 2083|  2.70k|            }
 2084|  2.70k|        }
 2085|  2.70k|    }
 2086|  2.70k|}
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_PathAlternative00B9_:
 1504|  1.61k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  1.61k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  1.61k|            })
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_InlineDataFull0B7_:
  778|    206|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|    206|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|    206|                Ok((vars, vals))
 1288|       |            } else {
 1289|      0|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_ExpressionLists_0B7_:
 1335|  1.12k|            NIL() { Vec::new() }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser24___parse_PathEltOrInverse0B7_:
 1532|  24.5k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_GroupClause0B7_:
  920|     84|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|     84|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|     84|            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|     84|            }).collect();
  931|     84|            (clauses, projections)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser15___parse_PathElt0B7_:
 1517|  35.4k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  35.4k|            match o {
 1519|  5.01k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  1.21k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  2.56k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|      0|                Some(_) => unreachable!(),
 1523|  26.6k|                None => p
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_GroupConditions1_0B7_:
  939|    307|            e:Var() { (e.into(), None) }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_SelectClause_variabless_0B7_:
  826|  1.15k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_ValuesClause0B7_:
  970|     81|            i("VALUES") _ p:DataBlock() { Some(p) } /
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_Modify00B9_:
 1076|  6.25k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  1.00k|                    GroundQuadPattern {
 1078|  1.00k|                        subject: q.subject,
 1079|  1.00k|                        predicate: q.predicate,
 1080|  1.00k|                        object: q.object,
 1081|  1.00k|                        graph_name: with.clone().into()
 1082|  1.00k|                    }
 1083|       |                } else {
 1084|  5.25k|                    q
 1085|  6.25k|                }).collect();
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_InlineDataFull00B9_:
 1286|    313|            if vals.iter().all(|vs| vs.len() == vars.len()) {
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser45___parse_PropertyListPathNotEmpty_item_content0B7_:
 1455|    372|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|    372|            FocusedTripleOrPathPattern {
 1457|    372|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|    372|                patterns: o.patterns
 1459|    372|            }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_TriplesSameSubjectPath0B7_:
  778|  1.09k|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|       |            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|       |                Ok((vars, vals))
 1288|       |            } else {
 1289|       |                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|       |            }
 1291|       |        }
 1292|       |        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|       |        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|       |        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|       |
 1296|       |        rule DataBlockValue() -> Option<GroundTerm> =
 1297|       |            t:QuotedTripleData() {?
 1298|       |                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|       |            } /
 1301|       |            i:iri() { Some(i.into()) } /
 1302|       |            l:RDFLiteral() { Some(l.into()) } /
 1303|       |            l:NumericLiteral() { Some(l.into()) } /
 1304|       |            l:BooleanLiteral() { Some(l.into()) } /
 1305|       |            i("UNDEF") { None }
 1306|       |
 1307|       |        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|       |            PartialGraphPattern::Minus(p)
 1309|       |        }
 1310|       |
 1311|       |        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|       |            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|       |            }).map(PartialGraphPattern::Other)
 1315|       |        }
 1316|       |        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|       |
 1318|       |        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|       |            PartialGraphPattern::Filter(c)
 1320|       |        }
 1321|       |
 1322|       |        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|       |
 1324|       |        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|       |            Expression::FunctionCall(Function::Custom(f), a)
 1326|       |        }
 1327|       |
 1328|       |        rule ArgList() -> Vec<Expression> =
 1329|       |            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|       |            NIL() { Vec::new() }
 1331|       |        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|       |
 1333|       |        rule ExpressionList() -> Vec<Expression> =
 1334|       |            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|       |            NIL() { Vec::new() }
 1336|       |        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|       |
 1338|       |        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|       |
 1340|       |        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|       |            p.into_iter().flatten().collect()
 1342|       |        }
 1343|       |        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|       |
 1345|       |        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|       |            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|       |                let mut patterns = po.patterns;
 1348|       |                for (p, os) in po.focus {
 1349|       |                    for o in os {
 1350|       |                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|       |                    }
 1352|       |                }
 1353|       |                Ok(patterns)
 1354|       |            } /
 1355|       |            s:TriplesNode() _ po:PropertyList() {?
 1356|       |                let mut patterns = s.patterns;
 1357|       |                patterns.extend(po.patterns);
 1358|       |                for (p, os) in po.focus {
 1359|       |                    for o in os {
 1360|       |                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|       |                    }
 1362|       |                }
 1363|       |                Ok(patterns)
 1364|       |            }
 1365|       |
 1366|       |        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|       |            PropertyListNotEmpty() /
 1368|       |            { FocusedTriplePattern::default() }
 1369|       |
 1370|       |        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|       |            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|       |                a.focus.push(b.focus);
 1373|       |                a.patterns.extend(b.patterns);
 1374|       |                a
 1375|       |            })
 1376|       |        }
 1377|       |        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|       |            FocusedTriplePattern {
 1379|       |                focus: (p, o.focus),
 1380|       |                patterns: o.patterns
 1381|       |            }
 1382|       |        }
 1383|       |
 1384|       |        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|       |
 1386|       |        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|       |            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|       |                a.focus.push(b.focus);
 1389|       |                a.patterns.extend_from_slice(&b.patterns);
 1390|       |                a
 1391|       |            })
 1392|       |        }
 1393|       |        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|       |
 1395|       |        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|       |            if let Some(a) = a {
 1397|       |                let mut patterns = g.patterns;
 1398|       |                patterns.extend(a.patterns);
 1399|       |                FocusedTriplePattern {
 1400|       |                    focus: AnnotatedTerm {
 1401|       |                        term: g.focus,
 1402|       |                        annotations: a.focus
 1403|       |                    },
 1404|       |                    patterns
 1405|       |                }
 1406|       |            } else {
 1407|       |                FocusedTriplePattern {
 1408|       |                    focus: AnnotatedTerm {
 1409|       |                        term: g.focus,
 1410|       |                        annotations: Vec::new()
 1411|       |                    },
 1412|       |                    patterns: g.patterns
 1413|       |                }
 1414|       |            }
 1415|       |        }
 1416|       |
 1417|       |        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|       |            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  1.09k|                let mut patterns = po.patterns;
 1420|  2.25k|                for (p, os) in po.focus {
 1421|  3.13k|                    for o in os {
 1422|  1.97k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|       |                    }
 1424|       |                }
 1425|  1.09k|                Ok(patterns)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_SubSelect0B7_:
  778|  1.82k|parser! {
  779|  1.82k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  1.82k|    grammar parser(state: &mut ParserState) for str {
  781|  1.82k|        pub rule QueryUnit() -> Query = Query()
  782|  1.82k|
  783|  1.82k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  1.82k|            q
  785|  1.82k|        }
  786|  1.82k|
  787|  1.82k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  1.82k|
  789|  1.82k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  1.82k|
  791|  1.82k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  1.82k|            state.base_iri = Some(i)
  793|  1.82k|        }
  794|  1.82k|
  795|  1.82k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  1.82k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  1.82k|        }
  798|  1.82k|
  799|  1.82k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  1.82k|            Ok(Query::Select {
  801|  1.82k|                dataset: d,
  802|  1.82k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  1.82k|                base_iri: state.base_iri.clone()
  804|  1.82k|            })
  805|  1.82k|        }
  806|  1.82k|
  807|  1.82k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  1.82k|            build_select(s, w, g, h, o, l, v, state)
  809|  1.82k|        }
  810|  1.82k|
  811|  1.82k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  1.82k|            Selection {
  813|  1.82k|                option: o,
  814|  1.82k|                variables: v
  815|  1.82k|            }
  816|  1.82k|        }
  817|  1.82k|        rule Selection_init() = {
  818|  1.82k|            state.aggregates.push(Vec::new())
  819|  1.82k|        }
  820|  1.82k|        rule SelectClause_option() -> SelectionOption =
  821|  1.82k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  1.82k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  1.82k|            { SelectionOption::Default }
  824|  1.82k|        rule SelectClause_variables() -> SelectionVariables =
  825|  1.82k|            "*" { SelectionVariables::Star } /
  826|  1.82k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  1.82k|        rule SelectClause_member() -> SelectionMember =
  828|  1.82k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  1.82k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  1.82k|
  831|  1.82k|        rule ConstructQuery() -> Query =
  832|  1.82k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  1.82k|                Ok(Query::Construct {
  834|  1.82k|                    template: c,
  835|  1.82k|                    dataset: d,
  836|  1.82k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  1.82k|                    base_iri: state.base_iri.clone()
  838|  1.82k|                })
  839|  1.82k|            } /
  840|  1.82k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  1.82k|                Ok(Query::Construct {
  842|  1.82k|                    template: c.clone(),
  843|  1.82k|                    dataset: d,
  844|  1.82k|                    pattern: build_select(
  845|  1.82k|                        Selection::no_op(),
  846|  1.82k|                        GraphPattern::Bgp { patterns: c },
  847|  1.82k|                        g, h, o, l, v, state
  848|  1.82k|                    )?,
  849|  1.82k|                    base_iri: state.base_iri.clone()
  850|  1.82k|                })
  851|  1.82k|            }
  852|  1.82k|
  853|  1.82k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  1.82k|
  855|  1.82k|        rule DescribeQuery() -> Query =
  856|  1.82k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  1.82k|                Ok(Query::Describe {
  858|  1.82k|                    dataset: d,
  859|  1.82k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  1.82k|                    base_iri: state.base_iri.clone()
  861|  1.82k|                })
  862|  1.82k|            } /
  863|  1.82k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  1.82k|                Ok(Query::Describe {
  865|  1.82k|                    dataset: d,
  866|  1.82k|                    pattern: build_select(Selection {
  867|  1.82k|                        option: SelectionOption::Default,
  868|  1.82k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  1.82k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  1.82k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  1.82k|                        }).collect())
  872|  1.82k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  1.82k|                    base_iri: state.base_iri.clone()
  874|  1.82k|                })
  875|  1.82k|            }
  876|  1.82k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  1.82k|
  878|  1.82k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  1.82k|            Ok(Query::Ask {
  880|  1.82k|                dataset: d,
  881|  1.82k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  1.82k|                base_iri: state.base_iri.clone()
  883|  1.82k|            })
  884|  1.82k|        }
  885|  1.82k|
  886|  1.82k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  1.82k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  1.82k|            if d.is_empty() {
  889|  1.82k|                return None;
  890|  1.82k|            }
  891|  1.82k|            let mut default = Vec::new();
  892|  1.82k|            let mut named = Vec::new();
  893|  1.82k|            for (d, n) in d {
  894|  1.82k|                if let Some(d) = d {
  895|  1.82k|                    default.push(d);
  896|  1.82k|                }
  897|  1.82k|                if let Some(n) = n {
  898|  1.82k|                    named.push(n);
  899|  1.82k|                }
  900|  1.82k|            }
  901|  1.82k|            Some(QueryDataset {
  902|  1.82k|                default, named: Some(named)
  903|  1.82k|            })
  904|  1.82k|        }
  905|  1.82k|
  906|  1.82k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  1.82k|            (Some(s), None)
  908|  1.82k|        }
  909|  1.82k|
  910|  1.82k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  1.82k|            (None, Some(s))
  912|  1.82k|        }
  913|  1.82k|
  914|  1.82k|        rule SourceSelector() -> NamedNode = iri()
  915|  1.82k|
  916|  1.82k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  1.82k|            p
  918|  1.82k|        }
  919|  1.82k|
  920|  1.82k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  1.82k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  1.82k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  1.82k|                if let Expression::Variable(v) = e {
  924|  1.82k|                    v
  925|  1.82k|                } else {
  926|  1.82k|                    let v = vo.unwrap_or_else(variable);
  927|  1.82k|                    projections.push((e, v.clone()));
  928|  1.82k|                    v
  929|  1.82k|                }
  930|  1.82k|            }).collect();
  931|  1.82k|            (clauses, projections)
  932|  1.82k|        }
  933|  1.82k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  1.82k|
  935|  1.82k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  1.82k|            e:BuiltInCall() { (e, None) } /
  937|  1.82k|            e:FunctionCall() { (e, None) } /
  938|  1.82k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  1.82k|            e:Var() { (e.into(), None) }
  940|  1.82k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  1.82k|
  942|  1.82k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  1.82k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  1.82k|        }
  945|  1.82k|
  946|  1.82k|        rule HavingCondition() -> Expression = Constraint()
  947|  1.82k|
  948|  1.82k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  1.82k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  1.82k|
  951|  1.82k|        rule OrderCondition() -> OrderExpression =
  952|  1.82k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  1.82k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  1.82k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  1.82k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  1.82k|
  957|  1.82k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  1.82k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  1.82k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  1.82k|
  961|  1.82k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  1.82k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  1.82k|        }
  964|  1.82k|
  965|  1.82k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  1.82k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  1.82k|        }
  968|  1.82k|
  969|  1.82k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  1.82k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  1.82k|            { None }
  972|  1.82k|
  973|  1.82k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  1.82k|
  975|  1.82k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  1.82k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  1.82k|
  978|  1.82k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  1.82k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  1.82k|        }
  981|  1.82k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  1.82k|
  983|  1.82k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  1.82k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  1.82k|        }
  986|  1.82k|
  987|  1.82k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  1.82k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  1.82k|        }
  990|  1.82k|
  991|  1.82k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  1.82k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  1.82k|        }
  994|  1.82k|
  995|  1.82k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  1.82k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  1.82k|            if from == to {
  998|  1.82k|                Vec::new() // identity case
  999|  1.82k|            } else {
 1000|  1.82k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  1.82k|                vec![copy_graph(from, to)]
 1002|  1.82k|            }
 1003|  1.82k|        }
 1004|  1.82k|
 1005|  1.82k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  1.82k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  1.82k|            if from == to {
 1008|  1.82k|                Vec::new() // identity case
 1009|  1.82k|            } else {
 1010|  1.82k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  1.82k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  1.82k|            }
 1013|  1.82k|        }
 1014|  1.82k|
 1015|  1.82k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  1.82k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  1.82k|            if from == to {
 1018|  1.82k|                Vec::new() // identity case
 1019|  1.82k|            } else {
 1020|  1.82k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  1.82k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  1.82k|            }
 1023|  1.82k|        }
 1024|  1.82k|
 1025|  1.82k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  1.82k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  1.82k|        }
 1028|  1.82k|
 1029|  1.82k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  1.82k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  1.82k|        }
 1032|  1.82k|
 1033|  1.82k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  1.82k|            let pattern = d.iter().map(|q| {
 1035|  1.82k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  1.82k|                match &q.graph_name {
 1037|  1.82k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  1.82k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  1.82k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  1.82k|                }
 1041|  1.82k|            }).reduce(new_join).unwrap_or_default();
 1042|  1.82k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  1.82k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  1.82k|                delete,
 1045|  1.82k|                insert: Vec::new(),
 1046|  1.82k|                using: None,
 1047|  1.82k|                pattern: Box::new(pattern)
 1048|  1.82k|            }])
 1049|  1.82k|        }
 1050|  1.82k|
 1051|  1.82k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  1.82k|            let (delete, insert) = c;
 1053|  1.82k|            let mut delete = delete.unwrap_or_default();
 1054|  1.82k|            let mut insert = insert.unwrap_or_default();
 1055|  1.82k|            #[allow(clippy::shadow_same)]
 1056|  1.82k|            let mut pattern = pattern;
 1057|  1.82k|
 1058|  1.82k|            let mut using = if u.is_empty() {
 1059|  1.82k|                None
 1060|  1.82k|            } else {
 1061|  1.82k|                let mut default = Vec::new();
 1062|  1.82k|                let mut named = Vec::new();
 1063|  1.82k|                for (d, n) in u {
 1064|  1.82k|                    if let Some(d) = d {
 1065|  1.82k|                        default.push(d)
 1066|  1.82k|                    }
 1067|  1.82k|                    if let Some(n) = n {
 1068|  1.82k|                        named.push(n)
 1069|  1.82k|                    }
 1070|  1.82k|                }
 1071|  1.82k|                Some(QueryDataset { default, named: Some(named) })
 1072|  1.82k|            };
 1073|  1.82k|
 1074|  1.82k|            if let Some(with) = with {
 1075|  1.82k|                // We inject WITH everywhere
 1076|  1.82k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  1.82k|                    GroundQuadPattern {
 1078|  1.82k|                        subject: q.subject,
 1079|  1.82k|                        predicate: q.predicate,
 1080|  1.82k|                        object: q.object,
 1081|  1.82k|                        graph_name: with.clone().into()
 1082|  1.82k|                    }
 1083|  1.82k|                } else {
 1084|  1.82k|                    q
 1085|  1.82k|                }).collect();
 1086|  1.82k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  1.82k|                    QuadPattern {
 1088|  1.82k|                        subject: q.subject,
 1089|  1.82k|                        predicate: q.predicate,
 1090|  1.82k|                        object: q.object,
 1091|  1.82k|                        graph_name: with.clone().into()
 1092|  1.82k|                    }
 1093|  1.82k|                } else {
 1094|  1.82k|                    q
 1095|  1.82k|                }).collect();
 1096|  1.82k|                if using.is_none() {
 1097|  1.82k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  1.82k|                }
 1099|  1.82k|            }
 1100|  1.82k|
 1101|  1.82k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  1.82k|                delete,
 1103|  1.82k|                insert,
 1104|  1.82k|                using,
 1105|  1.82k|                pattern: Box::new(pattern)
 1106|  1.82k|            }]
 1107|  1.82k|        }
 1108|  1.82k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  1.82k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  1.82k|            (Some(d), i)
 1111|  1.82k|        } / i:InsertClause() {
 1112|  1.82k|            (None, Some(i))
 1113|  1.82k|        }
 1114|  1.82k|        rule Modify_clear() = {
 1115|  1.82k|            state.used_bnodes.clear();
 1116|  1.82k|            state.currently_used_bnodes.clear();
 1117|  1.82k|        }
 1118|  1.82k|
 1119|  1.82k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  1.82k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  1.82k|        }
 1122|  1.82k|
 1123|  1.82k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  1.82k|
 1125|  1.82k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  1.82k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  1.82k|            (Some(i), None)
 1128|  1.82k|        }
 1129|  1.82k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  1.82k|            (None, Some(i))
 1131|  1.82k|        }
 1132|  1.82k|
 1133|  1.82k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  1.82k|            GraphName::DefaultGraph
 1135|  1.82k|        } / (i("GRAPH") _)? g:iri() {
 1136|  1.82k|            GraphName::NamedNode(g)
 1137|  1.82k|        }
 1138|  1.82k|
 1139|  1.82k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  1.82k|
 1141|  1.82k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  1.82k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  1.82k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  1.82k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  1.82k|
 1146|  1.82k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  1.82k|
 1148|  1.82k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  1.82k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  1.82k|        }
 1151|  1.82k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  1.82k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  1.82k|        }
 1154|  1.82k|
 1155|  1.82k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  1.82k|            q.into_iter().flatten().collect()
 1157|  1.82k|        }
 1158|  1.82k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  1.82k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  1.82k|        } //TODO: return iter?
 1161|  1.82k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  1.82k|
 1163|  1.82k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  1.82k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  1.82k|        }
 1166|  1.82k|
 1167|  1.82k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  1.82k|            ts.into_iter().flatten().collect()
 1169|  1.82k|        }
 1170|  1.82k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  1.82k|
 1172|  1.82k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  1.82k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  1.82k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  1.82k|        rule GroupGraphPattern_clear() = {
 1176|  1.82k|             // We deal with blank nodes aliases rule
 1177|  1.82k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  1.82k|            state.currently_used_bnodes.clear();
 1179|  1.82k|        }
 1180|  1.82k|
 1181|  1.82k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  1.82k|            let mut filter: Option<Expression> = None;
 1183|  1.82k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  1.82k|            for e in b.into_iter().flatten() {
 1185|  1.82k|                match e {
 1186|  1.82k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  1.82k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  1.82k|                    }
 1189|  1.82k|                    #[cfg(feature = "sep-0006")]
 1190|  1.82k|                    PartialGraphPattern::Lateral(p) => {
 1191|  1.82k|                        let mut defined_variables = HashSet::default();
 1192|  1.82k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  1.82k|                        let mut contains = false;
 1194|  1.82k|                        g.on_in_scope_variable(|v| {
 1195|  1.82k|                            if defined_variables.contains(v) {
 1196|  1.82k|                                contains = true;
 1197|  1.82k|                            }
 1198|  1.82k|                        });
 1199|  1.82k|                        if contains {
 1200|  1.82k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  1.82k|                        }
 1202|  1.82k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  1.82k|                    }
 1204|  1.82k|                    PartialGraphPattern::Minus(p) => {
 1205|  1.82k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  1.82k|                    }
 1207|  1.82k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  1.82k|                        let mut contains = false;
 1209|  1.82k|                        g.on_in_scope_variable(|v| {
 1210|  1.82k|                            if *v == variable {
 1211|  1.82k|                                contains = true;
 1212|  1.82k|                            }
 1213|  1.82k|                        });
 1214|  1.82k|                        if contains {
 1215|  1.82k|                            return Err("BIND is overriding an existing variable")
 1216|  1.82k|                        }
 1217|  1.82k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  1.82k|                    }
 1219|  1.82k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  1.82k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  1.82k|                    } else {
 1222|  1.82k|                        expr
 1223|  1.82k|                    }),
 1224|  1.82k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  1.82k|                }
 1226|  1.82k|            }
 1227|  1.82k|
 1228|  1.82k|            Ok(if let Some(expr) = filter {
 1229|  1.82k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  1.82k|            } else {
 1231|  1.82k|                g
 1232|  1.82k|            })
 1233|  1.82k|        }
 1234|  1.82k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  1.82k|            let mut result = vec![a];
 1236|  1.82k|            if let Some(v) = b {
 1237|  1.82k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  1.82k|            }
 1239|  1.82k|            result
 1240|  1.82k|        }
 1241|  1.82k|
 1242|  1.82k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  1.82k|            hs.into_iter().flatten().collect()
 1244|  1.82k|        }
 1245|  1.82k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  1.82k|
 1247|  1.82k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  1.82k|
 1249|  1.82k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  1.82k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  1.82k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  1.82k|            } else {
 1253|  1.82k|               PartialGraphPattern::Optional(p, None)
 1254|  1.82k|            }
 1255|  1.82k|        }
 1256|  1.82k|
 1257|  1.82k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  1.82k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  1.82k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  1.82k|        }
 1261|  1.82k|
 1262|  1.82k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  1.82k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  1.82k|        }
 1265|  1.82k|
 1266|  1.82k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  1.82k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  1.82k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  1.82k|
 1270|  1.82k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  1.82k|            PartialGraphPattern::Bind(e, v)
 1272|  1.82k|        }
 1273|  1.82k|
 1274|  1.82k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  1.82k|
 1276|  1.82k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  1.82k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  1.82k|        }
 1279|  1.82k|
 1280|  1.82k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  1.82k|            (vec![var], d)
 1282|  1.82k|        }
 1283|  1.82k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  1.82k|
 1285|  1.82k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  1.82k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  1.82k|                Ok((vars, vals))
 1288|  1.82k|            } else {
 1289|  1.82k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  1.82k|            }
 1291|  1.82k|        }
 1292|  1.82k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  1.82k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  1.82k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  1.82k|
 1296|  1.82k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  1.82k|            t:QuotedTripleData() {?
 1298|  1.82k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  1.82k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  1.82k|            } /
 1301|  1.82k|            i:iri() { Some(i.into()) } /
 1302|  1.82k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  1.82k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  1.82k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  1.82k|            i("UNDEF") { None }
 1306|  1.82k|
 1307|  1.82k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  1.82k|            PartialGraphPattern::Minus(p)
 1309|  1.82k|        }
 1310|  1.82k|
 1311|  1.82k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  1.82k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  1.82k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  1.82k|            }).map(PartialGraphPattern::Other)
 1315|  1.82k|        }
 1316|  1.82k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  1.82k|
 1318|  1.82k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  1.82k|            PartialGraphPattern::Filter(c)
 1320|  1.82k|        }
 1321|  1.82k|
 1322|  1.82k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  1.82k|
 1324|  1.82k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  1.82k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  1.82k|        }
 1327|  1.82k|
 1328|  1.82k|        rule ArgList() -> Vec<Expression> =
 1329|  1.82k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  1.82k|            NIL() { Vec::new() }
 1331|  1.82k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  1.82k|
 1333|  1.82k|        rule ExpressionList() -> Vec<Expression> =
 1334|  1.82k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  1.82k|            NIL() { Vec::new() }
 1336|  1.82k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  1.82k|
 1338|  1.82k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  1.82k|
 1340|  1.82k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  1.82k|            p.into_iter().flatten().collect()
 1342|  1.82k|        }
 1343|  1.82k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  1.82k|
 1345|  1.82k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  1.82k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  1.82k|                let mut patterns = po.patterns;
 1348|  1.82k|                for (p, os) in po.focus {
 1349|  1.82k|                    for o in os {
 1350|  1.82k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  1.82k|                    }
 1352|  1.82k|                }
 1353|  1.82k|                Ok(patterns)
 1354|  1.82k|            } /
 1355|  1.82k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  1.82k|                let mut patterns = s.patterns;
 1357|  1.82k|                patterns.extend(po.patterns);
 1358|  1.82k|                for (p, os) in po.focus {
 1359|  1.82k|                    for o in os {
 1360|  1.82k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  1.82k|                    }
 1362|  1.82k|                }
 1363|  1.82k|                Ok(patterns)
 1364|  1.82k|            }
 1365|  1.82k|
 1366|  1.82k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  1.82k|            PropertyListNotEmpty() /
 1368|  1.82k|            { FocusedTriplePattern::default() }
 1369|  1.82k|
 1370|  1.82k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  1.82k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  1.82k|                a.focus.push(b.focus);
 1373|  1.82k|                a.patterns.extend(b.patterns);
 1374|  1.82k|                a
 1375|  1.82k|            })
 1376|  1.82k|        }
 1377|  1.82k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  1.82k|            FocusedTriplePattern {
 1379|  1.82k|                focus: (p, o.focus),
 1380|  1.82k|                patterns: o.patterns
 1381|  1.82k|            }
 1382|  1.82k|        }
 1383|  1.82k|
 1384|  1.82k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  1.82k|
 1386|  1.82k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  1.82k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  1.82k|                a.focus.push(b.focus);
 1389|  1.82k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  1.82k|                a
 1391|  1.82k|            })
 1392|  1.82k|        }
 1393|  1.82k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  1.82k|
 1395|  1.82k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  1.82k|            if let Some(a) = a {
 1397|  1.82k|                let mut patterns = g.patterns;
 1398|  1.82k|                patterns.extend(a.patterns);
 1399|  1.82k|                FocusedTriplePattern {
 1400|  1.82k|                    focus: AnnotatedTerm {
 1401|  1.82k|                        term: g.focus,
 1402|  1.82k|                        annotations: a.focus
 1403|  1.82k|                    },
 1404|  1.82k|                    patterns
 1405|  1.82k|                }
 1406|  1.82k|            } else {
 1407|  1.82k|                FocusedTriplePattern {
 1408|  1.82k|                    focus: AnnotatedTerm {
 1409|  1.82k|                        term: g.focus,
 1410|  1.82k|                        annotations: Vec::new()
 1411|  1.82k|                    },
 1412|  1.82k|                    patterns: g.patterns
 1413|  1.82k|                }
 1414|  1.82k|            }
 1415|  1.82k|        }
 1416|  1.82k|
 1417|  1.82k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  1.82k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  1.82k|                let mut patterns = po.patterns;
 1420|  1.82k|                for (p, os) in po.focus {
 1421|  1.82k|                    for o in os {
 1422|  1.82k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  1.82k|                    }
 1424|  1.82k|                }
 1425|  1.82k|                Ok(patterns)
 1426|  1.82k|            } /
 1427|  1.82k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  1.82k|                let mut patterns = s.patterns;
 1429|  1.82k|                patterns.extend(po.patterns);
 1430|  1.82k|                for (p, os) in po.focus {
 1431|  1.82k|                    for o in os {
 1432|  1.82k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  1.82k|                    }
 1434|  1.82k|                }
 1435|  1.82k|                Ok(patterns)
 1436|  1.82k|            }
 1437|  1.82k|
 1438|  1.82k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  1.82k|            PropertyListPathNotEmpty() /
 1440|  1.82k|            { FocusedTripleOrPathPattern::default() }
 1441|  1.82k|
 1442|  1.82k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  1.82k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  1.82k|                    focus: vec![(hp, ho.focus)],
 1445|  1.82k|                    patterns: ho.patterns
 1446|  1.82k|                }, |mut a, b| {
 1447|  1.82k|                    a.focus.push(b.focus);
 1448|  1.82k|                    a.patterns.extend(b.patterns);
 1449|  1.82k|                    a
 1450|  1.82k|                })
 1451|  1.82k|        }
 1452|  1.82k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  1.82k|            c
 1454|  1.82k|        }
 1455|  1.82k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  1.82k|            FocusedTripleOrPathPattern {
 1457|  1.82k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  1.82k|                patterns: o.patterns
 1459|  1.82k|            }
 1460|  1.82k|        }
 1461|  1.82k|
 1462|  1.82k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  1.82k|            p.into()
 1464|  1.82k|        }
 1465|  1.82k|
 1466|  1.82k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  1.82k|            v.into()
 1468|  1.82k|        }
 1469|  1.82k|
 1470|  1.82k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  1.82k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  1.82k|                a.focus.push(b.focus);
 1473|  1.82k|                a.patterns.extend(b.patterns);
 1474|  1.82k|                a
 1475|  1.82k|            })
 1476|  1.82k|        }
 1477|  1.82k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  1.82k|
 1479|  1.82k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  1.82k|             if let Some(a) = a {
 1481|  1.82k|                let mut patterns = g.patterns;
 1482|  1.82k|                patterns.extend(a.patterns);
 1483|  1.82k|                FocusedTripleOrPathPattern {
 1484|  1.82k|                    focus: AnnotatedTermPath {
 1485|  1.82k|                        term: g.focus,
 1486|  1.82k|                        annotations: a.focus
 1487|  1.82k|                    },
 1488|  1.82k|                    patterns
 1489|  1.82k|                }
 1490|  1.82k|            } else {
 1491|  1.82k|                FocusedTripleOrPathPattern {
 1492|  1.82k|                    focus: AnnotatedTermPath {
 1493|  1.82k|                        term: g.focus,
 1494|  1.82k|                        annotations: Vec::new()
 1495|  1.82k|                    },
 1496|  1.82k|                    patterns: g.patterns
 1497|  1.82k|                }
 1498|  1.82k|            }
 1499|  1.82k|        }
 1500|  1.82k|
 1501|  1.82k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  1.82k|
 1503|  1.82k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  1.82k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  1.82k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  1.82k|            })
 1507|  1.82k|        }
 1508|  1.82k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  1.82k|
 1510|  1.82k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  1.82k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  1.82k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  1.82k|            })
 1514|  1.82k|        }
 1515|  1.82k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  1.82k|
 1517|  1.82k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  1.82k|            match o {
 1519|  1.82k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  1.82k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  1.82k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  1.82k|                Some(_) => unreachable!(),
 1523|  1.82k|                None => p
 1524|  1.82k|            }
 1525|  1.82k|        }
 1526|  1.82k|        rule PathElt_op() -> char =
 1527|  1.82k|            "*" { '*' } /
 1528|  1.82k|            "+" { '+' } /
 1529|  1.82k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  1.82k|
 1531|  1.82k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  1.82k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  1.82k|            PathElt()
 1534|  1.82k|
 1535|  1.82k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  1.82k|            v:iri() { v.into() } /
 1537|  1.82k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  1.82k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  1.82k|            "(" _ p:Path() _ ")" { p }
 1540|  1.82k|
 1541|  1.82k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  1.82k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  1.82k|                let mut direct = Vec::new();
 1544|  1.82k|                let mut inverse = Vec::new();
 1545|  1.82k|                for e in p {
 1546|  1.82k|                    match e {
 1547|  1.82k|                        Either::Left(a) => direct.push(a),
 1548|  1.82k|                        Either::Right(b) => inverse.push(b)
 1549|  1.82k|                    }
 1550|  1.82k|                }
 1551|  1.82k|                if inverse.is_empty() {
 1552|  1.82k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  1.82k|                } else if direct.is_empty() {
 1554|  1.82k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  1.82k|                } else {
 1556|  1.82k|                    PropertyPathExpression::Alternative(
 1557|  1.82k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  1.82k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  1.82k|                    )
 1560|  1.82k|                }
 1561|  1.82k|            } /
 1562|  1.82k|            p:PathOneInPropertySet() {
 1563|  1.82k|                match p {
 1564|  1.82k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  1.82k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  1.82k|                }
 1567|  1.82k|            }
 1568|  1.82k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  1.82k|
 1570|  1.82k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  1.82k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  1.82k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  1.82k|            v:iri() { Either::Left(v) } /
 1574|  1.82k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  1.82k|
 1576|  1.82k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  1.82k|
 1578|  1.82k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  1.82k|            let mut patterns = po.patterns;
 1580|  1.82k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  1.82k|            for (p, os) in po.focus {
 1582|  1.82k|                for o in os {
 1583|  1.82k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  1.82k|                }
 1585|  1.82k|            }
 1586|  1.82k|            Ok(FocusedTriplePattern {
 1587|  1.82k|                focus: bnode,
 1588|  1.82k|                patterns
 1589|  1.82k|            })
 1590|  1.82k|        }
 1591|  1.82k|
 1592|  1.82k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  1.82k|
 1594|  1.82k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  1.82k|            let mut patterns = po.patterns;
 1596|  1.82k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  1.82k|            for (p, os) in po.focus {
 1598|  1.82k|                for o in os {
 1599|  1.82k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  1.82k|                }
 1601|  1.82k|            }
 1602|  1.82k|            Ok(FocusedTripleOrPathPattern {
 1603|  1.82k|                focus: bnode,
 1604|  1.82k|                patterns
 1605|  1.82k|            })
 1606|  1.82k|        }
 1607|  1.82k|
 1608|  1.82k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  1.82k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  1.82k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  1.82k|            for objWithPatterns in o.into_iter().rev() {
 1612|  1.82k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  1.82k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  1.82k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  1.82k|                current_list_node = new_blank_node;
 1616|  1.82k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  1.82k|            }
 1618|  1.82k|            FocusedTriplePattern {
 1619|  1.82k|                focus: current_list_node,
 1620|  1.82k|                patterns
 1621|  1.82k|            }
 1622|  1.82k|        }
 1623|  1.82k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  1.82k|
 1625|  1.82k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  1.82k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  1.82k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  1.82k|            for objWithPatterns in o.into_iter().rev() {
 1629|  1.82k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  1.82k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  1.82k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  1.82k|                current_list_node = new_blank_node;
 1633|  1.82k|                patterns.extend(objWithPatterns.patterns);
 1634|  1.82k|            }
 1635|  1.82k|            FocusedTripleOrPathPattern {
 1636|  1.82k|                focus: current_list_node,
 1637|  1.82k|                patterns
 1638|  1.82k|            }
 1639|  1.82k|        }
 1640|  1.82k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  1.82k|
 1642|  1.82k|
 1643|  1.82k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  1.82k|
 1645|  1.82k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  1.82k|
 1647|  1.82k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  1.82k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  1.82k|            TriplesNode()
 1650|  1.82k|
 1651|  1.82k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  1.82k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  1.82k|            TriplesNodePath()
 1654|  1.82k|
 1655|  1.82k|        rule VarOrTerm() -> TermPattern =
 1656|  1.82k|            v:Var() { v.into() } /
 1657|  1.82k|            t:QuotedTriple() {?
 1658|  1.82k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  1.82k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  1.82k|            } /
 1661|  1.82k|            t:GraphTerm() { t.into() }
 1662|  1.82k|
 1663|  1.82k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  1.82k|            Ok(TriplePattern {
 1665|  1.82k|                subject: s,
 1666|  1.82k|                predicate: p,
 1667|  1.82k|                object: o
 1668|  1.82k|            })
 1669|  1.82k|        }
 1670|  1.82k|
 1671|  1.82k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  1.82k|            Ok(GroundTriple {
 1673|  1.82k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  1.82k|                predicate: p,
 1675|  1.82k|                object: o
 1676|  1.82k|            })
 1677|  1.82k|        }
 1678|  1.82k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  1.82k|
 1680|  1.82k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  1.82k|            l:RDFLiteral() { l.into() } /
 1682|  1.82k|            l:NumericLiteral() { l.into() } /
 1683|  1.82k|            l:BooleanLiteral() { l.into() } /
 1684|  1.82k|            t:QuotedTripleData() {?
 1685|  1.82k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  1.82k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  1.82k|            }
 1688|  1.82k|
 1689|  1.82k|        rule VarOrIri() -> NamedNodePattern =
 1690|  1.82k|            v:Var() { v.into() } /
 1691|  1.82k|            i:iri() { i.into() }
 1692|  1.82k|
 1693|  1.82k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  1.82k|
 1695|  1.82k|        rule GraphTerm() -> Term =
 1696|  1.82k|            i:iri() { i.into() } /
 1697|  1.82k|            l:RDFLiteral() { l.into() } /
 1698|  1.82k|            l:NumericLiteral() { l.into() } /
 1699|  1.82k|            l:BooleanLiteral() { l.into() } /
 1700|  1.82k|            b:BlankNode() { b.into() } /
 1701|  1.82k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  1.82k|
 1703|  1.82k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  1.82k|
 1705|  1.82k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  1.82k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  1.82k|        }
 1708|  1.82k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  1.82k|
 1710|  1.82k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  1.82k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  1.82k|        }
 1713|  1.82k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  1.82k|
 1715|  1.82k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  1.82k|
 1717|  1.82k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  1.82k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  1.82k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  1.82k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  1.82k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  1.82k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  1.82k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  1.82k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  1.82k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  1.82k|            Some(_) => unreachable!(),
 1727|  1.82k|            None => a
 1728|  1.82k|        } }
 1729|  1.82k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  1.82k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  1.82k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  1.82k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  1.82k|
 1734|  1.82k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  1.82k|
 1736|  1.82k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  1.82k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  1.82k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  1.82k|            Some(_) => unreachable!(),
 1740|  1.82k|            None => a,
 1741|  1.82k|        } }
 1742|  1.82k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  1.82k|            (s, e)
 1744|  1.82k|        }
 1745|  1.82k|
 1746|  1.82k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  1.82k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  1.82k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  1.82k|            Some(_) => unreachable!(),
 1750|  1.82k|            None => a
 1751|  1.82k|        } }
 1752|  1.82k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  1.82k|            (s, e)
 1754|  1.82k|        }
 1755|  1.82k|
 1756|  1.82k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  1.82k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  1.82k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  1.82k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  1.82k|            Some(_) => unreachable!(),
 1761|  1.82k|            None => e,
 1762|  1.82k|        } }
 1763|  1.82k|
 1764|  1.82k|        rule PrimaryExpression() -> Expression =
 1765|  1.82k|            BrackettedExpression()  /
 1766|  1.82k|            ExprQuotedTriple() /
 1767|  1.82k|            iriOrFunction() /
 1768|  1.82k|            v:Var() { v.into() } /
 1769|  1.82k|            l:RDFLiteral() { l.into() } /
 1770|  1.82k|            l:NumericLiteral() { l.into() } /
 1771|  1.82k|            l:BooleanLiteral() { l.into() } /
 1772|  1.82k|            BuiltInCall()
 1773|  1.82k|
 1774|  1.82k|        rule ExprVarOrTerm() -> Expression =
 1775|  1.82k|            ExprQuotedTriple() /
 1776|  1.82k|            i:iri() { i.into() } /
 1777|  1.82k|            l:RDFLiteral() { l.into() } /
 1778|  1.82k|            l:NumericLiteral() { l.into() } /
 1779|  1.82k|            l:BooleanLiteral() { l.into() } /
 1780|  1.82k|            v:Var() { v.into() }
 1781|  1.82k|
 1782|  1.82k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  1.82k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  1.82k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  1.82k|        }
 1786|  1.82k|
 1787|  1.82k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  1.82k|
 1789|  1.82k|        rule BuiltInCall() -> Expression =
 1790|  1.82k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  1.82k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  1.82k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  1.82k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  1.82k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  1.82k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  1.82k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  1.82k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  1.82k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  1.82k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  1.82k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  1.82k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  1.82k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  1.82k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  1.82k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  1.82k|            SubstringExpression() /
 1806|  1.82k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  1.82k|            StrReplaceExpression() /
 1808|  1.82k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  1.82k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  1.82k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  1.82k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  1.82k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  1.82k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  1.82k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  1.82k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  1.82k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  1.82k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  1.82k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  1.82k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  1.82k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  1.82k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  1.82k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  1.82k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  1.82k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  1.82k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  1.82k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  1.82k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  1.82k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  1.82k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  1.82k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  1.82k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  1.82k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  1.82k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  1.82k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  1.82k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  1.82k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  1.82k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  1.82k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  1.82k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  1.82k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  1.82k|            RegexExpression() /
 1842|  1.82k|            ExistsFunc() /
 1843|  1.82k|            NotExistsFunc() /
 1844|  1.82k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  1.82k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  1.82k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  1.82k|            } /
 1848|  1.82k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  1.82k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  1.82k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  1.82k|            } /
 1852|  1.82k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  1.82k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  1.82k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  1.82k|            } /
 1856|  1.82k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  1.82k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  1.82k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  1.82k|            } /
 1860|  1.82k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  1.82k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  1.82k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  1.82k|            } /
 1864|  1.82k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  1.82k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  1.82k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  1.82k|            }
 1868|  1.82k|
 1869|  1.82k|        rule RegexExpression() -> Expression =
 1870|  1.82k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  1.82k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  1.82k|
 1873|  1.82k|
 1874|  1.82k|        rule SubstringExpression() -> Expression =
 1875|  1.82k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  1.82k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  1.82k|
 1878|  1.82k|
 1879|  1.82k|        rule StrReplaceExpression() -> Expression =
 1880|  1.82k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  1.82k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  1.82k|
 1883|  1.82k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  1.82k|
 1885|  1.82k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  1.82k|
 1887|  1.82k|        rule Aggregate() -> AggregateExpression =
 1888|  1.82k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  1.82k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  1.82k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  1.82k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  1.82k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  1.82k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  1.82k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  1.82k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  1.82k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  1.82k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  1.82k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  1.82k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  1.82k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  1.82k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  1.82k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  1.82k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  1.82k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  1.82k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  1.82k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  1.82k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  1.82k|
 1909|  1.82k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  1.82k|            match a {
 1911|  1.82k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  1.82k|                None => i.into()
 1913|  1.82k|            }
 1914|  1.82k|        }
 1915|  1.82k|
 1916|  1.82k|        rule RDFLiteral() -> Literal =
 1917|  1.82k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  1.82k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  1.82k|            value:String() { Literal::new_simple_literal(value) }
 1920|  1.82k|
 1921|  1.82k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  1.82k|
 1923|  1.82k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  1.82k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  1.82k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  1.82k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  1.82k|
 1928|  1.82k|        rule NumericLiteralPositive() -> Literal =
 1929|  1.82k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  1.82k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  1.82k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  1.82k|
 1933|  1.82k|
 1934|  1.82k|        rule NumericLiteralNegative() -> Literal =
 1935|  1.82k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  1.82k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  1.82k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  1.82k|
 1939|  1.82k|        rule BooleanLiteral() -> Literal =
 1940|  1.82k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  1.82k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  1.82k|
 1943|  1.82k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  1.82k|
 1945|  1.82k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  1.82k|            NamedNode::from(i)
 1947|  1.82k|        }
 1948|  1.82k|
 1949|  1.82k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  1.82k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  1.82k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  1.82k|            } else {
 1953|  1.82k|                Err("Prefix not found")
 1954|  1.82k|            } }
 1955|  1.82k|
 1956|  1.82k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  1.82k|            let node = BlankNode::new_unchecked(id);
 1958|  1.82k|            if state.used_bnodes.contains(&node) {
 1959|  1.82k|                Err("Already used blank node id")
 1960|  1.82k|            } else {
 1961|  1.82k|                state.currently_used_bnodes.insert(node.clone());
 1962|  1.82k|                Ok(node)
 1963|  1.82k|            }
 1964|  1.82k|        } / ANON() { BlankNode::default() }
 1965|  1.82k|
 1966|  1.82k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  1.82k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  1.82k|        }
 1969|  1.82k|
 1970|  1.82k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  1.82k|            ns
 1972|  1.82k|        }
 1973|  1.82k|
 1974|  1.82k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  1.82k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  1.82k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  1.82k|                iri.push_str(base);
 1978|  1.82k|                for chunk in local.split('\\') { // We remove \
 1979|  1.82k|                    iri.push_str(chunk);
 1980|  1.82k|                }
 1981|  1.82k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  1.82k|            } else {
 1983|  1.82k|                Err("Prefix not found")
 1984|  1.82k|            }
 1985|  1.82k|        }
 1986|  1.82k|
 1987|  1.82k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  1.82k|            b
 1989|  1.82k|        }
 1990|  1.82k|
 1991|  1.82k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  1.82k|
 1993|  1.82k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  1.82k|
 1995|  1.82k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  1.82k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  1.82k|        }
 1998|  1.82k|
 1999|  1.82k|        rule INTEGER() = ['0'..='9']+
 2000|  1.82k|
 2001|  1.82k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  1.82k|
 2003|  1.82k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  1.82k|
 2005|  1.82k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  1.82k|
 2007|  1.82k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  1.82k|
 2009|  1.82k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  1.82k|
 2011|  1.82k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  1.82k|
 2013|  1.82k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  1.82k|
 2015|  1.82k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  1.82k|
 2017|  1.82k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  1.82k|
 2019|  1.82k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  1.82k|             unescape_string(l)
 2021|  1.82k|        }
 2022|  1.82k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  1.82k|
 2024|  1.82k|
 2025|  1.82k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  1.82k|             unescape_string(l)
 2027|  1.82k|        }
 2028|  1.82k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  1.82k|
 2030|  1.82k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  1.82k|             unescape_string(l)
 2032|  1.82k|        }
 2033|  1.82k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  1.82k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  1.82k|
 2036|  1.82k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  1.82k|             unescape_string(l)
 2038|  1.82k|        }
 2039|  1.82k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  1.82k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  1.82k|
 2042|  1.82k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  1.82k|
 2044|  1.82k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  1.82k|
 2046|  1.82k|        rule NIL() = "(" WS()* ")"
 2047|  1.82k|
 2048|  1.82k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  1.82k|
 2050|  1.82k|        rule ANON() = "[" WS()* "]"
 2051|  1.82k|
 2052|  1.82k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  1.82k|
 2054|  1.82k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  1.82k|
 2056|  1.82k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  1.82k|
 2058|  1.82k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  1.82k|
 2060|  1.82k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  1.82k|
 2062|  1.82k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  1.82k|
 2064|  1.82k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  1.82k|
 2066|  1.82k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  1.82k|
 2068|  1.82k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  1.82k|
 2070|  1.82k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  1.82k|
 2072|  1.82k|        //space
 2073|  1.82k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  1.82k|
 2075|  1.82k|        //comment
 2076|  1.82k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  1.82k|
 2078|  1.82k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  1.82k|            if input.eq_ignore_ascii_case(literal) {
 2080|  1.82k|                Ok(())
 2081|  1.82k|            } else {
 2082|  1.82k|                Err(literal)
 2083|  1.82k|            }
 2084|  1.82k|        }
 2085|  1.82k|    }
 2086|  1.82k|}
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser11___parse_Add0B7_:
  995|    279|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|    279|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|    279|            if from == to {
  998|    227|                Vec::new() // identity case
  999|       |            } else {
 1000|     52|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|     52|                vec![copy_graph(from, to)]
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_DataBlockValues2_0B7_:
 1304|     33|            l:BooleanLiteral() { Some(l.into()) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser35___parse_PathNegatedPropertySet_item0B7_:
 1568|  7.83k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_QuadPattern0B7_:
 1146|  5.18k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_Modify_clear0B7_:
 1114|  4.94k|        rule Modify_clear() = {
 1115|  4.94k|            state.used_bnodes.clear();
 1116|  4.94k|            state.currently_used_bnodes.clear();
 1117|  4.94k|        }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_PathAlternative_item0B7_:
 1508|  26.1k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_PrimaryExpressions_0B7_:
 1769|  1.24k|            l:RDFLiteral() { l.into() } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_CollectionPath_item0B7_:
 1640|  3.11k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_BooleanLiterals_0B7_:
 1941|    413|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_Create0B7_:
  991|    289|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|    289|            vec![GraphUpdateOperation::Create { silent, graph }]
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_GraphTerms1_0B7_:
 1699|    574|            l:BooleanLiteral() { l.into() } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCallsJ_0B7_:
 1839|      6|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_PathElt_ops0_0B7_:
 1529|  5.01k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_SelectClause_member0B7_:
  828|    652|            v:Var() _ { SelectionMember::Variable(v) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_PrimaryExpression0B7_:
 1768|  6.38k|            v:Var() { v.into() } /
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_PropertyListNotEmpty00B9_:
 1371|  17.4k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  17.4k|                a.focus.push(b.focus);
 1373|  17.4k|                a.patterns.extend(b.patterns);
 1374|  17.4k|                a
 1375|  17.4k|            })
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_RDFLiterals_0B7_:
 1918|  2.06k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_QuadData0B7_:
  778|    250|parser! {
  779|    250|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|    250|    grammar parser(state: &mut ParserState) for str {
  781|    250|        pub rule QueryUnit() -> Query = Query()
  782|    250|
  783|    250|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|    250|            q
  785|    250|        }
  786|    250|
  787|    250|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|    250|
  789|    250|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|    250|
  791|    250|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|    250|            state.base_iri = Some(i)
  793|    250|        }
  794|    250|
  795|    250|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|    250|            state.namespaces.insert(ns.into(), i.into_inner());
  797|    250|        }
  798|    250|
  799|    250|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|    250|            Ok(Query::Select {
  801|    250|                dataset: d,
  802|    250|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|    250|                base_iri: state.base_iri.clone()
  804|    250|            })
  805|    250|        }
  806|    250|
  807|    250|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|    250|            build_select(s, w, g, h, o, l, v, state)
  809|    250|        }
  810|    250|
  811|    250|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|    250|            Selection {
  813|    250|                option: o,
  814|    250|                variables: v
  815|    250|            }
  816|    250|        }
  817|    250|        rule Selection_init() = {
  818|    250|            state.aggregates.push(Vec::new())
  819|    250|        }
  820|    250|        rule SelectClause_option() -> SelectionOption =
  821|    250|            i("DISTINCT") { SelectionOption::Distinct } /
  822|    250|            i("REDUCED") { SelectionOption::Reduced } /
  823|    250|            { SelectionOption::Default }
  824|    250|        rule SelectClause_variables() -> SelectionVariables =
  825|    250|            "*" { SelectionVariables::Star } /
  826|    250|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|    250|        rule SelectClause_member() -> SelectionMember =
  828|    250|            v:Var() _ { SelectionMember::Variable(v) } /
  829|    250|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|    250|
  831|    250|        rule ConstructQuery() -> Query =
  832|    250|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|    250|                Ok(Query::Construct {
  834|    250|                    template: c,
  835|    250|                    dataset: d,
  836|    250|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|    250|                    base_iri: state.base_iri.clone()
  838|    250|                })
  839|    250|            } /
  840|    250|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|    250|                Ok(Query::Construct {
  842|    250|                    template: c.clone(),
  843|    250|                    dataset: d,
  844|    250|                    pattern: build_select(
  845|    250|                        Selection::no_op(),
  846|    250|                        GraphPattern::Bgp { patterns: c },
  847|    250|                        g, h, o, l, v, state
  848|    250|                    )?,
  849|    250|                    base_iri: state.base_iri.clone()
  850|    250|                })
  851|    250|            }
  852|    250|
  853|    250|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|    250|
  855|    250|        rule DescribeQuery() -> Query =
  856|    250|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|    250|                Ok(Query::Describe {
  858|    250|                    dataset: d,
  859|    250|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|    250|                    base_iri: state.base_iri.clone()
  861|    250|                })
  862|    250|            } /
  863|    250|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|    250|                Ok(Query::Describe {
  865|    250|                    dataset: d,
  866|    250|                    pattern: build_select(Selection {
  867|    250|                        option: SelectionOption::Default,
  868|    250|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|    250|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|    250|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|    250|                        }).collect())
  872|    250|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|    250|                    base_iri: state.base_iri.clone()
  874|    250|                })
  875|    250|            }
  876|    250|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|    250|
  878|    250|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|    250|            Ok(Query::Ask {
  880|    250|                dataset: d,
  881|    250|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|    250|                base_iri: state.base_iri.clone()
  883|    250|            })
  884|    250|        }
  885|    250|
  886|    250|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|    250|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|    250|            if d.is_empty() {
  889|    250|                return None;
  890|    250|            }
  891|    250|            let mut default = Vec::new();
  892|    250|            let mut named = Vec::new();
  893|    250|            for (d, n) in d {
  894|    250|                if let Some(d) = d {
  895|    250|                    default.push(d);
  896|    250|                }
  897|    250|                if let Some(n) = n {
  898|    250|                    named.push(n);
  899|    250|                }
  900|    250|            }
  901|    250|            Some(QueryDataset {
  902|    250|                default, named: Some(named)
  903|    250|            })
  904|    250|        }
  905|    250|
  906|    250|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|    250|            (Some(s), None)
  908|    250|        }
  909|    250|
  910|    250|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|    250|            (None, Some(s))
  912|    250|        }
  913|    250|
  914|    250|        rule SourceSelector() -> NamedNode = iri()
  915|    250|
  916|    250|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|    250|            p
  918|    250|        }
  919|    250|
  920|    250|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|    250|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|    250|            let clauses = c.into_iter().map(|(e, vo)| {
  923|    250|                if let Expression::Variable(v) = e {
  924|    250|                    v
  925|    250|                } else {
  926|    250|                    let v = vo.unwrap_or_else(variable);
  927|    250|                    projections.push((e, v.clone()));
  928|    250|                    v
  929|    250|                }
  930|    250|            }).collect();
  931|    250|            (clauses, projections)
  932|    250|        }
  933|    250|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|    250|
  935|    250|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|    250|            e:BuiltInCall() { (e, None) } /
  937|    250|            e:FunctionCall() { (e, None) } /
  938|    250|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|    250|            e:Var() { (e.into(), None) }
  940|    250|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|    250|
  942|    250|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|    250|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|    250|        }
  945|    250|
  946|    250|        rule HavingCondition() -> Expression = Constraint()
  947|    250|
  948|    250|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|    250|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|    250|
  951|    250|        rule OrderCondition() -> OrderExpression =
  952|    250|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|    250|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|    250|            e: Constraint() { OrderExpression::Asc(e) } /
  955|    250|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|    250|
  957|    250|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|    250|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|    250|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|    250|
  961|    250|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|    250|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|    250|        }
  964|    250|
  965|    250|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|    250|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|    250|        }
  968|    250|
  969|    250|        rule ValuesClause() -> Option<GraphPattern> =
  970|    250|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|    250|            { None }
  972|    250|
  973|    250|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|    250|
  975|    250|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|    250|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|    250|
  978|    250|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|    250|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|    250|        }
  981|    250|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|    250|
  983|    250|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|    250|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|    250|        }
  986|    250|
  987|    250|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|    250|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|    250|        }
  990|    250|
  991|    250|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|    250|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|    250|        }
  994|    250|
  995|    250|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|    250|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|    250|            if from == to {
  998|    250|                Vec::new() // identity case
  999|    250|            } else {
 1000|    250|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|    250|                vec![copy_graph(from, to)]
 1002|    250|            }
 1003|    250|        }
 1004|    250|
 1005|    250|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|    250|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|    250|            if from == to {
 1008|    250|                Vec::new() // identity case
 1009|    250|            } else {
 1010|    250|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|    250|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|    250|            }
 1013|    250|        }
 1014|    250|
 1015|    250|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|    250|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|    250|            if from == to {
 1018|    250|                Vec::new() // identity case
 1019|    250|            } else {
 1020|    250|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|    250|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|    250|            }
 1023|    250|        }
 1024|    250|
 1025|    250|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|    250|            vec![GraphUpdateOperation::InsertData { data }]
 1027|    250|        }
 1028|    250|
 1029|    250|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|    250|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|    250|        }
 1032|    250|
 1033|    250|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|    250|            let pattern = d.iter().map(|q| {
 1035|    250|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|    250|                match &q.graph_name {
 1037|    250|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|    250|                    GraphNamePattern::DefaultGraph => bgp,
 1039|    250|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|    250|                }
 1041|    250|            }).reduce(new_join).unwrap_or_default();
 1042|    250|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|    250|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|    250|                delete,
 1045|    250|                insert: Vec::new(),
 1046|    250|                using: None,
 1047|    250|                pattern: Box::new(pattern)
 1048|    250|            }])
 1049|    250|        }
 1050|    250|
 1051|    250|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|    250|            let (delete, insert) = c;
 1053|    250|            let mut delete = delete.unwrap_or_default();
 1054|    250|            let mut insert = insert.unwrap_or_default();
 1055|    250|            #[allow(clippy::shadow_same)]
 1056|    250|            let mut pattern = pattern;
 1057|    250|
 1058|    250|            let mut using = if u.is_empty() {
 1059|    250|                None
 1060|    250|            } else {
 1061|    250|                let mut default = Vec::new();
 1062|    250|                let mut named = Vec::new();
 1063|    250|                for (d, n) in u {
 1064|    250|                    if let Some(d) = d {
 1065|    250|                        default.push(d)
 1066|    250|                    }
 1067|    250|                    if let Some(n) = n {
 1068|    250|                        named.push(n)
 1069|    250|                    }
 1070|    250|                }
 1071|    250|                Some(QueryDataset { default, named: Some(named) })
 1072|    250|            };
 1073|    250|
 1074|    250|            if let Some(with) = with {
 1075|    250|                // We inject WITH everywhere
 1076|    250|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|    250|                    GroundQuadPattern {
 1078|    250|                        subject: q.subject,
 1079|    250|                        predicate: q.predicate,
 1080|    250|                        object: q.object,
 1081|    250|                        graph_name: with.clone().into()
 1082|    250|                    }
 1083|    250|                } else {
 1084|    250|                    q
 1085|    250|                }).collect();
 1086|    250|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|    250|                    QuadPattern {
 1088|    250|                        subject: q.subject,
 1089|    250|                        predicate: q.predicate,
 1090|    250|                        object: q.object,
 1091|    250|                        graph_name: with.clone().into()
 1092|    250|                    }
 1093|    250|                } else {
 1094|    250|                    q
 1095|    250|                }).collect();
 1096|    250|                if using.is_none() {
 1097|    250|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|    250|                }
 1099|    250|            }
 1100|    250|
 1101|    250|            vec![GraphUpdateOperation::DeleteInsert {
 1102|    250|                delete,
 1103|    250|                insert,
 1104|    250|                using,
 1105|    250|                pattern: Box::new(pattern)
 1106|    250|            }]
 1107|    250|        }
 1108|    250|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|    250|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|    250|            (Some(d), i)
 1111|    250|        } / i:InsertClause() {
 1112|    250|            (None, Some(i))
 1113|    250|        }
 1114|    250|        rule Modify_clear() = {
 1115|    250|            state.used_bnodes.clear();
 1116|    250|            state.currently_used_bnodes.clear();
 1117|    250|        }
 1118|    250|
 1119|    250|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|    250|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|    250|        }
 1122|    250|
 1123|    250|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|    250|
 1125|    250|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|    250|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|    250|            (Some(i), None)
 1128|    250|        }
 1129|    250|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|    250|            (None, Some(i))
 1131|    250|        }
 1132|    250|
 1133|    250|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|    250|            GraphName::DefaultGraph
 1135|    250|        } / (i("GRAPH") _)? g:iri() {
 1136|    250|            GraphName::NamedNode(g)
 1137|    250|        }
 1138|    250|
 1139|    250|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|    250|
 1141|    250|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|    250|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|    250|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|    250|            / i("ALL") { GraphTarget::AllGraphs }
 1145|    250|
 1146|    250|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|    250|
 1148|    250|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|    250|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|    250|        }
 1151|    250|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|    250|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|    250|        }
 1154|    250|
 1155|    250|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|    250|            q.into_iter().flatten().collect()
 1157|    250|        }
 1158|    250|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|    250|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|    250|        } //TODO: return iter?
 1161|    250|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|    250|
 1163|    250|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|    250|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|    250|        }
 1166|    250|
 1167|    250|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|    250|            ts.into_iter().flatten().collect()
 1169|    250|        }
 1170|    250|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|    250|
 1172|    250|        rule GroupGraphPattern() -> GraphPattern =
 1173|    250|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|    250|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|    250|        rule GroupGraphPattern_clear() = {
 1176|    250|             // We deal with blank nodes aliases rule
 1177|    250|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|    250|            state.currently_used_bnodes.clear();
 1179|    250|        }
 1180|    250|
 1181|    250|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|    250|            let mut filter: Option<Expression> = None;
 1183|    250|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|    250|            for e in b.into_iter().flatten() {
 1185|    250|                match e {
 1186|    250|                    PartialGraphPattern::Optional(p, f) => {
 1187|    250|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|    250|                    }
 1189|    250|                    #[cfg(feature = "sep-0006")]
 1190|    250|                    PartialGraphPattern::Lateral(p) => {
 1191|    250|                        let mut defined_variables = HashSet::default();
 1192|    250|                        add_defined_variables(&p, &mut defined_variables);
 1193|    250|                        let mut contains = false;
 1194|    250|                        g.on_in_scope_variable(|v| {
 1195|    250|                            if defined_variables.contains(v) {
 1196|    250|                                contains = true;
 1197|    250|                            }
 1198|    250|                        });
 1199|    250|                        if contains {
 1200|    250|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|    250|                        }
 1202|    250|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|    250|                    }
 1204|    250|                    PartialGraphPattern::Minus(p) => {
 1205|    250|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|    250|                    }
 1207|    250|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|    250|                        let mut contains = false;
 1209|    250|                        g.on_in_scope_variable(|v| {
 1210|    250|                            if *v == variable {
 1211|    250|                                contains = true;
 1212|    250|                            }
 1213|    250|                        });
 1214|    250|                        if contains {
 1215|    250|                            return Err("BIND is overriding an existing variable")
 1216|    250|                        }
 1217|    250|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|    250|                    }
 1219|    250|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|    250|                        Expression::And(Box::new(f), Box::new(expr))
 1221|    250|                    } else {
 1222|    250|                        expr
 1223|    250|                    }),
 1224|    250|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|    250|                }
 1226|    250|            }
 1227|    250|
 1228|    250|            Ok(if let Some(expr) = filter {
 1229|    250|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|    250|            } else {
 1231|    250|                g
 1232|    250|            })
 1233|    250|        }
 1234|    250|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|    250|            let mut result = vec![a];
 1236|    250|            if let Some(v) = b {
 1237|    250|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|    250|            }
 1239|    250|            result
 1240|    250|        }
 1241|    250|
 1242|    250|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|    250|            hs.into_iter().flatten().collect()
 1244|    250|        }
 1245|    250|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|    250|
 1247|    250|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|    250|
 1249|    250|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|    250|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|    250|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|    250|            } else {
 1253|    250|               PartialGraphPattern::Optional(p, None)
 1254|    250|            }
 1255|    250|        }
 1256|    250|
 1257|    250|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|    250|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|    250|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|    250|        }
 1261|    250|
 1262|    250|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|    250|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|    250|        }
 1265|    250|
 1266|    250|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|    250|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|    250|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|    250|
 1270|    250|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|    250|            PartialGraphPattern::Bind(e, v)
 1272|    250|        }
 1273|    250|
 1274|    250|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|    250|
 1276|    250|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|    250|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|    250|        }
 1279|    250|
 1280|    250|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|    250|            (vec![var], d)
 1282|    250|        }
 1283|    250|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|    250|
 1285|    250|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|    250|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|    250|                Ok((vars, vals))
 1288|    250|            } else {
 1289|    250|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|    250|            }
 1291|    250|        }
 1292|    250|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|    250|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|    250|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|    250|
 1296|    250|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|    250|            t:QuotedTripleData() {?
 1298|    250|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|    250|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|    250|            } /
 1301|    250|            i:iri() { Some(i.into()) } /
 1302|    250|            l:RDFLiteral() { Some(l.into()) } /
 1303|    250|            l:NumericLiteral() { Some(l.into()) } /
 1304|    250|            l:BooleanLiteral() { Some(l.into()) } /
 1305|    250|            i("UNDEF") { None }
 1306|    250|
 1307|    250|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|    250|            PartialGraphPattern::Minus(p)
 1309|    250|        }
 1310|    250|
 1311|    250|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|    250|            not_empty_fold(p.into_iter(), |a, b| {
 1313|    250|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|    250|            }).map(PartialGraphPattern::Other)
 1315|    250|        }
 1316|    250|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|    250|
 1318|    250|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|    250|            PartialGraphPattern::Filter(c)
 1320|    250|        }
 1321|    250|
 1322|    250|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|    250|
 1324|    250|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|    250|            Expression::FunctionCall(Function::Custom(f), a)
 1326|    250|        }
 1327|    250|
 1328|    250|        rule ArgList() -> Vec<Expression> =
 1329|    250|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|    250|            NIL() { Vec::new() }
 1331|    250|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|    250|
 1333|    250|        rule ExpressionList() -> Vec<Expression> =
 1334|    250|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|    250|            NIL() { Vec::new() }
 1336|    250|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|    250|
 1338|    250|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|    250|
 1340|    250|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|    250|            p.into_iter().flatten().collect()
 1342|    250|        }
 1343|    250|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|    250|
 1345|    250|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|    250|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|    250|                let mut patterns = po.patterns;
 1348|    250|                for (p, os) in po.focus {
 1349|    250|                    for o in os {
 1350|    250|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|    250|                    }
 1352|    250|                }
 1353|    250|                Ok(patterns)
 1354|    250|            } /
 1355|    250|            s:TriplesNode() _ po:PropertyList() {?
 1356|    250|                let mut patterns = s.patterns;
 1357|    250|                patterns.extend(po.patterns);
 1358|    250|                for (p, os) in po.focus {
 1359|    250|                    for o in os {
 1360|    250|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|    250|                    }
 1362|    250|                }
 1363|    250|                Ok(patterns)
 1364|    250|            }
 1365|    250|
 1366|    250|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|    250|            PropertyListNotEmpty() /
 1368|    250|            { FocusedTriplePattern::default() }
 1369|    250|
 1370|    250|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|    250|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|    250|                a.focus.push(b.focus);
 1373|    250|                a.patterns.extend(b.patterns);
 1374|    250|                a
 1375|    250|            })
 1376|    250|        }
 1377|    250|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|    250|            FocusedTriplePattern {
 1379|    250|                focus: (p, o.focus),
 1380|    250|                patterns: o.patterns
 1381|    250|            }
 1382|    250|        }
 1383|    250|
 1384|    250|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|    250|
 1386|    250|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|    250|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|    250|                a.focus.push(b.focus);
 1389|    250|                a.patterns.extend_from_slice(&b.patterns);
 1390|    250|                a
 1391|    250|            })
 1392|    250|        }
 1393|    250|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|    250|
 1395|    250|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|    250|            if let Some(a) = a {
 1397|    250|                let mut patterns = g.patterns;
 1398|    250|                patterns.extend(a.patterns);
 1399|    250|                FocusedTriplePattern {
 1400|    250|                    focus: AnnotatedTerm {
 1401|    250|                        term: g.focus,
 1402|    250|                        annotations: a.focus
 1403|    250|                    },
 1404|    250|                    patterns
 1405|    250|                }
 1406|    250|            } else {
 1407|    250|                FocusedTriplePattern {
 1408|    250|                    focus: AnnotatedTerm {
 1409|    250|                        term: g.focus,
 1410|    250|                        annotations: Vec::new()
 1411|    250|                    },
 1412|    250|                    patterns: g.patterns
 1413|    250|                }
 1414|    250|            }
 1415|    250|        }
 1416|    250|
 1417|    250|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|    250|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|    250|                let mut patterns = po.patterns;
 1420|    250|                for (p, os) in po.focus {
 1421|    250|                    for o in os {
 1422|    250|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|    250|                    }
 1424|    250|                }
 1425|    250|                Ok(patterns)
 1426|    250|            } /
 1427|    250|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|    250|                let mut patterns = s.patterns;
 1429|    250|                patterns.extend(po.patterns);
 1430|    250|                for (p, os) in po.focus {
 1431|    250|                    for o in os {
 1432|    250|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|    250|                    }
 1434|    250|                }
 1435|    250|                Ok(patterns)
 1436|    250|            }
 1437|    250|
 1438|    250|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|    250|            PropertyListPathNotEmpty() /
 1440|    250|            { FocusedTripleOrPathPattern::default() }
 1441|    250|
 1442|    250|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|    250|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|    250|                    focus: vec![(hp, ho.focus)],
 1445|    250|                    patterns: ho.patterns
 1446|    250|                }, |mut a, b| {
 1447|    250|                    a.focus.push(b.focus);
 1448|    250|                    a.patterns.extend(b.patterns);
 1449|    250|                    a
 1450|    250|                })
 1451|    250|        }
 1452|    250|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|    250|            c
 1454|    250|        }
 1455|    250|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|    250|            FocusedTripleOrPathPattern {
 1457|    250|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|    250|                patterns: o.patterns
 1459|    250|            }
 1460|    250|        }
 1461|    250|
 1462|    250|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|    250|            p.into()
 1464|    250|        }
 1465|    250|
 1466|    250|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|    250|            v.into()
 1468|    250|        }
 1469|    250|
 1470|    250|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|    250|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|    250|                a.focus.push(b.focus);
 1473|    250|                a.patterns.extend(b.patterns);
 1474|    250|                a
 1475|    250|            })
 1476|    250|        }
 1477|    250|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|    250|
 1479|    250|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|    250|             if let Some(a) = a {
 1481|    250|                let mut patterns = g.patterns;
 1482|    250|                patterns.extend(a.patterns);
 1483|    250|                FocusedTripleOrPathPattern {
 1484|    250|                    focus: AnnotatedTermPath {
 1485|    250|                        term: g.focus,
 1486|    250|                        annotations: a.focus
 1487|    250|                    },
 1488|    250|                    patterns
 1489|    250|                }
 1490|    250|            } else {
 1491|    250|                FocusedTripleOrPathPattern {
 1492|    250|                    focus: AnnotatedTermPath {
 1493|    250|                        term: g.focus,
 1494|    250|                        annotations: Vec::new()
 1495|    250|                    },
 1496|    250|                    patterns: g.patterns
 1497|    250|                }
 1498|    250|            }
 1499|    250|        }
 1500|    250|
 1501|    250|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|    250|
 1503|    250|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|    250|            not_empty_fold(p.into_iter(), |a, b| {
 1505|    250|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|    250|            })
 1507|    250|        }
 1508|    250|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|    250|
 1510|    250|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|    250|            not_empty_fold(p.into_iter(), |a, b| {
 1512|    250|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|    250|            })
 1514|    250|        }
 1515|    250|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|    250|
 1517|    250|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|    250|            match o {
 1519|    250|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|    250|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|    250|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|    250|                Some(_) => unreachable!(),
 1523|    250|                None => p
 1524|    250|            }
 1525|    250|        }
 1526|    250|        rule PathElt_op() -> char =
 1527|    250|            "*" { '*' } /
 1528|    250|            "+" { '+' } /
 1529|    250|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|    250|
 1531|    250|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|    250|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|    250|            PathElt()
 1534|    250|
 1535|    250|        rule PathPrimary() -> PropertyPathExpression =
 1536|    250|            v:iri() { v.into() } /
 1537|    250|            "a" { rdf::TYPE.into_owned().into() } /
 1538|    250|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|    250|            "(" _ p:Path() _ ")" { p }
 1540|    250|
 1541|    250|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|    250|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|    250|                let mut direct = Vec::new();
 1544|    250|                let mut inverse = Vec::new();
 1545|    250|                for e in p {
 1546|    250|                    match e {
 1547|    250|                        Either::Left(a) => direct.push(a),
 1548|    250|                        Either::Right(b) => inverse.push(b)
 1549|    250|                    }
 1550|    250|                }
 1551|    250|                if inverse.is_empty() {
 1552|    250|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|    250|                } else if direct.is_empty() {
 1554|    250|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|    250|                } else {
 1556|    250|                    PropertyPathExpression::Alternative(
 1557|    250|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|    250|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|    250|                    )
 1560|    250|                }
 1561|    250|            } /
 1562|    250|            p:PathOneInPropertySet() {
 1563|    250|                match p {
 1564|    250|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|    250|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|    250|                }
 1567|    250|            }
 1568|    250|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|    250|
 1570|    250|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|    250|            "^" _ v:iri() { Either::Right(v) } /
 1572|    250|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|    250|            v:iri() { Either::Left(v) } /
 1574|    250|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|    250|
 1576|    250|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|    250|
 1578|    250|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|    250|            let mut patterns = po.patterns;
 1580|    250|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|    250|            for (p, os) in po.focus {
 1582|    250|                for o in os {
 1583|    250|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|    250|                }
 1585|    250|            }
 1586|    250|            Ok(FocusedTriplePattern {
 1587|    250|                focus: bnode,
 1588|    250|                patterns
 1589|    250|            })
 1590|    250|        }
 1591|    250|
 1592|    250|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|    250|
 1594|    250|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|    250|            let mut patterns = po.patterns;
 1596|    250|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|    250|            for (p, os) in po.focus {
 1598|    250|                for o in os {
 1599|    250|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|    250|                }
 1601|    250|            }
 1602|    250|            Ok(FocusedTripleOrPathPattern {
 1603|    250|                focus: bnode,
 1604|    250|                patterns
 1605|    250|            })
 1606|    250|        }
 1607|    250|
 1608|    250|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|    250|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|    250|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|    250|            for objWithPatterns in o.into_iter().rev() {
 1612|    250|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|    250|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|    250|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|    250|                current_list_node = new_blank_node;
 1616|    250|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|    250|            }
 1618|    250|            FocusedTriplePattern {
 1619|    250|                focus: current_list_node,
 1620|    250|                patterns
 1621|    250|            }
 1622|    250|        }
 1623|    250|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|    250|
 1625|    250|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|    250|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|    250|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|    250|            for objWithPatterns in o.into_iter().rev() {
 1629|    250|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|    250|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|    250|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|    250|                current_list_node = new_blank_node;
 1633|    250|                patterns.extend(objWithPatterns.patterns);
 1634|    250|            }
 1635|    250|            FocusedTripleOrPathPattern {
 1636|    250|                focus: current_list_node,
 1637|    250|                patterns
 1638|    250|            }
 1639|    250|        }
 1640|    250|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|    250|
 1642|    250|
 1643|    250|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|    250|
 1645|    250|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|    250|
 1647|    250|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|    250|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|    250|            TriplesNode()
 1650|    250|
 1651|    250|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|    250|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|    250|            TriplesNodePath()
 1654|    250|
 1655|    250|        rule VarOrTerm() -> TermPattern =
 1656|    250|            v:Var() { v.into() } /
 1657|    250|            t:QuotedTriple() {?
 1658|    250|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|    250|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|    250|            } /
 1661|    250|            t:GraphTerm() { t.into() }
 1662|    250|
 1663|    250|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|    250|            Ok(TriplePattern {
 1665|    250|                subject: s,
 1666|    250|                predicate: p,
 1667|    250|                object: o
 1668|    250|            })
 1669|    250|        }
 1670|    250|
 1671|    250|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|    250|            Ok(GroundTriple {
 1673|    250|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|    250|                predicate: p,
 1675|    250|                object: o
 1676|    250|            })
 1677|    250|        }
 1678|    250|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|    250|
 1680|    250|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|    250|            l:RDFLiteral() { l.into() } /
 1682|    250|            l:NumericLiteral() { l.into() } /
 1683|    250|            l:BooleanLiteral() { l.into() } /
 1684|    250|            t:QuotedTripleData() {?
 1685|    250|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|    250|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|    250|            }
 1688|    250|
 1689|    250|        rule VarOrIri() -> NamedNodePattern =
 1690|    250|            v:Var() { v.into() } /
 1691|    250|            i:iri() { i.into() }
 1692|    250|
 1693|    250|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|    250|
 1695|    250|        rule GraphTerm() -> Term =
 1696|    250|            i:iri() { i.into() } /
 1697|    250|            l:RDFLiteral() { l.into() } /
 1698|    250|            l:NumericLiteral() { l.into() } /
 1699|    250|            l:BooleanLiteral() { l.into() } /
 1700|    250|            b:BlankNode() { b.into() } /
 1701|    250|            NIL() { rdf::NIL.into_owned().into() }
 1702|    250|
 1703|    250|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|    250|
 1705|    250|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|    250|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|    250|        }
 1708|    250|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|    250|
 1710|    250|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|    250|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|    250|        }
 1713|    250|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|    250|
 1715|    250|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|    250|
 1717|    250|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|    250|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|    250|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|    250|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|    250|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|    250|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|    250|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|    250|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|    250|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|    250|            Some(_) => unreachable!(),
 1727|    250|            None => a
 1728|    250|        } }
 1729|    250|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|    250|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|    250|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|    250|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|    250|
 1734|    250|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|    250|
 1736|    250|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|    250|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|    250|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|    250|            Some(_) => unreachable!(),
 1740|    250|            None => a,
 1741|    250|        } }
 1742|    250|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|    250|            (s, e)
 1744|    250|        }
 1745|    250|
 1746|    250|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|    250|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|    250|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|    250|            Some(_) => unreachable!(),
 1750|    250|            None => a
 1751|    250|        } }
 1752|    250|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|    250|            (s, e)
 1754|    250|        }
 1755|    250|
 1756|    250|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|    250|            Some("!") => Expression::Not(Box::new(e)),
 1758|    250|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|    250|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|    250|            Some(_) => unreachable!(),
 1761|    250|            None => e,
 1762|    250|        } }
 1763|    250|
 1764|    250|        rule PrimaryExpression() -> Expression =
 1765|    250|            BrackettedExpression()  /
 1766|    250|            ExprQuotedTriple() /
 1767|    250|            iriOrFunction() /
 1768|    250|            v:Var() { v.into() } /
 1769|    250|            l:RDFLiteral() { l.into() } /
 1770|    250|            l:NumericLiteral() { l.into() } /
 1771|    250|            l:BooleanLiteral() { l.into() } /
 1772|    250|            BuiltInCall()
 1773|    250|
 1774|    250|        rule ExprVarOrTerm() -> Expression =
 1775|    250|            ExprQuotedTriple() /
 1776|    250|            i:iri() { i.into() } /
 1777|    250|            l:RDFLiteral() { l.into() } /
 1778|    250|            l:NumericLiteral() { l.into() } /
 1779|    250|            l:BooleanLiteral() { l.into() } /
 1780|    250|            v:Var() { v.into() }
 1781|    250|
 1782|    250|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|    250|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|    250|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|    250|        }
 1786|    250|
 1787|    250|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|    250|
 1789|    250|        rule BuiltInCall() -> Expression =
 1790|    250|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|    250|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|    250|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|    250|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|    250|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|    250|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|    250|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|    250|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|    250|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|    250|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|    250|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|    250|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|    250|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|    250|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|    250|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|    250|            SubstringExpression() /
 1806|    250|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|    250|            StrReplaceExpression() /
 1808|    250|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|    250|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|    250|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|    250|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|    250|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|    250|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|    250|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|    250|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|    250|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|    250|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|    250|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|    250|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|    250|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|    250|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|    250|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|    250|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|    250|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|    250|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|    250|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|    250|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|    250|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|    250|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|    250|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|    250|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|    250|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|    250|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|    250|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|    250|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|    250|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|    250|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|    250|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|    250|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|    250|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|    250|            RegexExpression() /
 1842|    250|            ExistsFunc() /
 1843|    250|            NotExistsFunc() /
 1844|    250|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|    250|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|    250|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|    250|            } /
 1848|    250|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|    250|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|    250|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|    250|            } /
 1852|    250|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|    250|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|    250|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|    250|            } /
 1856|    250|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|    250|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|    250|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|    250|            } /
 1860|    250|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|    250|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|    250|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|    250|            } /
 1864|    250|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|    250|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|    250|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|    250|            }
 1868|    250|
 1869|    250|        rule RegexExpression() -> Expression =
 1870|    250|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|    250|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|    250|
 1873|    250|
 1874|    250|        rule SubstringExpression() -> Expression =
 1875|    250|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|    250|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|    250|
 1878|    250|
 1879|    250|        rule StrReplaceExpression() -> Expression =
 1880|    250|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|    250|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|    250|
 1883|    250|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|    250|
 1885|    250|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|    250|
 1887|    250|        rule Aggregate() -> AggregateExpression =
 1888|    250|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|    250|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|    250|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|    250|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|    250|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|    250|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|    250|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|    250|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|    250|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|    250|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|    250|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|    250|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|    250|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|    250|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|    250|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|    250|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|    250|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|    250|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|    250|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|    250|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|    250|
 1909|    250|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|    250|            match a {
 1911|    250|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|    250|                None => i.into()
 1913|    250|            }
 1914|    250|        }
 1915|    250|
 1916|    250|        rule RDFLiteral() -> Literal =
 1917|    250|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|    250|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|    250|            value:String() { Literal::new_simple_literal(value) }
 1920|    250|
 1921|    250|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|    250|
 1923|    250|        rule NumericLiteralUnsigned() -> Literal =
 1924|    250|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|    250|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|    250|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|    250|
 1928|    250|        rule NumericLiteralPositive() -> Literal =
 1929|    250|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|    250|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|    250|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|    250|
 1933|    250|
 1934|    250|        rule NumericLiteralNegative() -> Literal =
 1935|    250|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|    250|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|    250|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|    250|
 1939|    250|        rule BooleanLiteral() -> Literal =
 1940|    250|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|    250|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|    250|
 1943|    250|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|    250|
 1945|    250|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|    250|            NamedNode::from(i)
 1947|    250|        }
 1948|    250|
 1949|    250|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|    250|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|    250|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|    250|            } else {
 1953|    250|                Err("Prefix not found")
 1954|    250|            } }
 1955|    250|
 1956|    250|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|    250|            let node = BlankNode::new_unchecked(id);
 1958|    250|            if state.used_bnodes.contains(&node) {
 1959|    250|                Err("Already used blank node id")
 1960|    250|            } else {
 1961|    250|                state.currently_used_bnodes.insert(node.clone());
 1962|    250|                Ok(node)
 1963|    250|            }
 1964|    250|        } / ANON() { BlankNode::default() }
 1965|    250|
 1966|    250|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|    250|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|    250|        }
 1969|    250|
 1970|    250|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|    250|            ns
 1972|    250|        }
 1973|    250|
 1974|    250|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|    250|            if let Some(base) = state.namespaces.get(ns) {
 1976|    250|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|    250|                iri.push_str(base);
 1978|    250|                for chunk in local.split('\\') { // We remove \
 1979|    250|                    iri.push_str(chunk);
 1980|    250|                }
 1981|    250|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|    250|            } else {
 1983|    250|                Err("Prefix not found")
 1984|    250|            }
 1985|    250|        }
 1986|    250|
 1987|    250|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|    250|            b
 1989|    250|        }
 1990|    250|
 1991|    250|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|    250|
 1993|    250|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|    250|
 1995|    250|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|    250|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|    250|        }
 1998|    250|
 1999|    250|        rule INTEGER() = ['0'..='9']+
 2000|    250|
 2001|    250|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|    250|
 2003|    250|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|    250|
 2005|    250|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|    250|
 2007|    250|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|    250|
 2009|    250|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|    250|
 2011|    250|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|    250|
 2013|    250|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|    250|
 2015|    250|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|    250|
 2017|    250|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|    250|
 2019|    250|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|    250|             unescape_string(l)
 2021|    250|        }
 2022|    250|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|    250|
 2024|    250|
 2025|    250|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|    250|             unescape_string(l)
 2027|    250|        }
 2028|    250|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|    250|
 2030|    250|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|    250|             unescape_string(l)
 2032|    250|        }
 2033|    250|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|    250|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|    250|
 2036|    250|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|    250|             unescape_string(l)
 2038|    250|        }
 2039|    250|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|    250|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|    250|
 2042|    250|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|    250|
 2044|    250|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|    250|
 2046|    250|        rule NIL() = "(" WS()* ")"
 2047|    250|
 2048|    250|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|    250|
 2050|    250|        rule ANON() = "[" WS()* "]"
 2051|    250|
 2052|    250|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|    250|
 2054|    250|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|    250|
 2056|    250|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|    250|
 2058|    250|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|    250|
 2060|    250|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|    250|
 2062|    250|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|    250|
 2064|    250|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|    250|
 2066|    250|        rule PERCENT() = ['%'] HEX() HEX()
 2067|    250|
 2068|    250|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|    250|
 2070|    250|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|    250|
 2072|    250|        //space
 2073|    250|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|    250|
 2075|    250|        //comment
 2076|    250|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|    250|
 2078|    250|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|    250|            if input.eq_ignore_ascii_case(literal) {
 2080|    250|                Ok(())
 2081|    250|            } else {
 2082|    250|                Err(literal)
 2083|    250|            }
 2084|    250|        }
 2085|    250|    }
 2086|    250|}
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_PathOneInPropertySets0_0B7_:
 1573|  1.43k|            v:iri() { Either::Left(v) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_HavingClause0B7_:
  778|     22|parser! {
  779|     22|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|     22|    grammar parser(state: &mut ParserState) for str {
  781|     22|        pub rule QueryUnit() -> Query = Query()
  782|     22|
  783|     22|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|     22|            q
  785|     22|        }
  786|     22|
  787|     22|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|     22|
  789|     22|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|     22|
  791|     22|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|     22|            state.base_iri = Some(i)
  793|     22|        }
  794|     22|
  795|     22|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|     22|            state.namespaces.insert(ns.into(), i.into_inner());
  797|     22|        }
  798|     22|
  799|     22|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|     22|            Ok(Query::Select {
  801|     22|                dataset: d,
  802|     22|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|     22|                base_iri: state.base_iri.clone()
  804|     22|            })
  805|     22|        }
  806|     22|
  807|     22|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|     22|            build_select(s, w, g, h, o, l, v, state)
  809|     22|        }
  810|     22|
  811|     22|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|     22|            Selection {
  813|     22|                option: o,
  814|     22|                variables: v
  815|     22|            }
  816|     22|        }
  817|     22|        rule Selection_init() = {
  818|     22|            state.aggregates.push(Vec::new())
  819|     22|        }
  820|     22|        rule SelectClause_option() -> SelectionOption =
  821|     22|            i("DISTINCT") { SelectionOption::Distinct } /
  822|     22|            i("REDUCED") { SelectionOption::Reduced } /
  823|     22|            { SelectionOption::Default }
  824|     22|        rule SelectClause_variables() -> SelectionVariables =
  825|     22|            "*" { SelectionVariables::Star } /
  826|     22|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|     22|        rule SelectClause_member() -> SelectionMember =
  828|     22|            v:Var() _ { SelectionMember::Variable(v) } /
  829|     22|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|     22|
  831|     22|        rule ConstructQuery() -> Query =
  832|     22|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|     22|                Ok(Query::Construct {
  834|     22|                    template: c,
  835|     22|                    dataset: d,
  836|     22|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|     22|                    base_iri: state.base_iri.clone()
  838|     22|                })
  839|     22|            } /
  840|     22|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|     22|                Ok(Query::Construct {
  842|     22|                    template: c.clone(),
  843|     22|                    dataset: d,
  844|     22|                    pattern: build_select(
  845|     22|                        Selection::no_op(),
  846|     22|                        GraphPattern::Bgp { patterns: c },
  847|     22|                        g, h, o, l, v, state
  848|     22|                    )?,
  849|     22|                    base_iri: state.base_iri.clone()
  850|     22|                })
  851|     22|            }
  852|     22|
  853|     22|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|     22|
  855|     22|        rule DescribeQuery() -> Query =
  856|     22|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|     22|                Ok(Query::Describe {
  858|     22|                    dataset: d,
  859|     22|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|     22|                    base_iri: state.base_iri.clone()
  861|     22|                })
  862|     22|            } /
  863|     22|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|     22|                Ok(Query::Describe {
  865|     22|                    dataset: d,
  866|     22|                    pattern: build_select(Selection {
  867|     22|                        option: SelectionOption::Default,
  868|     22|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|     22|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|     22|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|     22|                        }).collect())
  872|     22|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|     22|                    base_iri: state.base_iri.clone()
  874|     22|                })
  875|     22|            }
  876|     22|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|     22|
  878|     22|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|     22|            Ok(Query::Ask {
  880|     22|                dataset: d,
  881|     22|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|     22|                base_iri: state.base_iri.clone()
  883|     22|            })
  884|     22|        }
  885|     22|
  886|     22|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|     22|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|     22|            if d.is_empty() {
  889|     22|                return None;
  890|     22|            }
  891|     22|            let mut default = Vec::new();
  892|     22|            let mut named = Vec::new();
  893|     22|            for (d, n) in d {
  894|     22|                if let Some(d) = d {
  895|     22|                    default.push(d);
  896|     22|                }
  897|     22|                if let Some(n) = n {
  898|     22|                    named.push(n);
  899|     22|                }
  900|     22|            }
  901|     22|            Some(QueryDataset {
  902|     22|                default, named: Some(named)
  903|     22|            })
  904|     22|        }
  905|     22|
  906|     22|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|     22|            (Some(s), None)
  908|     22|        }
  909|     22|
  910|     22|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|     22|            (None, Some(s))
  912|     22|        }
  913|     22|
  914|     22|        rule SourceSelector() -> NamedNode = iri()
  915|     22|
  916|     22|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|     22|            p
  918|     22|        }
  919|     22|
  920|     22|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|     22|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|     22|            let clauses = c.into_iter().map(|(e, vo)| {
  923|     22|                if let Expression::Variable(v) = e {
  924|     22|                    v
  925|     22|                } else {
  926|     22|                    let v = vo.unwrap_or_else(variable);
  927|     22|                    projections.push((e, v.clone()));
  928|     22|                    v
  929|     22|                }
  930|     22|            }).collect();
  931|     22|            (clauses, projections)
  932|     22|        }
  933|     22|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|     22|
  935|     22|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|     22|            e:BuiltInCall() { (e, None) } /
  937|     22|            e:FunctionCall() { (e, None) } /
  938|     22|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|     22|            e:Var() { (e.into(), None) }
  940|     22|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|     22|
  942|     22|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|     22|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|     22|        }
  945|     22|
  946|     22|        rule HavingCondition() -> Expression = Constraint()
  947|     22|
  948|     22|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|     22|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|     22|
  951|     22|        rule OrderCondition() -> OrderExpression =
  952|     22|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|     22|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|     22|            e: Constraint() { OrderExpression::Asc(e) } /
  955|     22|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|     22|
  957|     22|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|     22|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|     22|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|     22|
  961|     22|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|     22|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|     22|        }
  964|     22|
  965|     22|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|     22|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|     22|        }
  968|     22|
  969|     22|        rule ValuesClause() -> Option<GraphPattern> =
  970|     22|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|     22|            { None }
  972|     22|
  973|     22|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|     22|
  975|     22|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|     22|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|     22|
  978|     22|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|     22|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|     22|        }
  981|     22|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|     22|
  983|     22|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|     22|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|     22|        }
  986|     22|
  987|     22|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|     22|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|     22|        }
  990|     22|
  991|     22|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|     22|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|     22|        }
  994|     22|
  995|     22|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|     22|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|     22|            if from == to {
  998|     22|                Vec::new() // identity case
  999|     22|            } else {
 1000|     22|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|     22|                vec![copy_graph(from, to)]
 1002|     22|            }
 1003|     22|        }
 1004|     22|
 1005|     22|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|     22|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|     22|            if from == to {
 1008|     22|                Vec::new() // identity case
 1009|     22|            } else {
 1010|     22|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|     22|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|     22|            }
 1013|     22|        }
 1014|     22|
 1015|     22|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|     22|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|     22|            if from == to {
 1018|     22|                Vec::new() // identity case
 1019|     22|            } else {
 1020|     22|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|     22|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|     22|            }
 1023|     22|        }
 1024|     22|
 1025|     22|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|     22|            vec![GraphUpdateOperation::InsertData { data }]
 1027|     22|        }
 1028|     22|
 1029|     22|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|     22|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|     22|        }
 1032|     22|
 1033|     22|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|     22|            let pattern = d.iter().map(|q| {
 1035|     22|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|     22|                match &q.graph_name {
 1037|     22|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|     22|                    GraphNamePattern::DefaultGraph => bgp,
 1039|     22|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|     22|                }
 1041|     22|            }).reduce(new_join).unwrap_or_default();
 1042|     22|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|     22|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|     22|                delete,
 1045|     22|                insert: Vec::new(),
 1046|     22|                using: None,
 1047|     22|                pattern: Box::new(pattern)
 1048|     22|            }])
 1049|     22|        }
 1050|     22|
 1051|     22|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|     22|            let (delete, insert) = c;
 1053|     22|            let mut delete = delete.unwrap_or_default();
 1054|     22|            let mut insert = insert.unwrap_or_default();
 1055|     22|            #[allow(clippy::shadow_same)]
 1056|     22|            let mut pattern = pattern;
 1057|     22|
 1058|     22|            let mut using = if u.is_empty() {
 1059|     22|                None
 1060|     22|            } else {
 1061|     22|                let mut default = Vec::new();
 1062|     22|                let mut named = Vec::new();
 1063|     22|                for (d, n) in u {
 1064|     22|                    if let Some(d) = d {
 1065|     22|                        default.push(d)
 1066|     22|                    }
 1067|     22|                    if let Some(n) = n {
 1068|     22|                        named.push(n)
 1069|     22|                    }
 1070|     22|                }
 1071|     22|                Some(QueryDataset { default, named: Some(named) })
 1072|     22|            };
 1073|     22|
 1074|     22|            if let Some(with) = with {
 1075|     22|                // We inject WITH everywhere
 1076|     22|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|     22|                    GroundQuadPattern {
 1078|     22|                        subject: q.subject,
 1079|     22|                        predicate: q.predicate,
 1080|     22|                        object: q.object,
 1081|     22|                        graph_name: with.clone().into()
 1082|     22|                    }
 1083|     22|                } else {
 1084|     22|                    q
 1085|     22|                }).collect();
 1086|     22|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|     22|                    QuadPattern {
 1088|     22|                        subject: q.subject,
 1089|     22|                        predicate: q.predicate,
 1090|     22|                        object: q.object,
 1091|     22|                        graph_name: with.clone().into()
 1092|     22|                    }
 1093|     22|                } else {
 1094|     22|                    q
 1095|     22|                }).collect();
 1096|     22|                if using.is_none() {
 1097|     22|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|     22|                }
 1099|     22|            }
 1100|     22|
 1101|     22|            vec![GraphUpdateOperation::DeleteInsert {
 1102|     22|                delete,
 1103|     22|                insert,
 1104|     22|                using,
 1105|     22|                pattern: Box::new(pattern)
 1106|     22|            }]
 1107|     22|        }
 1108|     22|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|     22|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|     22|            (Some(d), i)
 1111|     22|        } / i:InsertClause() {
 1112|     22|            (None, Some(i))
 1113|     22|        }
 1114|     22|        rule Modify_clear() = {
 1115|     22|            state.used_bnodes.clear();
 1116|     22|            state.currently_used_bnodes.clear();
 1117|     22|        }
 1118|     22|
 1119|     22|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|     22|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|     22|        }
 1122|     22|
 1123|     22|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|     22|
 1125|     22|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|     22|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|     22|            (Some(i), None)
 1128|     22|        }
 1129|     22|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|     22|            (None, Some(i))
 1131|     22|        }
 1132|     22|
 1133|     22|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|     22|            GraphName::DefaultGraph
 1135|     22|        } / (i("GRAPH") _)? g:iri() {
 1136|     22|            GraphName::NamedNode(g)
 1137|     22|        }
 1138|     22|
 1139|     22|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|     22|
 1141|     22|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|     22|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|     22|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|     22|            / i("ALL") { GraphTarget::AllGraphs }
 1145|     22|
 1146|     22|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|     22|
 1148|     22|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|     22|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|     22|        }
 1151|     22|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|     22|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|     22|        }
 1154|     22|
 1155|     22|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|     22|            q.into_iter().flatten().collect()
 1157|     22|        }
 1158|     22|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|     22|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|     22|        } //TODO: return iter?
 1161|     22|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|     22|
 1163|     22|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|     22|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|     22|        }
 1166|     22|
 1167|     22|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|     22|            ts.into_iter().flatten().collect()
 1169|     22|        }
 1170|     22|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|     22|
 1172|     22|        rule GroupGraphPattern() -> GraphPattern =
 1173|     22|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|     22|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|     22|        rule GroupGraphPattern_clear() = {
 1176|     22|             // We deal with blank nodes aliases rule
 1177|     22|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|     22|            state.currently_used_bnodes.clear();
 1179|     22|        }
 1180|     22|
 1181|     22|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|     22|            let mut filter: Option<Expression> = None;
 1183|     22|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|     22|            for e in b.into_iter().flatten() {
 1185|     22|                match e {
 1186|     22|                    PartialGraphPattern::Optional(p, f) => {
 1187|     22|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|     22|                    }
 1189|     22|                    #[cfg(feature = "sep-0006")]
 1190|     22|                    PartialGraphPattern::Lateral(p) => {
 1191|     22|                        let mut defined_variables = HashSet::default();
 1192|     22|                        add_defined_variables(&p, &mut defined_variables);
 1193|     22|                        let mut contains = false;
 1194|     22|                        g.on_in_scope_variable(|v| {
 1195|     22|                            if defined_variables.contains(v) {
 1196|     22|                                contains = true;
 1197|     22|                            }
 1198|     22|                        });
 1199|     22|                        if contains {
 1200|     22|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|     22|                        }
 1202|     22|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|     22|                    }
 1204|     22|                    PartialGraphPattern::Minus(p) => {
 1205|     22|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|     22|                    }
 1207|     22|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|     22|                        let mut contains = false;
 1209|     22|                        g.on_in_scope_variable(|v| {
 1210|     22|                            if *v == variable {
 1211|     22|                                contains = true;
 1212|     22|                            }
 1213|     22|                        });
 1214|     22|                        if contains {
 1215|     22|                            return Err("BIND is overriding an existing variable")
 1216|     22|                        }
 1217|     22|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|     22|                    }
 1219|     22|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|     22|                        Expression::And(Box::new(f), Box::new(expr))
 1221|     22|                    } else {
 1222|     22|                        expr
 1223|     22|                    }),
 1224|     22|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|     22|                }
 1226|     22|            }
 1227|     22|
 1228|     22|            Ok(if let Some(expr) = filter {
 1229|     22|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|     22|            } else {
 1231|     22|                g
 1232|     22|            })
 1233|     22|        }
 1234|     22|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|     22|            let mut result = vec![a];
 1236|     22|            if let Some(v) = b {
 1237|     22|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|     22|            }
 1239|     22|            result
 1240|     22|        }
 1241|     22|
 1242|     22|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|     22|            hs.into_iter().flatten().collect()
 1244|     22|        }
 1245|     22|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|     22|
 1247|     22|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|     22|
 1249|     22|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|     22|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|     22|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|     22|            } else {
 1253|     22|               PartialGraphPattern::Optional(p, None)
 1254|     22|            }
 1255|     22|        }
 1256|     22|
 1257|     22|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|     22|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|     22|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|     22|        }
 1261|     22|
 1262|     22|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|     22|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|     22|        }
 1265|     22|
 1266|     22|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|     22|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|     22|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|     22|
 1270|     22|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|     22|            PartialGraphPattern::Bind(e, v)
 1272|     22|        }
 1273|     22|
 1274|     22|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|     22|
 1276|     22|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|     22|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|     22|        }
 1279|     22|
 1280|     22|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|     22|            (vec![var], d)
 1282|     22|        }
 1283|     22|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|     22|
 1285|     22|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|     22|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|     22|                Ok((vars, vals))
 1288|     22|            } else {
 1289|     22|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|     22|            }
 1291|     22|        }
 1292|     22|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|     22|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|     22|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|     22|
 1296|     22|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|     22|            t:QuotedTripleData() {?
 1298|     22|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|     22|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|     22|            } /
 1301|     22|            i:iri() { Some(i.into()) } /
 1302|     22|            l:RDFLiteral() { Some(l.into()) } /
 1303|     22|            l:NumericLiteral() { Some(l.into()) } /
 1304|     22|            l:BooleanLiteral() { Some(l.into()) } /
 1305|     22|            i("UNDEF") { None }
 1306|     22|
 1307|     22|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|     22|            PartialGraphPattern::Minus(p)
 1309|     22|        }
 1310|     22|
 1311|     22|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|     22|            not_empty_fold(p.into_iter(), |a, b| {
 1313|     22|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|     22|            }).map(PartialGraphPattern::Other)
 1315|     22|        }
 1316|     22|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|     22|
 1318|     22|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|     22|            PartialGraphPattern::Filter(c)
 1320|     22|        }
 1321|     22|
 1322|     22|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|     22|
 1324|     22|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|     22|            Expression::FunctionCall(Function::Custom(f), a)
 1326|     22|        }
 1327|     22|
 1328|     22|        rule ArgList() -> Vec<Expression> =
 1329|     22|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|     22|            NIL() { Vec::new() }
 1331|     22|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|     22|
 1333|     22|        rule ExpressionList() -> Vec<Expression> =
 1334|     22|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|     22|            NIL() { Vec::new() }
 1336|     22|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|     22|
 1338|     22|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|     22|
 1340|     22|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|     22|            p.into_iter().flatten().collect()
 1342|     22|        }
 1343|     22|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|     22|
 1345|     22|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|     22|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|     22|                let mut patterns = po.patterns;
 1348|     22|                for (p, os) in po.focus {
 1349|     22|                    for o in os {
 1350|     22|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|     22|                    }
 1352|     22|                }
 1353|     22|                Ok(patterns)
 1354|     22|            } /
 1355|     22|            s:TriplesNode() _ po:PropertyList() {?
 1356|     22|                let mut patterns = s.patterns;
 1357|     22|                patterns.extend(po.patterns);
 1358|     22|                for (p, os) in po.focus {
 1359|     22|                    for o in os {
 1360|     22|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|     22|                    }
 1362|     22|                }
 1363|     22|                Ok(patterns)
 1364|     22|            }
 1365|     22|
 1366|     22|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|     22|            PropertyListNotEmpty() /
 1368|     22|            { FocusedTriplePattern::default() }
 1369|     22|
 1370|     22|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|     22|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|     22|                a.focus.push(b.focus);
 1373|     22|                a.patterns.extend(b.patterns);
 1374|     22|                a
 1375|     22|            })
 1376|     22|        }
 1377|     22|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|     22|            FocusedTriplePattern {
 1379|     22|                focus: (p, o.focus),
 1380|     22|                patterns: o.patterns
 1381|     22|            }
 1382|     22|        }
 1383|     22|
 1384|     22|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|     22|
 1386|     22|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|     22|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|     22|                a.focus.push(b.focus);
 1389|     22|                a.patterns.extend_from_slice(&b.patterns);
 1390|     22|                a
 1391|     22|            })
 1392|     22|        }
 1393|     22|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|     22|
 1395|     22|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|     22|            if let Some(a) = a {
 1397|     22|                let mut patterns = g.patterns;
 1398|     22|                patterns.extend(a.patterns);
 1399|     22|                FocusedTriplePattern {
 1400|     22|                    focus: AnnotatedTerm {
 1401|     22|                        term: g.focus,
 1402|     22|                        annotations: a.focus
 1403|     22|                    },
 1404|     22|                    patterns
 1405|     22|                }
 1406|     22|            } else {
 1407|     22|                FocusedTriplePattern {
 1408|     22|                    focus: AnnotatedTerm {
 1409|     22|                        term: g.focus,
 1410|     22|                        annotations: Vec::new()
 1411|     22|                    },
 1412|     22|                    patterns: g.patterns
 1413|     22|                }
 1414|     22|            }
 1415|     22|        }
 1416|     22|
 1417|     22|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|     22|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|     22|                let mut patterns = po.patterns;
 1420|     22|                for (p, os) in po.focus {
 1421|     22|                    for o in os {
 1422|     22|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|     22|                    }
 1424|     22|                }
 1425|     22|                Ok(patterns)
 1426|     22|            } /
 1427|     22|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|     22|                let mut patterns = s.patterns;
 1429|     22|                patterns.extend(po.patterns);
 1430|     22|                for (p, os) in po.focus {
 1431|     22|                    for o in os {
 1432|     22|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|     22|                    }
 1434|     22|                }
 1435|     22|                Ok(patterns)
 1436|     22|            }
 1437|     22|
 1438|     22|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|     22|            PropertyListPathNotEmpty() /
 1440|     22|            { FocusedTripleOrPathPattern::default() }
 1441|     22|
 1442|     22|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|     22|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|     22|                    focus: vec![(hp, ho.focus)],
 1445|     22|                    patterns: ho.patterns
 1446|     22|                }, |mut a, b| {
 1447|     22|                    a.focus.push(b.focus);
 1448|     22|                    a.patterns.extend(b.patterns);
 1449|     22|                    a
 1450|     22|                })
 1451|     22|        }
 1452|     22|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|     22|            c
 1454|     22|        }
 1455|     22|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|     22|            FocusedTripleOrPathPattern {
 1457|     22|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|     22|                patterns: o.patterns
 1459|     22|            }
 1460|     22|        }
 1461|     22|
 1462|     22|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|     22|            p.into()
 1464|     22|        }
 1465|     22|
 1466|     22|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|     22|            v.into()
 1468|     22|        }
 1469|     22|
 1470|     22|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|     22|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|     22|                a.focus.push(b.focus);
 1473|     22|                a.patterns.extend(b.patterns);
 1474|     22|                a
 1475|     22|            })
 1476|     22|        }
 1477|     22|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|     22|
 1479|     22|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|     22|             if let Some(a) = a {
 1481|     22|                let mut patterns = g.patterns;
 1482|     22|                patterns.extend(a.patterns);
 1483|     22|                FocusedTripleOrPathPattern {
 1484|     22|                    focus: AnnotatedTermPath {
 1485|     22|                        term: g.focus,
 1486|     22|                        annotations: a.focus
 1487|     22|                    },
 1488|     22|                    patterns
 1489|     22|                }
 1490|     22|            } else {
 1491|     22|                FocusedTripleOrPathPattern {
 1492|     22|                    focus: AnnotatedTermPath {
 1493|     22|                        term: g.focus,
 1494|     22|                        annotations: Vec::new()
 1495|     22|                    },
 1496|     22|                    patterns: g.patterns
 1497|     22|                }
 1498|     22|            }
 1499|     22|        }
 1500|     22|
 1501|     22|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|     22|
 1503|     22|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|     22|            not_empty_fold(p.into_iter(), |a, b| {
 1505|     22|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|     22|            })
 1507|     22|        }
 1508|     22|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|     22|
 1510|     22|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|     22|            not_empty_fold(p.into_iter(), |a, b| {
 1512|     22|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|     22|            })
 1514|     22|        }
 1515|     22|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|     22|
 1517|     22|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|     22|            match o {
 1519|     22|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|     22|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|     22|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|     22|                Some(_) => unreachable!(),
 1523|     22|                None => p
 1524|     22|            }
 1525|     22|        }
 1526|     22|        rule PathElt_op() -> char =
 1527|     22|            "*" { '*' } /
 1528|     22|            "+" { '+' } /
 1529|     22|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|     22|
 1531|     22|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|     22|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|     22|            PathElt()
 1534|     22|
 1535|     22|        rule PathPrimary() -> PropertyPathExpression =
 1536|     22|            v:iri() { v.into() } /
 1537|     22|            "a" { rdf::TYPE.into_owned().into() } /
 1538|     22|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|     22|            "(" _ p:Path() _ ")" { p }
 1540|     22|
 1541|     22|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|     22|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|     22|                let mut direct = Vec::new();
 1544|     22|                let mut inverse = Vec::new();
 1545|     22|                for e in p {
 1546|     22|                    match e {
 1547|     22|                        Either::Left(a) => direct.push(a),
 1548|     22|                        Either::Right(b) => inverse.push(b)
 1549|     22|                    }
 1550|     22|                }
 1551|     22|                if inverse.is_empty() {
 1552|     22|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|     22|                } else if direct.is_empty() {
 1554|     22|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|     22|                } else {
 1556|     22|                    PropertyPathExpression::Alternative(
 1557|     22|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|     22|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|     22|                    )
 1560|     22|                }
 1561|     22|            } /
 1562|     22|            p:PathOneInPropertySet() {
 1563|     22|                match p {
 1564|     22|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|     22|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|     22|                }
 1567|     22|            }
 1568|     22|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|     22|
 1570|     22|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|     22|            "^" _ v:iri() { Either::Right(v) } /
 1572|     22|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|     22|            v:iri() { Either::Left(v) } /
 1574|     22|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|     22|
 1576|     22|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|     22|
 1578|     22|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|     22|            let mut patterns = po.patterns;
 1580|     22|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|     22|            for (p, os) in po.focus {
 1582|     22|                for o in os {
 1583|     22|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|     22|                }
 1585|     22|            }
 1586|     22|            Ok(FocusedTriplePattern {
 1587|     22|                focus: bnode,
 1588|     22|                patterns
 1589|     22|            })
 1590|     22|        }
 1591|     22|
 1592|     22|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|     22|
 1594|     22|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|     22|            let mut patterns = po.patterns;
 1596|     22|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|     22|            for (p, os) in po.focus {
 1598|     22|                for o in os {
 1599|     22|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|     22|                }
 1601|     22|            }
 1602|     22|            Ok(FocusedTripleOrPathPattern {
 1603|     22|                focus: bnode,
 1604|     22|                patterns
 1605|     22|            })
 1606|     22|        }
 1607|     22|
 1608|     22|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|     22|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|     22|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|     22|            for objWithPatterns in o.into_iter().rev() {
 1612|     22|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|     22|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|     22|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|     22|                current_list_node = new_blank_node;
 1616|     22|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|     22|            }
 1618|     22|            FocusedTriplePattern {
 1619|     22|                focus: current_list_node,
 1620|     22|                patterns
 1621|     22|            }
 1622|     22|        }
 1623|     22|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|     22|
 1625|     22|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|     22|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|     22|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|     22|            for objWithPatterns in o.into_iter().rev() {
 1629|     22|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|     22|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|     22|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|     22|                current_list_node = new_blank_node;
 1633|     22|                patterns.extend(objWithPatterns.patterns);
 1634|     22|            }
 1635|     22|            FocusedTripleOrPathPattern {
 1636|     22|                focus: current_list_node,
 1637|     22|                patterns
 1638|     22|            }
 1639|     22|        }
 1640|     22|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|     22|
 1642|     22|
 1643|     22|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|     22|
 1645|     22|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|     22|
 1647|     22|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|     22|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|     22|            TriplesNode()
 1650|     22|
 1651|     22|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|     22|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|     22|            TriplesNodePath()
 1654|     22|
 1655|     22|        rule VarOrTerm() -> TermPattern =
 1656|     22|            v:Var() { v.into() } /
 1657|     22|            t:QuotedTriple() {?
 1658|     22|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|     22|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|     22|            } /
 1661|     22|            t:GraphTerm() { t.into() }
 1662|     22|
 1663|     22|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|     22|            Ok(TriplePattern {
 1665|     22|                subject: s,
 1666|     22|                predicate: p,
 1667|     22|                object: o
 1668|     22|            })
 1669|     22|        }
 1670|     22|
 1671|     22|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|     22|            Ok(GroundTriple {
 1673|     22|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|     22|                predicate: p,
 1675|     22|                object: o
 1676|     22|            })
 1677|     22|        }
 1678|     22|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|     22|
 1680|     22|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|     22|            l:RDFLiteral() { l.into() } /
 1682|     22|            l:NumericLiteral() { l.into() } /
 1683|     22|            l:BooleanLiteral() { l.into() } /
 1684|     22|            t:QuotedTripleData() {?
 1685|     22|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|     22|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|     22|            }
 1688|     22|
 1689|     22|        rule VarOrIri() -> NamedNodePattern =
 1690|     22|            v:Var() { v.into() } /
 1691|     22|            i:iri() { i.into() }
 1692|     22|
 1693|     22|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|     22|
 1695|     22|        rule GraphTerm() -> Term =
 1696|     22|            i:iri() { i.into() } /
 1697|     22|            l:RDFLiteral() { l.into() } /
 1698|     22|            l:NumericLiteral() { l.into() } /
 1699|     22|            l:BooleanLiteral() { l.into() } /
 1700|     22|            b:BlankNode() { b.into() } /
 1701|     22|            NIL() { rdf::NIL.into_owned().into() }
 1702|     22|
 1703|     22|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|     22|
 1705|     22|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|     22|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|     22|        }
 1708|     22|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|     22|
 1710|     22|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|     22|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|     22|        }
 1713|     22|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|     22|
 1715|     22|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|     22|
 1717|     22|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|     22|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|     22|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|     22|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|     22|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|     22|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|     22|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|     22|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|     22|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|     22|            Some(_) => unreachable!(),
 1727|     22|            None => a
 1728|     22|        } }
 1729|     22|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|     22|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|     22|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|     22|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|     22|
 1734|     22|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|     22|
 1736|     22|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|     22|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|     22|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|     22|            Some(_) => unreachable!(),
 1740|     22|            None => a,
 1741|     22|        } }
 1742|     22|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|     22|            (s, e)
 1744|     22|        }
 1745|     22|
 1746|     22|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|     22|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|     22|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|     22|            Some(_) => unreachable!(),
 1750|     22|            None => a
 1751|     22|        } }
 1752|     22|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|     22|            (s, e)
 1754|     22|        }
 1755|     22|
 1756|     22|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|     22|            Some("!") => Expression::Not(Box::new(e)),
 1758|     22|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|     22|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|     22|            Some(_) => unreachable!(),
 1761|     22|            None => e,
 1762|     22|        } }
 1763|     22|
 1764|     22|        rule PrimaryExpression() -> Expression =
 1765|     22|            BrackettedExpression()  /
 1766|     22|            ExprQuotedTriple() /
 1767|     22|            iriOrFunction() /
 1768|     22|            v:Var() { v.into() } /
 1769|     22|            l:RDFLiteral() { l.into() } /
 1770|     22|            l:NumericLiteral() { l.into() } /
 1771|     22|            l:BooleanLiteral() { l.into() } /
 1772|     22|            BuiltInCall()
 1773|     22|
 1774|     22|        rule ExprVarOrTerm() -> Expression =
 1775|     22|            ExprQuotedTriple() /
 1776|     22|            i:iri() { i.into() } /
 1777|     22|            l:RDFLiteral() { l.into() } /
 1778|     22|            l:NumericLiteral() { l.into() } /
 1779|     22|            l:BooleanLiteral() { l.into() } /
 1780|     22|            v:Var() { v.into() }
 1781|     22|
 1782|     22|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|     22|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|     22|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|     22|        }
 1786|     22|
 1787|     22|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|     22|
 1789|     22|        rule BuiltInCall() -> Expression =
 1790|     22|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|     22|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|     22|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|     22|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|     22|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|     22|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|     22|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|     22|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|     22|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|     22|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|     22|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|     22|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|     22|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|     22|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|     22|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|     22|            SubstringExpression() /
 1806|     22|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|     22|            StrReplaceExpression() /
 1808|     22|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|     22|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|     22|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|     22|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|     22|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|     22|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|     22|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|     22|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|     22|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|     22|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|     22|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|     22|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|     22|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|     22|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|     22|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|     22|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|     22|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|     22|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|     22|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|     22|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|     22|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|     22|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|     22|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|     22|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|     22|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|     22|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|     22|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|     22|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|     22|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|     22|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|     22|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|     22|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|     22|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|     22|            RegexExpression() /
 1842|     22|            ExistsFunc() /
 1843|     22|            NotExistsFunc() /
 1844|     22|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|     22|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|     22|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|     22|            } /
 1848|     22|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|     22|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|     22|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|     22|            } /
 1852|     22|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|     22|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|     22|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|     22|            } /
 1856|     22|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|     22|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|     22|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|     22|            } /
 1860|     22|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|     22|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|     22|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|     22|            } /
 1864|     22|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|     22|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|     22|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|     22|            }
 1868|     22|
 1869|     22|        rule RegexExpression() -> Expression =
 1870|     22|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|     22|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|     22|
 1873|     22|
 1874|     22|        rule SubstringExpression() -> Expression =
 1875|     22|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|     22|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|     22|
 1878|     22|
 1879|     22|        rule StrReplaceExpression() -> Expression =
 1880|     22|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|     22|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|     22|
 1883|     22|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|     22|
 1885|     22|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|     22|
 1887|     22|        rule Aggregate() -> AggregateExpression =
 1888|     22|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|     22|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|     22|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|     22|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|     22|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|     22|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|     22|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|     22|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|     22|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|     22|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|     22|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|     22|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|     22|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|     22|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|     22|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|     22|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|     22|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|     22|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|     22|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|     22|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|     22|
 1909|     22|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|     22|            match a {
 1911|     22|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|     22|                None => i.into()
 1913|     22|            }
 1914|     22|        }
 1915|     22|
 1916|     22|        rule RDFLiteral() -> Literal =
 1917|     22|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|     22|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|     22|            value:String() { Literal::new_simple_literal(value) }
 1920|     22|
 1921|     22|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|     22|
 1923|     22|        rule NumericLiteralUnsigned() -> Literal =
 1924|     22|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|     22|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|     22|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|     22|
 1928|     22|        rule NumericLiteralPositive() -> Literal =
 1929|     22|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|     22|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|     22|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|     22|
 1933|     22|
 1934|     22|        rule NumericLiteralNegative() -> Literal =
 1935|     22|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|     22|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|     22|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|     22|
 1939|     22|        rule BooleanLiteral() -> Literal =
 1940|     22|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|     22|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|     22|
 1943|     22|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|     22|
 1945|     22|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|     22|            NamedNode::from(i)
 1947|     22|        }
 1948|     22|
 1949|     22|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|     22|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|     22|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|     22|            } else {
 1953|     22|                Err("Prefix not found")
 1954|     22|            } }
 1955|     22|
 1956|     22|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|     22|            let node = BlankNode::new_unchecked(id);
 1958|     22|            if state.used_bnodes.contains(&node) {
 1959|     22|                Err("Already used blank node id")
 1960|     22|            } else {
 1961|     22|                state.currently_used_bnodes.insert(node.clone());
 1962|     22|                Ok(node)
 1963|     22|            }
 1964|     22|        } / ANON() { BlankNode::default() }
 1965|     22|
 1966|     22|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|     22|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|     22|        }
 1969|     22|
 1970|     22|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|     22|            ns
 1972|     22|        }
 1973|     22|
 1974|     22|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|     22|            if let Some(base) = state.namespaces.get(ns) {
 1976|     22|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|     22|                iri.push_str(base);
 1978|     22|                for chunk in local.split('\\') { // We remove \
 1979|     22|                    iri.push_str(chunk);
 1980|     22|                }
 1981|     22|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|     22|            } else {
 1983|     22|                Err("Prefix not found")
 1984|     22|            }
 1985|     22|        }
 1986|     22|
 1987|     22|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|     22|            b
 1989|     22|        }
 1990|     22|
 1991|     22|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|     22|
 1993|     22|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|     22|
 1995|     22|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|     22|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|     22|        }
 1998|     22|
 1999|     22|        rule INTEGER() = ['0'..='9']+
 2000|     22|
 2001|     22|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|     22|
 2003|     22|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|     22|
 2005|     22|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|     22|
 2007|     22|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|     22|
 2009|     22|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|     22|
 2011|     22|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|     22|
 2013|     22|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|     22|
 2015|     22|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|     22|
 2017|     22|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|     22|
 2019|     22|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|     22|             unescape_string(l)
 2021|     22|        }
 2022|     22|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|     22|
 2024|     22|
 2025|     22|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|     22|             unescape_string(l)
 2027|     22|        }
 2028|     22|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|     22|
 2030|     22|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|     22|             unescape_string(l)
 2032|     22|        }
 2033|     22|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|     22|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|     22|
 2036|     22|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|     22|             unescape_string(l)
 2038|     22|        }
 2039|     22|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|     22|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|     22|
 2042|     22|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|     22|
 2044|     22|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|     22|
 2046|     22|        rule NIL() = "(" WS()* ")"
 2047|     22|
 2048|     22|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|     22|
 2050|     22|        rule ANON() = "[" WS()* "]"
 2051|     22|
 2052|     22|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|     22|
 2054|     22|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|     22|
 2056|     22|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|     22|
 2058|     22|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|     22|
 2060|     22|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|     22|
 2062|     22|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|     22|
 2064|     22|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|     22|
 2066|     22|        rule PERCENT() = ['%'] HEX() HEX()
 2067|     22|
 2068|     22|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|     22|
 2070|     22|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|     22|
 2072|     22|        //space
 2073|     22|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|     22|
 2075|     22|        //comment
 2076|     22|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|     22|
 2078|     22|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|     22|            if input.eq_ignore_ascii_case(literal) {
 2080|     22|                Ok(())
 2081|     22|            } else {
 2082|     22|                Err(literal)
 2083|     22|            }
 2084|     22|        }
 2085|     22|    }
 2086|     22|}
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_VarOrTerms0_0B7_:
 1661|  23.1k|            t:GraphTerm() { t.into() }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_Update0B7_:
  973|  2.98k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCallsH_0B7_:
 1837|      7|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_SelectClause_options0_0B7_:
  823|    777|            { SelectionOption::Default }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_RDFLiterals0_0B7_:
 1919|    470|            value:String() { Literal::new_simple_literal(value) }
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_DeleteWhere00B9_:
 1034|  2.32k|            let pattern = d.iter().map(|q| {
 1035|  2.32k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  2.32k|                match &q.graph_name {
 1037|  1.43k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|    288|                    GraphNamePattern::DefaultGraph => bgp,
 1039|    611|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|  2.32k|            }).reduce(new_join).unwrap_or_default();
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser29___parse_Quads_QuadsNotTriples0B7_:
 1161|  15.0k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_PropertyListNotEmpty0B7_:
 1370|  17.4k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  17.4k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|       |                a.focus.push(b.focus);
 1373|       |                a.patterns.extend(b.patterns);
 1374|       |                a
 1375|  17.4k|            })
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_InlineData0B7_:
 1274|    177|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_ObjectList0B7_:
 1386|  17.4k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  17.4k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|       |                a.focus.push(b.focus);
 1389|       |                a.patterns.extend_from_slice(&b.patterns);
 1390|       |                a
 1391|  17.4k|            })
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_GroundQuadData0B7_:
  778|     76|parser! {
  779|     76|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|     76|    grammar parser(state: &mut ParserState) for str {
  781|     76|        pub rule QueryUnit() -> Query = Query()
  782|     76|
  783|     76|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|     76|            q
  785|     76|        }
  786|     76|
  787|     76|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|     76|
  789|     76|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|     76|
  791|     76|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|     76|            state.base_iri = Some(i)
  793|     76|        }
  794|     76|
  795|     76|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|     76|            state.namespaces.insert(ns.into(), i.into_inner());
  797|     76|        }
  798|     76|
  799|     76|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|     76|            Ok(Query::Select {
  801|     76|                dataset: d,
  802|     76|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|     76|                base_iri: state.base_iri.clone()
  804|     76|            })
  805|     76|        }
  806|     76|
  807|     76|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|     76|            build_select(s, w, g, h, o, l, v, state)
  809|     76|        }
  810|     76|
  811|     76|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|     76|            Selection {
  813|     76|                option: o,
  814|     76|                variables: v
  815|     76|            }
  816|     76|        }
  817|     76|        rule Selection_init() = {
  818|     76|            state.aggregates.push(Vec::new())
  819|     76|        }
  820|     76|        rule SelectClause_option() -> SelectionOption =
  821|     76|            i("DISTINCT") { SelectionOption::Distinct } /
  822|     76|            i("REDUCED") { SelectionOption::Reduced } /
  823|     76|            { SelectionOption::Default }
  824|     76|        rule SelectClause_variables() -> SelectionVariables =
  825|     76|            "*" { SelectionVariables::Star } /
  826|     76|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|     76|        rule SelectClause_member() -> SelectionMember =
  828|     76|            v:Var() _ { SelectionMember::Variable(v) } /
  829|     76|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|     76|
  831|     76|        rule ConstructQuery() -> Query =
  832|     76|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|     76|                Ok(Query::Construct {
  834|     76|                    template: c,
  835|     76|                    dataset: d,
  836|     76|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|     76|                    base_iri: state.base_iri.clone()
  838|     76|                })
  839|     76|            } /
  840|     76|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|     76|                Ok(Query::Construct {
  842|     76|                    template: c.clone(),
  843|     76|                    dataset: d,
  844|     76|                    pattern: build_select(
  845|     76|                        Selection::no_op(),
  846|     76|                        GraphPattern::Bgp { patterns: c },
  847|     76|                        g, h, o, l, v, state
  848|     76|                    )?,
  849|     76|                    base_iri: state.base_iri.clone()
  850|     76|                })
  851|     76|            }
  852|     76|
  853|     76|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|     76|
  855|     76|        rule DescribeQuery() -> Query =
  856|     76|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|     76|                Ok(Query::Describe {
  858|     76|                    dataset: d,
  859|     76|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|     76|                    base_iri: state.base_iri.clone()
  861|     76|                })
  862|     76|            } /
  863|     76|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|     76|                Ok(Query::Describe {
  865|     76|                    dataset: d,
  866|     76|                    pattern: build_select(Selection {
  867|     76|                        option: SelectionOption::Default,
  868|     76|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|     76|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|     76|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|     76|                        }).collect())
  872|     76|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|     76|                    base_iri: state.base_iri.clone()
  874|     76|                })
  875|     76|            }
  876|     76|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|     76|
  878|     76|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|     76|            Ok(Query::Ask {
  880|     76|                dataset: d,
  881|     76|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|     76|                base_iri: state.base_iri.clone()
  883|     76|            })
  884|     76|        }
  885|     76|
  886|     76|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|     76|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|     76|            if d.is_empty() {
  889|     76|                return None;
  890|     76|            }
  891|     76|            let mut default = Vec::new();
  892|     76|            let mut named = Vec::new();
  893|     76|            for (d, n) in d {
  894|     76|                if let Some(d) = d {
  895|     76|                    default.push(d);
  896|     76|                }
  897|     76|                if let Some(n) = n {
  898|     76|                    named.push(n);
  899|     76|                }
  900|     76|            }
  901|     76|            Some(QueryDataset {
  902|     76|                default, named: Some(named)
  903|     76|            })
  904|     76|        }
  905|     76|
  906|     76|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|     76|            (Some(s), None)
  908|     76|        }
  909|     76|
  910|     76|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|     76|            (None, Some(s))
  912|     76|        }
  913|     76|
  914|     76|        rule SourceSelector() -> NamedNode = iri()
  915|     76|
  916|     76|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|     76|            p
  918|     76|        }
  919|     76|
  920|     76|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|     76|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|     76|            let clauses = c.into_iter().map(|(e, vo)| {
  923|     76|                if let Expression::Variable(v) = e {
  924|     76|                    v
  925|     76|                } else {
  926|     76|                    let v = vo.unwrap_or_else(variable);
  927|     76|                    projections.push((e, v.clone()));
  928|     76|                    v
  929|     76|                }
  930|     76|            }).collect();
  931|     76|            (clauses, projections)
  932|     76|        }
  933|     76|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|     76|
  935|     76|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|     76|            e:BuiltInCall() { (e, None) } /
  937|     76|            e:FunctionCall() { (e, None) } /
  938|     76|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|     76|            e:Var() { (e.into(), None) }
  940|     76|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|     76|
  942|     76|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|     76|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|     76|        }
  945|     76|
  946|     76|        rule HavingCondition() -> Expression = Constraint()
  947|     76|
  948|     76|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|     76|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|     76|
  951|     76|        rule OrderCondition() -> OrderExpression =
  952|     76|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|     76|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|     76|            e: Constraint() { OrderExpression::Asc(e) } /
  955|     76|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|     76|
  957|     76|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|     76|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|     76|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|     76|
  961|     76|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|     76|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|     76|        }
  964|     76|
  965|     76|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|     76|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|     76|        }
  968|     76|
  969|     76|        rule ValuesClause() -> Option<GraphPattern> =
  970|     76|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|     76|            { None }
  972|     76|
  973|     76|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|     76|
  975|     76|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|     76|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|     76|
  978|     76|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|     76|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|     76|        }
  981|     76|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|     76|
  983|     76|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|     76|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|     76|        }
  986|     76|
  987|     76|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|     76|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|     76|        }
  990|     76|
  991|     76|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|     76|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|     76|        }
  994|     76|
  995|     76|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|     76|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|     76|            if from == to {
  998|     76|                Vec::new() // identity case
  999|     76|            } else {
 1000|     76|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|     76|                vec![copy_graph(from, to)]
 1002|     76|            }
 1003|     76|        }
 1004|     76|
 1005|     76|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|     76|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|     76|            if from == to {
 1008|     76|                Vec::new() // identity case
 1009|     76|            } else {
 1010|     76|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|     76|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|     76|            }
 1013|     76|        }
 1014|     76|
 1015|     76|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|     76|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|     76|            if from == to {
 1018|     76|                Vec::new() // identity case
 1019|     76|            } else {
 1020|     76|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|     76|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|     76|            }
 1023|     76|        }
 1024|     76|
 1025|     76|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|     76|            vec![GraphUpdateOperation::InsertData { data }]
 1027|     76|        }
 1028|     76|
 1029|     76|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|     76|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|     76|        }
 1032|     76|
 1033|     76|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|     76|            let pattern = d.iter().map(|q| {
 1035|     76|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|     76|                match &q.graph_name {
 1037|     76|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|     76|                    GraphNamePattern::DefaultGraph => bgp,
 1039|     76|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|     76|                }
 1041|     76|            }).reduce(new_join).unwrap_or_default();
 1042|     76|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|     76|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|     76|                delete,
 1045|     76|                insert: Vec::new(),
 1046|     76|                using: None,
 1047|     76|                pattern: Box::new(pattern)
 1048|     76|            }])
 1049|     76|        }
 1050|     76|
 1051|     76|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|     76|            let (delete, insert) = c;
 1053|     76|            let mut delete = delete.unwrap_or_default();
 1054|     76|            let mut insert = insert.unwrap_or_default();
 1055|     76|            #[allow(clippy::shadow_same)]
 1056|     76|            let mut pattern = pattern;
 1057|     76|
 1058|     76|            let mut using = if u.is_empty() {
 1059|     76|                None
 1060|     76|            } else {
 1061|     76|                let mut default = Vec::new();
 1062|     76|                let mut named = Vec::new();
 1063|     76|                for (d, n) in u {
 1064|     76|                    if let Some(d) = d {
 1065|     76|                        default.push(d)
 1066|     76|                    }
 1067|     76|                    if let Some(n) = n {
 1068|     76|                        named.push(n)
 1069|     76|                    }
 1070|     76|                }
 1071|     76|                Some(QueryDataset { default, named: Some(named) })
 1072|     76|            };
 1073|     76|
 1074|     76|            if let Some(with) = with {
 1075|     76|                // We inject WITH everywhere
 1076|     76|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|     76|                    GroundQuadPattern {
 1078|     76|                        subject: q.subject,
 1079|     76|                        predicate: q.predicate,
 1080|     76|                        object: q.object,
 1081|     76|                        graph_name: with.clone().into()
 1082|     76|                    }
 1083|     76|                } else {
 1084|     76|                    q
 1085|     76|                }).collect();
 1086|     76|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|     76|                    QuadPattern {
 1088|     76|                        subject: q.subject,
 1089|     76|                        predicate: q.predicate,
 1090|     76|                        object: q.object,
 1091|     76|                        graph_name: with.clone().into()
 1092|     76|                    }
 1093|     76|                } else {
 1094|     76|                    q
 1095|     76|                }).collect();
 1096|     76|                if using.is_none() {
 1097|     76|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|     76|                }
 1099|     76|            }
 1100|     76|
 1101|     76|            vec![GraphUpdateOperation::DeleteInsert {
 1102|     76|                delete,
 1103|     76|                insert,
 1104|     76|                using,
 1105|     76|                pattern: Box::new(pattern)
 1106|     76|            }]
 1107|     76|        }
 1108|     76|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|     76|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|     76|            (Some(d), i)
 1111|     76|        } / i:InsertClause() {
 1112|     76|            (None, Some(i))
 1113|     76|        }
 1114|     76|        rule Modify_clear() = {
 1115|     76|            state.used_bnodes.clear();
 1116|     76|            state.currently_used_bnodes.clear();
 1117|     76|        }
 1118|     76|
 1119|     76|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|     76|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|     76|        }
 1122|     76|
 1123|     76|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|     76|
 1125|     76|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|     76|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|     76|            (Some(i), None)
 1128|     76|        }
 1129|     76|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|     76|            (None, Some(i))
 1131|     76|        }
 1132|     76|
 1133|     76|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|     76|            GraphName::DefaultGraph
 1135|     76|        } / (i("GRAPH") _)? g:iri() {
 1136|     76|            GraphName::NamedNode(g)
 1137|     76|        }
 1138|     76|
 1139|     76|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|     76|
 1141|     76|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|     76|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|     76|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|     76|            / i("ALL") { GraphTarget::AllGraphs }
 1145|     76|
 1146|     76|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|     76|
 1148|     76|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|     76|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|     76|        }
 1151|     76|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|     76|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|     76|        }
 1154|     76|
 1155|     76|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|     76|            q.into_iter().flatten().collect()
 1157|     76|        }
 1158|     76|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|     76|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|     76|        } //TODO: return iter?
 1161|     76|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|     76|
 1163|     76|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|     76|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|     76|        }
 1166|     76|
 1167|     76|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|     76|            ts.into_iter().flatten().collect()
 1169|     76|        }
 1170|     76|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|     76|
 1172|     76|        rule GroupGraphPattern() -> GraphPattern =
 1173|     76|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|     76|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|     76|        rule GroupGraphPattern_clear() = {
 1176|     76|             // We deal with blank nodes aliases rule
 1177|     76|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|     76|            state.currently_used_bnodes.clear();
 1179|     76|        }
 1180|     76|
 1181|     76|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|     76|            let mut filter: Option<Expression> = None;
 1183|     76|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|     76|            for e in b.into_iter().flatten() {
 1185|     76|                match e {
 1186|     76|                    PartialGraphPattern::Optional(p, f) => {
 1187|     76|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|     76|                    }
 1189|     76|                    #[cfg(feature = "sep-0006")]
 1190|     76|                    PartialGraphPattern::Lateral(p) => {
 1191|     76|                        let mut defined_variables = HashSet::default();
 1192|     76|                        add_defined_variables(&p, &mut defined_variables);
 1193|     76|                        let mut contains = false;
 1194|     76|                        g.on_in_scope_variable(|v| {
 1195|     76|                            if defined_variables.contains(v) {
 1196|     76|                                contains = true;
 1197|     76|                            }
 1198|     76|                        });
 1199|     76|                        if contains {
 1200|     76|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|     76|                        }
 1202|     76|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|     76|                    }
 1204|     76|                    PartialGraphPattern::Minus(p) => {
 1205|     76|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|     76|                    }
 1207|     76|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|     76|                        let mut contains = false;
 1209|     76|                        g.on_in_scope_variable(|v| {
 1210|     76|                            if *v == variable {
 1211|     76|                                contains = true;
 1212|     76|                            }
 1213|     76|                        });
 1214|     76|                        if contains {
 1215|     76|                            return Err("BIND is overriding an existing variable")
 1216|     76|                        }
 1217|     76|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|     76|                    }
 1219|     76|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|     76|                        Expression::And(Box::new(f), Box::new(expr))
 1221|     76|                    } else {
 1222|     76|                        expr
 1223|     76|                    }),
 1224|     76|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|     76|                }
 1226|     76|            }
 1227|     76|
 1228|     76|            Ok(if let Some(expr) = filter {
 1229|     76|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|     76|            } else {
 1231|     76|                g
 1232|     76|            })
 1233|     76|        }
 1234|     76|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|     76|            let mut result = vec![a];
 1236|     76|            if let Some(v) = b {
 1237|     76|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|     76|            }
 1239|     76|            result
 1240|     76|        }
 1241|     76|
 1242|     76|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|     76|            hs.into_iter().flatten().collect()
 1244|     76|        }
 1245|     76|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|     76|
 1247|     76|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|     76|
 1249|     76|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|     76|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|     76|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|     76|            } else {
 1253|     76|               PartialGraphPattern::Optional(p, None)
 1254|     76|            }
 1255|     76|        }
 1256|     76|
 1257|     76|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|     76|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|     76|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|     76|        }
 1261|     76|
 1262|     76|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|     76|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|     76|        }
 1265|     76|
 1266|     76|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|     76|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|     76|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|     76|
 1270|     76|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|     76|            PartialGraphPattern::Bind(e, v)
 1272|     76|        }
 1273|     76|
 1274|     76|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|     76|
 1276|     76|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|     76|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|     76|        }
 1279|     76|
 1280|     76|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|     76|            (vec![var], d)
 1282|     76|        }
 1283|     76|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|     76|
 1285|     76|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|     76|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|     76|                Ok((vars, vals))
 1288|     76|            } else {
 1289|     76|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|     76|            }
 1291|     76|        }
 1292|     76|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|     76|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|     76|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|     76|
 1296|     76|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|     76|            t:QuotedTripleData() {?
 1298|     76|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|     76|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|     76|            } /
 1301|     76|            i:iri() { Some(i.into()) } /
 1302|     76|            l:RDFLiteral() { Some(l.into()) } /
 1303|     76|            l:NumericLiteral() { Some(l.into()) } /
 1304|     76|            l:BooleanLiteral() { Some(l.into()) } /
 1305|     76|            i("UNDEF") { None }
 1306|     76|
 1307|     76|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|     76|            PartialGraphPattern::Minus(p)
 1309|     76|        }
 1310|     76|
 1311|     76|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|     76|            not_empty_fold(p.into_iter(), |a, b| {
 1313|     76|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|     76|            }).map(PartialGraphPattern::Other)
 1315|     76|        }
 1316|     76|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|     76|
 1318|     76|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|     76|            PartialGraphPattern::Filter(c)
 1320|     76|        }
 1321|     76|
 1322|     76|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|     76|
 1324|     76|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|     76|            Expression::FunctionCall(Function::Custom(f), a)
 1326|     76|        }
 1327|     76|
 1328|     76|        rule ArgList() -> Vec<Expression> =
 1329|     76|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|     76|            NIL() { Vec::new() }
 1331|     76|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|     76|
 1333|     76|        rule ExpressionList() -> Vec<Expression> =
 1334|     76|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|     76|            NIL() { Vec::new() }
 1336|     76|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|     76|
 1338|     76|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|     76|
 1340|     76|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|     76|            p.into_iter().flatten().collect()
 1342|     76|        }
 1343|     76|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|     76|
 1345|     76|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|     76|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|     76|                let mut patterns = po.patterns;
 1348|     76|                for (p, os) in po.focus {
 1349|     76|                    for o in os {
 1350|     76|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|     76|                    }
 1352|     76|                }
 1353|     76|                Ok(patterns)
 1354|     76|            } /
 1355|     76|            s:TriplesNode() _ po:PropertyList() {?
 1356|     76|                let mut patterns = s.patterns;
 1357|     76|                patterns.extend(po.patterns);
 1358|     76|                for (p, os) in po.focus {
 1359|     76|                    for o in os {
 1360|     76|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|     76|                    }
 1362|     76|                }
 1363|     76|                Ok(patterns)
 1364|     76|            }
 1365|     76|
 1366|     76|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|     76|            PropertyListNotEmpty() /
 1368|     76|            { FocusedTriplePattern::default() }
 1369|     76|
 1370|     76|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|     76|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|     76|                a.focus.push(b.focus);
 1373|     76|                a.patterns.extend(b.patterns);
 1374|     76|                a
 1375|     76|            })
 1376|     76|        }
 1377|     76|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|     76|            FocusedTriplePattern {
 1379|     76|                focus: (p, o.focus),
 1380|     76|                patterns: o.patterns
 1381|     76|            }
 1382|     76|        }
 1383|     76|
 1384|     76|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|     76|
 1386|     76|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|     76|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|     76|                a.focus.push(b.focus);
 1389|     76|                a.patterns.extend_from_slice(&b.patterns);
 1390|     76|                a
 1391|     76|            })
 1392|     76|        }
 1393|     76|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|     76|
 1395|     76|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|     76|            if let Some(a) = a {
 1397|     76|                let mut patterns = g.patterns;
 1398|     76|                patterns.extend(a.patterns);
 1399|     76|                FocusedTriplePattern {
 1400|     76|                    focus: AnnotatedTerm {
 1401|     76|                        term: g.focus,
 1402|     76|                        annotations: a.focus
 1403|     76|                    },
 1404|     76|                    patterns
 1405|     76|                }
 1406|     76|            } else {
 1407|     76|                FocusedTriplePattern {
 1408|     76|                    focus: AnnotatedTerm {
 1409|     76|                        term: g.focus,
 1410|     76|                        annotations: Vec::new()
 1411|     76|                    },
 1412|     76|                    patterns: g.patterns
 1413|     76|                }
 1414|     76|            }
 1415|     76|        }
 1416|     76|
 1417|     76|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|     76|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|     76|                let mut patterns = po.patterns;
 1420|     76|                for (p, os) in po.focus {
 1421|     76|                    for o in os {
 1422|     76|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|     76|                    }
 1424|     76|                }
 1425|     76|                Ok(patterns)
 1426|     76|            } /
 1427|     76|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|     76|                let mut patterns = s.patterns;
 1429|     76|                patterns.extend(po.patterns);
 1430|     76|                for (p, os) in po.focus {
 1431|     76|                    for o in os {
 1432|     76|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|     76|                    }
 1434|     76|                }
 1435|     76|                Ok(patterns)
 1436|     76|            }
 1437|     76|
 1438|     76|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|     76|            PropertyListPathNotEmpty() /
 1440|     76|            { FocusedTripleOrPathPattern::default() }
 1441|     76|
 1442|     76|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|     76|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|     76|                    focus: vec![(hp, ho.focus)],
 1445|     76|                    patterns: ho.patterns
 1446|     76|                }, |mut a, b| {
 1447|     76|                    a.focus.push(b.focus);
 1448|     76|                    a.patterns.extend(b.patterns);
 1449|     76|                    a
 1450|     76|                })
 1451|     76|        }
 1452|     76|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|     76|            c
 1454|     76|        }
 1455|     76|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|     76|            FocusedTripleOrPathPattern {
 1457|     76|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|     76|                patterns: o.patterns
 1459|     76|            }
 1460|     76|        }
 1461|     76|
 1462|     76|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|     76|            p.into()
 1464|     76|        }
 1465|     76|
 1466|     76|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|     76|            v.into()
 1468|     76|        }
 1469|     76|
 1470|     76|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|     76|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|     76|                a.focus.push(b.focus);
 1473|     76|                a.patterns.extend(b.patterns);
 1474|     76|                a
 1475|     76|            })
 1476|     76|        }
 1477|     76|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|     76|
 1479|     76|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|     76|             if let Some(a) = a {
 1481|     76|                let mut patterns = g.patterns;
 1482|     76|                patterns.extend(a.patterns);
 1483|     76|                FocusedTripleOrPathPattern {
 1484|     76|                    focus: AnnotatedTermPath {
 1485|     76|                        term: g.focus,
 1486|     76|                        annotations: a.focus
 1487|     76|                    },
 1488|     76|                    patterns
 1489|     76|                }
 1490|     76|            } else {
 1491|     76|                FocusedTripleOrPathPattern {
 1492|     76|                    focus: AnnotatedTermPath {
 1493|     76|                        term: g.focus,
 1494|     76|                        annotations: Vec::new()
 1495|     76|                    },
 1496|     76|                    patterns: g.patterns
 1497|     76|                }
 1498|     76|            }
 1499|     76|        }
 1500|     76|
 1501|     76|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|     76|
 1503|     76|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|     76|            not_empty_fold(p.into_iter(), |a, b| {
 1505|     76|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|     76|            })
 1507|     76|        }
 1508|     76|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|     76|
 1510|     76|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|     76|            not_empty_fold(p.into_iter(), |a, b| {
 1512|     76|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|     76|            })
 1514|     76|        }
 1515|     76|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|     76|
 1517|     76|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|     76|            match o {
 1519|     76|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|     76|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|     76|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|     76|                Some(_) => unreachable!(),
 1523|     76|                None => p
 1524|     76|            }
 1525|     76|        }
 1526|     76|        rule PathElt_op() -> char =
 1527|     76|            "*" { '*' } /
 1528|     76|            "+" { '+' } /
 1529|     76|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|     76|
 1531|     76|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|     76|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|     76|            PathElt()
 1534|     76|
 1535|     76|        rule PathPrimary() -> PropertyPathExpression =
 1536|     76|            v:iri() { v.into() } /
 1537|     76|            "a" { rdf::TYPE.into_owned().into() } /
 1538|     76|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|     76|            "(" _ p:Path() _ ")" { p }
 1540|     76|
 1541|     76|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|     76|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|     76|                let mut direct = Vec::new();
 1544|     76|                let mut inverse = Vec::new();
 1545|     76|                for e in p {
 1546|     76|                    match e {
 1547|     76|                        Either::Left(a) => direct.push(a),
 1548|     76|                        Either::Right(b) => inverse.push(b)
 1549|     76|                    }
 1550|     76|                }
 1551|     76|                if inverse.is_empty() {
 1552|     76|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|     76|                } else if direct.is_empty() {
 1554|     76|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|     76|                } else {
 1556|     76|                    PropertyPathExpression::Alternative(
 1557|     76|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|     76|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|     76|                    )
 1560|     76|                }
 1561|     76|            } /
 1562|     76|            p:PathOneInPropertySet() {
 1563|     76|                match p {
 1564|     76|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|     76|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|     76|                }
 1567|     76|            }
 1568|     76|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|     76|
 1570|     76|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|     76|            "^" _ v:iri() { Either::Right(v) } /
 1572|     76|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|     76|            v:iri() { Either::Left(v) } /
 1574|     76|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|     76|
 1576|     76|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|     76|
 1578|     76|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|     76|            let mut patterns = po.patterns;
 1580|     76|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|     76|            for (p, os) in po.focus {
 1582|     76|                for o in os {
 1583|     76|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|     76|                }
 1585|     76|            }
 1586|     76|            Ok(FocusedTriplePattern {
 1587|     76|                focus: bnode,
 1588|     76|                patterns
 1589|     76|            })
 1590|     76|        }
 1591|     76|
 1592|     76|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|     76|
 1594|     76|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|     76|            let mut patterns = po.patterns;
 1596|     76|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|     76|            for (p, os) in po.focus {
 1598|     76|                for o in os {
 1599|     76|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|     76|                }
 1601|     76|            }
 1602|     76|            Ok(FocusedTripleOrPathPattern {
 1603|     76|                focus: bnode,
 1604|     76|                patterns
 1605|     76|            })
 1606|     76|        }
 1607|     76|
 1608|     76|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|     76|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|     76|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|     76|            for objWithPatterns in o.into_iter().rev() {
 1612|     76|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|     76|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|     76|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|     76|                current_list_node = new_blank_node;
 1616|     76|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|     76|            }
 1618|     76|            FocusedTriplePattern {
 1619|     76|                focus: current_list_node,
 1620|     76|                patterns
 1621|     76|            }
 1622|     76|        }
 1623|     76|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|     76|
 1625|     76|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|     76|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|     76|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|     76|            for objWithPatterns in o.into_iter().rev() {
 1629|     76|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|     76|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|     76|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|     76|                current_list_node = new_blank_node;
 1633|     76|                patterns.extend(objWithPatterns.patterns);
 1634|     76|            }
 1635|     76|            FocusedTripleOrPathPattern {
 1636|     76|                focus: current_list_node,
 1637|     76|                patterns
 1638|     76|            }
 1639|     76|        }
 1640|     76|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|     76|
 1642|     76|
 1643|     76|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|     76|
 1645|     76|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|     76|
 1647|     76|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|     76|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|     76|            TriplesNode()
 1650|     76|
 1651|     76|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|     76|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|     76|            TriplesNodePath()
 1654|     76|
 1655|     76|        rule VarOrTerm() -> TermPattern =
 1656|     76|            v:Var() { v.into() } /
 1657|     76|            t:QuotedTriple() {?
 1658|     76|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|     76|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|     76|            } /
 1661|     76|            t:GraphTerm() { t.into() }
 1662|     76|
 1663|     76|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|     76|            Ok(TriplePattern {
 1665|     76|                subject: s,
 1666|     76|                predicate: p,
 1667|     76|                object: o
 1668|     76|            })
 1669|     76|        }
 1670|     76|
 1671|     76|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|     76|            Ok(GroundTriple {
 1673|     76|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|     76|                predicate: p,
 1675|     76|                object: o
 1676|     76|            })
 1677|     76|        }
 1678|     76|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|     76|
 1680|     76|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|     76|            l:RDFLiteral() { l.into() } /
 1682|     76|            l:NumericLiteral() { l.into() } /
 1683|     76|            l:BooleanLiteral() { l.into() } /
 1684|     76|            t:QuotedTripleData() {?
 1685|     76|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|     76|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|     76|            }
 1688|     76|
 1689|     76|        rule VarOrIri() -> NamedNodePattern =
 1690|     76|            v:Var() { v.into() } /
 1691|     76|            i:iri() { i.into() }
 1692|     76|
 1693|     76|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|     76|
 1695|     76|        rule GraphTerm() -> Term =
 1696|     76|            i:iri() { i.into() } /
 1697|     76|            l:RDFLiteral() { l.into() } /
 1698|     76|            l:NumericLiteral() { l.into() } /
 1699|     76|            l:BooleanLiteral() { l.into() } /
 1700|     76|            b:BlankNode() { b.into() } /
 1701|     76|            NIL() { rdf::NIL.into_owned().into() }
 1702|     76|
 1703|     76|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|     76|
 1705|     76|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|     76|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|     76|        }
 1708|     76|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|     76|
 1710|     76|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|     76|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|     76|        }
 1713|     76|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|     76|
 1715|     76|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|     76|
 1717|     76|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|     76|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|     76|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|     76|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|     76|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|     76|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|     76|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|     76|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|     76|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|     76|            Some(_) => unreachable!(),
 1727|     76|            None => a
 1728|     76|        } }
 1729|     76|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|     76|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|     76|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|     76|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|     76|
 1734|     76|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|     76|
 1736|     76|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|     76|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|     76|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|     76|            Some(_) => unreachable!(),
 1740|     76|            None => a,
 1741|     76|        } }
 1742|     76|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|     76|            (s, e)
 1744|     76|        }
 1745|     76|
 1746|     76|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|     76|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|     76|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|     76|            Some(_) => unreachable!(),
 1750|     76|            None => a
 1751|     76|        } }
 1752|     76|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|     76|            (s, e)
 1754|     76|        }
 1755|     76|
 1756|     76|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|     76|            Some("!") => Expression::Not(Box::new(e)),
 1758|     76|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|     76|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|     76|            Some(_) => unreachable!(),
 1761|     76|            None => e,
 1762|     76|        } }
 1763|     76|
 1764|     76|        rule PrimaryExpression() -> Expression =
 1765|     76|            BrackettedExpression()  /
 1766|     76|            ExprQuotedTriple() /
 1767|     76|            iriOrFunction() /
 1768|     76|            v:Var() { v.into() } /
 1769|     76|            l:RDFLiteral() { l.into() } /
 1770|     76|            l:NumericLiteral() { l.into() } /
 1771|     76|            l:BooleanLiteral() { l.into() } /
 1772|     76|            BuiltInCall()
 1773|     76|
 1774|     76|        rule ExprVarOrTerm() -> Expression =
 1775|     76|            ExprQuotedTriple() /
 1776|     76|            i:iri() { i.into() } /
 1777|     76|            l:RDFLiteral() { l.into() } /
 1778|     76|            l:NumericLiteral() { l.into() } /
 1779|     76|            l:BooleanLiteral() { l.into() } /
 1780|     76|            v:Var() { v.into() }
 1781|     76|
 1782|     76|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|     76|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|     76|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|     76|        }
 1786|     76|
 1787|     76|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|     76|
 1789|     76|        rule BuiltInCall() -> Expression =
 1790|     76|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|     76|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|     76|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|     76|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|     76|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|     76|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|     76|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|     76|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|     76|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|     76|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|     76|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|     76|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|     76|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|     76|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|     76|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|     76|            SubstringExpression() /
 1806|     76|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|     76|            StrReplaceExpression() /
 1808|     76|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|     76|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|     76|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|     76|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|     76|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|     76|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|     76|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|     76|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|     76|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|     76|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|     76|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|     76|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|     76|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|     76|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|     76|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|     76|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|     76|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|     76|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|     76|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|     76|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|     76|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|     76|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|     76|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|     76|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|     76|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|     76|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|     76|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|     76|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|     76|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|     76|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|     76|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|     76|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|     76|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|     76|            RegexExpression() /
 1842|     76|            ExistsFunc() /
 1843|     76|            NotExistsFunc() /
 1844|     76|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|     76|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|     76|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|     76|            } /
 1848|     76|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|     76|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|     76|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|     76|            } /
 1852|     76|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|     76|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|     76|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|     76|            } /
 1856|     76|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|     76|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|     76|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|     76|            } /
 1860|     76|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|     76|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|     76|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|     76|            } /
 1864|     76|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|     76|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|     76|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|     76|            }
 1868|     76|
 1869|     76|        rule RegexExpression() -> Expression =
 1870|     76|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|     76|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|     76|
 1873|     76|
 1874|     76|        rule SubstringExpression() -> Expression =
 1875|     76|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|     76|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|     76|
 1878|     76|
 1879|     76|        rule StrReplaceExpression() -> Expression =
 1880|     76|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|     76|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|     76|
 1883|     76|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|     76|
 1885|     76|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|     76|
 1887|     76|        rule Aggregate() -> AggregateExpression =
 1888|     76|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|     76|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|     76|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|     76|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|     76|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|     76|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|     76|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|     76|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|     76|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|     76|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|     76|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|     76|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|     76|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|     76|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|     76|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|     76|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|     76|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|     76|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|     76|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|     76|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|     76|
 1909|     76|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|     76|            match a {
 1911|     76|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|     76|                None => i.into()
 1913|     76|            }
 1914|     76|        }
 1915|     76|
 1916|     76|        rule RDFLiteral() -> Literal =
 1917|     76|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|     76|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|     76|            value:String() { Literal::new_simple_literal(value) }
 1920|     76|
 1921|     76|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|     76|
 1923|     76|        rule NumericLiteralUnsigned() -> Literal =
 1924|     76|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|     76|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|     76|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|     76|
 1928|     76|        rule NumericLiteralPositive() -> Literal =
 1929|     76|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|     76|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|     76|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|     76|
 1933|     76|
 1934|     76|        rule NumericLiteralNegative() -> Literal =
 1935|     76|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|     76|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|     76|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|     76|
 1939|     76|        rule BooleanLiteral() -> Literal =
 1940|     76|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|     76|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|     76|
 1943|     76|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|     76|
 1945|     76|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|     76|            NamedNode::from(i)
 1947|     76|        }
 1948|     76|
 1949|     76|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|     76|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|     76|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|     76|            } else {
 1953|     76|                Err("Prefix not found")
 1954|     76|            } }
 1955|     76|
 1956|     76|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|     76|            let node = BlankNode::new_unchecked(id);
 1958|     76|            if state.used_bnodes.contains(&node) {
 1959|     76|                Err("Already used blank node id")
 1960|     76|            } else {
 1961|     76|                state.currently_used_bnodes.insert(node.clone());
 1962|     76|                Ok(node)
 1963|     76|            }
 1964|     76|        } / ANON() { BlankNode::default() }
 1965|     76|
 1966|     76|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|     76|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|     76|        }
 1969|     76|
 1970|     76|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|     76|            ns
 1972|     76|        }
 1973|     76|
 1974|     76|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|     76|            if let Some(base) = state.namespaces.get(ns) {
 1976|     76|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|     76|                iri.push_str(base);
 1978|     76|                for chunk in local.split('\\') { // We remove \
 1979|     76|                    iri.push_str(chunk);
 1980|     76|                }
 1981|     76|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|     76|            } else {
 1983|     76|                Err("Prefix not found")
 1984|     76|            }
 1985|     76|        }
 1986|     76|
 1987|     76|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|     76|            b
 1989|     76|        }
 1990|     76|
 1991|     76|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|     76|
 1993|     76|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|     76|
 1995|     76|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|     76|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|     76|        }
 1998|     76|
 1999|     76|        rule INTEGER() = ['0'..='9']+
 2000|     76|
 2001|     76|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|     76|
 2003|     76|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|     76|
 2005|     76|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|     76|
 2007|     76|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|     76|
 2009|     76|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|     76|
 2011|     76|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|     76|
 2013|     76|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|     76|
 2015|     76|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|     76|
 2017|     76|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|     76|
 2019|     76|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|     76|             unescape_string(l)
 2021|     76|        }
 2022|     76|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|     76|
 2024|     76|
 2025|     76|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|     76|             unescape_string(l)
 2027|     76|        }
 2028|     76|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|     76|
 2030|     76|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|     76|             unescape_string(l)
 2032|     76|        }
 2033|     76|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|     76|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|     76|
 2036|     76|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|     76|             unescape_string(l)
 2038|     76|        }
 2039|     76|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|     76|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|     76|
 2042|     76|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|     76|
 2044|     76|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|     76|
 2046|     76|        rule NIL() = "(" WS()* ")"
 2047|     76|
 2048|     76|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|     76|
 2050|     76|        rule ANON() = "[" WS()* "]"
 2051|     76|
 2052|     76|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|     76|
 2054|     76|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|     76|
 2056|     76|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|     76|
 2058|     76|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|     76|
 2060|     76|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|     76|
 2062|     76|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|     76|
 2064|     76|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|     76|
 2066|     76|        rule PERCENT() = ['%'] HEX() HEX()
 2067|     76|
 2068|     76|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|     76|
 2070|     76|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|     76|
 2072|     76|        //space
 2073|     76|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|     76|
 2075|     76|        //comment
 2076|     76|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|     76|
 2078|     76|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|     76|            if input.eq_ignore_ascii_case(literal) {
 2080|     76|                Ok(())
 2081|     76|            } else {
 2082|     76|                Err(literal)
 2083|     76|            }
 2084|     76|        }
 2085|     76|    }
 2086|     76|}
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser26___parse_AdditiveExpression0B7_:
 1736|  6.89k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  2.92k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  2.60k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|      0|            Some(_) => unreachable!(),
 1740|  3.96k|            None => a,
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser32___parse_MultiplicativeExpression0B7_:
 1746|  12.5k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  5.63k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  4.92k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|      0|            Some(_) => unreachable!(),
 1750|  6.89k|            None => a
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_VerbSimple0B7_:
 1466|  9.69k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  9.69k|            v.into()
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser33___parse_GroupGraphPatternSub_item0B7_:
 1234|    960|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|    960|            let mut result = vec![a];
 1236|    960|            if let Some(v) = b {
 1237|    230|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|    730|            }
 1239|    960|            result
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_UnaryExpression0B7_:
 1756|  12.5k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  5.77k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  4.08k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  3.62k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|      0|            Some(_) => unreachable!(),
 1761|  6.75k|            None => e,
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_NumericLiteralUnsigneds0_0B7_:
 1926|  2.60k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_GroupClause00B9_:
  922|    358|            let clauses = c.into_iter().map(|(e, vo)| {
  923|    358|                if let Expression::Variable(v) = e {
  924|    307|                    v
  925|       |                } else {
  926|     51|                    let v = vo.unwrap_or_else(variable);
  927|     51|                    projections.push((e, v.clone()));
  928|     51|                    v
  929|       |                }
  930|    358|            }).collect();
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_DeleteData0B7_:
 1029|     76|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|     76|            vec![GraphUpdateOperation::DeleteData { data }]
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_WhereClause0B7_:
  916|  1.82k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  1.82k|            p
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_ObjectList00B9_:
 1387|  17.4k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  17.4k|                a.focus.push(b.focus);
 1389|  17.4k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  17.4k|                a
 1391|  17.4k|            })
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_PathNegatedPropertySet0B7_:
 1542|  1.32k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  1.32k|                let mut direct = Vec::new();
 1544|  1.32k|                let mut inverse = Vec::new();
 1545|  9.16k|                for e in p {
 1546|  7.83k|                    match e {
 1547|  1.60k|                        Either::Left(a) => direct.push(a),
 1548|  6.23k|                        Either::Right(b) => inverse.push(b)
 1549|       |                    }
 1550|       |                }
 1551|  1.32k|                if inverse.is_empty() {
 1552|    107|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  1.22k|                } else if direct.is_empty() {
 1554|    741|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|       |                } else {
 1556|    480|                    PropertyPathExpression::Alternative(
 1557|    480|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|    480|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|    480|                    )
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_Update1_silent0B7_:
  976|  2.33k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_ObjectListPath0B7_:
 1470|  11.8k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  11.8k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|       |                a.focus.push(b.focus);
 1473|       |                a.patterns.extend(b.patterns);
 1474|       |                a
 1475|  11.8k|            })
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_LateralGraphPattern0B7_:
  778|    291|parser! {
  779|    291|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|    291|    grammar parser(state: &mut ParserState) for str {
  781|    291|        pub rule QueryUnit() -> Query = Query()
  782|    291|
  783|    291|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|    291|            q
  785|    291|        }
  786|    291|
  787|    291|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|    291|
  789|    291|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|    291|
  791|    291|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|    291|            state.base_iri = Some(i)
  793|    291|        }
  794|    291|
  795|    291|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|    291|            state.namespaces.insert(ns.into(), i.into_inner());
  797|    291|        }
  798|    291|
  799|    291|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|    291|            Ok(Query::Select {
  801|    291|                dataset: d,
  802|    291|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|    291|                base_iri: state.base_iri.clone()
  804|    291|            })
  805|    291|        }
  806|    291|
  807|    291|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|    291|            build_select(s, w, g, h, o, l, v, state)
  809|    291|        }
  810|    291|
  811|    291|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|    291|            Selection {
  813|    291|                option: o,
  814|    291|                variables: v
  815|    291|            }
  816|    291|        }
  817|    291|        rule Selection_init() = {
  818|    291|            state.aggregates.push(Vec::new())
  819|    291|        }
  820|    291|        rule SelectClause_option() -> SelectionOption =
  821|    291|            i("DISTINCT") { SelectionOption::Distinct } /
  822|    291|            i("REDUCED") { SelectionOption::Reduced } /
  823|    291|            { SelectionOption::Default }
  824|    291|        rule SelectClause_variables() -> SelectionVariables =
  825|    291|            "*" { SelectionVariables::Star } /
  826|    291|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|    291|        rule SelectClause_member() -> SelectionMember =
  828|    291|            v:Var() _ { SelectionMember::Variable(v) } /
  829|    291|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|    291|
  831|    291|        rule ConstructQuery() -> Query =
  832|    291|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|    291|                Ok(Query::Construct {
  834|    291|                    template: c,
  835|    291|                    dataset: d,
  836|    291|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|    291|                    base_iri: state.base_iri.clone()
  838|    291|                })
  839|    291|            } /
  840|    291|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|    291|                Ok(Query::Construct {
  842|    291|                    template: c.clone(),
  843|    291|                    dataset: d,
  844|    291|                    pattern: build_select(
  845|    291|                        Selection::no_op(),
  846|    291|                        GraphPattern::Bgp { patterns: c },
  847|    291|                        g, h, o, l, v, state
  848|    291|                    )?,
  849|    291|                    base_iri: state.base_iri.clone()
  850|    291|                })
  851|    291|            }
  852|    291|
  853|    291|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|    291|
  855|    291|        rule DescribeQuery() -> Query =
  856|    291|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|    291|                Ok(Query::Describe {
  858|    291|                    dataset: d,
  859|    291|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|    291|                    base_iri: state.base_iri.clone()
  861|    291|                })
  862|    291|            } /
  863|    291|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|    291|                Ok(Query::Describe {
  865|    291|                    dataset: d,
  866|    291|                    pattern: build_select(Selection {
  867|    291|                        option: SelectionOption::Default,
  868|    291|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|    291|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|    291|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|    291|                        }).collect())
  872|    291|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|    291|                    base_iri: state.base_iri.clone()
  874|    291|                })
  875|    291|            }
  876|    291|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|    291|
  878|    291|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|    291|            Ok(Query::Ask {
  880|    291|                dataset: d,
  881|    291|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|    291|                base_iri: state.base_iri.clone()
  883|    291|            })
  884|    291|        }
  885|    291|
  886|    291|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|    291|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|    291|            if d.is_empty() {
  889|    291|                return None;
  890|    291|            }
  891|    291|            let mut default = Vec::new();
  892|    291|            let mut named = Vec::new();
  893|    291|            for (d, n) in d {
  894|    291|                if let Some(d) = d {
  895|    291|                    default.push(d);
  896|    291|                }
  897|    291|                if let Some(n) = n {
  898|    291|                    named.push(n);
  899|    291|                }
  900|    291|            }
  901|    291|            Some(QueryDataset {
  902|    291|                default, named: Some(named)
  903|    291|            })
  904|    291|        }
  905|    291|
  906|    291|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|    291|            (Some(s), None)
  908|    291|        }
  909|    291|
  910|    291|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|    291|            (None, Some(s))
  912|    291|        }
  913|    291|
  914|    291|        rule SourceSelector() -> NamedNode = iri()
  915|    291|
  916|    291|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|    291|            p
  918|    291|        }
  919|    291|
  920|    291|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|    291|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|    291|            let clauses = c.into_iter().map(|(e, vo)| {
  923|    291|                if let Expression::Variable(v) = e {
  924|    291|                    v
  925|    291|                } else {
  926|    291|                    let v = vo.unwrap_or_else(variable);
  927|    291|                    projections.push((e, v.clone()));
  928|    291|                    v
  929|    291|                }
  930|    291|            }).collect();
  931|    291|            (clauses, projections)
  932|    291|        }
  933|    291|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|    291|
  935|    291|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|    291|            e:BuiltInCall() { (e, None) } /
  937|    291|            e:FunctionCall() { (e, None) } /
  938|    291|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|    291|            e:Var() { (e.into(), None) }
  940|    291|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|    291|
  942|    291|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|    291|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|    291|        }
  945|    291|
  946|    291|        rule HavingCondition() -> Expression = Constraint()
  947|    291|
  948|    291|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|    291|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|    291|
  951|    291|        rule OrderCondition() -> OrderExpression =
  952|    291|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|    291|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|    291|            e: Constraint() { OrderExpression::Asc(e) } /
  955|    291|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|    291|
  957|    291|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|    291|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|    291|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|    291|
  961|    291|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|    291|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|    291|        }
  964|    291|
  965|    291|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|    291|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|    291|        }
  968|    291|
  969|    291|        rule ValuesClause() -> Option<GraphPattern> =
  970|    291|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|    291|            { None }
  972|    291|
  973|    291|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|    291|
  975|    291|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|    291|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|    291|
  978|    291|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|    291|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|    291|        }
  981|    291|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|    291|
  983|    291|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|    291|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|    291|        }
  986|    291|
  987|    291|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|    291|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|    291|        }
  990|    291|
  991|    291|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|    291|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|    291|        }
  994|    291|
  995|    291|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|    291|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|    291|            if from == to {
  998|    291|                Vec::new() // identity case
  999|    291|            } else {
 1000|    291|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|    291|                vec![copy_graph(from, to)]
 1002|    291|            }
 1003|    291|        }
 1004|    291|
 1005|    291|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|    291|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|    291|            if from == to {
 1008|    291|                Vec::new() // identity case
 1009|    291|            } else {
 1010|    291|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|    291|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|    291|            }
 1013|    291|        }
 1014|    291|
 1015|    291|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|    291|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|    291|            if from == to {
 1018|    291|                Vec::new() // identity case
 1019|    291|            } else {
 1020|    291|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|    291|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|    291|            }
 1023|    291|        }
 1024|    291|
 1025|    291|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|    291|            vec![GraphUpdateOperation::InsertData { data }]
 1027|    291|        }
 1028|    291|
 1029|    291|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|    291|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|    291|        }
 1032|    291|
 1033|    291|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|    291|            let pattern = d.iter().map(|q| {
 1035|    291|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|    291|                match &q.graph_name {
 1037|    291|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|    291|                    GraphNamePattern::DefaultGraph => bgp,
 1039|    291|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|    291|                }
 1041|    291|            }).reduce(new_join).unwrap_or_default();
 1042|    291|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|    291|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|    291|                delete,
 1045|    291|                insert: Vec::new(),
 1046|    291|                using: None,
 1047|    291|                pattern: Box::new(pattern)
 1048|    291|            }])
 1049|    291|        }
 1050|    291|
 1051|    291|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|    291|            let (delete, insert) = c;
 1053|    291|            let mut delete = delete.unwrap_or_default();
 1054|    291|            let mut insert = insert.unwrap_or_default();
 1055|    291|            #[allow(clippy::shadow_same)]
 1056|    291|            let mut pattern = pattern;
 1057|    291|
 1058|    291|            let mut using = if u.is_empty() {
 1059|    291|                None
 1060|    291|            } else {
 1061|    291|                let mut default = Vec::new();
 1062|    291|                let mut named = Vec::new();
 1063|    291|                for (d, n) in u {
 1064|    291|                    if let Some(d) = d {
 1065|    291|                        default.push(d)
 1066|    291|                    }
 1067|    291|                    if let Some(n) = n {
 1068|    291|                        named.push(n)
 1069|    291|                    }
 1070|    291|                }
 1071|    291|                Some(QueryDataset { default, named: Some(named) })
 1072|    291|            };
 1073|    291|
 1074|    291|            if let Some(with) = with {
 1075|    291|                // We inject WITH everywhere
 1076|    291|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|    291|                    GroundQuadPattern {
 1078|    291|                        subject: q.subject,
 1079|    291|                        predicate: q.predicate,
 1080|    291|                        object: q.object,
 1081|    291|                        graph_name: with.clone().into()
 1082|    291|                    }
 1083|    291|                } else {
 1084|    291|                    q
 1085|    291|                }).collect();
 1086|    291|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|    291|                    QuadPattern {
 1088|    291|                        subject: q.subject,
 1089|    291|                        predicate: q.predicate,
 1090|    291|                        object: q.object,
 1091|    291|                        graph_name: with.clone().into()
 1092|    291|                    }
 1093|    291|                } else {
 1094|    291|                    q
 1095|    291|                }).collect();
 1096|    291|                if using.is_none() {
 1097|    291|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|    291|                }
 1099|    291|            }
 1100|    291|
 1101|    291|            vec![GraphUpdateOperation::DeleteInsert {
 1102|    291|                delete,
 1103|    291|                insert,
 1104|    291|                using,
 1105|    291|                pattern: Box::new(pattern)
 1106|    291|            }]
 1107|    291|        }
 1108|    291|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|    291|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|    291|            (Some(d), i)
 1111|    291|        } / i:InsertClause() {
 1112|    291|            (None, Some(i))
 1113|    291|        }
 1114|    291|        rule Modify_clear() = {
 1115|    291|            state.used_bnodes.clear();
 1116|    291|            state.currently_used_bnodes.clear();
 1117|    291|        }
 1118|    291|
 1119|    291|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|    291|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|    291|        }
 1122|    291|
 1123|    291|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|    291|
 1125|    291|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|    291|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|    291|            (Some(i), None)
 1128|    291|        }
 1129|    291|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|    291|            (None, Some(i))
 1131|    291|        }
 1132|    291|
 1133|    291|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|    291|            GraphName::DefaultGraph
 1135|    291|        } / (i("GRAPH") _)? g:iri() {
 1136|    291|            GraphName::NamedNode(g)
 1137|    291|        }
 1138|    291|
 1139|    291|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|    291|
 1141|    291|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|    291|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|    291|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|    291|            / i("ALL") { GraphTarget::AllGraphs }
 1145|    291|
 1146|    291|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|    291|
 1148|    291|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|    291|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|    291|        }
 1151|    291|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|    291|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|    291|        }
 1154|    291|
 1155|    291|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|    291|            q.into_iter().flatten().collect()
 1157|    291|        }
 1158|    291|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|    291|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|    291|        } //TODO: return iter?
 1161|    291|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|    291|
 1163|    291|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|    291|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|    291|        }
 1166|    291|
 1167|    291|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|    291|            ts.into_iter().flatten().collect()
 1169|    291|        }
 1170|    291|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|    291|
 1172|    291|        rule GroupGraphPattern() -> GraphPattern =
 1173|    291|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|    291|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|    291|        rule GroupGraphPattern_clear() = {
 1176|    291|             // We deal with blank nodes aliases rule
 1177|    291|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|    291|            state.currently_used_bnodes.clear();
 1179|    291|        }
 1180|    291|
 1181|    291|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|    291|            let mut filter: Option<Expression> = None;
 1183|    291|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|    291|            for e in b.into_iter().flatten() {
 1185|    291|                match e {
 1186|    291|                    PartialGraphPattern::Optional(p, f) => {
 1187|    291|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|    291|                    }
 1189|    291|                    #[cfg(feature = "sep-0006")]
 1190|    291|                    PartialGraphPattern::Lateral(p) => {
 1191|    291|                        let mut defined_variables = HashSet::default();
 1192|    291|                        add_defined_variables(&p, &mut defined_variables);
 1193|    291|                        let mut contains = false;
 1194|    291|                        g.on_in_scope_variable(|v| {
 1195|    291|                            if defined_variables.contains(v) {
 1196|    291|                                contains = true;
 1197|    291|                            }
 1198|    291|                        });
 1199|    291|                        if contains {
 1200|    291|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|    291|                        }
 1202|    291|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|    291|                    }
 1204|    291|                    PartialGraphPattern::Minus(p) => {
 1205|    291|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|    291|                    }
 1207|    291|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|    291|                        let mut contains = false;
 1209|    291|                        g.on_in_scope_variable(|v| {
 1210|    291|                            if *v == variable {
 1211|    291|                                contains = true;
 1212|    291|                            }
 1213|    291|                        });
 1214|    291|                        if contains {
 1215|    291|                            return Err("BIND is overriding an existing variable")
 1216|    291|                        }
 1217|    291|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|    291|                    }
 1219|    291|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|    291|                        Expression::And(Box::new(f), Box::new(expr))
 1221|    291|                    } else {
 1222|    291|                        expr
 1223|    291|                    }),
 1224|    291|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|    291|                }
 1226|    291|            }
 1227|    291|
 1228|    291|            Ok(if let Some(expr) = filter {
 1229|    291|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|    291|            } else {
 1231|    291|                g
 1232|    291|            })
 1233|    291|        }
 1234|    291|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|    291|            let mut result = vec![a];
 1236|    291|            if let Some(v) = b {
 1237|    291|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|    291|            }
 1239|    291|            result
 1240|    291|        }
 1241|    291|
 1242|    291|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|    291|            hs.into_iter().flatten().collect()
 1244|    291|        }
 1245|    291|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|    291|
 1247|    291|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|    291|
 1249|    291|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|    291|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|    291|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|    291|            } else {
 1253|    291|               PartialGraphPattern::Optional(p, None)
 1254|    291|            }
 1255|    291|        }
 1256|    291|
 1257|    291|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|    291|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|    291|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|    291|        }
 1261|    291|
 1262|    291|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|    291|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|    291|        }
 1265|    291|
 1266|    291|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|    291|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|    291|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|    291|
 1270|    291|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|    291|            PartialGraphPattern::Bind(e, v)
 1272|    291|        }
 1273|    291|
 1274|    291|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|    291|
 1276|    291|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|    291|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|    291|        }
 1279|    291|
 1280|    291|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|    291|            (vec![var], d)
 1282|    291|        }
 1283|    291|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|    291|
 1285|    291|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|    291|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|    291|                Ok((vars, vals))
 1288|    291|            } else {
 1289|    291|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|    291|            }
 1291|    291|        }
 1292|    291|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|    291|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|    291|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|    291|
 1296|    291|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|    291|            t:QuotedTripleData() {?
 1298|    291|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|    291|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|    291|            } /
 1301|    291|            i:iri() { Some(i.into()) } /
 1302|    291|            l:RDFLiteral() { Some(l.into()) } /
 1303|    291|            l:NumericLiteral() { Some(l.into()) } /
 1304|    291|            l:BooleanLiteral() { Some(l.into()) } /
 1305|    291|            i("UNDEF") { None }
 1306|    291|
 1307|    291|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|    291|            PartialGraphPattern::Minus(p)
 1309|    291|        }
 1310|    291|
 1311|    291|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|    291|            not_empty_fold(p.into_iter(), |a, b| {
 1313|    291|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|    291|            }).map(PartialGraphPattern::Other)
 1315|    291|        }
 1316|    291|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|    291|
 1318|    291|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|    291|            PartialGraphPattern::Filter(c)
 1320|    291|        }
 1321|    291|
 1322|    291|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|    291|
 1324|    291|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|    291|            Expression::FunctionCall(Function::Custom(f), a)
 1326|    291|        }
 1327|    291|
 1328|    291|        rule ArgList() -> Vec<Expression> =
 1329|    291|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|    291|            NIL() { Vec::new() }
 1331|    291|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|    291|
 1333|    291|        rule ExpressionList() -> Vec<Expression> =
 1334|    291|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|    291|            NIL() { Vec::new() }
 1336|    291|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|    291|
 1338|    291|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|    291|
 1340|    291|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|    291|            p.into_iter().flatten().collect()
 1342|    291|        }
 1343|    291|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|    291|
 1345|    291|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|    291|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|    291|                let mut patterns = po.patterns;
 1348|    291|                for (p, os) in po.focus {
 1349|    291|                    for o in os {
 1350|    291|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|    291|                    }
 1352|    291|                }
 1353|    291|                Ok(patterns)
 1354|    291|            } /
 1355|    291|            s:TriplesNode() _ po:PropertyList() {?
 1356|    291|                let mut patterns = s.patterns;
 1357|    291|                patterns.extend(po.patterns);
 1358|    291|                for (p, os) in po.focus {
 1359|    291|                    for o in os {
 1360|    291|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|    291|                    }
 1362|    291|                }
 1363|    291|                Ok(patterns)
 1364|    291|            }
 1365|    291|
 1366|    291|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|    291|            PropertyListNotEmpty() /
 1368|    291|            { FocusedTriplePattern::default() }
 1369|    291|
 1370|    291|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|    291|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|    291|                a.focus.push(b.focus);
 1373|    291|                a.patterns.extend(b.patterns);
 1374|    291|                a
 1375|    291|            })
 1376|    291|        }
 1377|    291|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|    291|            FocusedTriplePattern {
 1379|    291|                focus: (p, o.focus),
 1380|    291|                patterns: o.patterns
 1381|    291|            }
 1382|    291|        }
 1383|    291|
 1384|    291|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|    291|
 1386|    291|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|    291|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|    291|                a.focus.push(b.focus);
 1389|    291|                a.patterns.extend_from_slice(&b.patterns);
 1390|    291|                a
 1391|    291|            })
 1392|    291|        }
 1393|    291|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|    291|
 1395|    291|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|    291|            if let Some(a) = a {
 1397|    291|                let mut patterns = g.patterns;
 1398|    291|                patterns.extend(a.patterns);
 1399|    291|                FocusedTriplePattern {
 1400|    291|                    focus: AnnotatedTerm {
 1401|    291|                        term: g.focus,
 1402|    291|                        annotations: a.focus
 1403|    291|                    },
 1404|    291|                    patterns
 1405|    291|                }
 1406|    291|            } else {
 1407|    291|                FocusedTriplePattern {
 1408|    291|                    focus: AnnotatedTerm {
 1409|    291|                        term: g.focus,
 1410|    291|                        annotations: Vec::new()
 1411|    291|                    },
 1412|    291|                    patterns: g.patterns
 1413|    291|                }
 1414|    291|            }
 1415|    291|        }
 1416|    291|
 1417|    291|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|    291|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|    291|                let mut patterns = po.patterns;
 1420|    291|                for (p, os) in po.focus {
 1421|    291|                    for o in os {
 1422|    291|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|    291|                    }
 1424|    291|                }
 1425|    291|                Ok(patterns)
 1426|    291|            } /
 1427|    291|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|    291|                let mut patterns = s.patterns;
 1429|    291|                patterns.extend(po.patterns);
 1430|    291|                for (p, os) in po.focus {
 1431|    291|                    for o in os {
 1432|    291|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|    291|                    }
 1434|    291|                }
 1435|    291|                Ok(patterns)
 1436|    291|            }
 1437|    291|
 1438|    291|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|    291|            PropertyListPathNotEmpty() /
 1440|    291|            { FocusedTripleOrPathPattern::default() }
 1441|    291|
 1442|    291|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|    291|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|    291|                    focus: vec![(hp, ho.focus)],
 1445|    291|                    patterns: ho.patterns
 1446|    291|                }, |mut a, b| {
 1447|    291|                    a.focus.push(b.focus);
 1448|    291|                    a.patterns.extend(b.patterns);
 1449|    291|                    a
 1450|    291|                })
 1451|    291|        }
 1452|    291|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|    291|            c
 1454|    291|        }
 1455|    291|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|    291|            FocusedTripleOrPathPattern {
 1457|    291|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|    291|                patterns: o.patterns
 1459|    291|            }
 1460|    291|        }
 1461|    291|
 1462|    291|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|    291|            p.into()
 1464|    291|        }
 1465|    291|
 1466|    291|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|    291|            v.into()
 1468|    291|        }
 1469|    291|
 1470|    291|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|    291|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|    291|                a.focus.push(b.focus);
 1473|    291|                a.patterns.extend(b.patterns);
 1474|    291|                a
 1475|    291|            })
 1476|    291|        }
 1477|    291|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|    291|
 1479|    291|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|    291|             if let Some(a) = a {
 1481|    291|                let mut patterns = g.patterns;
 1482|    291|                patterns.extend(a.patterns);
 1483|    291|                FocusedTripleOrPathPattern {
 1484|    291|                    focus: AnnotatedTermPath {
 1485|    291|                        term: g.focus,
 1486|    291|                        annotations: a.focus
 1487|    291|                    },
 1488|    291|                    patterns
 1489|    291|                }
 1490|    291|            } else {
 1491|    291|                FocusedTripleOrPathPattern {
 1492|    291|                    focus: AnnotatedTermPath {
 1493|    291|                        term: g.focus,
 1494|    291|                        annotations: Vec::new()
 1495|    291|                    },
 1496|    291|                    patterns: g.patterns
 1497|    291|                }
 1498|    291|            }
 1499|    291|        }
 1500|    291|
 1501|    291|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|    291|
 1503|    291|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|    291|            not_empty_fold(p.into_iter(), |a, b| {
 1505|    291|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|    291|            })
 1507|    291|        }
 1508|    291|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|    291|
 1510|    291|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|    291|            not_empty_fold(p.into_iter(), |a, b| {
 1512|    291|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|    291|            })
 1514|    291|        }
 1515|    291|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|    291|
 1517|    291|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|    291|            match o {
 1519|    291|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|    291|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|    291|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|    291|                Some(_) => unreachable!(),
 1523|    291|                None => p
 1524|    291|            }
 1525|    291|        }
 1526|    291|        rule PathElt_op() -> char =
 1527|    291|            "*" { '*' } /
 1528|    291|            "+" { '+' } /
 1529|    291|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|    291|
 1531|    291|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|    291|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|    291|            PathElt()
 1534|    291|
 1535|    291|        rule PathPrimary() -> PropertyPathExpression =
 1536|    291|            v:iri() { v.into() } /
 1537|    291|            "a" { rdf::TYPE.into_owned().into() } /
 1538|    291|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|    291|            "(" _ p:Path() _ ")" { p }
 1540|    291|
 1541|    291|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|    291|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|    291|                let mut direct = Vec::new();
 1544|    291|                let mut inverse = Vec::new();
 1545|    291|                for e in p {
 1546|    291|                    match e {
 1547|    291|                        Either::Left(a) => direct.push(a),
 1548|    291|                        Either::Right(b) => inverse.push(b)
 1549|    291|                    }
 1550|    291|                }
 1551|    291|                if inverse.is_empty() {
 1552|    291|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|    291|                } else if direct.is_empty() {
 1554|    291|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|    291|                } else {
 1556|    291|                    PropertyPathExpression::Alternative(
 1557|    291|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|    291|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|    291|                    )
 1560|    291|                }
 1561|    291|            } /
 1562|    291|            p:PathOneInPropertySet() {
 1563|    291|                match p {
 1564|    291|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|    291|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|    291|                }
 1567|    291|            }
 1568|    291|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|    291|
 1570|    291|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|    291|            "^" _ v:iri() { Either::Right(v) } /
 1572|    291|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|    291|            v:iri() { Either::Left(v) } /
 1574|    291|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|    291|
 1576|    291|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|    291|
 1578|    291|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|    291|            let mut patterns = po.patterns;
 1580|    291|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|    291|            for (p, os) in po.focus {
 1582|    291|                for o in os {
 1583|    291|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|    291|                }
 1585|    291|            }
 1586|    291|            Ok(FocusedTriplePattern {
 1587|    291|                focus: bnode,
 1588|    291|                patterns
 1589|    291|            })
 1590|    291|        }
 1591|    291|
 1592|    291|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|    291|
 1594|    291|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|    291|            let mut patterns = po.patterns;
 1596|    291|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|    291|            for (p, os) in po.focus {
 1598|    291|                for o in os {
 1599|    291|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|    291|                }
 1601|    291|            }
 1602|    291|            Ok(FocusedTripleOrPathPattern {
 1603|    291|                focus: bnode,
 1604|    291|                patterns
 1605|    291|            })
 1606|    291|        }
 1607|    291|
 1608|    291|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|    291|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|    291|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|    291|            for objWithPatterns in o.into_iter().rev() {
 1612|    291|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|    291|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|    291|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|    291|                current_list_node = new_blank_node;
 1616|    291|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|    291|            }
 1618|    291|            FocusedTriplePattern {
 1619|    291|                focus: current_list_node,
 1620|    291|                patterns
 1621|    291|            }
 1622|    291|        }
 1623|    291|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|    291|
 1625|    291|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|    291|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|    291|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|    291|            for objWithPatterns in o.into_iter().rev() {
 1629|    291|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|    291|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|    291|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|    291|                current_list_node = new_blank_node;
 1633|    291|                patterns.extend(objWithPatterns.patterns);
 1634|    291|            }
 1635|    291|            FocusedTripleOrPathPattern {
 1636|    291|                focus: current_list_node,
 1637|    291|                patterns
 1638|    291|            }
 1639|    291|        }
 1640|    291|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|    291|
 1642|    291|
 1643|    291|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|    291|
 1645|    291|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|    291|
 1647|    291|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|    291|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|    291|            TriplesNode()
 1650|    291|
 1651|    291|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|    291|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|    291|            TriplesNodePath()
 1654|    291|
 1655|    291|        rule VarOrTerm() -> TermPattern =
 1656|    291|            v:Var() { v.into() } /
 1657|    291|            t:QuotedTriple() {?
 1658|    291|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|    291|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|    291|            } /
 1661|    291|            t:GraphTerm() { t.into() }
 1662|    291|
 1663|    291|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|    291|            Ok(TriplePattern {
 1665|    291|                subject: s,
 1666|    291|                predicate: p,
 1667|    291|                object: o
 1668|    291|            })
 1669|    291|        }
 1670|    291|
 1671|    291|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|    291|            Ok(GroundTriple {
 1673|    291|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|    291|                predicate: p,
 1675|    291|                object: o
 1676|    291|            })
 1677|    291|        }
 1678|    291|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|    291|
 1680|    291|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|    291|            l:RDFLiteral() { l.into() } /
 1682|    291|            l:NumericLiteral() { l.into() } /
 1683|    291|            l:BooleanLiteral() { l.into() } /
 1684|    291|            t:QuotedTripleData() {?
 1685|    291|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|    291|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|    291|            }
 1688|    291|
 1689|    291|        rule VarOrIri() -> NamedNodePattern =
 1690|    291|            v:Var() { v.into() } /
 1691|    291|            i:iri() { i.into() }
 1692|    291|
 1693|    291|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|    291|
 1695|    291|        rule GraphTerm() -> Term =
 1696|    291|            i:iri() { i.into() } /
 1697|    291|            l:RDFLiteral() { l.into() } /
 1698|    291|            l:NumericLiteral() { l.into() } /
 1699|    291|            l:BooleanLiteral() { l.into() } /
 1700|    291|            b:BlankNode() { b.into() } /
 1701|    291|            NIL() { rdf::NIL.into_owned().into() }
 1702|    291|
 1703|    291|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|    291|
 1705|    291|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|    291|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|    291|        }
 1708|    291|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|    291|
 1710|    291|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|    291|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|    291|        }
 1713|    291|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|    291|
 1715|    291|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|    291|
 1717|    291|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|    291|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|    291|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|    291|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|    291|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|    291|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|    291|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|    291|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|    291|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|    291|            Some(_) => unreachable!(),
 1727|    291|            None => a
 1728|    291|        } }
 1729|    291|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|    291|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|    291|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|    291|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|    291|
 1734|    291|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|    291|
 1736|    291|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|    291|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|    291|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|    291|            Some(_) => unreachable!(),
 1740|    291|            None => a,
 1741|    291|        } }
 1742|    291|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|    291|            (s, e)
 1744|    291|        }
 1745|    291|
 1746|    291|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|    291|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|    291|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|    291|            Some(_) => unreachable!(),
 1750|    291|            None => a
 1751|    291|        } }
 1752|    291|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|    291|            (s, e)
 1754|    291|        }
 1755|    291|
 1756|    291|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|    291|            Some("!") => Expression::Not(Box::new(e)),
 1758|    291|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|    291|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|    291|            Some(_) => unreachable!(),
 1761|    291|            None => e,
 1762|    291|        } }
 1763|    291|
 1764|    291|        rule PrimaryExpression() -> Expression =
 1765|    291|            BrackettedExpression()  /
 1766|    291|            ExprQuotedTriple() /
 1767|    291|            iriOrFunction() /
 1768|    291|            v:Var() { v.into() } /
 1769|    291|            l:RDFLiteral() { l.into() } /
 1770|    291|            l:NumericLiteral() { l.into() } /
 1771|    291|            l:BooleanLiteral() { l.into() } /
 1772|    291|            BuiltInCall()
 1773|    291|
 1774|    291|        rule ExprVarOrTerm() -> Expression =
 1775|    291|            ExprQuotedTriple() /
 1776|    291|            i:iri() { i.into() } /
 1777|    291|            l:RDFLiteral() { l.into() } /
 1778|    291|            l:NumericLiteral() { l.into() } /
 1779|    291|            l:BooleanLiteral() { l.into() } /
 1780|    291|            v:Var() { v.into() }
 1781|    291|
 1782|    291|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|    291|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|    291|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|    291|        }
 1786|    291|
 1787|    291|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|    291|
 1789|    291|        rule BuiltInCall() -> Expression =
 1790|    291|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|    291|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|    291|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|    291|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|    291|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|    291|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|    291|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|    291|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|    291|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|    291|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|    291|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|    291|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|    291|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|    291|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|    291|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|    291|            SubstringExpression() /
 1806|    291|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|    291|            StrReplaceExpression() /
 1808|    291|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|    291|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|    291|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|    291|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|    291|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|    291|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|    291|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|    291|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|    291|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|    291|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|    291|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|    291|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|    291|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|    291|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|    291|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|    291|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|    291|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|    291|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|    291|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|    291|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|    291|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|    291|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|    291|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|    291|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|    291|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|    291|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|    291|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|    291|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|    291|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|    291|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|    291|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|    291|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|    291|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|    291|            RegexExpression() /
 1842|    291|            ExistsFunc() /
 1843|    291|            NotExistsFunc() /
 1844|    291|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|    291|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|    291|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|    291|            } /
 1848|    291|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|    291|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|    291|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|    291|            } /
 1852|    291|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|    291|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|    291|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|    291|            } /
 1856|    291|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|    291|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|    291|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|    291|            } /
 1860|    291|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|    291|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|    291|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|    291|            } /
 1864|    291|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|    291|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|    291|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|    291|            }
 1868|    291|
 1869|    291|        rule RegexExpression() -> Expression =
 1870|    291|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|    291|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|    291|
 1873|    291|
 1874|    291|        rule SubstringExpression() -> Expression =
 1875|    291|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|    291|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|    291|
 1878|    291|
 1879|    291|        rule StrReplaceExpression() -> Expression =
 1880|    291|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|    291|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|    291|
 1883|    291|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|    291|
 1885|    291|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|    291|
 1887|    291|        rule Aggregate() -> AggregateExpression =
 1888|    291|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|    291|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|    291|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|    291|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|    291|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|    291|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|    291|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|    291|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|    291|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|    291|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|    291|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|    291|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|    291|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|    291|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|    291|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|    291|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|    291|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|    291|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|    291|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|    291|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|    291|
 1909|    291|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|    291|            match a {
 1911|    291|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|    291|                None => i.into()
 1913|    291|            }
 1914|    291|        }
 1915|    291|
 1916|    291|        rule RDFLiteral() -> Literal =
 1917|    291|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|    291|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|    291|            value:String() { Literal::new_simple_literal(value) }
 1920|    291|
 1921|    291|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|    291|
 1923|    291|        rule NumericLiteralUnsigned() -> Literal =
 1924|    291|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|    291|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|    291|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|    291|
 1928|    291|        rule NumericLiteralPositive() -> Literal =
 1929|    291|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|    291|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|    291|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|    291|
 1933|    291|
 1934|    291|        rule NumericLiteralNegative() -> Literal =
 1935|    291|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|    291|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|    291|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|    291|
 1939|    291|        rule BooleanLiteral() -> Literal =
 1940|    291|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|    291|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|    291|
 1943|    291|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|    291|
 1945|    291|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|    291|            NamedNode::from(i)
 1947|    291|        }
 1948|    291|
 1949|    291|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|    291|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|    291|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|    291|            } else {
 1953|    291|                Err("Prefix not found")
 1954|    291|            } }
 1955|    291|
 1956|    291|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|    291|            let node = BlankNode::new_unchecked(id);
 1958|    291|            if state.used_bnodes.contains(&node) {
 1959|    291|                Err("Already used blank node id")
 1960|    291|            } else {
 1961|    291|                state.currently_used_bnodes.insert(node.clone());
 1962|    291|                Ok(node)
 1963|    291|            }
 1964|    291|        } / ANON() { BlankNode::default() }
 1965|    291|
 1966|    291|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|    291|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|    291|        }
 1969|    291|
 1970|    291|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|    291|            ns
 1972|    291|        }
 1973|    291|
 1974|    291|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|    291|            if let Some(base) = state.namespaces.get(ns) {
 1976|    291|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|    291|                iri.push_str(base);
 1978|    291|                for chunk in local.split('\\') { // We remove \
 1979|    291|                    iri.push_str(chunk);
 1980|    291|                }
 1981|    291|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|    291|            } else {
 1983|    291|                Err("Prefix not found")
 1984|    291|            }
 1985|    291|        }
 1986|    291|
 1987|    291|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|    291|            b
 1989|    291|        }
 1990|    291|
 1991|    291|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|    291|
 1993|    291|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|    291|
 1995|    291|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|    291|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|    291|        }
 1998|    291|
 1999|    291|        rule INTEGER() = ['0'..='9']+
 2000|    291|
 2001|    291|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|    291|
 2003|    291|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|    291|
 2005|    291|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|    291|
 2007|    291|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|    291|
 2009|    291|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|    291|
 2011|    291|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|    291|
 2013|    291|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|    291|
 2015|    291|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|    291|
 2017|    291|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|    291|
 2019|    291|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|    291|             unescape_string(l)
 2021|    291|        }
 2022|    291|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|    291|
 2024|    291|
 2025|    291|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|    291|             unescape_string(l)
 2027|    291|        }
 2028|    291|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|    291|
 2030|    291|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|    291|             unescape_string(l)
 2032|    291|        }
 2033|    291|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|    291|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|    291|
 2036|    291|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|    291|             unescape_string(l)
 2038|    291|        }
 2039|    291|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|    291|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|    291|
 2042|    291|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|    291|
 2044|    291|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|    291|
 2046|    291|        rule NIL() = "(" WS()* ")"
 2047|    291|
 2048|    291|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|    291|
 2050|    291|        rule ANON() = "[" WS()* "]"
 2051|    291|
 2052|    291|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|    291|
 2054|    291|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|    291|
 2056|    291|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|    291|
 2058|    291|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|    291|
 2060|    291|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|    291|
 2062|    291|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|    291|
 2064|    291|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|    291|
 2066|    291|        rule PERCENT() = ['%'] HEX() HEX()
 2067|    291|
 2068|    291|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|    291|
 2070|    291|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|    291|
 2072|    291|        //space
 2073|    291|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|    291|
 2075|    291|        //comment
 2076|    291|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|    291|
 2078|    291|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|    291|            if input.eq_ignore_ascii_case(literal) {
 2080|    291|                Ok(())
 2081|    291|            } else {
 2082|    291|                Err(literal)
 2083|    291|            }
 2084|    291|        }
 2085|    291|    }
 2086|    291|}
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser9___parse_i0B7_:
  778|   326k|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|       |            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|       |                Ok((vars, vals))
 1288|       |            } else {
 1289|       |                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|       |            }
 1291|       |        }
 1292|       |        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|       |        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|       |        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|       |
 1296|       |        rule DataBlockValue() -> Option<GroundTerm> =
 1297|       |            t:QuotedTripleData() {?
 1298|       |                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|       |            } /
 1301|       |            i:iri() { Some(i.into()) } /
 1302|       |            l:RDFLiteral() { Some(l.into()) } /
 1303|       |            l:NumericLiteral() { Some(l.into()) } /
 1304|       |            l:BooleanLiteral() { Some(l.into()) } /
 1305|       |            i("UNDEF") { None }
 1306|       |
 1307|       |        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|       |            PartialGraphPattern::Minus(p)
 1309|       |        }
 1310|       |
 1311|       |        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|       |            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|       |            }).map(PartialGraphPattern::Other)
 1315|       |        }
 1316|       |        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|       |
 1318|       |        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|       |            PartialGraphPattern::Filter(c)
 1320|       |        }
 1321|       |
 1322|       |        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|       |
 1324|       |        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|       |            Expression::FunctionCall(Function::Custom(f), a)
 1326|       |        }
 1327|       |
 1328|       |        rule ArgList() -> Vec<Expression> =
 1329|       |            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|       |            NIL() { Vec::new() }
 1331|       |        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|       |
 1333|       |        rule ExpressionList() -> Vec<Expression> =
 1334|       |            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|       |            NIL() { Vec::new() }
 1336|       |        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|       |
 1338|       |        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|       |
 1340|       |        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|       |            p.into_iter().flatten().collect()
 1342|       |        }
 1343|       |        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|       |
 1345|       |        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|       |            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|       |                let mut patterns = po.patterns;
 1348|       |                for (p, os) in po.focus {
 1349|       |                    for o in os {
 1350|       |                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|       |                    }
 1352|       |                }
 1353|       |                Ok(patterns)
 1354|       |            } /
 1355|       |            s:TriplesNode() _ po:PropertyList() {?
 1356|       |                let mut patterns = s.patterns;
 1357|       |                patterns.extend(po.patterns);
 1358|       |                for (p, os) in po.focus {
 1359|       |                    for o in os {
 1360|       |                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|       |                    }
 1362|       |                }
 1363|       |                Ok(patterns)
 1364|       |            }
 1365|       |
 1366|       |        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|       |            PropertyListNotEmpty() /
 1368|       |            { FocusedTriplePattern::default() }
 1369|       |
 1370|       |        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|       |            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|       |                a.focus.push(b.focus);
 1373|       |                a.patterns.extend(b.patterns);
 1374|       |                a
 1375|       |            })
 1376|       |        }
 1377|       |        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|       |            FocusedTriplePattern {
 1379|       |                focus: (p, o.focus),
 1380|       |                patterns: o.patterns
 1381|       |            }
 1382|       |        }
 1383|       |
 1384|       |        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|       |
 1386|       |        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|       |            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|       |                a.focus.push(b.focus);
 1389|       |                a.patterns.extend_from_slice(&b.patterns);
 1390|       |                a
 1391|       |            })
 1392|       |        }
 1393|       |        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|       |
 1395|       |        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|       |            if let Some(a) = a {
 1397|       |                let mut patterns = g.patterns;
 1398|       |                patterns.extend(a.patterns);
 1399|       |                FocusedTriplePattern {
 1400|       |                    focus: AnnotatedTerm {
 1401|       |                        term: g.focus,
 1402|       |                        annotations: a.focus
 1403|       |                    },
 1404|       |                    patterns
 1405|       |                }
 1406|       |            } else {
 1407|       |                FocusedTriplePattern {
 1408|       |                    focus: AnnotatedTerm {
 1409|       |                        term: g.focus,
 1410|       |                        annotations: Vec::new()
 1411|       |                    },
 1412|       |                    patterns: g.patterns
 1413|       |                }
 1414|       |            }
 1415|       |        }
 1416|       |
 1417|       |        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|       |            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|       |                let mut patterns = po.patterns;
 1420|       |                for (p, os) in po.focus {
 1421|       |                    for o in os {
 1422|       |                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|       |                    }
 1424|       |                }
 1425|       |                Ok(patterns)
 1426|       |            } /
 1427|       |            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|       |                let mut patterns = s.patterns;
 1429|       |                patterns.extend(po.patterns);
 1430|       |                for (p, os) in po.focus {
 1431|       |                    for o in os {
 1432|       |                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|       |                    }
 1434|       |                }
 1435|       |                Ok(patterns)
 1436|       |            }
 1437|       |
 1438|       |        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|       |            PropertyListPathNotEmpty() /
 1440|       |            { FocusedTripleOrPathPattern::default() }
 1441|       |
 1442|       |        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|       |                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|       |                    focus: vec![(hp, ho.focus)],
 1445|       |                    patterns: ho.patterns
 1446|       |                }, |mut a, b| {
 1447|       |                    a.focus.push(b.focus);
 1448|       |                    a.patterns.extend(b.patterns);
 1449|       |                    a
 1450|       |                })
 1451|       |        }
 1452|       |        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|       |            c
 1454|       |        }
 1455|       |        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|       |            FocusedTripleOrPathPattern {
 1457|       |                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|       |                patterns: o.patterns
 1459|       |            }
 1460|       |        }
 1461|       |
 1462|       |        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|       |            p.into()
 1464|       |        }
 1465|       |
 1466|       |        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|       |            v.into()
 1468|       |        }
 1469|       |
 1470|       |        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|       |            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|       |                a.focus.push(b.focus);
 1473|       |                a.patterns.extend(b.patterns);
 1474|       |                a
 1475|       |            })
 1476|       |        }
 1477|       |        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|       |
 1479|       |        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|       |             if let Some(a) = a {
 1481|       |                let mut patterns = g.patterns;
 1482|       |                patterns.extend(a.patterns);
 1483|       |                FocusedTripleOrPathPattern {
 1484|       |                    focus: AnnotatedTermPath {
 1485|       |                        term: g.focus,
 1486|       |                        annotations: a.focus
 1487|       |                    },
 1488|       |                    patterns
 1489|       |                }
 1490|       |            } else {
 1491|       |                FocusedTripleOrPathPattern {
 1492|       |                    focus: AnnotatedTermPath {
 1493|       |                        term: g.focus,
 1494|       |                        annotations: Vec::new()
 1495|       |                    },
 1496|       |                    patterns: g.patterns
 1497|       |                }
 1498|       |            }
 1499|       |        }
 1500|       |
 1501|       |        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|       |
 1503|       |        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|       |            not_empty_fold(p.into_iter(), |a, b| {
 1505|       |                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|       |            })
 1507|       |        }
 1508|       |        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|       |
 1510|       |        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|       |            not_empty_fold(p.into_iter(), |a, b| {
 1512|       |                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|       |            })
 1514|       |        }
 1515|       |        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|       |
 1517|       |        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|       |            match o {
 1519|       |                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|       |                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|       |                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|       |                Some(_) => unreachable!(),
 1523|       |                None => p
 1524|       |            }
 1525|       |        }
 1526|       |        rule PathElt_op() -> char =
 1527|       |            "*" { '*' } /
 1528|       |            "+" { '+' } /
 1529|       |            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|       |
 1531|       |        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|       |            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|       |            PathElt()
 1534|       |
 1535|       |        rule PathPrimary() -> PropertyPathExpression =
 1536|       |            v:iri() { v.into() } /
 1537|       |            "a" { rdf::TYPE.into_owned().into() } /
 1538|       |            "!" _ p:PathNegatedPropertySet() { p } /
 1539|       |            "(" _ p:Path() _ ")" { p }
 1540|       |
 1541|       |        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|       |            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|       |                let mut direct = Vec::new();
 1544|       |                let mut inverse = Vec::new();
 1545|       |                for e in p {
 1546|       |                    match e {
 1547|       |                        Either::Left(a) => direct.push(a),
 1548|       |                        Either::Right(b) => inverse.push(b)
 1549|       |                    }
 1550|       |                }
 1551|       |                if inverse.is_empty() {
 1552|       |                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|       |                } else if direct.is_empty() {
 1554|       |                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|       |                } else {
 1556|       |                    PropertyPathExpression::Alternative(
 1557|       |                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|       |                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|       |                    )
 1560|       |                }
 1561|       |            } /
 1562|       |            p:PathOneInPropertySet() {
 1563|       |                match p {
 1564|       |                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|       |                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|       |                }
 1567|       |            }
 1568|       |        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|       |
 1570|       |        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|       |            "^" _ v:iri() { Either::Right(v) } /
 1572|       |            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|       |            v:iri() { Either::Left(v) } /
 1574|       |            "a" { Either::Left(rdf::TYPE.into()) }
 1575|       |
 1576|       |        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|       |
 1578|       |        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|       |            let mut patterns = po.patterns;
 1580|       |            let mut bnode = TermPattern::from(BlankNode::default());
 1581|       |            for (p, os) in po.focus {
 1582|       |                for o in os {
 1583|       |                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|       |                }
 1585|       |            }
 1586|       |            Ok(FocusedTriplePattern {
 1587|       |                focus: bnode,
 1588|       |                patterns
 1589|       |            })
 1590|       |        }
 1591|       |
 1592|       |        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|       |
 1594|       |        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|       |            let mut patterns = po.patterns;
 1596|       |            let mut bnode = TermPattern::from(BlankNode::default());
 1597|       |            for (p, os) in po.focus {
 1598|       |                for o in os {
 1599|       |                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|       |                }
 1601|       |            }
 1602|       |            Ok(FocusedTripleOrPathPattern {
 1603|       |                focus: bnode,
 1604|       |                patterns
 1605|       |            })
 1606|       |        }
 1607|       |
 1608|       |        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|       |            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|       |            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|       |            for objWithPatterns in o.into_iter().rev() {
 1612|       |                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|       |                current_list_node = new_blank_node;
 1616|       |                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|       |            }
 1618|       |            FocusedTriplePattern {
 1619|       |                focus: current_list_node,
 1620|       |                patterns
 1621|       |            }
 1622|       |        }
 1623|       |        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|       |
 1625|       |        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|       |            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|       |            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|       |            for objWithPatterns in o.into_iter().rev() {
 1629|       |                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|       |                current_list_node = new_blank_node;
 1633|       |                patterns.extend(objWithPatterns.patterns);
 1634|       |            }
 1635|       |            FocusedTripleOrPathPattern {
 1636|       |                focus: current_list_node,
 1637|       |                patterns
 1638|       |            }
 1639|       |        }
 1640|       |        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|       |
 1642|       |
 1643|       |        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|       |
 1645|       |        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|       |
 1647|       |        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|       |            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|       |            TriplesNode()
 1650|       |
 1651|       |        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|       |            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|       |            TriplesNodePath()
 1654|       |
 1655|       |        rule VarOrTerm() -> TermPattern =
 1656|       |            v:Var() { v.into() } /
 1657|       |            t:QuotedTriple() {?
 1658|       |                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|       |            } /
 1661|       |            t:GraphTerm() { t.into() }
 1662|       |
 1663|       |        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|       |            Ok(TriplePattern {
 1665|       |                subject: s,
 1666|       |                predicate: p,
 1667|       |                object: o
 1668|       |            })
 1669|       |        }
 1670|       |
 1671|       |        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|       |            Ok(GroundTriple {
 1673|       |                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|       |                predicate: p,
 1675|       |                object: o
 1676|       |            })
 1677|       |        }
 1678|       |        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|       |
 1680|       |        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|       |            l:RDFLiteral() { l.into() } /
 1682|       |            l:NumericLiteral() { l.into() } /
 1683|       |            l:BooleanLiteral() { l.into() } /
 1684|       |            t:QuotedTripleData() {?
 1685|       |                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|       |            }
 1688|       |
 1689|       |        rule VarOrIri() -> NamedNodePattern =
 1690|       |            v:Var() { v.into() } /
 1691|       |            i:iri() { i.into() }
 1692|       |
 1693|       |        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|       |
 1695|       |        rule GraphTerm() -> Term =
 1696|       |            i:iri() { i.into() } /
 1697|       |            l:RDFLiteral() { l.into() } /
 1698|       |            l:NumericLiteral() { l.into() } /
 1699|       |            l:BooleanLiteral() { l.into() } /
 1700|       |            b:BlankNode() { b.into() } /
 1701|       |            NIL() { rdf::NIL.into_owned().into() }
 1702|       |
 1703|       |        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|       |
 1705|       |        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|       |            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|       |        }
 1708|       |        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|       |
 1710|       |        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|       |        }
 1713|       |        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|       |
 1715|       |        rule ValueLogical() -> Expression = RelationalExpression()
 1716|       |
 1717|       |        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|       |            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|       |            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|       |            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|       |            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|       |            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|       |            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|       |            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|       |            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|       |            Some(_) => unreachable!(),
 1727|       |            None => a
 1728|       |        } }
 1729|       |        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|       |            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|       |            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|       |            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|       |
 1734|       |        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|       |
 1736|       |        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|       |            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|       |            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|       |            Some(_) => unreachable!(),
 1740|       |            None => a,
 1741|       |        } }
 1742|       |        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|       |            (s, e)
 1744|       |        }
 1745|       |
 1746|       |        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|       |            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|       |            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|       |            Some(_) => unreachable!(),
 1750|       |            None => a
 1751|       |        } }
 1752|       |        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|       |            (s, e)
 1754|       |        }
 1755|       |
 1756|       |        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|       |            Some("!") => Expression::Not(Box::new(e)),
 1758|       |            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|       |            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|       |            Some(_) => unreachable!(),
 1761|       |            None => e,
 1762|       |        } }
 1763|       |
 1764|       |        rule PrimaryExpression() -> Expression =
 1765|       |            BrackettedExpression()  /
 1766|       |            ExprQuotedTriple() /
 1767|       |            iriOrFunction() /
 1768|       |            v:Var() { v.into() } /
 1769|       |            l:RDFLiteral() { l.into() } /
 1770|       |            l:NumericLiteral() { l.into() } /
 1771|       |            l:BooleanLiteral() { l.into() } /
 1772|       |            BuiltInCall()
 1773|       |
 1774|       |        rule ExprVarOrTerm() -> Expression =
 1775|       |            ExprQuotedTriple() /
 1776|       |            i:iri() { i.into() } /
 1777|       |            l:RDFLiteral() { l.into() } /
 1778|       |            l:NumericLiteral() { l.into() } /
 1779|       |            l:BooleanLiteral() { l.into() } /
 1780|       |            v:Var() { v.into() }
 1781|       |
 1782|       |        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|       |            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|       |            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|       |        }
 1786|       |
 1787|       |        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|       |
 1789|       |        rule BuiltInCall() -> Expression =
 1790|       |            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|       |            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|       |            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|       |            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|       |            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|       |            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|       |            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|       |            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|       |            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|       |            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|       |            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|       |            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|       |            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|       |            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|       |            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|       |            SubstringExpression() /
 1806|       |            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|       |            StrReplaceExpression() /
 1808|       |            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|       |            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|       |            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|       |            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|       |            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|       |            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|       |            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|       |            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|       |            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|       |            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|       |            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|       |            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|       |            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|       |            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|       |            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|       |            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|       |            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|       |            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|       |            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|       |            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|       |            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|       |            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|       |            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|       |            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|       |            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|       |            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|       |            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|       |            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|       |            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|       |            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|       |            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|       |            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|       |            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|       |            RegexExpression() /
 1842|       |            ExistsFunc() /
 1843|       |            NotExistsFunc() /
 1844|       |            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|       |                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|       |            } /
 1848|       |            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|       |                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|       |            } /
 1852|       |            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|       |                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|       |            } /
 1856|       |            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|       |                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|       |            } /
 1860|       |            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|       |                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|       |            } /
 1864|       |            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|       |                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|       |                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|       |            }
 1868|       |
 1869|       |        rule RegexExpression() -> Expression =
 1870|       |            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|       |            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|       |
 1873|       |
 1874|       |        rule SubstringExpression() -> Expression =
 1875|       |            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|       |            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|       |
 1878|       |
 1879|       |        rule StrReplaceExpression() -> Expression =
 1880|       |            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|       |            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|       |
 1883|       |        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|       |
 1885|       |        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|       |
 1887|       |        rule Aggregate() -> AggregateExpression =
 1888|       |            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|       |            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|       |            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|       |            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|       |            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|       |            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|       |            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|       |            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|       |            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|       |            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|       |            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|       |            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|       |            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|       |            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|       |            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|       |            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|       |            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|       |            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|       |            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|       |            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|       |
 1909|       |        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|       |            match a {
 1911|       |                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|       |                None => i.into()
 1913|       |            }
 1914|       |        }
 1915|       |
 1916|       |        rule RDFLiteral() -> Literal =
 1917|       |            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|       |            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|       |            value:String() { Literal::new_simple_literal(value) }
 1920|       |
 1921|       |        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|       |
 1923|       |        rule NumericLiteralUnsigned() -> Literal =
 1924|       |            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|       |            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|       |            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|       |
 1928|       |        rule NumericLiteralPositive() -> Literal =
 1929|       |            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|       |            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|       |            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|       |
 1933|       |
 1934|       |        rule NumericLiteralNegative() -> Literal =
 1935|       |            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|       |            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|       |            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|       |
 1939|       |        rule BooleanLiteral() -> Literal =
 1940|       |            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|       |            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|       |
 1943|       |        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|       |
 1945|       |        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|       |            NamedNode::from(i)
 1947|       |        }
 1948|       |
 1949|       |        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|       |            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|       |                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|       |            } else {
 1953|       |                Err("Prefix not found")
 1954|       |            } }
 1955|       |
 1956|       |        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|       |            let node = BlankNode::new_unchecked(id);
 1958|       |            if state.used_bnodes.contains(&node) {
 1959|       |                Err("Already used blank node id")
 1960|       |            } else {
 1961|       |                state.currently_used_bnodes.insert(node.clone());
 1962|       |                Ok(node)
 1963|       |            }
 1964|       |        } / ANON() { BlankNode::default() }
 1965|       |
 1966|       |        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|       |            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|       |        }
 1969|       |
 1970|       |        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|       |            ns
 1972|       |        }
 1973|       |
 1974|       |        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|       |            if let Some(base) = state.namespaces.get(ns) {
 1976|       |                let mut iri = String::with_capacity(base.len() + local.len());
 1977|       |                iri.push_str(base);
 1978|       |                for chunk in local.split('\\') { // We remove \
 1979|       |                    iri.push_str(chunk);
 1980|       |                }
 1981|       |                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|       |            } else {
 1983|       |                Err("Prefix not found")
 1984|       |            }
 1985|       |        }
 1986|       |
 1987|       |        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|       |            b
 1989|       |        }
 1990|       |
 1991|       |        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|       |
 1993|       |        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|       |
 1995|       |        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|       |            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|       |        }
 1998|       |
 1999|       |        rule INTEGER() = ['0'..='9']+
 2000|       |
 2001|       |        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|       |
 2003|       |        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|       |
 2005|       |        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|       |
 2007|       |        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|       |
 2009|       |        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|       |
 2011|       |        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|       |
 2013|       |        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|       |
 2015|       |        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|       |
 2017|       |        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|       |
 2019|       |        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|       |             unescape_string(l)
 2021|       |        }
 2022|       |        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|       |
 2024|       |
 2025|       |        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|       |             unescape_string(l)
 2027|       |        }
 2028|       |        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|       |
 2030|       |        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|       |             unescape_string(l)
 2032|       |        }
 2033|       |        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|       |        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|       |
 2036|       |        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|       |             unescape_string(l)
 2038|       |        }
 2039|       |        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|       |        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|       |
 2042|       |        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|       |
 2044|       |        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|       |
 2046|       |        rule NIL() = "(" WS()* ")"
 2047|       |
 2048|       |        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|       |
 2050|       |        rule ANON() = "[" WS()* "]"
 2051|       |
 2052|       |        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|       |
 2054|       |        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|       |
 2056|       |        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|       |
 2058|       |        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|       |
 2060|       |        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|       |
 2062|       |        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|       |
 2064|       |        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|       |
 2066|       |        rule PERCENT() = ['%'] HEX() HEX()
 2067|       |
 2068|       |        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|       |
 2070|       |        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|       |
 2072|       |        //space
 2073|       |        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|       |
 2075|       |        //comment
 2076|       |        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|       |
 2078|       |        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|   326k|            if input.eq_ignore_ascii_case(literal) {
 2080|  48.6k|                Ok(())
 2081|       |            } else {
 2082|   277k|                Err(literal)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_NumericLiteralUnsigned0B7_:
 1924|    652|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_Expression0B7_:
 1703|  2.63k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser32___parse_ConditionalAndExpression00B9_:
 1711|    460|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_GroupConditions0_0B7_:
  938|      2|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_PathSequence00B9_:
 1511|  9.29k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  9.29k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  9.29k|            })
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_DataBlockValues1_0B7_:
 1303|    255|            l:NumericLiteral() { Some(l.into()) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_DeleteWhere0B7_:
  778|    366|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|    366|            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|    366|            }).reduce(new_join).unwrap_or_default();
 1042|    366|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|    366|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|    366|                delete,
 1045|    366|                insert: Vec::new(),
 1046|    366|                using: None,
 1047|    366|                pattern: Box::new(pattern)
 1048|    366|            }])
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_VarOrIris_0B7_:
 1691|  16.9k|            i:iri() { i.into() }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_GraphRef0B7_:
 1139|  1.24k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCallsG_0B7_:
 1836|      2|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_GroupCondition_item0B7_:
  933|    358|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_MinusGraphPattern0B7_:
 1307|     20|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|     20|            PartialGraphPattern::Minus(p)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCallsK_0B7_:
 1840|      3|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_GraphRefAlls1_0B7_:
 1144|    296|            / i("ALL") { GraphTarget::AllGraphs }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_PathPrimary0B7_:
 1536|  9.05k|            v:iri() { v.into() } /
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_GroupGraphPatternSub0s_0B9_:
 1209|      6|                        g.on_in_scope_variable(|v| {
 1210|      6|                            if *v == variable {
 1211|      2|                                contains = true;
 1212|      4|                            }
 1213|      6|                        });
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_OptionalGraphPattern0B7_:
 1249|    247|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|    247|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|      0|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|    247|               PartialGraphPattern::Optional(p, None)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_TriplesTemplate0B7_:
 1167|  17.2k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  17.2k|            ts.into_iter().flatten().collect()
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_Update1_silents_0B7_:
  976|    555|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_DataBlock0B7_:
 1276|    258|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|    258|            GraphPattern::Values { variables: l.0, bindings: l.1 }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_DeleteClause0B7_:
  778|  2.40k|parser! {
  779|  2.40k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  2.40k|    grammar parser(state: &mut ParserState) for str {
  781|  2.40k|        pub rule QueryUnit() -> Query = Query()
  782|  2.40k|
  783|  2.40k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  2.40k|            q
  785|  2.40k|        }
  786|  2.40k|
  787|  2.40k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  2.40k|
  789|  2.40k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  2.40k|
  791|  2.40k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  2.40k|            state.base_iri = Some(i)
  793|  2.40k|        }
  794|  2.40k|
  795|  2.40k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  2.40k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  2.40k|        }
  798|  2.40k|
  799|  2.40k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  2.40k|            Ok(Query::Select {
  801|  2.40k|                dataset: d,
  802|  2.40k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  2.40k|                base_iri: state.base_iri.clone()
  804|  2.40k|            })
  805|  2.40k|        }
  806|  2.40k|
  807|  2.40k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  2.40k|            build_select(s, w, g, h, o, l, v, state)
  809|  2.40k|        }
  810|  2.40k|
  811|  2.40k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  2.40k|            Selection {
  813|  2.40k|                option: o,
  814|  2.40k|                variables: v
  815|  2.40k|            }
  816|  2.40k|        }
  817|  2.40k|        rule Selection_init() = {
  818|  2.40k|            state.aggregates.push(Vec::new())
  819|  2.40k|        }
  820|  2.40k|        rule SelectClause_option() -> SelectionOption =
  821|  2.40k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  2.40k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  2.40k|            { SelectionOption::Default }
  824|  2.40k|        rule SelectClause_variables() -> SelectionVariables =
  825|  2.40k|            "*" { SelectionVariables::Star } /
  826|  2.40k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  2.40k|        rule SelectClause_member() -> SelectionMember =
  828|  2.40k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  2.40k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  2.40k|
  831|  2.40k|        rule ConstructQuery() -> Query =
  832|  2.40k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  2.40k|                Ok(Query::Construct {
  834|  2.40k|                    template: c,
  835|  2.40k|                    dataset: d,
  836|  2.40k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  2.40k|                    base_iri: state.base_iri.clone()
  838|  2.40k|                })
  839|  2.40k|            } /
  840|  2.40k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  2.40k|                Ok(Query::Construct {
  842|  2.40k|                    template: c.clone(),
  843|  2.40k|                    dataset: d,
  844|  2.40k|                    pattern: build_select(
  845|  2.40k|                        Selection::no_op(),
  846|  2.40k|                        GraphPattern::Bgp { patterns: c },
  847|  2.40k|                        g, h, o, l, v, state
  848|  2.40k|                    )?,
  849|  2.40k|                    base_iri: state.base_iri.clone()
  850|  2.40k|                })
  851|  2.40k|            }
  852|  2.40k|
  853|  2.40k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  2.40k|
  855|  2.40k|        rule DescribeQuery() -> Query =
  856|  2.40k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  2.40k|                Ok(Query::Describe {
  858|  2.40k|                    dataset: d,
  859|  2.40k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  2.40k|                    base_iri: state.base_iri.clone()
  861|  2.40k|                })
  862|  2.40k|            } /
  863|  2.40k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  2.40k|                Ok(Query::Describe {
  865|  2.40k|                    dataset: d,
  866|  2.40k|                    pattern: build_select(Selection {
  867|  2.40k|                        option: SelectionOption::Default,
  868|  2.40k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  2.40k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  2.40k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  2.40k|                        }).collect())
  872|  2.40k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  2.40k|                    base_iri: state.base_iri.clone()
  874|  2.40k|                })
  875|  2.40k|            }
  876|  2.40k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  2.40k|
  878|  2.40k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  2.40k|            Ok(Query::Ask {
  880|  2.40k|                dataset: d,
  881|  2.40k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  2.40k|                base_iri: state.base_iri.clone()
  883|  2.40k|            })
  884|  2.40k|        }
  885|  2.40k|
  886|  2.40k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  2.40k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  2.40k|            if d.is_empty() {
  889|  2.40k|                return None;
  890|  2.40k|            }
  891|  2.40k|            let mut default = Vec::new();
  892|  2.40k|            let mut named = Vec::new();
  893|  2.40k|            for (d, n) in d {
  894|  2.40k|                if let Some(d) = d {
  895|  2.40k|                    default.push(d);
  896|  2.40k|                }
  897|  2.40k|                if let Some(n) = n {
  898|  2.40k|                    named.push(n);
  899|  2.40k|                }
  900|  2.40k|            }
  901|  2.40k|            Some(QueryDataset {
  902|  2.40k|                default, named: Some(named)
  903|  2.40k|            })
  904|  2.40k|        }
  905|  2.40k|
  906|  2.40k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  2.40k|            (Some(s), None)
  908|  2.40k|        }
  909|  2.40k|
  910|  2.40k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  2.40k|            (None, Some(s))
  912|  2.40k|        }
  913|  2.40k|
  914|  2.40k|        rule SourceSelector() -> NamedNode = iri()
  915|  2.40k|
  916|  2.40k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  2.40k|            p
  918|  2.40k|        }
  919|  2.40k|
  920|  2.40k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  2.40k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  2.40k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  2.40k|                if let Expression::Variable(v) = e {
  924|  2.40k|                    v
  925|  2.40k|                } else {
  926|  2.40k|                    let v = vo.unwrap_or_else(variable);
  927|  2.40k|                    projections.push((e, v.clone()));
  928|  2.40k|                    v
  929|  2.40k|                }
  930|  2.40k|            }).collect();
  931|  2.40k|            (clauses, projections)
  932|  2.40k|        }
  933|  2.40k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  2.40k|
  935|  2.40k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  2.40k|            e:BuiltInCall() { (e, None) } /
  937|  2.40k|            e:FunctionCall() { (e, None) } /
  938|  2.40k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  2.40k|            e:Var() { (e.into(), None) }
  940|  2.40k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  2.40k|
  942|  2.40k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  2.40k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  2.40k|        }
  945|  2.40k|
  946|  2.40k|        rule HavingCondition() -> Expression = Constraint()
  947|  2.40k|
  948|  2.40k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  2.40k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  2.40k|
  951|  2.40k|        rule OrderCondition() -> OrderExpression =
  952|  2.40k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  2.40k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  2.40k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  2.40k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  2.40k|
  957|  2.40k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  2.40k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  2.40k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  2.40k|
  961|  2.40k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  2.40k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  2.40k|        }
  964|  2.40k|
  965|  2.40k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  2.40k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  2.40k|        }
  968|  2.40k|
  969|  2.40k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  2.40k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  2.40k|            { None }
  972|  2.40k|
  973|  2.40k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  2.40k|
  975|  2.40k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  2.40k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  2.40k|
  978|  2.40k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  2.40k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  2.40k|        }
  981|  2.40k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  2.40k|
  983|  2.40k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  2.40k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  2.40k|        }
  986|  2.40k|
  987|  2.40k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  2.40k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  2.40k|        }
  990|  2.40k|
  991|  2.40k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  2.40k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  2.40k|        }
  994|  2.40k|
  995|  2.40k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  2.40k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  2.40k|            if from == to {
  998|  2.40k|                Vec::new() // identity case
  999|  2.40k|            } else {
 1000|  2.40k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  2.40k|                vec![copy_graph(from, to)]
 1002|  2.40k|            }
 1003|  2.40k|        }
 1004|  2.40k|
 1005|  2.40k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  2.40k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  2.40k|            if from == to {
 1008|  2.40k|                Vec::new() // identity case
 1009|  2.40k|            } else {
 1010|  2.40k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  2.40k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  2.40k|            }
 1013|  2.40k|        }
 1014|  2.40k|
 1015|  2.40k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  2.40k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  2.40k|            if from == to {
 1018|  2.40k|                Vec::new() // identity case
 1019|  2.40k|            } else {
 1020|  2.40k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  2.40k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  2.40k|            }
 1023|  2.40k|        }
 1024|  2.40k|
 1025|  2.40k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  2.40k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  2.40k|        }
 1028|  2.40k|
 1029|  2.40k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  2.40k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  2.40k|        }
 1032|  2.40k|
 1033|  2.40k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  2.40k|            let pattern = d.iter().map(|q| {
 1035|  2.40k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  2.40k|                match &q.graph_name {
 1037|  2.40k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  2.40k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  2.40k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  2.40k|                }
 1041|  2.40k|            }).reduce(new_join).unwrap_or_default();
 1042|  2.40k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  2.40k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  2.40k|                delete,
 1045|  2.40k|                insert: Vec::new(),
 1046|  2.40k|                using: None,
 1047|  2.40k|                pattern: Box::new(pattern)
 1048|  2.40k|            }])
 1049|  2.40k|        }
 1050|  2.40k|
 1051|  2.40k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  2.40k|            let (delete, insert) = c;
 1053|  2.40k|            let mut delete = delete.unwrap_or_default();
 1054|  2.40k|            let mut insert = insert.unwrap_or_default();
 1055|  2.40k|            #[allow(clippy::shadow_same)]
 1056|  2.40k|            let mut pattern = pattern;
 1057|  2.40k|
 1058|  2.40k|            let mut using = if u.is_empty() {
 1059|  2.40k|                None
 1060|  2.40k|            } else {
 1061|  2.40k|                let mut default = Vec::new();
 1062|  2.40k|                let mut named = Vec::new();
 1063|  2.40k|                for (d, n) in u {
 1064|  2.40k|                    if let Some(d) = d {
 1065|  2.40k|                        default.push(d)
 1066|  2.40k|                    }
 1067|  2.40k|                    if let Some(n) = n {
 1068|  2.40k|                        named.push(n)
 1069|  2.40k|                    }
 1070|  2.40k|                }
 1071|  2.40k|                Some(QueryDataset { default, named: Some(named) })
 1072|  2.40k|            };
 1073|  2.40k|
 1074|  2.40k|            if let Some(with) = with {
 1075|  2.40k|                // We inject WITH everywhere
 1076|  2.40k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  2.40k|                    GroundQuadPattern {
 1078|  2.40k|                        subject: q.subject,
 1079|  2.40k|                        predicate: q.predicate,
 1080|  2.40k|                        object: q.object,
 1081|  2.40k|                        graph_name: with.clone().into()
 1082|  2.40k|                    }
 1083|  2.40k|                } else {
 1084|  2.40k|                    q
 1085|  2.40k|                }).collect();
 1086|  2.40k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  2.40k|                    QuadPattern {
 1088|  2.40k|                        subject: q.subject,
 1089|  2.40k|                        predicate: q.predicate,
 1090|  2.40k|                        object: q.object,
 1091|  2.40k|                        graph_name: with.clone().into()
 1092|  2.40k|                    }
 1093|  2.40k|                } else {
 1094|  2.40k|                    q
 1095|  2.40k|                }).collect();
 1096|  2.40k|                if using.is_none() {
 1097|  2.40k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  2.40k|                }
 1099|  2.40k|            }
 1100|  2.40k|
 1101|  2.40k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  2.40k|                delete,
 1103|  2.40k|                insert,
 1104|  2.40k|                using,
 1105|  2.40k|                pattern: Box::new(pattern)
 1106|  2.40k|            }]
 1107|  2.40k|        }
 1108|  2.40k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  2.40k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  2.40k|            (Some(d), i)
 1111|  2.40k|        } / i:InsertClause() {
 1112|  2.40k|            (None, Some(i))
 1113|  2.40k|        }
 1114|  2.40k|        rule Modify_clear() = {
 1115|  2.40k|            state.used_bnodes.clear();
 1116|  2.40k|            state.currently_used_bnodes.clear();
 1117|  2.40k|        }
 1118|  2.40k|
 1119|  2.40k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  2.40k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  2.40k|        }
 1122|  2.40k|
 1123|  2.40k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  2.40k|
 1125|  2.40k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  2.40k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  2.40k|            (Some(i), None)
 1128|  2.40k|        }
 1129|  2.40k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  2.40k|            (None, Some(i))
 1131|  2.40k|        }
 1132|  2.40k|
 1133|  2.40k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  2.40k|            GraphName::DefaultGraph
 1135|  2.40k|        } / (i("GRAPH") _)? g:iri() {
 1136|  2.40k|            GraphName::NamedNode(g)
 1137|  2.40k|        }
 1138|  2.40k|
 1139|  2.40k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  2.40k|
 1141|  2.40k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  2.40k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  2.40k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  2.40k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  2.40k|
 1146|  2.40k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  2.40k|
 1148|  2.40k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  2.40k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  2.40k|        }
 1151|  2.40k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  2.40k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  2.40k|        }
 1154|  2.40k|
 1155|  2.40k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  2.40k|            q.into_iter().flatten().collect()
 1157|  2.40k|        }
 1158|  2.40k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  2.40k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  2.40k|        } //TODO: return iter?
 1161|  2.40k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  2.40k|
 1163|  2.40k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  2.40k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  2.40k|        }
 1166|  2.40k|
 1167|  2.40k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  2.40k|            ts.into_iter().flatten().collect()
 1169|  2.40k|        }
 1170|  2.40k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  2.40k|
 1172|  2.40k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  2.40k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  2.40k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  2.40k|        rule GroupGraphPattern_clear() = {
 1176|  2.40k|             // We deal with blank nodes aliases rule
 1177|  2.40k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  2.40k|            state.currently_used_bnodes.clear();
 1179|  2.40k|        }
 1180|  2.40k|
 1181|  2.40k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  2.40k|            let mut filter: Option<Expression> = None;
 1183|  2.40k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  2.40k|            for e in b.into_iter().flatten() {
 1185|  2.40k|                match e {
 1186|  2.40k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  2.40k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  2.40k|                    }
 1189|  2.40k|                    #[cfg(feature = "sep-0006")]
 1190|  2.40k|                    PartialGraphPattern::Lateral(p) => {
 1191|  2.40k|                        let mut defined_variables = HashSet::default();
 1192|  2.40k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  2.40k|                        let mut contains = false;
 1194|  2.40k|                        g.on_in_scope_variable(|v| {
 1195|  2.40k|                            if defined_variables.contains(v) {
 1196|  2.40k|                                contains = true;
 1197|  2.40k|                            }
 1198|  2.40k|                        });
 1199|  2.40k|                        if contains {
 1200|  2.40k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  2.40k|                        }
 1202|  2.40k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  2.40k|                    }
 1204|  2.40k|                    PartialGraphPattern::Minus(p) => {
 1205|  2.40k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  2.40k|                    }
 1207|  2.40k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  2.40k|                        let mut contains = false;
 1209|  2.40k|                        g.on_in_scope_variable(|v| {
 1210|  2.40k|                            if *v == variable {
 1211|  2.40k|                                contains = true;
 1212|  2.40k|                            }
 1213|  2.40k|                        });
 1214|  2.40k|                        if contains {
 1215|  2.40k|                            return Err("BIND is overriding an existing variable")
 1216|  2.40k|                        }
 1217|  2.40k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  2.40k|                    }
 1219|  2.40k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  2.40k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  2.40k|                    } else {
 1222|  2.40k|                        expr
 1223|  2.40k|                    }),
 1224|  2.40k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  2.40k|                }
 1226|  2.40k|            }
 1227|  2.40k|
 1228|  2.40k|            Ok(if let Some(expr) = filter {
 1229|  2.40k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  2.40k|            } else {
 1231|  2.40k|                g
 1232|  2.40k|            })
 1233|  2.40k|        }
 1234|  2.40k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  2.40k|            let mut result = vec![a];
 1236|  2.40k|            if let Some(v) = b {
 1237|  2.40k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  2.40k|            }
 1239|  2.40k|            result
 1240|  2.40k|        }
 1241|  2.40k|
 1242|  2.40k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  2.40k|            hs.into_iter().flatten().collect()
 1244|  2.40k|        }
 1245|  2.40k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  2.40k|
 1247|  2.40k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  2.40k|
 1249|  2.40k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  2.40k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  2.40k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  2.40k|            } else {
 1253|  2.40k|               PartialGraphPattern::Optional(p, None)
 1254|  2.40k|            }
 1255|  2.40k|        }
 1256|  2.40k|
 1257|  2.40k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  2.40k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  2.40k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  2.40k|        }
 1261|  2.40k|
 1262|  2.40k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  2.40k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  2.40k|        }
 1265|  2.40k|
 1266|  2.40k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  2.40k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  2.40k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  2.40k|
 1270|  2.40k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  2.40k|            PartialGraphPattern::Bind(e, v)
 1272|  2.40k|        }
 1273|  2.40k|
 1274|  2.40k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  2.40k|
 1276|  2.40k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  2.40k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  2.40k|        }
 1279|  2.40k|
 1280|  2.40k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  2.40k|            (vec![var], d)
 1282|  2.40k|        }
 1283|  2.40k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  2.40k|
 1285|  2.40k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  2.40k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  2.40k|                Ok((vars, vals))
 1288|  2.40k|            } else {
 1289|  2.40k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  2.40k|            }
 1291|  2.40k|        }
 1292|  2.40k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  2.40k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  2.40k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  2.40k|
 1296|  2.40k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  2.40k|            t:QuotedTripleData() {?
 1298|  2.40k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  2.40k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  2.40k|            } /
 1301|  2.40k|            i:iri() { Some(i.into()) } /
 1302|  2.40k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  2.40k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  2.40k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  2.40k|            i("UNDEF") { None }
 1306|  2.40k|
 1307|  2.40k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  2.40k|            PartialGraphPattern::Minus(p)
 1309|  2.40k|        }
 1310|  2.40k|
 1311|  2.40k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  2.40k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  2.40k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  2.40k|            }).map(PartialGraphPattern::Other)
 1315|  2.40k|        }
 1316|  2.40k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  2.40k|
 1318|  2.40k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  2.40k|            PartialGraphPattern::Filter(c)
 1320|  2.40k|        }
 1321|  2.40k|
 1322|  2.40k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  2.40k|
 1324|  2.40k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  2.40k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  2.40k|        }
 1327|  2.40k|
 1328|  2.40k|        rule ArgList() -> Vec<Expression> =
 1329|  2.40k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  2.40k|            NIL() { Vec::new() }
 1331|  2.40k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  2.40k|
 1333|  2.40k|        rule ExpressionList() -> Vec<Expression> =
 1334|  2.40k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  2.40k|            NIL() { Vec::new() }
 1336|  2.40k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  2.40k|
 1338|  2.40k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  2.40k|
 1340|  2.40k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  2.40k|            p.into_iter().flatten().collect()
 1342|  2.40k|        }
 1343|  2.40k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  2.40k|
 1345|  2.40k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  2.40k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  2.40k|                let mut patterns = po.patterns;
 1348|  2.40k|                for (p, os) in po.focus {
 1349|  2.40k|                    for o in os {
 1350|  2.40k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  2.40k|                    }
 1352|  2.40k|                }
 1353|  2.40k|                Ok(patterns)
 1354|  2.40k|            } /
 1355|  2.40k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  2.40k|                let mut patterns = s.patterns;
 1357|  2.40k|                patterns.extend(po.patterns);
 1358|  2.40k|                for (p, os) in po.focus {
 1359|  2.40k|                    for o in os {
 1360|  2.40k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  2.40k|                    }
 1362|  2.40k|                }
 1363|  2.40k|                Ok(patterns)
 1364|  2.40k|            }
 1365|  2.40k|
 1366|  2.40k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  2.40k|            PropertyListNotEmpty() /
 1368|  2.40k|            { FocusedTriplePattern::default() }
 1369|  2.40k|
 1370|  2.40k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  2.40k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  2.40k|                a.focus.push(b.focus);
 1373|  2.40k|                a.patterns.extend(b.patterns);
 1374|  2.40k|                a
 1375|  2.40k|            })
 1376|  2.40k|        }
 1377|  2.40k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  2.40k|            FocusedTriplePattern {
 1379|  2.40k|                focus: (p, o.focus),
 1380|  2.40k|                patterns: o.patterns
 1381|  2.40k|            }
 1382|  2.40k|        }
 1383|  2.40k|
 1384|  2.40k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  2.40k|
 1386|  2.40k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  2.40k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  2.40k|                a.focus.push(b.focus);
 1389|  2.40k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  2.40k|                a
 1391|  2.40k|            })
 1392|  2.40k|        }
 1393|  2.40k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  2.40k|
 1395|  2.40k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  2.40k|            if let Some(a) = a {
 1397|  2.40k|                let mut patterns = g.patterns;
 1398|  2.40k|                patterns.extend(a.patterns);
 1399|  2.40k|                FocusedTriplePattern {
 1400|  2.40k|                    focus: AnnotatedTerm {
 1401|  2.40k|                        term: g.focus,
 1402|  2.40k|                        annotations: a.focus
 1403|  2.40k|                    },
 1404|  2.40k|                    patterns
 1405|  2.40k|                }
 1406|  2.40k|            } else {
 1407|  2.40k|                FocusedTriplePattern {
 1408|  2.40k|                    focus: AnnotatedTerm {
 1409|  2.40k|                        term: g.focus,
 1410|  2.40k|                        annotations: Vec::new()
 1411|  2.40k|                    },
 1412|  2.40k|                    patterns: g.patterns
 1413|  2.40k|                }
 1414|  2.40k|            }
 1415|  2.40k|        }
 1416|  2.40k|
 1417|  2.40k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  2.40k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  2.40k|                let mut patterns = po.patterns;
 1420|  2.40k|                for (p, os) in po.focus {
 1421|  2.40k|                    for o in os {
 1422|  2.40k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  2.40k|                    }
 1424|  2.40k|                }
 1425|  2.40k|                Ok(patterns)
 1426|  2.40k|            } /
 1427|  2.40k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  2.40k|                let mut patterns = s.patterns;
 1429|  2.40k|                patterns.extend(po.patterns);
 1430|  2.40k|                for (p, os) in po.focus {
 1431|  2.40k|                    for o in os {
 1432|  2.40k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  2.40k|                    }
 1434|  2.40k|                }
 1435|  2.40k|                Ok(patterns)
 1436|  2.40k|            }
 1437|  2.40k|
 1438|  2.40k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  2.40k|            PropertyListPathNotEmpty() /
 1440|  2.40k|            { FocusedTripleOrPathPattern::default() }
 1441|  2.40k|
 1442|  2.40k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  2.40k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  2.40k|                    focus: vec![(hp, ho.focus)],
 1445|  2.40k|                    patterns: ho.patterns
 1446|  2.40k|                }, |mut a, b| {
 1447|  2.40k|                    a.focus.push(b.focus);
 1448|  2.40k|                    a.patterns.extend(b.patterns);
 1449|  2.40k|                    a
 1450|  2.40k|                })
 1451|  2.40k|        }
 1452|  2.40k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  2.40k|            c
 1454|  2.40k|        }
 1455|  2.40k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  2.40k|            FocusedTripleOrPathPattern {
 1457|  2.40k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  2.40k|                patterns: o.patterns
 1459|  2.40k|            }
 1460|  2.40k|        }
 1461|  2.40k|
 1462|  2.40k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  2.40k|            p.into()
 1464|  2.40k|        }
 1465|  2.40k|
 1466|  2.40k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  2.40k|            v.into()
 1468|  2.40k|        }
 1469|  2.40k|
 1470|  2.40k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  2.40k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  2.40k|                a.focus.push(b.focus);
 1473|  2.40k|                a.patterns.extend(b.patterns);
 1474|  2.40k|                a
 1475|  2.40k|            })
 1476|  2.40k|        }
 1477|  2.40k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  2.40k|
 1479|  2.40k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  2.40k|             if let Some(a) = a {
 1481|  2.40k|                let mut patterns = g.patterns;
 1482|  2.40k|                patterns.extend(a.patterns);
 1483|  2.40k|                FocusedTripleOrPathPattern {
 1484|  2.40k|                    focus: AnnotatedTermPath {
 1485|  2.40k|                        term: g.focus,
 1486|  2.40k|                        annotations: a.focus
 1487|  2.40k|                    },
 1488|  2.40k|                    patterns
 1489|  2.40k|                }
 1490|  2.40k|            } else {
 1491|  2.40k|                FocusedTripleOrPathPattern {
 1492|  2.40k|                    focus: AnnotatedTermPath {
 1493|  2.40k|                        term: g.focus,
 1494|  2.40k|                        annotations: Vec::new()
 1495|  2.40k|                    },
 1496|  2.40k|                    patterns: g.patterns
 1497|  2.40k|                }
 1498|  2.40k|            }
 1499|  2.40k|        }
 1500|  2.40k|
 1501|  2.40k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  2.40k|
 1503|  2.40k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  2.40k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  2.40k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  2.40k|            })
 1507|  2.40k|        }
 1508|  2.40k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  2.40k|
 1510|  2.40k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  2.40k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  2.40k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  2.40k|            })
 1514|  2.40k|        }
 1515|  2.40k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  2.40k|
 1517|  2.40k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  2.40k|            match o {
 1519|  2.40k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  2.40k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  2.40k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  2.40k|                Some(_) => unreachable!(),
 1523|  2.40k|                None => p
 1524|  2.40k|            }
 1525|  2.40k|        }
 1526|  2.40k|        rule PathElt_op() -> char =
 1527|  2.40k|            "*" { '*' } /
 1528|  2.40k|            "+" { '+' } /
 1529|  2.40k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  2.40k|
 1531|  2.40k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  2.40k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  2.40k|            PathElt()
 1534|  2.40k|
 1535|  2.40k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  2.40k|            v:iri() { v.into() } /
 1537|  2.40k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  2.40k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  2.40k|            "(" _ p:Path() _ ")" { p }
 1540|  2.40k|
 1541|  2.40k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  2.40k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  2.40k|                let mut direct = Vec::new();
 1544|  2.40k|                let mut inverse = Vec::new();
 1545|  2.40k|                for e in p {
 1546|  2.40k|                    match e {
 1547|  2.40k|                        Either::Left(a) => direct.push(a),
 1548|  2.40k|                        Either::Right(b) => inverse.push(b)
 1549|  2.40k|                    }
 1550|  2.40k|                }
 1551|  2.40k|                if inverse.is_empty() {
 1552|  2.40k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  2.40k|                } else if direct.is_empty() {
 1554|  2.40k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  2.40k|                } else {
 1556|  2.40k|                    PropertyPathExpression::Alternative(
 1557|  2.40k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  2.40k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  2.40k|                    )
 1560|  2.40k|                }
 1561|  2.40k|            } /
 1562|  2.40k|            p:PathOneInPropertySet() {
 1563|  2.40k|                match p {
 1564|  2.40k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  2.40k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  2.40k|                }
 1567|  2.40k|            }
 1568|  2.40k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  2.40k|
 1570|  2.40k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  2.40k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  2.40k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  2.40k|            v:iri() { Either::Left(v) } /
 1574|  2.40k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  2.40k|
 1576|  2.40k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  2.40k|
 1578|  2.40k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  2.40k|            let mut patterns = po.patterns;
 1580|  2.40k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  2.40k|            for (p, os) in po.focus {
 1582|  2.40k|                for o in os {
 1583|  2.40k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  2.40k|                }
 1585|  2.40k|            }
 1586|  2.40k|            Ok(FocusedTriplePattern {
 1587|  2.40k|                focus: bnode,
 1588|  2.40k|                patterns
 1589|  2.40k|            })
 1590|  2.40k|        }
 1591|  2.40k|
 1592|  2.40k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  2.40k|
 1594|  2.40k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  2.40k|            let mut patterns = po.patterns;
 1596|  2.40k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  2.40k|            for (p, os) in po.focus {
 1598|  2.40k|                for o in os {
 1599|  2.40k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  2.40k|                }
 1601|  2.40k|            }
 1602|  2.40k|            Ok(FocusedTripleOrPathPattern {
 1603|  2.40k|                focus: bnode,
 1604|  2.40k|                patterns
 1605|  2.40k|            })
 1606|  2.40k|        }
 1607|  2.40k|
 1608|  2.40k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  2.40k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  2.40k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  2.40k|            for objWithPatterns in o.into_iter().rev() {
 1612|  2.40k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  2.40k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  2.40k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  2.40k|                current_list_node = new_blank_node;
 1616|  2.40k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  2.40k|            }
 1618|  2.40k|            FocusedTriplePattern {
 1619|  2.40k|                focus: current_list_node,
 1620|  2.40k|                patterns
 1621|  2.40k|            }
 1622|  2.40k|        }
 1623|  2.40k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  2.40k|
 1625|  2.40k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  2.40k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  2.40k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  2.40k|            for objWithPatterns in o.into_iter().rev() {
 1629|  2.40k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  2.40k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  2.40k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  2.40k|                current_list_node = new_blank_node;
 1633|  2.40k|                patterns.extend(objWithPatterns.patterns);
 1634|  2.40k|            }
 1635|  2.40k|            FocusedTripleOrPathPattern {
 1636|  2.40k|                focus: current_list_node,
 1637|  2.40k|                patterns
 1638|  2.40k|            }
 1639|  2.40k|        }
 1640|  2.40k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  2.40k|
 1642|  2.40k|
 1643|  2.40k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  2.40k|
 1645|  2.40k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  2.40k|
 1647|  2.40k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  2.40k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  2.40k|            TriplesNode()
 1650|  2.40k|
 1651|  2.40k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  2.40k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  2.40k|            TriplesNodePath()
 1654|  2.40k|
 1655|  2.40k|        rule VarOrTerm() -> TermPattern =
 1656|  2.40k|            v:Var() { v.into() } /
 1657|  2.40k|            t:QuotedTriple() {?
 1658|  2.40k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  2.40k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  2.40k|            } /
 1661|  2.40k|            t:GraphTerm() { t.into() }
 1662|  2.40k|
 1663|  2.40k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  2.40k|            Ok(TriplePattern {
 1665|  2.40k|                subject: s,
 1666|  2.40k|                predicate: p,
 1667|  2.40k|                object: o
 1668|  2.40k|            })
 1669|  2.40k|        }
 1670|  2.40k|
 1671|  2.40k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  2.40k|            Ok(GroundTriple {
 1673|  2.40k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  2.40k|                predicate: p,
 1675|  2.40k|                object: o
 1676|  2.40k|            })
 1677|  2.40k|        }
 1678|  2.40k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  2.40k|
 1680|  2.40k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  2.40k|            l:RDFLiteral() { l.into() } /
 1682|  2.40k|            l:NumericLiteral() { l.into() } /
 1683|  2.40k|            l:BooleanLiteral() { l.into() } /
 1684|  2.40k|            t:QuotedTripleData() {?
 1685|  2.40k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  2.40k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  2.40k|            }
 1688|  2.40k|
 1689|  2.40k|        rule VarOrIri() -> NamedNodePattern =
 1690|  2.40k|            v:Var() { v.into() } /
 1691|  2.40k|            i:iri() { i.into() }
 1692|  2.40k|
 1693|  2.40k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  2.40k|
 1695|  2.40k|        rule GraphTerm() -> Term =
 1696|  2.40k|            i:iri() { i.into() } /
 1697|  2.40k|            l:RDFLiteral() { l.into() } /
 1698|  2.40k|            l:NumericLiteral() { l.into() } /
 1699|  2.40k|            l:BooleanLiteral() { l.into() } /
 1700|  2.40k|            b:BlankNode() { b.into() } /
 1701|  2.40k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  2.40k|
 1703|  2.40k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  2.40k|
 1705|  2.40k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  2.40k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  2.40k|        }
 1708|  2.40k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  2.40k|
 1710|  2.40k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  2.40k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  2.40k|        }
 1713|  2.40k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  2.40k|
 1715|  2.40k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  2.40k|
 1717|  2.40k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  2.40k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  2.40k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  2.40k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  2.40k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  2.40k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  2.40k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  2.40k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  2.40k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  2.40k|            Some(_) => unreachable!(),
 1727|  2.40k|            None => a
 1728|  2.40k|        } }
 1729|  2.40k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  2.40k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  2.40k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  2.40k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  2.40k|
 1734|  2.40k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  2.40k|
 1736|  2.40k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  2.40k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  2.40k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  2.40k|            Some(_) => unreachable!(),
 1740|  2.40k|            None => a,
 1741|  2.40k|        } }
 1742|  2.40k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  2.40k|            (s, e)
 1744|  2.40k|        }
 1745|  2.40k|
 1746|  2.40k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  2.40k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  2.40k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  2.40k|            Some(_) => unreachable!(),
 1750|  2.40k|            None => a
 1751|  2.40k|        } }
 1752|  2.40k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  2.40k|            (s, e)
 1754|  2.40k|        }
 1755|  2.40k|
 1756|  2.40k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  2.40k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  2.40k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  2.40k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  2.40k|            Some(_) => unreachable!(),
 1761|  2.40k|            None => e,
 1762|  2.40k|        } }
 1763|  2.40k|
 1764|  2.40k|        rule PrimaryExpression() -> Expression =
 1765|  2.40k|            BrackettedExpression()  /
 1766|  2.40k|            ExprQuotedTriple() /
 1767|  2.40k|            iriOrFunction() /
 1768|  2.40k|            v:Var() { v.into() } /
 1769|  2.40k|            l:RDFLiteral() { l.into() } /
 1770|  2.40k|            l:NumericLiteral() { l.into() } /
 1771|  2.40k|            l:BooleanLiteral() { l.into() } /
 1772|  2.40k|            BuiltInCall()
 1773|  2.40k|
 1774|  2.40k|        rule ExprVarOrTerm() -> Expression =
 1775|  2.40k|            ExprQuotedTriple() /
 1776|  2.40k|            i:iri() { i.into() } /
 1777|  2.40k|            l:RDFLiteral() { l.into() } /
 1778|  2.40k|            l:NumericLiteral() { l.into() } /
 1779|  2.40k|            l:BooleanLiteral() { l.into() } /
 1780|  2.40k|            v:Var() { v.into() }
 1781|  2.40k|
 1782|  2.40k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  2.40k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  2.40k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  2.40k|        }
 1786|  2.40k|
 1787|  2.40k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  2.40k|
 1789|  2.40k|        rule BuiltInCall() -> Expression =
 1790|  2.40k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  2.40k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  2.40k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  2.40k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  2.40k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  2.40k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  2.40k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  2.40k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  2.40k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  2.40k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  2.40k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  2.40k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  2.40k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  2.40k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  2.40k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  2.40k|            SubstringExpression() /
 1806|  2.40k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  2.40k|            StrReplaceExpression() /
 1808|  2.40k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  2.40k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  2.40k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  2.40k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  2.40k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  2.40k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  2.40k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  2.40k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  2.40k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  2.40k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  2.40k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  2.40k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  2.40k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  2.40k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  2.40k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  2.40k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  2.40k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  2.40k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  2.40k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  2.40k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  2.40k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  2.40k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  2.40k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  2.40k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  2.40k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  2.40k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  2.40k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  2.40k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  2.40k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  2.40k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  2.40k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  2.40k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  2.40k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  2.40k|            RegexExpression() /
 1842|  2.40k|            ExistsFunc() /
 1843|  2.40k|            NotExistsFunc() /
 1844|  2.40k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  2.40k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  2.40k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  2.40k|            } /
 1848|  2.40k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  2.40k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  2.40k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  2.40k|            } /
 1852|  2.40k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  2.40k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  2.40k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  2.40k|            } /
 1856|  2.40k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  2.40k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  2.40k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  2.40k|            } /
 1860|  2.40k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  2.40k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  2.40k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  2.40k|            } /
 1864|  2.40k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  2.40k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  2.40k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  2.40k|            }
 1868|  2.40k|
 1869|  2.40k|        rule RegexExpression() -> Expression =
 1870|  2.40k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  2.40k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  2.40k|
 1873|  2.40k|
 1874|  2.40k|        rule SubstringExpression() -> Expression =
 1875|  2.40k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  2.40k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  2.40k|
 1878|  2.40k|
 1879|  2.40k|        rule StrReplaceExpression() -> Expression =
 1880|  2.40k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  2.40k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  2.40k|
 1883|  2.40k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  2.40k|
 1885|  2.40k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  2.40k|
 1887|  2.40k|        rule Aggregate() -> AggregateExpression =
 1888|  2.40k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  2.40k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  2.40k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  2.40k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  2.40k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  2.40k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  2.40k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  2.40k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  2.40k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  2.40k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  2.40k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  2.40k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  2.40k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  2.40k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  2.40k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  2.40k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  2.40k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  2.40k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  2.40k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  2.40k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  2.40k|
 1909|  2.40k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  2.40k|            match a {
 1911|  2.40k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  2.40k|                None => i.into()
 1913|  2.40k|            }
 1914|  2.40k|        }
 1915|  2.40k|
 1916|  2.40k|        rule RDFLiteral() -> Literal =
 1917|  2.40k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  2.40k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  2.40k|            value:String() { Literal::new_simple_literal(value) }
 1920|  2.40k|
 1921|  2.40k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  2.40k|
 1923|  2.40k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  2.40k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  2.40k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  2.40k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  2.40k|
 1928|  2.40k|        rule NumericLiteralPositive() -> Literal =
 1929|  2.40k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  2.40k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  2.40k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  2.40k|
 1933|  2.40k|
 1934|  2.40k|        rule NumericLiteralNegative() -> Literal =
 1935|  2.40k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  2.40k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  2.40k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  2.40k|
 1939|  2.40k|        rule BooleanLiteral() -> Literal =
 1940|  2.40k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  2.40k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  2.40k|
 1943|  2.40k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  2.40k|
 1945|  2.40k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  2.40k|            NamedNode::from(i)
 1947|  2.40k|        }
 1948|  2.40k|
 1949|  2.40k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  2.40k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  2.40k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  2.40k|            } else {
 1953|  2.40k|                Err("Prefix not found")
 1954|  2.40k|            } }
 1955|  2.40k|
 1956|  2.40k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  2.40k|            let node = BlankNode::new_unchecked(id);
 1958|  2.40k|            if state.used_bnodes.contains(&node) {
 1959|  2.40k|                Err("Already used blank node id")
 1960|  2.40k|            } else {
 1961|  2.40k|                state.currently_used_bnodes.insert(node.clone());
 1962|  2.40k|                Ok(node)
 1963|  2.40k|            }
 1964|  2.40k|        } / ANON() { BlankNode::default() }
 1965|  2.40k|
 1966|  2.40k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  2.40k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  2.40k|        }
 1969|  2.40k|
 1970|  2.40k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  2.40k|            ns
 1972|  2.40k|        }
 1973|  2.40k|
 1974|  2.40k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  2.40k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  2.40k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  2.40k|                iri.push_str(base);
 1978|  2.40k|                for chunk in local.split('\\') { // We remove \
 1979|  2.40k|                    iri.push_str(chunk);
 1980|  2.40k|                }
 1981|  2.40k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  2.40k|            } else {
 1983|  2.40k|                Err("Prefix not found")
 1984|  2.40k|            }
 1985|  2.40k|        }
 1986|  2.40k|
 1987|  2.40k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  2.40k|            b
 1989|  2.40k|        }
 1990|  2.40k|
 1991|  2.40k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  2.40k|
 1993|  2.40k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  2.40k|
 1995|  2.40k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  2.40k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  2.40k|        }
 1998|  2.40k|
 1999|  2.40k|        rule INTEGER() = ['0'..='9']+
 2000|  2.40k|
 2001|  2.40k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  2.40k|
 2003|  2.40k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  2.40k|
 2005|  2.40k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  2.40k|
 2007|  2.40k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  2.40k|
 2009|  2.40k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  2.40k|
 2011|  2.40k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  2.40k|
 2013|  2.40k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  2.40k|
 2015|  2.40k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  2.40k|
 2017|  2.40k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  2.40k|
 2019|  2.40k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  2.40k|             unescape_string(l)
 2021|  2.40k|        }
 2022|  2.40k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  2.40k|
 2024|  2.40k|
 2025|  2.40k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  2.40k|             unescape_string(l)
 2027|  2.40k|        }
 2028|  2.40k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  2.40k|
 2030|  2.40k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  2.40k|             unescape_string(l)
 2032|  2.40k|        }
 2033|  2.40k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  2.40k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  2.40k|
 2036|  2.40k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  2.40k|             unescape_string(l)
 2038|  2.40k|        }
 2039|  2.40k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  2.40k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  2.40k|
 2042|  2.40k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  2.40k|
 2044|  2.40k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  2.40k|
 2046|  2.40k|        rule NIL() = "(" WS()* ")"
 2047|  2.40k|
 2048|  2.40k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  2.40k|
 2050|  2.40k|        rule ANON() = "[" WS()* "]"
 2051|  2.40k|
 2052|  2.40k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  2.40k|
 2054|  2.40k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  2.40k|
 2056|  2.40k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  2.40k|
 2058|  2.40k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  2.40k|
 2060|  2.40k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  2.40k|
 2062|  2.40k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  2.40k|
 2064|  2.40k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  2.40k|
 2066|  2.40k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  2.40k|
 2068|  2.40k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  2.40k|
 2070|  2.40k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  2.40k|
 2072|  2.40k|        //space
 2073|  2.40k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  2.40k|
 2075|  2.40k|        //comment
 2076|  2.40k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  2.40k|
 2078|  2.40k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  2.40k|            if input.eq_ignore_ascii_case(literal) {
 2080|  2.40k|                Ok(())
 2081|  2.40k|            } else {
 2082|  2.40k|                Err(literal)
 2083|  2.40k|            }
 2084|  2.40k|        }
 2085|  2.40k|    }
 2086|  2.40k|}
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser24___parse_InlineDataOneVar0B7_:
 1280|     52|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|     52|            (vec![var], d)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_Move0B7_:
 1005|    769|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|    769|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|    769|            if from == to {
 1008|    552|                Vec::new() // identity case
 1009|       |            } else {
 1010|    217|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|    217|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser32___parse_GroupOrUnionGraphPattern0B7_:
  778|    133|parser! {
  779|    133|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|    133|    grammar parser(state: &mut ParserState) for str {
  781|    133|        pub rule QueryUnit() -> Query = Query()
  782|    133|
  783|    133|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|    133|            q
  785|    133|        }
  786|    133|
  787|    133|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|    133|
  789|    133|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|    133|
  791|    133|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|    133|            state.base_iri = Some(i)
  793|    133|        }
  794|    133|
  795|    133|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|    133|            state.namespaces.insert(ns.into(), i.into_inner());
  797|    133|        }
  798|    133|
  799|    133|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|    133|            Ok(Query::Select {
  801|    133|                dataset: d,
  802|    133|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|    133|                base_iri: state.base_iri.clone()
  804|    133|            })
  805|    133|        }
  806|    133|
  807|    133|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|    133|            build_select(s, w, g, h, o, l, v, state)
  809|    133|        }
  810|    133|
  811|    133|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|    133|            Selection {
  813|    133|                option: o,
  814|    133|                variables: v
  815|    133|            }
  816|    133|        }
  817|    133|        rule Selection_init() = {
  818|    133|            state.aggregates.push(Vec::new())
  819|    133|        }
  820|    133|        rule SelectClause_option() -> SelectionOption =
  821|    133|            i("DISTINCT") { SelectionOption::Distinct } /
  822|    133|            i("REDUCED") { SelectionOption::Reduced } /
  823|    133|            { SelectionOption::Default }
  824|    133|        rule SelectClause_variables() -> SelectionVariables =
  825|    133|            "*" { SelectionVariables::Star } /
  826|    133|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|    133|        rule SelectClause_member() -> SelectionMember =
  828|    133|            v:Var() _ { SelectionMember::Variable(v) } /
  829|    133|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|    133|
  831|    133|        rule ConstructQuery() -> Query =
  832|    133|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|    133|                Ok(Query::Construct {
  834|    133|                    template: c,
  835|    133|                    dataset: d,
  836|    133|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|    133|                    base_iri: state.base_iri.clone()
  838|    133|                })
  839|    133|            } /
  840|    133|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|    133|                Ok(Query::Construct {
  842|    133|                    template: c.clone(),
  843|    133|                    dataset: d,
  844|    133|                    pattern: build_select(
  845|    133|                        Selection::no_op(),
  846|    133|                        GraphPattern::Bgp { patterns: c },
  847|    133|                        g, h, o, l, v, state
  848|    133|                    )?,
  849|    133|                    base_iri: state.base_iri.clone()
  850|    133|                })
  851|    133|            }
  852|    133|
  853|    133|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|    133|
  855|    133|        rule DescribeQuery() -> Query =
  856|    133|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|    133|                Ok(Query::Describe {
  858|    133|                    dataset: d,
  859|    133|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|    133|                    base_iri: state.base_iri.clone()
  861|    133|                })
  862|    133|            } /
  863|    133|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|    133|                Ok(Query::Describe {
  865|    133|                    dataset: d,
  866|    133|                    pattern: build_select(Selection {
  867|    133|                        option: SelectionOption::Default,
  868|    133|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|    133|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|    133|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|    133|                        }).collect())
  872|    133|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|    133|                    base_iri: state.base_iri.clone()
  874|    133|                })
  875|    133|            }
  876|    133|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|    133|
  878|    133|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|    133|            Ok(Query::Ask {
  880|    133|                dataset: d,
  881|    133|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|    133|                base_iri: state.base_iri.clone()
  883|    133|            })
  884|    133|        }
  885|    133|
  886|    133|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|    133|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|    133|            if d.is_empty() {
  889|    133|                return None;
  890|    133|            }
  891|    133|            let mut default = Vec::new();
  892|    133|            let mut named = Vec::new();
  893|    133|            for (d, n) in d {
  894|    133|                if let Some(d) = d {
  895|    133|                    default.push(d);
  896|    133|                }
  897|    133|                if let Some(n) = n {
  898|    133|                    named.push(n);
  899|    133|                }
  900|    133|            }
  901|    133|            Some(QueryDataset {
  902|    133|                default, named: Some(named)
  903|    133|            })
  904|    133|        }
  905|    133|
  906|    133|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|    133|            (Some(s), None)
  908|    133|        }
  909|    133|
  910|    133|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|    133|            (None, Some(s))
  912|    133|        }
  913|    133|
  914|    133|        rule SourceSelector() -> NamedNode = iri()
  915|    133|
  916|    133|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|    133|            p
  918|    133|        }
  919|    133|
  920|    133|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|    133|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|    133|            let clauses = c.into_iter().map(|(e, vo)| {
  923|    133|                if let Expression::Variable(v) = e {
  924|    133|                    v
  925|    133|                } else {
  926|    133|                    let v = vo.unwrap_or_else(variable);
  927|    133|                    projections.push((e, v.clone()));
  928|    133|                    v
  929|    133|                }
  930|    133|            }).collect();
  931|    133|            (clauses, projections)
  932|    133|        }
  933|    133|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|    133|
  935|    133|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|    133|            e:BuiltInCall() { (e, None) } /
  937|    133|            e:FunctionCall() { (e, None) } /
  938|    133|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|    133|            e:Var() { (e.into(), None) }
  940|    133|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|    133|
  942|    133|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|    133|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|    133|        }
  945|    133|
  946|    133|        rule HavingCondition() -> Expression = Constraint()
  947|    133|
  948|    133|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|    133|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|    133|
  951|    133|        rule OrderCondition() -> OrderExpression =
  952|    133|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|    133|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|    133|            e: Constraint() { OrderExpression::Asc(e) } /
  955|    133|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|    133|
  957|    133|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|    133|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|    133|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|    133|
  961|    133|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|    133|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|    133|        }
  964|    133|
  965|    133|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|    133|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|    133|        }
  968|    133|
  969|    133|        rule ValuesClause() -> Option<GraphPattern> =
  970|    133|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|    133|            { None }
  972|    133|
  973|    133|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|    133|
  975|    133|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|    133|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|    133|
  978|    133|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|    133|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|    133|        }
  981|    133|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|    133|
  983|    133|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|    133|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|    133|        }
  986|    133|
  987|    133|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|    133|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|    133|        }
  990|    133|
  991|    133|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|    133|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|    133|        }
  994|    133|
  995|    133|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|    133|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|    133|            if from == to {
  998|    133|                Vec::new() // identity case
  999|    133|            } else {
 1000|    133|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|    133|                vec![copy_graph(from, to)]
 1002|    133|            }
 1003|    133|        }
 1004|    133|
 1005|    133|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|    133|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|    133|            if from == to {
 1008|    133|                Vec::new() // identity case
 1009|    133|            } else {
 1010|    133|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|    133|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|    133|            }
 1013|    133|        }
 1014|    133|
 1015|    133|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|    133|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|    133|            if from == to {
 1018|    133|                Vec::new() // identity case
 1019|    133|            } else {
 1020|    133|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|    133|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|    133|            }
 1023|    133|        }
 1024|    133|
 1025|    133|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|    133|            vec![GraphUpdateOperation::InsertData { data }]
 1027|    133|        }
 1028|    133|
 1029|    133|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|    133|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|    133|        }
 1032|    133|
 1033|    133|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|    133|            let pattern = d.iter().map(|q| {
 1035|    133|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|    133|                match &q.graph_name {
 1037|    133|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|    133|                    GraphNamePattern::DefaultGraph => bgp,
 1039|    133|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|    133|                }
 1041|    133|            }).reduce(new_join).unwrap_or_default();
 1042|    133|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|    133|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|    133|                delete,
 1045|    133|                insert: Vec::new(),
 1046|    133|                using: None,
 1047|    133|                pattern: Box::new(pattern)
 1048|    133|            }])
 1049|    133|        }
 1050|    133|
 1051|    133|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|    133|            let (delete, insert) = c;
 1053|    133|            let mut delete = delete.unwrap_or_default();
 1054|    133|            let mut insert = insert.unwrap_or_default();
 1055|    133|            #[allow(clippy::shadow_same)]
 1056|    133|            let mut pattern = pattern;
 1057|    133|
 1058|    133|            let mut using = if u.is_empty() {
 1059|    133|                None
 1060|    133|            } else {
 1061|    133|                let mut default = Vec::new();
 1062|    133|                let mut named = Vec::new();
 1063|    133|                for (d, n) in u {
 1064|    133|                    if let Some(d) = d {
 1065|    133|                        default.push(d)
 1066|    133|                    }
 1067|    133|                    if let Some(n) = n {
 1068|    133|                        named.push(n)
 1069|    133|                    }
 1070|    133|                }
 1071|    133|                Some(QueryDataset { default, named: Some(named) })
 1072|    133|            };
 1073|    133|
 1074|    133|            if let Some(with) = with {
 1075|    133|                // We inject WITH everywhere
 1076|    133|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|    133|                    GroundQuadPattern {
 1078|    133|                        subject: q.subject,
 1079|    133|                        predicate: q.predicate,
 1080|    133|                        object: q.object,
 1081|    133|                        graph_name: with.clone().into()
 1082|    133|                    }
 1083|    133|                } else {
 1084|    133|                    q
 1085|    133|                }).collect();
 1086|    133|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|    133|                    QuadPattern {
 1088|    133|                        subject: q.subject,
 1089|    133|                        predicate: q.predicate,
 1090|    133|                        object: q.object,
 1091|    133|                        graph_name: with.clone().into()
 1092|    133|                    }
 1093|    133|                } else {
 1094|    133|                    q
 1095|    133|                }).collect();
 1096|    133|                if using.is_none() {
 1097|    133|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|    133|                }
 1099|    133|            }
 1100|    133|
 1101|    133|            vec![GraphUpdateOperation::DeleteInsert {
 1102|    133|                delete,
 1103|    133|                insert,
 1104|    133|                using,
 1105|    133|                pattern: Box::new(pattern)
 1106|    133|            }]
 1107|    133|        }
 1108|    133|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|    133|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|    133|            (Some(d), i)
 1111|    133|        } / i:InsertClause() {
 1112|    133|            (None, Some(i))
 1113|    133|        }
 1114|    133|        rule Modify_clear() = {
 1115|    133|            state.used_bnodes.clear();
 1116|    133|            state.currently_used_bnodes.clear();
 1117|    133|        }
 1118|    133|
 1119|    133|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|    133|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|    133|        }
 1122|    133|
 1123|    133|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|    133|
 1125|    133|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|    133|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|    133|            (Some(i), None)
 1128|    133|        }
 1129|    133|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|    133|            (None, Some(i))
 1131|    133|        }
 1132|    133|
 1133|    133|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|    133|            GraphName::DefaultGraph
 1135|    133|        } / (i("GRAPH") _)? g:iri() {
 1136|    133|            GraphName::NamedNode(g)
 1137|    133|        }
 1138|    133|
 1139|    133|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|    133|
 1141|    133|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|    133|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|    133|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|    133|            / i("ALL") { GraphTarget::AllGraphs }
 1145|    133|
 1146|    133|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|    133|
 1148|    133|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|    133|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|    133|        }
 1151|    133|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|    133|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|    133|        }
 1154|    133|
 1155|    133|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|    133|            q.into_iter().flatten().collect()
 1157|    133|        }
 1158|    133|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|    133|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|    133|        } //TODO: return iter?
 1161|    133|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|    133|
 1163|    133|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|    133|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|    133|        }
 1166|    133|
 1167|    133|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|    133|            ts.into_iter().flatten().collect()
 1169|    133|        }
 1170|    133|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|    133|
 1172|    133|        rule GroupGraphPattern() -> GraphPattern =
 1173|    133|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|    133|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|    133|        rule GroupGraphPattern_clear() = {
 1176|    133|             // We deal with blank nodes aliases rule
 1177|    133|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|    133|            state.currently_used_bnodes.clear();
 1179|    133|        }
 1180|    133|
 1181|    133|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|    133|            let mut filter: Option<Expression> = None;
 1183|    133|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|    133|            for e in b.into_iter().flatten() {
 1185|    133|                match e {
 1186|    133|                    PartialGraphPattern::Optional(p, f) => {
 1187|    133|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|    133|                    }
 1189|    133|                    #[cfg(feature = "sep-0006")]
 1190|    133|                    PartialGraphPattern::Lateral(p) => {
 1191|    133|                        let mut defined_variables = HashSet::default();
 1192|    133|                        add_defined_variables(&p, &mut defined_variables);
 1193|    133|                        let mut contains = false;
 1194|    133|                        g.on_in_scope_variable(|v| {
 1195|    133|                            if defined_variables.contains(v) {
 1196|    133|                                contains = true;
 1197|    133|                            }
 1198|    133|                        });
 1199|    133|                        if contains {
 1200|    133|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|    133|                        }
 1202|    133|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|    133|                    }
 1204|    133|                    PartialGraphPattern::Minus(p) => {
 1205|    133|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|    133|                    }
 1207|    133|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|    133|                        let mut contains = false;
 1209|    133|                        g.on_in_scope_variable(|v| {
 1210|    133|                            if *v == variable {
 1211|    133|                                contains = true;
 1212|    133|                            }
 1213|    133|                        });
 1214|    133|                        if contains {
 1215|    133|                            return Err("BIND is overriding an existing variable")
 1216|    133|                        }
 1217|    133|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|    133|                    }
 1219|    133|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|    133|                        Expression::And(Box::new(f), Box::new(expr))
 1221|    133|                    } else {
 1222|    133|                        expr
 1223|    133|                    }),
 1224|    133|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|    133|                }
 1226|    133|            }
 1227|    133|
 1228|    133|            Ok(if let Some(expr) = filter {
 1229|    133|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|    133|            } else {
 1231|    133|                g
 1232|    133|            })
 1233|    133|        }
 1234|    133|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|    133|            let mut result = vec![a];
 1236|    133|            if let Some(v) = b {
 1237|    133|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|    133|            }
 1239|    133|            result
 1240|    133|        }
 1241|    133|
 1242|    133|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|    133|            hs.into_iter().flatten().collect()
 1244|    133|        }
 1245|    133|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|    133|
 1247|    133|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|    133|
 1249|    133|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|    133|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|    133|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|    133|            } else {
 1253|    133|               PartialGraphPattern::Optional(p, None)
 1254|    133|            }
 1255|    133|        }
 1256|    133|
 1257|    133|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|    133|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|    133|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|    133|        }
 1261|    133|
 1262|    133|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|    133|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|    133|        }
 1265|    133|
 1266|    133|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|    133|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|    133|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|    133|
 1270|    133|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|    133|            PartialGraphPattern::Bind(e, v)
 1272|    133|        }
 1273|    133|
 1274|    133|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|    133|
 1276|    133|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|    133|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|    133|        }
 1279|    133|
 1280|    133|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|    133|            (vec![var], d)
 1282|    133|        }
 1283|    133|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|    133|
 1285|    133|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|    133|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|    133|                Ok((vars, vals))
 1288|    133|            } else {
 1289|    133|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|    133|            }
 1291|    133|        }
 1292|    133|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|    133|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|    133|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|    133|
 1296|    133|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|    133|            t:QuotedTripleData() {?
 1298|    133|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|    133|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|    133|            } /
 1301|    133|            i:iri() { Some(i.into()) } /
 1302|    133|            l:RDFLiteral() { Some(l.into()) } /
 1303|    133|            l:NumericLiteral() { Some(l.into()) } /
 1304|    133|            l:BooleanLiteral() { Some(l.into()) } /
 1305|    133|            i("UNDEF") { None }
 1306|    133|
 1307|    133|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|    133|            PartialGraphPattern::Minus(p)
 1309|    133|        }
 1310|    133|
 1311|    133|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|    133|            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|    133|            }).map(PartialGraphPattern::Other)
 1315|    133|        }
 1316|    133|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|    133|
 1318|    133|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|    133|            PartialGraphPattern::Filter(c)
 1320|    133|        }
 1321|    133|
 1322|    133|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|    133|
 1324|    133|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|    133|            Expression::FunctionCall(Function::Custom(f), a)
 1326|    133|        }
 1327|    133|
 1328|    133|        rule ArgList() -> Vec<Expression> =
 1329|    133|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|    133|            NIL() { Vec::new() }
 1331|    133|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|    133|
 1333|    133|        rule ExpressionList() -> Vec<Expression> =
 1334|    133|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|    133|            NIL() { Vec::new() }
 1336|    133|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|    133|
 1338|    133|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|    133|
 1340|    133|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|    133|            p.into_iter().flatten().collect()
 1342|    133|        }
 1343|    133|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|    133|
 1345|    133|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|    133|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|    133|                let mut patterns = po.patterns;
 1348|    133|                for (p, os) in po.focus {
 1349|    133|                    for o in os {
 1350|    133|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|    133|                    }
 1352|    133|                }
 1353|    133|                Ok(patterns)
 1354|    133|            } /
 1355|    133|            s:TriplesNode() _ po:PropertyList() {?
 1356|    133|                let mut patterns = s.patterns;
 1357|    133|                patterns.extend(po.patterns);
 1358|    133|                for (p, os) in po.focus {
 1359|    133|                    for o in os {
 1360|    133|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|    133|                    }
 1362|    133|                }
 1363|    133|                Ok(patterns)
 1364|    133|            }
 1365|    133|
 1366|    133|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|    133|            PropertyListNotEmpty() /
 1368|    133|            { FocusedTriplePattern::default() }
 1369|    133|
 1370|    133|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|    133|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|    133|                a.focus.push(b.focus);
 1373|    133|                a.patterns.extend(b.patterns);
 1374|    133|                a
 1375|    133|            })
 1376|    133|        }
 1377|    133|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|    133|            FocusedTriplePattern {
 1379|    133|                focus: (p, o.focus),
 1380|    133|                patterns: o.patterns
 1381|    133|            }
 1382|    133|        }
 1383|    133|
 1384|    133|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|    133|
 1386|    133|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|    133|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|    133|                a.focus.push(b.focus);
 1389|    133|                a.patterns.extend_from_slice(&b.patterns);
 1390|    133|                a
 1391|    133|            })
 1392|    133|        }
 1393|    133|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|    133|
 1395|    133|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|    133|            if let Some(a) = a {
 1397|    133|                let mut patterns = g.patterns;
 1398|    133|                patterns.extend(a.patterns);
 1399|    133|                FocusedTriplePattern {
 1400|    133|                    focus: AnnotatedTerm {
 1401|    133|                        term: g.focus,
 1402|    133|                        annotations: a.focus
 1403|    133|                    },
 1404|    133|                    patterns
 1405|    133|                }
 1406|    133|            } else {
 1407|    133|                FocusedTriplePattern {
 1408|    133|                    focus: AnnotatedTerm {
 1409|    133|                        term: g.focus,
 1410|    133|                        annotations: Vec::new()
 1411|    133|                    },
 1412|    133|                    patterns: g.patterns
 1413|    133|                }
 1414|    133|            }
 1415|    133|        }
 1416|    133|
 1417|    133|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|    133|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|    133|                let mut patterns = po.patterns;
 1420|    133|                for (p, os) in po.focus {
 1421|    133|                    for o in os {
 1422|    133|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|    133|                    }
 1424|    133|                }
 1425|    133|                Ok(patterns)
 1426|    133|            } /
 1427|    133|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|    133|                let mut patterns = s.patterns;
 1429|    133|                patterns.extend(po.patterns);
 1430|    133|                for (p, os) in po.focus {
 1431|    133|                    for o in os {
 1432|    133|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|    133|                    }
 1434|    133|                }
 1435|    133|                Ok(patterns)
 1436|    133|            }
 1437|    133|
 1438|    133|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|    133|            PropertyListPathNotEmpty() /
 1440|    133|            { FocusedTripleOrPathPattern::default() }
 1441|    133|
 1442|    133|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|    133|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|    133|                    focus: vec![(hp, ho.focus)],
 1445|    133|                    patterns: ho.patterns
 1446|    133|                }, |mut a, b| {
 1447|    133|                    a.focus.push(b.focus);
 1448|    133|                    a.patterns.extend(b.patterns);
 1449|    133|                    a
 1450|    133|                })
 1451|    133|        }
 1452|    133|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|    133|            c
 1454|    133|        }
 1455|    133|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|    133|            FocusedTripleOrPathPattern {
 1457|    133|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|    133|                patterns: o.patterns
 1459|    133|            }
 1460|    133|        }
 1461|    133|
 1462|    133|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|    133|            p.into()
 1464|    133|        }
 1465|    133|
 1466|    133|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|    133|            v.into()
 1468|    133|        }
 1469|    133|
 1470|    133|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|    133|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|    133|                a.focus.push(b.focus);
 1473|    133|                a.patterns.extend(b.patterns);
 1474|    133|                a
 1475|    133|            })
 1476|    133|        }
 1477|    133|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|    133|
 1479|    133|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|    133|             if let Some(a) = a {
 1481|    133|                let mut patterns = g.patterns;
 1482|    133|                patterns.extend(a.patterns);
 1483|    133|                FocusedTripleOrPathPattern {
 1484|    133|                    focus: AnnotatedTermPath {
 1485|    133|                        term: g.focus,
 1486|    133|                        annotations: a.focus
 1487|    133|                    },
 1488|    133|                    patterns
 1489|    133|                }
 1490|    133|            } else {
 1491|    133|                FocusedTripleOrPathPattern {
 1492|    133|                    focus: AnnotatedTermPath {
 1493|    133|                        term: g.focus,
 1494|    133|                        annotations: Vec::new()
 1495|    133|                    },
 1496|    133|                    patterns: g.patterns
 1497|    133|                }
 1498|    133|            }
 1499|    133|        }
 1500|    133|
 1501|    133|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|    133|
 1503|    133|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|    133|            not_empty_fold(p.into_iter(), |a, b| {
 1505|    133|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|    133|            })
 1507|    133|        }
 1508|    133|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|    133|
 1510|    133|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|    133|            not_empty_fold(p.into_iter(), |a, b| {
 1512|    133|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|    133|            })
 1514|    133|        }
 1515|    133|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|    133|
 1517|    133|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|    133|            match o {
 1519|    133|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|    133|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|    133|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|    133|                Some(_) => unreachable!(),
 1523|    133|                None => p
 1524|    133|            }
 1525|    133|        }
 1526|    133|        rule PathElt_op() -> char =
 1527|    133|            "*" { '*' } /
 1528|    133|            "+" { '+' } /
 1529|    133|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|    133|
 1531|    133|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|    133|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|    133|            PathElt()
 1534|    133|
 1535|    133|        rule PathPrimary() -> PropertyPathExpression =
 1536|    133|            v:iri() { v.into() } /
 1537|    133|            "a" { rdf::TYPE.into_owned().into() } /
 1538|    133|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|    133|            "(" _ p:Path() _ ")" { p }
 1540|    133|
 1541|    133|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|    133|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|    133|                let mut direct = Vec::new();
 1544|    133|                let mut inverse = Vec::new();
 1545|    133|                for e in p {
 1546|    133|                    match e {
 1547|    133|                        Either::Left(a) => direct.push(a),
 1548|    133|                        Either::Right(b) => inverse.push(b)
 1549|    133|                    }
 1550|    133|                }
 1551|    133|                if inverse.is_empty() {
 1552|    133|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|    133|                } else if direct.is_empty() {
 1554|    133|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|    133|                } else {
 1556|    133|                    PropertyPathExpression::Alternative(
 1557|    133|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|    133|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|    133|                    )
 1560|    133|                }
 1561|    133|            } /
 1562|    133|            p:PathOneInPropertySet() {
 1563|    133|                match p {
 1564|    133|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|    133|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|    133|                }
 1567|    133|            }
 1568|    133|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|    133|
 1570|    133|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|    133|            "^" _ v:iri() { Either::Right(v) } /
 1572|    133|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|    133|            v:iri() { Either::Left(v) } /
 1574|    133|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|    133|
 1576|    133|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|    133|
 1578|    133|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|    133|            let mut patterns = po.patterns;
 1580|    133|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|    133|            for (p, os) in po.focus {
 1582|    133|                for o in os {
 1583|    133|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|    133|                }
 1585|    133|            }
 1586|    133|            Ok(FocusedTriplePattern {
 1587|    133|                focus: bnode,
 1588|    133|                patterns
 1589|    133|            })
 1590|    133|        }
 1591|    133|
 1592|    133|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|    133|
 1594|    133|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|    133|            let mut patterns = po.patterns;
 1596|    133|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|    133|            for (p, os) in po.focus {
 1598|    133|                for o in os {
 1599|    133|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|    133|                }
 1601|    133|            }
 1602|    133|            Ok(FocusedTripleOrPathPattern {
 1603|    133|                focus: bnode,
 1604|    133|                patterns
 1605|    133|            })
 1606|    133|        }
 1607|    133|
 1608|    133|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|    133|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|    133|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|    133|            for objWithPatterns in o.into_iter().rev() {
 1612|    133|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|    133|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|    133|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|    133|                current_list_node = new_blank_node;
 1616|    133|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|    133|            }
 1618|    133|            FocusedTriplePattern {
 1619|    133|                focus: current_list_node,
 1620|    133|                patterns
 1621|    133|            }
 1622|    133|        }
 1623|    133|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|    133|
 1625|    133|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|    133|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|    133|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|    133|            for objWithPatterns in o.into_iter().rev() {
 1629|    133|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|    133|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|    133|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|    133|                current_list_node = new_blank_node;
 1633|    133|                patterns.extend(objWithPatterns.patterns);
 1634|    133|            }
 1635|    133|            FocusedTripleOrPathPattern {
 1636|    133|                focus: current_list_node,
 1637|    133|                patterns
 1638|    133|            }
 1639|    133|        }
 1640|    133|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|    133|
 1642|    133|
 1643|    133|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|    133|
 1645|    133|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|    133|
 1647|    133|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|    133|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|    133|            TriplesNode()
 1650|    133|
 1651|    133|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|    133|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|    133|            TriplesNodePath()
 1654|    133|
 1655|    133|        rule VarOrTerm() -> TermPattern =
 1656|    133|            v:Var() { v.into() } /
 1657|    133|            t:QuotedTriple() {?
 1658|    133|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|    133|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|    133|            } /
 1661|    133|            t:GraphTerm() { t.into() }
 1662|    133|
 1663|    133|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|    133|            Ok(TriplePattern {
 1665|    133|                subject: s,
 1666|    133|                predicate: p,
 1667|    133|                object: o
 1668|    133|            })
 1669|    133|        }
 1670|    133|
 1671|    133|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|    133|            Ok(GroundTriple {
 1673|    133|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|    133|                predicate: p,
 1675|    133|                object: o
 1676|    133|            })
 1677|    133|        }
 1678|    133|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|    133|
 1680|    133|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|    133|            l:RDFLiteral() { l.into() } /
 1682|    133|            l:NumericLiteral() { l.into() } /
 1683|    133|            l:BooleanLiteral() { l.into() } /
 1684|    133|            t:QuotedTripleData() {?
 1685|    133|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|    133|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|    133|            }
 1688|    133|
 1689|    133|        rule VarOrIri() -> NamedNodePattern =
 1690|    133|            v:Var() { v.into() } /
 1691|    133|            i:iri() { i.into() }
 1692|    133|
 1693|    133|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|    133|
 1695|    133|        rule GraphTerm() -> Term =
 1696|    133|            i:iri() { i.into() } /
 1697|    133|            l:RDFLiteral() { l.into() } /
 1698|    133|            l:NumericLiteral() { l.into() } /
 1699|    133|            l:BooleanLiteral() { l.into() } /
 1700|    133|            b:BlankNode() { b.into() } /
 1701|    133|            NIL() { rdf::NIL.into_owned().into() }
 1702|    133|
 1703|    133|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|    133|
 1705|    133|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|    133|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|    133|        }
 1708|    133|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|    133|
 1710|    133|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|    133|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|    133|        }
 1713|    133|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|    133|
 1715|    133|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|    133|
 1717|    133|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|    133|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|    133|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|    133|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|    133|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|    133|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|    133|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|    133|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|    133|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|    133|            Some(_) => unreachable!(),
 1727|    133|            None => a
 1728|    133|        } }
 1729|    133|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|    133|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|    133|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|    133|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|    133|
 1734|    133|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|    133|
 1736|    133|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|    133|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|    133|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|    133|            Some(_) => unreachable!(),
 1740|    133|            None => a,
 1741|    133|        } }
 1742|    133|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|    133|            (s, e)
 1744|    133|        }
 1745|    133|
 1746|    133|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|    133|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|    133|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|    133|            Some(_) => unreachable!(),
 1750|    133|            None => a
 1751|    133|        } }
 1752|    133|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|    133|            (s, e)
 1754|    133|        }
 1755|    133|
 1756|    133|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|    133|            Some("!") => Expression::Not(Box::new(e)),
 1758|    133|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|    133|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|    133|            Some(_) => unreachable!(),
 1761|    133|            None => e,
 1762|    133|        } }
 1763|    133|
 1764|    133|        rule PrimaryExpression() -> Expression =
 1765|    133|            BrackettedExpression()  /
 1766|    133|            ExprQuotedTriple() /
 1767|    133|            iriOrFunction() /
 1768|    133|            v:Var() { v.into() } /
 1769|    133|            l:RDFLiteral() { l.into() } /
 1770|    133|            l:NumericLiteral() { l.into() } /
 1771|    133|            l:BooleanLiteral() { l.into() } /
 1772|    133|            BuiltInCall()
 1773|    133|
 1774|    133|        rule ExprVarOrTerm() -> Expression =
 1775|    133|            ExprQuotedTriple() /
 1776|    133|            i:iri() { i.into() } /
 1777|    133|            l:RDFLiteral() { l.into() } /
 1778|    133|            l:NumericLiteral() { l.into() } /
 1779|    133|            l:BooleanLiteral() { l.into() } /
 1780|    133|            v:Var() { v.into() }
 1781|    133|
 1782|    133|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|    133|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|    133|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|    133|        }
 1786|    133|
 1787|    133|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|    133|
 1789|    133|        rule BuiltInCall() -> Expression =
 1790|    133|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|    133|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|    133|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|    133|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|    133|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|    133|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|    133|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|    133|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|    133|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|    133|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|    133|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|    133|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|    133|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|    133|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|    133|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|    133|            SubstringExpression() /
 1806|    133|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|    133|            StrReplaceExpression() /
 1808|    133|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|    133|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|    133|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|    133|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|    133|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|    133|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|    133|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|    133|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|    133|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|    133|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|    133|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|    133|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|    133|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|    133|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|    133|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|    133|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|    133|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|    133|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|    133|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|    133|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|    133|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|    133|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|    133|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|    133|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|    133|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|    133|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|    133|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|    133|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|    133|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|    133|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|    133|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|    133|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|    133|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|    133|            RegexExpression() /
 1842|    133|            ExistsFunc() /
 1843|    133|            NotExistsFunc() /
 1844|    133|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|    133|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|    133|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|    133|            } /
 1848|    133|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|    133|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|    133|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|    133|            } /
 1852|    133|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|    133|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|    133|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|    133|            } /
 1856|    133|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|    133|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|    133|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|    133|            } /
 1860|    133|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|    133|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|    133|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|    133|            } /
 1864|    133|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|    133|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|    133|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|    133|            }
 1868|    133|
 1869|    133|        rule RegexExpression() -> Expression =
 1870|    133|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|    133|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|    133|
 1873|    133|
 1874|    133|        rule SubstringExpression() -> Expression =
 1875|    133|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|    133|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|    133|
 1878|    133|
 1879|    133|        rule StrReplaceExpression() -> Expression =
 1880|    133|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|    133|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|    133|
 1883|    133|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|    133|
 1885|    133|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|    133|
 1887|    133|        rule Aggregate() -> AggregateExpression =
 1888|    133|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|    133|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|    133|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|    133|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|    133|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|    133|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|    133|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|    133|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|    133|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|    133|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|    133|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|    133|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|    133|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|    133|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|    133|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|    133|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|    133|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|    133|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|    133|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|    133|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|    133|
 1909|    133|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|    133|            match a {
 1911|    133|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|    133|                None => i.into()
 1913|    133|            }
 1914|    133|        }
 1915|    133|
 1916|    133|        rule RDFLiteral() -> Literal =
 1917|    133|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|    133|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|    133|            value:String() { Literal::new_simple_literal(value) }
 1920|    133|
 1921|    133|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|    133|
 1923|    133|        rule NumericLiteralUnsigned() -> Literal =
 1924|    133|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|    133|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|    133|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|    133|
 1928|    133|        rule NumericLiteralPositive() -> Literal =
 1929|    133|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|    133|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|    133|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|    133|
 1933|    133|
 1934|    133|        rule NumericLiteralNegative() -> Literal =
 1935|    133|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|    133|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|    133|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|    133|
 1939|    133|        rule BooleanLiteral() -> Literal =
 1940|    133|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|    133|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|    133|
 1943|    133|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|    133|
 1945|    133|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|    133|            NamedNode::from(i)
 1947|    133|        }
 1948|    133|
 1949|    133|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|    133|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|    133|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|    133|            } else {
 1953|    133|                Err("Prefix not found")
 1954|    133|            } }
 1955|    133|
 1956|    133|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|    133|            let node = BlankNode::new_unchecked(id);
 1958|    133|            if state.used_bnodes.contains(&node) {
 1959|    133|                Err("Already used blank node id")
 1960|    133|            } else {
 1961|    133|                state.currently_used_bnodes.insert(node.clone());
 1962|    133|                Ok(node)
 1963|    133|            }
 1964|    133|        } / ANON() { BlankNode::default() }
 1965|    133|
 1966|    133|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|    133|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|    133|        }
 1969|    133|
 1970|    133|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|    133|            ns
 1972|    133|        }
 1973|    133|
 1974|    133|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|    133|            if let Some(base) = state.namespaces.get(ns) {
 1976|    133|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|    133|                iri.push_str(base);
 1978|    133|                for chunk in local.split('\\') { // We remove \
 1979|    133|                    iri.push_str(chunk);
 1980|    133|                }
 1981|    133|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|    133|            } else {
 1983|    133|                Err("Prefix not found")
 1984|    133|            }
 1985|    133|        }
 1986|    133|
 1987|    133|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|    133|            b
 1989|    133|        }
 1990|    133|
 1991|    133|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|    133|
 1993|    133|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|    133|
 1995|    133|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|    133|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|    133|        }
 1998|    133|
 1999|    133|        rule INTEGER() = ['0'..='9']+
 2000|    133|
 2001|    133|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|    133|
 2003|    133|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|    133|
 2005|    133|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|    133|
 2007|    133|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|    133|
 2009|    133|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|    133|
 2011|    133|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|    133|
 2013|    133|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|    133|
 2015|    133|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|    133|
 2017|    133|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|    133|
 2019|    133|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|    133|             unescape_string(l)
 2021|    133|        }
 2022|    133|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|    133|
 2024|    133|
 2025|    133|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|    133|             unescape_string(l)
 2027|    133|        }
 2028|    133|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|    133|
 2030|    133|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|    133|             unescape_string(l)
 2032|    133|        }
 2033|    133|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|    133|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|    133|
 2036|    133|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|    133|             unescape_string(l)
 2038|    133|        }
 2039|    133|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|    133|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|    133|
 2042|    133|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|    133|
 2044|    133|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|    133|
 2046|    133|        rule NIL() = "(" WS()* ")"
 2047|    133|
 2048|    133|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|    133|
 2050|    133|        rule ANON() = "[" WS()* "]"
 2051|    133|
 2052|    133|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|    133|
 2054|    133|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|    133|
 2056|    133|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|    133|
 2058|    133|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|    133|
 2060|    133|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|    133|
 2062|    133|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|    133|
 2064|    133|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|    133|
 2066|    133|        rule PERCENT() = ['%'] HEX() HEX()
 2067|    133|
 2068|    133|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|    133|
 2070|    133|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|    133|
 2072|    133|        //space
 2073|    133|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|    133|
 2075|    133|        //comment
 2076|    133|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|    133|
 2078|    133|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|    133|            if input.eq_ignore_ascii_case(literal) {
 2080|    133|                Ok(())
 2081|    133|            } else {
 2082|    133|                Err(literal)
 2083|    133|            }
 2084|    133|        }
 2085|    133|    }
 2086|    133|}
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser29___parse_InlineDataFull_values0B7_:
 1293|    313|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_ObjectList_item0B7_:
 1393|  17.4k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser31___parse_GroupGraphPattern_clear0B7_:
 1175|  14.1k|        rule GroupGraphPattern_clear() = {
 1176|  14.1k|             // We deal with blank nodes aliases rule
 1177|  14.1k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  14.1k|            state.currently_used_bnodes.clear();
 1179|  14.1k|        }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser37___parse_GroupOrUnionGraphPattern_item0B7_:
 1316|    152|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser31___parse_ConditionalOrExpression00B9_:
 1706|     74|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_STRING_LITERAL20B7_:
  778|  5.74k|parser! {
  779|  5.74k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  5.74k|    grammar parser(state: &mut ParserState) for str {
  781|  5.74k|        pub rule QueryUnit() -> Query = Query()
  782|  5.74k|
  783|  5.74k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  5.74k|            q
  785|  5.74k|        }
  786|  5.74k|
  787|  5.74k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  5.74k|
  789|  5.74k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  5.74k|
  791|  5.74k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  5.74k|            state.base_iri = Some(i)
  793|  5.74k|        }
  794|  5.74k|
  795|  5.74k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  5.74k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  5.74k|        }
  798|  5.74k|
  799|  5.74k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  5.74k|            Ok(Query::Select {
  801|  5.74k|                dataset: d,
  802|  5.74k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  5.74k|                base_iri: state.base_iri.clone()
  804|  5.74k|            })
  805|  5.74k|        }
  806|  5.74k|
  807|  5.74k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  5.74k|            build_select(s, w, g, h, o, l, v, state)
  809|  5.74k|        }
  810|  5.74k|
  811|  5.74k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  5.74k|            Selection {
  813|  5.74k|                option: o,
  814|  5.74k|                variables: v
  815|  5.74k|            }
  816|  5.74k|        }
  817|  5.74k|        rule Selection_init() = {
  818|  5.74k|            state.aggregates.push(Vec::new())
  819|  5.74k|        }
  820|  5.74k|        rule SelectClause_option() -> SelectionOption =
  821|  5.74k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  5.74k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  5.74k|            { SelectionOption::Default }
  824|  5.74k|        rule SelectClause_variables() -> SelectionVariables =
  825|  5.74k|            "*" { SelectionVariables::Star } /
  826|  5.74k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  5.74k|        rule SelectClause_member() -> SelectionMember =
  828|  5.74k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  5.74k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  5.74k|
  831|  5.74k|        rule ConstructQuery() -> Query =
  832|  5.74k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  5.74k|                Ok(Query::Construct {
  834|  5.74k|                    template: c,
  835|  5.74k|                    dataset: d,
  836|  5.74k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  5.74k|                    base_iri: state.base_iri.clone()
  838|  5.74k|                })
  839|  5.74k|            } /
  840|  5.74k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  5.74k|                Ok(Query::Construct {
  842|  5.74k|                    template: c.clone(),
  843|  5.74k|                    dataset: d,
  844|  5.74k|                    pattern: build_select(
  845|  5.74k|                        Selection::no_op(),
  846|  5.74k|                        GraphPattern::Bgp { patterns: c },
  847|  5.74k|                        g, h, o, l, v, state
  848|  5.74k|                    )?,
  849|  5.74k|                    base_iri: state.base_iri.clone()
  850|  5.74k|                })
  851|  5.74k|            }
  852|  5.74k|
  853|  5.74k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  5.74k|
  855|  5.74k|        rule DescribeQuery() -> Query =
  856|  5.74k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  5.74k|                Ok(Query::Describe {
  858|  5.74k|                    dataset: d,
  859|  5.74k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  5.74k|                    base_iri: state.base_iri.clone()
  861|  5.74k|                })
  862|  5.74k|            } /
  863|  5.74k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  5.74k|                Ok(Query::Describe {
  865|  5.74k|                    dataset: d,
  866|  5.74k|                    pattern: build_select(Selection {
  867|  5.74k|                        option: SelectionOption::Default,
  868|  5.74k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  5.74k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  5.74k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  5.74k|                        }).collect())
  872|  5.74k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  5.74k|                    base_iri: state.base_iri.clone()
  874|  5.74k|                })
  875|  5.74k|            }
  876|  5.74k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  5.74k|
  878|  5.74k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  5.74k|            Ok(Query::Ask {
  880|  5.74k|                dataset: d,
  881|  5.74k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  5.74k|                base_iri: state.base_iri.clone()
  883|  5.74k|            })
  884|  5.74k|        }
  885|  5.74k|
  886|  5.74k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  5.74k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  5.74k|            if d.is_empty() {
  889|  5.74k|                return None;
  890|  5.74k|            }
  891|  5.74k|            let mut default = Vec::new();
  892|  5.74k|            let mut named = Vec::new();
  893|  5.74k|            for (d, n) in d {
  894|  5.74k|                if let Some(d) = d {
  895|  5.74k|                    default.push(d);
  896|  5.74k|                }
  897|  5.74k|                if let Some(n) = n {
  898|  5.74k|                    named.push(n);
  899|  5.74k|                }
  900|  5.74k|            }
  901|  5.74k|            Some(QueryDataset {
  902|  5.74k|                default, named: Some(named)
  903|  5.74k|            })
  904|  5.74k|        }
  905|  5.74k|
  906|  5.74k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  5.74k|            (Some(s), None)
  908|  5.74k|        }
  909|  5.74k|
  910|  5.74k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  5.74k|            (None, Some(s))
  912|  5.74k|        }
  913|  5.74k|
  914|  5.74k|        rule SourceSelector() -> NamedNode = iri()
  915|  5.74k|
  916|  5.74k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  5.74k|            p
  918|  5.74k|        }
  919|  5.74k|
  920|  5.74k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  5.74k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  5.74k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  5.74k|                if let Expression::Variable(v) = e {
  924|  5.74k|                    v
  925|  5.74k|                } else {
  926|  5.74k|                    let v = vo.unwrap_or_else(variable);
  927|  5.74k|                    projections.push((e, v.clone()));
  928|  5.74k|                    v
  929|  5.74k|                }
  930|  5.74k|            }).collect();
  931|  5.74k|            (clauses, projections)
  932|  5.74k|        }
  933|  5.74k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  5.74k|
  935|  5.74k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  5.74k|            e:BuiltInCall() { (e, None) } /
  937|  5.74k|            e:FunctionCall() { (e, None) } /
  938|  5.74k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  5.74k|            e:Var() { (e.into(), None) }
  940|  5.74k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  5.74k|
  942|  5.74k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  5.74k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  5.74k|        }
  945|  5.74k|
  946|  5.74k|        rule HavingCondition() -> Expression = Constraint()
  947|  5.74k|
  948|  5.74k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  5.74k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  5.74k|
  951|  5.74k|        rule OrderCondition() -> OrderExpression =
  952|  5.74k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  5.74k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  5.74k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  5.74k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  5.74k|
  957|  5.74k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  5.74k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  5.74k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  5.74k|
  961|  5.74k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  5.74k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  5.74k|        }
  964|  5.74k|
  965|  5.74k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  5.74k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  5.74k|        }
  968|  5.74k|
  969|  5.74k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  5.74k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  5.74k|            { None }
  972|  5.74k|
  973|  5.74k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  5.74k|
  975|  5.74k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  5.74k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  5.74k|
  978|  5.74k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  5.74k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  5.74k|        }
  981|  5.74k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  5.74k|
  983|  5.74k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  5.74k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  5.74k|        }
  986|  5.74k|
  987|  5.74k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  5.74k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  5.74k|        }
  990|  5.74k|
  991|  5.74k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  5.74k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  5.74k|        }
  994|  5.74k|
  995|  5.74k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  5.74k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  5.74k|            if from == to {
  998|  5.74k|                Vec::new() // identity case
  999|  5.74k|            } else {
 1000|  5.74k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  5.74k|                vec![copy_graph(from, to)]
 1002|  5.74k|            }
 1003|  5.74k|        }
 1004|  5.74k|
 1005|  5.74k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  5.74k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  5.74k|            if from == to {
 1008|  5.74k|                Vec::new() // identity case
 1009|  5.74k|            } else {
 1010|  5.74k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  5.74k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  5.74k|            }
 1013|  5.74k|        }
 1014|  5.74k|
 1015|  5.74k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  5.74k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  5.74k|            if from == to {
 1018|  5.74k|                Vec::new() // identity case
 1019|  5.74k|            } else {
 1020|  5.74k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  5.74k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  5.74k|            }
 1023|  5.74k|        }
 1024|  5.74k|
 1025|  5.74k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  5.74k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  5.74k|        }
 1028|  5.74k|
 1029|  5.74k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  5.74k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  5.74k|        }
 1032|  5.74k|
 1033|  5.74k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  5.74k|            let pattern = d.iter().map(|q| {
 1035|  5.74k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  5.74k|                match &q.graph_name {
 1037|  5.74k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  5.74k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  5.74k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  5.74k|                }
 1041|  5.74k|            }).reduce(new_join).unwrap_or_default();
 1042|  5.74k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  5.74k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  5.74k|                delete,
 1045|  5.74k|                insert: Vec::new(),
 1046|  5.74k|                using: None,
 1047|  5.74k|                pattern: Box::new(pattern)
 1048|  5.74k|            }])
 1049|  5.74k|        }
 1050|  5.74k|
 1051|  5.74k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  5.74k|            let (delete, insert) = c;
 1053|  5.74k|            let mut delete = delete.unwrap_or_default();
 1054|  5.74k|            let mut insert = insert.unwrap_or_default();
 1055|  5.74k|            #[allow(clippy::shadow_same)]
 1056|  5.74k|            let mut pattern = pattern;
 1057|  5.74k|
 1058|  5.74k|            let mut using = if u.is_empty() {
 1059|  5.74k|                None
 1060|  5.74k|            } else {
 1061|  5.74k|                let mut default = Vec::new();
 1062|  5.74k|                let mut named = Vec::new();
 1063|  5.74k|                for (d, n) in u {
 1064|  5.74k|                    if let Some(d) = d {
 1065|  5.74k|                        default.push(d)
 1066|  5.74k|                    }
 1067|  5.74k|                    if let Some(n) = n {
 1068|  5.74k|                        named.push(n)
 1069|  5.74k|                    }
 1070|  5.74k|                }
 1071|  5.74k|                Some(QueryDataset { default, named: Some(named) })
 1072|  5.74k|            };
 1073|  5.74k|
 1074|  5.74k|            if let Some(with) = with {
 1075|  5.74k|                // We inject WITH everywhere
 1076|  5.74k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  5.74k|                    GroundQuadPattern {
 1078|  5.74k|                        subject: q.subject,
 1079|  5.74k|                        predicate: q.predicate,
 1080|  5.74k|                        object: q.object,
 1081|  5.74k|                        graph_name: with.clone().into()
 1082|  5.74k|                    }
 1083|  5.74k|                } else {
 1084|  5.74k|                    q
 1085|  5.74k|                }).collect();
 1086|  5.74k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  5.74k|                    QuadPattern {
 1088|  5.74k|                        subject: q.subject,
 1089|  5.74k|                        predicate: q.predicate,
 1090|  5.74k|                        object: q.object,
 1091|  5.74k|                        graph_name: with.clone().into()
 1092|  5.74k|                    }
 1093|  5.74k|                } else {
 1094|  5.74k|                    q
 1095|  5.74k|                }).collect();
 1096|  5.74k|                if using.is_none() {
 1097|  5.74k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  5.74k|                }
 1099|  5.74k|            }
 1100|  5.74k|
 1101|  5.74k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  5.74k|                delete,
 1103|  5.74k|                insert,
 1104|  5.74k|                using,
 1105|  5.74k|                pattern: Box::new(pattern)
 1106|  5.74k|            }]
 1107|  5.74k|        }
 1108|  5.74k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  5.74k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  5.74k|            (Some(d), i)
 1111|  5.74k|        } / i:InsertClause() {
 1112|  5.74k|            (None, Some(i))
 1113|  5.74k|        }
 1114|  5.74k|        rule Modify_clear() = {
 1115|  5.74k|            state.used_bnodes.clear();
 1116|  5.74k|            state.currently_used_bnodes.clear();
 1117|  5.74k|        }
 1118|  5.74k|
 1119|  5.74k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  5.74k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  5.74k|        }
 1122|  5.74k|
 1123|  5.74k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  5.74k|
 1125|  5.74k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  5.74k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  5.74k|            (Some(i), None)
 1128|  5.74k|        }
 1129|  5.74k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  5.74k|            (None, Some(i))
 1131|  5.74k|        }
 1132|  5.74k|
 1133|  5.74k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  5.74k|            GraphName::DefaultGraph
 1135|  5.74k|        } / (i("GRAPH") _)? g:iri() {
 1136|  5.74k|            GraphName::NamedNode(g)
 1137|  5.74k|        }
 1138|  5.74k|
 1139|  5.74k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  5.74k|
 1141|  5.74k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  5.74k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  5.74k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  5.74k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  5.74k|
 1146|  5.74k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  5.74k|
 1148|  5.74k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  5.74k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  5.74k|        }
 1151|  5.74k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  5.74k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  5.74k|        }
 1154|  5.74k|
 1155|  5.74k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  5.74k|            q.into_iter().flatten().collect()
 1157|  5.74k|        }
 1158|  5.74k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  5.74k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  5.74k|        } //TODO: return iter?
 1161|  5.74k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  5.74k|
 1163|  5.74k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  5.74k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  5.74k|        }
 1166|  5.74k|
 1167|  5.74k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  5.74k|            ts.into_iter().flatten().collect()
 1169|  5.74k|        }
 1170|  5.74k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  5.74k|
 1172|  5.74k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  5.74k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  5.74k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  5.74k|        rule GroupGraphPattern_clear() = {
 1176|  5.74k|             // We deal with blank nodes aliases rule
 1177|  5.74k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  5.74k|            state.currently_used_bnodes.clear();
 1179|  5.74k|        }
 1180|  5.74k|
 1181|  5.74k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  5.74k|            let mut filter: Option<Expression> = None;
 1183|  5.74k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  5.74k|            for e in b.into_iter().flatten() {
 1185|  5.74k|                match e {
 1186|  5.74k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  5.74k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  5.74k|                    }
 1189|  5.74k|                    #[cfg(feature = "sep-0006")]
 1190|  5.74k|                    PartialGraphPattern::Lateral(p) => {
 1191|  5.74k|                        let mut defined_variables = HashSet::default();
 1192|  5.74k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  5.74k|                        let mut contains = false;
 1194|  5.74k|                        g.on_in_scope_variable(|v| {
 1195|  5.74k|                            if defined_variables.contains(v) {
 1196|  5.74k|                                contains = true;
 1197|  5.74k|                            }
 1198|  5.74k|                        });
 1199|  5.74k|                        if contains {
 1200|  5.74k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  5.74k|                        }
 1202|  5.74k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  5.74k|                    }
 1204|  5.74k|                    PartialGraphPattern::Minus(p) => {
 1205|  5.74k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  5.74k|                    }
 1207|  5.74k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  5.74k|                        let mut contains = false;
 1209|  5.74k|                        g.on_in_scope_variable(|v| {
 1210|  5.74k|                            if *v == variable {
 1211|  5.74k|                                contains = true;
 1212|  5.74k|                            }
 1213|  5.74k|                        });
 1214|  5.74k|                        if contains {
 1215|  5.74k|                            return Err("BIND is overriding an existing variable")
 1216|  5.74k|                        }
 1217|  5.74k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  5.74k|                    }
 1219|  5.74k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  5.74k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  5.74k|                    } else {
 1222|  5.74k|                        expr
 1223|  5.74k|                    }),
 1224|  5.74k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  5.74k|                }
 1226|  5.74k|            }
 1227|  5.74k|
 1228|  5.74k|            Ok(if let Some(expr) = filter {
 1229|  5.74k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  5.74k|            } else {
 1231|  5.74k|                g
 1232|  5.74k|            })
 1233|  5.74k|        }
 1234|  5.74k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  5.74k|            let mut result = vec![a];
 1236|  5.74k|            if let Some(v) = b {
 1237|  5.74k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  5.74k|            }
 1239|  5.74k|            result
 1240|  5.74k|        }
 1241|  5.74k|
 1242|  5.74k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  5.74k|            hs.into_iter().flatten().collect()
 1244|  5.74k|        }
 1245|  5.74k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  5.74k|
 1247|  5.74k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  5.74k|
 1249|  5.74k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  5.74k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  5.74k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  5.74k|            } else {
 1253|  5.74k|               PartialGraphPattern::Optional(p, None)
 1254|  5.74k|            }
 1255|  5.74k|        }
 1256|  5.74k|
 1257|  5.74k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  5.74k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  5.74k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  5.74k|        }
 1261|  5.74k|
 1262|  5.74k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  5.74k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  5.74k|        }
 1265|  5.74k|
 1266|  5.74k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  5.74k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  5.74k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  5.74k|
 1270|  5.74k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  5.74k|            PartialGraphPattern::Bind(e, v)
 1272|  5.74k|        }
 1273|  5.74k|
 1274|  5.74k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  5.74k|
 1276|  5.74k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  5.74k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  5.74k|        }
 1279|  5.74k|
 1280|  5.74k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  5.74k|            (vec![var], d)
 1282|  5.74k|        }
 1283|  5.74k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  5.74k|
 1285|  5.74k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  5.74k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  5.74k|                Ok((vars, vals))
 1288|  5.74k|            } else {
 1289|  5.74k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  5.74k|            }
 1291|  5.74k|        }
 1292|  5.74k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  5.74k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  5.74k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  5.74k|
 1296|  5.74k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  5.74k|            t:QuotedTripleData() {?
 1298|  5.74k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  5.74k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  5.74k|            } /
 1301|  5.74k|            i:iri() { Some(i.into()) } /
 1302|  5.74k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  5.74k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  5.74k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  5.74k|            i("UNDEF") { None }
 1306|  5.74k|
 1307|  5.74k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  5.74k|            PartialGraphPattern::Minus(p)
 1309|  5.74k|        }
 1310|  5.74k|
 1311|  5.74k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  5.74k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  5.74k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  5.74k|            }).map(PartialGraphPattern::Other)
 1315|  5.74k|        }
 1316|  5.74k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  5.74k|
 1318|  5.74k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  5.74k|            PartialGraphPattern::Filter(c)
 1320|  5.74k|        }
 1321|  5.74k|
 1322|  5.74k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  5.74k|
 1324|  5.74k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  5.74k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  5.74k|        }
 1327|  5.74k|
 1328|  5.74k|        rule ArgList() -> Vec<Expression> =
 1329|  5.74k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  5.74k|            NIL() { Vec::new() }
 1331|  5.74k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  5.74k|
 1333|  5.74k|        rule ExpressionList() -> Vec<Expression> =
 1334|  5.74k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  5.74k|            NIL() { Vec::new() }
 1336|  5.74k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  5.74k|
 1338|  5.74k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  5.74k|
 1340|  5.74k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  5.74k|            p.into_iter().flatten().collect()
 1342|  5.74k|        }
 1343|  5.74k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  5.74k|
 1345|  5.74k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  5.74k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  5.74k|                let mut patterns = po.patterns;
 1348|  5.74k|                for (p, os) in po.focus {
 1349|  5.74k|                    for o in os {
 1350|  5.74k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  5.74k|                    }
 1352|  5.74k|                }
 1353|  5.74k|                Ok(patterns)
 1354|  5.74k|            } /
 1355|  5.74k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  5.74k|                let mut patterns = s.patterns;
 1357|  5.74k|                patterns.extend(po.patterns);
 1358|  5.74k|                for (p, os) in po.focus {
 1359|  5.74k|                    for o in os {
 1360|  5.74k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  5.74k|                    }
 1362|  5.74k|                }
 1363|  5.74k|                Ok(patterns)
 1364|  5.74k|            }
 1365|  5.74k|
 1366|  5.74k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  5.74k|            PropertyListNotEmpty() /
 1368|  5.74k|            { FocusedTriplePattern::default() }
 1369|  5.74k|
 1370|  5.74k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  5.74k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  5.74k|                a.focus.push(b.focus);
 1373|  5.74k|                a.patterns.extend(b.patterns);
 1374|  5.74k|                a
 1375|  5.74k|            })
 1376|  5.74k|        }
 1377|  5.74k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  5.74k|            FocusedTriplePattern {
 1379|  5.74k|                focus: (p, o.focus),
 1380|  5.74k|                patterns: o.patterns
 1381|  5.74k|            }
 1382|  5.74k|        }
 1383|  5.74k|
 1384|  5.74k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  5.74k|
 1386|  5.74k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  5.74k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  5.74k|                a.focus.push(b.focus);
 1389|  5.74k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  5.74k|                a
 1391|  5.74k|            })
 1392|  5.74k|        }
 1393|  5.74k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  5.74k|
 1395|  5.74k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  5.74k|            if let Some(a) = a {
 1397|  5.74k|                let mut patterns = g.patterns;
 1398|  5.74k|                patterns.extend(a.patterns);
 1399|  5.74k|                FocusedTriplePattern {
 1400|  5.74k|                    focus: AnnotatedTerm {
 1401|  5.74k|                        term: g.focus,
 1402|  5.74k|                        annotations: a.focus
 1403|  5.74k|                    },
 1404|  5.74k|                    patterns
 1405|  5.74k|                }
 1406|  5.74k|            } else {
 1407|  5.74k|                FocusedTriplePattern {
 1408|  5.74k|                    focus: AnnotatedTerm {
 1409|  5.74k|                        term: g.focus,
 1410|  5.74k|                        annotations: Vec::new()
 1411|  5.74k|                    },
 1412|  5.74k|                    patterns: g.patterns
 1413|  5.74k|                }
 1414|  5.74k|            }
 1415|  5.74k|        }
 1416|  5.74k|
 1417|  5.74k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  5.74k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  5.74k|                let mut patterns = po.patterns;
 1420|  5.74k|                for (p, os) in po.focus {
 1421|  5.74k|                    for o in os {
 1422|  5.74k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  5.74k|                    }
 1424|  5.74k|                }
 1425|  5.74k|                Ok(patterns)
 1426|  5.74k|            } /
 1427|  5.74k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  5.74k|                let mut patterns = s.patterns;
 1429|  5.74k|                patterns.extend(po.patterns);
 1430|  5.74k|                for (p, os) in po.focus {
 1431|  5.74k|                    for o in os {
 1432|  5.74k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  5.74k|                    }
 1434|  5.74k|                }
 1435|  5.74k|                Ok(patterns)
 1436|  5.74k|            }
 1437|  5.74k|
 1438|  5.74k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  5.74k|            PropertyListPathNotEmpty() /
 1440|  5.74k|            { FocusedTripleOrPathPattern::default() }
 1441|  5.74k|
 1442|  5.74k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  5.74k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  5.74k|                    focus: vec![(hp, ho.focus)],
 1445|  5.74k|                    patterns: ho.patterns
 1446|  5.74k|                }, |mut a, b| {
 1447|  5.74k|                    a.focus.push(b.focus);
 1448|  5.74k|                    a.patterns.extend(b.patterns);
 1449|  5.74k|                    a
 1450|  5.74k|                })
 1451|  5.74k|        }
 1452|  5.74k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  5.74k|            c
 1454|  5.74k|        }
 1455|  5.74k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  5.74k|            FocusedTripleOrPathPattern {
 1457|  5.74k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  5.74k|                patterns: o.patterns
 1459|  5.74k|            }
 1460|  5.74k|        }
 1461|  5.74k|
 1462|  5.74k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  5.74k|            p.into()
 1464|  5.74k|        }
 1465|  5.74k|
 1466|  5.74k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  5.74k|            v.into()
 1468|  5.74k|        }
 1469|  5.74k|
 1470|  5.74k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  5.74k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  5.74k|                a.focus.push(b.focus);
 1473|  5.74k|                a.patterns.extend(b.patterns);
 1474|  5.74k|                a
 1475|  5.74k|            })
 1476|  5.74k|        }
 1477|  5.74k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  5.74k|
 1479|  5.74k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  5.74k|             if let Some(a) = a {
 1481|  5.74k|                let mut patterns = g.patterns;
 1482|  5.74k|                patterns.extend(a.patterns);
 1483|  5.74k|                FocusedTripleOrPathPattern {
 1484|  5.74k|                    focus: AnnotatedTermPath {
 1485|  5.74k|                        term: g.focus,
 1486|  5.74k|                        annotations: a.focus
 1487|  5.74k|                    },
 1488|  5.74k|                    patterns
 1489|  5.74k|                }
 1490|  5.74k|            } else {
 1491|  5.74k|                FocusedTripleOrPathPattern {
 1492|  5.74k|                    focus: AnnotatedTermPath {
 1493|  5.74k|                        term: g.focus,
 1494|  5.74k|                        annotations: Vec::new()
 1495|  5.74k|                    },
 1496|  5.74k|                    patterns: g.patterns
 1497|  5.74k|                }
 1498|  5.74k|            }
 1499|  5.74k|        }
 1500|  5.74k|
 1501|  5.74k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  5.74k|
 1503|  5.74k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  5.74k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  5.74k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  5.74k|            })
 1507|  5.74k|        }
 1508|  5.74k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  5.74k|
 1510|  5.74k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  5.74k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  5.74k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  5.74k|            })
 1514|  5.74k|        }
 1515|  5.74k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  5.74k|
 1517|  5.74k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  5.74k|            match o {
 1519|  5.74k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  5.74k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  5.74k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  5.74k|                Some(_) => unreachable!(),
 1523|  5.74k|                None => p
 1524|  5.74k|            }
 1525|  5.74k|        }
 1526|  5.74k|        rule PathElt_op() -> char =
 1527|  5.74k|            "*" { '*' } /
 1528|  5.74k|            "+" { '+' } /
 1529|  5.74k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  5.74k|
 1531|  5.74k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  5.74k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  5.74k|            PathElt()
 1534|  5.74k|
 1535|  5.74k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  5.74k|            v:iri() { v.into() } /
 1537|  5.74k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  5.74k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  5.74k|            "(" _ p:Path() _ ")" { p }
 1540|  5.74k|
 1541|  5.74k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  5.74k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  5.74k|                let mut direct = Vec::new();
 1544|  5.74k|                let mut inverse = Vec::new();
 1545|  5.74k|                for e in p {
 1546|  5.74k|                    match e {
 1547|  5.74k|                        Either::Left(a) => direct.push(a),
 1548|  5.74k|                        Either::Right(b) => inverse.push(b)
 1549|  5.74k|                    }
 1550|  5.74k|                }
 1551|  5.74k|                if inverse.is_empty() {
 1552|  5.74k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  5.74k|                } else if direct.is_empty() {
 1554|  5.74k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  5.74k|                } else {
 1556|  5.74k|                    PropertyPathExpression::Alternative(
 1557|  5.74k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  5.74k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  5.74k|                    )
 1560|  5.74k|                }
 1561|  5.74k|            } /
 1562|  5.74k|            p:PathOneInPropertySet() {
 1563|  5.74k|                match p {
 1564|  5.74k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  5.74k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  5.74k|                }
 1567|  5.74k|            }
 1568|  5.74k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  5.74k|
 1570|  5.74k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  5.74k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  5.74k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  5.74k|            v:iri() { Either::Left(v) } /
 1574|  5.74k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  5.74k|
 1576|  5.74k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  5.74k|
 1578|  5.74k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  5.74k|            let mut patterns = po.patterns;
 1580|  5.74k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  5.74k|            for (p, os) in po.focus {
 1582|  5.74k|                for o in os {
 1583|  5.74k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  5.74k|                }
 1585|  5.74k|            }
 1586|  5.74k|            Ok(FocusedTriplePattern {
 1587|  5.74k|                focus: bnode,
 1588|  5.74k|                patterns
 1589|  5.74k|            })
 1590|  5.74k|        }
 1591|  5.74k|
 1592|  5.74k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  5.74k|
 1594|  5.74k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  5.74k|            let mut patterns = po.patterns;
 1596|  5.74k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  5.74k|            for (p, os) in po.focus {
 1598|  5.74k|                for o in os {
 1599|  5.74k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  5.74k|                }
 1601|  5.74k|            }
 1602|  5.74k|            Ok(FocusedTripleOrPathPattern {
 1603|  5.74k|                focus: bnode,
 1604|  5.74k|                patterns
 1605|  5.74k|            })
 1606|  5.74k|        }
 1607|  5.74k|
 1608|  5.74k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  5.74k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  5.74k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  5.74k|            for objWithPatterns in o.into_iter().rev() {
 1612|  5.74k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  5.74k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  5.74k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  5.74k|                current_list_node = new_blank_node;
 1616|  5.74k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  5.74k|            }
 1618|  5.74k|            FocusedTriplePattern {
 1619|  5.74k|                focus: current_list_node,
 1620|  5.74k|                patterns
 1621|  5.74k|            }
 1622|  5.74k|        }
 1623|  5.74k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  5.74k|
 1625|  5.74k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  5.74k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  5.74k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  5.74k|            for objWithPatterns in o.into_iter().rev() {
 1629|  5.74k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  5.74k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  5.74k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  5.74k|                current_list_node = new_blank_node;
 1633|  5.74k|                patterns.extend(objWithPatterns.patterns);
 1634|  5.74k|            }
 1635|  5.74k|            FocusedTripleOrPathPattern {
 1636|  5.74k|                focus: current_list_node,
 1637|  5.74k|                patterns
 1638|  5.74k|            }
 1639|  5.74k|        }
 1640|  5.74k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  5.74k|
 1642|  5.74k|
 1643|  5.74k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  5.74k|
 1645|  5.74k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  5.74k|
 1647|  5.74k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  5.74k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  5.74k|            TriplesNode()
 1650|  5.74k|
 1651|  5.74k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  5.74k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  5.74k|            TriplesNodePath()
 1654|  5.74k|
 1655|  5.74k|        rule VarOrTerm() -> TermPattern =
 1656|  5.74k|            v:Var() { v.into() } /
 1657|  5.74k|            t:QuotedTriple() {?
 1658|  5.74k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  5.74k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  5.74k|            } /
 1661|  5.74k|            t:GraphTerm() { t.into() }
 1662|  5.74k|
 1663|  5.74k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  5.74k|            Ok(TriplePattern {
 1665|  5.74k|                subject: s,
 1666|  5.74k|                predicate: p,
 1667|  5.74k|                object: o
 1668|  5.74k|            })
 1669|  5.74k|        }
 1670|  5.74k|
 1671|  5.74k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  5.74k|            Ok(GroundTriple {
 1673|  5.74k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  5.74k|                predicate: p,
 1675|  5.74k|                object: o
 1676|  5.74k|            })
 1677|  5.74k|        }
 1678|  5.74k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  5.74k|
 1680|  5.74k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  5.74k|            l:RDFLiteral() { l.into() } /
 1682|  5.74k|            l:NumericLiteral() { l.into() } /
 1683|  5.74k|            l:BooleanLiteral() { l.into() } /
 1684|  5.74k|            t:QuotedTripleData() {?
 1685|  5.74k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  5.74k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  5.74k|            }
 1688|  5.74k|
 1689|  5.74k|        rule VarOrIri() -> NamedNodePattern =
 1690|  5.74k|            v:Var() { v.into() } /
 1691|  5.74k|            i:iri() { i.into() }
 1692|  5.74k|
 1693|  5.74k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  5.74k|
 1695|  5.74k|        rule GraphTerm() -> Term =
 1696|  5.74k|            i:iri() { i.into() } /
 1697|  5.74k|            l:RDFLiteral() { l.into() } /
 1698|  5.74k|            l:NumericLiteral() { l.into() } /
 1699|  5.74k|            l:BooleanLiteral() { l.into() } /
 1700|  5.74k|            b:BlankNode() { b.into() } /
 1701|  5.74k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  5.74k|
 1703|  5.74k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  5.74k|
 1705|  5.74k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  5.74k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  5.74k|        }
 1708|  5.74k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  5.74k|
 1710|  5.74k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  5.74k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  5.74k|        }
 1713|  5.74k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  5.74k|
 1715|  5.74k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  5.74k|
 1717|  5.74k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  5.74k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  5.74k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  5.74k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  5.74k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  5.74k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  5.74k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  5.74k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  5.74k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  5.74k|            Some(_) => unreachable!(),
 1727|  5.74k|            None => a
 1728|  5.74k|        } }
 1729|  5.74k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  5.74k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  5.74k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  5.74k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  5.74k|
 1734|  5.74k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  5.74k|
 1736|  5.74k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  5.74k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  5.74k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  5.74k|            Some(_) => unreachable!(),
 1740|  5.74k|            None => a,
 1741|  5.74k|        } }
 1742|  5.74k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  5.74k|            (s, e)
 1744|  5.74k|        }
 1745|  5.74k|
 1746|  5.74k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  5.74k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  5.74k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  5.74k|            Some(_) => unreachable!(),
 1750|  5.74k|            None => a
 1751|  5.74k|        } }
 1752|  5.74k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  5.74k|            (s, e)
 1754|  5.74k|        }
 1755|  5.74k|
 1756|  5.74k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  5.74k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  5.74k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  5.74k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  5.74k|            Some(_) => unreachable!(),
 1761|  5.74k|            None => e,
 1762|  5.74k|        } }
 1763|  5.74k|
 1764|  5.74k|        rule PrimaryExpression() -> Expression =
 1765|  5.74k|            BrackettedExpression()  /
 1766|  5.74k|            ExprQuotedTriple() /
 1767|  5.74k|            iriOrFunction() /
 1768|  5.74k|            v:Var() { v.into() } /
 1769|  5.74k|            l:RDFLiteral() { l.into() } /
 1770|  5.74k|            l:NumericLiteral() { l.into() } /
 1771|  5.74k|            l:BooleanLiteral() { l.into() } /
 1772|  5.74k|            BuiltInCall()
 1773|  5.74k|
 1774|  5.74k|        rule ExprVarOrTerm() -> Expression =
 1775|  5.74k|            ExprQuotedTriple() /
 1776|  5.74k|            i:iri() { i.into() } /
 1777|  5.74k|            l:RDFLiteral() { l.into() } /
 1778|  5.74k|            l:NumericLiteral() { l.into() } /
 1779|  5.74k|            l:BooleanLiteral() { l.into() } /
 1780|  5.74k|            v:Var() { v.into() }
 1781|  5.74k|
 1782|  5.74k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  5.74k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  5.74k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  5.74k|        }
 1786|  5.74k|
 1787|  5.74k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  5.74k|
 1789|  5.74k|        rule BuiltInCall() -> Expression =
 1790|  5.74k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  5.74k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  5.74k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  5.74k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  5.74k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  5.74k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  5.74k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  5.74k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  5.74k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  5.74k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  5.74k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  5.74k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  5.74k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  5.74k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  5.74k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  5.74k|            SubstringExpression() /
 1806|  5.74k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  5.74k|            StrReplaceExpression() /
 1808|  5.74k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  5.74k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  5.74k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  5.74k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  5.74k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  5.74k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  5.74k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  5.74k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  5.74k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  5.74k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  5.74k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  5.74k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  5.74k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  5.74k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  5.74k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  5.74k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  5.74k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  5.74k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  5.74k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  5.74k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  5.74k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  5.74k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  5.74k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  5.74k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  5.74k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  5.74k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  5.74k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  5.74k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  5.74k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  5.74k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  5.74k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  5.74k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  5.74k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  5.74k|            RegexExpression() /
 1842|  5.74k|            ExistsFunc() /
 1843|  5.74k|            NotExistsFunc() /
 1844|  5.74k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  5.74k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  5.74k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  5.74k|            } /
 1848|  5.74k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  5.74k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  5.74k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  5.74k|            } /
 1852|  5.74k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  5.74k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  5.74k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  5.74k|            } /
 1856|  5.74k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  5.74k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  5.74k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  5.74k|            } /
 1860|  5.74k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  5.74k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  5.74k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  5.74k|            } /
 1864|  5.74k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  5.74k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  5.74k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  5.74k|            }
 1868|  5.74k|
 1869|  5.74k|        rule RegexExpression() -> Expression =
 1870|  5.74k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  5.74k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  5.74k|
 1873|  5.74k|
 1874|  5.74k|        rule SubstringExpression() -> Expression =
 1875|  5.74k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  5.74k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  5.74k|
 1878|  5.74k|
 1879|  5.74k|        rule StrReplaceExpression() -> Expression =
 1880|  5.74k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  5.74k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  5.74k|
 1883|  5.74k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  5.74k|
 1885|  5.74k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  5.74k|
 1887|  5.74k|        rule Aggregate() -> AggregateExpression =
 1888|  5.74k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  5.74k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  5.74k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  5.74k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  5.74k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  5.74k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  5.74k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  5.74k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  5.74k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  5.74k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  5.74k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  5.74k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  5.74k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  5.74k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  5.74k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  5.74k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  5.74k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  5.74k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  5.74k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  5.74k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  5.74k|
 1909|  5.74k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  5.74k|            match a {
 1911|  5.74k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  5.74k|                None => i.into()
 1913|  5.74k|            }
 1914|  5.74k|        }
 1915|  5.74k|
 1916|  5.74k|        rule RDFLiteral() -> Literal =
 1917|  5.74k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  5.74k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  5.74k|            value:String() { Literal::new_simple_literal(value) }
 1920|  5.74k|
 1921|  5.74k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  5.74k|
 1923|  5.74k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  5.74k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  5.74k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  5.74k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  5.74k|
 1928|  5.74k|        rule NumericLiteralPositive() -> Literal =
 1929|  5.74k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  5.74k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  5.74k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  5.74k|
 1933|  5.74k|
 1934|  5.74k|        rule NumericLiteralNegative() -> Literal =
 1935|  5.74k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  5.74k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  5.74k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  5.74k|
 1939|  5.74k|        rule BooleanLiteral() -> Literal =
 1940|  5.74k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  5.74k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  5.74k|
 1943|  5.74k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  5.74k|
 1945|  5.74k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  5.74k|            NamedNode::from(i)
 1947|  5.74k|        }
 1948|  5.74k|
 1949|  5.74k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  5.74k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  5.74k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  5.74k|            } else {
 1953|  5.74k|                Err("Prefix not found")
 1954|  5.74k|            } }
 1955|  5.74k|
 1956|  5.74k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  5.74k|            let node = BlankNode::new_unchecked(id);
 1958|  5.74k|            if state.used_bnodes.contains(&node) {
 1959|  5.74k|                Err("Already used blank node id")
 1960|  5.74k|            } else {
 1961|  5.74k|                state.currently_used_bnodes.insert(node.clone());
 1962|  5.74k|                Ok(node)
 1963|  5.74k|            }
 1964|  5.74k|        } / ANON() { BlankNode::default() }
 1965|  5.74k|
 1966|  5.74k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  5.74k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  5.74k|        }
 1969|  5.74k|
 1970|  5.74k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  5.74k|            ns
 1972|  5.74k|        }
 1973|  5.74k|
 1974|  5.74k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  5.74k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  5.74k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  5.74k|                iri.push_str(base);
 1978|  5.74k|                for chunk in local.split('\\') { // We remove \
 1979|  5.74k|                    iri.push_str(chunk);
 1980|  5.74k|                }
 1981|  5.74k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  5.74k|            } else {
 1983|  5.74k|                Err("Prefix not found")
 1984|  5.74k|            }
 1985|  5.74k|        }
 1986|  5.74k|
 1987|  5.74k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  5.74k|            b
 1989|  5.74k|        }
 1990|  5.74k|
 1991|  5.74k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  5.74k|
 1993|  5.74k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  5.74k|
 1995|  5.74k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  5.74k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  5.74k|        }
 1998|  5.74k|
 1999|  5.74k|        rule INTEGER() = ['0'..='9']+
 2000|  5.74k|
 2001|  5.74k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  5.74k|
 2003|  5.74k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  5.74k|
 2005|  5.74k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  5.74k|
 2007|  5.74k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  5.74k|
 2009|  5.74k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  5.74k|
 2011|  5.74k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  5.74k|
 2013|  5.74k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  5.74k|
 2015|  5.74k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  5.74k|
 2017|  5.74k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  5.74k|
 2019|  5.74k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  5.74k|             unescape_string(l)
 2021|  5.74k|        }
 2022|  5.74k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  5.74k|
 2024|  5.74k|
 2025|  5.74k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  5.74k|             unescape_string(l)
 2027|  5.74k|        }
 2028|  5.74k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  5.74k|
 2030|  5.74k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  5.74k|             unescape_string(l)
 2032|  5.74k|        }
 2033|  5.74k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  5.74k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  5.74k|
 2036|  5.74k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  5.74k|             unescape_string(l)
 2038|  5.74k|        }
 2039|  5.74k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  5.74k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  5.74k|
 2042|  5.74k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  5.74k|
 2044|  5.74k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  5.74k|
 2046|  5.74k|        rule NIL() = "(" WS()* ")"
 2047|  5.74k|
 2048|  5.74k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  5.74k|
 2050|  5.74k|        rule ANON() = "[" WS()* "]"
 2051|  5.74k|
 2052|  5.74k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  5.74k|
 2054|  5.74k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  5.74k|
 2056|  5.74k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  5.74k|
 2058|  5.74k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  5.74k|
 2060|  5.74k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  5.74k|
 2062|  5.74k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  5.74k|
 2064|  5.74k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  5.74k|
 2066|  5.74k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  5.74k|
 2068|  5.74k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  5.74k|
 2070|  5.74k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  5.74k|
 2072|  5.74k|        //space
 2073|  5.74k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  5.74k|
 2075|  5.74k|        //comment
 2076|  5.74k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  5.74k|
 2078|  5.74k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  5.74k|            if input.eq_ignore_ascii_case(literal) {
 2080|  5.74k|                Ok(())
 2081|  5.74k|            } else {
 2082|  5.74k|                Err(literal)
 2083|  5.74k|            }
 2084|  5.74k|        }
 2085|  5.74k|    }
 2086|  5.74k|}
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_QuadsNotTriples0B7_:
 1163|  15.0k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  15.0k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser33___parse_PropertyListNotEmpty_item0B7_:
 1377|  17.4k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  17.4k|            FocusedTriplePattern {
 1379|  17.4k|                focus: (p, o.focus),
 1380|  17.4k|                patterns: o.patterns
 1381|  17.4k|            }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_GroupGraphPattern0B7_:
 1173|  3.31k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser34___parse_RelationalExpression_inners0_0B7_:
 1732|  1.56k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser31___parse_ConditionalOrExpression0B7_:
  778|  2.63k|parser! {
  779|  2.63k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  2.63k|    grammar parser(state: &mut ParserState) for str {
  781|  2.63k|        pub rule QueryUnit() -> Query = Query()
  782|  2.63k|
  783|  2.63k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  2.63k|            q
  785|  2.63k|        }
  786|  2.63k|
  787|  2.63k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  2.63k|
  789|  2.63k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  2.63k|
  791|  2.63k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  2.63k|            state.base_iri = Some(i)
  793|  2.63k|        }
  794|  2.63k|
  795|  2.63k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  2.63k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  2.63k|        }
  798|  2.63k|
  799|  2.63k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  2.63k|            Ok(Query::Select {
  801|  2.63k|                dataset: d,
  802|  2.63k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  2.63k|                base_iri: state.base_iri.clone()
  804|  2.63k|            })
  805|  2.63k|        }
  806|  2.63k|
  807|  2.63k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  2.63k|            build_select(s, w, g, h, o, l, v, state)
  809|  2.63k|        }
  810|  2.63k|
  811|  2.63k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  2.63k|            Selection {
  813|  2.63k|                option: o,
  814|  2.63k|                variables: v
  815|  2.63k|            }
  816|  2.63k|        }
  817|  2.63k|        rule Selection_init() = {
  818|  2.63k|            state.aggregates.push(Vec::new())
  819|  2.63k|        }
  820|  2.63k|        rule SelectClause_option() -> SelectionOption =
  821|  2.63k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  2.63k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  2.63k|            { SelectionOption::Default }
  824|  2.63k|        rule SelectClause_variables() -> SelectionVariables =
  825|  2.63k|            "*" { SelectionVariables::Star } /
  826|  2.63k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  2.63k|        rule SelectClause_member() -> SelectionMember =
  828|  2.63k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  2.63k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  2.63k|
  831|  2.63k|        rule ConstructQuery() -> Query =
  832|  2.63k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  2.63k|                Ok(Query::Construct {
  834|  2.63k|                    template: c,
  835|  2.63k|                    dataset: d,
  836|  2.63k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  2.63k|                    base_iri: state.base_iri.clone()
  838|  2.63k|                })
  839|  2.63k|            } /
  840|  2.63k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  2.63k|                Ok(Query::Construct {
  842|  2.63k|                    template: c.clone(),
  843|  2.63k|                    dataset: d,
  844|  2.63k|                    pattern: build_select(
  845|  2.63k|                        Selection::no_op(),
  846|  2.63k|                        GraphPattern::Bgp { patterns: c },
  847|  2.63k|                        g, h, o, l, v, state
  848|  2.63k|                    )?,
  849|  2.63k|                    base_iri: state.base_iri.clone()
  850|  2.63k|                })
  851|  2.63k|            }
  852|  2.63k|
  853|  2.63k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  2.63k|
  855|  2.63k|        rule DescribeQuery() -> Query =
  856|  2.63k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  2.63k|                Ok(Query::Describe {
  858|  2.63k|                    dataset: d,
  859|  2.63k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  2.63k|                    base_iri: state.base_iri.clone()
  861|  2.63k|                })
  862|  2.63k|            } /
  863|  2.63k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  2.63k|                Ok(Query::Describe {
  865|  2.63k|                    dataset: d,
  866|  2.63k|                    pattern: build_select(Selection {
  867|  2.63k|                        option: SelectionOption::Default,
  868|  2.63k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  2.63k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  2.63k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  2.63k|                        }).collect())
  872|  2.63k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  2.63k|                    base_iri: state.base_iri.clone()
  874|  2.63k|                })
  875|  2.63k|            }
  876|  2.63k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  2.63k|
  878|  2.63k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  2.63k|            Ok(Query::Ask {
  880|  2.63k|                dataset: d,
  881|  2.63k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  2.63k|                base_iri: state.base_iri.clone()
  883|  2.63k|            })
  884|  2.63k|        }
  885|  2.63k|
  886|  2.63k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  2.63k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  2.63k|            if d.is_empty() {
  889|  2.63k|                return None;
  890|  2.63k|            }
  891|  2.63k|            let mut default = Vec::new();
  892|  2.63k|            let mut named = Vec::new();
  893|  2.63k|            for (d, n) in d {
  894|  2.63k|                if let Some(d) = d {
  895|  2.63k|                    default.push(d);
  896|  2.63k|                }
  897|  2.63k|                if let Some(n) = n {
  898|  2.63k|                    named.push(n);
  899|  2.63k|                }
  900|  2.63k|            }
  901|  2.63k|            Some(QueryDataset {
  902|  2.63k|                default, named: Some(named)
  903|  2.63k|            })
  904|  2.63k|        }
  905|  2.63k|
  906|  2.63k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  2.63k|            (Some(s), None)
  908|  2.63k|        }
  909|  2.63k|
  910|  2.63k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  2.63k|            (None, Some(s))
  912|  2.63k|        }
  913|  2.63k|
  914|  2.63k|        rule SourceSelector() -> NamedNode = iri()
  915|  2.63k|
  916|  2.63k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  2.63k|            p
  918|  2.63k|        }
  919|  2.63k|
  920|  2.63k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  2.63k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  2.63k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  2.63k|                if let Expression::Variable(v) = e {
  924|  2.63k|                    v
  925|  2.63k|                } else {
  926|  2.63k|                    let v = vo.unwrap_or_else(variable);
  927|  2.63k|                    projections.push((e, v.clone()));
  928|  2.63k|                    v
  929|  2.63k|                }
  930|  2.63k|            }).collect();
  931|  2.63k|            (clauses, projections)
  932|  2.63k|        }
  933|  2.63k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  2.63k|
  935|  2.63k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  2.63k|            e:BuiltInCall() { (e, None) } /
  937|  2.63k|            e:FunctionCall() { (e, None) } /
  938|  2.63k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  2.63k|            e:Var() { (e.into(), None) }
  940|  2.63k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  2.63k|
  942|  2.63k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  2.63k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  2.63k|        }
  945|  2.63k|
  946|  2.63k|        rule HavingCondition() -> Expression = Constraint()
  947|  2.63k|
  948|  2.63k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  2.63k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  2.63k|
  951|  2.63k|        rule OrderCondition() -> OrderExpression =
  952|  2.63k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  2.63k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  2.63k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  2.63k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  2.63k|
  957|  2.63k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  2.63k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  2.63k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  2.63k|
  961|  2.63k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  2.63k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  2.63k|        }
  964|  2.63k|
  965|  2.63k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  2.63k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  2.63k|        }
  968|  2.63k|
  969|  2.63k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  2.63k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  2.63k|            { None }
  972|  2.63k|
  973|  2.63k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  2.63k|
  975|  2.63k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  2.63k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  2.63k|
  978|  2.63k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  2.63k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  2.63k|        }
  981|  2.63k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  2.63k|
  983|  2.63k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  2.63k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  2.63k|        }
  986|  2.63k|
  987|  2.63k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  2.63k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  2.63k|        }
  990|  2.63k|
  991|  2.63k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  2.63k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  2.63k|        }
  994|  2.63k|
  995|  2.63k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  2.63k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  2.63k|            if from == to {
  998|  2.63k|                Vec::new() // identity case
  999|  2.63k|            } else {
 1000|  2.63k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  2.63k|                vec![copy_graph(from, to)]
 1002|  2.63k|            }
 1003|  2.63k|        }
 1004|  2.63k|
 1005|  2.63k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  2.63k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  2.63k|            if from == to {
 1008|  2.63k|                Vec::new() // identity case
 1009|  2.63k|            } else {
 1010|  2.63k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  2.63k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  2.63k|            }
 1013|  2.63k|        }
 1014|  2.63k|
 1015|  2.63k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  2.63k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  2.63k|            if from == to {
 1018|  2.63k|                Vec::new() // identity case
 1019|  2.63k|            } else {
 1020|  2.63k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  2.63k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  2.63k|            }
 1023|  2.63k|        }
 1024|  2.63k|
 1025|  2.63k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  2.63k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  2.63k|        }
 1028|  2.63k|
 1029|  2.63k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  2.63k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  2.63k|        }
 1032|  2.63k|
 1033|  2.63k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  2.63k|            let pattern = d.iter().map(|q| {
 1035|  2.63k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  2.63k|                match &q.graph_name {
 1037|  2.63k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  2.63k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  2.63k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  2.63k|                }
 1041|  2.63k|            }).reduce(new_join).unwrap_or_default();
 1042|  2.63k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  2.63k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  2.63k|                delete,
 1045|  2.63k|                insert: Vec::new(),
 1046|  2.63k|                using: None,
 1047|  2.63k|                pattern: Box::new(pattern)
 1048|  2.63k|            }])
 1049|  2.63k|        }
 1050|  2.63k|
 1051|  2.63k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  2.63k|            let (delete, insert) = c;
 1053|  2.63k|            let mut delete = delete.unwrap_or_default();
 1054|  2.63k|            let mut insert = insert.unwrap_or_default();
 1055|  2.63k|            #[allow(clippy::shadow_same)]
 1056|  2.63k|            let mut pattern = pattern;
 1057|  2.63k|
 1058|  2.63k|            let mut using = if u.is_empty() {
 1059|  2.63k|                None
 1060|  2.63k|            } else {
 1061|  2.63k|                let mut default = Vec::new();
 1062|  2.63k|                let mut named = Vec::new();
 1063|  2.63k|                for (d, n) in u {
 1064|  2.63k|                    if let Some(d) = d {
 1065|  2.63k|                        default.push(d)
 1066|  2.63k|                    }
 1067|  2.63k|                    if let Some(n) = n {
 1068|  2.63k|                        named.push(n)
 1069|  2.63k|                    }
 1070|  2.63k|                }
 1071|  2.63k|                Some(QueryDataset { default, named: Some(named) })
 1072|  2.63k|            };
 1073|  2.63k|
 1074|  2.63k|            if let Some(with) = with {
 1075|  2.63k|                // We inject WITH everywhere
 1076|  2.63k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  2.63k|                    GroundQuadPattern {
 1078|  2.63k|                        subject: q.subject,
 1079|  2.63k|                        predicate: q.predicate,
 1080|  2.63k|                        object: q.object,
 1081|  2.63k|                        graph_name: with.clone().into()
 1082|  2.63k|                    }
 1083|  2.63k|                } else {
 1084|  2.63k|                    q
 1085|  2.63k|                }).collect();
 1086|  2.63k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  2.63k|                    QuadPattern {
 1088|  2.63k|                        subject: q.subject,
 1089|  2.63k|                        predicate: q.predicate,
 1090|  2.63k|                        object: q.object,
 1091|  2.63k|                        graph_name: with.clone().into()
 1092|  2.63k|                    }
 1093|  2.63k|                } else {
 1094|  2.63k|                    q
 1095|  2.63k|                }).collect();
 1096|  2.63k|                if using.is_none() {
 1097|  2.63k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  2.63k|                }
 1099|  2.63k|            }
 1100|  2.63k|
 1101|  2.63k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  2.63k|                delete,
 1103|  2.63k|                insert,
 1104|  2.63k|                using,
 1105|  2.63k|                pattern: Box::new(pattern)
 1106|  2.63k|            }]
 1107|  2.63k|        }
 1108|  2.63k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  2.63k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  2.63k|            (Some(d), i)
 1111|  2.63k|        } / i:InsertClause() {
 1112|  2.63k|            (None, Some(i))
 1113|  2.63k|        }
 1114|  2.63k|        rule Modify_clear() = {
 1115|  2.63k|            state.used_bnodes.clear();
 1116|  2.63k|            state.currently_used_bnodes.clear();
 1117|  2.63k|        }
 1118|  2.63k|
 1119|  2.63k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  2.63k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  2.63k|        }
 1122|  2.63k|
 1123|  2.63k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  2.63k|
 1125|  2.63k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  2.63k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  2.63k|            (Some(i), None)
 1128|  2.63k|        }
 1129|  2.63k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  2.63k|            (None, Some(i))
 1131|  2.63k|        }
 1132|  2.63k|
 1133|  2.63k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  2.63k|            GraphName::DefaultGraph
 1135|  2.63k|        } / (i("GRAPH") _)? g:iri() {
 1136|  2.63k|            GraphName::NamedNode(g)
 1137|  2.63k|        }
 1138|  2.63k|
 1139|  2.63k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  2.63k|
 1141|  2.63k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  2.63k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  2.63k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  2.63k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  2.63k|
 1146|  2.63k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  2.63k|
 1148|  2.63k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  2.63k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  2.63k|        }
 1151|  2.63k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  2.63k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  2.63k|        }
 1154|  2.63k|
 1155|  2.63k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  2.63k|            q.into_iter().flatten().collect()
 1157|  2.63k|        }
 1158|  2.63k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  2.63k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  2.63k|        } //TODO: return iter?
 1161|  2.63k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  2.63k|
 1163|  2.63k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  2.63k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  2.63k|        }
 1166|  2.63k|
 1167|  2.63k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  2.63k|            ts.into_iter().flatten().collect()
 1169|  2.63k|        }
 1170|  2.63k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  2.63k|
 1172|  2.63k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  2.63k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  2.63k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  2.63k|        rule GroupGraphPattern_clear() = {
 1176|  2.63k|             // We deal with blank nodes aliases rule
 1177|  2.63k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  2.63k|            state.currently_used_bnodes.clear();
 1179|  2.63k|        }
 1180|  2.63k|
 1181|  2.63k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  2.63k|            let mut filter: Option<Expression> = None;
 1183|  2.63k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  2.63k|            for e in b.into_iter().flatten() {
 1185|  2.63k|                match e {
 1186|  2.63k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  2.63k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  2.63k|                    }
 1189|  2.63k|                    #[cfg(feature = "sep-0006")]
 1190|  2.63k|                    PartialGraphPattern::Lateral(p) => {
 1191|  2.63k|                        let mut defined_variables = HashSet::default();
 1192|  2.63k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  2.63k|                        let mut contains = false;
 1194|  2.63k|                        g.on_in_scope_variable(|v| {
 1195|  2.63k|                            if defined_variables.contains(v) {
 1196|  2.63k|                                contains = true;
 1197|  2.63k|                            }
 1198|  2.63k|                        });
 1199|  2.63k|                        if contains {
 1200|  2.63k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  2.63k|                        }
 1202|  2.63k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  2.63k|                    }
 1204|  2.63k|                    PartialGraphPattern::Minus(p) => {
 1205|  2.63k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  2.63k|                    }
 1207|  2.63k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  2.63k|                        let mut contains = false;
 1209|  2.63k|                        g.on_in_scope_variable(|v| {
 1210|  2.63k|                            if *v == variable {
 1211|  2.63k|                                contains = true;
 1212|  2.63k|                            }
 1213|  2.63k|                        });
 1214|  2.63k|                        if contains {
 1215|  2.63k|                            return Err("BIND is overriding an existing variable")
 1216|  2.63k|                        }
 1217|  2.63k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  2.63k|                    }
 1219|  2.63k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  2.63k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  2.63k|                    } else {
 1222|  2.63k|                        expr
 1223|  2.63k|                    }),
 1224|  2.63k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  2.63k|                }
 1226|  2.63k|            }
 1227|  2.63k|
 1228|  2.63k|            Ok(if let Some(expr) = filter {
 1229|  2.63k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  2.63k|            } else {
 1231|  2.63k|                g
 1232|  2.63k|            })
 1233|  2.63k|        }
 1234|  2.63k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  2.63k|            let mut result = vec![a];
 1236|  2.63k|            if let Some(v) = b {
 1237|  2.63k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  2.63k|            }
 1239|  2.63k|            result
 1240|  2.63k|        }
 1241|  2.63k|
 1242|  2.63k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  2.63k|            hs.into_iter().flatten().collect()
 1244|  2.63k|        }
 1245|  2.63k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  2.63k|
 1247|  2.63k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  2.63k|
 1249|  2.63k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  2.63k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  2.63k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  2.63k|            } else {
 1253|  2.63k|               PartialGraphPattern::Optional(p, None)
 1254|  2.63k|            }
 1255|  2.63k|        }
 1256|  2.63k|
 1257|  2.63k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  2.63k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  2.63k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  2.63k|        }
 1261|  2.63k|
 1262|  2.63k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  2.63k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  2.63k|        }
 1265|  2.63k|
 1266|  2.63k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  2.63k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  2.63k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  2.63k|
 1270|  2.63k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  2.63k|            PartialGraphPattern::Bind(e, v)
 1272|  2.63k|        }
 1273|  2.63k|
 1274|  2.63k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  2.63k|
 1276|  2.63k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  2.63k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  2.63k|        }
 1279|  2.63k|
 1280|  2.63k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  2.63k|            (vec![var], d)
 1282|  2.63k|        }
 1283|  2.63k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  2.63k|
 1285|  2.63k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  2.63k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  2.63k|                Ok((vars, vals))
 1288|  2.63k|            } else {
 1289|  2.63k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  2.63k|            }
 1291|  2.63k|        }
 1292|  2.63k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  2.63k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  2.63k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  2.63k|
 1296|  2.63k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  2.63k|            t:QuotedTripleData() {?
 1298|  2.63k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  2.63k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  2.63k|            } /
 1301|  2.63k|            i:iri() { Some(i.into()) } /
 1302|  2.63k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  2.63k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  2.63k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  2.63k|            i("UNDEF") { None }
 1306|  2.63k|
 1307|  2.63k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  2.63k|            PartialGraphPattern::Minus(p)
 1309|  2.63k|        }
 1310|  2.63k|
 1311|  2.63k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  2.63k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  2.63k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  2.63k|            }).map(PartialGraphPattern::Other)
 1315|  2.63k|        }
 1316|  2.63k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  2.63k|
 1318|  2.63k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  2.63k|            PartialGraphPattern::Filter(c)
 1320|  2.63k|        }
 1321|  2.63k|
 1322|  2.63k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  2.63k|
 1324|  2.63k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  2.63k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  2.63k|        }
 1327|  2.63k|
 1328|  2.63k|        rule ArgList() -> Vec<Expression> =
 1329|  2.63k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  2.63k|            NIL() { Vec::new() }
 1331|  2.63k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  2.63k|
 1333|  2.63k|        rule ExpressionList() -> Vec<Expression> =
 1334|  2.63k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  2.63k|            NIL() { Vec::new() }
 1336|  2.63k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  2.63k|
 1338|  2.63k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  2.63k|
 1340|  2.63k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  2.63k|            p.into_iter().flatten().collect()
 1342|  2.63k|        }
 1343|  2.63k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  2.63k|
 1345|  2.63k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  2.63k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  2.63k|                let mut patterns = po.patterns;
 1348|  2.63k|                for (p, os) in po.focus {
 1349|  2.63k|                    for o in os {
 1350|  2.63k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  2.63k|                    }
 1352|  2.63k|                }
 1353|  2.63k|                Ok(patterns)
 1354|  2.63k|            } /
 1355|  2.63k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  2.63k|                let mut patterns = s.patterns;
 1357|  2.63k|                patterns.extend(po.patterns);
 1358|  2.63k|                for (p, os) in po.focus {
 1359|  2.63k|                    for o in os {
 1360|  2.63k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  2.63k|                    }
 1362|  2.63k|                }
 1363|  2.63k|                Ok(patterns)
 1364|  2.63k|            }
 1365|  2.63k|
 1366|  2.63k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  2.63k|            PropertyListNotEmpty() /
 1368|  2.63k|            { FocusedTriplePattern::default() }
 1369|  2.63k|
 1370|  2.63k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  2.63k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  2.63k|                a.focus.push(b.focus);
 1373|  2.63k|                a.patterns.extend(b.patterns);
 1374|  2.63k|                a
 1375|  2.63k|            })
 1376|  2.63k|        }
 1377|  2.63k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  2.63k|            FocusedTriplePattern {
 1379|  2.63k|                focus: (p, o.focus),
 1380|  2.63k|                patterns: o.patterns
 1381|  2.63k|            }
 1382|  2.63k|        }
 1383|  2.63k|
 1384|  2.63k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  2.63k|
 1386|  2.63k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  2.63k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  2.63k|                a.focus.push(b.focus);
 1389|  2.63k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  2.63k|                a
 1391|  2.63k|            })
 1392|  2.63k|        }
 1393|  2.63k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  2.63k|
 1395|  2.63k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  2.63k|            if let Some(a) = a {
 1397|  2.63k|                let mut patterns = g.patterns;
 1398|  2.63k|                patterns.extend(a.patterns);
 1399|  2.63k|                FocusedTriplePattern {
 1400|  2.63k|                    focus: AnnotatedTerm {
 1401|  2.63k|                        term: g.focus,
 1402|  2.63k|                        annotations: a.focus
 1403|  2.63k|                    },
 1404|  2.63k|                    patterns
 1405|  2.63k|                }
 1406|  2.63k|            } else {
 1407|  2.63k|                FocusedTriplePattern {
 1408|  2.63k|                    focus: AnnotatedTerm {
 1409|  2.63k|                        term: g.focus,
 1410|  2.63k|                        annotations: Vec::new()
 1411|  2.63k|                    },
 1412|  2.63k|                    patterns: g.patterns
 1413|  2.63k|                }
 1414|  2.63k|            }
 1415|  2.63k|        }
 1416|  2.63k|
 1417|  2.63k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  2.63k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  2.63k|                let mut patterns = po.patterns;
 1420|  2.63k|                for (p, os) in po.focus {
 1421|  2.63k|                    for o in os {
 1422|  2.63k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  2.63k|                    }
 1424|  2.63k|                }
 1425|  2.63k|                Ok(patterns)
 1426|  2.63k|            } /
 1427|  2.63k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  2.63k|                let mut patterns = s.patterns;
 1429|  2.63k|                patterns.extend(po.patterns);
 1430|  2.63k|                for (p, os) in po.focus {
 1431|  2.63k|                    for o in os {
 1432|  2.63k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  2.63k|                    }
 1434|  2.63k|                }
 1435|  2.63k|                Ok(patterns)
 1436|  2.63k|            }
 1437|  2.63k|
 1438|  2.63k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  2.63k|            PropertyListPathNotEmpty() /
 1440|  2.63k|            { FocusedTripleOrPathPattern::default() }
 1441|  2.63k|
 1442|  2.63k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  2.63k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  2.63k|                    focus: vec![(hp, ho.focus)],
 1445|  2.63k|                    patterns: ho.patterns
 1446|  2.63k|                }, |mut a, b| {
 1447|  2.63k|                    a.focus.push(b.focus);
 1448|  2.63k|                    a.patterns.extend(b.patterns);
 1449|  2.63k|                    a
 1450|  2.63k|                })
 1451|  2.63k|        }
 1452|  2.63k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  2.63k|            c
 1454|  2.63k|        }
 1455|  2.63k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  2.63k|            FocusedTripleOrPathPattern {
 1457|  2.63k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  2.63k|                patterns: o.patterns
 1459|  2.63k|            }
 1460|  2.63k|        }
 1461|  2.63k|
 1462|  2.63k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  2.63k|            p.into()
 1464|  2.63k|        }
 1465|  2.63k|
 1466|  2.63k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  2.63k|            v.into()
 1468|  2.63k|        }
 1469|  2.63k|
 1470|  2.63k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  2.63k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  2.63k|                a.focus.push(b.focus);
 1473|  2.63k|                a.patterns.extend(b.patterns);
 1474|  2.63k|                a
 1475|  2.63k|            })
 1476|  2.63k|        }
 1477|  2.63k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  2.63k|
 1479|  2.63k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  2.63k|             if let Some(a) = a {
 1481|  2.63k|                let mut patterns = g.patterns;
 1482|  2.63k|                patterns.extend(a.patterns);
 1483|  2.63k|                FocusedTripleOrPathPattern {
 1484|  2.63k|                    focus: AnnotatedTermPath {
 1485|  2.63k|                        term: g.focus,
 1486|  2.63k|                        annotations: a.focus
 1487|  2.63k|                    },
 1488|  2.63k|                    patterns
 1489|  2.63k|                }
 1490|  2.63k|            } else {
 1491|  2.63k|                FocusedTripleOrPathPattern {
 1492|  2.63k|                    focus: AnnotatedTermPath {
 1493|  2.63k|                        term: g.focus,
 1494|  2.63k|                        annotations: Vec::new()
 1495|  2.63k|                    },
 1496|  2.63k|                    patterns: g.patterns
 1497|  2.63k|                }
 1498|  2.63k|            }
 1499|  2.63k|        }
 1500|  2.63k|
 1501|  2.63k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  2.63k|
 1503|  2.63k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  2.63k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  2.63k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  2.63k|            })
 1507|  2.63k|        }
 1508|  2.63k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  2.63k|
 1510|  2.63k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  2.63k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  2.63k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  2.63k|            })
 1514|  2.63k|        }
 1515|  2.63k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  2.63k|
 1517|  2.63k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  2.63k|            match o {
 1519|  2.63k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  2.63k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  2.63k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  2.63k|                Some(_) => unreachable!(),
 1523|  2.63k|                None => p
 1524|  2.63k|            }
 1525|  2.63k|        }
 1526|  2.63k|        rule PathElt_op() -> char =
 1527|  2.63k|            "*" { '*' } /
 1528|  2.63k|            "+" { '+' } /
 1529|  2.63k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  2.63k|
 1531|  2.63k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  2.63k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  2.63k|            PathElt()
 1534|  2.63k|
 1535|  2.63k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  2.63k|            v:iri() { v.into() } /
 1537|  2.63k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  2.63k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  2.63k|            "(" _ p:Path() _ ")" { p }
 1540|  2.63k|
 1541|  2.63k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  2.63k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  2.63k|                let mut direct = Vec::new();
 1544|  2.63k|                let mut inverse = Vec::new();
 1545|  2.63k|                for e in p {
 1546|  2.63k|                    match e {
 1547|  2.63k|                        Either::Left(a) => direct.push(a),
 1548|  2.63k|                        Either::Right(b) => inverse.push(b)
 1549|  2.63k|                    }
 1550|  2.63k|                }
 1551|  2.63k|                if inverse.is_empty() {
 1552|  2.63k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  2.63k|                } else if direct.is_empty() {
 1554|  2.63k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  2.63k|                } else {
 1556|  2.63k|                    PropertyPathExpression::Alternative(
 1557|  2.63k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  2.63k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  2.63k|                    )
 1560|  2.63k|                }
 1561|  2.63k|            } /
 1562|  2.63k|            p:PathOneInPropertySet() {
 1563|  2.63k|                match p {
 1564|  2.63k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  2.63k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  2.63k|                }
 1567|  2.63k|            }
 1568|  2.63k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  2.63k|
 1570|  2.63k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  2.63k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  2.63k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  2.63k|            v:iri() { Either::Left(v) } /
 1574|  2.63k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  2.63k|
 1576|  2.63k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  2.63k|
 1578|  2.63k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  2.63k|            let mut patterns = po.patterns;
 1580|  2.63k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  2.63k|            for (p, os) in po.focus {
 1582|  2.63k|                for o in os {
 1583|  2.63k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  2.63k|                }
 1585|  2.63k|            }
 1586|  2.63k|            Ok(FocusedTriplePattern {
 1587|  2.63k|                focus: bnode,
 1588|  2.63k|                patterns
 1589|  2.63k|            })
 1590|  2.63k|        }
 1591|  2.63k|
 1592|  2.63k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  2.63k|
 1594|  2.63k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  2.63k|            let mut patterns = po.patterns;
 1596|  2.63k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  2.63k|            for (p, os) in po.focus {
 1598|  2.63k|                for o in os {
 1599|  2.63k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  2.63k|                }
 1601|  2.63k|            }
 1602|  2.63k|            Ok(FocusedTripleOrPathPattern {
 1603|  2.63k|                focus: bnode,
 1604|  2.63k|                patterns
 1605|  2.63k|            })
 1606|  2.63k|        }
 1607|  2.63k|
 1608|  2.63k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  2.63k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  2.63k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  2.63k|            for objWithPatterns in o.into_iter().rev() {
 1612|  2.63k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  2.63k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  2.63k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  2.63k|                current_list_node = new_blank_node;
 1616|  2.63k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  2.63k|            }
 1618|  2.63k|            FocusedTriplePattern {
 1619|  2.63k|                focus: current_list_node,
 1620|  2.63k|                patterns
 1621|  2.63k|            }
 1622|  2.63k|        }
 1623|  2.63k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  2.63k|
 1625|  2.63k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  2.63k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  2.63k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  2.63k|            for objWithPatterns in o.into_iter().rev() {
 1629|  2.63k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  2.63k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  2.63k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  2.63k|                current_list_node = new_blank_node;
 1633|  2.63k|                patterns.extend(objWithPatterns.patterns);
 1634|  2.63k|            }
 1635|  2.63k|            FocusedTripleOrPathPattern {
 1636|  2.63k|                focus: current_list_node,
 1637|  2.63k|                patterns
 1638|  2.63k|            }
 1639|  2.63k|        }
 1640|  2.63k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  2.63k|
 1642|  2.63k|
 1643|  2.63k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  2.63k|
 1645|  2.63k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  2.63k|
 1647|  2.63k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  2.63k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  2.63k|            TriplesNode()
 1650|  2.63k|
 1651|  2.63k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  2.63k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  2.63k|            TriplesNodePath()
 1654|  2.63k|
 1655|  2.63k|        rule VarOrTerm() -> TermPattern =
 1656|  2.63k|            v:Var() { v.into() } /
 1657|  2.63k|            t:QuotedTriple() {?
 1658|  2.63k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  2.63k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  2.63k|            } /
 1661|  2.63k|            t:GraphTerm() { t.into() }
 1662|  2.63k|
 1663|  2.63k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  2.63k|            Ok(TriplePattern {
 1665|  2.63k|                subject: s,
 1666|  2.63k|                predicate: p,
 1667|  2.63k|                object: o
 1668|  2.63k|            })
 1669|  2.63k|        }
 1670|  2.63k|
 1671|  2.63k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  2.63k|            Ok(GroundTriple {
 1673|  2.63k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  2.63k|                predicate: p,
 1675|  2.63k|                object: o
 1676|  2.63k|            })
 1677|  2.63k|        }
 1678|  2.63k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  2.63k|
 1680|  2.63k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  2.63k|            l:RDFLiteral() { l.into() } /
 1682|  2.63k|            l:NumericLiteral() { l.into() } /
 1683|  2.63k|            l:BooleanLiteral() { l.into() } /
 1684|  2.63k|            t:QuotedTripleData() {?
 1685|  2.63k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  2.63k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  2.63k|            }
 1688|  2.63k|
 1689|  2.63k|        rule VarOrIri() -> NamedNodePattern =
 1690|  2.63k|            v:Var() { v.into() } /
 1691|  2.63k|            i:iri() { i.into() }
 1692|  2.63k|
 1693|  2.63k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  2.63k|
 1695|  2.63k|        rule GraphTerm() -> Term =
 1696|  2.63k|            i:iri() { i.into() } /
 1697|  2.63k|            l:RDFLiteral() { l.into() } /
 1698|  2.63k|            l:NumericLiteral() { l.into() } /
 1699|  2.63k|            l:BooleanLiteral() { l.into() } /
 1700|  2.63k|            b:BlankNode() { b.into() } /
 1701|  2.63k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  2.63k|
 1703|  2.63k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  2.63k|
 1705|  2.63k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  2.63k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  2.63k|        }
 1708|  2.63k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  2.63k|
 1710|  2.63k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  2.63k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  2.63k|        }
 1713|  2.63k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  2.63k|
 1715|  2.63k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  2.63k|
 1717|  2.63k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  2.63k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  2.63k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  2.63k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  2.63k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  2.63k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  2.63k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  2.63k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  2.63k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  2.63k|            Some(_) => unreachable!(),
 1727|  2.63k|            None => a
 1728|  2.63k|        } }
 1729|  2.63k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  2.63k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  2.63k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  2.63k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  2.63k|
 1734|  2.63k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  2.63k|
 1736|  2.63k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  2.63k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  2.63k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  2.63k|            Some(_) => unreachable!(),
 1740|  2.63k|            None => a,
 1741|  2.63k|        } }
 1742|  2.63k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  2.63k|            (s, e)
 1744|  2.63k|        }
 1745|  2.63k|
 1746|  2.63k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  2.63k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  2.63k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  2.63k|            Some(_) => unreachable!(),
 1750|  2.63k|            None => a
 1751|  2.63k|        } }
 1752|  2.63k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  2.63k|            (s, e)
 1754|  2.63k|        }
 1755|  2.63k|
 1756|  2.63k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  2.63k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  2.63k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  2.63k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  2.63k|            Some(_) => unreachable!(),
 1761|  2.63k|            None => e,
 1762|  2.63k|        } }
 1763|  2.63k|
 1764|  2.63k|        rule PrimaryExpression() -> Expression =
 1765|  2.63k|            BrackettedExpression()  /
 1766|  2.63k|            ExprQuotedTriple() /
 1767|  2.63k|            iriOrFunction() /
 1768|  2.63k|            v:Var() { v.into() } /
 1769|  2.63k|            l:RDFLiteral() { l.into() } /
 1770|  2.63k|            l:NumericLiteral() { l.into() } /
 1771|  2.63k|            l:BooleanLiteral() { l.into() } /
 1772|  2.63k|            BuiltInCall()
 1773|  2.63k|
 1774|  2.63k|        rule ExprVarOrTerm() -> Expression =
 1775|  2.63k|            ExprQuotedTriple() /
 1776|  2.63k|            i:iri() { i.into() } /
 1777|  2.63k|            l:RDFLiteral() { l.into() } /
 1778|  2.63k|            l:NumericLiteral() { l.into() } /
 1779|  2.63k|            l:BooleanLiteral() { l.into() } /
 1780|  2.63k|            v:Var() { v.into() }
 1781|  2.63k|
 1782|  2.63k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  2.63k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  2.63k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  2.63k|        }
 1786|  2.63k|
 1787|  2.63k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  2.63k|
 1789|  2.63k|        rule BuiltInCall() -> Expression =
 1790|  2.63k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  2.63k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  2.63k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  2.63k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  2.63k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  2.63k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  2.63k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  2.63k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  2.63k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  2.63k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  2.63k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  2.63k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  2.63k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  2.63k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  2.63k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  2.63k|            SubstringExpression() /
 1806|  2.63k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  2.63k|            StrReplaceExpression() /
 1808|  2.63k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  2.63k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  2.63k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  2.63k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  2.63k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  2.63k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  2.63k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  2.63k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  2.63k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  2.63k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  2.63k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  2.63k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  2.63k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  2.63k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  2.63k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  2.63k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  2.63k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  2.63k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  2.63k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  2.63k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  2.63k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  2.63k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  2.63k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  2.63k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  2.63k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  2.63k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  2.63k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  2.63k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  2.63k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  2.63k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  2.63k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  2.63k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  2.63k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  2.63k|            RegexExpression() /
 1842|  2.63k|            ExistsFunc() /
 1843|  2.63k|            NotExistsFunc() /
 1844|  2.63k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  2.63k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  2.63k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  2.63k|            } /
 1848|  2.63k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  2.63k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  2.63k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  2.63k|            } /
 1852|  2.63k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  2.63k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  2.63k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  2.63k|            } /
 1856|  2.63k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  2.63k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  2.63k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  2.63k|            } /
 1860|  2.63k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  2.63k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  2.63k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  2.63k|            } /
 1864|  2.63k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  2.63k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  2.63k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  2.63k|            }
 1868|  2.63k|
 1869|  2.63k|        rule RegexExpression() -> Expression =
 1870|  2.63k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  2.63k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  2.63k|
 1873|  2.63k|
 1874|  2.63k|        rule SubstringExpression() -> Expression =
 1875|  2.63k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  2.63k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  2.63k|
 1878|  2.63k|
 1879|  2.63k|        rule StrReplaceExpression() -> Expression =
 1880|  2.63k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  2.63k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  2.63k|
 1883|  2.63k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  2.63k|
 1885|  2.63k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  2.63k|
 1887|  2.63k|        rule Aggregate() -> AggregateExpression =
 1888|  2.63k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  2.63k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  2.63k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  2.63k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  2.63k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  2.63k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  2.63k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  2.63k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  2.63k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  2.63k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  2.63k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  2.63k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  2.63k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  2.63k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  2.63k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  2.63k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  2.63k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  2.63k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  2.63k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  2.63k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  2.63k|
 1909|  2.63k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  2.63k|            match a {
 1911|  2.63k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  2.63k|                None => i.into()
 1913|  2.63k|            }
 1914|  2.63k|        }
 1915|  2.63k|
 1916|  2.63k|        rule RDFLiteral() -> Literal =
 1917|  2.63k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  2.63k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  2.63k|            value:String() { Literal::new_simple_literal(value) }
 1920|  2.63k|
 1921|  2.63k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  2.63k|
 1923|  2.63k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  2.63k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  2.63k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  2.63k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  2.63k|
 1928|  2.63k|        rule NumericLiteralPositive() -> Literal =
 1929|  2.63k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  2.63k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  2.63k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  2.63k|
 1933|  2.63k|
 1934|  2.63k|        rule NumericLiteralNegative() -> Literal =
 1935|  2.63k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  2.63k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  2.63k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  2.63k|
 1939|  2.63k|        rule BooleanLiteral() -> Literal =
 1940|  2.63k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  2.63k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  2.63k|
 1943|  2.63k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  2.63k|
 1945|  2.63k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  2.63k|            NamedNode::from(i)
 1947|  2.63k|        }
 1948|  2.63k|
 1949|  2.63k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  2.63k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  2.63k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  2.63k|            } else {
 1953|  2.63k|                Err("Prefix not found")
 1954|  2.63k|            } }
 1955|  2.63k|
 1956|  2.63k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  2.63k|            let node = BlankNode::new_unchecked(id);
 1958|  2.63k|            if state.used_bnodes.contains(&node) {
 1959|  2.63k|                Err("Already used blank node id")
 1960|  2.63k|            } else {
 1961|  2.63k|                state.currently_used_bnodes.insert(node.clone());
 1962|  2.63k|                Ok(node)
 1963|  2.63k|            }
 1964|  2.63k|        } / ANON() { BlankNode::default() }
 1965|  2.63k|
 1966|  2.63k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  2.63k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  2.63k|        }
 1969|  2.63k|
 1970|  2.63k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  2.63k|            ns
 1972|  2.63k|        }
 1973|  2.63k|
 1974|  2.63k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  2.63k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  2.63k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  2.63k|                iri.push_str(base);
 1978|  2.63k|                for chunk in local.split('\\') { // We remove \
 1979|  2.63k|                    iri.push_str(chunk);
 1980|  2.63k|                }
 1981|  2.63k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  2.63k|            } else {
 1983|  2.63k|                Err("Prefix not found")
 1984|  2.63k|            }
 1985|  2.63k|        }
 1986|  2.63k|
 1987|  2.63k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  2.63k|            b
 1989|  2.63k|        }
 1990|  2.63k|
 1991|  2.63k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  2.63k|
 1993|  2.63k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  2.63k|
 1995|  2.63k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  2.63k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  2.63k|        }
 1998|  2.63k|
 1999|  2.63k|        rule INTEGER() = ['0'..='9']+
 2000|  2.63k|
 2001|  2.63k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  2.63k|
 2003|  2.63k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  2.63k|
 2005|  2.63k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  2.63k|
 2007|  2.63k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  2.63k|
 2009|  2.63k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  2.63k|
 2011|  2.63k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  2.63k|
 2013|  2.63k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  2.63k|
 2015|  2.63k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  2.63k|
 2017|  2.63k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  2.63k|
 2019|  2.63k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  2.63k|             unescape_string(l)
 2021|  2.63k|        }
 2022|  2.63k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  2.63k|
 2024|  2.63k|
 2025|  2.63k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  2.63k|             unescape_string(l)
 2027|  2.63k|        }
 2028|  2.63k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  2.63k|
 2030|  2.63k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  2.63k|             unescape_string(l)
 2032|  2.63k|        }
 2033|  2.63k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  2.63k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  2.63k|
 2036|  2.63k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  2.63k|             unescape_string(l)
 2038|  2.63k|        }
 2039|  2.63k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  2.63k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  2.63k|
 2042|  2.63k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  2.63k|
 2044|  2.63k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  2.63k|
 2046|  2.63k|        rule NIL() = "(" WS()* ")"
 2047|  2.63k|
 2048|  2.63k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  2.63k|
 2050|  2.63k|        rule ANON() = "[" WS()* "]"
 2051|  2.63k|
 2052|  2.63k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  2.63k|
 2054|  2.63k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  2.63k|
 2056|  2.63k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  2.63k|
 2058|  2.63k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  2.63k|
 2060|  2.63k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  2.63k|
 2062|  2.63k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  2.63k|
 2064|  2.63k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  2.63k|
 2066|  2.63k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  2.63k|
 2068|  2.63k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  2.63k|
 2070|  2.63k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  2.63k|
 2072|  2.63k|        //space
 2073|  2.63k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  2.63k|
 2075|  2.63k|        //comment
 2076|  2.63k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  2.63k|
 2078|  2.63k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  2.63k|            if input.eq_ignore_ascii_case(literal) {
 2080|  2.63k|                Ok(())
 2081|  2.63k|            } else {
 2082|  2.63k|                Err(literal)
 2083|  2.63k|            }
 2084|  2.63k|        }
 2085|  2.63k|    }
 2086|  2.63k|}
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_PathNegatedPropertySets_0B7_:
 1562|    317|            p:PathOneInPropertySet() {
 1563|    317|                match p {
 1564|    278|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|     39|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_TriplesBlock0B7_:
 1242|  1.67k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  1.67k|            hs.into_iter().flatten().collect()
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_Selection_init0B7_:
  817|  2.00k|        rule Selection_init() = {
  818|  2.00k|            state.aggregates.push(Vec::new())
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_NumericLiteralUnsigneds_0B7_:
 1925|  1.33k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_Modify0s_0B9_:
 1086|  1.73k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|    247|                    QuadPattern {
 1088|    247|                        subject: q.subject,
 1089|    247|                        predicate: q.predicate,
 1090|    247|                        object: q.object,
 1091|    247|                        graph_name: with.clone().into()
 1092|    247|                    }
 1093|       |                } else {
 1094|  1.48k|                    q
 1095|  1.73k|                }).collect();
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser34___parse_RelationalExpression_inners_0B7_:
 1731|    170|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCalls_0B7_:
 1791|     21|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_PathPrimarys0_0B7_:
 1538|  1.64k|            "!" _ p:PathNegatedPropertySet() { p } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_InsertClause0B7_:
 1123|  2.40k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_GraphGraphPattern0B7_:
 1262|     86|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|     86|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_PathOneInPropertySets1_0B7_:
 1574|    452|            "a" { Either::Left(rdf::TYPE.into()) }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_PathElt_op0B7_:
 1527|  1.21k|            "*" { '*' } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser13___parse_Clear0B7_:
  983|  1.33k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  1.33k|            vec![GraphUpdateOperation::Clear { silent, graph }]
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_PathOneInPropertySet0B7_:
 1571|  2.81k|            "^" _ v:iri() { Either::Right(v) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCalls4_0B7_:
 1796|      8|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_Modify_with0B7_:
 1108|  2.16k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_GroupCondition0B7_:
  936|     49|            e:BuiltInCall() { (e, None) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_PathElt_ops_0B7_:
 1528|  2.56k|            "+" { '+' } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_GraphOrDefaults_0B7_:
 1135|  1.17k|        } / (i("GRAPH") _)? g:iri() {
 1136|  1.17k|            GraphName::NamedNode(g)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_VarOrIri0B7_:
 1690|  5.71k|            v:Var() { v.into() } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser26___parse_InlineDataFull_var0B7_:
 1292|  3.50k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_GroundQuadData00B9_:
 1152|  1.18k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_Object0B7_:
 1395|  17.4k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  17.4k|            if let Some(a) = a {
 1397|      0|                let mut patterns = g.patterns;
 1398|      0|                patterns.extend(a.patterns);
 1399|      0|                FocusedTriplePattern {
 1400|      0|                    focus: AnnotatedTerm {
 1401|      0|                        term: g.focus,
 1402|      0|                        annotations: a.focus
 1403|      0|                    },
 1404|      0|                    patterns
 1405|      0|                }
 1406|       |            } else {
 1407|  17.4k|                FocusedTriplePattern {
 1408|  17.4k|                    focus: AnnotatedTerm {
 1409|  17.4k|                        term: g.focus,
 1410|  17.4k|                        annotations: Vec::new()
 1411|  17.4k|                    },
 1412|  17.4k|                    patterns: g.patterns
 1413|  17.4k|                }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_GraphNode0B7_:
 1648|  17.4k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCalls2_0B7_:
 1794|      1|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_InlineDataFull_value0B7_:
 1294|  4.94k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_ObjectListPath_item0B7_:
 1477|  15.3k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_RelationalExpression0B7_:
 1717|  3.16k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  2.53k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  2.33k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  2.30k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  2.22k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  1.81k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  1.78k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  1.73k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  1.56k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|      0|            Some(_) => unreachable!(),
 1727|    630|            None => a
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_GroupGraphPatternSub00B9_:
 1194|    222|                        g.on_in_scope_variable(|v| {
 1195|    222|                            if defined_variables.contains(v) {
 1196|      0|                                contains = true;
 1197|    222|                            }
 1198|    222|                        });
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_ObjectPath0B7_:
 1479|  15.3k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  15.3k|             if let Some(a) = a {
 1481|      0|                let mut patterns = g.patterns;
 1482|      0|                patterns.extend(a.patterns);
 1483|      0|                FocusedTripleOrPathPattern {
 1484|      0|                    focus: AnnotatedTermPath {
 1485|      0|                        term: g.focus,
 1486|      0|                        annotations: a.focus
 1487|      0|                    },
 1488|      0|                    patterns
 1489|      0|                }
 1490|       |            } else {
 1491|  15.3k|                FocusedTripleOrPathPattern {
 1492|  15.3k|                    focus: AnnotatedTermPath {
 1493|  15.3k|                        term: g.focus,
 1494|  15.3k|                        annotations: Vec::new()
 1495|  15.3k|                    },
 1496|  15.3k|                    patterns: g.patterns
 1497|  15.3k|                }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_ExistsFunc0B7_:
 1883|     64|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_SelectClause_members_0B7_:
  829|    919|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_DataBlockValues3_0B7_:
 1305|  1.58k|            i("UNDEF") { None }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_GroupGraphPatterns_0B7_:
 1174|  1.37k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser21___parse_NotExistsFunc0B7_:
 1885|     50|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_GraphRefAll0B7_:
 1141|    960|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_SelectClause_variables0B7_:
  825|    852|            "*" { SelectionVariables::Star } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_DataBlockValues_0B7_:
 1301|  3.29k|            i:iri() { Some(i.into()) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser33___parse_BlankNodePropertyListPath0B7_:
  778|  10.3k|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|       |            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|       |                Ok((vars, vals))
 1288|       |            } else {
 1289|       |                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|       |            }
 1291|       |        }
 1292|       |        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|       |        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|       |        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|       |
 1296|       |        rule DataBlockValue() -> Option<GroundTerm> =
 1297|       |            t:QuotedTripleData() {?
 1298|       |                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|       |            } /
 1301|       |            i:iri() { Some(i.into()) } /
 1302|       |            l:RDFLiteral() { Some(l.into()) } /
 1303|       |            l:NumericLiteral() { Some(l.into()) } /
 1304|       |            l:BooleanLiteral() { Some(l.into()) } /
 1305|       |            i("UNDEF") { None }
 1306|       |
 1307|       |        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|       |            PartialGraphPattern::Minus(p)
 1309|       |        }
 1310|       |
 1311|       |        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|       |            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|       |            }).map(PartialGraphPattern::Other)
 1315|       |        }
 1316|       |        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|       |
 1318|       |        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|       |            PartialGraphPattern::Filter(c)
 1320|       |        }
 1321|       |
 1322|       |        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|       |
 1324|       |        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|       |            Expression::FunctionCall(Function::Custom(f), a)
 1326|       |        }
 1327|       |
 1328|       |        rule ArgList() -> Vec<Expression> =
 1329|       |            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|       |            NIL() { Vec::new() }
 1331|       |        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|       |
 1333|       |        rule ExpressionList() -> Vec<Expression> =
 1334|       |            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|       |            NIL() { Vec::new() }
 1336|       |        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|       |
 1338|       |        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|       |
 1340|       |        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|       |            p.into_iter().flatten().collect()
 1342|       |        }
 1343|       |        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|       |
 1345|       |        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|       |            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|       |                let mut patterns = po.patterns;
 1348|       |                for (p, os) in po.focus {
 1349|       |                    for o in os {
 1350|       |                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|       |                    }
 1352|       |                }
 1353|       |                Ok(patterns)
 1354|       |            } /
 1355|       |            s:TriplesNode() _ po:PropertyList() {?
 1356|       |                let mut patterns = s.patterns;
 1357|       |                patterns.extend(po.patterns);
 1358|       |                for (p, os) in po.focus {
 1359|       |                    for o in os {
 1360|       |                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|       |                    }
 1362|       |                }
 1363|       |                Ok(patterns)
 1364|       |            }
 1365|       |
 1366|       |        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|       |            PropertyListNotEmpty() /
 1368|       |            { FocusedTriplePattern::default() }
 1369|       |
 1370|       |        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|       |            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|       |                a.focus.push(b.focus);
 1373|       |                a.patterns.extend(b.patterns);
 1374|       |                a
 1375|       |            })
 1376|       |        }
 1377|       |        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|       |            FocusedTriplePattern {
 1379|       |                focus: (p, o.focus),
 1380|       |                patterns: o.patterns
 1381|       |            }
 1382|       |        }
 1383|       |
 1384|       |        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|       |
 1386|       |        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|       |            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|       |                a.focus.push(b.focus);
 1389|       |                a.patterns.extend_from_slice(&b.patterns);
 1390|       |                a
 1391|       |            })
 1392|       |        }
 1393|       |        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|       |
 1395|       |        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|       |            if let Some(a) = a {
 1397|       |                let mut patterns = g.patterns;
 1398|       |                patterns.extend(a.patterns);
 1399|       |                FocusedTriplePattern {
 1400|       |                    focus: AnnotatedTerm {
 1401|       |                        term: g.focus,
 1402|       |                        annotations: a.focus
 1403|       |                    },
 1404|       |                    patterns
 1405|       |                }
 1406|       |            } else {
 1407|       |                FocusedTriplePattern {
 1408|       |                    focus: AnnotatedTerm {
 1409|       |                        term: g.focus,
 1410|       |                        annotations: Vec::new()
 1411|       |                    },
 1412|       |                    patterns: g.patterns
 1413|       |                }
 1414|       |            }
 1415|       |        }
 1416|       |
 1417|       |        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|       |            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|       |                let mut patterns = po.patterns;
 1420|       |                for (p, os) in po.focus {
 1421|       |                    for o in os {
 1422|       |                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|       |                    }
 1424|       |                }
 1425|       |                Ok(patterns)
 1426|       |            } /
 1427|       |            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|       |                let mut patterns = s.patterns;
 1429|       |                patterns.extend(po.patterns);
 1430|       |                for (p, os) in po.focus {
 1431|       |                    for o in os {
 1432|       |                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|       |                    }
 1434|       |                }
 1435|       |                Ok(patterns)
 1436|       |            }
 1437|       |
 1438|       |        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|       |            PropertyListPathNotEmpty() /
 1440|       |            { FocusedTripleOrPathPattern::default() }
 1441|       |
 1442|       |        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|       |                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|       |                    focus: vec![(hp, ho.focus)],
 1445|       |                    patterns: ho.patterns
 1446|       |                }, |mut a, b| {
 1447|       |                    a.focus.push(b.focus);
 1448|       |                    a.patterns.extend(b.patterns);
 1449|       |                    a
 1450|       |                })
 1451|       |        }
 1452|       |        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|       |            c
 1454|       |        }
 1455|       |        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|       |            FocusedTripleOrPathPattern {
 1457|       |                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|       |                patterns: o.patterns
 1459|       |            }
 1460|       |        }
 1461|       |
 1462|       |        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|       |            p.into()
 1464|       |        }
 1465|       |
 1466|       |        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|       |            v.into()
 1468|       |        }
 1469|       |
 1470|       |        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|       |            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|       |                a.focus.push(b.focus);
 1473|       |                a.patterns.extend(b.patterns);
 1474|       |                a
 1475|       |            })
 1476|       |        }
 1477|       |        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|       |
 1479|       |        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|       |             if let Some(a) = a {
 1481|       |                let mut patterns = g.patterns;
 1482|       |                patterns.extend(a.patterns);
 1483|       |                FocusedTripleOrPathPattern {
 1484|       |                    focus: AnnotatedTermPath {
 1485|       |                        term: g.focus,
 1486|       |                        annotations: a.focus
 1487|       |                    },
 1488|       |                    patterns
 1489|       |                }
 1490|       |            } else {
 1491|       |                FocusedTripleOrPathPattern {
 1492|       |                    focus: AnnotatedTermPath {
 1493|       |                        term: g.focus,
 1494|       |                        annotations: Vec::new()
 1495|       |                    },
 1496|       |                    patterns: g.patterns
 1497|       |                }
 1498|       |            }
 1499|       |        }
 1500|       |
 1501|       |        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|       |
 1503|       |        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|       |            not_empty_fold(p.into_iter(), |a, b| {
 1505|       |                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|       |            })
 1507|       |        }
 1508|       |        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|       |
 1510|       |        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|       |            not_empty_fold(p.into_iter(), |a, b| {
 1512|       |                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|       |            })
 1514|       |        }
 1515|       |        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|       |
 1517|       |        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|       |            match o {
 1519|       |                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|       |                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|       |                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|       |                Some(_) => unreachable!(),
 1523|       |                None => p
 1524|       |            }
 1525|       |        }
 1526|       |        rule PathElt_op() -> char =
 1527|       |            "*" { '*' } /
 1528|       |            "+" { '+' } /
 1529|       |            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|       |
 1531|       |        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|       |            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|       |            PathElt()
 1534|       |
 1535|       |        rule PathPrimary() -> PropertyPathExpression =
 1536|       |            v:iri() { v.into() } /
 1537|       |            "a" { rdf::TYPE.into_owned().into() } /
 1538|       |            "!" _ p:PathNegatedPropertySet() { p } /
 1539|       |            "(" _ p:Path() _ ")" { p }
 1540|       |
 1541|       |        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|       |            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|       |                let mut direct = Vec::new();
 1544|       |                let mut inverse = Vec::new();
 1545|       |                for e in p {
 1546|       |                    match e {
 1547|       |                        Either::Left(a) => direct.push(a),
 1548|       |                        Either::Right(b) => inverse.push(b)
 1549|       |                    }
 1550|       |                }
 1551|       |                if inverse.is_empty() {
 1552|       |                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|       |                } else if direct.is_empty() {
 1554|       |                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|       |                } else {
 1556|       |                    PropertyPathExpression::Alternative(
 1557|       |                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|       |                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|       |                    )
 1560|       |                }
 1561|       |            } /
 1562|       |            p:PathOneInPropertySet() {
 1563|       |                match p {
 1564|       |                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|       |                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|       |                }
 1567|       |            }
 1568|       |        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|       |
 1570|       |        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|       |            "^" _ v:iri() { Either::Right(v) } /
 1572|       |            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|       |            v:iri() { Either::Left(v) } /
 1574|       |            "a" { Either::Left(rdf::TYPE.into()) }
 1575|       |
 1576|       |        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|       |
 1578|       |        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|       |            let mut patterns = po.patterns;
 1580|       |            let mut bnode = TermPattern::from(BlankNode::default());
 1581|       |            for (p, os) in po.focus {
 1582|       |                for o in os {
 1583|       |                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|       |                }
 1585|       |            }
 1586|       |            Ok(FocusedTriplePattern {
 1587|       |                focus: bnode,
 1588|       |                patterns
 1589|       |            })
 1590|       |        }
 1591|       |
 1592|       |        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|       |
 1594|       |        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  10.3k|            let mut patterns = po.patterns;
 1596|  10.3k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  21.0k|            for (p, os) in po.focus {
 1598|  24.0k|                for o in os {
 1599|  13.3k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|       |                }
 1601|       |            }
 1602|  10.3k|            Ok(FocusedTripleOrPathPattern {
 1603|  10.3k|                focus: bnode,
 1604|  10.3k|                patterns
 1605|  10.3k|            })
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_BooleanLiteral0B7_:
 1940|    226|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_ExpressionList0B7_:
 1334|    784|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser29___parse_Quads_TriplesTemplate00B9_:
 1159|  2.32k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser29___parse_Quads_TriplesTemplate0B7_:
 1158|  2.19k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  2.19k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser15___parse_LANGTAG0B7_:
  778|  2.06k|parser! {
  779|  2.06k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  2.06k|    grammar parser(state: &mut ParserState) for str {
  781|  2.06k|        pub rule QueryUnit() -> Query = Query()
  782|  2.06k|
  783|  2.06k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  2.06k|            q
  785|  2.06k|        }
  786|  2.06k|
  787|  2.06k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  2.06k|
  789|  2.06k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  2.06k|
  791|  2.06k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  2.06k|            state.base_iri = Some(i)
  793|  2.06k|        }
  794|  2.06k|
  795|  2.06k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  2.06k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  2.06k|        }
  798|  2.06k|
  799|  2.06k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  2.06k|            Ok(Query::Select {
  801|  2.06k|                dataset: d,
  802|  2.06k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  2.06k|                base_iri: state.base_iri.clone()
  804|  2.06k|            })
  805|  2.06k|        }
  806|  2.06k|
  807|  2.06k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  2.06k|            build_select(s, w, g, h, o, l, v, state)
  809|  2.06k|        }
  810|  2.06k|
  811|  2.06k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  2.06k|            Selection {
  813|  2.06k|                option: o,
  814|  2.06k|                variables: v
  815|  2.06k|            }
  816|  2.06k|        }
  817|  2.06k|        rule Selection_init() = {
  818|  2.06k|            state.aggregates.push(Vec::new())
  819|  2.06k|        }
  820|  2.06k|        rule SelectClause_option() -> SelectionOption =
  821|  2.06k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  2.06k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  2.06k|            { SelectionOption::Default }
  824|  2.06k|        rule SelectClause_variables() -> SelectionVariables =
  825|  2.06k|            "*" { SelectionVariables::Star } /
  826|  2.06k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  2.06k|        rule SelectClause_member() -> SelectionMember =
  828|  2.06k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  2.06k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  2.06k|
  831|  2.06k|        rule ConstructQuery() -> Query =
  832|  2.06k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  2.06k|                Ok(Query::Construct {
  834|  2.06k|                    template: c,
  835|  2.06k|                    dataset: d,
  836|  2.06k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  2.06k|                    base_iri: state.base_iri.clone()
  838|  2.06k|                })
  839|  2.06k|            } /
  840|  2.06k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  2.06k|                Ok(Query::Construct {
  842|  2.06k|                    template: c.clone(),
  843|  2.06k|                    dataset: d,
  844|  2.06k|                    pattern: build_select(
  845|  2.06k|                        Selection::no_op(),
  846|  2.06k|                        GraphPattern::Bgp { patterns: c },
  847|  2.06k|                        g, h, o, l, v, state
  848|  2.06k|                    )?,
  849|  2.06k|                    base_iri: state.base_iri.clone()
  850|  2.06k|                })
  851|  2.06k|            }
  852|  2.06k|
  853|  2.06k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  2.06k|
  855|  2.06k|        rule DescribeQuery() -> Query =
  856|  2.06k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  2.06k|                Ok(Query::Describe {
  858|  2.06k|                    dataset: d,
  859|  2.06k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  2.06k|                    base_iri: state.base_iri.clone()
  861|  2.06k|                })
  862|  2.06k|            } /
  863|  2.06k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  2.06k|                Ok(Query::Describe {
  865|  2.06k|                    dataset: d,
  866|  2.06k|                    pattern: build_select(Selection {
  867|  2.06k|                        option: SelectionOption::Default,
  868|  2.06k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  2.06k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  2.06k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  2.06k|                        }).collect())
  872|  2.06k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  2.06k|                    base_iri: state.base_iri.clone()
  874|  2.06k|                })
  875|  2.06k|            }
  876|  2.06k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  2.06k|
  878|  2.06k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  2.06k|            Ok(Query::Ask {
  880|  2.06k|                dataset: d,
  881|  2.06k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  2.06k|                base_iri: state.base_iri.clone()
  883|  2.06k|            })
  884|  2.06k|        }
  885|  2.06k|
  886|  2.06k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  2.06k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  2.06k|            if d.is_empty() {
  889|  2.06k|                return None;
  890|  2.06k|            }
  891|  2.06k|            let mut default = Vec::new();
  892|  2.06k|            let mut named = Vec::new();
  893|  2.06k|            for (d, n) in d {
  894|  2.06k|                if let Some(d) = d {
  895|  2.06k|                    default.push(d);
  896|  2.06k|                }
  897|  2.06k|                if let Some(n) = n {
  898|  2.06k|                    named.push(n);
  899|  2.06k|                }
  900|  2.06k|            }
  901|  2.06k|            Some(QueryDataset {
  902|  2.06k|                default, named: Some(named)
  903|  2.06k|            })
  904|  2.06k|        }
  905|  2.06k|
  906|  2.06k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  2.06k|            (Some(s), None)
  908|  2.06k|        }
  909|  2.06k|
  910|  2.06k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  2.06k|            (None, Some(s))
  912|  2.06k|        }
  913|  2.06k|
  914|  2.06k|        rule SourceSelector() -> NamedNode = iri()
  915|  2.06k|
  916|  2.06k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  2.06k|            p
  918|  2.06k|        }
  919|  2.06k|
  920|  2.06k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  2.06k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  2.06k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  2.06k|                if let Expression::Variable(v) = e {
  924|  2.06k|                    v
  925|  2.06k|                } else {
  926|  2.06k|                    let v = vo.unwrap_or_else(variable);
  927|  2.06k|                    projections.push((e, v.clone()));
  928|  2.06k|                    v
  929|  2.06k|                }
  930|  2.06k|            }).collect();
  931|  2.06k|            (clauses, projections)
  932|  2.06k|        }
  933|  2.06k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  2.06k|
  935|  2.06k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  2.06k|            e:BuiltInCall() { (e, None) } /
  937|  2.06k|            e:FunctionCall() { (e, None) } /
  938|  2.06k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  2.06k|            e:Var() { (e.into(), None) }
  940|  2.06k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  2.06k|
  942|  2.06k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  2.06k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  2.06k|        }
  945|  2.06k|
  946|  2.06k|        rule HavingCondition() -> Expression = Constraint()
  947|  2.06k|
  948|  2.06k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  2.06k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  2.06k|
  951|  2.06k|        rule OrderCondition() -> OrderExpression =
  952|  2.06k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  2.06k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  2.06k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  2.06k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  2.06k|
  957|  2.06k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  2.06k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  2.06k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  2.06k|
  961|  2.06k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  2.06k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  2.06k|        }
  964|  2.06k|
  965|  2.06k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  2.06k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  2.06k|        }
  968|  2.06k|
  969|  2.06k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  2.06k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  2.06k|            { None }
  972|  2.06k|
  973|  2.06k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  2.06k|
  975|  2.06k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  2.06k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  2.06k|
  978|  2.06k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  2.06k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  2.06k|        }
  981|  2.06k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  2.06k|
  983|  2.06k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  2.06k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  2.06k|        }
  986|  2.06k|
  987|  2.06k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  2.06k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  2.06k|        }
  990|  2.06k|
  991|  2.06k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  2.06k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  2.06k|        }
  994|  2.06k|
  995|  2.06k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  2.06k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  2.06k|            if from == to {
  998|  2.06k|                Vec::new() // identity case
  999|  2.06k|            } else {
 1000|  2.06k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  2.06k|                vec![copy_graph(from, to)]
 1002|  2.06k|            }
 1003|  2.06k|        }
 1004|  2.06k|
 1005|  2.06k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  2.06k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  2.06k|            if from == to {
 1008|  2.06k|                Vec::new() // identity case
 1009|  2.06k|            } else {
 1010|  2.06k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  2.06k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  2.06k|            }
 1013|  2.06k|        }
 1014|  2.06k|
 1015|  2.06k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  2.06k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  2.06k|            if from == to {
 1018|  2.06k|                Vec::new() // identity case
 1019|  2.06k|            } else {
 1020|  2.06k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  2.06k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  2.06k|            }
 1023|  2.06k|        }
 1024|  2.06k|
 1025|  2.06k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  2.06k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  2.06k|        }
 1028|  2.06k|
 1029|  2.06k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  2.06k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  2.06k|        }
 1032|  2.06k|
 1033|  2.06k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  2.06k|            let pattern = d.iter().map(|q| {
 1035|  2.06k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  2.06k|                match &q.graph_name {
 1037|  2.06k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  2.06k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  2.06k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  2.06k|                }
 1041|  2.06k|            }).reduce(new_join).unwrap_or_default();
 1042|  2.06k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  2.06k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  2.06k|                delete,
 1045|  2.06k|                insert: Vec::new(),
 1046|  2.06k|                using: None,
 1047|  2.06k|                pattern: Box::new(pattern)
 1048|  2.06k|            }])
 1049|  2.06k|        }
 1050|  2.06k|
 1051|  2.06k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  2.06k|            let (delete, insert) = c;
 1053|  2.06k|            let mut delete = delete.unwrap_or_default();
 1054|  2.06k|            let mut insert = insert.unwrap_or_default();
 1055|  2.06k|            #[allow(clippy::shadow_same)]
 1056|  2.06k|            let mut pattern = pattern;
 1057|  2.06k|
 1058|  2.06k|            let mut using = if u.is_empty() {
 1059|  2.06k|                None
 1060|  2.06k|            } else {
 1061|  2.06k|                let mut default = Vec::new();
 1062|  2.06k|                let mut named = Vec::new();
 1063|  2.06k|                for (d, n) in u {
 1064|  2.06k|                    if let Some(d) = d {
 1065|  2.06k|                        default.push(d)
 1066|  2.06k|                    }
 1067|  2.06k|                    if let Some(n) = n {
 1068|  2.06k|                        named.push(n)
 1069|  2.06k|                    }
 1070|  2.06k|                }
 1071|  2.06k|                Some(QueryDataset { default, named: Some(named) })
 1072|  2.06k|            };
 1073|  2.06k|
 1074|  2.06k|            if let Some(with) = with {
 1075|  2.06k|                // We inject WITH everywhere
 1076|  2.06k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  2.06k|                    GroundQuadPattern {
 1078|  2.06k|                        subject: q.subject,
 1079|  2.06k|                        predicate: q.predicate,
 1080|  2.06k|                        object: q.object,
 1081|  2.06k|                        graph_name: with.clone().into()
 1082|  2.06k|                    }
 1083|  2.06k|                } else {
 1084|  2.06k|                    q
 1085|  2.06k|                }).collect();
 1086|  2.06k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  2.06k|                    QuadPattern {
 1088|  2.06k|                        subject: q.subject,
 1089|  2.06k|                        predicate: q.predicate,
 1090|  2.06k|                        object: q.object,
 1091|  2.06k|                        graph_name: with.clone().into()
 1092|  2.06k|                    }
 1093|  2.06k|                } else {
 1094|  2.06k|                    q
 1095|  2.06k|                }).collect();
 1096|  2.06k|                if using.is_none() {
 1097|  2.06k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  2.06k|                }
 1099|  2.06k|            }
 1100|  2.06k|
 1101|  2.06k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  2.06k|                delete,
 1103|  2.06k|                insert,
 1104|  2.06k|                using,
 1105|  2.06k|                pattern: Box::new(pattern)
 1106|  2.06k|            }]
 1107|  2.06k|        }
 1108|  2.06k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  2.06k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  2.06k|            (Some(d), i)
 1111|  2.06k|        } / i:InsertClause() {
 1112|  2.06k|            (None, Some(i))
 1113|  2.06k|        }
 1114|  2.06k|        rule Modify_clear() = {
 1115|  2.06k|            state.used_bnodes.clear();
 1116|  2.06k|            state.currently_used_bnodes.clear();
 1117|  2.06k|        }
 1118|  2.06k|
 1119|  2.06k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  2.06k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  2.06k|        }
 1122|  2.06k|
 1123|  2.06k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  2.06k|
 1125|  2.06k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  2.06k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  2.06k|            (Some(i), None)
 1128|  2.06k|        }
 1129|  2.06k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  2.06k|            (None, Some(i))
 1131|  2.06k|        }
 1132|  2.06k|
 1133|  2.06k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  2.06k|            GraphName::DefaultGraph
 1135|  2.06k|        } / (i("GRAPH") _)? g:iri() {
 1136|  2.06k|            GraphName::NamedNode(g)
 1137|  2.06k|        }
 1138|  2.06k|
 1139|  2.06k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  2.06k|
 1141|  2.06k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  2.06k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  2.06k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  2.06k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  2.06k|
 1146|  2.06k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  2.06k|
 1148|  2.06k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  2.06k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  2.06k|        }
 1151|  2.06k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  2.06k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  2.06k|        }
 1154|  2.06k|
 1155|  2.06k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  2.06k|            q.into_iter().flatten().collect()
 1157|  2.06k|        }
 1158|  2.06k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  2.06k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  2.06k|        } //TODO: return iter?
 1161|  2.06k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  2.06k|
 1163|  2.06k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  2.06k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  2.06k|        }
 1166|  2.06k|
 1167|  2.06k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  2.06k|            ts.into_iter().flatten().collect()
 1169|  2.06k|        }
 1170|  2.06k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  2.06k|
 1172|  2.06k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  2.06k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  2.06k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  2.06k|        rule GroupGraphPattern_clear() = {
 1176|  2.06k|             // We deal with blank nodes aliases rule
 1177|  2.06k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  2.06k|            state.currently_used_bnodes.clear();
 1179|  2.06k|        }
 1180|  2.06k|
 1181|  2.06k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  2.06k|            let mut filter: Option<Expression> = None;
 1183|  2.06k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  2.06k|            for e in b.into_iter().flatten() {
 1185|  2.06k|                match e {
 1186|  2.06k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  2.06k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  2.06k|                    }
 1189|  2.06k|                    #[cfg(feature = "sep-0006")]
 1190|  2.06k|                    PartialGraphPattern::Lateral(p) => {
 1191|  2.06k|                        let mut defined_variables = HashSet::default();
 1192|  2.06k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  2.06k|                        let mut contains = false;
 1194|  2.06k|                        g.on_in_scope_variable(|v| {
 1195|  2.06k|                            if defined_variables.contains(v) {
 1196|  2.06k|                                contains = true;
 1197|  2.06k|                            }
 1198|  2.06k|                        });
 1199|  2.06k|                        if contains {
 1200|  2.06k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  2.06k|                        }
 1202|  2.06k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  2.06k|                    }
 1204|  2.06k|                    PartialGraphPattern::Minus(p) => {
 1205|  2.06k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  2.06k|                    }
 1207|  2.06k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  2.06k|                        let mut contains = false;
 1209|  2.06k|                        g.on_in_scope_variable(|v| {
 1210|  2.06k|                            if *v == variable {
 1211|  2.06k|                                contains = true;
 1212|  2.06k|                            }
 1213|  2.06k|                        });
 1214|  2.06k|                        if contains {
 1215|  2.06k|                            return Err("BIND is overriding an existing variable")
 1216|  2.06k|                        }
 1217|  2.06k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  2.06k|                    }
 1219|  2.06k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  2.06k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  2.06k|                    } else {
 1222|  2.06k|                        expr
 1223|  2.06k|                    }),
 1224|  2.06k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  2.06k|                }
 1226|  2.06k|            }
 1227|  2.06k|
 1228|  2.06k|            Ok(if let Some(expr) = filter {
 1229|  2.06k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  2.06k|            } else {
 1231|  2.06k|                g
 1232|  2.06k|            })
 1233|  2.06k|        }
 1234|  2.06k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  2.06k|            let mut result = vec![a];
 1236|  2.06k|            if let Some(v) = b {
 1237|  2.06k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  2.06k|            }
 1239|  2.06k|            result
 1240|  2.06k|        }
 1241|  2.06k|
 1242|  2.06k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  2.06k|            hs.into_iter().flatten().collect()
 1244|  2.06k|        }
 1245|  2.06k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  2.06k|
 1247|  2.06k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  2.06k|
 1249|  2.06k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  2.06k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  2.06k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  2.06k|            } else {
 1253|  2.06k|               PartialGraphPattern::Optional(p, None)
 1254|  2.06k|            }
 1255|  2.06k|        }
 1256|  2.06k|
 1257|  2.06k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  2.06k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  2.06k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  2.06k|        }
 1261|  2.06k|
 1262|  2.06k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  2.06k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  2.06k|        }
 1265|  2.06k|
 1266|  2.06k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  2.06k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  2.06k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  2.06k|
 1270|  2.06k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  2.06k|            PartialGraphPattern::Bind(e, v)
 1272|  2.06k|        }
 1273|  2.06k|
 1274|  2.06k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  2.06k|
 1276|  2.06k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  2.06k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  2.06k|        }
 1279|  2.06k|
 1280|  2.06k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  2.06k|            (vec![var], d)
 1282|  2.06k|        }
 1283|  2.06k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  2.06k|
 1285|  2.06k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  2.06k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  2.06k|                Ok((vars, vals))
 1288|  2.06k|            } else {
 1289|  2.06k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  2.06k|            }
 1291|  2.06k|        }
 1292|  2.06k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  2.06k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  2.06k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  2.06k|
 1296|  2.06k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  2.06k|            t:QuotedTripleData() {?
 1298|  2.06k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  2.06k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  2.06k|            } /
 1301|  2.06k|            i:iri() { Some(i.into()) } /
 1302|  2.06k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  2.06k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  2.06k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  2.06k|            i("UNDEF") { None }
 1306|  2.06k|
 1307|  2.06k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  2.06k|            PartialGraphPattern::Minus(p)
 1309|  2.06k|        }
 1310|  2.06k|
 1311|  2.06k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  2.06k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  2.06k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  2.06k|            }).map(PartialGraphPattern::Other)
 1315|  2.06k|        }
 1316|  2.06k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  2.06k|
 1318|  2.06k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  2.06k|            PartialGraphPattern::Filter(c)
 1320|  2.06k|        }
 1321|  2.06k|
 1322|  2.06k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  2.06k|
 1324|  2.06k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  2.06k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  2.06k|        }
 1327|  2.06k|
 1328|  2.06k|        rule ArgList() -> Vec<Expression> =
 1329|  2.06k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  2.06k|            NIL() { Vec::new() }
 1331|  2.06k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  2.06k|
 1333|  2.06k|        rule ExpressionList() -> Vec<Expression> =
 1334|  2.06k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  2.06k|            NIL() { Vec::new() }
 1336|  2.06k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  2.06k|
 1338|  2.06k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  2.06k|
 1340|  2.06k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  2.06k|            p.into_iter().flatten().collect()
 1342|  2.06k|        }
 1343|  2.06k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  2.06k|
 1345|  2.06k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  2.06k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  2.06k|                let mut patterns = po.patterns;
 1348|  2.06k|                for (p, os) in po.focus {
 1349|  2.06k|                    for o in os {
 1350|  2.06k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  2.06k|                    }
 1352|  2.06k|                }
 1353|  2.06k|                Ok(patterns)
 1354|  2.06k|            } /
 1355|  2.06k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  2.06k|                let mut patterns = s.patterns;
 1357|  2.06k|                patterns.extend(po.patterns);
 1358|  2.06k|                for (p, os) in po.focus {
 1359|  2.06k|                    for o in os {
 1360|  2.06k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  2.06k|                    }
 1362|  2.06k|                }
 1363|  2.06k|                Ok(patterns)
 1364|  2.06k|            }
 1365|  2.06k|
 1366|  2.06k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  2.06k|            PropertyListNotEmpty() /
 1368|  2.06k|            { FocusedTriplePattern::default() }
 1369|  2.06k|
 1370|  2.06k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  2.06k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  2.06k|                a.focus.push(b.focus);
 1373|  2.06k|                a.patterns.extend(b.patterns);
 1374|  2.06k|                a
 1375|  2.06k|            })
 1376|  2.06k|        }
 1377|  2.06k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  2.06k|            FocusedTriplePattern {
 1379|  2.06k|                focus: (p, o.focus),
 1380|  2.06k|                patterns: o.patterns
 1381|  2.06k|            }
 1382|  2.06k|        }
 1383|  2.06k|
 1384|  2.06k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  2.06k|
 1386|  2.06k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  2.06k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  2.06k|                a.focus.push(b.focus);
 1389|  2.06k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  2.06k|                a
 1391|  2.06k|            })
 1392|  2.06k|        }
 1393|  2.06k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  2.06k|
 1395|  2.06k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  2.06k|            if let Some(a) = a {
 1397|  2.06k|                let mut patterns = g.patterns;
 1398|  2.06k|                patterns.extend(a.patterns);
 1399|  2.06k|                FocusedTriplePattern {
 1400|  2.06k|                    focus: AnnotatedTerm {
 1401|  2.06k|                        term: g.focus,
 1402|  2.06k|                        annotations: a.focus
 1403|  2.06k|                    },
 1404|  2.06k|                    patterns
 1405|  2.06k|                }
 1406|  2.06k|            } else {
 1407|  2.06k|                FocusedTriplePattern {
 1408|  2.06k|                    focus: AnnotatedTerm {
 1409|  2.06k|                        term: g.focus,
 1410|  2.06k|                        annotations: Vec::new()
 1411|  2.06k|                    },
 1412|  2.06k|                    patterns: g.patterns
 1413|  2.06k|                }
 1414|  2.06k|            }
 1415|  2.06k|        }
 1416|  2.06k|
 1417|  2.06k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  2.06k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  2.06k|                let mut patterns = po.patterns;
 1420|  2.06k|                for (p, os) in po.focus {
 1421|  2.06k|                    for o in os {
 1422|  2.06k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  2.06k|                    }
 1424|  2.06k|                }
 1425|  2.06k|                Ok(patterns)
 1426|  2.06k|            } /
 1427|  2.06k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  2.06k|                let mut patterns = s.patterns;
 1429|  2.06k|                patterns.extend(po.patterns);
 1430|  2.06k|                for (p, os) in po.focus {
 1431|  2.06k|                    for o in os {
 1432|  2.06k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  2.06k|                    }
 1434|  2.06k|                }
 1435|  2.06k|                Ok(patterns)
 1436|  2.06k|            }
 1437|  2.06k|
 1438|  2.06k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  2.06k|            PropertyListPathNotEmpty() /
 1440|  2.06k|            { FocusedTripleOrPathPattern::default() }
 1441|  2.06k|
 1442|  2.06k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  2.06k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  2.06k|                    focus: vec![(hp, ho.focus)],
 1445|  2.06k|                    patterns: ho.patterns
 1446|  2.06k|                }, |mut a, b| {
 1447|  2.06k|                    a.focus.push(b.focus);
 1448|  2.06k|                    a.patterns.extend(b.patterns);
 1449|  2.06k|                    a
 1450|  2.06k|                })
 1451|  2.06k|        }
 1452|  2.06k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  2.06k|            c
 1454|  2.06k|        }
 1455|  2.06k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  2.06k|            FocusedTripleOrPathPattern {
 1457|  2.06k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  2.06k|                patterns: o.patterns
 1459|  2.06k|            }
 1460|  2.06k|        }
 1461|  2.06k|
 1462|  2.06k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  2.06k|            p.into()
 1464|  2.06k|        }
 1465|  2.06k|
 1466|  2.06k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  2.06k|            v.into()
 1468|  2.06k|        }
 1469|  2.06k|
 1470|  2.06k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  2.06k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  2.06k|                a.focus.push(b.focus);
 1473|  2.06k|                a.patterns.extend(b.patterns);
 1474|  2.06k|                a
 1475|  2.06k|            })
 1476|  2.06k|        }
 1477|  2.06k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  2.06k|
 1479|  2.06k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  2.06k|             if let Some(a) = a {
 1481|  2.06k|                let mut patterns = g.patterns;
 1482|  2.06k|                patterns.extend(a.patterns);
 1483|  2.06k|                FocusedTripleOrPathPattern {
 1484|  2.06k|                    focus: AnnotatedTermPath {
 1485|  2.06k|                        term: g.focus,
 1486|  2.06k|                        annotations: a.focus
 1487|  2.06k|                    },
 1488|  2.06k|                    patterns
 1489|  2.06k|                }
 1490|  2.06k|            } else {
 1491|  2.06k|                FocusedTripleOrPathPattern {
 1492|  2.06k|                    focus: AnnotatedTermPath {
 1493|  2.06k|                        term: g.focus,
 1494|  2.06k|                        annotations: Vec::new()
 1495|  2.06k|                    },
 1496|  2.06k|                    patterns: g.patterns
 1497|  2.06k|                }
 1498|  2.06k|            }
 1499|  2.06k|        }
 1500|  2.06k|
 1501|  2.06k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  2.06k|
 1503|  2.06k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  2.06k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  2.06k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  2.06k|            })
 1507|  2.06k|        }
 1508|  2.06k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  2.06k|
 1510|  2.06k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  2.06k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  2.06k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  2.06k|            })
 1514|  2.06k|        }
 1515|  2.06k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  2.06k|
 1517|  2.06k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  2.06k|            match o {
 1519|  2.06k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  2.06k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  2.06k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  2.06k|                Some(_) => unreachable!(),
 1523|  2.06k|                None => p
 1524|  2.06k|            }
 1525|  2.06k|        }
 1526|  2.06k|        rule PathElt_op() -> char =
 1527|  2.06k|            "*" { '*' } /
 1528|  2.06k|            "+" { '+' } /
 1529|  2.06k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  2.06k|
 1531|  2.06k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  2.06k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  2.06k|            PathElt()
 1534|  2.06k|
 1535|  2.06k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  2.06k|            v:iri() { v.into() } /
 1537|  2.06k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  2.06k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  2.06k|            "(" _ p:Path() _ ")" { p }
 1540|  2.06k|
 1541|  2.06k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  2.06k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  2.06k|                let mut direct = Vec::new();
 1544|  2.06k|                let mut inverse = Vec::new();
 1545|  2.06k|                for e in p {
 1546|  2.06k|                    match e {
 1547|  2.06k|                        Either::Left(a) => direct.push(a),
 1548|  2.06k|                        Either::Right(b) => inverse.push(b)
 1549|  2.06k|                    }
 1550|  2.06k|                }
 1551|  2.06k|                if inverse.is_empty() {
 1552|  2.06k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  2.06k|                } else if direct.is_empty() {
 1554|  2.06k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  2.06k|                } else {
 1556|  2.06k|                    PropertyPathExpression::Alternative(
 1557|  2.06k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  2.06k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  2.06k|                    )
 1560|  2.06k|                }
 1561|  2.06k|            } /
 1562|  2.06k|            p:PathOneInPropertySet() {
 1563|  2.06k|                match p {
 1564|  2.06k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  2.06k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  2.06k|                }
 1567|  2.06k|            }
 1568|  2.06k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  2.06k|
 1570|  2.06k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  2.06k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  2.06k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  2.06k|            v:iri() { Either::Left(v) } /
 1574|  2.06k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  2.06k|
 1576|  2.06k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  2.06k|
 1578|  2.06k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  2.06k|            let mut patterns = po.patterns;
 1580|  2.06k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  2.06k|            for (p, os) in po.focus {
 1582|  2.06k|                for o in os {
 1583|  2.06k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  2.06k|                }
 1585|  2.06k|            }
 1586|  2.06k|            Ok(FocusedTriplePattern {
 1587|  2.06k|                focus: bnode,
 1588|  2.06k|                patterns
 1589|  2.06k|            })
 1590|  2.06k|        }
 1591|  2.06k|
 1592|  2.06k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  2.06k|
 1594|  2.06k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  2.06k|            let mut patterns = po.patterns;
 1596|  2.06k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  2.06k|            for (p, os) in po.focus {
 1598|  2.06k|                for o in os {
 1599|  2.06k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  2.06k|                }
 1601|  2.06k|            }
 1602|  2.06k|            Ok(FocusedTripleOrPathPattern {
 1603|  2.06k|                focus: bnode,
 1604|  2.06k|                patterns
 1605|  2.06k|            })
 1606|  2.06k|        }
 1607|  2.06k|
 1608|  2.06k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  2.06k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  2.06k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  2.06k|            for objWithPatterns in o.into_iter().rev() {
 1612|  2.06k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  2.06k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  2.06k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  2.06k|                current_list_node = new_blank_node;
 1616|  2.06k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  2.06k|            }
 1618|  2.06k|            FocusedTriplePattern {
 1619|  2.06k|                focus: current_list_node,
 1620|  2.06k|                patterns
 1621|  2.06k|            }
 1622|  2.06k|        }
 1623|  2.06k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  2.06k|
 1625|  2.06k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  2.06k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  2.06k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  2.06k|            for objWithPatterns in o.into_iter().rev() {
 1629|  2.06k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  2.06k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  2.06k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  2.06k|                current_list_node = new_blank_node;
 1633|  2.06k|                patterns.extend(objWithPatterns.patterns);
 1634|  2.06k|            }
 1635|  2.06k|            FocusedTripleOrPathPattern {
 1636|  2.06k|                focus: current_list_node,
 1637|  2.06k|                patterns
 1638|  2.06k|            }
 1639|  2.06k|        }
 1640|  2.06k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  2.06k|
 1642|  2.06k|
 1643|  2.06k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  2.06k|
 1645|  2.06k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  2.06k|
 1647|  2.06k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  2.06k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  2.06k|            TriplesNode()
 1650|  2.06k|
 1651|  2.06k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  2.06k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  2.06k|            TriplesNodePath()
 1654|  2.06k|
 1655|  2.06k|        rule VarOrTerm() -> TermPattern =
 1656|  2.06k|            v:Var() { v.into() } /
 1657|  2.06k|            t:QuotedTriple() {?
 1658|  2.06k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  2.06k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  2.06k|            } /
 1661|  2.06k|            t:GraphTerm() { t.into() }
 1662|  2.06k|
 1663|  2.06k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  2.06k|            Ok(TriplePattern {
 1665|  2.06k|                subject: s,
 1666|  2.06k|                predicate: p,
 1667|  2.06k|                object: o
 1668|  2.06k|            })
 1669|  2.06k|        }
 1670|  2.06k|
 1671|  2.06k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  2.06k|            Ok(GroundTriple {
 1673|  2.06k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  2.06k|                predicate: p,
 1675|  2.06k|                object: o
 1676|  2.06k|            })
 1677|  2.06k|        }
 1678|  2.06k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  2.06k|
 1680|  2.06k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  2.06k|            l:RDFLiteral() { l.into() } /
 1682|  2.06k|            l:NumericLiteral() { l.into() } /
 1683|  2.06k|            l:BooleanLiteral() { l.into() } /
 1684|  2.06k|            t:QuotedTripleData() {?
 1685|  2.06k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  2.06k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  2.06k|            }
 1688|  2.06k|
 1689|  2.06k|        rule VarOrIri() -> NamedNodePattern =
 1690|  2.06k|            v:Var() { v.into() } /
 1691|  2.06k|            i:iri() { i.into() }
 1692|  2.06k|
 1693|  2.06k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  2.06k|
 1695|  2.06k|        rule GraphTerm() -> Term =
 1696|  2.06k|            i:iri() { i.into() } /
 1697|  2.06k|            l:RDFLiteral() { l.into() } /
 1698|  2.06k|            l:NumericLiteral() { l.into() } /
 1699|  2.06k|            l:BooleanLiteral() { l.into() } /
 1700|  2.06k|            b:BlankNode() { b.into() } /
 1701|  2.06k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  2.06k|
 1703|  2.06k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  2.06k|
 1705|  2.06k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  2.06k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  2.06k|        }
 1708|  2.06k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  2.06k|
 1710|  2.06k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  2.06k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  2.06k|        }
 1713|  2.06k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  2.06k|
 1715|  2.06k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  2.06k|
 1717|  2.06k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  2.06k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  2.06k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  2.06k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  2.06k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  2.06k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  2.06k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  2.06k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  2.06k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  2.06k|            Some(_) => unreachable!(),
 1727|  2.06k|            None => a
 1728|  2.06k|        } }
 1729|  2.06k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  2.06k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  2.06k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  2.06k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  2.06k|
 1734|  2.06k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  2.06k|
 1736|  2.06k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  2.06k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  2.06k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  2.06k|            Some(_) => unreachable!(),
 1740|  2.06k|            None => a,
 1741|  2.06k|        } }
 1742|  2.06k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  2.06k|            (s, e)
 1744|  2.06k|        }
 1745|  2.06k|
 1746|  2.06k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  2.06k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  2.06k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  2.06k|            Some(_) => unreachable!(),
 1750|  2.06k|            None => a
 1751|  2.06k|        } }
 1752|  2.06k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  2.06k|            (s, e)
 1754|  2.06k|        }
 1755|  2.06k|
 1756|  2.06k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  2.06k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  2.06k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  2.06k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  2.06k|            Some(_) => unreachable!(),
 1761|  2.06k|            None => e,
 1762|  2.06k|        } }
 1763|  2.06k|
 1764|  2.06k|        rule PrimaryExpression() -> Expression =
 1765|  2.06k|            BrackettedExpression()  /
 1766|  2.06k|            ExprQuotedTriple() /
 1767|  2.06k|            iriOrFunction() /
 1768|  2.06k|            v:Var() { v.into() } /
 1769|  2.06k|            l:RDFLiteral() { l.into() } /
 1770|  2.06k|            l:NumericLiteral() { l.into() } /
 1771|  2.06k|            l:BooleanLiteral() { l.into() } /
 1772|  2.06k|            BuiltInCall()
 1773|  2.06k|
 1774|  2.06k|        rule ExprVarOrTerm() -> Expression =
 1775|  2.06k|            ExprQuotedTriple() /
 1776|  2.06k|            i:iri() { i.into() } /
 1777|  2.06k|            l:RDFLiteral() { l.into() } /
 1778|  2.06k|            l:NumericLiteral() { l.into() } /
 1779|  2.06k|            l:BooleanLiteral() { l.into() } /
 1780|  2.06k|            v:Var() { v.into() }
 1781|  2.06k|
 1782|  2.06k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  2.06k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  2.06k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  2.06k|        }
 1786|  2.06k|
 1787|  2.06k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  2.06k|
 1789|  2.06k|        rule BuiltInCall() -> Expression =
 1790|  2.06k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  2.06k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  2.06k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  2.06k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  2.06k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  2.06k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  2.06k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  2.06k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  2.06k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  2.06k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  2.06k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  2.06k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  2.06k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  2.06k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  2.06k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  2.06k|            SubstringExpression() /
 1806|  2.06k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  2.06k|            StrReplaceExpression() /
 1808|  2.06k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  2.06k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  2.06k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  2.06k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  2.06k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  2.06k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  2.06k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  2.06k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  2.06k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  2.06k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  2.06k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  2.06k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  2.06k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  2.06k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  2.06k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  2.06k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  2.06k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  2.06k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  2.06k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  2.06k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  2.06k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  2.06k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  2.06k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  2.06k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  2.06k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  2.06k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  2.06k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  2.06k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  2.06k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  2.06k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  2.06k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  2.06k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  2.06k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  2.06k|            RegexExpression() /
 1842|  2.06k|            ExistsFunc() /
 1843|  2.06k|            NotExistsFunc() /
 1844|  2.06k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  2.06k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  2.06k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  2.06k|            } /
 1848|  2.06k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  2.06k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  2.06k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  2.06k|            } /
 1852|  2.06k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  2.06k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  2.06k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  2.06k|            } /
 1856|  2.06k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  2.06k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  2.06k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  2.06k|            } /
 1860|  2.06k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  2.06k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  2.06k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  2.06k|            } /
 1864|  2.06k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  2.06k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  2.06k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  2.06k|            }
 1868|  2.06k|
 1869|  2.06k|        rule RegexExpression() -> Expression =
 1870|  2.06k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  2.06k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  2.06k|
 1873|  2.06k|
 1874|  2.06k|        rule SubstringExpression() -> Expression =
 1875|  2.06k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  2.06k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  2.06k|
 1878|  2.06k|
 1879|  2.06k|        rule StrReplaceExpression() -> Expression =
 1880|  2.06k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  2.06k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  2.06k|
 1883|  2.06k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  2.06k|
 1885|  2.06k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  2.06k|
 1887|  2.06k|        rule Aggregate() -> AggregateExpression =
 1888|  2.06k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  2.06k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  2.06k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  2.06k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  2.06k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  2.06k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  2.06k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  2.06k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  2.06k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  2.06k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  2.06k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  2.06k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  2.06k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  2.06k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  2.06k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  2.06k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  2.06k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  2.06k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  2.06k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  2.06k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  2.06k|
 1909|  2.06k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  2.06k|            match a {
 1911|  2.06k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  2.06k|                None => i.into()
 1913|  2.06k|            }
 1914|  2.06k|        }
 1915|  2.06k|
 1916|  2.06k|        rule RDFLiteral() -> Literal =
 1917|  2.06k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  2.06k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  2.06k|            value:String() { Literal::new_simple_literal(value) }
 1920|  2.06k|
 1921|  2.06k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  2.06k|
 1923|  2.06k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  2.06k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  2.06k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  2.06k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  2.06k|
 1928|  2.06k|        rule NumericLiteralPositive() -> Literal =
 1929|  2.06k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  2.06k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  2.06k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  2.06k|
 1933|  2.06k|
 1934|  2.06k|        rule NumericLiteralNegative() -> Literal =
 1935|  2.06k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  2.06k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  2.06k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  2.06k|
 1939|  2.06k|        rule BooleanLiteral() -> Literal =
 1940|  2.06k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  2.06k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  2.06k|
 1943|  2.06k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  2.06k|
 1945|  2.06k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  2.06k|            NamedNode::from(i)
 1947|  2.06k|        }
 1948|  2.06k|
 1949|  2.06k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  2.06k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  2.06k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  2.06k|            } else {
 1953|  2.06k|                Err("Prefix not found")
 1954|  2.06k|            } }
 1955|  2.06k|
 1956|  2.06k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  2.06k|            let node = BlankNode::new_unchecked(id);
 1958|  2.06k|            if state.used_bnodes.contains(&node) {
 1959|  2.06k|                Err("Already used blank node id")
 1960|  2.06k|            } else {
 1961|  2.06k|                state.currently_used_bnodes.insert(node.clone());
 1962|  2.06k|                Ok(node)
 1963|  2.06k|            }
 1964|  2.06k|        } / ANON() { BlankNode::default() }
 1965|  2.06k|
 1966|  2.06k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  2.06k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  2.06k|        }
 1969|  2.06k|
 1970|  2.06k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  2.06k|            ns
 1972|  2.06k|        }
 1973|  2.06k|
 1974|  2.06k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  2.06k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  2.06k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  2.06k|                iri.push_str(base);
 1978|  2.06k|                for chunk in local.split('\\') { // We remove \
 1979|  2.06k|                    iri.push_str(chunk);
 1980|  2.06k|                }
 1981|  2.06k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  2.06k|            } else {
 1983|  2.06k|                Err("Prefix not found")
 1984|  2.06k|            }
 1985|  2.06k|        }
 1986|  2.06k|
 1987|  2.06k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  2.06k|            b
 1989|  2.06k|        }
 1990|  2.06k|
 1991|  2.06k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  2.06k|
 1993|  2.06k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  2.06k|
 1995|  2.06k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  2.06k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  2.06k|        }
 1998|  2.06k|
 1999|  2.06k|        rule INTEGER() = ['0'..='9']+
 2000|  2.06k|
 2001|  2.06k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  2.06k|
 2003|  2.06k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  2.06k|
 2005|  2.06k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  2.06k|
 2007|  2.06k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  2.06k|
 2009|  2.06k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  2.06k|
 2011|  2.06k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  2.06k|
 2013|  2.06k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  2.06k|
 2015|  2.06k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  2.06k|
 2017|  2.06k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  2.06k|
 2019|  2.06k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  2.06k|             unescape_string(l)
 2021|  2.06k|        }
 2022|  2.06k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  2.06k|
 2024|  2.06k|
 2025|  2.06k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  2.06k|             unescape_string(l)
 2027|  2.06k|        }
 2028|  2.06k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  2.06k|
 2030|  2.06k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  2.06k|             unescape_string(l)
 2032|  2.06k|        }
 2033|  2.06k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  2.06k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  2.06k|
 2036|  2.06k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  2.06k|             unescape_string(l)
 2038|  2.06k|        }
 2039|  2.06k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  2.06k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  2.06k|
 2042|  2.06k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  2.06k|
 2044|  2.06k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  2.06k|
 2046|  2.06k|        rule NIL() = "(" WS()* ")"
 2047|  2.06k|
 2048|  2.06k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  2.06k|
 2050|  2.06k|        rule ANON() = "[" WS()* "]"
 2051|  2.06k|
 2052|  2.06k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  2.06k|
 2054|  2.06k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  2.06k|
 2056|  2.06k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  2.06k|
 2058|  2.06k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  2.06k|
 2060|  2.06k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  2.06k|
 2062|  2.06k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  2.06k|
 2064|  2.06k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  2.06k|
 2066|  2.06k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  2.06k|
 2068|  2.06k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  2.06k|
 2070|  2.06k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  2.06k|
 2072|  2.06k|        //space
 2073|  2.06k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  2.06k|
 2075|  2.06k|        //comment
 2076|  2.06k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  2.06k|
 2078|  2.06k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  2.06k|            if input.eq_ignore_ascii_case(literal) {
 2080|  2.06k|                Ok(())
 2081|  2.06k|            } else {
 2082|  2.06k|                Err(literal)
 2083|  2.06k|            }
 2084|  2.06k|        }
 2085|  2.06k|    }
 2086|  2.06k|}
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_ValuesClauses_0B7_:
  971|  1.74k|            { None }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_Modify_clauses0B7_:
 1109|  2.40k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  2.40k|            (Some(d), i)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCallsI_0B7_:
 1838|     27|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser21___parse_iriOrFunction0B7_:
 1909|    763|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|    763|            match a {
 1911|      0|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|    763|                None => i.into()
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_Bind0B7_:
 1270|      3|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|      3|            PartialGraphPattern::Bind(e, v)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_GraphTerm0B7_:
 1696|  17.9k|            i:iri() { i.into() } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser26___parse_TriplesSameSubject0B7_:
  778|  17.4k|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|       |            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|       |                Ok((vars, vals))
 1288|       |            } else {
 1289|       |                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|       |            }
 1291|       |        }
 1292|       |        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|       |        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|       |        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|       |
 1296|       |        rule DataBlockValue() -> Option<GroundTerm> =
 1297|       |            t:QuotedTripleData() {?
 1298|       |                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|       |            } /
 1301|       |            i:iri() { Some(i.into()) } /
 1302|       |            l:RDFLiteral() { Some(l.into()) } /
 1303|       |            l:NumericLiteral() { Some(l.into()) } /
 1304|       |            l:BooleanLiteral() { Some(l.into()) } /
 1305|       |            i("UNDEF") { None }
 1306|       |
 1307|       |        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|       |            PartialGraphPattern::Minus(p)
 1309|       |        }
 1310|       |
 1311|       |        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|       |            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|       |            }).map(PartialGraphPattern::Other)
 1315|       |        }
 1316|       |        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|       |
 1318|       |        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|       |            PartialGraphPattern::Filter(c)
 1320|       |        }
 1321|       |
 1322|       |        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|       |
 1324|       |        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|       |            Expression::FunctionCall(Function::Custom(f), a)
 1326|       |        }
 1327|       |
 1328|       |        rule ArgList() -> Vec<Expression> =
 1329|       |            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|       |            NIL() { Vec::new() }
 1331|       |        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|       |
 1333|       |        rule ExpressionList() -> Vec<Expression> =
 1334|       |            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|       |            NIL() { Vec::new() }
 1336|       |        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|       |
 1338|       |        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|       |
 1340|       |        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|       |            p.into_iter().flatten().collect()
 1342|       |        }
 1343|       |        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|       |
 1345|       |        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|       |            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  17.4k|                let mut patterns = po.patterns;
 1348|  34.8k|                for (p, os) in po.focus {
 1349|  34.8k|                    for o in os {
 1350|  17.4k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|       |                    }
 1352|       |                }
 1353|  17.4k|                Ok(patterns)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser11___parse_Var0B7_:
 1693|  48.0k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser29___parse_TriplesTemplate_inner0B7_:
 1170|  17.4k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_Filter0B7_:
 1318|      3|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|      3|            PartialGraphPattern::Filter(c)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCallsF_0B7_:
 1835|      5|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_IRIREF0B7_:
  778|  57.0k|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|       |            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|       |                Ok((vars, vals))
 1288|       |            } else {
 1289|       |                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|       |            }
 1291|       |        }
 1292|       |        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|       |        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|       |        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|       |
 1296|       |        rule DataBlockValue() -> Option<GroundTerm> =
 1297|       |            t:QuotedTripleData() {?
 1298|       |                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|       |            } /
 1301|       |            i:iri() { Some(i.into()) } /
 1302|       |            l:RDFLiteral() { Some(l.into()) } /
 1303|       |            l:NumericLiteral() { Some(l.into()) } /
 1304|       |            l:BooleanLiteral() { Some(l.into()) } /
 1305|       |            i("UNDEF") { None }
 1306|       |
 1307|       |        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|       |            PartialGraphPattern::Minus(p)
 1309|       |        }
 1310|       |
 1311|       |        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|       |            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|       |            }).map(PartialGraphPattern::Other)
 1315|       |        }
 1316|       |        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|       |
 1318|       |        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|       |            PartialGraphPattern::Filter(c)
 1320|       |        }
 1321|       |
 1322|       |        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|       |
 1324|       |        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|       |            Expression::FunctionCall(Function::Custom(f), a)
 1326|       |        }
 1327|       |
 1328|       |        rule ArgList() -> Vec<Expression> =
 1329|       |            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|       |            NIL() { Vec::new() }
 1331|       |        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|       |
 1333|       |        rule ExpressionList() -> Vec<Expression> =
 1334|       |            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|       |            NIL() { Vec::new() }
 1336|       |        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|       |
 1338|       |        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|       |
 1340|       |        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|       |            p.into_iter().flatten().collect()
 1342|       |        }
 1343|       |        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|       |
 1345|       |        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|       |            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|       |                let mut patterns = po.patterns;
 1348|       |                for (p, os) in po.focus {
 1349|       |                    for o in os {
 1350|       |                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|       |                    }
 1352|       |                }
 1353|       |                Ok(patterns)
 1354|       |            } /
 1355|       |            s:TriplesNode() _ po:PropertyList() {?
 1356|       |                let mut patterns = s.patterns;
 1357|       |                patterns.extend(po.patterns);
 1358|       |                for (p, os) in po.focus {
 1359|       |                    for o in os {
 1360|       |                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|       |                    }
 1362|       |                }
 1363|       |                Ok(patterns)
 1364|       |            }
 1365|       |
 1366|       |        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|       |            PropertyListNotEmpty() /
 1368|       |            { FocusedTriplePattern::default() }
 1369|       |
 1370|       |        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|       |            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|       |                a.focus.push(b.focus);
 1373|       |                a.patterns.extend(b.patterns);
 1374|       |                a
 1375|       |            })
 1376|       |        }
 1377|       |        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|       |            FocusedTriplePattern {
 1379|       |                focus: (p, o.focus),
 1380|       |                patterns: o.patterns
 1381|       |            }
 1382|       |        }
 1383|       |
 1384|       |        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|       |
 1386|       |        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|       |            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|       |                a.focus.push(b.focus);
 1389|       |                a.patterns.extend_from_slice(&b.patterns);
 1390|       |                a
 1391|       |            })
 1392|       |        }
 1393|       |        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|       |
 1395|       |        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|       |            if let Some(a) = a {
 1397|       |                let mut patterns = g.patterns;
 1398|       |                patterns.extend(a.patterns);
 1399|       |                FocusedTriplePattern {
 1400|       |                    focus: AnnotatedTerm {
 1401|       |                        term: g.focus,
 1402|       |                        annotations: a.focus
 1403|       |                    },
 1404|       |                    patterns
 1405|       |                }
 1406|       |            } else {
 1407|       |                FocusedTriplePattern {
 1408|       |                    focus: AnnotatedTerm {
 1409|       |                        term: g.focus,
 1410|       |                        annotations: Vec::new()
 1411|       |                    },
 1412|       |                    patterns: g.patterns
 1413|       |                }
 1414|       |            }
 1415|       |        }
 1416|       |
 1417|       |        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|       |            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|       |                let mut patterns = po.patterns;
 1420|       |                for (p, os) in po.focus {
 1421|       |                    for o in os {
 1422|       |                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|       |                    }
 1424|       |                }
 1425|       |                Ok(patterns)
 1426|       |            } /
 1427|       |            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|       |                let mut patterns = s.patterns;
 1429|       |                patterns.extend(po.patterns);
 1430|       |                for (p, os) in po.focus {
 1431|       |                    for o in os {
 1432|       |                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|       |                    }
 1434|       |                }
 1435|       |                Ok(patterns)
 1436|       |            }
 1437|       |
 1438|       |        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|       |            PropertyListPathNotEmpty() /
 1440|       |            { FocusedTripleOrPathPattern::default() }
 1441|       |
 1442|       |        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|       |                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|       |                    focus: vec![(hp, ho.focus)],
 1445|       |                    patterns: ho.patterns
 1446|       |                }, |mut a, b| {
 1447|       |                    a.focus.push(b.focus);
 1448|       |                    a.patterns.extend(b.patterns);
 1449|       |                    a
 1450|       |                })
 1451|       |        }
 1452|       |        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|       |            c
 1454|       |        }
 1455|       |        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|       |            FocusedTripleOrPathPattern {
 1457|       |                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|       |                patterns: o.patterns
 1459|       |            }
 1460|       |        }
 1461|       |
 1462|       |        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|       |            p.into()
 1464|       |        }
 1465|       |
 1466|       |        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|       |            v.into()
 1468|       |        }
 1469|       |
 1470|       |        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|       |            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|       |                a.focus.push(b.focus);
 1473|       |                a.patterns.extend(b.patterns);
 1474|       |                a
 1475|       |            })
 1476|       |        }
 1477|       |        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|       |
 1479|       |        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|       |             if let Some(a) = a {
 1481|       |                let mut patterns = g.patterns;
 1482|       |                patterns.extend(a.patterns);
 1483|       |                FocusedTripleOrPathPattern {
 1484|       |                    focus: AnnotatedTermPath {
 1485|       |                        term: g.focus,
 1486|       |                        annotations: a.focus
 1487|       |                    },
 1488|       |                    patterns
 1489|       |                }
 1490|       |            } else {
 1491|       |                FocusedTripleOrPathPattern {
 1492|       |                    focus: AnnotatedTermPath {
 1493|       |                        term: g.focus,
 1494|       |                        annotations: Vec::new()
 1495|       |                    },
 1496|       |                    patterns: g.patterns
 1497|       |                }
 1498|       |            }
 1499|       |        }
 1500|       |
 1501|       |        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|       |
 1503|       |        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|       |            not_empty_fold(p.into_iter(), |a, b| {
 1505|       |                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|       |            })
 1507|       |        }
 1508|       |        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|       |
 1510|       |        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|       |            not_empty_fold(p.into_iter(), |a, b| {
 1512|       |                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|       |            })
 1514|       |        }
 1515|       |        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|       |
 1517|       |        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|       |            match o {
 1519|       |                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|       |                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|       |                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|       |                Some(_) => unreachable!(),
 1523|       |                None => p
 1524|       |            }
 1525|       |        }
 1526|       |        rule PathElt_op() -> char =
 1527|       |            "*" { '*' } /
 1528|       |            "+" { '+' } /
 1529|       |            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|       |
 1531|       |        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|       |            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|       |            PathElt()
 1534|       |
 1535|       |        rule PathPrimary() -> PropertyPathExpression =
 1536|       |            v:iri() { v.into() } /
 1537|       |            "a" { rdf::TYPE.into_owned().into() } /
 1538|       |            "!" _ p:PathNegatedPropertySet() { p } /
 1539|       |            "(" _ p:Path() _ ")" { p }
 1540|       |
 1541|       |        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|       |            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|       |                let mut direct = Vec::new();
 1544|       |                let mut inverse = Vec::new();
 1545|       |                for e in p {
 1546|       |                    match e {
 1547|       |                        Either::Left(a) => direct.push(a),
 1548|       |                        Either::Right(b) => inverse.push(b)
 1549|       |                    }
 1550|       |                }
 1551|       |                if inverse.is_empty() {
 1552|       |                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|       |                } else if direct.is_empty() {
 1554|       |                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|       |                } else {
 1556|       |                    PropertyPathExpression::Alternative(
 1557|       |                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|       |                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|       |                    )
 1560|       |                }
 1561|       |            } /
 1562|       |            p:PathOneInPropertySet() {
 1563|       |                match p {
 1564|       |                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|       |                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|       |                }
 1567|       |            }
 1568|       |        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|       |
 1570|       |        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|       |            "^" _ v:iri() { Either::Right(v) } /
 1572|       |            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|       |            v:iri() { Either::Left(v) } /
 1574|       |            "a" { Either::Left(rdf::TYPE.into()) }
 1575|       |
 1576|       |        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|       |
 1578|       |        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|       |            let mut patterns = po.patterns;
 1580|       |            let mut bnode = TermPattern::from(BlankNode::default());
 1581|       |            for (p, os) in po.focus {
 1582|       |                for o in os {
 1583|       |                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|       |                }
 1585|       |            }
 1586|       |            Ok(FocusedTriplePattern {
 1587|       |                focus: bnode,
 1588|       |                patterns
 1589|       |            })
 1590|       |        }
 1591|       |
 1592|       |        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|       |
 1594|       |        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|       |            let mut patterns = po.patterns;
 1596|       |            let mut bnode = TermPattern::from(BlankNode::default());
 1597|       |            for (p, os) in po.focus {
 1598|       |                for o in os {
 1599|       |                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|       |                }
 1601|       |            }
 1602|       |            Ok(FocusedTripleOrPathPattern {
 1603|       |                focus: bnode,
 1604|       |                patterns
 1605|       |            })
 1606|       |        }
 1607|       |
 1608|       |        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|       |            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|       |            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|       |            for objWithPatterns in o.into_iter().rev() {
 1612|       |                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|       |                current_list_node = new_blank_node;
 1616|       |                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|       |            }
 1618|       |            FocusedTriplePattern {
 1619|       |                focus: current_list_node,
 1620|       |                patterns
 1621|       |            }
 1622|       |        }
 1623|       |        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|       |
 1625|       |        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|       |            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|       |            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|       |            for objWithPatterns in o.into_iter().rev() {
 1629|       |                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|       |                current_list_node = new_blank_node;
 1633|       |                patterns.extend(objWithPatterns.patterns);
 1634|       |            }
 1635|       |            FocusedTripleOrPathPattern {
 1636|       |                focus: current_list_node,
 1637|       |                patterns
 1638|       |            }
 1639|       |        }
 1640|       |        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|       |
 1642|       |
 1643|       |        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|       |
 1645|       |        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|       |
 1647|       |        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|       |            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|       |            TriplesNode()
 1650|       |
 1651|       |        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|       |            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|       |            TriplesNodePath()
 1654|       |
 1655|       |        rule VarOrTerm() -> TermPattern =
 1656|       |            v:Var() { v.into() } /
 1657|       |            t:QuotedTriple() {?
 1658|       |                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|       |            } /
 1661|       |            t:GraphTerm() { t.into() }
 1662|       |
 1663|       |        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|       |            Ok(TriplePattern {
 1665|       |                subject: s,
 1666|       |                predicate: p,
 1667|       |                object: o
 1668|       |            })
 1669|       |        }
 1670|       |
 1671|       |        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|       |            Ok(GroundTriple {
 1673|       |                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|       |                predicate: p,
 1675|       |                object: o
 1676|       |            })
 1677|       |        }
 1678|       |        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|       |
 1680|       |        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|       |            l:RDFLiteral() { l.into() } /
 1682|       |            l:NumericLiteral() { l.into() } /
 1683|       |            l:BooleanLiteral() { l.into() } /
 1684|       |            t:QuotedTripleData() {?
 1685|       |                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|       |            }
 1688|       |
 1689|       |        rule VarOrIri() -> NamedNodePattern =
 1690|       |            v:Var() { v.into() } /
 1691|       |            i:iri() { i.into() }
 1692|       |
 1693|       |        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|       |
 1695|       |        rule GraphTerm() -> Term =
 1696|       |            i:iri() { i.into() } /
 1697|       |            l:RDFLiteral() { l.into() } /
 1698|       |            l:NumericLiteral() { l.into() } /
 1699|       |            l:BooleanLiteral() { l.into() } /
 1700|       |            b:BlankNode() { b.into() } /
 1701|       |            NIL() { rdf::NIL.into_owned().into() }
 1702|       |
 1703|       |        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|       |
 1705|       |        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|       |            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|       |        }
 1708|       |        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|       |
 1710|       |        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|       |        }
 1713|       |        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|       |
 1715|       |        rule ValueLogical() -> Expression = RelationalExpression()
 1716|       |
 1717|       |        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|       |            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|       |            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|       |            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|       |            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|       |            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|       |            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|       |            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|       |            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|       |            Some(_) => unreachable!(),
 1727|       |            None => a
 1728|       |        } }
 1729|       |        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|       |            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|       |            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|       |            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|       |
 1734|       |        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|       |
 1736|       |        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|       |            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|       |            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|       |            Some(_) => unreachable!(),
 1740|       |            None => a,
 1741|       |        } }
 1742|       |        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|       |            (s, e)
 1744|       |        }
 1745|       |
 1746|       |        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|       |            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|       |            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|       |            Some(_) => unreachable!(),
 1750|       |            None => a
 1751|       |        } }
 1752|       |        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|       |            (s, e)
 1754|       |        }
 1755|       |
 1756|       |        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|       |            Some("!") => Expression::Not(Box::new(e)),
 1758|       |            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|       |            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|       |            Some(_) => unreachable!(),
 1761|       |            None => e,
 1762|       |        } }
 1763|       |
 1764|       |        rule PrimaryExpression() -> Expression =
 1765|       |            BrackettedExpression()  /
 1766|       |            ExprQuotedTriple() /
 1767|       |            iriOrFunction() /
 1768|       |            v:Var() { v.into() } /
 1769|       |            l:RDFLiteral() { l.into() } /
 1770|       |            l:NumericLiteral() { l.into() } /
 1771|       |            l:BooleanLiteral() { l.into() } /
 1772|       |            BuiltInCall()
 1773|       |
 1774|       |        rule ExprVarOrTerm() -> Expression =
 1775|       |            ExprQuotedTriple() /
 1776|       |            i:iri() { i.into() } /
 1777|       |            l:RDFLiteral() { l.into() } /
 1778|       |            l:NumericLiteral() { l.into() } /
 1779|       |            l:BooleanLiteral() { l.into() } /
 1780|       |            v:Var() { v.into() }
 1781|       |
 1782|       |        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|       |            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|       |            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|       |        }
 1786|       |
 1787|       |        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|       |
 1789|       |        rule BuiltInCall() -> Expression =
 1790|       |            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|       |            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|       |            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|       |            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|       |            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|       |            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|       |            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|       |            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|       |            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|       |            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|       |            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|       |            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|       |            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|       |            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|       |            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|       |            SubstringExpression() /
 1806|       |            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|       |            StrReplaceExpression() /
 1808|       |            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|       |            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|       |            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|       |            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|       |            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|       |            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|       |            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|       |            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|       |            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|       |            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|       |            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|       |            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|       |            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|       |            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|       |            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|       |            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|       |            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|       |            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|       |            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|       |            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|       |            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|       |            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|       |            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|       |            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|       |            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|       |            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|       |            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|       |            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|       |            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|       |            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|       |            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|       |            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|       |            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|       |            RegexExpression() /
 1842|       |            ExistsFunc() /
 1843|       |            NotExistsFunc() /
 1844|       |            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|       |                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|       |            } /
 1848|       |            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|       |                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|       |            } /
 1852|       |            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|       |                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|       |            } /
 1856|       |            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|       |                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|       |            } /
 1860|       |            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|       |                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|       |            } /
 1864|       |            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|       |                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|       |                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|       |            }
 1868|       |
 1869|       |        rule RegexExpression() -> Expression =
 1870|       |            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|       |            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|       |
 1873|       |
 1874|       |        rule SubstringExpression() -> Expression =
 1875|       |            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|       |            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|       |
 1878|       |
 1879|       |        rule StrReplaceExpression() -> Expression =
 1880|       |            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|       |            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|       |
 1883|       |        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|       |
 1885|       |        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|       |
 1887|       |        rule Aggregate() -> AggregateExpression =
 1888|       |            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|       |            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|       |            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|       |            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|       |            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|       |            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|       |            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|       |            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|       |            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|       |            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|       |            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|       |            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|       |            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|       |            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|       |            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|       |            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|       |            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|       |            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|       |            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|       |            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|       |
 1909|       |        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|       |            match a {
 1911|       |                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|       |                None => i.into()
 1913|       |            }
 1914|       |        }
 1915|       |
 1916|       |        rule RDFLiteral() -> Literal =
 1917|       |            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|       |            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|       |            value:String() { Literal::new_simple_literal(value) }
 1920|       |
 1921|       |        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|       |
 1923|       |        rule NumericLiteralUnsigned() -> Literal =
 1924|       |            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|       |            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|       |            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|       |
 1928|       |        rule NumericLiteralPositive() -> Literal =
 1929|       |            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|       |            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|       |            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|       |
 1933|       |
 1934|       |        rule NumericLiteralNegative() -> Literal =
 1935|       |            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|       |            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|       |            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|       |
 1939|       |        rule BooleanLiteral() -> Literal =
 1940|       |            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|       |            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|       |
 1943|       |        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|       |
 1945|       |        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|       |            NamedNode::from(i)
 1947|       |        }
 1948|       |
 1949|       |        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|       |            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|       |                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|       |            } else {
 1953|       |                Err("Prefix not found")
 1954|       |            } }
 1955|       |
 1956|       |        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|       |            let node = BlankNode::new_unchecked(id);
 1958|       |            if state.used_bnodes.contains(&node) {
 1959|       |                Err("Already used blank node id")
 1960|       |            } else {
 1961|       |                state.currently_used_bnodes.insert(node.clone());
 1962|       |                Ok(node)
 1963|       |            }
 1964|       |        } / ANON() { BlankNode::default() }
 1965|       |
 1966|       |        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  57.0k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser38___parse_MultiplicativeExpression_inner0B7_:
 1752|  5.63k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  5.63k|            (s, e)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_InsertData0B7_:
 1025|    250|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|    250|            vec![GraphUpdateOperation::InsertData { data }]
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser23___parse_PathAlternative0B7_:
  778|  24.5k|parser! {
  779|  24.5k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  24.5k|    grammar parser(state: &mut ParserState) for str {
  781|  24.5k|        pub rule QueryUnit() -> Query = Query()
  782|  24.5k|
  783|  24.5k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  24.5k|            q
  785|  24.5k|        }
  786|  24.5k|
  787|  24.5k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  24.5k|
  789|  24.5k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  24.5k|
  791|  24.5k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  24.5k|            state.base_iri = Some(i)
  793|  24.5k|        }
  794|  24.5k|
  795|  24.5k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  24.5k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  24.5k|        }
  798|  24.5k|
  799|  24.5k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  24.5k|            Ok(Query::Select {
  801|  24.5k|                dataset: d,
  802|  24.5k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  24.5k|                base_iri: state.base_iri.clone()
  804|  24.5k|            })
  805|  24.5k|        }
  806|  24.5k|
  807|  24.5k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  24.5k|            build_select(s, w, g, h, o, l, v, state)
  809|  24.5k|        }
  810|  24.5k|
  811|  24.5k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  24.5k|            Selection {
  813|  24.5k|                option: o,
  814|  24.5k|                variables: v
  815|  24.5k|            }
  816|  24.5k|        }
  817|  24.5k|        rule Selection_init() = {
  818|  24.5k|            state.aggregates.push(Vec::new())
  819|  24.5k|        }
  820|  24.5k|        rule SelectClause_option() -> SelectionOption =
  821|  24.5k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  24.5k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  24.5k|            { SelectionOption::Default }
  824|  24.5k|        rule SelectClause_variables() -> SelectionVariables =
  825|  24.5k|            "*" { SelectionVariables::Star } /
  826|  24.5k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  24.5k|        rule SelectClause_member() -> SelectionMember =
  828|  24.5k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  24.5k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  24.5k|
  831|  24.5k|        rule ConstructQuery() -> Query =
  832|  24.5k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  24.5k|                Ok(Query::Construct {
  834|  24.5k|                    template: c,
  835|  24.5k|                    dataset: d,
  836|  24.5k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  24.5k|                    base_iri: state.base_iri.clone()
  838|  24.5k|                })
  839|  24.5k|            } /
  840|  24.5k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  24.5k|                Ok(Query::Construct {
  842|  24.5k|                    template: c.clone(),
  843|  24.5k|                    dataset: d,
  844|  24.5k|                    pattern: build_select(
  845|  24.5k|                        Selection::no_op(),
  846|  24.5k|                        GraphPattern::Bgp { patterns: c },
  847|  24.5k|                        g, h, o, l, v, state
  848|  24.5k|                    )?,
  849|  24.5k|                    base_iri: state.base_iri.clone()
  850|  24.5k|                })
  851|  24.5k|            }
  852|  24.5k|
  853|  24.5k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  24.5k|
  855|  24.5k|        rule DescribeQuery() -> Query =
  856|  24.5k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  24.5k|                Ok(Query::Describe {
  858|  24.5k|                    dataset: d,
  859|  24.5k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  24.5k|                    base_iri: state.base_iri.clone()
  861|  24.5k|                })
  862|  24.5k|            } /
  863|  24.5k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  24.5k|                Ok(Query::Describe {
  865|  24.5k|                    dataset: d,
  866|  24.5k|                    pattern: build_select(Selection {
  867|  24.5k|                        option: SelectionOption::Default,
  868|  24.5k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  24.5k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  24.5k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  24.5k|                        }).collect())
  872|  24.5k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  24.5k|                    base_iri: state.base_iri.clone()
  874|  24.5k|                })
  875|  24.5k|            }
  876|  24.5k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  24.5k|
  878|  24.5k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  24.5k|            Ok(Query::Ask {
  880|  24.5k|                dataset: d,
  881|  24.5k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  24.5k|                base_iri: state.base_iri.clone()
  883|  24.5k|            })
  884|  24.5k|        }
  885|  24.5k|
  886|  24.5k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  24.5k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  24.5k|            if d.is_empty() {
  889|  24.5k|                return None;
  890|  24.5k|            }
  891|  24.5k|            let mut default = Vec::new();
  892|  24.5k|            let mut named = Vec::new();
  893|  24.5k|            for (d, n) in d {
  894|  24.5k|                if let Some(d) = d {
  895|  24.5k|                    default.push(d);
  896|  24.5k|                }
  897|  24.5k|                if let Some(n) = n {
  898|  24.5k|                    named.push(n);
  899|  24.5k|                }
  900|  24.5k|            }
  901|  24.5k|            Some(QueryDataset {
  902|  24.5k|                default, named: Some(named)
  903|  24.5k|            })
  904|  24.5k|        }
  905|  24.5k|
  906|  24.5k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  24.5k|            (Some(s), None)
  908|  24.5k|        }
  909|  24.5k|
  910|  24.5k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  24.5k|            (None, Some(s))
  912|  24.5k|        }
  913|  24.5k|
  914|  24.5k|        rule SourceSelector() -> NamedNode = iri()
  915|  24.5k|
  916|  24.5k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  24.5k|            p
  918|  24.5k|        }
  919|  24.5k|
  920|  24.5k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  24.5k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  24.5k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  24.5k|                if let Expression::Variable(v) = e {
  924|  24.5k|                    v
  925|  24.5k|                } else {
  926|  24.5k|                    let v = vo.unwrap_or_else(variable);
  927|  24.5k|                    projections.push((e, v.clone()));
  928|  24.5k|                    v
  929|  24.5k|                }
  930|  24.5k|            }).collect();
  931|  24.5k|            (clauses, projections)
  932|  24.5k|        }
  933|  24.5k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  24.5k|
  935|  24.5k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  24.5k|            e:BuiltInCall() { (e, None) } /
  937|  24.5k|            e:FunctionCall() { (e, None) } /
  938|  24.5k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  24.5k|            e:Var() { (e.into(), None) }
  940|  24.5k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  24.5k|
  942|  24.5k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  24.5k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  24.5k|        }
  945|  24.5k|
  946|  24.5k|        rule HavingCondition() -> Expression = Constraint()
  947|  24.5k|
  948|  24.5k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  24.5k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  24.5k|
  951|  24.5k|        rule OrderCondition() -> OrderExpression =
  952|  24.5k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  24.5k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  24.5k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  24.5k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  24.5k|
  957|  24.5k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  24.5k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  24.5k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  24.5k|
  961|  24.5k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  24.5k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  24.5k|        }
  964|  24.5k|
  965|  24.5k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  24.5k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  24.5k|        }
  968|  24.5k|
  969|  24.5k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  24.5k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  24.5k|            { None }
  972|  24.5k|
  973|  24.5k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  24.5k|
  975|  24.5k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  24.5k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  24.5k|
  978|  24.5k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  24.5k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  24.5k|        }
  981|  24.5k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  24.5k|
  983|  24.5k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  24.5k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  24.5k|        }
  986|  24.5k|
  987|  24.5k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  24.5k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  24.5k|        }
  990|  24.5k|
  991|  24.5k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  24.5k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  24.5k|        }
  994|  24.5k|
  995|  24.5k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  24.5k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  24.5k|            if from == to {
  998|  24.5k|                Vec::new() // identity case
  999|  24.5k|            } else {
 1000|  24.5k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  24.5k|                vec![copy_graph(from, to)]
 1002|  24.5k|            }
 1003|  24.5k|        }
 1004|  24.5k|
 1005|  24.5k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  24.5k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  24.5k|            if from == to {
 1008|  24.5k|                Vec::new() // identity case
 1009|  24.5k|            } else {
 1010|  24.5k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  24.5k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  24.5k|            }
 1013|  24.5k|        }
 1014|  24.5k|
 1015|  24.5k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  24.5k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  24.5k|            if from == to {
 1018|  24.5k|                Vec::new() // identity case
 1019|  24.5k|            } else {
 1020|  24.5k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  24.5k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  24.5k|            }
 1023|  24.5k|        }
 1024|  24.5k|
 1025|  24.5k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  24.5k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  24.5k|        }
 1028|  24.5k|
 1029|  24.5k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  24.5k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  24.5k|        }
 1032|  24.5k|
 1033|  24.5k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  24.5k|            let pattern = d.iter().map(|q| {
 1035|  24.5k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  24.5k|                match &q.graph_name {
 1037|  24.5k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  24.5k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  24.5k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  24.5k|                }
 1041|  24.5k|            }).reduce(new_join).unwrap_or_default();
 1042|  24.5k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  24.5k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  24.5k|                delete,
 1045|  24.5k|                insert: Vec::new(),
 1046|  24.5k|                using: None,
 1047|  24.5k|                pattern: Box::new(pattern)
 1048|  24.5k|            }])
 1049|  24.5k|        }
 1050|  24.5k|
 1051|  24.5k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  24.5k|            let (delete, insert) = c;
 1053|  24.5k|            let mut delete = delete.unwrap_or_default();
 1054|  24.5k|            let mut insert = insert.unwrap_or_default();
 1055|  24.5k|            #[allow(clippy::shadow_same)]
 1056|  24.5k|            let mut pattern = pattern;
 1057|  24.5k|
 1058|  24.5k|            let mut using = if u.is_empty() {
 1059|  24.5k|                None
 1060|  24.5k|            } else {
 1061|  24.5k|                let mut default = Vec::new();
 1062|  24.5k|                let mut named = Vec::new();
 1063|  24.5k|                for (d, n) in u {
 1064|  24.5k|                    if let Some(d) = d {
 1065|  24.5k|                        default.push(d)
 1066|  24.5k|                    }
 1067|  24.5k|                    if let Some(n) = n {
 1068|  24.5k|                        named.push(n)
 1069|  24.5k|                    }
 1070|  24.5k|                }
 1071|  24.5k|                Some(QueryDataset { default, named: Some(named) })
 1072|  24.5k|            };
 1073|  24.5k|
 1074|  24.5k|            if let Some(with) = with {
 1075|  24.5k|                // We inject WITH everywhere
 1076|  24.5k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  24.5k|                    GroundQuadPattern {
 1078|  24.5k|                        subject: q.subject,
 1079|  24.5k|                        predicate: q.predicate,
 1080|  24.5k|                        object: q.object,
 1081|  24.5k|                        graph_name: with.clone().into()
 1082|  24.5k|                    }
 1083|  24.5k|                } else {
 1084|  24.5k|                    q
 1085|  24.5k|                }).collect();
 1086|  24.5k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  24.5k|                    QuadPattern {
 1088|  24.5k|                        subject: q.subject,
 1089|  24.5k|                        predicate: q.predicate,
 1090|  24.5k|                        object: q.object,
 1091|  24.5k|                        graph_name: with.clone().into()
 1092|  24.5k|                    }
 1093|  24.5k|                } else {
 1094|  24.5k|                    q
 1095|  24.5k|                }).collect();
 1096|  24.5k|                if using.is_none() {
 1097|  24.5k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  24.5k|                }
 1099|  24.5k|            }
 1100|  24.5k|
 1101|  24.5k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  24.5k|                delete,
 1103|  24.5k|                insert,
 1104|  24.5k|                using,
 1105|  24.5k|                pattern: Box::new(pattern)
 1106|  24.5k|            }]
 1107|  24.5k|        }
 1108|  24.5k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  24.5k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  24.5k|            (Some(d), i)
 1111|  24.5k|        } / i:InsertClause() {
 1112|  24.5k|            (None, Some(i))
 1113|  24.5k|        }
 1114|  24.5k|        rule Modify_clear() = {
 1115|  24.5k|            state.used_bnodes.clear();
 1116|  24.5k|            state.currently_used_bnodes.clear();
 1117|  24.5k|        }
 1118|  24.5k|
 1119|  24.5k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  24.5k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  24.5k|        }
 1122|  24.5k|
 1123|  24.5k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  24.5k|
 1125|  24.5k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  24.5k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  24.5k|            (Some(i), None)
 1128|  24.5k|        }
 1129|  24.5k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  24.5k|            (None, Some(i))
 1131|  24.5k|        }
 1132|  24.5k|
 1133|  24.5k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  24.5k|            GraphName::DefaultGraph
 1135|  24.5k|        } / (i("GRAPH") _)? g:iri() {
 1136|  24.5k|            GraphName::NamedNode(g)
 1137|  24.5k|        }
 1138|  24.5k|
 1139|  24.5k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  24.5k|
 1141|  24.5k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  24.5k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  24.5k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  24.5k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  24.5k|
 1146|  24.5k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  24.5k|
 1148|  24.5k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  24.5k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  24.5k|        }
 1151|  24.5k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  24.5k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  24.5k|        }
 1154|  24.5k|
 1155|  24.5k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  24.5k|            q.into_iter().flatten().collect()
 1157|  24.5k|        }
 1158|  24.5k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  24.5k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  24.5k|        } //TODO: return iter?
 1161|  24.5k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  24.5k|
 1163|  24.5k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  24.5k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  24.5k|        }
 1166|  24.5k|
 1167|  24.5k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  24.5k|            ts.into_iter().flatten().collect()
 1169|  24.5k|        }
 1170|  24.5k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  24.5k|
 1172|  24.5k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  24.5k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  24.5k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  24.5k|        rule GroupGraphPattern_clear() = {
 1176|  24.5k|             // We deal with blank nodes aliases rule
 1177|  24.5k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  24.5k|            state.currently_used_bnodes.clear();
 1179|  24.5k|        }
 1180|  24.5k|
 1181|  24.5k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  24.5k|            let mut filter: Option<Expression> = None;
 1183|  24.5k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  24.5k|            for e in b.into_iter().flatten() {
 1185|  24.5k|                match e {
 1186|  24.5k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  24.5k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  24.5k|                    }
 1189|  24.5k|                    #[cfg(feature = "sep-0006")]
 1190|  24.5k|                    PartialGraphPattern::Lateral(p) => {
 1191|  24.5k|                        let mut defined_variables = HashSet::default();
 1192|  24.5k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  24.5k|                        let mut contains = false;
 1194|  24.5k|                        g.on_in_scope_variable(|v| {
 1195|  24.5k|                            if defined_variables.contains(v) {
 1196|  24.5k|                                contains = true;
 1197|  24.5k|                            }
 1198|  24.5k|                        });
 1199|  24.5k|                        if contains {
 1200|  24.5k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  24.5k|                        }
 1202|  24.5k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  24.5k|                    }
 1204|  24.5k|                    PartialGraphPattern::Minus(p) => {
 1205|  24.5k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  24.5k|                    }
 1207|  24.5k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  24.5k|                        let mut contains = false;
 1209|  24.5k|                        g.on_in_scope_variable(|v| {
 1210|  24.5k|                            if *v == variable {
 1211|  24.5k|                                contains = true;
 1212|  24.5k|                            }
 1213|  24.5k|                        });
 1214|  24.5k|                        if contains {
 1215|  24.5k|                            return Err("BIND is overriding an existing variable")
 1216|  24.5k|                        }
 1217|  24.5k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  24.5k|                    }
 1219|  24.5k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  24.5k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  24.5k|                    } else {
 1222|  24.5k|                        expr
 1223|  24.5k|                    }),
 1224|  24.5k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  24.5k|                }
 1226|  24.5k|            }
 1227|  24.5k|
 1228|  24.5k|            Ok(if let Some(expr) = filter {
 1229|  24.5k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  24.5k|            } else {
 1231|  24.5k|                g
 1232|  24.5k|            })
 1233|  24.5k|        }
 1234|  24.5k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  24.5k|            let mut result = vec![a];
 1236|  24.5k|            if let Some(v) = b {
 1237|  24.5k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  24.5k|            }
 1239|  24.5k|            result
 1240|  24.5k|        }
 1241|  24.5k|
 1242|  24.5k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  24.5k|            hs.into_iter().flatten().collect()
 1244|  24.5k|        }
 1245|  24.5k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  24.5k|
 1247|  24.5k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  24.5k|
 1249|  24.5k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  24.5k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  24.5k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  24.5k|            } else {
 1253|  24.5k|               PartialGraphPattern::Optional(p, None)
 1254|  24.5k|            }
 1255|  24.5k|        }
 1256|  24.5k|
 1257|  24.5k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  24.5k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  24.5k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  24.5k|        }
 1261|  24.5k|
 1262|  24.5k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  24.5k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  24.5k|        }
 1265|  24.5k|
 1266|  24.5k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  24.5k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  24.5k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  24.5k|
 1270|  24.5k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  24.5k|            PartialGraphPattern::Bind(e, v)
 1272|  24.5k|        }
 1273|  24.5k|
 1274|  24.5k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  24.5k|
 1276|  24.5k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  24.5k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  24.5k|        }
 1279|  24.5k|
 1280|  24.5k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  24.5k|            (vec![var], d)
 1282|  24.5k|        }
 1283|  24.5k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  24.5k|
 1285|  24.5k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  24.5k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  24.5k|                Ok((vars, vals))
 1288|  24.5k|            } else {
 1289|  24.5k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  24.5k|            }
 1291|  24.5k|        }
 1292|  24.5k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  24.5k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  24.5k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  24.5k|
 1296|  24.5k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  24.5k|            t:QuotedTripleData() {?
 1298|  24.5k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  24.5k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  24.5k|            } /
 1301|  24.5k|            i:iri() { Some(i.into()) } /
 1302|  24.5k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  24.5k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  24.5k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  24.5k|            i("UNDEF") { None }
 1306|  24.5k|
 1307|  24.5k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  24.5k|            PartialGraphPattern::Minus(p)
 1309|  24.5k|        }
 1310|  24.5k|
 1311|  24.5k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  24.5k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  24.5k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  24.5k|            }).map(PartialGraphPattern::Other)
 1315|  24.5k|        }
 1316|  24.5k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  24.5k|
 1318|  24.5k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  24.5k|            PartialGraphPattern::Filter(c)
 1320|  24.5k|        }
 1321|  24.5k|
 1322|  24.5k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  24.5k|
 1324|  24.5k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  24.5k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  24.5k|        }
 1327|  24.5k|
 1328|  24.5k|        rule ArgList() -> Vec<Expression> =
 1329|  24.5k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  24.5k|            NIL() { Vec::new() }
 1331|  24.5k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  24.5k|
 1333|  24.5k|        rule ExpressionList() -> Vec<Expression> =
 1334|  24.5k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  24.5k|            NIL() { Vec::new() }
 1336|  24.5k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  24.5k|
 1338|  24.5k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  24.5k|
 1340|  24.5k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  24.5k|            p.into_iter().flatten().collect()
 1342|  24.5k|        }
 1343|  24.5k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  24.5k|
 1345|  24.5k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  24.5k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  24.5k|                let mut patterns = po.patterns;
 1348|  24.5k|                for (p, os) in po.focus {
 1349|  24.5k|                    for o in os {
 1350|  24.5k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  24.5k|                    }
 1352|  24.5k|                }
 1353|  24.5k|                Ok(patterns)
 1354|  24.5k|            } /
 1355|  24.5k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  24.5k|                let mut patterns = s.patterns;
 1357|  24.5k|                patterns.extend(po.patterns);
 1358|  24.5k|                for (p, os) in po.focus {
 1359|  24.5k|                    for o in os {
 1360|  24.5k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  24.5k|                    }
 1362|  24.5k|                }
 1363|  24.5k|                Ok(patterns)
 1364|  24.5k|            }
 1365|  24.5k|
 1366|  24.5k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  24.5k|            PropertyListNotEmpty() /
 1368|  24.5k|            { FocusedTriplePattern::default() }
 1369|  24.5k|
 1370|  24.5k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  24.5k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  24.5k|                a.focus.push(b.focus);
 1373|  24.5k|                a.patterns.extend(b.patterns);
 1374|  24.5k|                a
 1375|  24.5k|            })
 1376|  24.5k|        }
 1377|  24.5k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  24.5k|            FocusedTriplePattern {
 1379|  24.5k|                focus: (p, o.focus),
 1380|  24.5k|                patterns: o.patterns
 1381|  24.5k|            }
 1382|  24.5k|        }
 1383|  24.5k|
 1384|  24.5k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  24.5k|
 1386|  24.5k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  24.5k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  24.5k|                a.focus.push(b.focus);
 1389|  24.5k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  24.5k|                a
 1391|  24.5k|            })
 1392|  24.5k|        }
 1393|  24.5k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  24.5k|
 1395|  24.5k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  24.5k|            if let Some(a) = a {
 1397|  24.5k|                let mut patterns = g.patterns;
 1398|  24.5k|                patterns.extend(a.patterns);
 1399|  24.5k|                FocusedTriplePattern {
 1400|  24.5k|                    focus: AnnotatedTerm {
 1401|  24.5k|                        term: g.focus,
 1402|  24.5k|                        annotations: a.focus
 1403|  24.5k|                    },
 1404|  24.5k|                    patterns
 1405|  24.5k|                }
 1406|  24.5k|            } else {
 1407|  24.5k|                FocusedTriplePattern {
 1408|  24.5k|                    focus: AnnotatedTerm {
 1409|  24.5k|                        term: g.focus,
 1410|  24.5k|                        annotations: Vec::new()
 1411|  24.5k|                    },
 1412|  24.5k|                    patterns: g.patterns
 1413|  24.5k|                }
 1414|  24.5k|            }
 1415|  24.5k|        }
 1416|  24.5k|
 1417|  24.5k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  24.5k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  24.5k|                let mut patterns = po.patterns;
 1420|  24.5k|                for (p, os) in po.focus {
 1421|  24.5k|                    for o in os {
 1422|  24.5k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  24.5k|                    }
 1424|  24.5k|                }
 1425|  24.5k|                Ok(patterns)
 1426|  24.5k|            } /
 1427|  24.5k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  24.5k|                let mut patterns = s.patterns;
 1429|  24.5k|                patterns.extend(po.patterns);
 1430|  24.5k|                for (p, os) in po.focus {
 1431|  24.5k|                    for o in os {
 1432|  24.5k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  24.5k|                    }
 1434|  24.5k|                }
 1435|  24.5k|                Ok(patterns)
 1436|  24.5k|            }
 1437|  24.5k|
 1438|  24.5k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  24.5k|            PropertyListPathNotEmpty() /
 1440|  24.5k|            { FocusedTripleOrPathPattern::default() }
 1441|  24.5k|
 1442|  24.5k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  24.5k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  24.5k|                    focus: vec![(hp, ho.focus)],
 1445|  24.5k|                    patterns: ho.patterns
 1446|  24.5k|                }, |mut a, b| {
 1447|  24.5k|                    a.focus.push(b.focus);
 1448|  24.5k|                    a.patterns.extend(b.patterns);
 1449|  24.5k|                    a
 1450|  24.5k|                })
 1451|  24.5k|        }
 1452|  24.5k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  24.5k|            c
 1454|  24.5k|        }
 1455|  24.5k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  24.5k|            FocusedTripleOrPathPattern {
 1457|  24.5k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  24.5k|                patterns: o.patterns
 1459|  24.5k|            }
 1460|  24.5k|        }
 1461|  24.5k|
 1462|  24.5k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  24.5k|            p.into()
 1464|  24.5k|        }
 1465|  24.5k|
 1466|  24.5k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  24.5k|            v.into()
 1468|  24.5k|        }
 1469|  24.5k|
 1470|  24.5k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  24.5k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  24.5k|                a.focus.push(b.focus);
 1473|  24.5k|                a.patterns.extend(b.patterns);
 1474|  24.5k|                a
 1475|  24.5k|            })
 1476|  24.5k|        }
 1477|  24.5k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  24.5k|
 1479|  24.5k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  24.5k|             if let Some(a) = a {
 1481|  24.5k|                let mut patterns = g.patterns;
 1482|  24.5k|                patterns.extend(a.patterns);
 1483|  24.5k|                FocusedTripleOrPathPattern {
 1484|  24.5k|                    focus: AnnotatedTermPath {
 1485|  24.5k|                        term: g.focus,
 1486|  24.5k|                        annotations: a.focus
 1487|  24.5k|                    },
 1488|  24.5k|                    patterns
 1489|  24.5k|                }
 1490|  24.5k|            } else {
 1491|  24.5k|                FocusedTripleOrPathPattern {
 1492|  24.5k|                    focus: AnnotatedTermPath {
 1493|  24.5k|                        term: g.focus,
 1494|  24.5k|                        annotations: Vec::new()
 1495|  24.5k|                    },
 1496|  24.5k|                    patterns: g.patterns
 1497|  24.5k|                }
 1498|  24.5k|            }
 1499|  24.5k|        }
 1500|  24.5k|
 1501|  24.5k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  24.5k|
 1503|  24.5k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  24.5k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|       |                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  24.5k|            })
 1507|  24.5k|        }
 1508|  24.5k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  24.5k|
 1510|  24.5k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  24.5k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  24.5k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  24.5k|            })
 1514|  24.5k|        }
 1515|  24.5k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  24.5k|
 1517|  24.5k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  24.5k|            match o {
 1519|  24.5k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  24.5k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  24.5k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  24.5k|                Some(_) => unreachable!(),
 1523|  24.5k|                None => p
 1524|  24.5k|            }
 1525|  24.5k|        }
 1526|  24.5k|        rule PathElt_op() -> char =
 1527|  24.5k|            "*" { '*' } /
 1528|  24.5k|            "+" { '+' } /
 1529|  24.5k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  24.5k|
 1531|  24.5k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  24.5k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  24.5k|            PathElt()
 1534|  24.5k|
 1535|  24.5k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  24.5k|            v:iri() { v.into() } /
 1537|  24.5k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  24.5k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  24.5k|            "(" _ p:Path() _ ")" { p }
 1540|  24.5k|
 1541|  24.5k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  24.5k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  24.5k|                let mut direct = Vec::new();
 1544|  24.5k|                let mut inverse = Vec::new();
 1545|  24.5k|                for e in p {
 1546|  24.5k|                    match e {
 1547|  24.5k|                        Either::Left(a) => direct.push(a),
 1548|  24.5k|                        Either::Right(b) => inverse.push(b)
 1549|  24.5k|                    }
 1550|  24.5k|                }
 1551|  24.5k|                if inverse.is_empty() {
 1552|  24.5k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  24.5k|                } else if direct.is_empty() {
 1554|  24.5k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  24.5k|                } else {
 1556|  24.5k|                    PropertyPathExpression::Alternative(
 1557|  24.5k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  24.5k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  24.5k|                    )
 1560|  24.5k|                }
 1561|  24.5k|            } /
 1562|  24.5k|            p:PathOneInPropertySet() {
 1563|  24.5k|                match p {
 1564|  24.5k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  24.5k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  24.5k|                }
 1567|  24.5k|            }
 1568|  24.5k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  24.5k|
 1570|  24.5k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  24.5k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  24.5k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  24.5k|            v:iri() { Either::Left(v) } /
 1574|  24.5k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  24.5k|
 1576|  24.5k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  24.5k|
 1578|  24.5k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  24.5k|            let mut patterns = po.patterns;
 1580|  24.5k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  24.5k|            for (p, os) in po.focus {
 1582|  24.5k|                for o in os {
 1583|  24.5k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  24.5k|                }
 1585|  24.5k|            }
 1586|  24.5k|            Ok(FocusedTriplePattern {
 1587|  24.5k|                focus: bnode,
 1588|  24.5k|                patterns
 1589|  24.5k|            })
 1590|  24.5k|        }
 1591|  24.5k|
 1592|  24.5k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  24.5k|
 1594|  24.5k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  24.5k|            let mut patterns = po.patterns;
 1596|  24.5k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  24.5k|            for (p, os) in po.focus {
 1598|  24.5k|                for o in os {
 1599|  24.5k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  24.5k|                }
 1601|  24.5k|            }
 1602|  24.5k|            Ok(FocusedTripleOrPathPattern {
 1603|  24.5k|                focus: bnode,
 1604|  24.5k|                patterns
 1605|  24.5k|            })
 1606|  24.5k|        }
 1607|  24.5k|
 1608|  24.5k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  24.5k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  24.5k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  24.5k|            for objWithPatterns in o.into_iter().rev() {
 1612|  24.5k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  24.5k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  24.5k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  24.5k|                current_list_node = new_blank_node;
 1616|  24.5k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  24.5k|            }
 1618|  24.5k|            FocusedTriplePattern {
 1619|  24.5k|                focus: current_list_node,
 1620|  24.5k|                patterns
 1621|  24.5k|            }
 1622|  24.5k|        }
 1623|  24.5k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  24.5k|
 1625|  24.5k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  24.5k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  24.5k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  24.5k|            for objWithPatterns in o.into_iter().rev() {
 1629|  24.5k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  24.5k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  24.5k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  24.5k|                current_list_node = new_blank_node;
 1633|  24.5k|                patterns.extend(objWithPatterns.patterns);
 1634|  24.5k|            }
 1635|  24.5k|            FocusedTripleOrPathPattern {
 1636|  24.5k|                focus: current_list_node,
 1637|  24.5k|                patterns
 1638|  24.5k|            }
 1639|  24.5k|        }
 1640|  24.5k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  24.5k|
 1642|  24.5k|
 1643|  24.5k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  24.5k|
 1645|  24.5k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  24.5k|
 1647|  24.5k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  24.5k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  24.5k|            TriplesNode()
 1650|  24.5k|
 1651|  24.5k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  24.5k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  24.5k|            TriplesNodePath()
 1654|  24.5k|
 1655|  24.5k|        rule VarOrTerm() -> TermPattern =
 1656|  24.5k|            v:Var() { v.into() } /
 1657|  24.5k|            t:QuotedTriple() {?
 1658|  24.5k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  24.5k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  24.5k|            } /
 1661|  24.5k|            t:GraphTerm() { t.into() }
 1662|  24.5k|
 1663|  24.5k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  24.5k|            Ok(TriplePattern {
 1665|  24.5k|                subject: s,
 1666|  24.5k|                predicate: p,
 1667|  24.5k|                object: o
 1668|  24.5k|            })
 1669|  24.5k|        }
 1670|  24.5k|
 1671|  24.5k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  24.5k|            Ok(GroundTriple {
 1673|  24.5k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  24.5k|                predicate: p,
 1675|  24.5k|                object: o
 1676|  24.5k|            })
 1677|  24.5k|        }
 1678|  24.5k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  24.5k|
 1680|  24.5k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  24.5k|            l:RDFLiteral() { l.into() } /
 1682|  24.5k|            l:NumericLiteral() { l.into() } /
 1683|  24.5k|            l:BooleanLiteral() { l.into() } /
 1684|  24.5k|            t:QuotedTripleData() {?
 1685|  24.5k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  24.5k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  24.5k|            }
 1688|  24.5k|
 1689|  24.5k|        rule VarOrIri() -> NamedNodePattern =
 1690|  24.5k|            v:Var() { v.into() } /
 1691|  24.5k|            i:iri() { i.into() }
 1692|  24.5k|
 1693|  24.5k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  24.5k|
 1695|  24.5k|        rule GraphTerm() -> Term =
 1696|  24.5k|            i:iri() { i.into() } /
 1697|  24.5k|            l:RDFLiteral() { l.into() } /
 1698|  24.5k|            l:NumericLiteral() { l.into() } /
 1699|  24.5k|            l:BooleanLiteral() { l.into() } /
 1700|  24.5k|            b:BlankNode() { b.into() } /
 1701|  24.5k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  24.5k|
 1703|  24.5k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  24.5k|
 1705|  24.5k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  24.5k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  24.5k|        }
 1708|  24.5k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  24.5k|
 1710|  24.5k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  24.5k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  24.5k|        }
 1713|  24.5k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  24.5k|
 1715|  24.5k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  24.5k|
 1717|  24.5k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  24.5k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  24.5k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  24.5k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  24.5k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  24.5k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  24.5k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  24.5k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  24.5k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  24.5k|            Some(_) => unreachable!(),
 1727|  24.5k|            None => a
 1728|  24.5k|        } }
 1729|  24.5k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  24.5k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  24.5k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  24.5k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  24.5k|
 1734|  24.5k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  24.5k|
 1736|  24.5k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  24.5k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  24.5k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  24.5k|            Some(_) => unreachable!(),
 1740|  24.5k|            None => a,
 1741|  24.5k|        } }
 1742|  24.5k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  24.5k|            (s, e)
 1744|  24.5k|        }
 1745|  24.5k|
 1746|  24.5k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  24.5k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  24.5k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  24.5k|            Some(_) => unreachable!(),
 1750|  24.5k|            None => a
 1751|  24.5k|        } }
 1752|  24.5k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  24.5k|            (s, e)
 1754|  24.5k|        }
 1755|  24.5k|
 1756|  24.5k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  24.5k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  24.5k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  24.5k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  24.5k|            Some(_) => unreachable!(),
 1761|  24.5k|            None => e,
 1762|  24.5k|        } }
 1763|  24.5k|
 1764|  24.5k|        rule PrimaryExpression() -> Expression =
 1765|  24.5k|            BrackettedExpression()  /
 1766|  24.5k|            ExprQuotedTriple() /
 1767|  24.5k|            iriOrFunction() /
 1768|  24.5k|            v:Var() { v.into() } /
 1769|  24.5k|            l:RDFLiteral() { l.into() } /
 1770|  24.5k|            l:NumericLiteral() { l.into() } /
 1771|  24.5k|            l:BooleanLiteral() { l.into() } /
 1772|  24.5k|            BuiltInCall()
 1773|  24.5k|
 1774|  24.5k|        rule ExprVarOrTerm() -> Expression =
 1775|  24.5k|            ExprQuotedTriple() /
 1776|  24.5k|            i:iri() { i.into() } /
 1777|  24.5k|            l:RDFLiteral() { l.into() } /
 1778|  24.5k|            l:NumericLiteral() { l.into() } /
 1779|  24.5k|            l:BooleanLiteral() { l.into() } /
 1780|  24.5k|            v:Var() { v.into() }
 1781|  24.5k|
 1782|  24.5k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  24.5k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  24.5k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  24.5k|        }
 1786|  24.5k|
 1787|  24.5k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  24.5k|
 1789|  24.5k|        rule BuiltInCall() -> Expression =
 1790|  24.5k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  24.5k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  24.5k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  24.5k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  24.5k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  24.5k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  24.5k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  24.5k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  24.5k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  24.5k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  24.5k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  24.5k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  24.5k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  24.5k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  24.5k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  24.5k|            SubstringExpression() /
 1806|  24.5k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  24.5k|            StrReplaceExpression() /
 1808|  24.5k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  24.5k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  24.5k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  24.5k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  24.5k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  24.5k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  24.5k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  24.5k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  24.5k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  24.5k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  24.5k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  24.5k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  24.5k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  24.5k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  24.5k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  24.5k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  24.5k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  24.5k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  24.5k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  24.5k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  24.5k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  24.5k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  24.5k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  24.5k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  24.5k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  24.5k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  24.5k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  24.5k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  24.5k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  24.5k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  24.5k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  24.5k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  24.5k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  24.5k|            RegexExpression() /
 1842|  24.5k|            ExistsFunc() /
 1843|  24.5k|            NotExistsFunc() /
 1844|  24.5k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  24.5k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  24.5k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  24.5k|            } /
 1848|  24.5k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  24.5k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  24.5k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  24.5k|            } /
 1852|  24.5k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  24.5k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  24.5k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  24.5k|            } /
 1856|  24.5k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  24.5k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  24.5k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  24.5k|            } /
 1860|  24.5k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  24.5k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  24.5k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  24.5k|            } /
 1864|  24.5k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  24.5k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  24.5k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  24.5k|            }
 1868|  24.5k|
 1869|  24.5k|        rule RegexExpression() -> Expression =
 1870|  24.5k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  24.5k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  24.5k|
 1873|  24.5k|
 1874|  24.5k|        rule SubstringExpression() -> Expression =
 1875|  24.5k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  24.5k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  24.5k|
 1878|  24.5k|
 1879|  24.5k|        rule StrReplaceExpression() -> Expression =
 1880|  24.5k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  24.5k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  24.5k|
 1883|  24.5k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  24.5k|
 1885|  24.5k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  24.5k|
 1887|  24.5k|        rule Aggregate() -> AggregateExpression =
 1888|  24.5k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  24.5k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  24.5k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  24.5k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  24.5k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  24.5k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  24.5k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  24.5k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  24.5k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  24.5k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  24.5k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  24.5k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  24.5k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  24.5k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  24.5k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  24.5k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  24.5k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  24.5k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  24.5k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  24.5k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  24.5k|
 1909|  24.5k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  24.5k|            match a {
 1911|  24.5k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  24.5k|                None => i.into()
 1913|  24.5k|            }
 1914|  24.5k|        }
 1915|  24.5k|
 1916|  24.5k|        rule RDFLiteral() -> Literal =
 1917|  24.5k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  24.5k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  24.5k|            value:String() { Literal::new_simple_literal(value) }
 1920|  24.5k|
 1921|  24.5k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  24.5k|
 1923|  24.5k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  24.5k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  24.5k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  24.5k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  24.5k|
 1928|  24.5k|        rule NumericLiteralPositive() -> Literal =
 1929|  24.5k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  24.5k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  24.5k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  24.5k|
 1933|  24.5k|
 1934|  24.5k|        rule NumericLiteralNegative() -> Literal =
 1935|  24.5k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  24.5k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  24.5k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  24.5k|
 1939|  24.5k|        rule BooleanLiteral() -> Literal =
 1940|  24.5k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  24.5k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  24.5k|
 1943|  24.5k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  24.5k|
 1945|  24.5k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  24.5k|            NamedNode::from(i)
 1947|  24.5k|        }
 1948|  24.5k|
 1949|  24.5k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  24.5k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  24.5k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  24.5k|            } else {
 1953|  24.5k|                Err("Prefix not found")
 1954|  24.5k|            } }
 1955|  24.5k|
 1956|  24.5k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  24.5k|            let node = BlankNode::new_unchecked(id);
 1958|  24.5k|            if state.used_bnodes.contains(&node) {
 1959|  24.5k|                Err("Already used blank node id")
 1960|  24.5k|            } else {
 1961|  24.5k|                state.currently_used_bnodes.insert(node.clone());
 1962|  24.5k|                Ok(node)
 1963|  24.5k|            }
 1964|  24.5k|        } / ANON() { BlankNode::default() }
 1965|  24.5k|
 1966|  24.5k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  24.5k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  24.5k|        }
 1969|  24.5k|
 1970|  24.5k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  24.5k|            ns
 1972|  24.5k|        }
 1973|  24.5k|
 1974|  24.5k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  24.5k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  24.5k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  24.5k|                iri.push_str(base);
 1978|  24.5k|                for chunk in local.split('\\') { // We remove \
 1979|  24.5k|                    iri.push_str(chunk);
 1980|  24.5k|                }
 1981|  24.5k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  24.5k|            } else {
 1983|  24.5k|                Err("Prefix not found")
 1984|  24.5k|            }
 1985|  24.5k|        }
 1986|  24.5k|
 1987|  24.5k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  24.5k|            b
 1989|  24.5k|        }
 1990|  24.5k|
 1991|  24.5k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  24.5k|
 1993|  24.5k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  24.5k|
 1995|  24.5k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  24.5k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  24.5k|        }
 1998|  24.5k|
 1999|  24.5k|        rule INTEGER() = ['0'..='9']+
 2000|  24.5k|
 2001|  24.5k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  24.5k|
 2003|  24.5k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  24.5k|
 2005|  24.5k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  24.5k|
 2007|  24.5k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  24.5k|
 2009|  24.5k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  24.5k|
 2011|  24.5k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  24.5k|
 2013|  24.5k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  24.5k|
 2015|  24.5k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  24.5k|
 2017|  24.5k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  24.5k|
 2019|  24.5k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  24.5k|             unescape_string(l)
 2021|  24.5k|        }
 2022|  24.5k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  24.5k|
 2024|  24.5k|
 2025|  24.5k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  24.5k|             unescape_string(l)
 2027|  24.5k|        }
 2028|  24.5k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  24.5k|
 2030|  24.5k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  24.5k|             unescape_string(l)
 2032|  24.5k|        }
 2033|  24.5k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  24.5k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  24.5k|
 2036|  24.5k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  24.5k|             unescape_string(l)
 2038|  24.5k|        }
 2039|  24.5k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  24.5k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  24.5k|
 2042|  24.5k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  24.5k|
 2044|  24.5k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  24.5k|
 2046|  24.5k|        rule NIL() = "(" WS()* ")"
 2047|  24.5k|
 2048|  24.5k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  24.5k|
 2050|  24.5k|        rule ANON() = "[" WS()* "]"
 2051|  24.5k|
 2052|  24.5k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  24.5k|
 2054|  24.5k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  24.5k|
 2056|  24.5k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  24.5k|
 2058|  24.5k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  24.5k|
 2060|  24.5k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  24.5k|
 2062|  24.5k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  24.5k|
 2064|  24.5k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  24.5k|
 2066|  24.5k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  24.5k|
 2068|  24.5k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  24.5k|
 2070|  24.5k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  24.5k|
 2072|  24.5k|        //space
 2073|  24.5k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  24.5k|
 2075|  24.5k|        //comment
 2076|  24.5k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  24.5k|
 2078|  24.5k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  24.5k|            if input.eq_ignore_ascii_case(literal) {
 2080|  24.5k|                Ok(())
 2081|  24.5k|            } else {
 2082|  24.5k|                Err(literal)
 2083|  24.5k|            }
 2084|  24.5k|        }
 2085|  24.5k|    }
 2086|  24.5k|}
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser32___parse_PropertyListPathNotEmpty00B9_:
 1446|    372|                }, |mut a, b| {
 1447|    372|                    a.focus.push(b.focus);
 1448|    372|                    a.patterns.extend(b.patterns);
 1449|    372|                    a
 1450|    372|                })
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_SelectClause_options_0B7_:
  822|    893|            i("REDUCED") { SelectionOption::Reduced } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_ExpressionList_item0B7_:
 1336|    792|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_GraphTerms3_0B7_:
 1701|  1.12k|            NIL() { rdf::NIL.into_owned().into() }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser27___parse_SelectClause_option0B7_:
  821|    338|            i("DISTINCT") { SelectionOption::Distinct } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser18___parse_RDFLiteral0B7_:
 1917|    214|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_PathPrimarys1_0B7_:
 1539|  22.3k|            "(" _ p:Path() _ ")" { p }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser32___parse_PropertyListPathNotEmpty0B7_:
 1442|  11.4k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  11.4k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  11.4k|                    focus: vec![(hp, ho.focus)],
 1445|  11.4k|                    patterns: ho.patterns
 1446|  11.4k|                }, |mut a, b| {
 1447|       |                    a.focus.push(b.focus);
 1448|       |                    a.patterns.extend(b.patterns);
 1449|       |                    a
 1450|  11.4k|                })
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_PathOneInPropertySets_0B7_:
 1572|  3.45k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCallsC_0B7_:
 1832|    173|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_GraphTerms_0B7_:
 1697|  1.34k|            l:RDFLiteral() { l.into() } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser34___parse_RelationalExpression_inner0B7_:
 1730|    800|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_PrimaryExpressions1_0B7_:
 1771|     32|            l:BooleanLiteral() { l.into() } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_InlineDataOneVar_value0B7_:
 1283|    365|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_VerbPath0B7_:
 1462|  2.15k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  2.15k|            p.into()
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCalls3_0B7_:
 1795|    754|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser14___parse_Modify0B7_:
 1051|  1.95k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  1.95k|            let (delete, insert) = c;
 1053|  1.95k|            let mut delete = delete.unwrap_or_default();
 1054|  1.95k|            let mut insert = insert.unwrap_or_default();
 1055|  1.95k|            #[allow(clippy::shadow_same)]
 1056|  1.95k|            let mut pattern = pattern;
 1057|       |
 1058|  1.95k|            let mut using = if u.is_empty() {
 1059|  1.95k|                None
 1060|       |            } else {
 1061|      0|                let mut default = Vec::new();
 1062|      0|                let mut named = Vec::new();
 1063|      0|                for (d, n) in u {
 1064|      0|                    if let Some(d) = d {
 1065|      0|                        default.push(d)
 1066|      0|                    }
 1067|      0|                    if let Some(n) = n {
 1068|      0|                        named.push(n)
 1069|      0|                    }
 1070|       |                }
 1071|      0|                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|  1.95k|            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|  1.78k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|  1.78k|                }).collect();
 1086|  1.78k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|  1.78k|                }).collect();
 1096|  1.78k|                if using.is_none() {
 1097|  1.78k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  1.78k|                }
 1099|    174|            }
 1100|       |
 1101|  1.95k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  1.95k|                delete,
 1103|  1.95k|                insert,
 1104|  1.95k|                using,
 1105|  1.95k|                pattern: Box::new(pattern)
 1106|  1.95k|            }]
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_GroupGraphPatternSub0B7_:
  778|  5.37k|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  5.37k|            let mut filter: Option<Expression> = None;
 1183|  5.37k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  5.37k|            for e in b.into_iter().flatten() {
 1185|  1.19k|                match e {
 1186|    247|                    PartialGraphPattern::Optional(p, f) => {
 1187|    247|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|    291|                    PartialGraphPattern::Lateral(p) => {
 1191|    291|                        let mut defined_variables = HashSet::default();
 1192|    291|                        add_defined_variables(&p, &mut defined_variables);
 1193|    291|                        let mut contains = false;
 1194|    291|                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|    291|                        });
 1199|    291|                        if contains {
 1200|      0|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|    291|                        }
 1202|    291|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|     20|                    PartialGraphPattern::Minus(p) => {
 1205|     20|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|      3|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|      3|                        let mut contains = false;
 1209|      3|                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|      3|                        });
 1214|      3|                        if contains {
 1215|      2|                            return Err("BIND is overriding an existing variable")
 1216|      1|                        }
 1217|      1|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|      3|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|      1|                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|      2|                        expr
 1223|       |                    }),
 1224|    626|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|  5.37k|            Ok(if let Some(expr) = filter {
 1229|      2|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|  5.37k|                g
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser13___parse_Quads0B7_:
 1155|  5.51k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  5.51k|            q.into_iter().flatten().collect()
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser16___parse_Prologue0B7_:
  789|  2.98k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser37___parse_PropertyListPathNotEmpty_item0B7_:
 1452|    598|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|    598|            c
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser32___parse_AdditiveExpression_inner0B7_:
 1742|  2.92k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  2.92k|            (s, e)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_Drop0B7_:
  987|    223|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|    223|            vec![GraphUpdateOperation::Drop { silent, graph }]
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser12___parse_Verb0B7_:
 1384|  9.96k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_PathSequence0B7_:
  778|  26.1k|parser! {
  779|  26.1k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  26.1k|    grammar parser(state: &mut ParserState) for str {
  781|  26.1k|        pub rule QueryUnit() -> Query = Query()
  782|  26.1k|
  783|  26.1k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  26.1k|            q
  785|  26.1k|        }
  786|  26.1k|
  787|  26.1k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  26.1k|
  789|  26.1k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  26.1k|
  791|  26.1k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  26.1k|            state.base_iri = Some(i)
  793|  26.1k|        }
  794|  26.1k|
  795|  26.1k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  26.1k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  26.1k|        }
  798|  26.1k|
  799|  26.1k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  26.1k|            Ok(Query::Select {
  801|  26.1k|                dataset: d,
  802|  26.1k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  26.1k|                base_iri: state.base_iri.clone()
  804|  26.1k|            })
  805|  26.1k|        }
  806|  26.1k|
  807|  26.1k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  26.1k|            build_select(s, w, g, h, o, l, v, state)
  809|  26.1k|        }
  810|  26.1k|
  811|  26.1k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  26.1k|            Selection {
  813|  26.1k|                option: o,
  814|  26.1k|                variables: v
  815|  26.1k|            }
  816|  26.1k|        }
  817|  26.1k|        rule Selection_init() = {
  818|  26.1k|            state.aggregates.push(Vec::new())
  819|  26.1k|        }
  820|  26.1k|        rule SelectClause_option() -> SelectionOption =
  821|  26.1k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  26.1k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  26.1k|            { SelectionOption::Default }
  824|  26.1k|        rule SelectClause_variables() -> SelectionVariables =
  825|  26.1k|            "*" { SelectionVariables::Star } /
  826|  26.1k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  26.1k|        rule SelectClause_member() -> SelectionMember =
  828|  26.1k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  26.1k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  26.1k|
  831|  26.1k|        rule ConstructQuery() -> Query =
  832|  26.1k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  26.1k|                Ok(Query::Construct {
  834|  26.1k|                    template: c,
  835|  26.1k|                    dataset: d,
  836|  26.1k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  26.1k|                    base_iri: state.base_iri.clone()
  838|  26.1k|                })
  839|  26.1k|            } /
  840|  26.1k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  26.1k|                Ok(Query::Construct {
  842|  26.1k|                    template: c.clone(),
  843|  26.1k|                    dataset: d,
  844|  26.1k|                    pattern: build_select(
  845|  26.1k|                        Selection::no_op(),
  846|  26.1k|                        GraphPattern::Bgp { patterns: c },
  847|  26.1k|                        g, h, o, l, v, state
  848|  26.1k|                    )?,
  849|  26.1k|                    base_iri: state.base_iri.clone()
  850|  26.1k|                })
  851|  26.1k|            }
  852|  26.1k|
  853|  26.1k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  26.1k|
  855|  26.1k|        rule DescribeQuery() -> Query =
  856|  26.1k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  26.1k|                Ok(Query::Describe {
  858|  26.1k|                    dataset: d,
  859|  26.1k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  26.1k|                    base_iri: state.base_iri.clone()
  861|  26.1k|                })
  862|  26.1k|            } /
  863|  26.1k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  26.1k|                Ok(Query::Describe {
  865|  26.1k|                    dataset: d,
  866|  26.1k|                    pattern: build_select(Selection {
  867|  26.1k|                        option: SelectionOption::Default,
  868|  26.1k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  26.1k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  26.1k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  26.1k|                        }).collect())
  872|  26.1k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  26.1k|                    base_iri: state.base_iri.clone()
  874|  26.1k|                })
  875|  26.1k|            }
  876|  26.1k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  26.1k|
  878|  26.1k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  26.1k|            Ok(Query::Ask {
  880|  26.1k|                dataset: d,
  881|  26.1k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  26.1k|                base_iri: state.base_iri.clone()
  883|  26.1k|            })
  884|  26.1k|        }
  885|  26.1k|
  886|  26.1k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  26.1k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  26.1k|            if d.is_empty() {
  889|  26.1k|                return None;
  890|  26.1k|            }
  891|  26.1k|            let mut default = Vec::new();
  892|  26.1k|            let mut named = Vec::new();
  893|  26.1k|            for (d, n) in d {
  894|  26.1k|                if let Some(d) = d {
  895|  26.1k|                    default.push(d);
  896|  26.1k|                }
  897|  26.1k|                if let Some(n) = n {
  898|  26.1k|                    named.push(n);
  899|  26.1k|                }
  900|  26.1k|            }
  901|  26.1k|            Some(QueryDataset {
  902|  26.1k|                default, named: Some(named)
  903|  26.1k|            })
  904|  26.1k|        }
  905|  26.1k|
  906|  26.1k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  26.1k|            (Some(s), None)
  908|  26.1k|        }
  909|  26.1k|
  910|  26.1k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  26.1k|            (None, Some(s))
  912|  26.1k|        }
  913|  26.1k|
  914|  26.1k|        rule SourceSelector() -> NamedNode = iri()
  915|  26.1k|
  916|  26.1k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  26.1k|            p
  918|  26.1k|        }
  919|  26.1k|
  920|  26.1k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  26.1k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  26.1k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  26.1k|                if let Expression::Variable(v) = e {
  924|  26.1k|                    v
  925|  26.1k|                } else {
  926|  26.1k|                    let v = vo.unwrap_or_else(variable);
  927|  26.1k|                    projections.push((e, v.clone()));
  928|  26.1k|                    v
  929|  26.1k|                }
  930|  26.1k|            }).collect();
  931|  26.1k|            (clauses, projections)
  932|  26.1k|        }
  933|  26.1k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  26.1k|
  935|  26.1k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  26.1k|            e:BuiltInCall() { (e, None) } /
  937|  26.1k|            e:FunctionCall() { (e, None) } /
  938|  26.1k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  26.1k|            e:Var() { (e.into(), None) }
  940|  26.1k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  26.1k|
  942|  26.1k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  26.1k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  26.1k|        }
  945|  26.1k|
  946|  26.1k|        rule HavingCondition() -> Expression = Constraint()
  947|  26.1k|
  948|  26.1k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  26.1k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  26.1k|
  951|  26.1k|        rule OrderCondition() -> OrderExpression =
  952|  26.1k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  26.1k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  26.1k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  26.1k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  26.1k|
  957|  26.1k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  26.1k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  26.1k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  26.1k|
  961|  26.1k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  26.1k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  26.1k|        }
  964|  26.1k|
  965|  26.1k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  26.1k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  26.1k|        }
  968|  26.1k|
  969|  26.1k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  26.1k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  26.1k|            { None }
  972|  26.1k|
  973|  26.1k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  26.1k|
  975|  26.1k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  26.1k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  26.1k|
  978|  26.1k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  26.1k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  26.1k|        }
  981|  26.1k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  26.1k|
  983|  26.1k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  26.1k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  26.1k|        }
  986|  26.1k|
  987|  26.1k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  26.1k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  26.1k|        }
  990|  26.1k|
  991|  26.1k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  26.1k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  26.1k|        }
  994|  26.1k|
  995|  26.1k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  26.1k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  26.1k|            if from == to {
  998|  26.1k|                Vec::new() // identity case
  999|  26.1k|            } else {
 1000|  26.1k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  26.1k|                vec![copy_graph(from, to)]
 1002|  26.1k|            }
 1003|  26.1k|        }
 1004|  26.1k|
 1005|  26.1k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  26.1k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  26.1k|            if from == to {
 1008|  26.1k|                Vec::new() // identity case
 1009|  26.1k|            } else {
 1010|  26.1k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  26.1k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  26.1k|            }
 1013|  26.1k|        }
 1014|  26.1k|
 1015|  26.1k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  26.1k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  26.1k|            if from == to {
 1018|  26.1k|                Vec::new() // identity case
 1019|  26.1k|            } else {
 1020|  26.1k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  26.1k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  26.1k|            }
 1023|  26.1k|        }
 1024|  26.1k|
 1025|  26.1k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  26.1k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  26.1k|        }
 1028|  26.1k|
 1029|  26.1k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  26.1k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  26.1k|        }
 1032|  26.1k|
 1033|  26.1k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  26.1k|            let pattern = d.iter().map(|q| {
 1035|  26.1k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  26.1k|                match &q.graph_name {
 1037|  26.1k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  26.1k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  26.1k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  26.1k|                }
 1041|  26.1k|            }).reduce(new_join).unwrap_or_default();
 1042|  26.1k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  26.1k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  26.1k|                delete,
 1045|  26.1k|                insert: Vec::new(),
 1046|  26.1k|                using: None,
 1047|  26.1k|                pattern: Box::new(pattern)
 1048|  26.1k|            }])
 1049|  26.1k|        }
 1050|  26.1k|
 1051|  26.1k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  26.1k|            let (delete, insert) = c;
 1053|  26.1k|            let mut delete = delete.unwrap_or_default();
 1054|  26.1k|            let mut insert = insert.unwrap_or_default();
 1055|  26.1k|            #[allow(clippy::shadow_same)]
 1056|  26.1k|            let mut pattern = pattern;
 1057|  26.1k|
 1058|  26.1k|            let mut using = if u.is_empty() {
 1059|  26.1k|                None
 1060|  26.1k|            } else {
 1061|  26.1k|                let mut default = Vec::new();
 1062|  26.1k|                let mut named = Vec::new();
 1063|  26.1k|                for (d, n) in u {
 1064|  26.1k|                    if let Some(d) = d {
 1065|  26.1k|                        default.push(d)
 1066|  26.1k|                    }
 1067|  26.1k|                    if let Some(n) = n {
 1068|  26.1k|                        named.push(n)
 1069|  26.1k|                    }
 1070|  26.1k|                }
 1071|  26.1k|                Some(QueryDataset { default, named: Some(named) })
 1072|  26.1k|            };
 1073|  26.1k|
 1074|  26.1k|            if let Some(with) = with {
 1075|  26.1k|                // We inject WITH everywhere
 1076|  26.1k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  26.1k|                    GroundQuadPattern {
 1078|  26.1k|                        subject: q.subject,
 1079|  26.1k|                        predicate: q.predicate,
 1080|  26.1k|                        object: q.object,
 1081|  26.1k|                        graph_name: with.clone().into()
 1082|  26.1k|                    }
 1083|  26.1k|                } else {
 1084|  26.1k|                    q
 1085|  26.1k|                }).collect();
 1086|  26.1k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  26.1k|                    QuadPattern {
 1088|  26.1k|                        subject: q.subject,
 1089|  26.1k|                        predicate: q.predicate,
 1090|  26.1k|                        object: q.object,
 1091|  26.1k|                        graph_name: with.clone().into()
 1092|  26.1k|                    }
 1093|  26.1k|                } else {
 1094|  26.1k|                    q
 1095|  26.1k|                }).collect();
 1096|  26.1k|                if using.is_none() {
 1097|  26.1k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  26.1k|                }
 1099|  26.1k|            }
 1100|  26.1k|
 1101|  26.1k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  26.1k|                delete,
 1103|  26.1k|                insert,
 1104|  26.1k|                using,
 1105|  26.1k|                pattern: Box::new(pattern)
 1106|  26.1k|            }]
 1107|  26.1k|        }
 1108|  26.1k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  26.1k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  26.1k|            (Some(d), i)
 1111|  26.1k|        } / i:InsertClause() {
 1112|  26.1k|            (None, Some(i))
 1113|  26.1k|        }
 1114|  26.1k|        rule Modify_clear() = {
 1115|  26.1k|            state.used_bnodes.clear();
 1116|  26.1k|            state.currently_used_bnodes.clear();
 1117|  26.1k|        }
 1118|  26.1k|
 1119|  26.1k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  26.1k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  26.1k|        }
 1122|  26.1k|
 1123|  26.1k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  26.1k|
 1125|  26.1k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  26.1k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  26.1k|            (Some(i), None)
 1128|  26.1k|        }
 1129|  26.1k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  26.1k|            (None, Some(i))
 1131|  26.1k|        }
 1132|  26.1k|
 1133|  26.1k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  26.1k|            GraphName::DefaultGraph
 1135|  26.1k|        } / (i("GRAPH") _)? g:iri() {
 1136|  26.1k|            GraphName::NamedNode(g)
 1137|  26.1k|        }
 1138|  26.1k|
 1139|  26.1k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  26.1k|
 1141|  26.1k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  26.1k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  26.1k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  26.1k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  26.1k|
 1146|  26.1k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  26.1k|
 1148|  26.1k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  26.1k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  26.1k|        }
 1151|  26.1k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  26.1k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  26.1k|        }
 1154|  26.1k|
 1155|  26.1k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  26.1k|            q.into_iter().flatten().collect()
 1157|  26.1k|        }
 1158|  26.1k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  26.1k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  26.1k|        } //TODO: return iter?
 1161|  26.1k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  26.1k|
 1163|  26.1k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  26.1k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  26.1k|        }
 1166|  26.1k|
 1167|  26.1k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  26.1k|            ts.into_iter().flatten().collect()
 1169|  26.1k|        }
 1170|  26.1k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  26.1k|
 1172|  26.1k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  26.1k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  26.1k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  26.1k|        rule GroupGraphPattern_clear() = {
 1176|  26.1k|             // We deal with blank nodes aliases rule
 1177|  26.1k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  26.1k|            state.currently_used_bnodes.clear();
 1179|  26.1k|        }
 1180|  26.1k|
 1181|  26.1k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  26.1k|            let mut filter: Option<Expression> = None;
 1183|  26.1k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  26.1k|            for e in b.into_iter().flatten() {
 1185|  26.1k|                match e {
 1186|  26.1k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  26.1k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  26.1k|                    }
 1189|  26.1k|                    #[cfg(feature = "sep-0006")]
 1190|  26.1k|                    PartialGraphPattern::Lateral(p) => {
 1191|  26.1k|                        let mut defined_variables = HashSet::default();
 1192|  26.1k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  26.1k|                        let mut contains = false;
 1194|  26.1k|                        g.on_in_scope_variable(|v| {
 1195|  26.1k|                            if defined_variables.contains(v) {
 1196|  26.1k|                                contains = true;
 1197|  26.1k|                            }
 1198|  26.1k|                        });
 1199|  26.1k|                        if contains {
 1200|  26.1k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  26.1k|                        }
 1202|  26.1k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  26.1k|                    }
 1204|  26.1k|                    PartialGraphPattern::Minus(p) => {
 1205|  26.1k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  26.1k|                    }
 1207|  26.1k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  26.1k|                        let mut contains = false;
 1209|  26.1k|                        g.on_in_scope_variable(|v| {
 1210|  26.1k|                            if *v == variable {
 1211|  26.1k|                                contains = true;
 1212|  26.1k|                            }
 1213|  26.1k|                        });
 1214|  26.1k|                        if contains {
 1215|  26.1k|                            return Err("BIND is overriding an existing variable")
 1216|  26.1k|                        }
 1217|  26.1k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  26.1k|                    }
 1219|  26.1k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  26.1k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  26.1k|                    } else {
 1222|  26.1k|                        expr
 1223|  26.1k|                    }),
 1224|  26.1k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  26.1k|                }
 1226|  26.1k|            }
 1227|  26.1k|
 1228|  26.1k|            Ok(if let Some(expr) = filter {
 1229|  26.1k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  26.1k|            } else {
 1231|  26.1k|                g
 1232|  26.1k|            })
 1233|  26.1k|        }
 1234|  26.1k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  26.1k|            let mut result = vec![a];
 1236|  26.1k|            if let Some(v) = b {
 1237|  26.1k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  26.1k|            }
 1239|  26.1k|            result
 1240|  26.1k|        }
 1241|  26.1k|
 1242|  26.1k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  26.1k|            hs.into_iter().flatten().collect()
 1244|  26.1k|        }
 1245|  26.1k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  26.1k|
 1247|  26.1k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  26.1k|
 1249|  26.1k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  26.1k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  26.1k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  26.1k|            } else {
 1253|  26.1k|               PartialGraphPattern::Optional(p, None)
 1254|  26.1k|            }
 1255|  26.1k|        }
 1256|  26.1k|
 1257|  26.1k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  26.1k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  26.1k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  26.1k|        }
 1261|  26.1k|
 1262|  26.1k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  26.1k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  26.1k|        }
 1265|  26.1k|
 1266|  26.1k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  26.1k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  26.1k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  26.1k|
 1270|  26.1k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  26.1k|            PartialGraphPattern::Bind(e, v)
 1272|  26.1k|        }
 1273|  26.1k|
 1274|  26.1k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  26.1k|
 1276|  26.1k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  26.1k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  26.1k|        }
 1279|  26.1k|
 1280|  26.1k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  26.1k|            (vec![var], d)
 1282|  26.1k|        }
 1283|  26.1k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  26.1k|
 1285|  26.1k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  26.1k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  26.1k|                Ok((vars, vals))
 1288|  26.1k|            } else {
 1289|  26.1k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  26.1k|            }
 1291|  26.1k|        }
 1292|  26.1k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  26.1k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  26.1k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  26.1k|
 1296|  26.1k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  26.1k|            t:QuotedTripleData() {?
 1298|  26.1k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  26.1k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  26.1k|            } /
 1301|  26.1k|            i:iri() { Some(i.into()) } /
 1302|  26.1k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  26.1k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  26.1k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  26.1k|            i("UNDEF") { None }
 1306|  26.1k|
 1307|  26.1k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  26.1k|            PartialGraphPattern::Minus(p)
 1309|  26.1k|        }
 1310|  26.1k|
 1311|  26.1k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  26.1k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  26.1k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  26.1k|            }).map(PartialGraphPattern::Other)
 1315|  26.1k|        }
 1316|  26.1k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  26.1k|
 1318|  26.1k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  26.1k|            PartialGraphPattern::Filter(c)
 1320|  26.1k|        }
 1321|  26.1k|
 1322|  26.1k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  26.1k|
 1324|  26.1k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  26.1k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  26.1k|        }
 1327|  26.1k|
 1328|  26.1k|        rule ArgList() -> Vec<Expression> =
 1329|  26.1k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  26.1k|            NIL() { Vec::new() }
 1331|  26.1k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  26.1k|
 1333|  26.1k|        rule ExpressionList() -> Vec<Expression> =
 1334|  26.1k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  26.1k|            NIL() { Vec::new() }
 1336|  26.1k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  26.1k|
 1338|  26.1k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  26.1k|
 1340|  26.1k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  26.1k|            p.into_iter().flatten().collect()
 1342|  26.1k|        }
 1343|  26.1k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  26.1k|
 1345|  26.1k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  26.1k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  26.1k|                let mut patterns = po.patterns;
 1348|  26.1k|                for (p, os) in po.focus {
 1349|  26.1k|                    for o in os {
 1350|  26.1k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  26.1k|                    }
 1352|  26.1k|                }
 1353|  26.1k|                Ok(patterns)
 1354|  26.1k|            } /
 1355|  26.1k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  26.1k|                let mut patterns = s.patterns;
 1357|  26.1k|                patterns.extend(po.patterns);
 1358|  26.1k|                for (p, os) in po.focus {
 1359|  26.1k|                    for o in os {
 1360|  26.1k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  26.1k|                    }
 1362|  26.1k|                }
 1363|  26.1k|                Ok(patterns)
 1364|  26.1k|            }
 1365|  26.1k|
 1366|  26.1k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  26.1k|            PropertyListNotEmpty() /
 1368|  26.1k|            { FocusedTriplePattern::default() }
 1369|  26.1k|
 1370|  26.1k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  26.1k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  26.1k|                a.focus.push(b.focus);
 1373|  26.1k|                a.patterns.extend(b.patterns);
 1374|  26.1k|                a
 1375|  26.1k|            })
 1376|  26.1k|        }
 1377|  26.1k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  26.1k|            FocusedTriplePattern {
 1379|  26.1k|                focus: (p, o.focus),
 1380|  26.1k|                patterns: o.patterns
 1381|  26.1k|            }
 1382|  26.1k|        }
 1383|  26.1k|
 1384|  26.1k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  26.1k|
 1386|  26.1k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  26.1k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  26.1k|                a.focus.push(b.focus);
 1389|  26.1k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  26.1k|                a
 1391|  26.1k|            })
 1392|  26.1k|        }
 1393|  26.1k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  26.1k|
 1395|  26.1k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  26.1k|            if let Some(a) = a {
 1397|  26.1k|                let mut patterns = g.patterns;
 1398|  26.1k|                patterns.extend(a.patterns);
 1399|  26.1k|                FocusedTriplePattern {
 1400|  26.1k|                    focus: AnnotatedTerm {
 1401|  26.1k|                        term: g.focus,
 1402|  26.1k|                        annotations: a.focus
 1403|  26.1k|                    },
 1404|  26.1k|                    patterns
 1405|  26.1k|                }
 1406|  26.1k|            } else {
 1407|  26.1k|                FocusedTriplePattern {
 1408|  26.1k|                    focus: AnnotatedTerm {
 1409|  26.1k|                        term: g.focus,
 1410|  26.1k|                        annotations: Vec::new()
 1411|  26.1k|                    },
 1412|  26.1k|                    patterns: g.patterns
 1413|  26.1k|                }
 1414|  26.1k|            }
 1415|  26.1k|        }
 1416|  26.1k|
 1417|  26.1k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  26.1k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  26.1k|                let mut patterns = po.patterns;
 1420|  26.1k|                for (p, os) in po.focus {
 1421|  26.1k|                    for o in os {
 1422|  26.1k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  26.1k|                    }
 1424|  26.1k|                }
 1425|  26.1k|                Ok(patterns)
 1426|  26.1k|            } /
 1427|  26.1k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  26.1k|                let mut patterns = s.patterns;
 1429|  26.1k|                patterns.extend(po.patterns);
 1430|  26.1k|                for (p, os) in po.focus {
 1431|  26.1k|                    for o in os {
 1432|  26.1k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  26.1k|                    }
 1434|  26.1k|                }
 1435|  26.1k|                Ok(patterns)
 1436|  26.1k|            }
 1437|  26.1k|
 1438|  26.1k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  26.1k|            PropertyListPathNotEmpty() /
 1440|  26.1k|            { FocusedTripleOrPathPattern::default() }
 1441|  26.1k|
 1442|  26.1k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  26.1k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  26.1k|                    focus: vec![(hp, ho.focus)],
 1445|  26.1k|                    patterns: ho.patterns
 1446|  26.1k|                }, |mut a, b| {
 1447|  26.1k|                    a.focus.push(b.focus);
 1448|  26.1k|                    a.patterns.extend(b.patterns);
 1449|  26.1k|                    a
 1450|  26.1k|                })
 1451|  26.1k|        }
 1452|  26.1k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  26.1k|            c
 1454|  26.1k|        }
 1455|  26.1k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  26.1k|            FocusedTripleOrPathPattern {
 1457|  26.1k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  26.1k|                patterns: o.patterns
 1459|  26.1k|            }
 1460|  26.1k|        }
 1461|  26.1k|
 1462|  26.1k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  26.1k|            p.into()
 1464|  26.1k|        }
 1465|  26.1k|
 1466|  26.1k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  26.1k|            v.into()
 1468|  26.1k|        }
 1469|  26.1k|
 1470|  26.1k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  26.1k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  26.1k|                a.focus.push(b.focus);
 1473|  26.1k|                a.patterns.extend(b.patterns);
 1474|  26.1k|                a
 1475|  26.1k|            })
 1476|  26.1k|        }
 1477|  26.1k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  26.1k|
 1479|  26.1k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  26.1k|             if let Some(a) = a {
 1481|  26.1k|                let mut patterns = g.patterns;
 1482|  26.1k|                patterns.extend(a.patterns);
 1483|  26.1k|                FocusedTripleOrPathPattern {
 1484|  26.1k|                    focus: AnnotatedTermPath {
 1485|  26.1k|                        term: g.focus,
 1486|  26.1k|                        annotations: a.focus
 1487|  26.1k|                    },
 1488|  26.1k|                    patterns
 1489|  26.1k|                }
 1490|  26.1k|            } else {
 1491|  26.1k|                FocusedTripleOrPathPattern {
 1492|  26.1k|                    focus: AnnotatedTermPath {
 1493|  26.1k|                        term: g.focus,
 1494|  26.1k|                        annotations: Vec::new()
 1495|  26.1k|                    },
 1496|  26.1k|                    patterns: g.patterns
 1497|  26.1k|                }
 1498|  26.1k|            }
 1499|  26.1k|        }
 1500|  26.1k|
 1501|  26.1k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  26.1k|
 1503|  26.1k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  26.1k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  26.1k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  26.1k|            })
 1507|  26.1k|        }
 1508|  26.1k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  26.1k|
 1510|  26.1k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  26.1k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|       |                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  26.1k|            })
 1514|  26.1k|        }
 1515|  26.1k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  26.1k|
 1517|  26.1k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  26.1k|            match o {
 1519|  26.1k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  26.1k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  26.1k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  26.1k|                Some(_) => unreachable!(),
 1523|  26.1k|                None => p
 1524|  26.1k|            }
 1525|  26.1k|        }
 1526|  26.1k|        rule PathElt_op() -> char =
 1527|  26.1k|            "*" { '*' } /
 1528|  26.1k|            "+" { '+' } /
 1529|  26.1k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  26.1k|
 1531|  26.1k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  26.1k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  26.1k|            PathElt()
 1534|  26.1k|
 1535|  26.1k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  26.1k|            v:iri() { v.into() } /
 1537|  26.1k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  26.1k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  26.1k|            "(" _ p:Path() _ ")" { p }
 1540|  26.1k|
 1541|  26.1k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  26.1k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  26.1k|                let mut direct = Vec::new();
 1544|  26.1k|                let mut inverse = Vec::new();
 1545|  26.1k|                for e in p {
 1546|  26.1k|                    match e {
 1547|  26.1k|                        Either::Left(a) => direct.push(a),
 1548|  26.1k|                        Either::Right(b) => inverse.push(b)
 1549|  26.1k|                    }
 1550|  26.1k|                }
 1551|  26.1k|                if inverse.is_empty() {
 1552|  26.1k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  26.1k|                } else if direct.is_empty() {
 1554|  26.1k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  26.1k|                } else {
 1556|  26.1k|                    PropertyPathExpression::Alternative(
 1557|  26.1k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  26.1k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  26.1k|                    )
 1560|  26.1k|                }
 1561|  26.1k|            } /
 1562|  26.1k|            p:PathOneInPropertySet() {
 1563|  26.1k|                match p {
 1564|  26.1k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  26.1k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  26.1k|                }
 1567|  26.1k|            }
 1568|  26.1k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  26.1k|
 1570|  26.1k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  26.1k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  26.1k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  26.1k|            v:iri() { Either::Left(v) } /
 1574|  26.1k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  26.1k|
 1576|  26.1k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  26.1k|
 1578|  26.1k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  26.1k|            let mut patterns = po.patterns;
 1580|  26.1k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  26.1k|            for (p, os) in po.focus {
 1582|  26.1k|                for o in os {
 1583|  26.1k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  26.1k|                }
 1585|  26.1k|            }
 1586|  26.1k|            Ok(FocusedTriplePattern {
 1587|  26.1k|                focus: bnode,
 1588|  26.1k|                patterns
 1589|  26.1k|            })
 1590|  26.1k|        }
 1591|  26.1k|
 1592|  26.1k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  26.1k|
 1594|  26.1k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  26.1k|            let mut patterns = po.patterns;
 1596|  26.1k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  26.1k|            for (p, os) in po.focus {
 1598|  26.1k|                for o in os {
 1599|  26.1k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  26.1k|                }
 1601|  26.1k|            }
 1602|  26.1k|            Ok(FocusedTripleOrPathPattern {
 1603|  26.1k|                focus: bnode,
 1604|  26.1k|                patterns
 1605|  26.1k|            })
 1606|  26.1k|        }
 1607|  26.1k|
 1608|  26.1k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  26.1k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  26.1k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  26.1k|            for objWithPatterns in o.into_iter().rev() {
 1612|  26.1k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  26.1k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  26.1k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  26.1k|                current_list_node = new_blank_node;
 1616|  26.1k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  26.1k|            }
 1618|  26.1k|            FocusedTriplePattern {
 1619|  26.1k|                focus: current_list_node,
 1620|  26.1k|                patterns
 1621|  26.1k|            }
 1622|  26.1k|        }
 1623|  26.1k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  26.1k|
 1625|  26.1k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  26.1k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  26.1k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  26.1k|            for objWithPatterns in o.into_iter().rev() {
 1629|  26.1k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  26.1k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  26.1k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  26.1k|                current_list_node = new_blank_node;
 1633|  26.1k|                patterns.extend(objWithPatterns.patterns);
 1634|  26.1k|            }
 1635|  26.1k|            FocusedTripleOrPathPattern {
 1636|  26.1k|                focus: current_list_node,
 1637|  26.1k|                patterns
 1638|  26.1k|            }
 1639|  26.1k|        }
 1640|  26.1k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  26.1k|
 1642|  26.1k|
 1643|  26.1k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  26.1k|
 1645|  26.1k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  26.1k|
 1647|  26.1k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  26.1k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  26.1k|            TriplesNode()
 1650|  26.1k|
 1651|  26.1k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  26.1k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  26.1k|            TriplesNodePath()
 1654|  26.1k|
 1655|  26.1k|        rule VarOrTerm() -> TermPattern =
 1656|  26.1k|            v:Var() { v.into() } /
 1657|  26.1k|            t:QuotedTriple() {?
 1658|  26.1k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  26.1k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  26.1k|            } /
 1661|  26.1k|            t:GraphTerm() { t.into() }
 1662|  26.1k|
 1663|  26.1k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  26.1k|            Ok(TriplePattern {
 1665|  26.1k|                subject: s,
 1666|  26.1k|                predicate: p,
 1667|  26.1k|                object: o
 1668|  26.1k|            })
 1669|  26.1k|        }
 1670|  26.1k|
 1671|  26.1k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  26.1k|            Ok(GroundTriple {
 1673|  26.1k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  26.1k|                predicate: p,
 1675|  26.1k|                object: o
 1676|  26.1k|            })
 1677|  26.1k|        }
 1678|  26.1k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  26.1k|
 1680|  26.1k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  26.1k|            l:RDFLiteral() { l.into() } /
 1682|  26.1k|            l:NumericLiteral() { l.into() } /
 1683|  26.1k|            l:BooleanLiteral() { l.into() } /
 1684|  26.1k|            t:QuotedTripleData() {?
 1685|  26.1k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  26.1k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  26.1k|            }
 1688|  26.1k|
 1689|  26.1k|        rule VarOrIri() -> NamedNodePattern =
 1690|  26.1k|            v:Var() { v.into() } /
 1691|  26.1k|            i:iri() { i.into() }
 1692|  26.1k|
 1693|  26.1k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  26.1k|
 1695|  26.1k|        rule GraphTerm() -> Term =
 1696|  26.1k|            i:iri() { i.into() } /
 1697|  26.1k|            l:RDFLiteral() { l.into() } /
 1698|  26.1k|            l:NumericLiteral() { l.into() } /
 1699|  26.1k|            l:BooleanLiteral() { l.into() } /
 1700|  26.1k|            b:BlankNode() { b.into() } /
 1701|  26.1k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  26.1k|
 1703|  26.1k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  26.1k|
 1705|  26.1k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  26.1k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  26.1k|        }
 1708|  26.1k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  26.1k|
 1710|  26.1k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  26.1k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  26.1k|        }
 1713|  26.1k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  26.1k|
 1715|  26.1k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  26.1k|
 1717|  26.1k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  26.1k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  26.1k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  26.1k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  26.1k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  26.1k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  26.1k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  26.1k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  26.1k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  26.1k|            Some(_) => unreachable!(),
 1727|  26.1k|            None => a
 1728|  26.1k|        } }
 1729|  26.1k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  26.1k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  26.1k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  26.1k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  26.1k|
 1734|  26.1k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  26.1k|
 1736|  26.1k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  26.1k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  26.1k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  26.1k|            Some(_) => unreachable!(),
 1740|  26.1k|            None => a,
 1741|  26.1k|        } }
 1742|  26.1k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  26.1k|            (s, e)
 1744|  26.1k|        }
 1745|  26.1k|
 1746|  26.1k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  26.1k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  26.1k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  26.1k|            Some(_) => unreachable!(),
 1750|  26.1k|            None => a
 1751|  26.1k|        } }
 1752|  26.1k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  26.1k|            (s, e)
 1754|  26.1k|        }
 1755|  26.1k|
 1756|  26.1k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  26.1k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  26.1k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  26.1k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  26.1k|            Some(_) => unreachable!(),
 1761|  26.1k|            None => e,
 1762|  26.1k|        } }
 1763|  26.1k|
 1764|  26.1k|        rule PrimaryExpression() -> Expression =
 1765|  26.1k|            BrackettedExpression()  /
 1766|  26.1k|            ExprQuotedTriple() /
 1767|  26.1k|            iriOrFunction() /
 1768|  26.1k|            v:Var() { v.into() } /
 1769|  26.1k|            l:RDFLiteral() { l.into() } /
 1770|  26.1k|            l:NumericLiteral() { l.into() } /
 1771|  26.1k|            l:BooleanLiteral() { l.into() } /
 1772|  26.1k|            BuiltInCall()
 1773|  26.1k|
 1774|  26.1k|        rule ExprVarOrTerm() -> Expression =
 1775|  26.1k|            ExprQuotedTriple() /
 1776|  26.1k|            i:iri() { i.into() } /
 1777|  26.1k|            l:RDFLiteral() { l.into() } /
 1778|  26.1k|            l:NumericLiteral() { l.into() } /
 1779|  26.1k|            l:BooleanLiteral() { l.into() } /
 1780|  26.1k|            v:Var() { v.into() }
 1781|  26.1k|
 1782|  26.1k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  26.1k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  26.1k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  26.1k|        }
 1786|  26.1k|
 1787|  26.1k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  26.1k|
 1789|  26.1k|        rule BuiltInCall() -> Expression =
 1790|  26.1k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  26.1k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  26.1k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  26.1k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  26.1k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  26.1k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  26.1k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  26.1k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  26.1k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  26.1k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  26.1k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  26.1k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  26.1k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  26.1k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  26.1k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  26.1k|            SubstringExpression() /
 1806|  26.1k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  26.1k|            StrReplaceExpression() /
 1808|  26.1k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  26.1k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  26.1k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  26.1k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  26.1k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  26.1k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  26.1k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  26.1k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  26.1k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  26.1k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  26.1k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  26.1k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  26.1k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  26.1k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  26.1k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  26.1k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  26.1k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  26.1k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  26.1k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  26.1k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  26.1k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  26.1k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  26.1k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  26.1k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  26.1k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  26.1k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  26.1k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  26.1k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  26.1k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  26.1k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  26.1k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  26.1k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  26.1k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  26.1k|            RegexExpression() /
 1842|  26.1k|            ExistsFunc() /
 1843|  26.1k|            NotExistsFunc() /
 1844|  26.1k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  26.1k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  26.1k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  26.1k|            } /
 1848|  26.1k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  26.1k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  26.1k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  26.1k|            } /
 1852|  26.1k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  26.1k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  26.1k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  26.1k|            } /
 1856|  26.1k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  26.1k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  26.1k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  26.1k|            } /
 1860|  26.1k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  26.1k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  26.1k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  26.1k|            } /
 1864|  26.1k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  26.1k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  26.1k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  26.1k|            }
 1868|  26.1k|
 1869|  26.1k|        rule RegexExpression() -> Expression =
 1870|  26.1k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  26.1k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  26.1k|
 1873|  26.1k|
 1874|  26.1k|        rule SubstringExpression() -> Expression =
 1875|  26.1k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  26.1k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  26.1k|
 1878|  26.1k|
 1879|  26.1k|        rule StrReplaceExpression() -> Expression =
 1880|  26.1k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  26.1k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  26.1k|
 1883|  26.1k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  26.1k|
 1885|  26.1k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  26.1k|
 1887|  26.1k|        rule Aggregate() -> AggregateExpression =
 1888|  26.1k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  26.1k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  26.1k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  26.1k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  26.1k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  26.1k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  26.1k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  26.1k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  26.1k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  26.1k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  26.1k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  26.1k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  26.1k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  26.1k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  26.1k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  26.1k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  26.1k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  26.1k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  26.1k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  26.1k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  26.1k|
 1909|  26.1k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  26.1k|            match a {
 1911|  26.1k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  26.1k|                None => i.into()
 1913|  26.1k|            }
 1914|  26.1k|        }
 1915|  26.1k|
 1916|  26.1k|        rule RDFLiteral() -> Literal =
 1917|  26.1k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  26.1k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  26.1k|            value:String() { Literal::new_simple_literal(value) }
 1920|  26.1k|
 1921|  26.1k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  26.1k|
 1923|  26.1k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  26.1k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  26.1k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  26.1k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  26.1k|
 1928|  26.1k|        rule NumericLiteralPositive() -> Literal =
 1929|  26.1k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  26.1k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  26.1k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  26.1k|
 1933|  26.1k|
 1934|  26.1k|        rule NumericLiteralNegative() -> Literal =
 1935|  26.1k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  26.1k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  26.1k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  26.1k|
 1939|  26.1k|        rule BooleanLiteral() -> Literal =
 1940|  26.1k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  26.1k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  26.1k|
 1943|  26.1k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  26.1k|
 1945|  26.1k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  26.1k|            NamedNode::from(i)
 1947|  26.1k|        }
 1948|  26.1k|
 1949|  26.1k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  26.1k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  26.1k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  26.1k|            } else {
 1953|  26.1k|                Err("Prefix not found")
 1954|  26.1k|            } }
 1955|  26.1k|
 1956|  26.1k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  26.1k|            let node = BlankNode::new_unchecked(id);
 1958|  26.1k|            if state.used_bnodes.contains(&node) {
 1959|  26.1k|                Err("Already used blank node id")
 1960|  26.1k|            } else {
 1961|  26.1k|                state.currently_used_bnodes.insert(node.clone());
 1962|  26.1k|                Ok(node)
 1963|  26.1k|            }
 1964|  26.1k|        } / ANON() { BlankNode::default() }
 1965|  26.1k|
 1966|  26.1k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  26.1k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  26.1k|        }
 1969|  26.1k|
 1970|  26.1k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  26.1k|            ns
 1972|  26.1k|        }
 1973|  26.1k|
 1974|  26.1k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  26.1k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  26.1k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  26.1k|                iri.push_str(base);
 1978|  26.1k|                for chunk in local.split('\\') { // We remove \
 1979|  26.1k|                    iri.push_str(chunk);
 1980|  26.1k|                }
 1981|  26.1k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  26.1k|            } else {
 1983|  26.1k|                Err("Prefix not found")
 1984|  26.1k|            }
 1985|  26.1k|        }
 1986|  26.1k|
 1987|  26.1k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  26.1k|            b
 1989|  26.1k|        }
 1990|  26.1k|
 1991|  26.1k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  26.1k|
 1993|  26.1k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  26.1k|
 1995|  26.1k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  26.1k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  26.1k|        }
 1998|  26.1k|
 1999|  26.1k|        rule INTEGER() = ['0'..='9']+
 2000|  26.1k|
 2001|  26.1k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  26.1k|
 2003|  26.1k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  26.1k|
 2005|  26.1k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  26.1k|
 2007|  26.1k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  26.1k|
 2009|  26.1k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  26.1k|
 2011|  26.1k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  26.1k|
 2013|  26.1k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  26.1k|
 2015|  26.1k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  26.1k|
 2017|  26.1k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  26.1k|
 2019|  26.1k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  26.1k|             unescape_string(l)
 2021|  26.1k|        }
 2022|  26.1k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  26.1k|
 2024|  26.1k|
 2025|  26.1k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  26.1k|             unescape_string(l)
 2027|  26.1k|        }
 2028|  26.1k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  26.1k|
 2030|  26.1k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  26.1k|             unescape_string(l)
 2032|  26.1k|        }
 2033|  26.1k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  26.1k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  26.1k|
 2036|  26.1k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  26.1k|             unescape_string(l)
 2038|  26.1k|        }
 2039|  26.1k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  26.1k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  26.1k|
 2042|  26.1k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  26.1k|
 2044|  26.1k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  26.1k|
 2046|  26.1k|        rule NIL() = "(" WS()* ")"
 2047|  26.1k|
 2048|  26.1k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  26.1k|
 2050|  26.1k|        rule ANON() = "[" WS()* "]"
 2051|  26.1k|
 2052|  26.1k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  26.1k|
 2054|  26.1k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  26.1k|
 2056|  26.1k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  26.1k|
 2058|  26.1k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  26.1k|
 2060|  26.1k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  26.1k|
 2062|  26.1k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  26.1k|
 2064|  26.1k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  26.1k|
 2066|  26.1k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  26.1k|
 2068|  26.1k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  26.1k|
 2070|  26.1k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  26.1k|
 2072|  26.1k|        //space
 2073|  26.1k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  26.1k|
 2075|  26.1k|        //comment
 2076|  26.1k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  26.1k|
 2078|  26.1k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  26.1k|            if input.eq_ignore_ascii_case(literal) {
 2080|  26.1k|                Ok(())
 2081|  26.1k|            } else {
 2082|  26.1k|                Err(literal)
 2083|  26.1k|            }
 2084|  26.1k|        }
 2085|  26.1k|    }
 2086|  26.1k|}
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_PathPrimarys_0B7_:
 1537|  2.36k|            "a" { rdf::TYPE.into_owned().into() } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser28___parse_BrackettedExpression0B7_:
 1787|    803|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser20___parse_SelectClause0B7_:
  811|  2.00k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  2.00k|            Selection {
  813|  2.00k|                option: o,
  814|  2.00k|                variables: v
  815|  2.00k|            }
_RNCNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_ObjectListPath00B9_:
 1471|  15.3k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  15.3k|                a.focus.push(b.focus);
 1473|  15.3k|                a.patterns.extend(b.patterns);
 1474|  15.3k|                a
 1475|  15.3k|            })
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser24___parse_PropertyListPath0B7_:
 1440|    609|            { FocusedTripleOrPathPattern::default() }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser17___parse_GraphTerms0_0B7_:
 1698|  2.11k|            l:NumericLiteral() { l.into() } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser30___parse_TriplesSameSubjectPaths_0B7_:
  778|    639|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() _ w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|       |            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|       |                Ok((vars, vals))
 1288|       |            } else {
 1289|       |                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|       |            }
 1291|       |        }
 1292|       |        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|       |        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|       |        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|       |
 1296|       |        rule DataBlockValue() -> Option<GroundTerm> =
 1297|       |            t:QuotedTripleData() {?
 1298|       |                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|       |            } /
 1301|       |            i:iri() { Some(i.into()) } /
 1302|       |            l:RDFLiteral() { Some(l.into()) } /
 1303|       |            l:NumericLiteral() { Some(l.into()) } /
 1304|       |            l:BooleanLiteral() { Some(l.into()) } /
 1305|       |            i("UNDEF") { None }
 1306|       |
 1307|       |        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|       |            PartialGraphPattern::Minus(p)
 1309|       |        }
 1310|       |
 1311|       |        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|       |            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|       |            }).map(PartialGraphPattern::Other)
 1315|       |        }
 1316|       |        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|       |
 1318|       |        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|       |            PartialGraphPattern::Filter(c)
 1320|       |        }
 1321|       |
 1322|       |        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|       |
 1324|       |        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|       |            Expression::FunctionCall(Function::Custom(f), a)
 1326|       |        }
 1327|       |
 1328|       |        rule ArgList() -> Vec<Expression> =
 1329|       |            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|       |            NIL() { Vec::new() }
 1331|       |        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|       |
 1333|       |        rule ExpressionList() -> Vec<Expression> =
 1334|       |            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|       |            NIL() { Vec::new() }
 1336|       |        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|       |
 1338|       |        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|       |
 1340|       |        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|       |            p.into_iter().flatten().collect()
 1342|       |        }
 1343|       |        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|       |
 1345|       |        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|       |            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|       |                let mut patterns = po.patterns;
 1348|       |                for (p, os) in po.focus {
 1349|       |                    for o in os {
 1350|       |                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|       |                    }
 1352|       |                }
 1353|       |                Ok(patterns)
 1354|       |            } /
 1355|       |            s:TriplesNode() _ po:PropertyList() {?
 1356|       |                let mut patterns = s.patterns;
 1357|       |                patterns.extend(po.patterns);
 1358|       |                for (p, os) in po.focus {
 1359|       |                    for o in os {
 1360|       |                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|       |                    }
 1362|       |                }
 1363|       |                Ok(patterns)
 1364|       |            }
 1365|       |
 1366|       |        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|       |            PropertyListNotEmpty() /
 1368|       |            { FocusedTriplePattern::default() }
 1369|       |
 1370|       |        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|       |            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|       |                a.focus.push(b.focus);
 1373|       |                a.patterns.extend(b.patterns);
 1374|       |                a
 1375|       |            })
 1376|       |        }
 1377|       |        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|       |            FocusedTriplePattern {
 1379|       |                focus: (p, o.focus),
 1380|       |                patterns: o.patterns
 1381|       |            }
 1382|       |        }
 1383|       |
 1384|       |        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|       |
 1386|       |        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|       |            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|       |                a.focus.push(b.focus);
 1389|       |                a.patterns.extend_from_slice(&b.patterns);
 1390|       |                a
 1391|       |            })
 1392|       |        }
 1393|       |        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|       |
 1395|       |        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|       |            if let Some(a) = a {
 1397|       |                let mut patterns = g.patterns;
 1398|       |                patterns.extend(a.patterns);
 1399|       |                FocusedTriplePattern {
 1400|       |                    focus: AnnotatedTerm {
 1401|       |                        term: g.focus,
 1402|       |                        annotations: a.focus
 1403|       |                    },
 1404|       |                    patterns
 1405|       |                }
 1406|       |            } else {
 1407|       |                FocusedTriplePattern {
 1408|       |                    focus: AnnotatedTerm {
 1409|       |                        term: g.focus,
 1410|       |                        annotations: Vec::new()
 1411|       |                    },
 1412|       |                    patterns: g.patterns
 1413|       |                }
 1414|       |            }
 1415|       |        }
 1416|       |
 1417|       |        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|       |            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|       |                let mut patterns = po.patterns;
 1420|       |                for (p, os) in po.focus {
 1421|       |                    for o in os {
 1422|       |                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|       |                    }
 1424|       |                }
 1425|       |                Ok(patterns)
 1426|       |            } /
 1427|       |            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|    639|                let mut patterns = s.patterns;
 1429|    639|                patterns.extend(po.patterns);
 1430|    671|                for (p, os) in po.focus {
 1431|     83|                    for o in os {
 1432|     51|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|       |                    }
 1434|       |                }
 1435|    639|                Ok(patterns)
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser37___parse_ConditionalAndExpression_item0B7_:
 1713|  3.16k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser19___parse_BuiltInCalls0_0B7_:
 1792|      7|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser22___parse_CollectionPath0B7_:
 1625|  1.46k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  1.46k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  1.46k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  3.11k|            for objWithPatterns in o.into_iter().rev() {
 1629|  3.11k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  3.11k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  3.11k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  3.11k|                current_list_node = new_blank_node;
 1633|  3.11k|                patterns.extend(objWithPatterns.patterns);
 1634|  3.11k|            }
 1635|  1.46k|            FocusedTripleOrPathPattern {
 1636|  1.46k|                focus: current_list_node,
 1637|  1.46k|                patterns
 1638|  1.46k|            }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser25___parse_PathSequence_item0B7_:
 1515|  35.4k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
_RNCNvNtNtCsBlCKulpTva_9spargebra6parser6parser36___parse_ConditionalOrExpression_item0B7_:
 1708|  2.70k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }

_RNvXs1L_NtCsBlCKulpTva_9spargebra4termNtB6_10GroundQuadNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  327|  1.16k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs26_NtCsBlCKulpTva_9spargebra4termNtB6_17GroundTermPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  590|  19.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2d_NtCsBlCKulpTva_9spargebra4termNtB6_16GraphNamePatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  703|  11.9k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1b_NtCsBlCKulpTva_9spargebra4termNtB6_13GroundSubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
   10|  1.16k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2y_NtCsBlCKulpTva_9spargebra4termNtB6_11QuadPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  895|  2.17k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2F_NtCsBlCKulpTva_9spargebra4termNtB6_17GroundQuadPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  955|  9.79k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1i_NtCsBlCKulpTva_9spargebra4termNtB6_10GroundTermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
   78|  1.16k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1S_NtCsBlCKulpTva_9spargebra4termNtB6_16NamedNodePatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  385|  11.9k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1w_NtCsBlCKulpTva_9spargebra4termNtB6_9GraphNameNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  187|  3.68k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXs1E_NtCsBlCKulpTva_9spargebra4termNtB6_4QuadNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  252|  2.51k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1Z_NtCsBlCKulpTva_9spargebra4termNtB6_11TermPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
  438|  4.34k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsD_NtCsBlCKulpTva_9spargebra4termNtB5_17GroundTermPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCshC9BJcurWLf_8oxigraph:
  614|   100k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  615|   100k|        match self {
  616|  9.01k|            Self::NamedNode(term) => term.fmt(f),
  617|  1.32k|            Self::Literal(term) => term.fmt(f),
  618|  89.6k|            Self::Variable(var) => var.fmt(f),
  619|       |            #[cfg(feature = "rdf-star")]
  620|      0|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  621|       |        }
  622|   100k|    }
_RNvXs1S_NtCsBlCKulpTva_9spargebra4termNtB6_16NamedNodePatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
  385|  2.27k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs26_NtCsBlCKulpTva_9spargebra4termNtB6_17GroundTermPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
  590|      4|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1Z_NtCsBlCKulpTva_9spargebra4termNtB6_11TermPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
  438|  12.3k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1i_NtCsBlCKulpTva_9spargebra4termNtB6_10GroundTermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsftsRMVBFYTr_7sparopt:
   78|  10.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1S_NtCsBlCKulpTva_9spargebra4termNtB6_16NamedNodePatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsftsRMVBFYTr_7sparopt:
  385|  66.2k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs26_NtCsBlCKulpTva_9spargebra4termNtB6_17GroundTermPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsftsRMVBFYTr_7sparopt:
  590|  50.4k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsz_NtCsBlCKulpTva_9spargebra4termNtB5_11TermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_17GroundTermPatternE4fromCsftsRMVBFYTr_7sparopt:
  548|  1.63k|    fn from(element: GroundTermPattern) -> Self {
  549|  1.63k|        match element {
  550|     33|            GroundTermPattern::NamedNode(node) => node.into(),
  551|      0|            GroundTermPattern::Literal(literal) => literal.into(),
  552|       |            #[cfg(feature = "rdf-star")]
  553|      0|            GroundTermPattern::Triple(t) => TriplePattern::from(*t).into(),
  554|  1.59k|            GroundTermPattern::Variable(variable) => variable.into(),
  555|       |        }
  556|  1.63k|    }
_RINvXs1T_NtCsBlCKulpTva_9spargebra4termNtB7_16NamedNodePatternNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsftsRMVBFYTr_7sparopt:
  385|  1.06k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvXs27_NtCsBlCKulpTva_9spargebra4termNtB7_17GroundTermPatternNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsftsRMVBFYTr_7sparopt:
  590|  2.56k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsA_NtCsBlCKulpTva_9spargebra4termNtNtCs2RvTzHk1J7L_5oxrdf6triple7SubjectINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_11TermPatternE8try_fromB7_:
  563|  3.69k|    fn try_from(term: TermPattern) -> Result<Self, Self::Error> {
  564|  3.69k|        match term {
  565|  3.69k|            TermPattern::NamedNode(t) => Ok(t.into()),
  566|      0|            TermPattern::BlankNode(t) => Ok(t.into()),
  567|       |            #[cfg(feature = "rdf-star")]
  568|      0|            TermPattern::Triple(t) => Ok(Triple::try_from(*t)?.into()),
  569|      0|            TermPattern::Literal(_) | TermPattern::Variable(_) => Err(()),
  570|       |        }
  571|  3.69k|    }
_RNvXsB_NtCsBlCKulpTva_9spargebra4termNtNtCs2RvTzHk1J7L_5oxrdf6triple4TermINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_11TermPatternE8try_fromB7_:
  578|  3.69k|    fn try_from(pattern: TermPattern) -> Result<Self, Self::Error> {
  579|  3.69k|        match pattern {
  580|  1.25k|            TermPattern::NamedNode(t) => Ok(t.into()),
  581|      0|            TermPattern::BlankNode(t) => Ok(t.into()),
  582|  2.44k|            TermPattern::Literal(t) => Ok(t.into()),
  583|       |            #[cfg(feature = "rdf-star")]
  584|      0|            TermPattern::Triple(t) => Ok(Triple::try_from(*t)?.into()),
  585|      0|            TermPattern::Variable(_) => Err(()),
  586|       |        }
  587|  3.69k|    }
_RNvXsP_NtCsBlCKulpTva_9spargebra4termNtB5_16GraphNamePatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableE4fromB7_:
  741|  2.79k|    fn from(var: Variable) -> Self {
  742|  2.79k|        Self::Variable(var)
  743|  2.79k|    }
_RNvXs4_NtCsBlCKulpTva_9spargebra4termNtB5_10GroundTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeE4fromB7_:
  104|  3.83k|    fn from(node: NamedNode) -> Self {
  105|  3.83k|        Self::NamedNode(node)
  106|  3.83k|    }
_RNvXsl_NtCsBlCKulpTva_9spargebra4termNtB5_16NamedNodePatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB7_:
  403|  44.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  404|  44.8k|        match self {
  405|  20.2k|            Self::NamedNode(node) => node.fmt(f),
  406|  24.6k|            Self::Variable(var) => var.fmt(f),
  407|       |        }
  408|  44.8k|    }
_RNvXs7_NtCsBlCKulpTva_9spargebra4termNtB5_10GroundTermINtNtCs9nhK3FOW46N_4core7convert7TryFromNtNtCs2RvTzHk1J7L_5oxrdf6triple4TermE8try_fromB7_:
  128|  1.18k|    fn try_from(term: Term) -> Result<Self, Self::Error> {
  129|  1.18k|        match term {
  130|    545|            Term::NamedNode(t) => Ok(t.into()),
  131|      0|            Term::BlankNode(_) => Err(()),
  132|    636|            Term::Literal(t) => Ok(t.into()),
  133|       |            #[cfg(feature = "rdf-star")]
  134|      0|            Term::Triple(t) => Ok(GroundTriple::try_from(*t)?.into()),
  135|       |        }
  136|  1.18k|    }
_RNvXsL_NtCsBlCKulpTva_9spargebra4termNtB5_17GroundTermPatternINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_11TermPatternE8try_fromB7_:
  690|  22.9k|    fn try_from(pattern: TermPattern) -> Result<Self, Self::Error> {
  691|  22.9k|        Ok(match pattern {
  692|  10.6k|            TermPattern::NamedNode(named_node) => named_node.into(),
  693|      0|            TermPattern::BlankNode(_) => return Err(()),
  694|  1.18k|            TermPattern::Literal(literal) => literal.into(),
  695|       |            #[cfg(feature = "rdf-star")]
  696|      0|            TermPattern::Triple(triple) => GroundTriplePattern::try_from(*triple)?.into(),
  697|  11.1k|            TermPattern::Variable(variable) => variable.into(),
  698|       |        })
  699|  22.9k|    }
_RNvXsO_NtCsBlCKulpTva_9spargebra4termNtB5_16GraphNamePatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeE4fromB7_:
  734|  13.7k|    fn from(node: NamedNode) -> Self {
  735|  13.7k|        Self::NamedNode(node)
  736|  13.7k|    }
_RNvXsR_NtCsBlCKulpTva_9spargebra4termNtB5_16GraphNamePatternINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_16NamedNodePatternE4fromB7_:
  758|  15.0k|    fn from(graph_name: NamedNodePattern) -> Self {
  759|  15.0k|        match graph_name {
  760|  12.2k|            NamedNodePattern::NamedNode(node) => node.into(),
  761|  2.79k|            NamedNodePattern::Variable(var) => var.into(),
  762|       |        }
  763|  15.0k|    }
_RNvXs1u_NtCsBlCKulpTva_9spargebra4termNtB6_9GraphNameNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB8_:
  187|  1.04k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXsF_NtCsBlCKulpTva_9spargebra4termNtB5_17GroundTermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf7literal7LiteralE4fromB7_:
  634|  2.50k|    fn from(literal: Literal) -> Self {
  635|  2.50k|        Self::Literal(literal)
  636|  2.50k|    }
_RNvXsq_NtCsBlCKulpTva_9spargebra4termNtB5_11TermPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB7_:
  464|  1.63k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  465|  1.63k|        match self {
  466|     33|            Self::NamedNode(term) => term.fmt(f),
  467|      0|            Self::BlankNode(term) => term.fmt(f),
  468|      0|            Self::Literal(term) => term.fmt(f),
  469|       |            #[cfg(feature = "rdf-star")]
  470|      0|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  471|  1.59k|            Self::Variable(var) => var.fmt(f),
  472|       |        }
  473|  1.63k|    }
_RNvXs1Z_NtCsBlCKulpTva_9spargebra4termNtB6_11TermPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  438|  85.6k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2b_NtCsBlCKulpTva_9spargebra4termNtB6_16GraphNamePatternNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB8_:
  703|  7.99k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1w_NtCsBlCKulpTva_9spargebra4termNtB6_9GraphNameNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  187|    434|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXs1_NtCsBlCKulpTva_9spargebra4termNtB5_13GroundSubjectINtNtCs9nhK3FOW46N_4core7convert7TryFromNtNtCs2RvTzHk1J7L_5oxrdf6triple7SubjectE8try_fromB7_:
   51|  1.18k|    fn try_from(subject: Subject) -> Result<Self, Self::Error> {
   52|  1.18k|        match subject {
   53|  1.18k|            Subject::NamedNode(t) => Ok(t.into()),
   54|      0|            Subject::BlankNode(_) => Err(()),
   55|       |            #[cfg(feature = "rdf-star")]
   56|      0|            Subject::Triple(t) => Ok(GroundTriple::try_from(*t)?.into()),
   57|       |        }
   58|  1.18k|    }
_RNvXsn_NtCsBlCKulpTva_9spargebra4termNtB5_16NamedNodePatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableE4fromB7_:
  420|  19.2k|    fn from(var: Variable) -> Self {
  421|  19.2k|        Self::Variable(var)
  422|  19.2k|    }
_RNvXst_NtCsBlCKulpTva_9spargebra4termNtB5_11TermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf7literal7LiteralE4fromB7_:
  492|  4.03k|    fn from(literal: Literal) -> Self {
  493|  4.03k|        Self::Literal(literal)
  494|  4.03k|    }
_RNvXsT_NtCsBlCKulpTva_9spargebra4termNtB5_13TriplePatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB7_:
  801|    294|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  802|    294|        write!(f, "{} {} {}", self.subject, self.predicate, self.object)
  803|    294|    }
_RNvXsE_NtCsBlCKulpTva_9spargebra4termNtB5_17GroundTermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeE4fromB7_:
  627|  19.7k|    fn from(node: NamedNode) -> Self {
  628|  19.7k|        Self::NamedNode(node)
  629|  19.7k|    }
_RNvXs3_NtCsBlCKulpTva_9spargebra4termNtB5_10GroundTermNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB7_:
   88|      4|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   89|      4|        match self {
   90|      2|            Self::NamedNode(node) => node.fmt(f),
   91|      2|            Self::Literal(literal) => literal.fmt(f),
   92|       |            #[cfg(feature = "rdf-star")]
   93|      0|            Self::Triple(triple) => write!(
   94|      0|                f,
   95|      0|                "<<{} {} {}>>",
   96|      0|                triple.subject, triple.predicate, triple.object
   97|      0|            ),
   98|       |        }
   99|      4|    }
_RNvXsH_NtCsBlCKulpTva_9spargebra4termNtB5_17GroundTermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableE4fromB7_:
  649|   101k|    fn from(var: Variable) -> Self {
  650|   101k|        Self::Variable(var)
  651|   101k|    }
_RNvXsc_NtCsBlCKulpTva_9spargebra4termNtB5_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeE4fromB7_:
  216|  3.39k|    fn from(node: NamedNode) -> Self {
  217|  3.39k|        Self::NamedNode(node)
  218|  3.39k|    }
_RNvXsQ_NtCsBlCKulpTva_9spargebra4termNtB5_16GraphNamePatternINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_9GraphNameE4fromB7_:
  748|    269|    fn from(graph_name: GraphName) -> Self {
  749|    269|        match graph_name {
  750|    207|            GraphName::NamedNode(node) => node.into(),
  751|     62|            GraphName::DefaultGraph => Self::DefaultGraph,
  752|       |        }
  753|    269|    }
_RNvXsj_NtCsBlCKulpTva_9spargebra4termNtB5_10GroundQuadINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_4QuadE8try_fromB7_:
  374|  1.18k|    fn try_from(quad: Quad) -> Result<Self, Self::Error> {
  375|  1.18k|        Ok(Self {
  376|  1.18k|            subject: quad.subject.try_into()?,
  377|  1.18k|            predicate: quad.predicate,
  378|  1.18k|            object: quad.object.try_into()?,
  379|  1.18k|            graph_name: quad.graph_name,
  380|       |        })
  381|  1.18k|    }
_RNvXsm_NtCsBlCKulpTva_9spargebra4termNtB5_16NamedNodePatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeE4fromB7_:
  413|  36.5k|    fn from(node: NamedNode) -> Self {
  414|  36.5k|        Self::NamedNode(node)
  415|  36.5k|    }
_RNvXss_NtCsBlCKulpTva_9spargebra4termNtB5_11TermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf10blank_node9BlankNodeE4fromB7_:
  485|  25.1k|    fn from(node: BlankNode) -> Self {
  486|  25.1k|        Self::BlankNode(node)
  487|  25.1k|    }
_RNvXsv_NtCsBlCKulpTva_9spargebra4termNtB5_11TermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableE4from:
  506|  23.3k|    fn from(var: Variable) -> Self {
  507|  23.3k|        Self::Variable(var)
  508|  23.3k|    }
_RNvXsg_NtCsBlCKulpTva_9spargebra4termNtB5_4QuadINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_11QuadPatternE8try_fromB7_:
  299|  3.69k|    fn try_from(quad: QuadPattern) -> Result<Self, Self::Error> {
  300|  3.69k|        Ok(Self {
  301|  3.69k|            subject: quad.subject.try_into()?,
  302|  3.69k|            predicate: quad.predicate.try_into()?,
  303|  3.69k|            object: quad.object.try_into()?,
  304|  3.69k|            graph_name: quad.graph_name.try_into()?,
  305|       |        })
  306|  3.69k|    }
_RNvXs1S_NtCsBlCKulpTva_9spargebra4termNtB6_16NamedNodePatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  385|  54.2k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2k_NtCsBlCKulpTva_9spargebra4termNtB6_13TriplePatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  767|  19.4k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsd_NtCsBlCKulpTva_9spargebra4termNtB5_9GraphNameINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_16GraphNamePatternE8try_fromB7_:
  225|  3.69k|    fn try_from(pattern: GraphNamePattern) -> Result<Self, Self::Error> {
  226|  3.69k|        match pattern {
  227|  3.39k|            GraphNamePattern::NamedNode(t) => Ok(t.into()),
  228|    306|            GraphNamePattern::DefaultGraph => Ok(Self::DefaultGraph),
  229|      0|            GraphNamePattern::Variable(_) => Err(()),
  230|       |        }
  231|  3.69k|    }
_RNvXs5_NtCsBlCKulpTva_9spargebra4termNtB5_10GroundTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf7literal7LiteralE4fromB7_:
  111|  1.07k|    fn from(literal: Literal) -> Self {
  112|  1.07k|        Self::Literal(literal)
  113|  1.07k|    }
_RNvXs15_NtCsBlCKulpTva_9spargebra4termNtB6_17GroundQuadPatternINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB6_11QuadPatternE8try_fromB8_:
 1004|  11.4k|    fn try_from(pattern: QuadPattern) -> Result<Self, Self::Error> {
 1005|  11.4k|        Ok(Self {
 1006|  11.4k|            subject: pattern.subject.try_into()?,
 1007|  11.4k|            predicate: pattern.predicate,
 1008|  11.4k|            object: pattern.object.try_into()?,
 1009|  11.4k|            graph_name: pattern.graph_name,
 1010|       |        })
 1011|  11.4k|    }
_RNvXsr_NtCsBlCKulpTva_9spargebra4termNtB5_11TermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeE4fromB7_:
  478|  20.5k|    fn from(node: NamedNode) -> Self {
  479|  20.5k|        Self::NamedNode(node)
  480|  20.5k|    }
_RNvXs_NtCsBlCKulpTva_9spargebra4termNtB4_13GroundSubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeE4fromB6_:
   34|  1.18k|    fn from(node: NamedNode) -> Self {
   35|  1.18k|        Self::NamedNode(node)
   36|  1.18k|    }
_RNvXsx_NtCsBlCKulpTva_9spargebra4termNtB5_11TermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf6triple4TermE4fromB7_:
  525|  23.1k|    fn from(term: Term) -> Self {
  526|  23.1k|        match term {
  527|  19.0k|            Term::NamedNode(node) => node.into(),
  528|      0|            Term::BlankNode(node) => node.into(),
  529|  4.03k|            Term::Literal(literal) => literal.into(),
  530|       |            #[cfg(feature = "rdf-star")]
  531|      0|            Term::Triple(t) => TriplePattern::from(*t).into(),
  532|       |        }
  533|  23.1k|    }
_RINvMsS_NtCsBlCKulpTva_9spargebra4termNtB6_13TriplePattern3newNtB6_11TermPatternNtB6_16NamedNodePatternBY_EB8_:
  775|  19.7k|    pub(crate) fn new(
  776|  19.7k|        subject: impl Into<TermPattern>,
  777|  19.7k|        predicate: impl Into<NamedNodePattern>,
  778|  19.7k|        object: impl Into<TermPattern>,
  779|  19.7k|    ) -> Self {
  780|  19.7k|        Self {
  781|  19.7k|            subject: subject.into(),
  782|  19.7k|            predicate: predicate.into(),
  783|  19.7k|            object: object.into(),
  784|  19.7k|        }
  785|  19.7k|    }
_RINvMsS_NtCsBlCKulpTva_9spargebra4termNtB6_13TriplePattern3newNtB6_11TermPatternNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeBY_EB8_:
  775|  8.05k|    pub(crate) fn new(
  776|  8.05k|        subject: impl Into<TermPattern>,
  777|  8.05k|        predicate: impl Into<NamedNodePattern>,
  778|  8.05k|        object: impl Into<TermPattern>,
  779|  8.05k|    ) -> Self {
  780|  8.05k|        Self {
  781|  8.05k|            subject: subject.into(),
  782|  8.05k|            predicate: predicate.into(),
  783|  8.05k|            object: object.into(),
  784|  8.05k|        }
  785|  8.05k|    }
_RINvMsS_NtCsBlCKulpTva_9spargebra4termNtB6_13TriplePattern3newNtB6_11TermPatternNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableBY_EB8_:
  775|  12.0k|    pub(crate) fn new(
  776|  12.0k|        subject: impl Into<TermPattern>,
  777|  12.0k|        predicate: impl Into<NamedNodePattern>,
  778|  12.0k|        object: impl Into<TermPattern>,
  779|  12.0k|    ) -> Self {
  780|  12.0k|        Self {
  781|  12.0k|            subject: subject.into(),
  782|  12.0k|            predicate: predicate.into(),
  783|  12.0k|            object: object.into(),
  784|  12.0k|        }
  785|  12.0k|    }
_RINvMs11_NtCsBlCKulpTva_9spargebra4termNtB7_11QuadPattern3newNtB7_11TermPatternNtB7_16NamedNodePatternBX_B1f_EB9_:
  904|  15.0k|    pub(crate) fn new(
  905|  15.0k|        subject: impl Into<TermPattern>,
  906|  15.0k|        predicate: impl Into<NamedNodePattern>,
  907|  15.0k|        object: impl Into<TermPattern>,
  908|  15.0k|        graph_name: impl Into<GraphNamePattern>,
  909|  15.0k|    ) -> Self {
  910|  15.0k|        Self {
  911|  15.0k|            subject: subject.into(),
  912|  15.0k|            predicate: predicate.into(),
  913|  15.0k|            object: object.into(),
  914|  15.0k|            graph_name: graph_name.into(),
  915|  15.0k|        }
  916|  15.0k|    }
_RINvMs11_NtCsBlCKulpTva_9spargebra4termNtB7_11QuadPattern3newNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableBX_BX_NtB7_9GraphNameEB9_:
  904|    269|    pub(crate) fn new(
  905|    269|        subject: impl Into<TermPattern>,
  906|    269|        predicate: impl Into<NamedNodePattern>,
  907|    269|        object: impl Into<TermPattern>,
  908|    269|        graph_name: impl Into<GraphNamePattern>,
  909|    269|    ) -> Self {
  910|    269|        Self {
  911|    269|            subject: subject.into(),
  912|    269|            predicate: predicate.into(),
  913|    269|            object: object.into(),
  914|    269|            graph_name: graph_name.into(),
  915|    269|        }
  916|    269|    }
_RINvMs11_NtCsBlCKulpTva_9spargebra4termNtB7_11QuadPattern3newNtB7_11TermPatternNtB7_16NamedNodePatternBX_NtB7_16GraphNamePatternEB9_:
  904|  2.32k|    pub(crate) fn new(
  905|  2.32k|        subject: impl Into<TermPattern>,
  906|  2.32k|        predicate: impl Into<NamedNodePattern>,
  907|  2.32k|        object: impl Into<TermPattern>,
  908|  2.32k|        graph_name: impl Into<GraphNamePattern>,
  909|  2.32k|    ) -> Self {
  910|  2.32k|        Self {
  911|  2.32k|            subject: subject.into(),
  912|  2.32k|            predicate: predicate.into(),
  913|  2.32k|            object: object.into(),
  914|  2.32k|            graph_name: graph_name.into(),
  915|  2.32k|        }
  916|  2.32k|    }
_RINvMsS_NtCsBlCKulpTva_9spargebra4termNtB6_13TriplePattern3newNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableBY_BY_EB8_:
  775|    538|    pub(crate) fn new(
  776|    538|        subject: impl Into<TermPattern>,
  777|    538|        predicate: impl Into<NamedNodePattern>,
  778|    538|        object: impl Into<TermPattern>,
  779|    538|    ) -> Self {
  780|    538|        Self {
  781|    538|            subject: subject.into(),
  782|    538|            predicate: predicate.into(),
  783|    538|            object: object.into(),
  784|    538|        }
  785|    538|    }
_RNvXso_NtCsBlCKulpTva_9spargebra4termNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_16NamedNodePatternE8try_fromB7_:
  429|  3.69k|    fn try_from(pattern: NamedNodePattern) -> Result<Self, Self::Error> {
  430|  3.69k|        match pattern {
  431|  3.69k|            NamedNodePattern::NamedNode(t) => Ok(t),
  432|      0|            NamedNodePattern::Variable(_) => Err(()),
  433|       |        }
  434|  3.69k|    }

_RNvXsa_NtCsBlCKulpTva_9spargebra6updateNtB5_6UpdateNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
   19|  2.53k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsh_NtCsBlCKulpTva_9spargebra6updateNtB5_20GraphUpdateOperationNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs6R6jWqmh3zm_18sparql_update_eval:
   95|  5.03k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtCsBlCKulpTva_9spargebra6updateNtB2_6Update5parse:
   29|  2.76k|    pub fn parse(update: &str, base_iri: Option<&str>) -> Result<Self, SparqlSyntaxError> {
   30|  2.76k|        parse_update(update, base_iri)
   31|  2.76k|    }

_RNvXsE_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
  636|     37|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsx_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_10ExpressionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCshC9BJcurWLf_8oxigraph:
   22|     37|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs9_NtCsftsRMVBFYTr_7sparopt7algebraNtNtCsBlCKulpTva_9spargebra7algebra10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromRNtB5_10ExpressionE4from:
  486|  23.0k|    fn from(expression: &Expression) -> Self {
  487|  23.0k|        match expression {
  488|    614|            Expression::NamedNode(node) => Self::NamedNode(node.clone()),
  489|  4.21k|            Expression::Literal(literal) => Self::Literal(literal.clone()),
  490|  4.74k|            Expression::Variable(variable) => Self::Variable(variable.clone()),
  491|     38|            Expression::Or(inner) => inner
  492|     38|                .iter()
  493|     38|                .map(Into::into)
  494|     38|                .reduce(|a, b| Self::Or(Box::new(a), Box::new(b)))
  495|     38|                .unwrap_or_else(|| Literal::from(false).into()),
  496|    278|            Expression::And(inner) => inner
  497|    278|                .iter()
  498|    278|                .map(Into::into)
  499|    278|                .reduce(|a, b| Self::And(Box::new(a), Box::new(b)))
  500|    278|                .unwrap_or_else(|| Literal::from(true).into()),
  501|    888|            Expression::Equal(left, right) => Self::Equal(
  502|    888|                Box::new(left.as_ref().into()),
  503|    888|                Box::new(right.as_ref().into()),
  504|    888|            ),
  505|      3|            Expression::SameTerm(left, right) => Self::SameTerm(
  506|      3|                Box::new(left.as_ref().into()),
  507|      3|                Box::new(right.as_ref().into()),
  508|      3|            ),
  509|     36|            Expression::Greater(left, right) => Self::Greater(
  510|     36|                Box::new(left.as_ref().into()),
  511|     36|                Box::new(right.as_ref().into()),
  512|     36|            ),
  513|    154|            Expression::GreaterOrEqual(left, right) => Self::GreaterOrEqual(
  514|    154|                Box::new(left.as_ref().into()),
  515|    154|                Box::new(right.as_ref().into()),
  516|    154|            ),
  517|     16|            Expression::Less(left, right) => Self::Less(
  518|     16|                Box::new(left.as_ref().into()),
  519|     16|                Box::new(right.as_ref().into()),
  520|     16|            ),
  521|     32|            Expression::LessOrEqual(left, right) => Self::LessOrEqual(
  522|     32|                Box::new(left.as_ref().into()),
  523|     32|                Box::new(right.as_ref().into()),
  524|     32|            ),
  525|    270|            Expression::Add(left, right) => Self::Add(
  526|    270|                Box::new(left.as_ref().into()),
  527|    270|                Box::new(right.as_ref().into()),
  528|    270|            ),
  529|  1.76k|            Expression::Subtract(left, right) => Self::Subtract(
  530|  1.76k|                Box::new(left.as_ref().into()),
  531|  1.76k|                Box::new(right.as_ref().into()),
  532|  1.76k|            ),
  533|    598|            Expression::Multiply(left, right) => Self::Multiply(
  534|    598|                Box::new(left.as_ref().into()),
  535|    598|                Box::new(right.as_ref().into()),
  536|    598|            ),
  537|  3.33k|            Expression::Divide(left, right) => Self::Divide(
  538|  3.33k|                Box::new(left.as_ref().into()),
  539|  3.33k|                Box::new(right.as_ref().into()),
  540|  3.33k|            ),
  541|    328|            Expression::UnaryPlus(inner) => Self::UnaryPlus(Box::new(inner.as_ref().into())),
  542|  2.28k|            Expression::UnaryMinus(inner) => Self::UnaryMinus(Box::new(inner.as_ref().into())),
  543|  2.29k|            Expression::Not(inner) => Self::Not(Box::new(inner.as_ref().into())),
  544|    134|            Expression::Exists(inner) => Self::Exists(Box::new(inner.as_ref().into())),
  545|    203|            Expression::Bound(variable) => Self::Bound(variable.clone()),
  546|    734|            Expression::If(cond, yes, no) => Self::If(
  547|    734|                Box::new(cond.as_ref().into()),
  548|    734|                Box::new(yes.as_ref().into()),
  549|    734|                Box::new(no.as_ref().into()),
  550|    734|            ),
  551|     82|            Expression::Coalesce(inner) => Self::Coalesce(inner.iter().map(Into::into).collect()),
  552|     60|            Expression::FunctionCall(name, args) => {
  553|     60|                Self::FunctionCall(name.clone(), args.iter().map(Into::into).collect())
  554|       |            }
  555|       |        }
  556|  23.0k|    }
_RNvXsk_NtCsftsRMVBFYTr_7sparopt7algebraNtNtCsBlCKulpTva_9spargebra7algebra12GraphPatternINtNtCs9nhK3FOW46N_4core7convert4FromRNtB5_12GraphPatternE4from:
 1323|  1.91k|    fn from(pattern: &GraphPattern) -> Self {
 1324|  1.91k|        match pattern {
 1325|       |            GraphPattern::QuadPattern {
 1326|    294|                subject,
 1327|    294|                predicate,
 1328|    294|                object,
 1329|    294|                graph_name,
 1330|    294|            } => {
 1331|    294|                let pattern = Self::Bgp {
 1332|    294|                    patterns: vec![TriplePattern {
 1333|    294|                        subject: subject.clone().into(),
 1334|    294|                        predicate: predicate.clone(),
 1335|    294|                        object: object.clone().into(),
 1336|    294|                    }],
 1337|    294|                };
 1338|    294|                if let Some(graph_name) = graph_name {
 1339|     52|                    Self::Graph {
 1340|     52|                        inner: Box::new(pattern),
 1341|     52|                        name: graph_name.clone(),
 1342|     52|                    }
 1343|       |                } else {
 1344|    242|                    pattern
 1345|       |                }
 1346|       |            }
 1347|       |            GraphPattern::Path {
 1348|    522|                subject,
 1349|    522|                path,
 1350|    522|                object,
 1351|    522|                graph_name,
 1352|    522|            } => {
 1353|    522|                let pattern = Self::Path {
 1354|    522|                    subject: subject.clone().into(),
 1355|    522|                    path: path.clone(),
 1356|    522|                    object: object.clone().into(),
 1357|    522|                };
 1358|    522|                if let Some(graph_name) = graph_name {
 1359|    366|                    Self::Graph {
 1360|    366|                        inner: Box::new(pattern),
 1361|    366|                        name: graph_name.clone(),
 1362|    366|                    }
 1363|       |                } else {
 1364|    156|                    pattern
 1365|       |                }
 1366|       |            }
 1367|    734|            GraphPattern::Join { left, right, .. } => {
 1368|    734|                match (left.as_ref().into(), right.as_ref().into()) {
 1369|    187|                    (Self::Bgp { patterns: mut left }, Self::Bgp { patterns: right }) => {
 1370|    187|                        left.extend(right);
 1371|    187|                        Self::Bgp { patterns: left }
 1372|       |                    }
 1373|    547|                    (left, right) => Self::Join {
 1374|    547|                        left: Box::new(left),
 1375|    547|                        right: Box::new(right),
 1376|    547|                    },
 1377|       |                }
 1378|       |            }
 1379|       |            GraphPattern::LeftJoin {
 1380|     12|                left,
 1381|     12|                right,
 1382|     12|                expression,
 1383|       |                ..
 1384|       |            } => {
 1385|     12|                let empty_expr = if let Expression::Literal(l) = expression {
 1386|     12|                    l.datatype() == xsd::BOOLEAN && l.value() == "true"
 1387|       |                } else {
 1388|      0|                    false
 1389|       |                };
 1390|       |                Self::LeftJoin {
 1391|     12|                    left: Box::new(left.as_ref().into()),
 1392|     12|                    right: Box::new(right.as_ref().into()),
 1393|     12|                    expression: if empty_expr {
 1394|     12|                        None
 1395|       |                    } else {
 1396|      0|                        Some(expression.into())
 1397|       |                    },
 1398|       |                }
 1399|       |            }
 1400|       |            #[cfg(feature = "sep-0006")]
 1401|      2|            GraphPattern::Lateral { left, right } => {
 1402|      2|                match (left.as_ref().into(), right.as_ref().into()) {
 1403|      0|                    (Self::Bgp { patterns: mut left }, Self::Bgp { patterns: right }) => {
 1404|      0|                        left.extend(right);
 1405|      0|                        Self::Bgp { patterns: left }
 1406|       |                    }
 1407|      2|                    (left, right) => Self::Lateral {
 1408|      2|                        left: Box::new(left),
 1409|      2|                        right: Box::new(right),
 1410|      2|                    },
 1411|       |                }
 1412|       |            }
 1413|      0|            GraphPattern::Filter { inner, expression } => Self::Filter {
 1414|      0|                inner: Box::new(inner.as_ref().into()),
 1415|      0|                expr: expression.into(),
 1416|      0|            },
 1417|      0|            GraphPattern::Union { inner } => inner
 1418|      0|                .iter()
 1419|      0|                .map(Into::into)
 1420|      0|                .reduce(|a, b| Self::Union {
 1421|       |                    left: Box::new(a),
 1422|       |                    right: Box::new(b),
 1423|      0|                })
 1424|      0|                .unwrap_or_else(|| Self::Values {
 1425|       |                    variables: Vec::new(),
 1426|       |                    bindings: Vec::new(),
 1427|      0|                }),
 1428|       |            GraphPattern::Extend {
 1429|     34|                inner,
 1430|     34|                expression,
 1431|     34|                variable,
 1432|     34|            } => Self::Extend {
 1433|     34|                inner: Box::new(inner.as_ref().into()),
 1434|     34|                expression: expression.into(),
 1435|     34|                variable: variable.clone(),
 1436|     34|            },
 1437|      0|            GraphPattern::Minus { left, right, .. } => Self::Minus {
 1438|      0|                left: Box::new(left.as_ref().into()),
 1439|      0|                right: Box::new(right.as_ref().into()),
 1440|      0|            },
 1441|       |            GraphPattern::Values {
 1442|     66|                variables,
 1443|     66|                bindings,
 1444|     66|            } => Self::Values {
 1445|     66|                variables: variables.clone(),
 1446|     66|                bindings: bindings.clone(),
 1447|     66|            },
 1448|      0|            GraphPattern::OrderBy { inner, expression } => Self::OrderBy {
 1449|      0|                inner: Box::new(inner.as_ref().into()),
 1450|      0|                expression: expression.iter().map(Into::into).collect(),
 1451|      0|            },
 1452|    136|            GraphPattern::Project { inner, variables } => Self::Project {
 1453|    136|                inner: Box::new(inner.as_ref().into()),
 1454|    136|                variables: variables.clone(),
 1455|    136|            },
 1456|    110|            GraphPattern::Distinct { inner } => Self::Distinct {
 1457|    110|                inner: Box::new(inner.as_ref().into()),
 1458|    110|            },
 1459|      0|            GraphPattern::Reduced { inner } => Self::Distinct {
 1460|      0|                inner: Box::new(inner.as_ref().into()),
 1461|      0|            },
 1462|       |            GraphPattern::Slice {
 1463|      0|                inner,
 1464|      0|                start,
 1465|      0|                length,
 1466|      0|            } => Self::Slice {
 1467|      0|                inner: Box::new(inner.as_ref().into()),
 1468|      0|                start: *start,
 1469|      0|                length: *length,
 1470|      0|            },
 1471|       |            GraphPattern::Group {
 1472|      0|                inner,
 1473|      0|                variables,
 1474|      0|                aggregates,
 1475|      0|            } => Self::Group {
 1476|      0|                inner: Box::new(inner.as_ref().into()),
 1477|      0|                variables: variables.clone(),
 1478|      0|                aggregates: aggregates
 1479|      0|                    .iter()
 1480|      0|                    .map(|(var, expr)| (var.clone(), expr.into()))
 1481|      0|                    .collect(),
 1482|      0|            },
 1483|       |            GraphPattern::Service {
 1484|      0|                inner,
 1485|      0|                name,
 1486|      0|                silent,
 1487|      0|            } => Self::Service {
 1488|      0|                inner: Box::new(inner.as_ref().into()),
 1489|      0|                name: name.clone(),
 1490|      0|                silent: *silent,
 1491|      0|            },
 1492|       |        }
 1493|  1.91k|    }
_RNvXs7_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf8variable8VariableE4from:
  474|  2.22k|    fn from(value: Variable) -> Self {
  475|  2.22k|        Self::Variable(value)
  476|  2.22k|    }
_RNvXsj_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPatternINtNtCs9nhK3FOW46N_4core7convert4FromRNtNtCsBlCKulpTva_9spargebra7algebra12GraphPatternE4from:
 1317|  4.96k|    fn from(pattern: &AlGraphPattern) -> Self {
 1318|  4.96k|        Self::from_sparql_algebra(pattern, None, &mut HashMap::new())
 1319|  4.96k|    }
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression15returns_boolean:
  365|    140|    fn returns_boolean(&self) -> bool {
  366|      3|        match self {
  367|       |            Self::Or(_)
  368|       |            | Self::And(_)
  369|       |            | Self::Equal(_, _)
  370|       |            | Self::SameTerm(_, _)
  371|       |            | Self::Greater(_, _)
  372|       |            | Self::GreaterOrEqual(_, _)
  373|       |            | Self::Less(_, _)
  374|       |            | Self::LessOrEqual(_, _)
  375|       |            | Self::Not(_)
  376|       |            | Self::Exists(_)
  377|       |            | Self::Bound(_)
  378|       |            | Self::FunctionCall(
  379|       |                Function::IsBlank | Function::IsIri | Function::IsLiteral | Function::IsNumeric,
  380|       |                _,
  381|     57|            ) => true,
  382|       |            #[cfg(feature = "rdf-star")]
  383|      0|            Self::FunctionCall(Function::IsTriple, _) => true,
  384|     47|            Self::Literal(literal) => literal.datatype() == xsd::BOOLEAN,
  385|     22|            Self::If(_, a, b) => a.returns_boolean() && b.returns_boolean(),
  386|     14|            _ => false,
  387|       |        }
  388|    140|    }
_RNvXsE_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  636|  24.9k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsZ_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_14MinusAlgorithmNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
 1525|      3|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsL_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_13JoinAlgorithmNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
 1497|    183|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression5equal:
  126|    417|    pub fn equal(left: Self, right: Self) -> Self {
  127|    417|        match (left, right) {
  128|      0|            (Self::NamedNode(left), Self::NamedNode(right)) => (left == right).into(),
  129|      7|            (Self::Literal(left), Self::Literal(right)) if left == right => true.into(),
  130|    414|            (left, right) => {
  131|    414|                let (left, right) = order_pair(left, right);
  132|    414|                Self::Equal(Box::new(left), Box::new(right))
  133|       |            }
  134|       |        }
  135|    417|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern7reduced:
  969|  7.41k|    pub fn reduced(inner: Self) -> Self {
  970|  7.41k|        if inner.is_empty() {
  971|     21|            return Self::empty();
  972|  7.38k|        }
  973|  7.38k|        Self::Reduced {
  974|  7.38k|            inner: Box::new(inner),
  975|  7.38k|        }
  976|  7.41k|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern19from_sparql_algebra:
 1114|  52.8k|    fn from_sparql_algebra(
 1115|  52.8k|        pattern: &AlGraphPattern,
 1116|  52.8k|        graph_name: Option<&NamedNodePattern>,
 1117|  52.8k|        blank_nodes: &mut HashMap<BlankNode, Variable>,
 1118|  52.8k|    ) -> Self {
 1119|  52.8k|        match pattern {
 1120|  11.9k|            AlGraphPattern::Bgp { patterns } => patterns
 1121|  11.9k|                .iter()
 1122|  11.9k|                .map(|p| {
 1123|       |                    let (subject, predicate, object) =
 1124|       |                        Self::triple_pattern_from_algebra(p, blank_nodes);
 1125|       |                    Self::QuadPattern {
 1126|       |                        subject,
 1127|       |                        predicate,
 1128|       |                        object,
 1129|       |                        graph_name: graph_name.cloned(),
 1130|       |                    }
 1131|  11.9k|                })
 1132|  11.9k|                .reduce(|a, b| Self::Join {
 1133|       |                    left: Box::new(a),
 1134|       |                    right: Box::new(b),
 1135|       |                    algorithm: JoinAlgorithm::default(),
 1136|  11.9k|                })
 1137|  11.9k|                .unwrap_or_else(Self::empty_singleton),
 1138|       |            AlGraphPattern::Path {
 1139|  12.1k|                subject,
 1140|  12.1k|                path,
 1141|  12.1k|                object,
 1142|  12.1k|            } => Self::Path {
 1143|  12.1k|                subject: Self::term_pattern_from_algebra(subject, blank_nodes),
 1144|  12.1k|                path: path.clone(),
 1145|  12.1k|                object: Self::term_pattern_from_algebra(object, blank_nodes),
 1146|  12.1k|                graph_name: graph_name.cloned(),
 1147|  12.1k|            },
 1148|  18.3k|            AlGraphPattern::Join { left, right } => Self::Join {
 1149|  18.3k|                left: Box::new(Self::from_sparql_algebra(left, graph_name, blank_nodes)),
 1150|  18.3k|                right: Box::new(Self::from_sparql_algebra(right, graph_name, blank_nodes)),
 1151|  18.3k|                algorithm: JoinAlgorithm::default(),
 1152|  18.3k|            },
 1153|       |            AlGraphPattern::LeftJoin {
 1154|    446|                left,
 1155|    446|                right,
 1156|    446|                expression,
 1157|    446|            } => Self::LeftJoin {
 1158|    446|                left: Box::new(Self::from_sparql_algebra(left, graph_name, blank_nodes)),
 1159|    446|                right: Box::new(Self::from_sparql_algebra(right, graph_name, blank_nodes)),
 1160|    446|                expression: expression.as_ref().map_or_else(
 1161|    446|                    || true.into(),
 1162|    446|                    |e| Expression::from_sparql_algebra(e, graph_name),
 1163|    446|                ),
 1164|    446|                algorithm: LeftJoinAlgorithm::default(),
 1165|    446|            },
 1166|       |            #[cfg(feature = "sep-0006")]
 1167|    544|            AlGraphPattern::Lateral { left, right } => Self::Lateral {
 1168|    544|                left: Box::new(Self::from_sparql_algebra(left, graph_name, blank_nodes)),
 1169|    544|                right: Box::new(Self::from_sparql_algebra(right, graph_name, blank_nodes)),
 1170|    544|            },
 1171|     44|            AlGraphPattern::Filter { inner, expr } => Self::Filter {
 1172|     44|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1173|     44|                expression: Expression::from_sparql_algebra(expr, graph_name),
 1174|     44|            },
 1175|     38|            AlGraphPattern::Union { left, right } => Self::Union {
 1176|     38|                inner: vec![
 1177|     38|                    Self::from_sparql_algebra(left, graph_name, blank_nodes),
 1178|     38|                    Self::from_sparql_algebra(right, graph_name, blank_nodes),
 1179|     38|                ],
 1180|     38|            },
 1181|  4.48k|            AlGraphPattern::Graph { inner, name } => {
 1182|  4.48k|                Self::from_sparql_algebra(inner, Some(name), blank_nodes)
 1183|       |            }
 1184|       |            AlGraphPattern::Extend {
 1185|    604|                inner,
 1186|    604|                expression,
 1187|    604|                variable,
 1188|    604|            } => Self::Extend {
 1189|    604|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1190|    604|                expression: Expression::from_sparql_algebra(expression, graph_name),
 1191|    604|                variable: variable.clone(),
 1192|    604|            },
 1193|     40|            AlGraphPattern::Minus { left, right } => Self::Minus {
 1194|     40|                left: Box::new(Self::from_sparql_algebra(left, graph_name, blank_nodes)),
 1195|     40|                right: Box::new(Self::from_sparql_algebra(right, graph_name, blank_nodes)),
 1196|     40|                algorithm: MinusAlgorithm::default(),
 1197|     40|            },
 1198|       |            AlGraphPattern::Values {
 1199|    402|                variables,
 1200|    402|                bindings,
 1201|    402|            } => Self::Values {
 1202|    402|                variables: variables.clone(),
 1203|    402|                bindings: bindings.clone(),
 1204|    402|            },
 1205|      0|            AlGraphPattern::OrderBy { inner, expression } => Self::OrderBy {
 1206|      0|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1207|      0|                expression: expression
 1208|      0|                    .iter()
 1209|      0|                    .map(|e| OrderExpression::from_sparql_algebra(e, graph_name))
 1210|      0|                    .collect(),
 1211|      0|            },
 1212|  2.06k|            AlGraphPattern::Project { inner, variables } => {
 1213|  2.06k|                let graph_name = if let Some(NamedNodePattern::Variable(graph_name)) = graph_name {
 1214|       |                    Some(NamedNodePattern::Variable(
 1215|      8|                        if variables.contains(graph_name) {
 1216|      2|                            graph_name.clone()
 1217|       |                        } else {
 1218|      6|                            new_var()
 1219|       |                        },
 1220|       |                    ))
 1221|       |                } else {
 1222|  2.05k|                    graph_name.cloned()
 1223|       |                };
 1224|  2.06k|                Self::Project {
 1225|  2.06k|                    inner: Box::new(Self::from_sparql_algebra(
 1226|  2.06k|                        inner,
 1227|  2.06k|                        graph_name.as_ref(),
 1228|  2.06k|                        &mut HashMap::new(),
 1229|  2.06k|                    )),
 1230|  2.06k|                    variables: variables.clone(),
 1231|  2.06k|                }
 1232|       |            }
 1233|    514|            AlGraphPattern::Distinct { inner } => Self::Distinct {
 1234|    514|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1235|    514|            },
 1236|  1.07k|            AlGraphPattern::Reduced { inner } => Self::Distinct {
 1237|  1.07k|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1238|  1.07k|            },
 1239|       |            AlGraphPattern::Slice {
 1240|      0|                inner,
 1241|      0|                start,
 1242|      0|                length,
 1243|      0|            } => Self::Slice {
 1244|      0|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1245|      0|                start: *start,
 1246|      0|                length: *length,
 1247|      0|            },
 1248|       |            AlGraphPattern::Group {
 1249|     16|                inner,
 1250|     16|                variables,
 1251|     16|                aggregates,
 1252|     16|            } => Self::Group {
 1253|     16|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1254|     16|                variables: variables.clone(),
 1255|     16|                aggregates: aggregates
 1256|     16|                    .iter()
 1257|     16|                    .map(|(var, expr)| {
 1258|       |                        (
 1259|       |                            var.clone(),
 1260|       |                            AggregateExpression::from_sparql_algebra(expr, graph_name),
 1261|       |                        )
 1262|     16|                    })
 1263|     16|                    .collect(),
 1264|     16|            },
 1265|       |            AlGraphPattern::Service {
 1266|      0|                inner,
 1267|      0|                name,
 1268|      0|                silent,
 1269|      0|            } => Self::Service {
 1270|      0|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1271|      0|                name: name.clone(),
 1272|      0|                silent: *silent,
 1273|      0|            },
 1274|       |        }
 1275|  52.8k|    }
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression10unary_plus:
  164|    157|    pub fn unary_plus(inner: Self) -> Self {
  165|    157|        Self::UnaryPlus(Box::new(inner))
  166|    157|    }
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression14used_variables:
  210|     96|    pub fn used_variables(&self) -> HashSet<&Variable> {
  211|     96|        let mut variables = HashSet::new();
  212|     96|        self.lookup_used_variables(&mut |v| {
  213|       |            variables.insert(v);
  214|     96|        });
  215|     96|        variables
  216|     96|    }
_RNvXs0_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf7literal7LiteralE4from:
  398|  31.3k|    fn from(value: Literal) -> Self {
  399|  31.3k|        Self::Literal(value)
  400|  31.3k|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern27triple_pattern_from_algebra:
 1277|  37.9k|    fn triple_pattern_from_algebra(
 1278|  37.9k|        pattern: &TriplePattern,
 1279|  37.9k|        blank_nodes: &mut HashMap<BlankNode, Variable>,
 1280|  37.9k|    ) -> (GroundTermPattern, NamedNodePattern, GroundTermPattern) {
 1281|  37.9k|        (
 1282|  37.9k|            Self::term_pattern_from_algebra(&pattern.subject, blank_nodes),
 1283|  37.9k|            pattern.predicate.clone(),
 1284|  37.9k|            Self::term_pattern_from_algebra(&pattern.object, blank_nodes),
 1285|  37.9k|        )
 1286|  37.9k|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern18is_empty_singleton:
  750|   138k|    pub fn is_empty_singleton(&self) -> bool {
  751|   138k|        if let Self::Values { bindings, .. } = self {
  752|    672|            bindings.len() == 1 && bindings.iter().all(|b| b.iter().all(Option::is_none))
  753|       |        } else {
  754|   137k|            false
  755|       |        }
  756|   138k|    }
_RNvXsm_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_17LeftJoinAlgorithmNtNtCs9nhK3FOW46N_4core7default7Default7default:
 1517|    446|    fn default() -> Self {
 1518|    446|        Self::HashBuildRightProbeLeft {
 1519|    446|            keys: Vec::default(),
 1520|    446|        }
 1521|    446|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern8distinct:
  960|  2.23k|    pub fn distinct(inner: Self) -> Self {
  961|  2.23k|        if inner.is_empty() {
  962|      0|            return Self::empty();
  963|  2.23k|        }
  964|  2.23k|        Self::Distinct {
  965|  2.23k|            inner: Box::new(inner),
  966|  2.23k|        }
  967|  2.23k|    }
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression13less_or_equal:
  160|     15|    pub fn less_or_equal(left: Self, right: Self) -> Self {
  161|     15|        Self::LessOrEqual(Box::new(left), Box::new(right))
  162|     15|    }
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression23effective_boolean_value:
  194|  30.1k|    pub fn effective_boolean_value(&self) -> Option<bool> {
  195|  30.1k|        if let Self::Literal(literal) = self {
  196|  27.6k|            match literal.datatype() {
  197|  27.6k|                xsd::BOOLEAN => match literal.value() {
  198|  27.6k|                    "true" | "1" => Some(true),
  199|    139|                    "false" | "0" => Some(false),
  200|      0|                    _ => None, // TODO
  201|       |                },
  202|     52|                xsd::STRING => Some(!literal.value().is_empty()),
  203|     46|                _ => None, // TODO
  204|       |            }
  205|       |        } else {
  206|  2.46k|            None
  207|       |        }
  208|  30.1k|    }
_RNvXsc_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_10ExpressionNtNtNtCs9nhK3FOW46N_4core3ops3bit3Not3not:
  578|  1.23k|    fn not(self) -> Self {
  579|  1.23k|        if let Some(v) = self.effective_boolean_value() {
  580|    157|            (!v).into()
  581|  1.07k|        } else if let Self::Not(v) = self {
  582|     78|            if v.returns_boolean() {
  583|     63|                *v
  584|       |            } else {
  585|     15|                Self::And(vec![*v])
  586|       |            }
  587|       |        } else {
  588|    996|            Self::Not(Box::new(self))
  589|       |        }
  590|  1.23k|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern9left_join:
  792|    566|    pub fn left_join(
  793|    566|        left: Self,
  794|    566|        right: Self,
  795|    566|        expression: Expression,
  796|    566|        algorithm: LeftJoinAlgorithm,
  797|    566|    ) -> Self {
  798|    566|        let expression_ebv = expression.effective_boolean_value();
  799|    566|        if left.is_empty()
  800|    565|            || right.is_empty()
  801|    564|            || right.is_empty_singleton()
  802|    527|            || expression_ebv == Some(false)
  803|       |        {
  804|     39|            return left;
  805|    527|        }
  806|    527|        Self::LeftJoin {
  807|    527|            left: Box::new(left),
  808|    527|            right: Box::new(right),
  809|    527|            expression: if expression_ebv == Some(true) {
  810|    527|                true.into()
  811|       |            } else {
  812|      0|                expression
  813|       |            },
  814|    527|            algorithm,
  815|       |        }
  816|    566|    }
_RNvXse_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_10ExpressionNtNtNtCs9nhK3FOW46N_4core3ops5arith3Sub3sub:
  605|    828|    fn sub(self, rhs: Self) -> Self {
  606|    828|        Self::Subtract(Box::new(self), Box::new(rhs))
  607|    828|    }
_RNvXsg_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_10ExpressionNtNtNtCs9nhK3FOW46N_4core3ops5arith3Div3div:
  622|  1.56k|    fn div(self, rhs: Self) -> Self {
  623|  1.56k|        Self::Divide(Box::new(self), Box::new(rhs))
  624|  1.56k|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern8is_empty:
  735|   177k|    fn is_empty(&self) -> bool {
  736|   177k|        if let Self::Values { bindings, .. } = self {
  737|  3.90k|            bindings.is_empty()
  738|       |        } else {
  739|   173k|            false
  740|       |        }
  741|   177k|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern15empty_singleton:
  743|  2.47k|    pub fn empty_singleton() -> Self {
  744|  2.47k|        Self::Values {
  745|  2.47k|            variables: Vec::new(),
  746|  2.47k|            bindings: vec![Vec::new()],
  747|  2.47k|        }
  748|  2.47k|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern5minus:
  818|     57|    pub fn minus(left: Self, right: Self, algorithm: MinusAlgorithm) -> Self {
  819|     57|        if left.is_empty() {
  820|      0|            return Self::empty();
  821|     57|        }
  822|     57|        if right.is_empty() {
  823|      0|            return left;
  824|     57|        }
  825|     57|        Self::Minus {
  826|     57|            left: Box::new(left),
  827|     57|            right: Box::new(right),
  828|     57|            algorithm,
  829|     57|        }
  830|     57|    }
_RNvNtCsftsRMVBFYTr_7sparopt7algebra7new_var:
 1624|  31.7k|fn new_var() -> Variable {
 1625|  31.7k|    Variable::new_unchecked(format!("{:x}", random::<u128>()))
 1626|  31.7k|}
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression4less:
  156|      7|    pub fn less(left: Self, right: Self) -> Self {
  157|      7|        Self::Less(Box::new(left), Box::new(right))
  158|      7|    }
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression4call:
  190|     29|    pub fn call(name: Function, args: Vec<Self>) -> Self {
  191|     29|        Self::FunctionCall(name, args)
  192|     29|    }
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression19from_sparql_algebra:
  255|  20.3k|    fn from_sparql_algebra(
  256|  20.3k|        expression: &AlExpression,
  257|  20.3k|        graph_name: Option<&NamedNodePattern>,
  258|  20.3k|    ) -> Self {
  259|  20.3k|        match expression {
  260|    594|            AlExpression::NamedNode(node) => Self::NamedNode(node.clone()),
  261|  2.03k|            AlExpression::Literal(literal) => Self::Literal(literal.clone()),
  262|  4.43k|            AlExpression::Variable(variable) => Self::Variable(variable.clone()),
  263|     24|            AlExpression::Or(left, right) => Self::Or(vec![
  264|     24|                Self::from_sparql_algebra(left, graph_name),
  265|     24|                Self::from_sparql_algebra(right, graph_name),
  266|     24|            ]),
  267|    274|            AlExpression::And(left, right) => Self::And(vec![
  268|    274|                Self::from_sparql_algebra(left, graph_name),
  269|    274|                Self::from_sparql_algebra(right, graph_name),
  270|    274|            ]),
  271|    180|            AlExpression::Equal(left, right) => Self::Equal(
  272|    180|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  273|    180|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  274|    180|            ),
  275|      0|            AlExpression::SameTerm(left, right) => Self::SameTerm(
  276|      0|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  277|      0|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  278|      0|            ),
  279|     36|            AlExpression::Greater(left, right) => Self::Greater(
  280|     36|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  281|     36|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  282|     36|            ),
  283|    150|            AlExpression::GreaterOrEqual(left, right) => Self::GreaterOrEqual(
  284|    150|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  285|    150|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  286|    150|            ),
  287|     14|            AlExpression::Less(left, right) => Self::Less(
  288|     14|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  289|     14|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  290|     14|            ),
  291|     30|            AlExpression::LessOrEqual(left, right) => Self::LessOrEqual(
  292|     30|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  293|     30|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  294|     30|            ),
  295|  1.34k|            AlExpression::In(left, right) => {
  296|  1.34k|                let left = Self::from_sparql_algebra(left, graph_name);
  297|  1.34k|                match right.len() {
  298|    688|                    0 => Self::if_cond(left, false.into(), false.into()),
  299|    644|                    1 => Self::Equal(
  300|    644|                        Box::new(left),
  301|    644|                        Box::new(Self::from_sparql_algebra(&right[0], graph_name)),
  302|    644|                    ),
  303|      8|                    _ => Self::Or(
  304|      8|                        right
  305|      8|                            .iter()
  306|      8|                            .map(|e| {
  307|       |                                Self::Equal(
  308|       |                                    Box::new(left.clone()),
  309|       |                                    Box::new(Self::from_sparql_algebra(e, graph_name)),
  310|       |                                )
  311|      8|                            })
  312|      8|                            .collect(),
  313|      8|                    ),
  314|       |                }
  315|       |            }
  316|    270|            AlExpression::Add(left, right) => Self::Add(
  317|    270|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  318|    270|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  319|    270|            ),
  320|  1.65k|            AlExpression::Subtract(left, right) => Self::Subtract(
  321|  1.65k|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  322|  1.65k|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  323|  1.65k|            ),
  324|    586|            AlExpression::Multiply(left, right) => Self::Multiply(
  325|    586|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  326|    586|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  327|    586|            ),
  328|  3.11k|            AlExpression::Divide(left, right) => Self::Divide(
  329|  3.11k|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  330|  3.11k|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  331|  3.11k|            ),
  332|    314|            AlExpression::UnaryPlus(inner) => {
  333|    314|                Self::UnaryPlus(Box::new(Self::from_sparql_algebra(inner, graph_name)))
  334|       |            }
  335|  2.16k|            AlExpression::UnaryMinus(inner) => {
  336|  2.16k|                Self::UnaryMinus(Box::new(Self::from_sparql_algebra(inner, graph_name)))
  337|       |            }
  338|  2.45k|            AlExpression::Not(inner) => {
  339|  2.45k|                Self::Not(Box::new(Self::from_sparql_algebra(inner, graph_name)))
  340|       |            }
  341|    136|            AlExpression::Exists(inner) => Self::Exists(Box::new(
  342|    136|                GraphPattern::from_sparql_algebra(inner, graph_name, &mut HashMap::new()),
  343|    136|            )),
  344|    388|            AlExpression::Bound(variable) => Self::Bound(variable.clone()),
  345|      0|            AlExpression::If(cond, yes, no) => Self::If(
  346|      0|                Box::new(Self::from_sparql_algebra(cond, graph_name)),
  347|      0|                Box::new(Self::from_sparql_algebra(yes, graph_name)),
  348|      0|                Box::new(Self::from_sparql_algebra(no, graph_name)),
  349|      0|            ),
  350|     80|            AlExpression::Coalesce(inner) => Self::Coalesce(
  351|     80|                inner
  352|     80|                    .iter()
  353|     80|                    .map(|e| Self::from_sparql_algebra(e, graph_name))
  354|     80|                    .collect(),
  355|     80|            ),
  356|     58|            AlExpression::FunctionCall(name, args) => Self::FunctionCall(
  357|     58|                name.clone(),
  358|     58|                args.iter()
  359|     58|                    .map(|e| Self::from_sparql_algebra(e, graph_name))
  360|     58|                    .collect(),
  361|     58|            ),
  362|       |        }
  363|  20.3k|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern7project:
  953|  2.91k|    pub fn project(inner: Self, variables: Vec<Variable>) -> Self {
  954|  2.91k|        Self::Project {
  955|  2.91k|            inner: Box::new(inner),
  956|  2.91k|            variables,
  957|  2.91k|        }
  958|  2.91k|    }
_RNvXsl_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_13JoinAlgorithmNtNtCs9nhK3FOW46N_4core7default7Default7default:
 1503|  46.8k|    fn default() -> Self {
 1504|  46.8k|        Self::HashBuildLeftProbeRight {
 1505|  46.8k|            keys: Vec::default(),
 1506|  46.8k|        }
 1507|  46.8k|    }
_RNvXsx_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_10ExpressionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   22|    154|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsS_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_17LeftJoinAlgorithmNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
 1511|     13|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression16greater_or_equal:
  152|     75|    pub fn greater_or_equal(left: Self, right: Self) -> Self {
  153|     75|        Self::GreaterOrEqual(Box::new(left), Box::new(right))
  154|     75|    }
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression8coalesce:
  186|     40|    pub fn coalesce(args: Vec<Self>) -> Self {
  187|     40|        Self::Coalesce(args)
  188|     40|    }
_RNvXs_NtCsftsRMVBFYTr_7sparopt7algebraNtB4_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCs2RvTzHk1J7L_5oxrdf10named_node9NamedNodeE4from:
  392|    297|    fn from(value: NamedNode) -> Self {
  393|    297|        Self::NamedNode(value)
  394|    297|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern6extend:
  886|    865|    pub fn extend(inner: Self, variable: Variable, expression: Expression) -> Self {
  887|    865|        if inner.is_empty() {
  888|      1|            return Self::empty();
  889|    864|        }
  890|    864|        Self::Extend {
  891|    864|            inner: Box::new(inner),
  892|    864|            variable,
  893|    864|            expression,
  894|    864|        }
  895|    865|    }
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression7greater:
  148|     18|    pub fn greater(left: Self, right: Self) -> Self {
  149|     18|        Self::Greater(Box::new(left), Box::new(right))
  150|     18|    }
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression7if_cond:
  178|  1.03k|    pub fn if_cond(cond: Self, then: Self, els: Self) -> Self {
  179|  1.03k|        match cond.effective_boolean_value() {
  180|      1|            Some(true) => then,
  181|      0|            Some(false) => els,
  182|  1.03k|            None => Self::If(Box::new(cond), Box::new(then), Box::new(els)),
  183|       |        }
  184|  1.03k|    }
_RNvXs8_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FrombE4from:
  480|  29.4k|    fn from(value: bool) -> Self {
  481|  29.4k|        Literal::from(value).into()
  482|  29.4k|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern5empty:
  727|     99|    pub fn empty() -> Self {
  728|     99|        Self::Values {
  729|     99|            variables: Vec::new(),
  730|     99|            bindings: Vec::new(),
  731|     99|        }
  732|     99|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern7lateral:
  776|  44.3k|    pub fn lateral(left: Self, right: Self) -> Self {
  777|  44.3k|        if left.is_empty() || right.is_empty() {
  778|      1|            return Self::empty();
  779|  44.3k|        }
  780|  44.3k|        if left.is_empty_singleton() {
  781|    244|            return right;
  782|  44.0k|        }
  783|  44.0k|        if right.is_empty_singleton() {
  784|      7|            return left;
  785|  44.0k|        }
  786|  44.0k|        Self::Lateral {
  787|  44.0k|            left: Box::new(left),
  788|  44.0k|            right: Box::new(right),
  789|  44.0k|        }
  790|  44.3k|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern6values:
  897|  1.42k|    pub fn values(
  898|  1.42k|        mut variables: Vec<Variable>,
  899|  1.42k|        mut bindings: Vec<Vec<Option<GroundTerm>>>,
  900|  1.42k|    ) -> Self {
  901|  1.42k|        let empty_rows = (0..variables.len())
  902|  1.42k|            .filter(|row| !bindings.iter().any(|binding| binding.get(*row).is_some()))
  903|  1.42k|            .collect::<Vec<_>>();
  904|  1.42k|        if !empty_rows.is_empty() {
  905|     51|            // We remove empty rows
  906|     51|            variables = variables
  907|     51|                .into_iter()
  908|     51|                .enumerate()
  909|     51|                .filter_map(|(i, v)| {
  910|       |                    if empty_rows.contains(&i) {
  911|       |                        None
  912|       |                    } else {
  913|       |                        Some(v)
  914|       |                    }
  915|     51|                })
  916|     51|                .collect();
  917|     51|            bindings = bindings
  918|     51|                .into_iter()
  919|     51|                .map(|binding| {
  920|       |                    binding
  921|       |                        .into_iter()
  922|       |                        .enumerate()
  923|       |                        .filter_map(|(i, v)| {
  924|       |                            if empty_rows.contains(&i) {
  925|       |                                None
  926|       |                            } else {
  927|       |                                Some(v)
  928|       |                            }
  929|       |                        })
  930|       |                        .collect()
  931|     51|                })
  932|     51|                .collect();
  933|  1.36k|        }
  934|  1.42k|        Self::Values {
  935|  1.42k|            variables,
  936|  1.42k|            bindings,
  937|  1.42k|        }
  938|  1.42k|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern4join:
  758|  24.8k|    pub fn join(left: Self, right: Self, algorithm: JoinAlgorithm) -> Self {
  759|  24.8k|        if left.is_empty() || right.is_empty() {
  760|     28|            return Self::empty();
  761|  24.7k|        }
  762|  24.7k|        if left.is_empty_singleton() {
  763|    136|            return right;
  764|  24.6k|        }
  765|  24.6k|        if right.is_empty_singleton() {
  766|      2|            return left;
  767|  24.6k|        }
  768|  24.6k|        Self::Join {
  769|  24.6k|            left: Box::new(left),
  770|  24.6k|            right: Box::new(right),
  771|  24.6k|            algorithm,
  772|  24.6k|        }
  773|  24.8k|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern6filter:
  858|  26.8k|    pub fn filter(inner: Self, expression: Expression) -> Self {
  859|  26.8k|        if inner.is_empty() {
  860|     48|            return Self::empty();
  861|  26.8k|        }
  862|       |        // We unwrap singleton And
  863|  26.8k|        let expression = match expression {
  864|     16|            Expression::And(mut l) if l.len() == 1 => l.pop().unwrap(),
  865|  26.8k|            e => e,
  866|       |        };
  867|  26.8k|        match expression.effective_boolean_value() {
  868|  26.7k|            Some(true) => inner,
  869|      0|            Some(false) => Self::empty(),
  870|     75|            None => match inner {
  871|       |                Self::Filter {
  872|      0|                    inner,
  873|      0|                    expression: e2,
  874|      0|                } => Self::Filter {
  875|      0|                    inner,
  876|      0|                    expression: expression & e2,
  877|      0|                },
  878|     75|                _ => Self::Filter {
  879|     75|                    inner: Box::new(inner),
  880|     75|                    expression,
  881|     75|                },
  882|       |            },
  883|       |        }
  884|  26.8k|    }
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression9same_term:
  137|      3|    pub fn same_term(left: Self, right: Self) -> Self {
  138|      3|        match (left, right) {
  139|      0|            (Self::NamedNode(left), Self::NamedNode(right)) => (left == right).into(),
  140|      0|            (Self::Literal(left), Self::Literal(right)) if left == right => true.into(),
  141|      3|            (left, right) => {
  142|      3|                let (left, right) = order_pair(left, right);
  143|      3|                Self::SameTerm(Box::new(left), Box::new(right))
  144|       |            }
  145|       |        }
  146|      3|    }
_RNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB2_10Expression6exists:
  168|     68|    pub fn exists(inner: GraphPattern) -> Self {
  169|     68|        if inner.is_empty() {
  170|      0|            return false.into();
  171|     68|        }
  172|     68|        if inner.is_empty_singleton() {
  173|      2|            return true.into();
  174|     66|        }
  175|     66|        Self::Exists(Box::new(inner))
  176|     68|    }
_RNvXsn_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_14MinusAlgorithmNtNtCs9nhK3FOW46N_4core7default7Default7default:
 1531|     40|    fn default() -> Self {
 1532|     40|        Self::HashBuildRightProbeLeft {
 1533|     40|            keys: Vec::default(),
 1534|     40|        }
 1535|     40|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern5group:
  992|     24|    pub fn group(
  993|     24|        inner: Self,
  994|     24|        variables: Vec<Variable>,
  995|     24|        aggregates: Vec<(Variable, AggregateExpression)>,
  996|     24|    ) -> Self {
  997|     24|        if inner.is_empty() {
  998|      0|            return Self::empty();
  999|     24|        }
 1000|     24|        Self::Group {
 1001|     24|            inner: Box::new(inner),
 1002|     24|            variables,
 1003|     24|            aggregates,
 1004|     24|        }
 1005|     24|    }
_RNvXsd_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_10ExpressionNtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3add:
  596|    135|    fn add(self, rhs: Self) -> Self {
  597|    135|        let (left, right) = order_pair(self, rhs);
  598|    135|        Self::Add(Box::new(left), Box::new(right))
  599|    135|    }
_RNvXsf_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_10ExpressionNtNtNtCs9nhK3FOW46N_4core3ops5arith3Mul3mul:
  613|    293|    fn mul(self, rhs: Self) -> Self {
  614|    293|        let (left, right) = order_pair(self, rhs);
  615|    293|        Self::Multiply(Box::new(left), Box::new(right))
  616|    293|    }
_RNvXsh_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_10ExpressionNtNtNtCs9nhK3FOW46N_4core3ops5arith3Neg3neg:
  630|  1.08k|    fn neg(self) -> Self {
  631|  1.08k|        Self::UnaryMinus(Box::new(self))
  632|  1.08k|    }
_RNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB5_12GraphPattern25term_pattern_from_algebra:
 1288|   100k|    fn term_pattern_from_algebra(
 1289|   100k|        pattern: &TermPattern,
 1290|   100k|        blank_nodes: &mut HashMap<BlankNode, Variable>,
 1291|   100k|    ) -> GroundTermPattern {
 1292|   100k|        match pattern {
 1293|  9.03k|            TermPattern::NamedNode(node) => node.clone().into(),
 1294|  72.6k|            TermPattern::BlankNode(node) => blank_nodes
 1295|  72.6k|                .entry(node.clone())
 1296|  72.6k|                .or_insert_with(new_var)
 1297|  72.6k|                .clone()
 1298|  72.6k|                .into(),
 1299|  1.32k|            TermPattern::Literal(literal) => literal.clone().into(),
 1300|       |            #[cfg(feature = "rdf-star")]
 1301|      0|            TermPattern::Triple(pattern) => {
 1302|      0|                let (subject, predicate, object) =
 1303|      0|                    Self::triple_pattern_from_algebra(pattern, blank_nodes);
 1304|      0|                GroundTriplePattern {
 1305|      0|                    subject,
 1306|      0|                    predicate,
 1307|      0|                    object,
 1308|      0|                }
 1309|      0|                .into()
 1310|       |            }
 1311|  17.2k|            TermPattern::Variable(variable) => variable.clone().into(),
 1312|       |        }
 1313|   100k|    }
_RNCNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB7_12GraphPattern19from_sparql_algebra0B9_:
 1122|  37.9k|                .map(|p| {
 1123|  37.9k|                    let (subject, predicate, object) =
 1124|  37.9k|                        Self::triple_pattern_from_algebra(p, blank_nodes);
 1125|  37.9k|                    Self::QuadPattern {
 1126|  37.9k|                        subject,
 1127|  37.9k|                        predicate,
 1128|  37.9k|                        object,
 1129|  37.9k|                        graph_name: graph_name.cloned(),
 1130|  37.9k|                    }
 1131|  37.9k|                })
_RNCINvNtCsftsRMVBFYTr_7sparopt7algebra9order_vecNtB4_10ExpressionE0B6_:
 1637|    380|    vec.sort_unstable_by_key(|a| hash(a));
_RNCNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB7_12GraphPattern18is_empty_singleton0B9_:
  752|    542|            bindings.len() == 1 && bindings.iter().all(|b| b.iter().all(Option::is_none))
_RINvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB6_12GraphPattern9union_allINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBC_ENCNvMNtB8_9optimizerNtB2Q_9Optimizer12push_filterss_0EEB8_:
  836|     19|    pub fn union_all(args: impl IntoIterator<Item = Self>) -> Self {
  837|     19|        let args = args.into_iter();
  838|     19|        let mut all = Vec::with_capacity(args.size_hint().0);
  839|     57|        for arg in args {
  840|     38|            if arg.is_empty() {
  841|      0|                continue;
  842|     38|            }
  843|     38|            if let Self::Union { inner } = arg {
  844|      0|                all.extend(inner);
  845|     38|            } else {
  846|     38|                all.push(arg);
  847|     38|            }
  848|       |        }
  849|     19|        if all.is_empty() {
  850|      0|            Self::empty()
  851|       |        } else {
  852|     19|            Self::Union {
  853|     19|                inner: order_vec(all),
  854|     19|            }
  855|       |        }
  856|     19|    }
_RINvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB6_12GraphPattern9union_allINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBC_ENCNvMNtB8_9optimizerNtB2Q_9Optimizer13reorder_joinss7_0EEB8_:
  836|     10|    pub fn union_all(args: impl IntoIterator<Item = Self>) -> Self {
  837|     10|        let args = args.into_iter();
  838|     10|        let mut all = Vec::with_capacity(args.size_hint().0);
  839|     30|        for arg in args {
  840|     20|            if arg.is_empty() {
  841|      0|                continue;
  842|     20|            }
  843|     20|            if let Self::Union { inner } = arg {
  844|      0|                all.extend(inner);
  845|     20|            } else {
  846|     20|                all.push(arg);
  847|     20|            }
  848|       |        }
  849|     10|        if all.is_empty() {
  850|      0|            Self::empty()
  851|       |        } else {
  852|     10|            Self::Union {
  853|     10|                inner: order_vec(all),
  854|     10|            }
  855|       |        }
  856|     10|    }
_RNCNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB4_10Expression19from_sparql_algebras_0B6_:
  353|     16|                    .map(|e| Self::from_sparql_algebra(e, graph_name))
_RINvMNtCsftsRMVBFYTr_7sparopt7algebraNtB3_10Expression7and_allINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBz_ENCNvMNtB5_9optimizerNtB2J_9Optimizer20normalize_expressions_0EEB5_:
   97|    137|    pub fn and_all(args: impl IntoIterator<Item = Self>) -> Self {
   98|    137|        let args = args.into_iter();
   99|    137|        let mut all = Vec::with_capacity(args.size_hint().0);
  100|    411|        for arg in args {
  101|    274|            if let Some(ebv) = arg.effective_boolean_value() {
  102|      0|                if !ebv {
  103|      0|                    return false.into();
  104|      0|                }
  105|       |                // We ignore true values
  106|    274|            } else if let Self::And(args) = arg {
  107|     23|                all.extend(args);
  108|    251|            } else {
  109|    251|                all.push(arg);
  110|    251|            }
  111|       |        }
  112|    137|        match all.len() {
  113|      0|            0 => true.into(),
  114|       |            1 => {
  115|      0|                let result = all.pop().unwrap();
  116|      0|                if result.returns_boolean() {
  117|      0|                    result
  118|       |                } else {
  119|      0|                    Self::And(vec![result])
  120|       |                }
  121|       |            }
  122|    137|            _ => Self::And(order_vec(all)),
  123|       |        }
  124|    137|    }
_RINvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB6_12GraphPattern9union_allINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBC_ENCNvMNtB8_9optimizerNtB2Q_9Optimizer17normalize_pattern0EEB8_:
  836|     19|    pub fn union_all(args: impl IntoIterator<Item = Self>) -> Self {
  837|     19|        let args = args.into_iter();
  838|     19|        let mut all = Vec::with_capacity(args.size_hint().0);
  839|     57|        for arg in args {
  840|     38|            if arg.is_empty() {
  841|      0|                continue;
  842|     38|            }
  843|     38|            if let Self::Union { inner } = arg {
  844|      0|                all.extend(inner);
  845|     38|            } else {
  846|     38|                all.push(arg);
  847|     38|            }
  848|       |        }
  849|     19|        if all.is_empty() {
  850|      0|            Self::empty()
  851|       |        } else {
  852|     19|            Self::Union {
  853|     19|                inner: order_vec(all),
  854|     19|            }
  855|       |        }
  856|     19|    }
_RNCNCNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB9_12GraphPattern6values00Bb_:
  902|  2.43k|            .filter(|row| !bindings.iter().any(|binding| binding.get(*row).is_some()))
_RINvNtCsftsRMVBFYTr_7sparopt7algebra9order_vecNtB2_10ExpressionEB4_:
 1636|    157|fn order_vec<T: Hash>(mut vec: Vec<T>) -> Vec<T> {
 1637|    157|    vec.sort_unstable_by_key(|a| hash(a));
 1638|    157|    vec
 1639|    157|}
_RINvNtCsftsRMVBFYTr_7sparopt7algebra9order_vecNtB2_12GraphPatternEB4_:
 1636|     48|fn order_vec<T: Hash>(mut vec: Vec<T>) -> Vec<T> {
 1637|     48|    vec.sort_unstable_by_key(|a| hash(a));
 1638|     48|    vec
 1639|     48|}
_RINvNtCsftsRMVBFYTr_7sparopt7algebra4hashRNtB2_12GraphPatternEB4_:
 1641|     96|fn hash(v: impl Hash) -> u64 {
 1642|     96|    let mut hasher = DefaultHasher::new();
 1643|     96|    v.hash(&mut hasher);
 1644|     96|    hasher.finish()
 1645|     96|}
_RNCNvXs9_NtCsftsRMVBFYTr_7sparopt7algebraNtNtCsBlCKulpTva_9spargebra7algebra10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromRNtB7_10ExpressionE4from0B9_:
  494|     38|                .reduce(|a, b| Self::Or(Box::new(a), Box::new(b)))
_RNCNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB7_12GraphPattern6valuess_0B9_:
  909|    833|                .filter_map(|(i, v)| {
  910|    833|                    if empty_rows.contains(&i) {
  911|    833|                        None
  912|       |                    } else {
  913|      0|                        Some(v)
  914|       |                    }
  915|    833|                })
_RNCNvXs9_NtCsftsRMVBFYTr_7sparopt7algebraNtNtCsBlCKulpTva_9spargebra7algebra10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromRNtB7_10ExpressionE4froms0_0B9_:
  499|    288|                .reduce(|a, b| Self::And(Box::new(a), Box::new(b)))
_RINvXsF_NtCsftsRMVBFYTr_7sparopt7algebraNtB6_12GraphPatternNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
  636|  2.77k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNCNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB4_10Expression14used_variables0B6_:
  212|     49|        self.lookup_used_variables(&mut |v| {
  213|     49|            variables.insert(v);
  214|     49|        });
_RNCNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB7_12GraphPattern6values0B9_:
  902|  3.26k|            .filter(|row| !bindings.iter().any(|binding| binding.get(*row).is_some()))
_RINvXsy_NtCsftsRMVBFYTr_7sparopt7algebraNtB6_10ExpressionNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
   22|  25.8k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvXsM_NtCsftsRMVBFYTr_7sparopt7algebraNtB6_13JoinAlgorithmNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
 1497|  1.03k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNCNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB7_12GraphPattern19from_sparql_algebras_0B9_:
 1132|  28.4k|                .reduce(|a, b| Self::Join {
 1133|  28.4k|                    left: Box::new(a),
 1134|  28.4k|                    right: Box::new(b),
 1135|  28.4k|                    algorithm: JoinAlgorithm::default(),
 1136|  28.4k|                })
_RINvMNtCsftsRMVBFYTr_7sparopt7algebraNtB3_10Expression7and_allINtNtCsjOdcKtOMjJI_5alloc3vec3VecBz_EEB5_:
   97|  26.7k|    pub fn and_all(args: impl IntoIterator<Item = Self>) -> Self {
   98|  26.7k|        let args = args.into_iter();
   99|  26.7k|        let mut all = Vec::with_capacity(args.size_hint().0);
  100|  26.8k|        for arg in args {
  101|     27|            if let Some(ebv) = arg.effective_boolean_value() {
  102|      0|                if !ebv {
  103|      0|                    return false.into();
  104|      0|                }
  105|       |                // We ignore true values
  106|     27|            } else if let Self::And(args) = arg {
  107|      0|                all.extend(args);
  108|     27|            } else {
  109|     27|                all.push(arg);
  110|     27|            }
  111|       |        }
  112|  26.7k|        match all.len() {
  113|  26.7k|            0 => true.into(),
  114|       |            1 => {
  115|     18|                let result = all.pop().unwrap();
  116|     18|                if result.returns_boolean() {
  117|     16|                    result
  118|       |                } else {
  119|      2|                    Self::And(vec![result])
  120|       |                }
  121|       |            }
  122|      4|            _ => Self::And(order_vec(all)),
  123|       |        }
  124|  26.7k|    }
_RINvNtCsftsRMVBFYTr_7sparopt7algebra10order_pairNtB2_10ExpressionEB4_:
 1628|    845|fn order_pair<T: Hash>(a: T, b: T) -> (T, T) {
 1629|    845|    if hash(&a) <= hash(&b) {
 1630|    612|        (a, b)
 1631|       |    } else {
 1632|    233|        (b, a)
 1633|       |    }
 1634|    845|}
_RNCNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB4_10Expression19from_sparql_algebra0B6_:
  306|     16|                            .map(|e| {
  307|     16|                                Self::Equal(
  308|     16|                                    Box::new(left.clone()),
  309|     16|                                    Box::new(Self::from_sparql_algebra(e, graph_name)),
  310|     16|                                )
  311|     16|                            })
_RNCINvNtCsftsRMVBFYTr_7sparopt7algebra9order_vecNtB4_12GraphPatternE0B6_:
 1637|     96|    vec.sort_unstable_by_key(|a| hash(a));
_RNCNvMNtCsftsRMVBFYTr_7sparopt7algebraNtB4_10Expression19from_sparql_algebras0_0B6_:
  359|     60|                    .map(|e| Self::from_sparql_algebra(e, graph_name))
_RINvMNtCsftsRMVBFYTr_7sparopt7algebraNtB3_10Expression21lookup_used_variablesNCNvB2_14used_variables0EB5_:
  218|  1.25k|    pub fn lookup_used_variables<'a>(&'a self, callback: &mut impl FnMut(&'a Variable)) {
  219|  1.25k|        match self {
  220|    430|            Self::NamedNode(_) | Self::Literal(_) => {}
  221|     49|            Self::Variable(v) | Self::Bound(v) => callback(v),
  222|      0|            Self::Or(inner)
  223|      1|            | Self::And(inner)
  224|      3|            | Self::Coalesce(inner)
  225|      0|            | Self::FunctionCall(_, inner) => {
  226|      6|                for i in inner {
  227|      2|                    i.lookup_used_variables(callback);
  228|      2|                }
  229|       |            }
  230|    108|            Self::Equal(a, b)
  231|      0|            | Self::SameTerm(a, b)
  232|      0|            | Self::Greater(a, b)
  233|      0|            | Self::GreaterOrEqual(a, b)
  234|      0|            | Self::Less(a, b)
  235|      0|            | Self::LessOrEqual(a, b)
  236|     42|            | Self::Add(a, b)
  237|     48|            | Self::Subtract(a, b)
  238|    125|            | Self::Multiply(a, b)
  239|    383|            | Self::Divide(a, b) => {
  240|    383|                a.lookup_used_variables(callback);
  241|    383|                b.lookup_used_variables(callback);
  242|    383|            }
  243|    314|            Self::UnaryPlus(i) | Self::UnaryMinus(i) | Self::Not(i) => {
  244|    386|                i.lookup_used_variables(callback)
  245|       |            }
  246|      0|            Self::Exists(e) => e.lookup_used_variables(callback),
  247|      1|            Self::If(a, b, c) => {
  248|      1|                a.lookup_used_variables(callback);
  249|      1|                b.lookup_used_variables(callback);
  250|      1|                c.lookup_used_variables(callback);
  251|      1|            }
  252|       |        }
  253|  1.25k|    }
_RINvMNtCsftsRMVBFYTr_7sparopt7algebraNtB3_10Expression6or_allINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBz_ENCNvMNtB5_9optimizerNtB2I_9Optimizer20normalize_expression0EEB5_:
   68|     16|    pub fn or_all(args: impl IntoIterator<Item = Self>) -> Self {
   69|     16|        let args = args.into_iter();
   70|     16|        let mut all = Vec::with_capacity(args.size_hint().0);
   71|     48|        for arg in args {
   72|     32|            if let Some(ebv) = arg.effective_boolean_value() {
   73|      0|                if ebv {
   74|      0|                    return true.into();
   75|      0|                }
   76|       |                // We ignore false values
   77|     32|            } else if let Self::Or(args) = arg {
   78|      0|                all.extend(args);
   79|     32|            } else {
   80|     32|                all.push(arg);
   81|     32|            }
   82|       |        }
   83|     16|        match all.len() {
   84|      0|            0 => false.into(),
   85|       |            1 => {
   86|      0|                let result = all.pop().unwrap();
   87|      0|                if result.returns_boolean() {
   88|      0|                    result // It's already casted to boolean
   89|       |                } else {
   90|      0|                    Self::And(vec![result])
   91|       |                }
   92|       |            }
   93|     16|            _ => Self::Or(order_vec(all)),
   94|       |        }
   95|     16|    }
_RINvNtCsftsRMVBFYTr_7sparopt7algebra4hashRNtB2_10ExpressionEB4_:
 1641|  2.07k|fn hash(v: impl Hash) -> u64 {
 1642|  2.07k|    let mut hasher = DefaultHasher::new();
 1643|  2.07k|    v.hash(&mut hasher);
 1644|  2.07k|    hasher.finish()
 1645|  2.07k|}
_RNCNvMsi_NtCsftsRMVBFYTr_7sparopt7algebraNtB7_12GraphPattern19from_sparql_algebras0_0B9_:
 1161|    446|                    || true.into(),

_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss3_0B6_:
  525|   490k|                        .map(|(i, _)| i)
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss5_0B6_:
  529|   269k|                        .min_by_key(|i| {
  530|   269k|                            // Estimation of the join cost
  531|   269k|                            if cfg!(feature = "sep-0006")
  532|   269k|                                && is_fit_for_for_loop_join(
  533|   269k|                                    &to_reorder[*i],
  534|   269k|                                    input_types,
  535|   269k|                                    &output_types,
  536|   269k|                                )
  537|       |                            {
  538|   269k|                                estimate_lateral_cost(
  539|   269k|                                    &output,
  540|   269k|                                    &output_types,
  541|   269k|                                    &to_reorder[*i],
  542|   269k|                                    input_types,
  543|   269k|                                )
  544|       |                            } else {
  545|     39|                                estimate_join_cost(
  546|     39|                                    &output,
  547|     39|                                    &to_reorder[*i],
  548|     39|                                    &JoinAlgorithm::HashBuildLeftProbeRight {
  549|     39|                                        keys: join_key_variables(
  550|     39|                                            &output_types,
  551|     39|                                            &to_reorder_types[*i],
  552|     39|                                            input_types,
  553|     39|                                        ),
  554|     39|                                    },
  555|     39|                                    input_types,
  556|     39|                                )
  557|       |                            }
  558|   269k|                        })
_RNCNvNtCsftsRMVBFYTr_7sparopt9optimizer18join_key_variables0B5_:
  886|  2.75k|        .filter(|(variable, left_type)| {
  887|  2.75k|            !left_type.undef && !right.get(variable).undef && input_types.get(variable).undef
  888|  2.75k|        })
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss7_0B6_:
  696|     20|                    .map(|c| Self::reorder_joins(c, input_types)),
_RNCNvNtCsftsRMVBFYTr_7sparopt9optimizer24is_fit_for_for_loop_join0B5_:
  760|    188|            if right_types.iter().any(|(variable, t)| {
  761|    188|                *t != VariableType::UNDEF
  762|    188|                    && left_types.get(variable).undef
  763|    175|                    && entry_types.get(variable) != VariableType::UNDEF
  764|    188|            }) {
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer17normalize_pattern0B6_:
   93|     38|                    .map(|e| Self::normalize_pattern(e, input_types)),
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss0_0B6_:
  514|  28.7k|                    .map(|(i, _)| i)
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer20normalize_expression0B6_:
  184|     32|                    .map(|e| Self::normalize_expression(e, types)),
_RNCNvNtCsftsRMVBFYTr_7sparopt9optimizer34are_all_expression_variables_bound0B5_:
  815|     42|        .all(|v| !variable_types.get(v).undef)
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer13reorder_joins0B6_:
  503|  24.0k|                    .map(|p| infer_graph_pattern_types(p, input_types.clone()))
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss4_0B6_:
  526|   490k|                        .filter(|i| {
  527|   490k|                            has_common_variables(&output_types, &to_reorder_types[*i], input_types)
  528|   490k|                        })
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer20normalize_expressions0_0B6_:
  264|      8|                    .map(|e| Self::normalize_expression(e, types))
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss_0B6_:
  513|  57.0k|                    .filter(|(_, v)| **v)
_RNCNvNtCsftsRMVBFYTr_7sparopt9optimizer24is_fit_for_for_loop_joins_0B5_:
  774|      6|            .all(|i| is_fit_for_for_loop_join(i, global_input_types, entry_types)),
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss1_0B6_:
  515|  28.7k|                    .min_by_key(|i| estimate_graph_pattern_size(&to_reorder[*i], input_types))
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss2_0B6_:
  524|  1.00M|                        .filter(|(_, v)| **v)
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer20normalize_expressions1_0B6_:
  270|     30|                    .map(|e| Self::normalize_expression(e, types))
_RNCNvNtCsftsRMVBFYTr_7sparopt9optimizer18join_key_variabless_0B5_:
  889|     67|        .map(|(variable, _)| variable.clone())
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss6_0B6_:
  601|    590|                    .reduce(|left, right| {
  602|    590|                        let keys = join_key_variables(
  603|    590|                            &infer_graph_pattern_types(&left, input_types.clone()),
  604|    590|                            &infer_graph_pattern_types(&right, input_types.clone()),
  605|    590|                            input_types,
  606|    590|                        );
  607|    590|                        if estimate_graph_pattern_size(&left, input_types)
  608|    590|                            <= estimate_graph_pattern_size(&right, input_types)
  609|       |                        {
  610|    478|                            GraphPattern::join(
  611|    478|                                left,
  612|    478|                                right,
  613|    478|                                JoinAlgorithm::HashBuildLeftProbeRight { keys },
  614|    478|                            )
  615|       |                        } else {
  616|    112|                            GraphPattern::join(
  617|    112|                                right,
  618|    112|                                left,
  619|    112|                                JoinAlgorithm::HashBuildLeftProbeRight { keys },
  620|    112|                            )
  621|       |                        }
  622|    590|                    })
_RNCNvNtCsftsRMVBFYTr_7sparopt9optimizer27estimate_graph_pattern_size0B5_:
  949|    108|            .map(|inner| estimate_graph_pattern_size(inner, input_types))
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer12push_filterss_0B6_:
  432|     38|                    .map(|c| Self::push_filters(c, filters.clone(), input_types)),
_RNCNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB4_9Optimizer20normalize_expressions_0B6_:
  189|    274|                    .map(|e| Self::normalize_expression(e, types)),
_RNCNvNtCsftsRMVBFYTr_7sparopt9optimizer20has_common_variables0B5_:
  875|  5.78M|    left.iter().any(|(variable, left_type)| {
  876|  5.78M|        !left_type.undef && !right.get(variable).undef && input_types.get(variable).undef
  877|  5.78M|    })
_RNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB2_9Optimizer17normalize_pattern:
   22|  55.0k|    fn normalize_pattern(pattern: GraphPattern, input_types: &VariableTypes) -> GraphPattern {
   23|  55.0k|        match pattern {
   24|       |            GraphPattern::QuadPattern {
   25|  18.9k|                subject,
   26|  18.9k|                predicate,
   27|  18.9k|                object,
   28|  18.9k|                graph_name,
   29|  18.9k|            } => GraphPattern::QuadPattern {
   30|  18.9k|                subject,
   31|  18.9k|                predicate,
   32|  18.9k|                object,
   33|  18.9k|                graph_name,
   34|  18.9k|            },
   35|       |            GraphPattern::Path {
   36|  6.08k|                subject,
   37|  6.08k|                path,
   38|  6.08k|                object,
   39|  6.08k|                graph_name,
   40|  6.08k|            } => GraphPattern::Path {
   41|  6.08k|                subject,
   42|  6.08k|                path,
   43|  6.08k|                object,
   44|  6.08k|                graph_name,
   45|  6.08k|            },
   46|       |            GraphPattern::Join {
   47|  23.4k|                left,
   48|  23.4k|                right,
   49|  23.4k|                algorithm,
   50|  23.4k|            } => GraphPattern::join(
   51|  23.4k|                Self::normalize_pattern(*left, input_types),
   52|  23.4k|                Self::normalize_pattern(*right, input_types),
   53|  23.4k|                algorithm,
   54|  23.4k|            ),
   55|       |            GraphPattern::LeftJoin {
   56|    223|                left,
   57|    223|                right,
   58|    223|                expression,
   59|    223|                algorithm,
   60|    223|            } => {
   61|    223|                let left = Self::normalize_pattern(*left, input_types);
   62|    223|                let right = Self::normalize_pattern(*right, input_types);
   63|    223|                let mut inner_types = infer_graph_pattern_types(&left, input_types.clone());
   64|    223|                inner_types.intersect_with(infer_graph_pattern_types(&right, input_types.clone()));
   65|    223|                GraphPattern::left_join(
   66|    223|                    left,
   67|    223|                    right,
   68|    223|                    Self::normalize_expression(expression, &inner_types),
   69|    223|                    algorithm,
   70|    223|                )
   71|       |            }
   72|       |            #[cfg(feature = "sep-0006")]
   73|    272|            GraphPattern::Lateral { left, right } => {
   74|    272|                let left = Self::normalize_pattern(*left, input_types);
   75|    272|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
   76|    272|                let right = Self::normalize_pattern(*right, &left_types);
   77|    272|                GraphPattern::lateral(left, right)
   78|       |            }
   79|     22|            GraphPattern::Filter { inner, expression } => {
   80|     22|                let inner = Self::normalize_pattern(*inner, input_types);
   81|     22|                let inner_types = infer_graph_pattern_types(&inner, input_types.clone());
   82|     22|                let expression = Self::normalize_expression(expression, &inner_types);
   83|     22|                let expression_type = infer_expression_type(&expression, &inner_types);
   84|     22|                if expression_type == VariableType::UNDEF {
   85|      0|                    GraphPattern::empty()
   86|       |                } else {
   87|     22|                    GraphPattern::filter(inner, expression)
   88|       |                }
   89|       |            }
   90|     19|            GraphPattern::Union { inner } => GraphPattern::union_all(
   91|     19|                inner
   92|     19|                    .into_iter()
   93|     19|                    .map(|e| Self::normalize_pattern(e, input_types)),
   94|     19|            ),
   95|       |            GraphPattern::Extend {
   96|    302|                inner,
   97|    302|                variable,
   98|    302|                expression,
   99|    302|            } => {
  100|    302|                let inner = Self::normalize_pattern(*inner, input_types);
  101|    302|                let inner_types = infer_graph_pattern_types(&inner, input_types.clone());
  102|    302|                let expression = Self::normalize_expression(expression, &inner_types);
  103|    302|                let expression_type = infer_expression_type(&expression, &inner_types);
  104|    302|                if expression_type == VariableType::UNDEF {
  105|       |                    // TODO: valid?
  106|      1|                    inner
  107|       |                } else {
  108|    301|                    GraphPattern::extend(inner, variable, expression)
  109|       |                }
  110|       |            }
  111|       |            GraphPattern::Minus {
  112|     20|                left,
  113|     20|                right,
  114|     20|                algorithm,
  115|     20|            } => GraphPattern::minus(
  116|     20|                Self::normalize_pattern(*left, input_types),
  117|     20|                Self::normalize_pattern(*right, input_types),
  118|     20|                algorithm,
  119|     20|            ),
  120|       |            GraphPattern::Values {
  121|  1.42k|                variables,
  122|  1.42k|                bindings,
  123|  1.42k|            } => GraphPattern::values(variables, bindings),
  124|      0|            GraphPattern::OrderBy { inner, expression } => {
  125|      0|                let inner = Self::normalize_pattern(*inner, input_types);
  126|      0|                let inner_types = infer_graph_pattern_types(&inner, input_types.clone());
  127|      0|                GraphPattern::order_by(
  128|      0|                    inner,
  129|      0|                    expression
  130|      0|                        .into_iter()
  131|      0|                        .map(|e| match e {
  132|       |                            OrderExpression::Asc(e) => {
  133|       |                                OrderExpression::Asc(Self::normalize_expression(e, &inner_types))
  134|       |                            }
  135|       |                            OrderExpression::Desc(e) => {
  136|       |                                OrderExpression::Desc(Self::normalize_expression(e, &inner_types))
  137|       |                            }
  138|      0|                        })
  139|      0|                        .collect(),
  140|      0|                )
  141|       |            }
  142|  1.03k|            GraphPattern::Project { inner, variables } => {
  143|  1.03k|                GraphPattern::project(Self::normalize_pattern(*inner, input_types), variables)
  144|       |            }
  145|    795|            GraphPattern::Distinct { inner } => {
  146|    795|                GraphPattern::distinct(Self::normalize_pattern(*inner, input_types))
  147|       |            }
  148|  2.48k|            GraphPattern::Reduced { inner } => {
  149|  2.48k|                GraphPattern::reduced(Self::normalize_pattern(*inner, input_types))
  150|       |            }
  151|       |            GraphPattern::Slice {
  152|      0|                inner,
  153|      0|                start,
  154|      0|                length,
  155|      0|            } => GraphPattern::slice(Self::normalize_pattern(*inner, input_types), start, length),
  156|       |            GraphPattern::Group {
  157|      8|                inner,
  158|      8|                variables,
  159|      8|                aggregates,
  160|      8|            } => {
  161|      8|                // TODO: min, max and sample don't care about DISTINCT
  162|      8|                GraphPattern::group(
  163|      8|                    Self::normalize_pattern(*inner, input_types),
  164|      8|                    variables,
  165|      8|                    aggregates,
  166|      8|                )
  167|       |            }
  168|       |            GraphPattern::Service {
  169|      0|                name,
  170|      0|                inner,
  171|      0|                silent,
  172|      0|            } => GraphPattern::service(Self::normalize_pattern(*inner, input_types), name, silent),
  173|       |        }
  174|  55.0k|    }
_RNvNtCsftsRMVBFYTr_7sparopt9optimizer21estimate_lateral_cost:
  989|  6.97M|fn estimate_lateral_cost(
  990|  6.97M|    left: &GraphPattern,
  991|  6.97M|    left_types: &VariableTypes,
  992|  6.97M|    right: &GraphPattern,
  993|  6.97M|    input_types: &VariableTypes,
  994|  6.97M|) -> usize {
  995|  6.97M|    estimate_graph_pattern_size(left, input_types)
  996|  6.97M|        .saturating_mul(estimate_graph_pattern_size(right, left_types))
  997|  6.97M|}
_RNvNtCsftsRMVBFYTr_7sparopt9optimizer35is_expression_fit_for_for_loop_join:
  828|     21|fn is_expression_fit_for_for_loop_join(
  829|     21|    expression: &Expression,
  830|     21|    input_types: &VariableTypes,
  831|     21|    entry_types: &VariableTypes,
  832|     21|) -> bool {
  833|     21|    match expression {
  834|     21|        Expression::NamedNode(_) | Expression::Literal(_) => true,
  835|      0|        Expression::Variable(v) | Expression::Bound(v) => {
  836|      0|            !input_types.get(v).undef || entry_types.get(v) == VariableType::UNDEF
  837|       |        }
  838|      0|        Expression::Or(inner)
  839|      0|        | Expression::And(inner)
  840|      0|        | Expression::Coalesce(inner)
  841|      0|        | Expression::FunctionCall(_, inner) => inner
  842|      0|            .iter()
  843|      0|            .all(|e| is_expression_fit_for_for_loop_join(e, input_types, entry_types)),
  844|      0|        Expression::Equal(a, b)
  845|      0|        | Expression::SameTerm(a, b)
  846|      0|        | Expression::Greater(a, b)
  847|      0|        | Expression::GreaterOrEqual(a, b)
  848|      0|        | Expression::Less(a, b)
  849|      0|        | Expression::LessOrEqual(a, b)
  850|      0|        | Expression::Add(a, b)
  851|      0|        | Expression::Subtract(a, b)
  852|      0|        | Expression::Multiply(a, b)
  853|      0|        | Expression::Divide(a, b) => {
  854|      0|            is_expression_fit_for_for_loop_join(a, input_types, entry_types)
  855|      0|                && is_expression_fit_for_for_loop_join(b, input_types, entry_types)
  856|       |        }
  857|      0|        Expression::UnaryPlus(e) | Expression::UnaryMinus(e) | Expression::Not(e) => {
  858|      0|            is_expression_fit_for_for_loop_join(e, input_types, entry_types)
  859|       |        }
  860|      0|        Expression::If(a, b, c) => {
  861|      0|            is_expression_fit_for_for_loop_join(a, input_types, entry_types)
  862|      0|                && is_expression_fit_for_for_loop_join(b, input_types, entry_types)
  863|      0|                && is_expression_fit_for_for_loop_join(c, input_types, entry_types)
  864|       |        }
  865|      0|        Expression::Exists(inner) => is_fit_for_for_loop_join(inner, input_types, entry_types),
  866|       |    }
  867|     21|}
_RNvNtCsftsRMVBFYTr_7sparopt9optimizer18estimate_path_size:
 1016|  9.54G|fn estimate_path_size(start_bound: bool, path: &PropertyPathExpression, end_bound: bool) -> usize {
 1017|  9.54G|    match path {
 1018|       |        PropertyPathExpression::NamedNode(_) => {
 1019|  2.02G|            estimate_triple_pattern_size(start_bound, true, end_bound)
 1020|       |        }
 1021|  2.79G|        PropertyPathExpression::Reverse(p) => estimate_path_size(end_bound, p, start_bound),
 1022|  1.14G|        PropertyPathExpression::Sequence(a, b) => {
 1023|  1.14G|            // We do a for loop join in the best direction
 1024|  1.14G|            min(
 1025|  1.14G|                estimate_path_size(start_bound, a, false)
 1026|  1.14G|                    .saturating_mul(estimate_path_size(true, b, end_bound)),
 1027|  1.14G|                estimate_path_size(start_bound, a, true)
 1028|  1.14G|                    .saturating_mul(estimate_path_size(false, b, end_bound)),
 1029|  1.14G|            )
 1030|       |        }
 1031|   350M|        PropertyPathExpression::Alternative(a, b) => estimate_path_size(start_bound, a, end_bound)
 1032|   350M|            .saturating_add(estimate_path_size(start_bound, b, end_bound)),
 1033|   102M|        PropertyPathExpression::ZeroOrMore(p) => {
 1034|   102M|            if start_bound && end_bound {
 1035|  26.2M|                1
 1036|  76.5M|            } else if start_bound || end_bound {
 1037|  51.4M|                estimate_path_size(start_bound, p, end_bound).saturating_mul(1000)
 1038|       |            } else {
 1039|  25.1M|                1_000_000_000
 1040|       |            }
 1041|       |        }
 1042|   568M|        PropertyPathExpression::OneOrMore(p) => {
 1043|   568M|            if start_bound && end_bound {
 1044|   142M|                1
 1045|       |            } else {
 1046|   426M|                estimate_path_size(start_bound, p, end_bound).saturating_mul(1000)
 1047|       |            }
 1048|       |        }
 1049|  1.96G|        PropertyPathExpression::ZeroOrOne(p) => {
 1050|  1.96G|            if start_bound && end_bound {
 1051|   482M|                1
 1052|  1.48G|            } else if start_bound || end_bound {
 1053|   984M|                estimate_path_size(start_bound, p, end_bound)
 1054|       |            } else {
 1055|   500M|                1_000_000_000
 1056|       |            }
 1057|       |        }
 1058|       |        PropertyPathExpression::NegatedPropertySet(_) => {
 1059|   584M|            estimate_triple_pattern_size(start_bound, false, end_bound)
 1060|       |        }
 1061|       |    }
 1062|  9.54G|}
_RNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB2_9Optimizer20normalize_expression:
  176|  11.1k|    fn normalize_expression(expression: Expression, types: &VariableTypes) -> Expression {
  177|  11.1k|        match expression {
  178|    297|            Expression::NamedNode(node) => node.into(),
  179|  1.92k|            Expression::Literal(literal) => literal.into(),
  180|  2.22k|            Expression::Variable(variable) => variable.into(),
  181|     16|            Expression::Or(inner) => Expression::or_all(
  182|     16|                inner
  183|     16|                    .into_iter()
  184|     16|                    .map(|e| Self::normalize_expression(e, types)),
  185|     16|            ),
  186|    137|            Expression::And(inner) => Expression::and_all(
  187|    137|                inner
  188|    137|                    .into_iter()
  189|    137|                    .map(|e| Self::normalize_expression(e, types)),
  190|    137|            ),
  191|    420|            Expression::Equal(left, right) => {
  192|    420|                let left = Self::normalize_expression(*left, types);
  193|    420|                let left_types = infer_expression_type(&left, types);
  194|    420|                let right = Self::normalize_expression(*right, types);
  195|    420|                let right_types = infer_expression_type(&right, types);
  196|       |                #[allow(unused_mut)]
  197|    420|                let mut must_use_equal = left_types.literal && right_types.literal;
  198|       |                #[cfg(feature = "rdf-star")]
  199|       |                {
  200|    420|                    must_use_equal = must_use_equal || left_types.triple && right_types.triple;
  201|       |                }
  202|    420|                if must_use_equal {
  203|    417|                    Expression::equal(left, right)
  204|       |                } else {
  205|      3|                    Expression::same_term(left, right)
  206|       |                }
  207|       |            }
  208|      0|            Expression::SameTerm(left, right) => Expression::same_term(
  209|      0|                Self::normalize_expression(*left, types),
  210|      0|                Self::normalize_expression(*right, types),
  211|      0|            ),
  212|     18|            Expression::Greater(left, right) => Expression::greater(
  213|     18|                Self::normalize_expression(*left, types),
  214|     18|                Self::normalize_expression(*right, types),
  215|     18|            ),
  216|     75|            Expression::GreaterOrEqual(left, right) => Expression::greater_or_equal(
  217|     75|                Self::normalize_expression(*left, types),
  218|     75|                Self::normalize_expression(*right, types),
  219|     75|            ),
  220|      7|            Expression::Less(left, right) => Expression::less(
  221|      7|                Self::normalize_expression(*left, types),
  222|      7|                Self::normalize_expression(*right, types),
  223|      7|            ),
  224|     15|            Expression::LessOrEqual(left, right) => Expression::less_or_equal(
  225|     15|                Self::normalize_expression(*left, types),
  226|     15|                Self::normalize_expression(*right, types),
  227|     15|            ),
  228|    135|            Expression::Add(left, right) => {
  229|    135|                Self::normalize_expression(*left, types) + Self::normalize_expression(*right, types)
  230|       |            }
  231|    828|            Expression::Subtract(left, right) => {
  232|    828|                Self::normalize_expression(*left, types) - Self::normalize_expression(*right, types)
  233|       |            }
  234|    293|            Expression::Multiply(left, right) => {
  235|    293|                Self::normalize_expression(*left, types) * Self::normalize_expression(*right, types)
  236|       |            }
  237|  1.56k|            Expression::Divide(left, right) => {
  238|  1.56k|                Self::normalize_expression(*left, types) / Self::normalize_expression(*right, types)
  239|       |            }
  240|    157|            Expression::UnaryPlus(inner) => {
  241|    157|                Expression::unary_plus(Self::normalize_expression(*inner, types))
  242|       |            }
  243|  1.08k|            Expression::UnaryMinus(inner) => -Self::normalize_expression(*inner, types),
  244|  1.23k|            Expression::Not(inner) => !Self::normalize_expression(*inner, types),
  245|     68|            Expression::Exists(inner) => Expression::exists(Self::normalize_pattern(*inner, types)),
  246|    194|            Expression::Bound(variable) => {
  247|    194|                let t = types.get(&variable);
  248|    194|                if !t.undef {
  249|     11|                    true.into()
  250|    183|                } else if t == VariableType::UNDEF {
  251|    183|                    false.into()
  252|       |                } else {
  253|      0|                    Expression::Bound(variable)
  254|       |                }
  255|       |            }
  256|    344|            Expression::If(cond, then, els) => Expression::if_cond(
  257|    344|                Self::normalize_expression(*cond, types),
  258|    344|                Self::normalize_expression(*then, types),
  259|    344|                Self::normalize_expression(*els, types),
  260|    344|            ),
  261|     40|            Expression::Coalesce(inners) => Expression::coalesce(
  262|     40|                inners
  263|     40|                    .into_iter()
  264|     40|                    .map(|e| Self::normalize_expression(e, types))
  265|     40|                    .collect(),
  266|     40|            ),
  267|     29|            Expression::FunctionCall(name, args) => Expression::call(
  268|     29|                name,
  269|     29|                args.into_iter()
  270|     29|                    .map(|e| Self::normalize_expression(e, types))
  271|     29|                    .collect(),
  272|     29|            ),
  273|       |        }
  274|  11.1k|    }
_RNvNtCsftsRMVBFYTr_7sparopt9optimizer34are_all_expression_variables_bound:
  808|     96|fn are_all_expression_variables_bound(
  809|     96|    expression: &Expression,
  810|     96|    variable_types: &VariableTypes,
  811|     96|) -> bool {
  812|     96|    expression
  813|     96|        .used_variables()
  814|     96|        .into_iter()
  815|     96|        .all(|v| !variable_types.get(v).undef)
  816|     96|}
_RNvNtCsftsRMVBFYTr_7sparopt9optimizer20has_common_variables:
  869|   490k|fn has_common_variables(
  870|   490k|    left: &VariableTypes,
  871|   490k|    right: &VariableTypes,
  872|   490k|    input_types: &VariableTypes,
  873|   490k|) -> bool {
  874|   490k|    // TODO: we should be smart and count as shared variables FILTER(?a = ?b)
  875|   490k|    left.iter().any(|(variable, left_type)| {
  876|       |        !left_type.undef && !right.get(variable).undef && input_types.get(variable).undef
  877|   490k|    })
  878|   490k|}
_RNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB2_9Optimizer22optimize_graph_pattern:
   15|  2.48k|    pub fn optimize_graph_pattern(pattern: GraphPattern) -> GraphPattern {
   16|  2.48k|        let pattern = Self::normalize_pattern(pattern, &VariableTypes::default());
   17|  2.48k|        let pattern = Self::reorder_joins(pattern, &VariableTypes::default());
   18|  2.48k|        Self::push_filters(pattern, Vec::new(), &VariableTypes::default())
   19|  2.48k|    }
_RNvNtCsftsRMVBFYTr_7sparopt9optimizer18join_key_variables:
  880|    792|fn join_key_variables(
  881|    792|    left: &VariableTypes,
  882|    792|    right: &VariableTypes,
  883|    792|    input_types: &VariableTypes,
  884|    792|) -> Vec<Variable> {
  885|    792|    left.iter()
  886|    792|        .filter(|(variable, left_type)| {
  887|       |            !left_type.undef && !right.get(variable).undef && input_types.get(variable).undef
  888|    792|        })
  889|    792|        .map(|(variable, _)| variable.clone())
  890|    792|        .collect()
  891|    792|}
_RNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB2_9Optimizer13reorder_joins:
  482|  7.30k|    fn reorder_joins(pattern: GraphPattern, input_types: &VariableTypes) -> GraphPattern {
  483|  7.30k|        match pattern {
  484|       |            GraphPattern::QuadPattern { .. }
  485|       |            | GraphPattern::Path { .. }
  486|  1.26k|            | GraphPattern::Values { .. } => pattern,
  487|  1.42k|            GraphPattern::Join { left, right, .. } => {
  488|  1.42k|                // We flatten the join operation
  489|  1.42k|                let mut to_reorder = Vec::new();
  490|  1.42k|                let mut todo = vec![*right, *left];
  491|  46.5k|                while let Some(e) = todo.pop() {
  492|  45.1k|                    if let GraphPattern::Join { left, right, .. } = e {
  493|  21.1k|                        todo.push(*right);
  494|  21.1k|                        todo.push(*left);
  495|  24.0k|                    } else {
  496|  24.0k|                        to_reorder.push(e);
  497|  24.0k|                    }
  498|       |                }
  499|       |
  500|       |                // We do first type inference
  501|  1.42k|                let to_reorder_types = to_reorder
  502|  1.42k|                    .iter()
  503|  1.42k|                    .map(|p| infer_graph_pattern_types(p, input_types.clone()))
  504|  1.42k|                    .collect::<Vec<_>>();
  505|  1.42k|
  506|  1.42k|                // We do greedy join reordering
  507|  1.42k|                let mut output_cartesian_product_joins = Vec::new();
  508|  1.42k|                let mut not_yet_reordered_ids = vec![true; to_reorder.len()];
  509|       |                // We look for the next connected component to reorder and pick the smallest element
  510|  3.44k|                while let Some(next_entry_id) = not_yet_reordered_ids
  511|  3.44k|                    .iter()
  512|  3.44k|                    .enumerate()
  513|  3.44k|                    .filter(|(_, v)| **v)
  514|  3.44k|                    .map(|(i, _)| i)
  515|  3.44k|                    .min_by_key(|i| estimate_graph_pattern_size(&to_reorder[*i], input_types))
  516|       |                {
  517|  2.01k|                    not_yet_reordered_ids[next_entry_id] = false; // It's now done
  518|  2.01k|                    let mut output = to_reorder[next_entry_id].clone();
  519|  2.01k|                    let mut output_types = to_reorder_types[next_entry_id].clone();
  520|       |                    // We look for an other child to join with that does not blow up the join cost
  521|  24.0k|                    while let Some(next_id) = not_yet_reordered_ids
  522|  24.0k|                        .iter()
  523|  24.0k|                        .enumerate()
  524|  24.0k|                        .filter(|(_, v)| **v)
  525|  24.0k|                        .map(|(i, _)| i)
  526|  24.0k|                        .filter(|i| {
  527|       |                            has_common_variables(&output_types, &to_reorder_types[*i], input_types)
  528|  24.0k|                        })
  529|  24.0k|                        .min_by_key(|i| {
  530|       |                            // Estimation of the join cost
  531|       |                            if cfg!(feature = "sep-0006")
  532|       |                                && is_fit_for_for_loop_join(
  533|       |                                    &to_reorder[*i],
  534|       |                                    input_types,
  535|       |                                    &output_types,
  536|       |                                )
  537|       |                            {
  538|       |                                estimate_lateral_cost(
  539|       |                                    &output,
  540|       |                                    &output_types,
  541|       |                                    &to_reorder[*i],
  542|       |                                    input_types,
  543|       |                                )
  544|       |                            } else {
  545|       |                                estimate_join_cost(
  546|       |                                    &output,
  547|       |                                    &to_reorder[*i],
  548|       |                                    &JoinAlgorithm::HashBuildLeftProbeRight {
  549|       |                                        keys: join_key_variables(
  550|       |                                            &output_types,
  551|       |                                            &to_reorder_types[*i],
  552|       |                                            input_types,
  553|       |                                        ),
  554|       |                                    },
  555|       |                                    input_types,
  556|       |                                )
  557|       |                            }
  558|  24.0k|                        })
  559|       |                    {
  560|  21.9k|                        not_yet_reordered_ids[next_id] = false; // It's now done
  561|  21.9k|                        let next = to_reorder[next_id].clone();
  562|       |                        #[cfg(feature = "sep-0006")]
  563|  21.9k|                        {
  564|  21.9k|                            output = if is_fit_for_for_loop_join(&next, input_types, &output_types)
  565|       |                            {
  566|  21.9k|                                GraphPattern::lateral(output, next)
  567|       |                            } else {
  568|     17|                                GraphPattern::join(
  569|     17|                                    output,
  570|     17|                                    next,
  571|     17|                                    JoinAlgorithm::HashBuildLeftProbeRight {
  572|     17|                                        keys: join_key_variables(
  573|     17|                                            &output_types,
  574|     17|                                            &to_reorder_types[next_id],
  575|     17|                                            input_types,
  576|     17|                                        ),
  577|     17|                                    },
  578|     17|                                )
  579|       |                            };
  580|       |                        }
  581|       |                        #[cfg(not(feature = "sep-0006"))]
  582|       |                        {
  583|       |                            output = GraphPattern::join(
  584|       |                                output,
  585|       |                                next,
  586|       |                                JoinAlgorithm::HashBuildLeftProbeRight {
  587|       |                                    keys: join_key_variables(
  588|       |                                        &output_types,
  589|       |                                        &to_reorder_types[next_id],
  590|       |                                        input_types,
  591|       |                                    ),
  592|       |                                },
  593|       |                            );
  594|       |                        }
  595|  21.9k|                        output_types.intersect_with(to_reorder_types[next_id].clone());
  596|       |                    }
  597|  2.01k|                    output_cartesian_product_joins.push(output);
  598|       |                }
  599|  1.42k|                output_cartesian_product_joins
  600|  1.42k|                    .into_iter()
  601|  1.42k|                    .reduce(|left, right| {
  602|       |                        let keys = join_key_variables(
  603|       |                            &infer_graph_pattern_types(&left, input_types.clone()),
  604|       |                            &infer_graph_pattern_types(&right, input_types.clone()),
  605|       |                            input_types,
  606|       |                        );
  607|       |                        if estimate_graph_pattern_size(&left, input_types)
  608|       |                            <= estimate_graph_pattern_size(&right, input_types)
  609|       |                        {
  610|       |                            GraphPattern::join(
  611|       |                                left,
  612|       |                                right,
  613|       |                                JoinAlgorithm::HashBuildLeftProbeRight { keys },
  614|       |                            )
  615|       |                        } else {
  616|       |                            GraphPattern::join(
  617|       |                                right,
  618|       |                                left,
  619|       |                                JoinAlgorithm::HashBuildLeftProbeRight { keys },
  620|       |                            )
  621|       |                        }
  622|  1.42k|                    })
  623|  1.42k|                    .unwrap()
  624|       |            }
  625|       |            #[cfg(feature = "sep-0006")]
  626|     17|            GraphPattern::Lateral { left, right } => {
  627|     17|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
  628|     17|                GraphPattern::lateral(
  629|     17|                    Self::reorder_joins(*left, input_types),
  630|     17|                    Self::reorder_joins(*right, &left_types),
  631|     17|                )
  632|       |            }
  633|       |            GraphPattern::LeftJoin {
  634|    165|                left,
  635|    165|                right,
  636|    165|                expression,
  637|    165|                ..
  638|    165|            } => {
  639|    165|                let left = Self::reorder_joins(*left, input_types);
  640|    165|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
  641|    165|                let right = Self::reorder_joins(*right, input_types);
  642|    165|                let right_types = infer_graph_pattern_types(&right, input_types.clone());
  643|    165|                #[cfg(feature = "sep-0006")]
  644|    165|                {
  645|    165|                    if is_fit_for_for_loop_join(&right, input_types, &left_types)
  646|    138|                        && has_common_variables(&left_types, &right_types, input_types)
  647|       |                    {
  648|     36|                        return GraphPattern::lateral(
  649|     36|                            left,
  650|     36|                            GraphPattern::left_join(
  651|     36|                                GraphPattern::empty_singleton(),
  652|     36|                                right,
  653|     36|                                expression,
  654|     36|                                LeftJoinAlgorithm::HashBuildRightProbeLeft { keys: Vec::new() },
  655|     36|                            ),
  656|     36|                        );
  657|    129|                    }
  658|    129|                }
  659|    129|                GraphPattern::left_join(
  660|    129|                    left,
  661|    129|                    right,
  662|    129|                    expression,
  663|    129|                    LeftJoinAlgorithm::HashBuildRightProbeLeft {
  664|    129|                        keys: join_key_variables(&left_types, &right_types, input_types),
  665|    129|                    },
  666|    129|                )
  667|       |            }
  668|     17|            GraphPattern::Minus { left, right, .. } => {
  669|     17|                let left = Self::reorder_joins(*left, input_types);
  670|     17|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
  671|     17|                let right = Self::reorder_joins(*right, input_types);
  672|     17|                let right_types = infer_graph_pattern_types(&right, input_types.clone());
  673|     17|                GraphPattern::minus(
  674|     17|                    left,
  675|     17|                    right,
  676|     17|                    MinusAlgorithm::HashBuildRightProbeLeft {
  677|     17|                        keys: join_key_variables(&left_types, &right_types, input_types),
  678|     17|                    },
  679|     17|                )
  680|       |            }
  681|       |            GraphPattern::Extend {
  682|    281|                inner,
  683|    281|                expression,
  684|    281|                variable,
  685|    281|            } => GraphPattern::extend(
  686|    281|                Self::reorder_joins(*inner, input_types),
  687|    281|                variable,
  688|    281|                expression,
  689|    281|            ),
  690|     22|            GraphPattern::Filter { inner, expression } => {
  691|     22|                GraphPattern::filter(Self::reorder_joins(*inner, input_types), expression)
  692|       |            }
  693|     10|            GraphPattern::Union { inner } => GraphPattern::union_all(
  694|     10|                inner
  695|     10|                    .into_iter()
  696|     10|                    .map(|c| Self::reorder_joins(c, input_types)),
  697|     10|            ),
  698|       |            GraphPattern::Slice {
  699|      0|                inner,
  700|      0|                start,
  701|      0|                length,
  702|      0|            } => GraphPattern::slice(Self::reorder_joins(*inner, input_types), start, length),
  703|    701|            GraphPattern::Distinct { inner } => {
  704|    701|                GraphPattern::distinct(Self::reorder_joins(*inner, input_types))
  705|       |            }
  706|  2.46k|            GraphPattern::Reduced { inner } => {
  707|  2.46k|                GraphPattern::reduced(Self::reorder_joins(*inner, input_types))
  708|       |            }
  709|    925|            GraphPattern::Project { inner, variables } => {
  710|    925|                GraphPattern::project(Self::reorder_joins(*inner, input_types), variables)
  711|       |            }
  712|      0|            GraphPattern::OrderBy { inner, expression } => {
  713|      0|                GraphPattern::order_by(Self::reorder_joins(*inner, input_types), expression)
  714|       |            }
  715|      0|            service @ GraphPattern::Service { .. } => {
  716|      0|                // We don't do join reordering inside of SERVICE calls, we don't know about cardinalities
  717|      0|                service
  718|       |            }
  719|       |            GraphPattern::Group {
  720|      8|                inner,
  721|      8|                variables,
  722|      8|                aggregates,
  723|      8|            } => GraphPattern::group(
  724|      8|                Self::reorder_joins(*inner, input_types),
  725|      8|                variables,
  726|      8|                aggregates,
  727|      8|            ),
  728|       |        }
  729|  7.30k|    }
_RNvNtCsftsRMVBFYTr_7sparopt9optimizer27is_named_node_pattern_bound:
 1077|  6.34M|fn is_named_node_pattern_bound(pattern: &NamedNodePattern, input_types: &VariableTypes) -> bool {
 1078|  6.34M|    match pattern {
 1079|  2.71M|        NamedNodePattern::NamedNode(_) => true,
 1080|  3.62M|        NamedNodePattern::Variable(v) => !input_types.get(v).undef,
 1081|       |    }
 1082|  6.34M|}
_RNvNtCsftsRMVBFYTr_7sparopt9optimizer28estimate_triple_pattern_size:
  999|  2.61G|fn estimate_triple_pattern_size(
 1000|  2.61G|    subject_bound: bool,
 1001|  2.61G|    predicate_bound: bool,
 1002|  2.61G|    object_bound: bool,
 1003|  2.61G|) -> usize {
 1004|  2.61G|    match (subject_bound, predicate_bound, object_bound) {
 1005|   189M|        (true, true, true) => 1,
 1006|   774M|        (true, true, false) => 10,
 1007|  97.6M|        (true, false, true) => 2,
 1008|   766M|        (false, true, true) => 10_000,
 1009|   171M|        (true, false, false) => 100,
 1010|   143M|        (false, false, false) => 1_000_000_000,
 1011|   301M|        (false, true, false) => 1_000_000,
 1012|   172M|        (false, false, true) => 100_000,
 1013|       |    }
 1014|  2.61G|}
_RNvMNtCsftsRMVBFYTr_7sparopt9optimizerNtB2_9Optimizer12push_filters:
  276|  53.0k|    fn push_filters(
  277|  53.0k|        pattern: GraphPattern,
  278|  53.0k|        mut filters: Vec<Expression>,
  279|  53.0k|        input_types: &VariableTypes,
  280|  53.0k|    ) -> GraphPattern {
  281|  53.0k|        match pattern {
  282|       |            GraphPattern::QuadPattern { .. }
  283|       |            | GraphPattern::Path { .. }
  284|       |            | GraphPattern::Values { .. } => {
  285|  25.5k|                GraphPattern::filter(pattern, Expression::and_all(filters))
  286|       |            }
  287|       |            GraphPattern::Join {
  288|    790|                left,
  289|    790|                right,
  290|    790|                algorithm,
  291|    790|            } => {
  292|    790|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
  293|    790|                let right_types = infer_graph_pattern_types(&right, input_types.clone());
  294|    790|                let mut left_filters = Vec::new();
  295|    790|                let mut right_filters = Vec::new();
  296|    790|                let mut final_filters = Vec::new();
  297|    790|                for filter in filters {
  298|      0|                    let push_left = are_all_expression_variables_bound(&filter, &left_types);
  299|      0|                    let push_right = are_all_expression_variables_bound(&filter, &right_types);
  300|      0|                    if push_left {
  301|      0|                        if push_right {
  302|      0|                            left_filters.push(filter.clone());
  303|      0|                            right_filters.push(filter);
  304|      0|                        } else {
  305|      0|                            left_filters.push(filter);
  306|      0|                        }
  307|      0|                    } else if push_right {
  308|      0|                        right_filters.push(filter);
  309|      0|                    } else {
  310|      0|                        final_filters.push(filter);
  311|      0|                    }
  312|       |                }
  313|    790|                GraphPattern::filter(
  314|    790|                    GraphPattern::join(
  315|    790|                        Self::push_filters(*left, left_filters, input_types),
  316|    790|                        Self::push_filters(*right, right_filters, input_types),
  317|    790|                        algorithm,
  318|    790|                    ),
  319|    790|                    Expression::and_all(final_filters),
  320|    790|                )
  321|       |            }
  322|       |            #[cfg(feature = "sep-0006")]
  323|  22.0k|            GraphPattern::Lateral { left, right } => {
  324|  22.0k|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
  325|  22.0k|                let mut left_filters = Vec::new();
  326|  22.0k|                let mut right_filters = Vec::new();
  327|  22.1k|                for filter in filters {
  328|     96|                    let push_left = are_all_expression_variables_bound(&filter, &left_types);
  329|     96|                    if push_left {
  330|     86|                        left_filters.push(filter);
  331|     86|                    } else {
  332|     10|                        right_filters.push(filter);
  333|     10|                    }
  334|       |                }
  335|  22.0k|                let left = Self::push_filters(*left, left_filters, input_types);
  336|  22.0k|                let right = Self::push_filters(*right, right_filters, &left_types);
  337|       |                if let GraphPattern::Filter {
  338|      9|                    inner: right,
  339|      9|                    expression,
  340|  22.0k|                } = right
  341|       |                {
  342|       |                    // We prefer to have filter out of the lateral rather than inside the right part
  343|      9|                    GraphPattern::filter(GraphPattern::lateral(left, *right), expression)
  344|       |                } else {
  345|  22.0k|                    GraphPattern::lateral(left, right)
  346|       |                }
  347|       |            }
  348|       |            GraphPattern::LeftJoin {
  349|    178|                left,
  350|    178|                right,
  351|    178|                expression,
  352|    178|                algorithm,
  353|    178|            } => {
  354|    178|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
  355|    178|                let right_types = infer_graph_pattern_types(&right, input_types.clone());
  356|    178|                let mut left_filters = Vec::new();
  357|    178|                let mut right_filters = Vec::new();
  358|    178|                let mut final_filters = Vec::new();
  359|    178|                for filter in filters {
  360|      0|                    let push_left = are_all_expression_variables_bound(&filter, &left_types);
  361|      0|                    if push_left {
  362|      0|                        left_filters.push(filter);
  363|      0|                    } else {
  364|      0|                        final_filters.push(filter);
  365|      0|                    }
  366|       |                }
  367|    178|                let expression = if expression.effective_boolean_value().is_none()
  368|      0|                    && (are_all_expression_variables_bound(&expression, &right_types)
  369|      0|                        || are_no_expression_variables_bound(&expression, &left_types))
  370|       |                {
  371|      0|                    right_filters.push(expression);
  372|      0|                    true.into()
  373|       |                } else {
  374|    178|                    expression
  375|       |                };
  376|    178|                GraphPattern::filter(
  377|    178|                    GraphPattern::left_join(
  378|    178|                        Self::push_filters(*left, left_filters, input_types),
  379|    178|                        Self::push_filters(*right, right_filters, input_types),
  380|    178|                        expression,
  381|    178|                        algorithm,
  382|    178|                    ),
  383|    178|                    Expression::and_all(final_filters),
  384|    178|                )
  385|       |            }
  386|       |            GraphPattern::Minus {
  387|     20|                left,
  388|     20|                right,
  389|     20|                algorithm,
  390|     20|            } => GraphPattern::minus(
  391|     20|                Self::push_filters(*left, filters, input_types),
  392|     20|                Self::push_filters(*right, Vec::new(), input_types),
  393|     20|                algorithm,
  394|     20|            ),
  395|       |            GraphPattern::Extend {
  396|    283|                inner,
  397|    283|                expression,
  398|    283|                variable,
  399|    283|            } => {
  400|    283|                // TODO: handle the case where the filter overrides an expression variable (should not happen in SPARQL but allowed in the algebra)
  401|    283|                let mut inner_filters = Vec::new();
  402|    283|                let mut final_filters = Vec::new();
  403|    283|                for filter in filters {
  404|      0|                    let extend_variable_used =
  405|      0|                        filter.used_variables().into_iter().any(|v| *v == variable);
  406|      0|                    if extend_variable_used {
  407|      0|                        final_filters.push(filter);
  408|      0|                    } else {
  409|      0|                        inner_filters.push(filter);
  410|      0|                    }
  411|       |                }
  412|    283|                GraphPattern::filter(
  413|    283|                    GraphPattern::extend(
  414|    283|                        Self::push_filters(*inner, inner_filters, input_types),
  415|    283|                        variable,
  416|    283|                        expression,
  417|    283|                    ),
  418|    283|                    Expression::and_all(final_filters),
  419|    283|                )
  420|       |            }
  421|     22|            GraphPattern::Filter { inner, expression } => {
  422|     22|                if let Expression::And(expressions) = expression {
  423|      4|                    filters.extend(expressions)
  424|       |                } else {
  425|     18|                    filters.push(expression)
  426|       |                };
  427|     22|                Self::push_filters(*inner, filters, input_types)
  428|       |            }
  429|     19|            GraphPattern::Union { inner } => GraphPattern::union_all(
  430|     19|                inner
  431|     19|                    .into_iter()
  432|     19|                    .map(|c| Self::push_filters(c, filters.clone(), input_types)),
  433|     19|            ),
  434|       |            GraphPattern::Slice {
  435|      0|                inner,
  436|      0|                start,
  437|      0|                length,
  438|      0|            } => GraphPattern::filter(
  439|      0|                GraphPattern::slice(
  440|      0|                    Self::push_filters(*inner, Vec::new(), input_types),
  441|      0|                    start,
  442|      0|                    length,
  443|      0|                ),
  444|      0|                Expression::and_all(filters),
  445|      0|            ),
  446|    736|            GraphPattern::Distinct { inner } => {
  447|    736|                GraphPattern::distinct(Self::push_filters(*inner, filters, input_types))
  448|       |            }
  449|  2.46k|            GraphPattern::Reduced { inner } => {
  450|  2.46k|                GraphPattern::reduced(Self::push_filters(*inner, filters, input_types))
  451|       |            }
  452|    960|            GraphPattern::Project { inner, variables } => {
  453|    960|                GraphPattern::project(Self::push_filters(*inner, filters, input_types), variables)
  454|       |            }
  455|      0|            GraphPattern::OrderBy { inner, expression } => {
  456|      0|                GraphPattern::order_by(Self::push_filters(*inner, filters, input_types), expression)
  457|       |            }
  458|       |            GraphPattern::Service {
  459|      0|                inner,
  460|      0|                name,
  461|      0|                silent,
  462|      0|            } => GraphPattern::service(
  463|      0|                Self::push_filters(*inner, filters, input_types),
  464|      0|                name,
  465|      0|                silent,
  466|      0|            ),
  467|       |            GraphPattern::Group {
  468|      8|                inner,
  469|      8|                variables,
  470|      8|                aggregates,
  471|      8|            } => GraphPattern::filter(
  472|      8|                GraphPattern::group(
  473|      8|                    Self::push_filters(*inner, Vec::new(), input_types),
  474|      8|                    variables,
  475|      8|                    aggregates,
  476|      8|                ),
  477|      8|                Expression::and_all(filters),
  478|      8|            ),
  479|       |        }
  480|  53.0k|    }
_RNvNtCsftsRMVBFYTr_7sparopt9optimizer27estimate_graph_pattern_size:
  893|  13.9M|fn estimate_graph_pattern_size(pattern: &GraphPattern, input_types: &VariableTypes) -> usize {
  894|  13.9M|    match pattern {
  895|  1.20k|        GraphPattern::Values { bindings, .. } => bindings.len(),
  896|       |        GraphPattern::QuadPattern {
  897|  6.34M|            subject,
  898|  6.34M|            predicate,
  899|  6.34M|            object,
  900|  6.34M|            ..
  901|  6.34M|        } => estimate_triple_pattern_size(
  902|  6.34M|            is_term_pattern_bound(subject, input_types),
  903|  6.34M|            is_named_node_pattern_bound(predicate, input_types),
  904|  6.34M|            is_term_pattern_bound(object, input_types),
  905|  6.34M|        ),
  906|       |        GraphPattern::Path {
  907|   924k|            subject,
  908|   924k|            path,
  909|   924k|            object,
  910|   924k|            ..
  911|   924k|        } => estimate_path_size(
  912|   924k|            is_term_pattern_bound(subject, input_types),
  913|   924k|            path,
  914|   924k|            is_term_pattern_bound(object, input_types),
  915|   924k|        ),
  916|       |        GraphPattern::Join {
  917|  1.60k|            left,
  918|  1.60k|            right,
  919|  1.60k|            algorithm,
  920|  1.60k|        } => estimate_join_cost(left, right, algorithm, input_types),
  921|       |        GraphPattern::LeftJoin {
  922|     41|            left,
  923|     41|            right,
  924|     41|            algorithm,
  925|     41|            ..
  926|     41|        } => match algorithm {
  927|     41|            LeftJoinAlgorithm::HashBuildRightProbeLeft { keys } => {
  928|     41|                let left_size = estimate_graph_pattern_size(left, input_types);
  929|     41|                max(
  930|     41|                    left_size,
  931|     41|                    left_size
  932|     41|                        .saturating_mul(estimate_graph_pattern_size(
  933|     41|                            right,
  934|     41|                            &infer_graph_pattern_types(right, input_types.clone()),
  935|     41|                        ))
  936|     41|                        .saturating_div(1_000_usize.saturating_pow(keys.len().try_into().unwrap())),
  937|     41|                )
  938|       |            }
  939|       |        },
  940|       |        #[cfg(feature = "sep-0006")]
  941|  6.70M|        GraphPattern::Lateral { left, right } => estimate_lateral_cost(
  942|  6.70M|            left,
  943|  6.70M|            &infer_graph_pattern_types(left, input_types.clone()),
  944|  6.70M|            right,
  945|  6.70M|            input_types,
  946|  6.70M|        ),
  947|     54|        GraphPattern::Union { inner } => inner
  948|     54|            .iter()
  949|     54|            .map(|inner| estimate_graph_pattern_size(inner, input_types))
  950|     54|            .fold(0, usize::saturating_add),
  951|      6|        GraphPattern::Minus { left, .. } => estimate_graph_pattern_size(left, input_types),
  952|      0|        GraphPattern::Filter { inner, .. }
  953|      4|        | GraphPattern::Extend { inner, .. }
  954|      0|        | GraphPattern::OrderBy { inner, .. }
  955|    215|        | GraphPattern::Project { inner, .. }
  956|    215|        | GraphPattern::Distinct { inner, .. }
  957|      0|        | GraphPattern::Reduced { inner, .. }
  958|      0|        | GraphPattern::Group { inner, .. }
  959|    434|        | GraphPattern::Service { inner, .. } => estimate_graph_pattern_size(inner, input_types),
  960|       |        GraphPattern::Slice {
  961|      0|            inner,
  962|      0|            start,
  963|      0|            length,
  964|      0|        } => {
  965|      0|            let inner = estimate_graph_pattern_size(inner, input_types);
  966|      0|            if let Some(length) = length {
  967|      0|                min(inner, *length - *start)
  968|       |            } else {
  969|      0|                inner
  970|       |            }
  971|       |        }
  972|       |    }
  973|  13.9M|}
_RNvNtCsftsRMVBFYTr_7sparopt9optimizer21is_term_pattern_bound:
 1064|  14.5M|fn is_term_pattern_bound(pattern: &GroundTermPattern, input_types: &VariableTypes) -> bool {
 1065|  14.5M|    match pattern {
 1066|  1.12M|        GroundTermPattern::NamedNode(_) | GroundTermPattern::Literal(_) => true,
 1067|  13.4M|        GroundTermPattern::Variable(v) => !input_types.get(v).undef,
 1068|       |        #[cfg(feature = "rdf-star")]
 1069|      0|        GroundTermPattern::Triple(t) => {
 1070|      0|            is_term_pattern_bound(&t.subject, input_types)
 1071|      0|                && is_named_node_pattern_bound(&t.predicate, input_types)
 1072|      0|                && is_term_pattern_bound(&t.object, input_types)
 1073|       |        }
 1074|       |    }
 1075|  14.5M|}
_RNvNtCsftsRMVBFYTr_7sparopt9optimizer18estimate_join_cost:
  975|  1.64k|fn estimate_join_cost(
  976|  1.64k|    left: &GraphPattern,
  977|  1.64k|    right: &GraphPattern,
  978|  1.64k|    algorithm: &JoinAlgorithm,
  979|  1.64k|    input_types: &VariableTypes,
  980|  1.64k|) -> usize {
  981|  1.64k|    match algorithm {
  982|  1.64k|        JoinAlgorithm::HashBuildLeftProbeRight { keys } => {
  983|  1.64k|            estimate_graph_pattern_size(left, input_types)
  984|  1.64k|                .saturating_mul(estimate_graph_pattern_size(right, input_types))
  985|  1.64k|                .saturating_div(1_000_usize.saturating_pow(keys.len().try_into().unwrap()))
  986|  1.64k|        }
  987|  1.64k|    }
  988|  1.64k|}
_RNvNtCsftsRMVBFYTr_7sparopt9optimizer24is_fit_for_for_loop_join:
  732|   295k|fn is_fit_for_for_loop_join(
  733|   295k|    pattern: &GraphPattern,
  734|   295k|    global_input_types: &VariableTypes,
  735|   295k|    entry_types: &VariableTypes,
  736|   295k|) -> bool {
  737|   295k|    // TODO: think more about it
  738|   295k|    match pattern {
  739|       |        GraphPattern::Values { .. }
  740|       |        | GraphPattern::QuadPattern { .. }
  741|   293k|        | GraphPattern::Path { .. } => true,
  742|       |        #[cfg(feature = "sep-0006")]
  743|  2.08k|        GraphPattern::Lateral { left, right } => {
  744|  2.08k|            is_fit_for_for_loop_join(left, global_input_types, entry_types)
  745|  2.08k|                && is_fit_for_for_loop_join(right, global_input_types, entry_types)
  746|       |        }
  747|       |        GraphPattern::LeftJoin {
  748|     29|            left,
  749|     29|            right,
  750|     29|            expression,
  751|     29|            ..
  752|     29|        } => {
  753|     29|            if !is_fit_for_for_loop_join(left, global_input_types, entry_types) {
  754|      0|                return false;
  755|     29|            }
  756|     29|
  757|     29|            // It is not ok to transform into for loop join if right binds a variable also bound by the entry part of the for loop join
  758|     29|            let mut left_types = infer_graph_pattern_types(left, global_input_types.clone());
  759|     29|            let right_types = infer_graph_pattern_types(right, global_input_types.clone());
  760|     29|            if right_types.iter().any(|(variable, t)| {
  761|       |                *t != VariableType::UNDEF
  762|       |                    && left_types.get(variable).undef
  763|       |                    && entry_types.get(variable) != VariableType::UNDEF
  764|     29|            }) {
  765|      8|                return false;
  766|     21|            }
  767|     21|
  768|     21|            // We don't forget the final expression
  769|     21|            left_types.intersect_with(right_types);
  770|     21|            is_expression_fit_for_for_loop_join(expression, &left_types, entry_types)
  771|       |        }
  772|      3|        GraphPattern::Union { inner } => inner
  773|      3|            .iter()
  774|      3|            .all(|i| is_fit_for_for_loop_join(i, global_input_types, entry_types)),
  775|      0|        GraphPattern::Filter { inner, expression } => {
  776|      0|            is_fit_for_for_loop_join(inner, global_input_types, entry_types)
  777|      0|                && is_expression_fit_for_for_loop_join(
  778|      0|                    expression,
  779|      0|                    &infer_graph_pattern_types(inner, global_input_types.clone()),
  780|      0|                    entry_types,
  781|      0|                )
  782|       |        }
  783|       |        GraphPattern::Extend {
  784|      0|            inner,
  785|      0|            expression,
  786|      0|            variable,
  787|      0|        } => {
  788|      0|            is_fit_for_for_loop_join(inner, global_input_types, entry_types)
  789|      0|                && entry_types.get(variable) == VariableType::UNDEF
  790|      0|                && is_expression_fit_for_for_loop_join(
  791|      0|                    expression,
  792|      0|                    &infer_graph_pattern_types(inner, global_input_types.clone()),
  793|      0|                    entry_types,
  794|      0|                )
  795|       |        }
  796|       |        GraphPattern::Join { .. }
  797|       |        | GraphPattern::Minus { .. }
  798|       |        | GraphPattern::Service { .. }
  799|       |        | GraphPattern::OrderBy { .. }
  800|       |        | GraphPattern::Distinct { .. }
  801|       |        | GraphPattern::Reduced { .. }
  802|       |        | GraphPattern::Slice { .. }
  803|       |        | GraphPattern::Project { .. }
  804|     75|        | GraphPattern::Group { .. } => false,
  805|       |    }
  806|   295k|}

_RNvXs5_NtCsftsRMVBFYTr_7sparopt14type_inferenceNtB5_12VariableTypeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  344|   168k|#[derive(Clone, Copy, Eq, PartialEq, Debug, Default)]
_RNvMNtCsftsRMVBFYTr_7sparopt14type_inferenceNtB2_13VariableTypes3get:
  301|   358M|    pub fn get(&self, variable: &Variable) -> VariableType {
  302|   358M|        self.inner
  303|   358M|            .get(variable)
  304|   358M|            .copied()
  305|   358M|            .unwrap_or(VariableType::UNDEF)
  306|   358M|    }
_RNvXsa_NtCsftsRMVBFYTr_7sparopt14type_inferenceNtB5_12VariableTypeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  344|   335M|#[derive(Clone, Copy, Eq, PartialEq, Debug, Default)]
_RNvMNtCsftsRMVBFYTr_7sparopt14type_inferenceNtB2_13VariableTypes14intersect_with:
  312|  30.2k|    pub fn intersect_with(&mut self, other: Self) {
  313|   115k|        for (v, t) in other.inner {
  314|  84.9k|            self.intersect_variable_with(v, t);
  315|  84.9k|        }
  316|  30.2k|    }
_RNvNtCsftsRMVBFYTr_7sparopt14type_inference21infer_expression_type:
  171|  1.26k|pub fn infer_expression_type(expression: &Expression, types: &VariableTypes) -> VariableType {
  172|      6|    match expression {
  173|      0|        Expression::NamedNode(_) => VariableType::NAMED_NODE,
  174|       |        Expression::Literal(_) | Expression::Exists(_) | Expression::Bound(_) => {
  175|     85|            VariableType::LITERAL
  176|       |        }
  177|      4|        Expression::Variable(v) => types.get(v),
  178|       |        Expression::FunctionCall(Function::Datatype | Function::Iri, _) => {
  179|      0|            VariableType::NAMED_NODE | VariableType::UNDEF
  180|       |        }
  181|       |        #[cfg(feature = "rdf-star")]
  182|       |        Expression::FunctionCall(Function::Predicate, _) => {
  183|      0|            VariableType::NAMED_NODE | VariableType::UNDEF
  184|       |        }
  185|      0|        Expression::FunctionCall(Function::BNode, args) => {
  186|      0|            if args.is_empty() {
  187|      0|                VariableType::BLANK_NODE
  188|       |            } else {
  189|      0|                VariableType::BLANK_NODE | VariableType::UNDEF
  190|       |            }
  191|       |        }
  192|       |        Expression::FunctionCall(
  193|       |            Function::Rand | Function::Now | Function::Uuid | Function::StrUuid,
  194|       |            _,
  195|      0|        ) => VariableType::LITERAL,
  196|       |        Expression::Or(_)
  197|       |        | Expression::And(_)
  198|       |        | Expression::Equal(_, _)
  199|       |        | Expression::Greater(_, _)
  200|       |        | Expression::GreaterOrEqual(_, _)
  201|       |        | Expression::Less(_, _)
  202|       |        | Expression::LessOrEqual(_, _)
  203|       |        | Expression::Add(_, _)
  204|       |        | Expression::Subtract(_, _)
  205|       |        | Expression::Multiply(_, _)
  206|       |        | Expression::Divide(_, _)
  207|       |        | Expression::UnaryPlus(_)
  208|       |        | Expression::UnaryMinus(_)
  209|       |        | Expression::Not(_)
  210|       |        | Expression::FunctionCall(
  211|       |            Function::Str
  212|       |            | Function::Lang
  213|       |            | Function::LangMatches
  214|       |            | Function::Abs
  215|       |            | Function::Ceil
  216|       |            | Function::Floor
  217|       |            | Function::Round
  218|       |            | Function::Concat
  219|       |            | Function::SubStr
  220|       |            | Function::StrLen
  221|       |            | Function::Replace
  222|       |            | Function::UCase
  223|       |            | Function::LCase
  224|       |            | Function::EncodeForUri
  225|       |            | Function::Contains
  226|       |            | Function::StrStarts
  227|       |            | Function::StrEnds
  228|       |            | Function::StrBefore
  229|       |            | Function::StrAfter
  230|       |            | Function::Year
  231|       |            | Function::Month
  232|       |            | Function::Day
  233|       |            | Function::Hours
  234|       |            | Function::Minutes
  235|       |            | Function::Seconds
  236|       |            | Function::Timezone
  237|       |            | Function::Tz
  238|       |            | Function::Md5
  239|       |            | Function::Sha1
  240|       |            | Function::Sha256
  241|       |            | Function::Sha384
  242|       |            | Function::Sha512
  243|       |            | Function::StrLang
  244|       |            | Function::StrDt
  245|       |            | Function::IsIri
  246|       |            | Function::IsBlank
  247|       |            | Function::IsLiteral
  248|       |            | Function::IsNumeric
  249|       |            | Function::Regex,
  250|       |            _,
  251|  1.16k|        ) => VariableType::LITERAL | VariableType::UNDEF,
  252|       |        #[cfg(feature = "sep-0002")]
  253|       |        Expression::FunctionCall(Function::Adjust, _) => {
  254|      0|            VariableType::LITERAL | VariableType::UNDEF
  255|       |        }
  256|       |        #[cfg(feature = "rdf-star")]
  257|       |        Expression::FunctionCall(Function::IsTriple, _) => {
  258|      0|            VariableType::LITERAL | VariableType::UNDEF
  259|       |        }
  260|      1|        Expression::SameTerm(left, right) => {
  261|      1|            if infer_expression_type(left, types).undef || infer_expression_type(right, types).undef
  262|       |            {
  263|      1|                VariableType::LITERAL | VariableType::UNDEF
  264|       |            } else {
  265|      0|                VariableType::LITERAL
  266|       |            }
  267|       |        }
  268|     13|        Expression::If(_, then, els) => {
  269|     13|            infer_expression_type(then, types) | infer_expression_type(els, types)
  270|       |        }
  271|      0|        Expression::Coalesce(inner) => {
  272|      0|            let mut t = VariableType::UNDEF;
  273|      0|            for e in inner {
  274|      0|                let new = infer_expression_type(e, types);
  275|      0|                t = t | new;
  276|      0|                if !new.undef {
  277|      0|                    t.undef = false;
  278|      0|                    return t;
  279|      0|                }
  280|       |            }
  281|      0|            t
  282|       |        }
  283|       |        #[cfg(feature = "rdf-star")]
  284|      0|        Expression::FunctionCall(Function::Triple, _) => VariableType::TRIPLE | VariableType::UNDEF,
  285|       |        #[cfg(feature = "rdf-star")]
  286|       |        Expression::FunctionCall(Function::Subject, _) => {
  287|      0|            VariableType::SUBJECT | VariableType::UNDEF
  288|       |        }
  289|       |        #[cfg(feature = "rdf-star")]
  290|      0|        Expression::FunctionCall(Function::Object, _) => VariableType::TERM | VariableType::UNDEF,
  291|      0|        Expression::FunctionCall(Function::Custom(_), _) => VariableType::ANY,
  292|       |    }
  293|  1.26k|}
_RNvXs1_NtCsftsRMVBFYTr_7sparopt14type_inferenceNtB5_12VariableTypeNtNtNtCs9nhK3FOW46N_4core3ops3bit6BitAnd6bitand:
  440|   335M|    fn bitand(self, other: Self) -> Self {
  441|   335M|        Self {
  442|   335M|            undef: self.undef && other.undef,
  443|   335M|            named_node: self.named_node && other.named_node
  444|   118M|                || (self.undef && other.named_node)
  445|   254k|                || (self.named_node && other.undef),
  446|   335M|            blank_node: self.blank_node && other.blank_node
  447|   198M|                || (self.undef && other.blank_node)
  448|  90.1M|                || (self.blank_node && other.undef),
  449|   335M|            literal: self.literal && other.literal
  450|   326M|                || (self.undef && other.literal)
  451|   266M|                || (self.literal && other.undef),
  452|       |            #[cfg(feature = "rdf-star")]
  453|   335M|            triple: self.triple && other.triple
  454|   198M|                || (self.undef && other.triple)
  455|  90.1M|                || (self.triple && other.undef),
  456|       |        }
  457|   335M|    }
_RNvXsc_NtCsftsRMVBFYTr_7sparopt14type_inferenceNtB5_12VariableTypeNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
  344|   264k|#[derive(Clone, Copy, Eq, PartialEq, Debug, Default)]
_RNvMNtCsftsRMVBFYTr_7sparopt14type_inferenceNtB2_13VariableTypes23intersect_variable_with:
  335|   335M|    fn intersect_variable_with(&mut self, variable: Variable, t: VariableType) {
  336|   335M|        let t = self.get(&variable) & t;
  337|   335M|        if t != VariableType::UNDEF {
  338|   335M|            self.inner.insert(variable, t);
  339|   335M|        }
  340|   335M|    }
_RNvXs0_NtCsftsRMVBFYTr_7sparopt14type_inferenceNtB5_12VariableTypeNtNtNtCs9nhK3FOW46N_4core3ops3bit5BitOr5bitor:
  424|  1.25k|    fn bitor(self, other: Self) -> Self {
  425|  1.25k|        Self {
  426|  1.25k|            undef: self.undef || other.undef,
  427|  1.25k|            named_node: self.named_node || other.named_node,
  428|  1.25k|            blank_node: self.blank_node || other.blank_node,
  429|  1.25k|            literal: self.literal || other.literal,
  430|       |            #[cfg(feature = "rdf-star")]
  431|  1.25k|            triple: self.triple || other.triple,
  432|       |        }
  433|  1.25k|    }
_RNvMNtCsftsRMVBFYTr_7sparopt14type_inferenceNtB2_13VariableTypes4iter:
  308|   491k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &VariableType)> {
  309|   491k|        self.inner.iter()
  310|   491k|    }
_RNvXs3_NtCsftsRMVBFYTr_7sparopt14type_inferenceNtB5_13VariableTypesNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  295|  6.78M|#[derive(Default, Clone, Debug)]
_RNvNtCsftsRMVBFYTr_7sparopt14type_inference25infer_graph_pattern_types:
    8|   278M|pub fn infer_graph_pattern_types(
    9|   278M|    pattern: &GraphPattern,
   10|   278M|    mut types: VariableTypes,
   11|   278M|) -> VariableTypes {
   12|   278M|    match pattern {
   13|       |        GraphPattern::QuadPattern {
   14|   124M|            subject,
   15|   124M|            predicate,
   16|   124M|            object,
   17|   124M|            graph_name,
   18|   124M|        } => {
   19|   124M|            add_ground_term_pattern_types(subject, &mut types, false);
   20|   124M|            if let NamedNodePattern::Variable(v) = predicate {
   21|  69.0M|                types.intersect_variable_with(v.clone(), VariableType::NAMED_NODE)
   22|  55.9M|            }
   23|   124M|            add_ground_term_pattern_types(object, &mut types, true);
   24|   124M|            if let Some(NamedNodePattern::Variable(v)) = graph_name {
   25|  3.75M|                types.intersect_variable_with(v.clone(), VariableType::NAMED_NODE)
   26|   121M|            }
   27|   124M|            types
   28|       |        }
   29|       |        GraphPattern::Path {
   30|  17.6M|            subject,
   31|  17.6M|            object,
   32|  17.6M|            graph_name,
   33|  17.6M|            ..
   34|  17.6M|        } => {
   35|  17.6M|            add_ground_term_pattern_types(subject, &mut types, false);
   36|  17.6M|            add_ground_term_pattern_types(object, &mut types, true);
   37|  17.6M|            if let Some(NamedNodePattern::Variable(v)) = graph_name {
   38|   318k|                types.intersect_variable_with(v.clone(), VariableType::NAMED_NODE)
   39|  17.3M|            }
   40|  17.6M|            types
   41|       |        }
   42|  7.87k|        GraphPattern::Join { left, right, .. } => {
   43|  7.87k|            let mut output_types = infer_graph_pattern_types(left, types.clone());
   44|  7.87k|            output_types.intersect_with(infer_graph_pattern_types(right, types));
   45|  7.87k|            output_types
   46|       |        }
   47|       |        #[cfg(feature = "sep-0006")]
   48|   135M|        GraphPattern::Lateral { left, right } => {
   49|   135M|            infer_graph_pattern_types(right, infer_graph_pattern_types(left, types))
   50|       |        }
   51|    161|        GraphPattern::LeftJoin { left, right, .. } => {
   52|    161|            let mut right_types = infer_graph_pattern_types(right, types.clone()); // TODO: expression
   53|  1.21k|            for t in right_types.inner.values_mut() {
   54|  1.21k|                t.undef = true; // Right might be unset
   55|  1.21k|            }
   56|    161|            let mut output_types = infer_graph_pattern_types(left, types);
   57|    161|            output_types.intersect_with(right_types);
   58|    161|            output_types
   59|       |        }
   60|     10|        GraphPattern::Minus { left, .. } => infer_graph_pattern_types(left, types),
   61|     96|        GraphPattern::Union { inner } => inner
   62|     96|            .iter()
   63|     96|            .map(|inner| infer_graph_pattern_types(inner, types.clone()))
   64|     96|            .reduce(|mut a, b| {
   65|       |                a.union_with(b);
   66|       |                a
   67|     96|            })
   68|     96|            .unwrap_or_default(),
   69|       |        GraphPattern::Extend {
   70|     73|            inner,
   71|     73|            variable,
   72|     73|            expression,
   73|     73|        } => {
   74|     73|            let mut types = infer_graph_pattern_types(inner, types);
   75|     73|            types.intersect_variable_with(
   76|     73|                variable.clone(),
   77|     73|                infer_expression_type(expression, &types),
   78|     73|            );
   79|     73|            types
   80|       |        }
   81|      8|        GraphPattern::Filter { inner, .. } => infer_graph_pattern_types(inner, types),
   82|    565|        GraphPattern::Project { inner, variables } => VariableTypes {
   83|    565|            inner: infer_graph_pattern_types(inner, types)
   84|    565|                .inner
   85|    565|                .into_iter()
   86|    565|                .filter(|(v, _)| variables.contains(v))
   87|    565|                .collect(),
   88|    565|        },
   89|    444|        GraphPattern::Distinct { inner }
   90|      0|        | GraphPattern::Reduced { inner }
   91|      0|        | GraphPattern::OrderBy { inner, .. }
   92|    444|        | GraphPattern::Slice { inner, .. } => infer_graph_pattern_types(inner, types),
   93|       |        GraphPattern::Group {
   94|      8|            inner,
   95|      8|            variables,
   96|      8|            aggregates,
   97|      8|        } => {
   98|      8|            let types = infer_graph_pattern_types(inner, types);
   99|      8|            VariableTypes {
  100|      8|                inner: infer_graph_pattern_types(inner, types)
  101|      8|                    .inner
  102|      8|                    .into_iter()
  103|      8|                    .filter(|(v, _)| variables.contains(v))
  104|      8|                    .chain(aggregates.iter().map(|(v, _)| (v.clone(), VariableType::ANY))) //TODO: guess from aggregate
  105|      8|                    .collect(),
  106|      8|            }
  107|       |        }
  108|       |        GraphPattern::Values {
  109|  8.68k|            variables,
  110|  8.68k|            bindings,
  111|       |        } => {
  112|   264k|            for (i, v) in variables.iter().enumerate() {
  113|   264k|                let mut t = VariableType::default();
  114|   553k|                for binding in bindings {
  115|   288k|                    match binding[i] {
  116|  53.5k|                        Some(GroundTerm::NamedNode(_)) => t.named_node = true,
  117|  30.9k|                        Some(GroundTerm::Literal(_)) => t.literal = true,
  118|       |                        #[cfg(feature = "rdf-star")]
  119|      0|                        Some(GroundTerm::Triple(_)) => t.triple = true,
  120|   204k|                        None => t.undef = true,
  121|       |                    }
  122|       |                }
  123|   264k|                types.intersect_variable_with(v.clone(), t)
  124|       |            }
  125|  8.68k|            types
  126|       |        }
  127|       |        GraphPattern::Service {
  128|      0|            name,
  129|      0|            inner,
  130|      0|            silent,
  131|      0|        } => {
  132|      0|            let parent_types = types.clone();
  133|      0|            let mut types = infer_graph_pattern_types(inner, types);
  134|      0|            if let NamedNodePattern::Variable(v) = name {
  135|      0|                types.intersect_variable_with(v.clone(), VariableType::NAMED_NODE)
  136|      0|            }
  137|      0|            if *silent {
  138|      0|                // On failure, single empty solution
  139|      0|                types.union_with(parent_types);
  140|      0|            }
  141|      0|            types
  142|       |        }
  143|       |    }
  144|   278M|}
_RNvNtCsftsRMVBFYTr_7sparopt14type_inference29add_ground_term_pattern_types:
  146|   285M|fn add_ground_term_pattern_types(
  147|   285M|    pattern: &GroundTermPattern,
  148|   285M|    types: &mut VariableTypes,
  149|   285M|    is_object: bool,
  150|   285M|) {
  151|   285M|    if let GroundTermPattern::Variable(v) = pattern {
  152|   262M|        types.intersect_variable_with(
  153|   262M|            v.clone(),
  154|   262M|            if is_object {
  155|   120M|                VariableType::TERM
  156|       |            } else {
  157|   141M|                VariableType::SUBJECT
  158|       |            },
  159|       |        )
  160|  23.0M|    }
  161|       |    #[cfg(feature = "rdf-star")]
  162|   285M|    if let GroundTermPattern::Triple(t) = pattern {
  163|      0|        add_ground_term_pattern_types(&t.subject, types, false);
  164|      0|        if let NamedNodePattern::Variable(v) = &t.predicate {
  165|      0|            types.intersect_variable_with(v.clone(), VariableType::NAMED_NODE)
  166|      0|        }
  167|      0|        add_ground_term_pattern_types(&t.object, types, true);
  168|   285M|    }
  169|   285M|}
_RNvMNtCsftsRMVBFYTr_7sparopt14type_inferenceNtB2_13VariableTypes10union_with:
  318|     96|    pub fn union_with(&mut self, other: Self) {
  319|    252|        for (v, t) in &mut self.inner {
  320|    156|            if other.get(v).undef {
  321|     77|                t.undef = true; // Might be undefined
  322|     79|            }
  323|       |        }
  324|    512|        for (v, mut t) in other.inner {
  325|    416|            self.inner
  326|    416|                .entry(v)
  327|    416|                .and_modify(|ex| *ex = *ex | t)
  328|    416|                .or_insert({
  329|    416|                    t.undef = true;
  330|    416|                    t
  331|    416|                });
  332|    416|        }
  333|     96|    }
_RNvXs2_NtCsftsRMVBFYTr_7sparopt14type_inferenceNtB5_13VariableTypesNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
  295|  7.45k|#[derive(Default, Clone, Debug)]
_RNCNvMNtCsftsRMVBFYTr_7sparopt14type_inferenceNtB4_13VariableTypes10union_with0B6_:
  327|     79|                .and_modify(|ex| *ex = *ex | t)
_RNCNvNtCsftsRMVBFYTr_7sparopt14type_inference25infer_graph_pattern_types0B5_:
   63|    192|            .map(|inner| infer_graph_pattern_types(inner, types.clone()))
_RNCNvNtCsftsRMVBFYTr_7sparopt14type_inference25infer_graph_pattern_typess0_0B5_:
   86|  1.58k|                .filter(|(v, _)| variables.contains(v))
_RNCNvNtCsftsRMVBFYTr_7sparopt14type_inference25infer_graph_pattern_typess_0B5_:
   64|     96|            .reduce(|mut a, b| {
   65|     96|                a.union_with(b);
   66|     96|                a
   67|     96|            })
_RNCNvNtCsftsRMVBFYTr_7sparopt14type_inference25infer_graph_pattern_typess1_0B5_:
  103|      8|                    .filter(|(v, _)| variables.contains(v))

_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsi_1__NtB4_4MoveNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  540|  2.10k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsU_1__NtB4_16PropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1233|  1.05k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsE_1__NtB4_10InlineDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  912|    543|#[derive(Arbitrary)]
_RNvXsL_Cs6Lc7YXa2Vl_12sparql_smithNtB5_6FilterNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1058|      3|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1059|      3|        write!(f, "FILTER {}", self.constraint)
 1060|      3|    }
_RNvXsl_Cs6Lc7YXa2Vl_12sparql_smithNtB5_10DeleteDataNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  595|     72|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  596|     72|        write!(f, "DELETE DATA {}", self.data)
  597|     72|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsG_1__NtB4_16InlineDataOneVarNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  940|    146|#[derive(Arbitrary)]
_RNvXs1i_Cs6Lc7YXa2Vl_12sparql_smithNtB6_23ConditionalOrExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1676|  1.81k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1677|  1.81k|        write!(f, "{}", self.start)?;
 1678|  1.86k|        for e in &self.others {
 1679|     43|            write!(f, " || {e}")?;
 1680|       |        }
 1681|  1.81k|        Ok(())
 1682|  1.81k|    }
_RNvXs1t_Cs6Lc7YXa2Vl_12sparql_smithNtB6_13IriOrFunctionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1960|    532|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1961|    532|        write!(f, "{}", self.iri)?;
 1962|       |        // if let Some(args) = &self.args {
 1963|       |        // write!(f, "{args}")?;
 1964|       |        // }
 1965|    532|        Ok(())
 1966|    532|    }
_RNvXsT_Cs6Lc7YXa2Vl_12sparql_smithNtB5_22TriplesSameSubjectPathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1215|  1.58k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1216|  1.58k|        match self {
 1217|       |            Self::Atomic {
 1218|    986|                subject,
 1219|    986|                predicate_object,
 1220|    986|            } => {
 1221|    986|                write!(f, "{subject}{predicate_object}")
 1222|       |            }
 1223|       |            Self::Other {
 1224|    599|                subject,
 1225|    599|                predicate_object,
 1226|    599|            } => {
 1227|    599|                write!(f, "{subject} {predicate_object}")
 1228|       |            }
 1229|       |        }
 1230|  1.58k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__NtB4_24GroupOrUnionGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1034|    467|#[derive(Arbitrary)]
_RNvXse_Cs6Lc7YXa2Vl_12sparql_smithNtB5_5ClearNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  479|  1.29k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  480|  1.29k|        write!(f, "CLEAR ")?;
  481|  1.29k|        if self.silent {
  482|    987|            write!(f, "SILENT ")?;
  483|    311|        }
  484|  1.29k|        write!(f, "{}", self.target)
  485|  1.29k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithse_1__NtB4_5ClearNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  471|  4.22k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths15_1__NtB4_22PathNegatedPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1424|  5.26k|#[derive(Arbitrary)]
_RNvXsA_Cs6Lc7YXa2Vl_12sparql_smithNtB5_19LateralGraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  881|    299|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  882|    299|        write!(f, " LATERAL {}", self.inner)
  883|    299|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__NtB4_15PathAlternativeNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1319|  73.7k|#[derive(Arbitrary)]
_RNvXsJ_Cs6Lc7YXa2Vl_12sparql_smithNtB5_17MinusGraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1029|     22|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1030|     22|        write!(f, " MINUS {}", self.inner)
 1031|     22|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsn_1__NtB4_6ModifyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  612|  9.01k|#[derive(Arbitrary)]
_RNvXsG_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14InlineDataFullNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  964|    205|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  965|    205|        let vars = u.arbitrary_iter()?.collect::<Result<Vec<_>>>()?;
  966|       |
  967|    205|        let mut values = Vec::new();
  968|    205|        u.arbitrary_loop(Some(0), Some(3), |u| {
  969|       |            let mut row = Vec::with_capacity(vars.len());
  970|       |            u.arbitrary_loop(
  971|       |                Some(vars.len().try_into().unwrap()),
  972|       |                Some(vars.len().try_into().unwrap()),
  973|       |                |u| {
  974|       |                    row.push(u.arbitrary()?);
  975|       |                    Ok(ControlFlow::Continue(()))
  976|       |                },
  977|       |            )?;
  978|       |            values.push(row);
  979|       |            Ok(ControlFlow::Continue(()))
  980|    205|        })?;
  981|       |
  982|    205|        Ok(Self { vars, values })
  983|    205|    }
_RNvXs3_Cs6Lc7YXa2Vl_12sparql_smithNtB5_12SelectClauseNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  149|  1.53k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  150|  1.53k|        f.write_str("SELECT")?;
  151|  1.53k|        if let Some(option) = &self.option {
  152|  1.02k|            match option {
  153|    300|                SelectOption::Distinct => f.write_str(" DISTINCT"),
  154|    720|                SelectOption::Reduced => f.write_str(" REDUCED"),
  155|      0|            }?;
  156|    516|        }
  157|  1.53k|        match &self.values {
  158|    743|            SelectValues::Star => f.write_str(" *"),
  159|    793|            SelectValues::Projection { start, others } => {
  160|  1.01k|                for e in once(start).chain(others) {
  161|  1.01k|                    match e {
  162|    403|                        SelectProjection::Variable(v) => write!(f, " {v}"),
  163|    616|                        SelectProjection::Projection(e, v) => write!(f, " ({e} AS {v})"),
  164|      0|                    }?;
  165|       |                }
  166|    793|                Ok(())
  167|       |            }
  168|       |        }
  169|  1.53k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths2_1__NtB4_12SelectClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  120|  9.54k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths6_1__NtB4_11WhereClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  172|  5.92k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsl_1__NtB4_10DeleteDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  588|    228|#[derive(Arbitrary)]
_RNvXsy_Cs6Lc7YXa2Vl_12sparql_smithNtB5_22GraphPatternNotTriplesNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  847|    944|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  848|    944|        match self {
  849|    129|            Self::GroupOrUnion(p) => write!(f, "{p}"),
  850|    238|            Self::Optional(p) => write!(f, "{p}"),
  851|     22|            Self::Minus(p) => write!(f, "{p}"),
  852|     83|            Self::Graph(p) => write!(f, "{p}"),
  853|      3|            Self::Filter(p) => write!(f, "{p}"),
  854|      2|            Self::Bind(p) => write!(f, "{p}"),
  855|    168|            Self::InlineData(p) => write!(f, "{p}"),
  856|       |            #[cfg(feature = "sep-0006")]
  857|    299|            Self::Lateral(p) => write!(f, "{p}"),
  858|       |        }
  859|    944|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsg_1__NtB4_6CreateNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  505|    919|#[derive(Arbitrary)]
_RNvXsH_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14InlineDataFullNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  987|    191|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  988|    191|        f.write_str("( ")?;
  989|  3.56k|        for v in &self.vars {
  990|  3.37k|            write!(f, " {v}")?;
  991|       |        }
  992|    191|        f.write_str(" ) {")?;
  993|    466|        for vs in &self.values {
  994|    275|            f.write_str(" (")?;
  995|  4.91k|            for v in vs {
  996|  4.63k|                write!(f, " {v}")?;
  997|       |            }
  998|    275|            f.write_str(" )")?;
  999|       |        }
 1000|    191|        f.write_str(" }")
 1001|    191|    }
_RNvXs8_Cs6Lc7YXa2Vl_12sparql_smithNtB5_12HavingClauseNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  270|     21|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  271|     21|        write!(f, "HAVING {}", self.start)?;
  272|     21|        for o in &self.others {
  273|      0|            write!(f, " {o}")?;
  274|       |        }
  275|     21|        Ok(())
  276|     21|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__NtB4_13GraphNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1575|  53.7k|#[derive(Arbitrary)]
_RNvXs14_Cs6Lc7YXa2Vl_12sparql_smithNtB6_20PathOneInPropertySetNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1459|  7.69k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1460|  7.69k|        match self {
 1461|  1.34k|            Self::Iri(iri) => write!(f, "{iri}"),
 1462|    442|            Self::A => f.write_str(" a "),
 1463|  2.66k|            Self::NegatedIri(iri) => write!(f, "^{iri}"),
 1464|  3.24k|            Self::NegatedA => f.write_str(" ^a "),
 1465|       |        }
 1466|  7.69k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsj_1__NtB4_4CopyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  558|    393|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsV_1__NtB4_24PropertyListPathNotEmptyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1249|  33.5k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths14_1__NtB4_11PathPrimaryNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1404|   110k|#[derive(Arbitrary)]
_RNvXsX_Cs6Lc7YXa2Vl_12sparql_smithNtB5_15PathAlternativeNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1327|  23.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1328|  23.0k|        write!(f, "{}", self.start)?;
 1329|  24.5k|        for other in &self.others {
 1330|  1.52k|            write!(f, " | {other}")?;
 1331|       |        }
 1332|  23.0k|        Ok(())
 1333|  23.0k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1s_1__NtB4_13NotExistsFuncNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1940|    840|#[derive(Arbitrary)]
_RNvXsk_Cs6Lc7YXa2Vl_12sparql_smithNtB5_10InsertDataNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  583|    250|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  584|    250|        write!(f, "INSERT DATA {}", self.data)
  585|    250|    }
_RNvXsw_Cs6Lc7YXa2Vl_12sparql_smithNtB5_20GroupGraphPatternSubNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  795|  3.07k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  796|  3.07k|        if let Some(start) = &self.start {
  797|  1.31k|            write!(f, "{start}")?;
  798|  1.75k|        }
  799|  4.01k|        for other in &self.others {
  800|    944|            write!(f, "{}", other.start)?;
  801|    944|            if other.with_dot {
  802|    191|                f.write_str(" . ")?;
  803|    753|            }
  804|    944|            if let Some(end) = &other.end {
  805|    218|                write!(f, "{end}")?;
  806|    726|            }
  807|       |        }
  808|  3.07k|        Ok(())
  809|  3.07k|    }
_RNvXs1s_Cs6Lc7YXa2Vl_12sparql_smithNtB6_13NotExistsFuncNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1947|     43|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1948|     43|        write!(f, "NOT EXISTS {}", self.pattern)
 1949|     43|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsx_1__NtB4_30GroupGraphPatternSubOtherBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  787|  3.30k|#[derive(Arbitrary)]
_RNvXs12_Cs6Lc7YXa2Vl_12sparql_smithNtB6_11PathPrimaryNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1414|  33.2k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1415|  33.2k|        match self {
 1416|  8.49k|            Self::Iri(iri) => write!(f, "{iri}"),
 1417|  2.20k|            Self::A => f.write_str(" a "),
 1418|  1.52k|            Self::Negated(n) => write!(f, "!{n}"),
 1419|  21.0k|            Self::Child(c) => write!(f, "({c})"),
 1420|       |        }
 1421|  33.2k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsH_1__NtB4_14DataBlockValueNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1004|  11.6k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsF_1__NtB4_9DataBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  924|    765|#[derive(Arbitrary)]
_RNvXsa_Cs6Lc7YXa2Vl_12sparql_smithNtB5_6UpdateNtCs9EteCURj6Wn_9arbitrary9Arbitrary9size_hint:
  418|  3.56k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  419|  3.56k|        (20, None) // TODO: is it good?
  420|  3.56k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsv_1__NtB4_17GroupGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  762|  19.2k|#[derive(Arbitrary)]
_RNvXsI_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14DataBlockValueNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1013|  4.97k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1014|  4.97k|        match self {
 1015|  3.13k|            Self::Iri(i) => write!(f, "{i}"),
 1016|    403|            Self::Literal(l) => write!(f, "{l}"),
 1017|  1.43k|            Self::Undef => f.write_str("UNDEF"),
 1018|       |        }
 1019|  4.97k|    }
_RNvXsi_Cs6Lc7YXa2Vl_12sparql_smithNtB5_4MoveNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  549|    627|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  550|    627|        write!(f, "MOVE ")?;
  551|    627|        if self.silent {
  552|    576|            write!(f, "SILENT ")?;
  553|     51|        }
  554|    627|        write!(f, "{} TO {}", self.from, self.to)
  555|    627|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsI_1__NtB4_17MinusGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1022|     99|#[derive(Arbitrary)]
_RNvXs1q_Cs6Lc7YXa2Vl_12sparql_smithNtB6_11BuiltInCallNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1905|    759|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1906|    759|        match self {
 1907|     13|            Self::Str(v) => write!(f, "STR({v})"),
 1908|      5|            Self::Lang(v) => write!(f, "LANG({v})"),
 1909|      1|            Self::Datatype(v) => write!(f, "DATATYPE({v})"),
 1910|    486|            Self::Bound(v) => write!(f, "BOUND({v})"),
 1911|      5|            Self::Iri(v) => write!(f, "IRI({v})"),
 1912|     11|            Self::Bnode(v) => write!(f, "BNODE({v})"),
 1913|    113|            Self::Coalesce(vs) => write!(f, "COALESCE{vs}"),
 1914|      0|            Self::If(a, b, c) => write!(f, "IF({a}, {b}, {c})"),
 1915|      0|            Self::StrLang(a, b) => write!(f, "STRLANG({a}, {b})"),
 1916|      3|            Self::StrDt(a, b) => write!(f, "STRDT({a}, {b})"),
 1917|      1|            Self::SameTerm(a, b) => write!(f, "sameTerm({a}, {b})"),
 1918|      5|            Self::IsIri(e) => write!(f, "isIRI({e})"),
 1919|     17|            Self::IsBlank(e) => write!(f, "isBlank({e})"),
 1920|      3|            Self::IsLiteral(e) => write!(f, "isLiteral({e})"),
 1921|      3|            Self::IsNumeric(e) => write!(f, "isNumeric({e})"),
 1922|     50|            Self::Exists(e) => write!(f, "{e}"),
 1923|     43|            Self::NotExists(e) => write!(f, "{e}"),
 1924|       |        }
 1925|    759|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsd_1__NtB4_13UpdateVariantNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  438|  20.6k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsY_1__NtB4_14ObjectListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1296|  32.8k|#[derive(Arbitrary)]
_RNvXsb_Cs6Lc7YXa2Vl_12sparql_smithNtB5_6UpdateNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  424|  2.76k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  425|  8.43k|        for variant in &self.inner.variants {
  426|  5.67k|            write!(f, "{variant} ; ")?;
  427|       |        }
  428|  2.76k|        Ok(())
  429|  2.76k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsy_1__NtB4_12TriplesBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  812|  5.35k|#[derive(Arbitrary)]
_RNvXsx_Cs6Lc7YXa2Vl_12sparql_smithNtB5_12TriplesBlockNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  820|  1.58k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  821|  1.58k|        write!(f, "{}", self.start)?;
  822|  1.58k|        if let Some(end) = &self.end {
  823|     77|            f.write_str(" . ")?;
  824|     77|            if let Some(end) = end {
  825|     48|                write!(f, "{end}")?;
  826|     29|            }
  827|  1.50k|        }
  828|  1.58k|        Ok(())
  829|  1.58k|    }
_RNvXs1h_Cs6Lc7YXa2Vl_12sparql_smithNtB6_9GraphTermNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1656|  1.40k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1657|  1.40k|        match self {
 1658|    253|            Self::Iri(iri) => write!(f, "{iri}"),
 1659|    115|            Self::Literal(l) => write!(f, "{l}"),
 1660|  1.03k|            Self::Nil => f.write_str(" () "),
 1661|       |        }
 1662|  1.40k|    }
_RNvXs7_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14GroupConditionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  246|    203|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  247|    203|        match self {
  248|     34|            Self::BuiltInCall(c) => write!(f, "{c}"),
  249|       |            // Self::FunctionCall(c) => write!(f, "{c}"),
  250|      3|            Self::Projection(e, v) => {
  251|      3|                if let Some(v) = v {
  252|      0|                    write!(f, "({e} AS {v})")
  253|       |                } else {
  254|      3|                    write!(f, "({e})")
  255|       |                }
  256|       |            }
  257|    166|            Self::Var(v) => write!(f, "{v}"),
  258|       |        }
  259|    203|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsL_1__NtB4_10ConstraintNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1063|    203|#[derive(Arbitrary)]
_RNvXsg_Cs6Lc7YXa2Vl_12sparql_smithNtB5_6CreateNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  513|    274|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  514|    274|        write!(f, "CREATE ")?;
  515|    274|        if self.silent {
  516|    264|            write!(f, "SILENT ")?;
  517|     10|        }
  518|    274|        write!(f, "{}", self.target)
  519|    274|    }
_RNvXsa_Cs6Lc7YXa2Vl_12sparql_smithNtB5_6UpdateNtCs9EteCURj6Wn_9arbitrary9Arbitrary19arbitrary_take_rest:
  412|  3.56k|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
  413|  3.56k|        Ok(Self {
  414|  3.56k|            inner: UpdateContent::arbitrary_take_rest(u)?,
  415|       |        })
  416|  3.56k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1_1__NtB4_9SubSelectNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  101|  9.54k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths5_1__NtB4_16SelectProjectionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  142|  8.05k|#[derive(Arbitrary)]
_RNvXs1o_Cs6Lc7YXa2Vl_12sparql_smithNtB6_17PrimaryExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1805|  8.42k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1806|  8.42k|        match self {
 1807|    535|            Self::Bracketted(e) => write!(f, "{e}"),
 1808|    720|            Self::BuiltInCall(e) => write!(f, "{e}"),
 1809|    532|            Self::IriOrFunction(e) => write!(f, "{e}"),
 1810|  2.27k|            Self::Literal(e) => write!(f, "{e}"),
 1811|  4.36k|            Self::Var(e) => write!(f, "{e}"),
 1812|       |        }
 1813|  8.42k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__NtB4_14CollectionPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1542|  4.48k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths8_1__NtB4_11GroupClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  219|    309|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsc_1__NtB4_13UpdateContentNtCs9EteCURj6Wn_9arbitrary9Arbitrary19arbitrary_take_rest:
  398|  10.6k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__NtB4_17PrimaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1794|   145k|#[derive(Arbitrary)]
_RNvXs18_Cs6Lc7YXa2Vl_12sparql_smithNtB6_25BlankNodePropertyListPathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1520|  9.47k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1521|  9.47k|        write!(f, "[ {} ]", self.inner)
 1522|  9.47k|    }
_RNvXsv_Cs6Lc7YXa2Vl_12sparql_smithNtB5_17GroupGraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  770|  4.60k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  771|  4.60k|        f.write_str(" { ")?;
  772|  4.60k|        match self {
  773|  3.07k|            Self::GroupGraphPatternSub(p) => write!(f, "{p}"),
  774|  1.53k|            Self::SubSelect(s) => write!(f, "{s}"),
  775|      0|        }?;
  776|  4.60k|        f.write_str(" } ")
  777|  4.60k|    }
_RNvXs5_Cs6Lc7YXa2Vl_12sparql_smithNtB5_16SolutionModifierNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  200|  1.53k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  201|  1.53k|        if let Some(group) = &self.group {
  202|     49|            write!(f, " {group}")?;
  203|  1.48k|        }
  204|  1.53k|        if let Some(having) = &self.having {
  205|     21|            write!(f, " {having}")?;
  206|  1.51k|        }
  207|       |        #[cfg(feature = "order")]
  208|       |        if let Some(order) = &self.order {
  209|       |            write!(f, " {order}")?;
  210|       |        }
  211|       |        #[cfg(feature = "limit-offset")]
  212|       |        if let Some(limit_offset) = &self.limit_offset {
  213|       |            write!(f, " {limit_offset}")?;
  214|       |        }
  215|  1.53k|        Ok(())
  216|  1.53k|    }
_RNvXs1r_Cs6Lc7YXa2Vl_12sparql_smithNtB6_10ExistsFuncNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1935|     50|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1936|     50|        write!(f, "EXISTS {}", self.pattern)
 1937|     50|    }
_RNvXs11_Cs6Lc7YXa2Vl_12sparql_smithNtB6_7PathModNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1395|  8.25k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1396|  8.25k|        match self {
 1397|  4.71k|            Self::ZeroOrOne => f.write_str(" ? "),
 1398|  1.10k|            Self::ZeroOrMore => f.write_str(" * "),
 1399|  2.43k|            Self::OneOrMore => f.write_str(" + "),
 1400|       |        }
 1401|  8.25k|    }
_RNvXs1d_Cs6Lc7YXa2Vl_12sparql_smithNtB6_9VarOrTermNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1599|  7.66k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1600|  7.66k|        match self {
 1601|  6.26k|            Self::Var(v) => write!(f, "{v}"),
 1602|  1.40k|            Self::GraphTerm(t) => write!(f, "{t}"),
 1603|       |        }
 1604|  7.66k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__NtB4_23ConditionalOrExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1668|  43.3k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__NtB4_20BrackettedExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1816|  20.9k|#[derive(Arbitrary)]
_RNvXsh_Cs6Lc7YXa2Vl_12sparql_smithNtB5_3AddNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  531|    279|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  532|    279|        write!(f, "ADD ")?;
  533|    279|        if self.silent {
  534|    240|            write!(f, "SILENT ")?;
  535|     39|        }
  536|    279|        write!(f, "{} TO {}", self.from, self.to)
  537|    279|    }
_RNvXst_Cs6Lc7YXa2Vl_12sparql_smithNtB5_8QuadDataNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  740|    322|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  741|    322|        f.write_str(" { ")?;
  742|  4.01k|        for (s, p, o, g) in &self.quads {
  743|  3.69k|            if let Some(g) = g {
  744|  3.38k|                write!(f, "GRAPH {g} {{ {s} {p} {o} }} ")?;
  745|       |            } else {
  746|    303|                write!(f, "{s} {p} {o} . ")?;
  747|       |            }
  748|       |        }
  749|    322|        f.write_str("}")
  750|    322|    }
_RNvXs1p_Cs6Lc7YXa2Vl_12sparql_smithNtB6_20BrackettedExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1823|    554|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1824|    554|        write!(f, "({})", self.inner)
 1825|    554|    }
_RNvXsZ_Cs6Lc7YXa2Vl_12sparql_smithNtB5_7PathEltNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1361|  33.2k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1362|  33.2k|        write!(f, "{}", self.path)?;
 1363|  33.2k|        if let Some(mode) = &self.mode {
 1364|  8.25k|            write!(f, "{mode}")?;
 1365|  25.0k|        }
 1366|  33.2k|        Ok(())
 1367|  33.2k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsa_1__NtB4_12HavingClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  262|    170|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1r_1__NtB4_10ExistsFuncNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1928|  1.16k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsO_1__NtB4_14ExpressionListNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1118|  20.2k|#[derive(Arbitrary)]
_RNvXsm_Cs6Lc7YXa2Vl_12sparql_smithNtB5_11DeleteWhereNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  607|    366|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  608|    366|        write!(f, "DELETE WHERE {}", self.data)
  609|    366|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsm_1__NtB4_11DeleteWhereNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  600|  1.13k|#[derive(Arbitrary)]
_RNvXsU_Cs6Lc7YXa2Vl_12sparql_smithNtB5_16PropertyListPathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1240|    599|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1241|    599|        if let Some(p) = &self.inner {
 1242|     28|            write!(f, "{p}")
 1243|       |        } else {
 1244|    571|            Ok(())
 1245|       |        }
 1246|    599|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsA_1__NtB4_20OptionalGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  862|    798|#[derive(Arbitrary)]
_RNvXs1g_Cs6Lc7YXa2Vl_12sparql_smithNtB6_3VarNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1641|  42.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1642|  42.1k|        write!(f, " ?{} ", self.value)
 1643|  42.1k|    }
_RNvXsR_Cs6Lc7YXa2Vl_12sparql_smithNtB5_4VerbNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1172|  12.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1173|  12.7k|        match self {
 1174|  3.48k|            Self::VarOrIri(iri) => write!(f, "{iri}"),
 1175|  9.25k|            Self::A => f.write_str(" a "),
 1176|       |        }
 1177|  12.7k|    }
_RNvXsf_Cs6Lc7YXa2Vl_12sparql_smithNtB5_4DropNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  496|    208|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  497|    208|        write!(f, "DROP ")?;
  498|    208|        if self.silent {
  499|    119|            write!(f, "SILENT ")?;
  500|     89|        }
  501|    208|        write!(f, "{}", self.target)
  502|    208|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsb_1__NtB4_12ValuesClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  378|  2.75k|#[derive(Arbitrary)]
_RNvXsr_Cs6Lc7YXa2Vl_12sparql_smithNtB5_11QuadPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  702|  4.74k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  703|  4.74k|        f.write_str(" { ")?;
  704|  17.4k|        for (s, p, o, g) in &self.quads {
  705|  12.7k|            if let Some(g) = g {
  706|  10.8k|                write!(f, "GRAPH {g} {{ {s} {p} {o} }} ")?;
  707|       |            } else {
  708|  1.85k|                write!(f, "{s} {p} {o} . ")?;
  709|       |            }
  710|       |        }
  711|  4.74k|        f.write_str("}")
  712|  4.74k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsX_1__NtB4_23PropertyListPathElementNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1263|  1.17k|#[derive(Arbitrary)]
_RNvXs1e_Cs6Lc7YXa2Vl_12sparql_smithNtB6_8VarOrIriNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1615|  27.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1616|  27.1k|        match self {
 1617|  8.84k|            Self::Var(v) => write!(f, "{v}"),
 1618|  18.3k|            Self::Iri(t) => write!(f, "{t}"),
 1619|       |        }
 1620|  27.1k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths10_1__NtB4_12PathSequenceNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1336|  78.9k|#[derive(Arbitrary)]
_RNvXs1n_Cs6Lc7YXa2Vl_12sparql_smithNtB6_15UnaryExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1784|  8.42k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1785|  8.42k|        match self {
 1786|  1.13k|            Self::Not(e) => write!(f, "!{e}"),
 1787|    316|            Self::Plus(e) => write!(f, "+{e}"),
 1788|  2.36k|            Self::Minus(e) => write!(f, "-{e}"),
 1789|  4.60k|            Self::Base(e) => write!(f, "{e}"),
 1790|       |        }
 1791|  8.42k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsw_1__NtB4_20GroupGraphPatternSubNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  780|  9.65k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__NtB4_9VarOrTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1591|  23.9k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__NtB4_24ConditionalAndExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1685|  44.0k|#[derive(Arbitrary)]
_RNvXs1k_Cs6Lc7YXa2Vl_12sparql_smithNtB6_20RelationalExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1720|  2.16k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1721|  2.16k|        match self {
 1722|    431|            Self::Base(e) => write!(f, "{e}"),
 1723|    144|            Self::Equal(a, b) => write!(f, "{a} = {b}"),
 1724|     21|            Self::NotEqual(a, b) => write!(f, "{a} != {b}"),
 1725|     23|            Self::Less(a, b) => write!(f, "{a} < {b}"),
 1726|     30|            Self::LessOrEqual(a, b) => write!(f, "{a} <= {b}"),
 1727|     48|            Self::Greater(a, b) => write!(f, "{a} > {b}"),
 1728|    242|            Self::GreaterOrEqual(a, b) => write!(f, "{a} >= {b}"),
 1729|    104|            Self::In(a, b) => write!(f, "{a} IN {b}"),
 1730|  1.11k|            Self::NotIn(a, b) => write!(f, "{a} NOT IN {b}"),
 1731|       |        }
 1732|  2.16k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths4_1__NtB4_12SelectValuesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  133|  9.52k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths12_1__NtB4_16PathEltOrInverseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1370|   110k|#[derive(Arbitrary)]
_RNvXs1u_Cs6Lc7YXa2Vl_12sparql_smithNtB6_7LiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1980|  11.1k|    fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {
 1981|  11.1k|        Ok(Self {
 1982|  11.1k|            value: u.choose(LITERALS.as_slice())?,
 1983|       |        })
 1984|  11.1k|    }
_RNvXs1f_Cs6Lc7YXa2Vl_12sparql_smithNtB6_3VarNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1629|  72.9k|    fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {
 1630|  72.9k|        Ok(Self {
 1631|  72.9k|            value: u.int_in_range(1..=NUMBER_OF_VARIABLES)?,
 1632|       |        })
 1633|  72.9k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths16_1__NtB4_20PathOneInPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1449|  26.8k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsk_1__NtB4_10InsertDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  576|    750|#[derive(Arbitrary)]
_RNvXs4_Cs6Lc7YXa2Vl_12sparql_smithNtB5_11WhereClauseNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  180|  1.53k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  181|  1.53k|        if self.with_where {
  182|    470|            f.write_str(" WHERE ")?;
  183|  1.06k|        }
  184|  1.53k|        write!(f, "{}", self.group_graph_pattern)
  185|  1.53k|    }
_RNvXsP_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14ExpressionListNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1125|  1.33k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1126|  1.33k|        f.write_str("(")?;
 1127|  1.33k|        for (i, e) in self.inner.iter().enumerate() {
 1128|    571|            if i > 0 {
 1129|      6|                f.write_str(", ")?;
 1130|    565|            }
 1131|    571|            write!(f, "{e}")?;
 1132|       |        }
 1133|  1.33k|        f.write_str(")")
 1134|  1.33k|    }
_RNvXsd_Cs6Lc7YXa2Vl_12sparql_smithNtB5_13UpdateVariantNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  455|  5.67k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  456|  5.67k|        match self {
  457|  1.29k|            UpdateVariant::Load(a) => a.fmt(f),
  458|    208|            UpdateVariant::Drop(a) => a.fmt(f),
  459|    279|            UpdateVariant::Add(a) => a.fmt(f),
  460|    627|            UpdateVariant::Move(a) => a.fmt(f),
  461|    115|            UpdateVariant::Copy(a) => a.fmt(f),
  462|    274|            UpdateVariant::Crate(a) => a.fmt(f),
  463|    250|            UpdateVariant::InsertData(a) => a.fmt(f),
  464|     72|            UpdateVariant::DeleteData(a) => a.fmt(f),
  465|    366|            UpdateVariant::DeleteWhere(a) => a.fmt(f),
  466|  2.18k|            UpdateVariant::Modify(a) => a.fmt(f),
  467|       |        }
  468|  5.67k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithss_1__NtB4_17VarOrIriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  694|  48.0k|#[derive(Arbitrary)]
_RNvXs1c_Cs6Lc7YXa2Vl_12sparql_smithNtB6_13GraphNodePathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1583|  16.9k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1584|  16.9k|        match self {
 1585|  6.67k|            Self::VarOrTerm(t) => write!(f, "{t}"),
 1586|  10.2k|            Self::TriplesNodePath(p) => write!(f, "{p}"),
 1587|       |        }
 1588|  16.9k|    }
_RNvXs1l_Cs6Lc7YXa2Vl_12sparql_smithNtB6_18AdditiveExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1747|  2.66k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1748|  2.66k|        match self {
 1749|    701|            Self::Base(e) => write!(f, "{e}"),
 1750|    235|            Self::Plus(a, b) => write!(f, "{a} + {b}"),
 1751|  1.73k|            Self::Minus(a, b) => write!(f, "{a} - {b}"),
 1752|       |        }
 1753|  2.66k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsq_1__NtB4_11GraphRefAllNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  666|  4.99k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithso_1__NtB4_14GraphOrDefaultNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  636|  7.02k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsT_1__NtB4_22TriplesSameSubjectPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1201|  5.35k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithst_1__NtB4_8QuadDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  725|    978|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsz_1__NtB4_22GraphPatternNotTriplesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  832|  3.30k|#[derive(Arbitrary)]
_RNvXss_Cs6Lc7YXa2Vl_12sparql_smithNtB5_17VarOrIriOrLiteralNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  716|  12.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  717|  12.7k|        match self {
  718|  2.59k|            VarOrIriOrLiteral::Iri(i) => i.fmt(f),
  719|  1.44k|            VarOrIriOrLiteral::Literal(l) => l.fmt(f),
  720|  8.69k|            VarOrIriOrLiteral::Var(v) => v.fmt(f),
  721|       |        }
  722|  12.7k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsr_1__NtB4_11QuadPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  686|  18.9k|#[derive(Arbitrary)]
_RNvXsE_Cs6Lc7YXa2Vl_12sparql_smithNtB5_9DataBlockNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  932|    232|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  933|    232|        match self {
  934|     41|            Self::OneVar(e) => write!(f, "{e}"),
  935|    191|            Self::Full(c) => write!(f, "{c}"),
  936|       |        }
  937|    232|    }
_RNvXs2_Cs6Lc7YXa2Vl_12sparql_smithNtB5_9SubSelectNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  111|  1.53k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  112|  1.53k|        write!(
  113|  1.53k|            f,
  114|  1.53k|            "{}{}{}{}",
  115|  1.53k|            self.select_clause, self.where_clause, self.solution_modifier, self.values_clause
  116|  1.53k|        )
  117|  1.53k|    }
_RNvXs1x_Cs6Lc7YXa2Vl_12sparql_smithNtB6_3IriNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 2015|  53.6k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 2016|  53.6k|        write!(f, " <http://example.org/{}> ", self.value)
 2017|  53.6k|    }
_RNvXsY_Cs6Lc7YXa2Vl_12sparql_smithNtB5_12PathSequenceNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1344|  24.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1345|  24.5k|        write!(f, "{}", self.start)?;
 1346|  33.2k|        for other in &self.others {
 1347|  8.76k|            write!(f, " / {other}")?;
 1348|       |        }
 1349|  24.5k|        Ok(())
 1350|  24.5k|    }
_RNvXs1a_Cs6Lc7YXa2Vl_12sparql_smithNtB6_14CollectionPathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1550|  1.36k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1551|  1.36k|        write!(f, "( {}", self.start)?;
 1552|  2.88k|        for e in &self.others {
 1553|  1.52k|            write!(f, " {e}")?;
 1554|       |        }
 1555|  1.36k|        f.write_str(" )")
 1556|  1.36k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsp_1__NtB4_8GraphRefNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  654|  3.89k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths11_1__NtB4_7PathEltNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1353|   110k|#[derive(Arbitrary)]
_RNvXs1v_Cs6Lc7YXa2Vl_12sparql_smithNtB6_7LiteralNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1992|  6.67k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1993|  6.67k|        write!(f, "{}", self.value)
 1994|  6.67k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsC_1__NtB4_17GraphGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  886|    294|#[derive(Arbitrary)]
_RNvXs13_Cs6Lc7YXa2Vl_12sparql_smithNtB6_22PathNegatedPropertySetNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1435|  1.52k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1436|  1.52k|        match self {
 1437|    304|            Self::Single(p) => write!(f, "{p}"),
 1438|  1.21k|            Self::Multiple { start, others } => {
 1439|  1.21k|                write!(f, " ( {start}")?;
 1440|  7.38k|                for other in others {
 1441|  6.17k|                    write!(f, " | {other}")?;
 1442|       |                }
 1443|  1.21k|                f.write_str(" ) ")
 1444|       |            }
 1445|       |        }
 1446|  1.52k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsf_1__NtB4_4DropNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  488|    783|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths9_1__NtB4_14GroupConditionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  236|  1.08k|#[derive(Arbitrary)]
_RNvXsq_Cs6Lc7YXa2Vl_12sparql_smithNtB5_11GraphRefAllNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  676|  1.50k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  677|  1.50k|        match self {
  678|    933|            GraphRefAll::GraphRef(g) => g.fmt(f),
  679|    240|            GraphRefAll::Default => write!(f, "DEFAULT"),
  680|     52|            GraphRefAll::Named => write!(f, "NAMED"),
  681|    281|            GraphRefAll::All => write!(f, "ALL"),
  682|       |        }
  683|  1.50k|    }
_RNvXsC_Cs6Lc7YXa2Vl_12sparql_smithNtB5_4BindNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  907|      2|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  908|      2|        write!(f, " BIND({} AS {})", self.expression, self.var)
  909|      2|    }
_RNvXs1m_Cs6Lc7YXa2Vl_12sparql_smithNtB6_24MultiplicativeExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1765|  4.63k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1766|  4.63k|        match self {
 1767|    850|            Self::Base(e) => write!(f, "{e}"),
 1768|    505|            Self::Mul(a, b) => write!(f, "{a} * {b}"),
 1769|  3.28k|            Self::Div(a, b) => write!(f, "{a} / {b}"),
 1770|       |        }
 1771|  4.63k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths3_1__NtB4_12SelectOptionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  127|  6.67k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsW_1__NtB4_28PropertyListPathNotEmptyVerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1257|  34.7k|#[derive(Arbitrary)]
_RNvXsj_Cs6Lc7YXa2Vl_12sparql_smithNtB5_4CopyNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  567|    115|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  568|    115|        write!(f, "MOVE ")?;
  569|    115|        if self.silent {
  570|     89|            write!(f, "SILENT ")?;
  571|     26|        }
  572|    115|        write!(f, "{} TO {}", self.from, self.to)
  573|    115|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths19_1__NtB4_15TriplesNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1497|  34.8k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__NtB4_13IriOrFunctionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1952|  9.74k|#[derive(Arbitrary)]
_RNvXsF_Cs6Lc7YXa2Vl_12sparql_smithNtB5_16InlineDataOneVarNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  948|     41|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  949|     41|        write!(f, "{} {{", self.var)?;
  950|    375|        for v in &self.values {
  951|    334|            write!(f, " {v}")?;
  952|       |        }
  953|     41|        write!(f, " }}")
  954|     41|    }
_RNvXso_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14GraphOrDefaultNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  645|  2.04k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  646|  2.04k|        match self {
  647|    909|            GraphOrDefault::Default => write!(f, "DEFAULT"),
  648|    891|            GraphOrDefault::Graph(g) => write!(f, "GRAPH {g}"),
  649|    242|            GraphOrDefault::Iri(g) => g.fmt(f),
  650|       |        }
  651|  2.04k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__NtB4_8VarOrIriNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1607|   102k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__NtB4_25BlankNodePropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1513|  30.1k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__NtB4_18AdditiveExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1738|  57.9k|#[derive(Arbitrary)]
_RNvXsD_Cs6Lc7YXa2Vl_12sparql_smithNtB5_10InlineDataNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  919|    168|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  920|    168|        write!(f, "VALUES {}", self.inner)
  921|    168|    }
_RNvXsM_Cs6Lc7YXa2Vl_12sparql_smithNtB5_10ConstraintNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1072|     24|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1073|     24|        match self {
 1074|     19|            Self::BrackettedExpression(e) => write!(f, "{e}"),
 1075|      5|            Self::BuiltInCall(c) => write!(f, "{c}"),
 1076|       |            // Self::FunctionCall(c) => write!(f, "{c}"),
 1077|       |        }
 1078|     24|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsh_1__NtB4_3AddNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  522|  1.02k|#[derive(Arbitrary)]
_RNvXs1j_Cs6Lc7YXa2Vl_12sparql_smithNtB6_24ConditionalAndExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1693|  1.86k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1694|  1.86k|        write!(f, "{}", self.start)?;
 1695|  2.16k|        for e in &self.others {
 1696|    300|            write!(f, " && {e}")?;
 1697|       |        }
 1698|  1.86k|        Ok(())
 1699|  1.86k|    }
_RNvXs9_Cs6Lc7YXa2Vl_12sparql_smithNtB5_12ValuesClauseNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  385|  1.53k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  386|  1.53k|        if let Some(value) = &self.value {
  387|     64|            write!(f, " VALUES {value}")
  388|       |        } else {
  389|  1.47k|            Ok(())
  390|       |        }
  391|  1.53k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsu_1__NtB4_12IriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  733|  11.0k|#[derive(Arbitrary)]
_RNvXs1w_Cs6Lc7YXa2Vl_12sparql_smithNtB6_3IriNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 2003|  64.5k|    fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {
 2004|  64.5k|        Ok(Self {
 2005|  64.5k|            value: u.int_in_range(1..=NUMBER_OF_NAMED_NODES)?,
 2006|       |        })
 2007|  64.5k|    }
_RNvXs6_Cs6Lc7YXa2Vl_12sparql_smithNtB5_11GroupClauseNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  227|     49|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  228|     49|        write!(f, "GROUP BY {}", self.start)?;
  229|    203|        for o in &self.others {
  230|    154|            write!(f, " {o}")?;
  231|       |        }
  232|     49|        Ok(())
  233|     49|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__NtB4_15UnaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1774|   145k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__NtB4_24MultiplicativeExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1756|  87.3k|#[derive(Arbitrary)]
_RNvXsp_Cs6Lc7YXa2Vl_12sparql_smithNtB5_8GraphRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  661|  1.20k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  662|  1.20k|        write!(f, "GRAPH {}", self.iri)
  663|  1.20k|    }
_RNvXsB_Cs6Lc7YXa2Vl_12sparql_smithNtB5_17GraphGraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  894|     83|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  895|     83|        write!(f, " GRAPH {} {}", self.graph, self.inner)
  896|     83|    }
_RNvXsK_Cs6Lc7YXa2Vl_12sparql_smithNtB5_24GroupOrUnionGraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1042|    129|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1043|    129|        write!(f, "{}", self.start)?;
 1044|    148|        for other in &self.others {
 1045|     19|            write!(f, " UNION {other}")?;
 1046|       |        }
 1047|    129|        Ok(())
 1048|    129|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths7_1__NtB4_16SolutionModifierNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  188|  2.99k|#[derive(Arbitrary)]
_RNvXsW_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14ObjectListPathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1304|  10.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1305|  10.8k|        write!(f, "{}", self.start)?;
 1306|  14.0k|        for other in &self.others {
 1307|  3.20k|            write!(f, " , {other}")?;
 1308|       |        }
 1309|  10.8k|        Ok(())
 1310|  10.8k|    }
_RNvXs17_Cs6Lc7YXa2Vl_12sparql_smithNtB6_15TriplesNodePathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1505|  10.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1506|  10.8k|        match self {
 1507|  1.36k|            Self::CollectionPath(p) => write!(f, "{p}"),
 1508|  9.47k|            Self::BlankNodePropertyListPath(p) => write!(f, "{p}"),
 1509|       |        }
 1510|  10.8k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsB_1__NtB4_19LateralGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  874|  1.05k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsK_1__NtB4_6FilterNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1051|     27|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__NtB4_20RelationalExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1705|  50.9k|#[derive(Arbitrary)]
_RNvXsu_Cs6Lc7YXa2Vl_12sparql_smithNtB5_12IriOrLiteralNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  754|  3.69k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  755|  3.69k|        match self {
  756|  1.24k|            IriOrLiteral::Iri(i) => i.fmt(f),
  757|  2.44k|            IriOrLiteral::Literal(l) => l.fmt(f),
  758|       |        }
  759|  3.69k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsR_1__NtB4_4VerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1164|  48.2k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths13_1__NtB4_7PathModNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1386|  30.5k|#[derive(Arbitrary)]
_RNvXs10_Cs6Lc7YXa2Vl_12sparql_smithNtB6_16PathEltOrInverseNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1378|  33.2k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1379|  33.2k|        match self {
 1380|  10.1k|            Self::PathElt(e) => write!(f, "{e}"),
 1381|  23.1k|            Self::Inverse(e) => write!(f, " ^{e}"),
 1382|       |        }
 1383|  33.2k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__NtB4_11BuiltInCallNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1828|  13.2k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__NtB4_9GraphTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1646|  4.69k|#[derive(Arbitrary)]
_RNvXsn_Cs6Lc7YXa2Vl_12sparql_smithNtB5_6ModifyNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  624|  2.18k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  625|  2.18k|        if let Some(with) = &self.with {
  626|  1.97k|            write!(f, "WITH {with} ")?;
  627|    212|        }
  628|  2.18k|        write!(
  629|  2.18k|            f,
  630|  2.18k|            "DELETE {} INSERT {} WHERE {}",
  631|  2.18k|            self.delete, self.insert, self.where_
  632|  2.18k|        )
  633|  2.18k|    }
_RNvXsz_Cs6Lc7YXa2Vl_12sparql_smithNtB5_20OptionalGraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  869|    238|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  870|    238|        write!(f, " OPTIONAL {}", self.inner)
  871|    238|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsD_1__NtB4_4BindNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  899|     18|#[derive(Arbitrary)]
_RNvXsV_Cs6Lc7YXa2Vl_12sparql_smithNtB5_24PropertyListPathNotEmptyNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1270|  10.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1271|  10.4k|        match &self.start_predicate {
 1272|  1.74k|            PropertyListPathNotEmptyVerb::VerbPath(p) => write!(f, "{p}"),
 1273|  8.73k|            PropertyListPathNotEmptyVerb::VerbSimple(s) => write!(f, "{s}"),
 1274|      0|        }?;
 1275|  10.4k|        write!(f, "{}", self.start_object)?;
 1276|  11.0k|        for other in &self.others {
 1277|    537|            f.write_str(" ; ")?;
 1278|    537|            if let Some(e) = other {
 1279|    339|                match &e.predicate {
 1280|    192|                    PropertyListPathNotEmptyVerb::VerbPath(p) => write!(f, "{p}"),
 1281|    147|                    PropertyListPathNotEmptyVerb::VerbSimple(s) => write!(f, "{s}"),
 1282|      0|                }?;
 1283|    339|                write!(f, "{}", e.object)?;
 1284|    198|            }
 1285|       |        }
 1286|  10.4k|        Ok(())
 1287|  10.4k|    }
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsU_1__NtB6_16PropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1233|    482|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__33RECURSIVE_COUNT_PrimaryExpression7___getit0B7_:
 1794|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__NtB6_23ConditionalOrExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1668|    802|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths13_1__NtB6_7PathModNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1386|  10.2k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsn_1__NtB6_6ModifyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  612|      6|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsn_1__22RECURSIVE_COUNT_Modify7___getit0B7_:
  612|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__NtB6_20RelationalExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1705|    802|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsv_1__NtB6_17GroupGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  762|    471|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths14_1__NtB6_11PathPrimaryNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1404|    338|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsq_1__NtB6_11GraphRefAllNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  666|     47|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsy_1__NtB6_12TriplesBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  812|      4|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsz_1__NtB6_22GraphPatternNotTriplesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  832|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths3_1__NtB6_12SelectOptionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  127|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsR_1__NtB6_4VerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1164|     90|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__24RECURSIVE_COUNT_VarOrIri7___getit0B7_:
 1607|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsU_1__NtB6_16PropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1233|    674|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths8_1__NtB6_11GroupClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  219|    103|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths11_1__NtB6_7PathEltNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1353|    338|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths13_1__NtB6_7PathModNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1386|     22|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__NtB6_20BrackettedExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1816|  7.46k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__NtB6_24GroupOrUnionGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1034|      5|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__40RECURSIVE_COUNT_GroupOrUnionGraphPattern7___getit0B7_:
 1034|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsX_1__NtB6_23PropertyListPathElementNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1263|    393|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__NtB6_9GraphTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1646|      4|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsm_1__NtB6_11DeleteWhereNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  600|    379|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsX_1__39RECURSIVE_COUNT_PropertyListPathElement7___getit0B7_:
 1263|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths3_1__NtB6_12SelectOptionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  127|  2.22k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsn_1__NtB6_6ModifyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  612|      6|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths2_1__NtB6_12SelectClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  120|  3.18k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__NtB6_24ConditionalAndExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1685|  15.2k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__NtB6_15PathAlternativeNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1319|  24.6k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__31RECURSIVE_COUNT_UnaryExpression7___getit0B7_:
 1774|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__NtB6_13IriOrFunctionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1952|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__NtB6_23ConditionalOrExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1668|    809|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths11_1__NtB6_7PathEltNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1353|  37.0k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths5_1__NtB6_16SelectProjectionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  142|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithse_1__21RECURSIVE_COUNT_Clear7___getit0B7_:
  471|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsg_1__NtB6_6CreateNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  505|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsy_1__NtB6_12TriplesBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  812|      4|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__40RECURSIVE_COUNT_ConditionalAndExpression7___getit0B7_:
 1685|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsV_1__40RECURSIVE_COUNT_PropertyListPathNotEmpty7___getit0B7_:
 1249|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__NtB6_15UnaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1774|    802|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths16_1__NtB6_20PathOneInPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1449|  8.97k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithst_1__NtB6_8QuadDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  725|    328|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsh_1__NtB6_3AddNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  522|    342|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths10_1__NtB6_12PathSequenceNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1336|    109|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths10_1__28RECURSIVE_COUNT_PathSequence7___getit0B7_:
 1336|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsw_1__NtB6_20GroupGraphPatternSubNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  780|    499|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsb_1__28RECURSIVE_COUNT_ValuesClause7___getit0B7_:
  378|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths15_1__NtB6_22PathNegatedPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1424|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths6_1__NtB6_11WhereClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  172|  2.13k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithse_1__NtB6_5ClearNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  471|     37|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths19_1__NtB6_15TriplesNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1497|      6|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__NtB6_24GroupOrUnionGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1034|    159|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__NtB6_18AdditiveExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1738|    802|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__NtB6_15PathAlternativeNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1319|    108|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsp_1__NtB6_8GraphRefNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  654|     62|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsb_1__NtB6_12ValuesClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  378|  1.72k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsb_1__NtB6_12ValuesClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  378|  1.20k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__NtB6_9VarOrTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1591|  1.21k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths10_1__NtB6_12PathSequenceNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1336|    109|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__25RECURSIVE_COUNT_VarOrTerm7___getit0B7_:
 1591|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsx_1__46RECURSIVE_COUNT_GroupGraphPatternSubOtherBlock7___getit0B7_:
  787|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__NtB6_20BrackettedExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1816|    943|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsg_1__NtB6_6CreateNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  505|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__NtB6_13GraphNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1575|  1.06k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths2_1__NtB6_12SelectClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  120|      9|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsg_1__NtB6_6CreateNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  505|    307|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsO_1__NtB6_14ExpressionListNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1118|     79|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithst_1__24RECURSIVE_COUNT_QuadData7___getit0B7_:
  725|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsc_1__NtB6_13UpdateContentNtCs9EteCURj6Wn_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
  398|  3.56k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsk_1__NtB6_10InsertDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  576|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsT_1__NtB6_22TriplesSameSubjectPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1201|      4|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsp_1__NtB6_8GraphRefNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  654|  1.33k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths15_1__NtB6_22PathNegatedPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1424|  1.75k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsl_1__NtB6_10DeleteDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  588|     76|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsv_1__33RECURSIVE_COUNT_GroupGraphPattern7___getit0B7_:
  762|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths7_1__NtB6_16SolutionModifierNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  188|  1.79k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsD_1__NtB6_4BindNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  899|      6|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths11_1__23RECURSIVE_COUNT_PathElt7___getit0B7_:
 1353|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__NtB6_20BrackettedExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1816|    802|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsv_1__NtB6_17GroupGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  762|  6.73k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsG_1__NtB6_16InlineDataOneVarNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  940|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsG_1__32RECURSIVE_COUNT_InlineDataOneVar7___getit0B7_:
  940|      1|#[derive(Arbitrary)]
_RNCNCNvXsG_Cs6Lc7YXa2Vl_12sparql_smithNtB9_14InlineDataFullNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary00B9_:
  973|  4.76k|                |u| {
  974|  4.76k|                    row.push(u.arbitrary()?);
  975|  4.76k|                    Ok(ControlFlow::Continue(()))
  976|  4.76k|                },
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsY_1__NtB6_14ObjectListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1296|    993|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsi_1__20RECURSIVE_COUNT_Move7___getit0B7_:
  540|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsR_1__NtB6_4VerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1164|     90|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__NtB6_25BlankNodePropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1513|     12|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__NtB6_11BuiltInCallNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1828|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__27RECURSIVE_COUNT_BuiltInCall7___getit0B7_:
 1828|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsO_1__NtB6_14ExpressionListNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1118|  6.81k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithse_1__NtB6_5ClearNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  471|  1.43k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsE_1__NtB6_10InlineDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  912|    181|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsz_1__38RECURSIVE_COUNT_GraphPatternNotTriples7___getit0B7_:
  832|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths3_1__NtB6_12SelectOptionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  127|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths3_1__28RECURSIVE_COUNT_SelectOption7___getit0B7_:
  127|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__34RECURSIVE_COUNT_AdditiveExpression7___getit0B7_:
 1738|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__NtB6_9GraphTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1646|  1.56k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsk_1__NtB6_10InsertDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  576|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsF_1__NtB6_9DataBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  924|    255|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsd_1__NtB6_13UpdateVariantNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  438|      7|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsi_1__NtB6_4MoveNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  540|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsL_1__26RECURSIVE_COUNT_Constraint7___getit0B7_:
 1063|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__NtB6_8VarOrIriNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1607|    164|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__NtB6_11BuiltInCallNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1828|  4.41k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__NtB6_13IriOrFunctionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1952|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsf_1__NtB6_4DropNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  488|    263|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__29RECURSIVE_COUNT_IriOrFunction7___getit0B7_:
 1952|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsf_1__NtB6_4DropNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  488|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithso_1__NtB6_14GraphOrDefaultNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  636|     15|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__31RECURSIVE_COUNT_PathAlternative7___getit0B7_:
 1319|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsw_1__NtB6_20GroupGraphPatternSubNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  780|  3.55k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsr_1__NtB6_11QuadPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  686|    144|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsK_1__NtB6_6FilterNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1051|      9|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths19_1__NtB6_15TriplesNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1497|      6|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsw_1__36RECURSIVE_COUNT_GroupGraphPatternSub7___getit0B7_:
  780|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__NtB6_17PrimaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1794|    948|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsp_1__NtB6_8GraphRefNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  654|     62|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1_1__NtB6_9SubSelectNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  101|      9|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__NtB6_18AdditiveExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1738|  19.7k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithse_1__NtB6_5ClearNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  471|     37|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsH_1__30RECURSIVE_COUNT_DataBlockValue7___getit0B7_:
 1004|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsL_1__NtB6_10ConstraintNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1063|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsW_1__NtB6_28PropertyListPathNotEmptyVerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1257|     42|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__NtB6_18AdditiveExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1738|    958|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsV_1__NtB6_24PropertyListPathNotEmptyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1249|     39|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__NtB6_8VarOrIriNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1607|    164|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__NtB6_14CollectionPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1542|  1.53k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsA_1__NtB6_20OptionalGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  862|    266|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__NtB6_15PathAlternativeNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1319|    108|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__NtB6_13GraphNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1575|  18.6k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__NtB6_23ConditionalOrExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1668|  14.9k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsu_1__28RECURSIVE_COUNT_IriOrLiteral7___getit0B7_:
  733|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsY_1__NtB6_14ObjectListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1296|  11.6k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths14_1__27RECURSIVE_COUNT_PathPrimary7___getit0B7_:
 1404|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__NtB6_14CollectionPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1542|     61|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__NtB6_13GraphNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1575|  1.06k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsq_1__27RECURSIVE_COUNT_GraphRefAll7___getit0B7_:
  666|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsa_1__NtB6_12HavingClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  262|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsd_1__NtB6_13UpdateVariantNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  438|      7|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsj_1__NtB6_4CopyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  558|    131|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths4_1__NtB6_12SelectValuesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  133|  3.18k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths4_1__28RECURSIVE_COUNT_SelectValues7___getit0B7_:
  133|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths12_1__32RECURSIVE_COUNT_PathEltOrInverse7___getit0B7_:
 1370|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__NtB6_25BlankNodePropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1513|  10.0k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__36RECURSIVE_COUNT_BrackettedExpression7___getit0B7_:
 1816|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1r_1__NtB6_10ExistsFuncNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1928|    387|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1_1__NtB6_9SubSelectNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  101|  3.18k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsr_1__NtB6_11QuadPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  686|    144|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsX_1__NtB6_23PropertyListPathElementNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1263|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsu_1__NtB6_12IriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  733|     39|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsL_1__NtB6_10ConstraintNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1063|     69|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsr_1__NtB6_11QuadPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  686|  6.39k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__36RECURSIVE_COUNT_RelationalExpression7___getit0B7_:
 1705|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsT_1__NtB6_22TriplesSameSubjectPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1201|  1.78k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths4_1__NtB6_12SelectValuesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  133|     20|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths12_1__NtB6_16PathEltOrInverseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1370|    135|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__NtB6_9VarOrTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1591|  8.80k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsV_1__NtB6_24PropertyListPathNotEmptyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1249|     39|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__NtB6_14CollectionPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1542|     61|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__NtB6_24ConditionalAndExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1685|    802|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__NtB6_20RelationalExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1705|    808|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__25RECURSIVE_COUNT_GraphTerm7___getit0B7_:
 1646|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithss_1__NtB6_17VarOrIriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  694|    186|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsW_1__44RECURSIVE_COUNT_PropertyListPathNotEmptyVerb7___getit0B7_:
 1257|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsY_1__NtB6_14ObjectListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1296|    993|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsY_1__30RECURSIVE_COUNT_ObjectListPath7___getit0B7_:
 1296|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__NtB6_24MultiplicativeExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1756|    802|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__40RECURSIVE_COUNT_MultiplicativeExpression7___getit0B7_:
 1756|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsv_1__NtB6_17GroupGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  762|    471|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths14_1__NtB6_11PathPrimaryNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1404|    338|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths16_1__NtB6_20PathOneInPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1449|     42|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsb_1__NtB6_12ValuesClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  378|  1.20k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsq_1__NtB6_11GraphRefAllNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  666|     47|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsq_1__NtB6_11GraphRefAllNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  666|  1.69k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths5_1__32RECURSIVE_COUNT_SelectProjection7___getit0B7_:
  142|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__NtB6_9VarOrTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1591|  1.21k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsH_1__NtB6_14DataBlockValueNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1004|  5.17k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsm_1__NtB6_11DeleteWhereNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  600|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithso_1__NtB6_14GraphOrDefaultNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  636|     15|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths19_1__31RECURSIVE_COUNT_TriplesNodePath7___getit0B7_:
 1497|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__NtB6_24ConditionalAndExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1685|    802|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__NtB6_24MultiplicativeExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1756|    944|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsX_1__NtB6_23PropertyListPathElementNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1263|      3|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsp_1__24RECURSIVE_COUNT_GraphRef7___getit0B7_:
  654|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__NtB6_17PrimaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1794|  48.8k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__NtB6_13IriOrFunctionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1952|  3.25k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths7_1__NtB6_16SolutionModifierNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  188|  1.19k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsB_1__NtB6_19LateralGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  874|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsR_1__NtB6_4VerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1164|  16.1k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths2_1__NtB6_12SelectClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  120|      9|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths13_1__23RECURSIVE_COUNT_PathMod7___getit0B7_:
 1386|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths15_1__38RECURSIVE_COUNT_PathNegatedPropertySet7___getit0B7_:
 1424|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsG_1__NtB6_16InlineDataOneVarNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  940|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsg_1__22RECURSIVE_COUNT_Create7___getit0B7_:
  505|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsL_1__NtB6_10ConstraintNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1063|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__29RECURSIVE_COUNT_GraphNodePath7___getit0B7_:
 1575|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsa_1__28RECURSIVE_COUNT_HavingClause7___getit0B7_:
  262|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsz_1__NtB6_22GraphPatternNotTriplesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  832|  1.10k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsW_1__NtB6_28PropertyListPathNotEmptyVerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1257|  11.6k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths16_1__NtB6_20PathOneInPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1449|     42|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__NtB6_11BuiltInCallNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1828|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsW_1__NtB6_28PropertyListPathNotEmptyVerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1257|     42|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithso_1__NtB6_14GraphOrDefaultNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  636|  2.35k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithss_1__NtB6_17VarOrIriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  694|    186|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithst_1__NtB6_8QuadDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  725|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsm_1__NtB6_11DeleteWhereNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  600|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__39RECURSIVE_COUNT_ConditionalOrExpression7___getit0B7_:
 1668|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsk_1__NtB6_10InsertDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  576|    252|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1_1__NtB6_9SubSelectNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  101|      9|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1_1__25RECURSIVE_COUNT_SubSelect7___getit0B7_:
  101|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths5_1__NtB6_16SelectProjectionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  142|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__NtB6_20RelationalExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1705|  17.5k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsy_1__28RECURSIVE_COUNT_TriplesBlock7___getit0B7_:
  812|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths15_1__NtB6_22PathNegatedPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1424|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsx_1__NtB6_30GroupGraphPatternSubOtherBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  787|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths12_1__NtB6_16PathEltOrInverseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1370|  37.0k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths10_1__NtB6_12PathSequenceNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1336|  26.3k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__41RECURSIVE_COUNT_BlankNodePropertyListPath7___getit0B7_:
 1513|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsa_1__NtB6_12HavingClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  262|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsi_1__NtB6_4MoveNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  540|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsU_1__NtB6_16PropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1233|    482|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths6_1__27RECURSIVE_COUNT_WhereClause7___getit0B7_:
  172|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__30RECURSIVE_COUNT_CollectionPath7___getit0B7_:
 1542|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsO_1__30RECURSIVE_COUNT_ExpressionList7___getit0B7_:
 1118|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsi_1__NtB6_4MoveNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  540|    702|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsn_1__NtB6_6ModifyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  612|  3.01k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths7_1__NtB6_16SolutionModifierNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  188|  1.19k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsd_1__NtB6_13UpdateVariantNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  438|  6.89k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsI_1__NtB6_17MinusGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1022|     33|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithss_1__33RECURSIVE_COUNT_VarOrIriOrLiteral7___getit0B7_:
  694|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__NtB6_24GroupOrUnionGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1034|      5|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths6_1__NtB6_11WhereClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  172|    233|#[derive(Arbitrary)]
_RNCNvXsG_Cs6Lc7YXa2Vl_12sparql_smithNtB7_14InlineDataFullNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B7_:
  968|    290|        u.arbitrary_loop(Some(0), Some(3), |u| {
  969|    290|            let mut row = Vec::with_capacity(vars.len());
  970|    290|            u.arbitrary_loop(
  971|    290|                Some(vars.len().try_into().unwrap()),
  972|    290|                Some(vars.len().try_into().unwrap()),
  973|    290|                |u| {
  974|       |                    row.push(u.arbitrary()?);
  975|       |                    Ok(ControlFlow::Continue(()))
  976|    290|                },
  977|    290|            )?;
  978|    290|            values.push(row);
  979|    290|            Ok(ControlFlow::Continue(()))
  980|    290|        })?;
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithso_1__30RECURSIVE_COUNT_GraphOrDefault7___getit0B7_:
  636|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithst_1__NtB6_8QuadDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  725|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__NtB6_17PrimaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1794|    802|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsT_1__38RECURSIVE_COUNT_TriplesSameSubjectPath7___getit0B7_:
 1201|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsz_1__NtB6_22GraphPatternNotTriplesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  832|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsO_1__NtB6_14ExpressionListNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1118|     79|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__NtB6_15UnaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1774|  48.9k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths5_1__NtB6_16SelectProjectionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  142|  2.68k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths2_1__28RECURSIVE_COUNT_SelectClause7___getit0B7_:
  120|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths11_1__NtB6_7PathEltNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1353|    338|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__NtB6_8VarOrIriNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1607|  34.1k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__NtB6_25BlankNodePropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1513|     12|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsx_1__NtB6_30GroupGraphPatternSubOtherBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  787|  1.10k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsC_1__NtB6_17GraphGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  886|     98|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths6_1__NtB6_11WhereClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  172|    233|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithss_1__NtB6_17VarOrIriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  694|  16.1k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsH_1__NtB6_14DataBlockValueNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1004|  1.94k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsV_1__NtB6_24PropertyListPathNotEmptyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1249|  11.2k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths9_1__NtB6_14GroupConditionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  236|    360|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths16_1__36RECURSIVE_COUNT_PathOneInPropertySet7___getit0B7_:
 1449|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsy_1__NtB6_12TriplesBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  812|  1.78k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsf_1__20RECURSIVE_COUNT_Drop7___getit0B7_:
  488|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsR_1__20RECURSIVE_COUNT_Verb7___getit0B7_:
 1164|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__NtB6_24MultiplicativeExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1756|  29.5k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__NtB6_15UnaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1774|  1.00k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsT_1__NtB6_22TriplesSameSubjectPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1201|      4|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1s_1__NtB6_13NotExistsFuncNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1940|    280|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsm_1__27RECURSIVE_COUNT_DeleteWhere7___getit0B7_:
  600|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsw_1__NtB6_20GroupGraphPatternSubNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  780|    499|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsu_1__NtB6_12IriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  733|  3.70k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsa_1__NtB6_12HavingClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  262|     58|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths7_1__32RECURSIVE_COUNT_SolutionModifier7___getit0B7_:
  188|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsB_1__NtB6_19LateralGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  874|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsB_1__35RECURSIVE_COUNT_LateralGraphPattern7___getit0B7_:
  874|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsB_1__NtB6_19LateralGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  874|    352|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths14_1__NtB6_11PathPrimaryNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1404|  37.0k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__NtB6_9GraphTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1646|      4|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsU_1__32RECURSIVE_COUNT_PropertyListPath7___getit0B7_:
 1233|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsr_1__27RECURSIVE_COUNT_QuadPattern7___getit0B7_:
  686|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsk_1__26RECURSIVE_COUNT_InsertData7___getit0B7_:
  576|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths19_1__NtB6_15TriplesNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1497|  11.6k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsu_1__NtB6_12IriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  733|     39|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsf_1__NtB6_4DropNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  488|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsx_1__NtB6_30GroupGraphPatternSubOtherBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  787|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths13_1__NtB6_7PathModNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1386|     22|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsd_1__29RECURSIVE_COUNT_UpdateVariant7___getit0B7_:
  438|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths4_1__NtB6_12SelectValuesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  133|     20|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths12_1__NtB6_16PathEltOrInverseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1370|    135|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsG_1__NtB6_16InlineDataOneVarNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  940|     50|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsH_1__NtB6_14DataBlockValueNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1004|  1.94k|#[derive(Arbitrary)]


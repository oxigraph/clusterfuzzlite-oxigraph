_RNvXs1n_Cs9EteCURj6Wn_9arbitraryTNtCs6Lc7YXa2Vl_12sparql_smith3IriBv_NtBx_12IriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionBv_EENtB6_9Arbitrary9arbitraryBx_:
  575|  2.23k|            fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  576|  2.23k|                Ok(($($xs::arbitrary(u)?,)* Arbitrary::arbitrary(u)?,))
  577|  2.23k|            }
_RNvXs1n_Cs9EteCURj6Wn_9arbitraryTNtCs6Lc7YXa2Vl_12sparql_smith8VarOrIriNtBx_4VerbNtBx_17VarOrIriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionBv_EENtB6_9Arbitrary9arbitraryBx_:
  575|  14.1k|            fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  576|  14.1k|                Ok(($($xs::arbitrary(u)?,)* Arbitrary::arbitrary(u)?,))
  577|  14.1k|            }
_RNvXsp_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith15PathAlternativeENtB5_9Arbitrary9arbitraryB14_:
  925|  17.3k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|  17.3k|        Arbitrary::arbitrary(u).map(Self::new)
  927|  17.3k|    }
_RNvXsp_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith12TriplesBlockENtB5_9Arbitrary9arbitraryB14_:
  925|     37|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|     37|        Arbitrary::arbitrary(u).map(Self::new)
  927|     37|    }
_RNvXsp_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith9SubSelectENtB5_9Arbitrary9arbitraryB14_:
  925|  2.56k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|  2.56k|        Arbitrary::arbitrary(u).map(Self::new)
  927|  2.56k|    }
_RNvXsp_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith14ObjectListPathENtB5_9Arbitrary9arbitraryB14_:
  925|  8.53k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|  8.53k|        Arbitrary::arbitrary(u).map(Self::new)
  927|  8.53k|    }
_RNvXsp_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith23ConditionalOrExpressionENtB5_9Arbitrary9arbitraryB14_:
  925|  6.76k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|  6.76k|        Arbitrary::arbitrary(u).map(Self::new)
  927|  6.76k|    }
_RNvXsp_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith13GraphNodePathENtB5_9Arbitrary9arbitraryB14_:
  925|  1.11k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  926|  1.11k|        Arbitrary::arbitrary(u).map(Self::new)
  927|  1.11k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionIBu_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith12TriplesBlockEEENtB5_9Arbitrary9arbitraryB1K_:
  531|  1.39k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  1.39k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|     58|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  1.33k|            None
  536|       |        })
  537|  1.39k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxNtCs6Lc7YXa2Vl_12sparql_smith12TriplesBlockEENtB5_9Arbitrary9arbitraryB1G_:
  531|     58|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|     58|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|     37|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|     21|            None
  536|       |        })
  537|     58|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith12HavingClauseENtB5_9Arbitrary9arbitraryB17_:
  531|  1.31k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  1.31k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|     46|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  1.26k|            None
  536|       |        })
  537|  1.31k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith3IriENtB5_9Arbitrary9arbitraryB17_:
  531|  4.76k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  4.76k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  4.37k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|    390|            None
  536|       |        })
  537|  4.76k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith7PathModENtB5_9Arbitrary9arbitraryB17_:
  531|  28.2k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  28.2k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  7.54k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  20.7k|            None
  536|       |        })
  537|  28.2k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith8VarOrIriENtB5_9Arbitrary9arbitraryB17_:
  531|  14.1k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  14.1k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  12.0k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  2.05k|            None
  536|       |        })
  537|  14.1k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith24PropertyListPathNotEmptyENtB5_9Arbitrary9arbitraryB17_:
  531|    544|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|    544|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|     20|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|    524|            None
  536|       |        })
  537|    544|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith9DataBlockENtB5_9Arbitrary9arbitraryB17_:
  531|  1.28k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  1.28k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|     49|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  1.23k|            None
  536|       |        })
  537|  1.28k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith11GroupClauseENtB5_9Arbitrary9arbitraryB17_:
  531|  1.34k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  1.34k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|     78|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  1.26k|            None
  536|       |        })
  537|  1.34k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith12TriplesBlockENtB5_9Arbitrary9arbitraryB17_:
  531|  3.54k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  3.54k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  1.35k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|  2.18k|            None
  536|       |        })
  537|  3.54k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith23PropertyListPathElementENtB5_9Arbitrary9arbitraryB17_:
  531|    432|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|    432|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|    284|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|    148|            None
  536|       |        })
  537|    432|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith12SelectOptionENtB5_9Arbitrary9arbitraryB17_:
  531|  2.56k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|  2.56k|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|  1.80k|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|    756|            None
  536|       |        })
  537|  2.56k|    }
_RNvXs5_Cs9EteCURj6Wn_9arbitraryINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith3VarENtB5_9Arbitrary9arbitraryB17_:
  531|      3|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  532|      3|        Ok(if <bool as Arbitrary<'a>>::arbitrary(u)? {
  533|      1|            Some(Arbitrary::arbitrary(u)?)
  534|       |        } else {
  535|      2|            None
  536|       |        })
  537|      3|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith17GroupGraphPatternENtB5_9Arbitrary9arbitraryB12_:
  679|     92|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|     92|        u.arbitrary_iter()?.collect()
  681|     92|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith10ConstraintENtB5_9Arbitrary9arbitraryB12_:
  679|     22|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|     22|        u.arbitrary_iter()?.collect()
  681|     22|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith24ConditionalAndExpressionENtB5_9Arbitrary9arbitraryB12_:
  679|  3.26k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  3.26k|        u.arbitrary_iter()?.collect()
  681|  3.26k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith14GroupConditionENtB5_9Arbitrary9arbitraryB12_:
  679|     65|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|     65|        u.arbitrary_iter()?.collect()
  681|     65|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith20RelationalExpressionENtB5_9Arbitrary9arbitraryB12_:
  679|  4.49k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  4.49k|        u.arbitrary_iter()?.collect()
  681|  4.49k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecTNtCs6Lc7YXa2Vl_12sparql_smith8VarOrIriNtB13_4VerbNtB13_17VarOrIriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionB11_EEENtB5_9Arbitrary9arbitraryB13_:
  679|  5.40k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  5.40k|        u.arbitrary_iter()?.collect()
  681|  5.40k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith30GroupGraphPatternSubOtherBlockENtB5_9Arbitrary9arbitraryB12_:
  679|  2.82k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  2.82k|        u.arbitrary_iter()?.collect()
  681|  2.82k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith16PathEltOrInverseENtB5_9Arbitrary9arbitraryB12_:
  679|  20.2k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  20.2k|        u.arbitrary_iter()?.collect()
  681|  20.2k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith14DataBlockValueENtB5_9Arbitrary9arbitraryB12_:
  679|     34|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|     34|        u.arbitrary_iter()?.collect()
  681|     34|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith20PathOneInPropertySetENtB5_9Arbitrary9arbitraryB12_:
  679|  1.03k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  1.03k|        u.arbitrary_iter()?.collect()
  681|  1.03k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecTNtCs6Lc7YXa2Vl_12sparql_smith3IriB11_NtB13_12IriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionB11_EEENtB5_9Arbitrary9arbitraryB13_:
  679|    211|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|    211|        u.arbitrary_iter()?.collect()
  681|    211|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith23PropertyListPathElementEENtB5_9Arbitrary9arbitraryB1E_:
  679|  8.53k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  8.53k|        u.arbitrary_iter()?.collect()
  681|  8.53k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith12PathSequenceENtB5_9Arbitrary9arbitraryB12_:
  679|  18.9k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  18.9k|        u.arbitrary_iter()?.collect()
  681|  18.9k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith23ConditionalOrExpressionENtB5_9Arbitrary9arbitraryB12_:
  679|  5.37k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  5.37k|        u.arbitrary_iter()?.collect()
  681|  5.37k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith13GraphNodePathENtB5_9Arbitrary9arbitraryB12_:
  679|  9.93k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|  9.93k|        u.arbitrary_iter()?.collect()
  681|  9.93k|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith16SelectProjectionENtB5_9Arbitrary9arbitraryB12_:
  679|    897|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|    897|        u.arbitrary_iter()?.collect()
  681|    897|    }
_RNvXsa_Cs9EteCURj6Wn_9arbitraryINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtCs6Lc7YXa2Vl_12sparql_smith13UpdateVariantENtB5_9Arbitrary19arbitrary_take_restB12_:
  683|  2.99k|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
  684|  2.99k|        u.arbitrary_take_rest_iter()?.collect()
  685|  2.99k|    }
_RNvXsK_Cs9EteCURj6Wn_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|   335k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   335k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   335k|                    u.fill_buffer(&mut buf)?;
  312|   335k|                    let mut x: $unsigned = 0;
  313|  1.34M|                    for i in 0..mem::size_of::<$ty>() {
  314|  1.34M|                        x |= buf[i] as $unsigned << (i * 8);
  315|  1.34M|                    }
  316|   335k|                    Ok(x as $ty)
  317|   335k|                }
_RNvXsI_Cs9EteCURj6Wn_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|   195k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   195k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   195k|                    u.fill_buffer(&mut buf)?;
  312|   195k|                    let mut x: $unsigned = 0;
  313|   195k|                    for i in 0..mem::size_of::<$ty>() {
  314|   195k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   195k|                    }
  316|   195k|                    Ok(x as $ty)
  317|   195k|                }
_RNvXs_Cs9EteCURj6Wn_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|   195k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|   195k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|   195k|    }

_RNvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB2_12Unstructured3lenCs6Lc7YXa2Vl_12sparql_smith:
  108|   501k|    pub fn len(&self) -> usize {
  109|   501k|        self.data.len()
  110|   501k|    }
_RNvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs6Lc7YXa2Vl_12sparql_smith:
  132|   501k|    pub fn is_empty(&self) -> bool {
  133|   501k|        self.len() == 0
  134|   501k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith14GroupConditionENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|    263|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|    263|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|    263|        if keep_going {
  723|    219|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|     44|            None
  726|       |        }
  727|    263|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCs6Lc7YXa2Vl_12sparql_smith14DataBlockValueEB1c_:
  167|  3.75k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  3.75k|    where
  169|  3.75k|        A: Arbitrary<'a>,
  170|  3.75k|    {
  171|  3.75k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  3.75k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith16PathEltOrInverseEB1i_:
  606|  20.2k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  20.2k|        &'b mut self,
  608|  20.2k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  20.2k|        Ok(ArbitraryIter {
  610|  20.2k|            u: &mut *self,
  611|  20.2k|            _marker: PhantomData,
  612|  20.2k|        })
  613|  20.2k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith12PathSequenceENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  20.2k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  20.2k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  20.2k|        if keep_going {
  723|  1.31k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  18.9k|            None
  726|       |        }
  727|  20.2k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith20RelationalExpressionENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  5.22k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  5.22k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  5.22k|        if keep_going {
  723|  1.88k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  3.33k|            None
  726|       |        }
  727|  5.22k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangehECs6Lc7YXa2Vl_12sparql_smith:
  293|   110k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|   110k|    where
  295|   110k|        T: Int,
  296|   110k|    {
  297|   110k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|   110k|        self.data = &self.data[bytes_consumed..];
  299|   110k|        Ok(result)
  300|   110k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_loopNCNvXsG_Cs6Lc7YXa2Vl_12sparql_smithNtB1o_14InlineDataFullNtB5_9Arbitrary9arbitrary0EB1o_:
  692|    134|    pub fn arbitrary_loop(
  693|    134|        &mut self,
  694|    134|        min: Option<u32>,
  695|    134|        max: Option<u32>,
  696|    134|        mut f: impl FnMut(&mut Self) -> Result<ControlFlow<(), ()>>,
  697|    134|    ) -> Result<()> {
  698|    134|        let min = min.unwrap_or(0);
  699|    134|        let max = max.unwrap_or(u32::MAX);
  700|    134|
  701|    134|        for _ in 0..self.int_in_range(min..=max)? {
  702|    194|            match f(self)? {
  703|    194|                ControlFlow::Continue(_) => continue,
  704|      0|                ControlFlow::Break(_) => break,
  705|       |            }
  706|       |        }
  707|       |
  708|    134|        Ok(())
  709|    134|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith14DataBlockValueEB1i_:
  606|     34|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|     34|        &'b mut self,
  608|     34|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|     34|        Ok(ArbitraryIter {
  610|     34|            u: &mut *self,
  611|     34|            _marker: PhantomData,
  612|     34|        })
  613|     34|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith20PathOneInPropertySetEB1i_:
  606|  1.03k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  1.03k|        &'b mut self,
  608|  1.03k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  1.03k|        Ok(ArbitraryIter {
  610|  1.03k|            u: &mut *self,
  611|  1.03k|            _marker: PhantomData,
  612|  1.03k|        })
  613|  1.03k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCs6Lc7YXa2Vl_12sparql_smith13UpdateVariantEB1s_:
  620|  2.99k|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  621|  2.99k|        self,
  622|  2.99k|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  623|  2.99k|        Ok(ArbitraryTakeRestIter {
  624|  2.99k|            u: self,
  625|  2.99k|            _marker: PhantomData,
  626|  2.99k|        })
  627|  2.99k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterTNtCs6Lc7YXa2Vl_12sparql_smith3IriB1h_NtB1j_12IriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionB1h_EEEB1j_:
  606|    211|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    211|        &'b mut self,
  608|    211|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    211|        Ok(ArbitraryIter {
  610|    211|            u: &mut *self,
  611|    211|            _marker: PhantomData,
  612|    211|        })
  613|    211|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith23PropertyListPathElementEEB1U_:
  606|  8.53k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  8.53k|        &'b mut self,
  608|  8.53k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  8.53k|        Ok(ArbitraryIter {
  610|  8.53k|            u: &mut *self,
  611|  8.53k|            _marker: PhantomData,
  612|  8.53k|        })
  613|  8.53k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith23ConditionalOrExpressionEB1i_:
  606|  5.37k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  5.37k|        &'b mut self,
  608|  5.37k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  5.37k|        Ok(ArbitraryIter {
  610|  5.37k|            u: &mut *self,
  611|  5.37k|            _marker: PhantomData,
  612|  5.37k|        })
  613|  5.37k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith12PathSequenceEB1i_:
  606|  18.9k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  18.9k|        &'b mut self,
  608|  18.9k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  18.9k|        Ok(ArbitraryIter {
  610|  18.9k|            u: &mut *self,
  611|  18.9k|            _marker: PhantomData,
  612|  18.9k|        })
  613|  18.9k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith13GraphNodePathEB1i_:
  606|  9.93k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  9.93k|        &'b mut self,
  608|  9.93k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  9.93k|        Ok(ArbitraryIter {
  610|  9.93k|            u: &mut *self,
  611|  9.93k|            _marker: PhantomData,
  612|  9.93k|        })
  613|  9.93k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith16SelectProjectionEB1i_:
  606|    897|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    897|        &'b mut self,
  608|    897|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    897|        Ok(ArbitraryIter {
  610|    897|            u: &mut *self,
  611|    897|            _marker: PhantomData,
  612|    897|        })
  613|    897|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith17GroupGraphPatternEB1i_:
  606|     92|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|     92|        &'b mut self,
  608|     92|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|     92|        Ok(ArbitraryIter {
  610|     92|            u: &mut *self,
  611|     92|            _marker: PhantomData,
  612|     92|        })
  613|     92|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith24ConditionalAndExpressionEB1i_:
  606|  3.26k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  3.26k|        &'b mut self,
  608|  3.26k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  3.26k|        Ok(ArbitraryIter {
  610|  3.26k|            u: &mut *self,
  611|  3.26k|            _marker: PhantomData,
  612|  3.26k|        })
  613|  3.26k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterTNtCs6Lc7YXa2Vl_12sparql_smith8VarOrIriNtB1j_4VerbNtB1j_17VarOrIriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionB1h_EEEB1j_:
  606|  5.40k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  5.40k|        &'b mut self,
  608|  5.40k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  5.40k|        Ok(ArbitraryIter {
  610|  5.40k|            u: &mut *self,
  611|  5.40k|            _marker: PhantomData,
  612|  5.40k|        })
  613|  5.40k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith20RelationalExpressionEB1i_:
  606|  4.49k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  4.49k|        &'b mut self,
  608|  4.49k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  4.49k|        Ok(ArbitraryIter {
  610|  4.49k|            u: &mut *self,
  611|  4.49k|            _marker: PhantomData,
  612|  4.49k|        })
  613|  4.49k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith16SelectProjectionENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  1.20k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  1.20k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  1.20k|        if keep_going {
  723|    358|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|    848|            None
  726|       |        }
  727|  1.20k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith30GroupGraphPatternSubOtherBlockEB1i_:
  606|  2.82k|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|  2.82k|        &'b mut self,
  608|  2.82k|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|  2.82k|        Ok(ArbitraryIter {
  610|  2.82k|            u: &mut *self,
  611|  2.82k|            _marker: PhantomData,
  612|  2.82k|        })
  613|  2.82k|    }
_RNvXs0_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCs6Lc7YXa2Vl_12sparql_smith13UpdateVariantENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB1e_:
  738|  8.04k|    fn next(&mut self) -> Option<Result<ElementType>> {
  739|  8.04k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  740|  8.04k|        if keep_going {
  741|  5.75k|            Some(Arbitrary::arbitrary(&mut self.u))
  742|       |        } else {
  743|  2.28k|            None
  744|       |        }
  745|  8.04k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured6chooseReECs6Lc7YXa2Vl_12sparql_smith:
  408|  8.15k|    pub fn choose<'b, T>(&mut self, choices: &'b [T]) -> Result<&'b T> {
  409|  8.15k|        let idx = self.choose_index(choices.len())?;
  410|  8.15k|        Ok(&choices[idx])
  411|  8.15k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith13GraphNodePathENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  13.7k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  13.7k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  13.7k|        if keep_going {
  723|  3.77k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  9.93k|            None
  726|       |        }
  727|  13.7k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith17GroupGraphPatternENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|    103|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|    103|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|    103|        if keep_going {
  723|     13|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|     90|            None
  726|       |        }
  727|    103|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith23ConditionalOrExpressionENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  6.44k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  6.44k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  6.44k|        if keep_going {
  723|  3.85k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  2.59k|            None
  726|       |        }
  727|  6.44k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs6Lc7YXa2Vl_12sparql_smith:
  302|   110k|    fn int_in_range_impl<T>(
  303|   110k|        range: ops::RangeInclusive<T>,
  304|   110k|        mut bytes: impl Iterator<Item = u8>,
  305|   110k|    ) -> Result<(T, usize)>
  306|   110k|    where
  307|   110k|        T: Int,
  308|   110k|    {
  309|   110k|        let start = *range.start();
  310|   110k|        let end = *range.end();
  311|   110k|        assert!(
  312|   110k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|   110k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|   110k|        }
  321|   110k|
  322|   110k|        // From here on out we work with the unsigned representation. All of the
  323|   110k|        // operations performed below work out just as well whether or not `T`
  324|   110k|        // is a signed or unsigned integer.
  325|   110k|        let start = start.to_unsigned();
  326|   110k|        let end = end.to_unsigned();
  327|   110k|
  328|   110k|        let delta = end.wrapping_sub(start);
  329|      0|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|   110k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|   110k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|   217k|        while (bytes_consumed < mem::size_of::<T>())
  339|   110k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|   110k|            let byte = match bytes.next() {
  342|  4.20k|                None => break,
  343|   106k|                Some(b) => b,
  344|   106k|            };
  345|   106k|            bytes_consumed += 1;
  346|   106k|
  347|   106k|            // Combine this byte into our arbitrary integer, but avoid
  348|   106k|            // overflowing the shift for `u8` and `i8`.
  349|   106k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|   106k|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|   110k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|   110k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|   110k|        let result = start.wrapping_add(offset);
  365|   110k|
  366|   110k|        // And convert back to our maybe-signed representation.
  367|   110k|        let result = T::from_unsigned(result);
  368|      0|        debug_assert!(*range.start() <= result);
  369|      0|        debug_assert!(result <= *range.end());
  370|       |
  371|   110k|        Ok((result, bytes_consumed))
  372|   110k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith16PathEltOrInverseENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  28.2k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  28.2k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  28.2k|        if keep_going {
  723|  7.95k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  20.2k|            None
  726|       |        }
  727|  28.2k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith24ConditionalAndExpressionENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  3.33k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  3.33k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  3.33k|        if keep_going {
  723|    176|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  3.15k|            None
  726|       |        }
  727|  3.33k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterTNtCs6Lc7YXa2Vl_12sparql_smith3IriB14_NtB16_12IriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionB14_EEENtNtNtNtB24_4iter6traits8iterator8Iterator4nextB16_:
  720|  2.45k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  2.45k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  2.45k|        if keep_going {
  723|  2.23k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|    211|            None
  726|       |        }
  727|  2.45k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith20PathOneInPropertySetENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  6.26k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  6.26k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  6.26k|        if keep_going {
  723|  5.22k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  1.03k|            None
  726|       |        }
  727|  6.26k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith3VarENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  2.82k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  2.82k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  2.82k|        if keep_going {
  723|  2.68k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|    134|            None
  726|       |        }
  727|  2.82k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith10ConstraintENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|     22|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|     22|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|     22|        if keep_going {
  723|      1|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|     21|            None
  726|       |        }
  727|     22|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_loopNCNCNvXsG_Cs6Lc7YXa2Vl_12sparql_smithNtB1q_14InlineDataFullNtB5_9Arbitrary9arbitrary00EB1q_:
  692|    194|    pub fn arbitrary_loop(
  693|    194|        &mut self,
  694|    194|        min: Option<u32>,
  695|    194|        max: Option<u32>,
  696|    194|        mut f: impl FnMut(&mut Self) -> Result<ControlFlow<(), ()>>,
  697|    194|    ) -> Result<()> {
  698|    194|        let min = min.unwrap_or(0);
  699|    194|        let max = max.unwrap_or(u32::MAX);
  700|    194|
  701|    194|        for _ in 0..self.int_in_range(min..=max)? {
  702|  3.75k|            match f(self)? {
  703|  3.75k|                ControlFlow::Continue(_) => continue,
  704|      0|                ControlFlow::Break(_) => break,
  705|       |            }
  706|       |        }
  707|       |
  708|    194|        Ok(())
  709|    194|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith10ConstraintEB1i_:
  606|     22|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|     22|        &'b mut self,
  608|     22|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|     22|        Ok(ArbitraryIter {
  610|     22|            u: &mut *self,
  611|     22|            _marker: PhantomData,
  612|     22|        })
  613|     22|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterINtNtCs9nhK3FOW46N_4core6option6OptionNtCs6Lc7YXa2Vl_12sparql_smith23PropertyListPathElementEENtNtNtNtB18_4iter6traits8iterator8Iterator4nextB1H_:
  720|  8.96k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  8.96k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  8.96k|        if keep_going {
  723|    432|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  8.53k|            None
  726|       |        }
  727|  8.96k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith14GroupConditionEB1i_:
  606|     65|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|     65|        &'b mut self,
  608|     65|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|     65|        Ok(ArbitraryIter {
  610|     65|            u: &mut *self,
  611|     65|            _marker: PhantomData,
  612|     65|        })
  613|     65|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith14DataBlockValueENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|    197|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|    197|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|    197|        if keep_going {
  723|    163|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|     34|            None
  726|       |        }
  727|    197|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterNtCs6Lc7YXa2Vl_12sparql_smith30GroupGraphPatternSubOtherBlockENtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextB15_:
  720|  3.54k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  3.54k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  3.54k|        if keep_going {
  723|    810|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  2.73k|            None
  726|       |        }
  727|  3.54k|    }
_RNvXs_NtCs9EteCURj6Wn_9arbitrary12unstructuredINtB4_13ArbitraryIterTNtCs6Lc7YXa2Vl_12sparql_smith8VarOrIriNtB16_4VerbNtB16_17VarOrIriOrLiteralINtNtCs9nhK3FOW46N_4core6option6OptionB14_EEENtNtNtNtB2l_4iter6traits8iterator8Iterator4nextB16_:
  720|  19.5k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  19.5k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  19.5k|        if keep_going {
  723|  14.1k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|  5.40k|            None
  726|       |        }
  727|  19.5k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtCs6Lc7YXa2Vl_12sparql_smith3VarEB1i_:
  606|    134|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    134|        &'b mut self,
  608|    134|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    134|        Ok(ArbitraryIter {
  610|    134|            u: &mut *self,
  611|    134|            _marker: PhantomData,
  612|    134|        })
  613|    134|    }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  829|   110k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|   110k|                    <$ty>::checked_add(self, rhs)
  831|   110k|                }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int11to_unsigned:
  841|  16.3k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  16.3k|                    self as $unsigned_ty
  843|  16.3k|                }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int10from_usize:
  825|   110k|                fn from_usize(u: usize) -> Self {
  826|   110k|                    u as Self
  827|   110k|                }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int10from_usize:
  825|    262|                fn from_usize(u: usize) -> Self {
  826|    262|                    u as Self
  827|    262|                }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int12wrapping_sub:
  837|  8.15k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  8.15k|                    <$ty>::wrapping_sub(self, rhs)
  839|  8.15k|                }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int7from_u8:
  821|   106k|                fn from_u8(b: u8) -> Self {
  822|   106k|                    b as Self
  823|   106k|                }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int13from_unsigned:
  845|   110k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|   110k|                    unsigned as Self
  847|   110k|                }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int12wrapping_add:
  833|  8.15k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  8.15k|                    <$ty>::wrapping_add(self, rhs)
  835|  8.15k|                }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int11checked_add:
  829|  8.15k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  8.15k|                    <$ty>::checked_add(self, rhs)
  831|  8.15k|                }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int10from_usize:
  825|  16.3k|                fn from_usize(u: usize) -> Self {
  826|  16.3k|                    u as Self
  827|  16.3k|                }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implmINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    328|    fn int_in_range_impl<T>(
  303|    328|        range: ops::RangeInclusive<T>,
  304|    328|        mut bytes: impl Iterator<Item = u8>,
  305|    328|    ) -> Result<(T, usize)>
  306|    328|    where
  307|    328|        T: Int,
  308|    328|    {
  309|    328|        let start = *range.start();
  310|    328|        let end = *range.end();
  311|    328|        assert!(
  312|    328|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    328|        if start == end {
  319|    194|            return Ok((start, 0));
  320|    134|        }
  321|    134|
  322|    134|        // From here on out we work with the unsigned representation. All of the
  323|    134|        // operations performed below work out just as well whether or not `T`
  324|    134|        // is a signed or unsigned integer.
  325|    134|        let start = start.to_unsigned();
  326|    134|        let end = end.to_unsigned();
  327|    134|
  328|    134|        let delta = end.wrapping_sub(start);
  329|      0|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    134|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    134|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    262|        while (bytes_consumed < mem::size_of::<T>())
  339|    262|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    134|            let byte = match bytes.next() {
  342|      6|                None => break,
  343|    128|                Some(b) => b,
  344|    128|            };
  345|    128|            bytes_consumed += 1;
  346|    128|
  347|    128|            // Combine this byte into our arbitrary integer, but avoid
  348|    128|            // overflowing the shift for `u8` and `i8`.
  349|    128|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    128|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    134|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    134|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    134|        let result = start.wrapping_add(offset);
  365|    134|
  366|    134|        // And convert back to our maybe-signed representation.
  367|    134|        let result = T::from_unsigned(result);
  368|      0|        debug_assert!(*range.start() <= result);
  369|      0|        debug_assert!(result <= *range.end());
  370|       |
  371|    134|        Ok((result, bytes_consumed))
  372|    328|    }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int12wrapping_add:
  833|   110k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|   110k|                    <$ty>::wrapping_add(self, rhs)
  835|   110k|                }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int7from_u8:
  821|  8.15k|                fn from_u8(b: u8) -> Self {
  822|  8.15k|                    b as Self
  823|  8.15k|                }
_RNvXs6_NtCs9EteCURj6Wn_9arbitrary12unstructuredjNtB5_3Int13from_unsigned:
  845|  8.15k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  8.15k|                    unsigned as Self
  847|  8.15k|                }
_RNvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB2_12Unstructured12choose_index:
  450|  8.15k|    pub fn choose_index(&mut self, len: usize) -> Result<usize> {
  451|  8.15k|        if len == 0 {
  452|      0|            return Err(Error::EmptyChoose);
  453|  8.15k|        }
  454|  8.15k|        let idx = self.int_in_range(0..=len - 1)?;
  455|  8.15k|        Ok(idx)
  456|  8.15k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejEB5_:
  293|  8.15k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  8.15k|    where
  295|  8.15k|        T: Int,
  296|  8.15k|    {
  297|  8.15k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  8.15k|        self.data = &self.data[bytes_consumed..];
  299|  8.15k|        Ok(result)
  300|  8.15k|    }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int12wrapping_add:
  833|    134|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    134|                    <$ty>::wrapping_add(self, rhs)
  835|    134|                }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybEB5_:
  167|   130k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|   130k|    where
  169|   130k|        A: Arbitrary<'a>,
  170|   130k|    {
  171|   130k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|   130k|    }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int11checked_add:
  829|    134|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|    134|                    <$ty>::checked_add(self, rhs)
  831|    134|                }
_RNvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|  2.99k|    pub fn new(data: &'a [u8]) -> Self {
   86|  2.99k|        Unstructured { data }
   87|  2.99k|    }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|  8.15k|    fn int_in_range_impl<T>(
  303|  8.15k|        range: ops::RangeInclusive<T>,
  304|  8.15k|        mut bytes: impl Iterator<Item = u8>,
  305|  8.15k|    ) -> Result<(T, usize)>
  306|  8.15k|    where
  307|  8.15k|        T: Int,
  308|  8.15k|    {
  309|  8.15k|        let start = *range.start();
  310|  8.15k|        let end = *range.end();
  311|  8.15k|        assert!(
  312|  8.15k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  8.15k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  8.15k|        }
  321|  8.15k|
  322|  8.15k|        // From here on out we work with the unsigned representation. All of the
  323|  8.15k|        // operations performed below work out just as well whether or not `T`
  324|  8.15k|        // is a signed or unsigned integer.
  325|  8.15k|        let start = start.to_unsigned();
  326|  8.15k|        let end = end.to_unsigned();
  327|  8.15k|
  328|  8.15k|        let delta = end.wrapping_sub(start);
  329|      0|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  8.15k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  8.15k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  16.3k|        while (bytes_consumed < mem::size_of::<T>())
  339|  16.3k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  8.15k|            let byte = match bytes.next() {
  342|      1|                None => break,
  343|  8.15k|                Some(b) => b,
  344|  8.15k|            };
  345|  8.15k|            bytes_consumed += 1;
  346|  8.15k|
  347|  8.15k|            // Combine this byte into our arbitrary integer, but avoid
  348|  8.15k|            // overflowing the shift for `u8` and `i8`.
  349|  8.15k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  8.15k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  8.15k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  8.15k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  8.15k|        let result = start.wrapping_add(offset);
  365|  8.15k|
  366|  8.15k|        // And convert back to our maybe-signed representation.
  367|  8.15k|        let result = T::from_unsigned(result);
  368|      0|        debug_assert!(*range.start() <= result);
  369|      0|        debug_assert!(result <= *range.end());
  370|       |
  371|  8.15k|        Ok((result, bytes_consumed))
  372|  8.15k|    }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int7from_u8:
  821|    128|                fn from_u8(b: u8) -> Self {
  822|    128|                    b as Self
  823|    128|                }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int13from_unsigned:
  845|    134|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    134|                    unsigned as Self
  847|    134|                }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int11to_unsigned:
  841|   221k|                fn to_unsigned(self) -> Self::Unsigned {
  842|   221k|                    self as $unsigned_ty
  843|   221k|                }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int11to_unsigned:
  841|    268|                fn to_unsigned(self) -> Self::Unsigned {
  842|    268|                    self as $unsigned_ty
  843|    268|                }
_RINvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangemEB5_:
  293|    328|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    328|    where
  295|    328|        T: Int,
  296|    328|    {
  297|    328|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    328|        self.data = &self.data[bytes_consumed..];
  299|    328|        Ok(result)
  300|    328|    }
_RNvXs1_NtCs9EteCURj6Wn_9arbitrary12unstructuredhNtB5_3Int12wrapping_sub:
  837|   110k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|   110k|                    <$ty>::wrapping_sub(self, rhs)
  839|   110k|                }
_RNvMNtCs9EteCURj6Wn_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|   530k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|   530k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|   530k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|   530k|        for byte in buffer[n..].iter_mut() {
  525|  99.4k|            *byte = 0;
  526|  99.4k|        }
  527|   530k|        self.data = &self.data[n..];
  528|   530k|        Ok(())
  529|   530k|    }
_RNvXs3_NtCs9EteCURj6Wn_9arbitrary12unstructuredmNtB5_3Int12wrapping_sub:
  837|    134|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    134|                    <$ty>::wrapping_sub(self, rhs)
  839|    134|                }

_RNCINvMs_NtCskDhpTLgJGsC_9getrandom4lazyNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   54|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMNtCskDhpTLgJGsC_9getrandom4lazyNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   34|     15|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   35|     15|        // Relaxed ordering is fine, as we only have a single atomic variable.
   36|     15|        let mut val = self.0.load(Relaxed);
   37|     15|        if val == Self::UNINIT {
   38|      1|            val = init();
   39|      1|            self.0.store(val, Relaxed);
   40|     14|        }
   41|     15|        val
   42|     15|    }
_RINvMs_NtCskDhpTLgJGsC_9getrandom4lazyNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   53|     15|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   54|     15|        self.0.unsync_init(|| init() as usize) != 0
   55|     15|    }

_RNvCskDhpTLgJGsC_9getrandom9getrandomCsfg7E1GDOqBC_9rand_core:
  376|     15|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  377|     15|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  378|     15|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  379|     15|    // `dest`.
  380|     15|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  381|     15|    Ok(())
  382|     15|}
_RNvCskDhpTLgJGsC_9getrandom16getrandom_uninitCsfg7E1GDOqBC_9rand_core:
  406|     15|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  407|     15|    if !dest.is_empty() {
  408|     15|        imp::getrandom_inner(dest)?;
  409|      0|    }
  410|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  411|       |    // since it returned `Ok`.
  412|     15|    Ok(unsafe { slice_assume_init_mut(dest) })
  413|     15|}

_RNvNtCskDhpTLgJGsC_9getrandom3imp22is_getrandom_available:
   19|      1|fn is_getrandom_available() -> bool {
   20|      1|    if getrandom_syscall(&mut []) < 0 {
   21|      0|        match last_os_error().raw_os_error() {
   22|      0|            Some(libc::ENOSYS) => false, // No kernel support
   23|       |            // The fallback on EPERM is intentionally not done on Android since this workaround
   24|       |            // seems to be needed only for specific Linux-based products that aren't based
   25|       |            // on Android. See https://github.com/rust-random/getrandom/issues/229.
   26|       |            #[cfg(target_os = "linux")]
   27|      0|            Some(libc::EPERM) => false, // Blocked by seccomp
   28|      0|            _ => true,
   29|       |        }
   30|       |    } else {
   31|      1|        true
   32|       |    }
   33|      1|}
_RNvNtCskDhpTLgJGsC_9getrandom3imp15getrandom_inner:
    9|     15|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   10|     15|    // getrandom(2) was introduced in Linux 3.17
   11|     15|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   12|     15|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   13|     15|        sys_fill_exact(dest, getrandom_syscall)
   14|       |    } else {
   15|      0|        use_file::getrandom_inner(dest)
   16|       |    }
   17|     15|}

_RINvNtCskDhpTLgJGsC_9getrandom4util19slice_as_uninit_muthECsfg7E1GDOqBC_9rand_core:
   32|     15|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   33|     15|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   34|     15|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
   35|     15|}
_RINvNtCskDhpTLgJGsC_9getrandom4util21slice_assume_init_muthECsfg7E1GDOqBC_9rand_core:
    8|     15|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
    9|     15|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   10|     15|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   11|     15|}

_RNvNtCskDhpTLgJGsC_9getrandom9util_libc17getrandom_syscall:
  157|     16|pub fn getrandom_syscall(buf: &mut [MaybeUninit<u8>]) -> libc::ssize_t {
  158|     16|    unsafe {
  159|     16|        libc::syscall(
  160|     16|            libc::SYS_getrandom,
  161|     16|            buf.as_mut_ptr() as *mut libc::c_void,
  162|     16|            buf.len(),
  163|     16|            0,
  164|     16|        ) as libc::ssize_t
  165|     16|    }
  166|     16|}
_RINvNtCskDhpTLgJGsC_9getrandom9util_libc14sys_fill_exactNvB2_17getrandom_syscallEB4_:
   59|     15|pub fn sys_fill_exact(
   60|     15|    mut buf: &mut [MaybeUninit<u8>],
   61|     15|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   62|     15|) -> Result<(), Error> {
   63|     30|    while !buf.is_empty() {
   64|     15|        let res = sys_fill(buf);
   65|     15|        match res {
   66|     15|            res if res > 0 => buf = buf.get_mut(res as usize..).ok_or(Error::UNEXPECTED)?,
   67|       |            -1 => {
   68|      0|                let err = last_os_error();
   69|      0|                // We should try again if the call was interrupted.
   70|      0|                if err.raw_os_error() != Some(libc::EINTR) {
   71|      0|                    return Err(err);
   72|      0|                }
   73|       |            }
   74|       |            // Negative return codes not equal to -1 should be impossible.
   75|       |            // EOF (ret = 0) should be impossible, as the data we are reading
   76|       |            // should be an infinite stream of random bytes.
   77|      0|            _ => return Err(Error::UNEXPECTED),
   78|       |        }
   79|       |    }
   80|     15|    Ok(())
   81|     15|}

rust_fuzzer_test_input:
  259|  2.99k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  2.99k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  2.99k|
  262|  2.99k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  2.99k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  2.99k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  2.99k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  2.99k|                // get to longer inputs that actually lead to interesting executions
  267|  2.99k|                // quicker.
  268|  2.99k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      2|                    return -1;
  270|  2.99k|                }
  271|  2.99k|
  272|  2.99k|                let mut u = Unstructured::new(bytes);
  273|  2.99k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  2.99k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  2.99k|                }
  291|       |
  292|  2.99k|                let data = match data {
  293|  2.28k|                    Ok(d) => d,
  294|    707|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  2.28k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  2.28k|                result.to_libfuzzer_code()
  299|  2.99k|            }
_RNvNvCsh41WZG82U3t_18sparql_update_eval1__19___libfuzzer_sys_run:
  303|  2.28k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|       |                $body
  305|  2.28k|            }
_RNvXCs9phLa2pkVZ8_13libfuzzer_sysNtB2_6CorpusINtNtCs9nhK3FOW46N_4core7convert4FromuE4from:
   30|  2.28k|    fn from(_: ()) -> Self {
   31|  2.28k|        Self::Keep
   32|  2.28k|    }
LLVMFuzzerTestOneInput:
   58|  2.99k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  2.99k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  2.99k|    });
   63|  2.99k|
   64|  2.99k|    match test_input {
   65|  2.99k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  2.99k|}
_RNvMs_Cs9phLa2pkVZ8_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|  2.28k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  2.28k|        match self {
   42|  2.28k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  2.28k|    }
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCs9phLa2pkVZ8_13libfuzzer_sys15test_input_wrap0B3_:
   59|  2.99k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  2.99k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  2.99k|        rust_fuzzer_test_input(data_slice)
   62|  2.99k|    });

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCs9phLa2pkVZ8_13libfuzzer_sys:
   49|  2.99k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  2.99k|        // An `Acquire` load is enough because that makes all the initialization
   51|  2.99k|        // operations visible to us, and, this being a fast path, weaker
   52|  2.99k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  2.99k|        // `SeqCst` operations on the slow path.
   54|  2.99k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  2.99k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCs9phLa2pkVZ8_13libfuzzer_sys:
  963|  2.99k|        pub fn get(&self) -> Option<&T> {
  964|  2.99k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  2.99k|                None
  969|       |            }
  970|  2.99k|        }

_RINvXsr_Cs87w0kKV82sz_10oxilangtagNtB6_16VoidOutputBufferINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendcE6extendINtNtNtB10_8adapters3map3MapNtNtNtB12_3str4iter5CharsNCNvB6_12to_lowercase0EECshJ9d6mhVUZV_5oxrdf:
  571|  1.37k|    fn extend<T: IntoIterator<Item = char>>(&mut self, _: T) {}
_RINvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB2_16VoidOutputBufferECshJ9d6mhVUZV_5oxrdf:
  632|  1.37k|fn parse_langtag(
  633|  1.37k|    input: &str,
  634|  1.37k|    output: &mut impl OutputBuffer,
  635|  1.37k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  636|  1.37k|    #[derive(PartialEq, Eq)]
  637|  1.37k|    enum State {
  638|  1.37k|        Start,
  639|  1.37k|        AfterLanguage,
  640|  1.37k|        AfterExtLang,
  641|  1.37k|        AfterScript,
  642|  1.37k|        AfterRegion,
  643|  1.37k|        InExtension { expected: bool },
  644|  1.37k|        InPrivateUse { expected: bool },
  645|  1.37k|    }
  646|  1.37k|
  647|  1.37k|    let mut state = State::Start;
  648|  1.37k|    let mut language_end = 0;
  649|  1.37k|    let mut extlang_end = 0;
  650|  1.37k|    let mut script_end = 0;
  651|  1.37k|    let mut region_end = 0;
  652|  1.37k|    let mut variant_end = 0;
  653|  1.37k|    let mut extension_end = 0;
  654|  1.37k|    let mut extlangs_count = 0;
  655|  1.37k|    for (subtag, end) in SubTagIterator::new(input) {
  656|  1.37k|        if subtag.is_empty() {
  657|      0|            return Err(LanguageTagParseError {
  658|      0|                kind: TagParseErrorKind::EmptySubtag,
  659|      0|            });
  660|  1.37k|        }
  661|  1.37k|        if subtag.len() > 8 {
  662|      0|            return Err(LanguageTagParseError {
  663|      0|                kind: TagParseErrorKind::SubtagTooLong,
  664|      0|            });
  665|  1.37k|        }
  666|  1.37k|        if state == State::Start {
  667|       |            // Primary language
  668|  1.37k|            if subtag.len() < 2 || !is_alphabetic(subtag) {
  669|      0|                return Err(LanguageTagParseError {
  670|      0|                    kind: TagParseErrorKind::InvalidLanguage,
  671|      0|                });
  672|  1.37k|            }
  673|  1.37k|            language_end = end;
  674|  1.37k|            output.extend(to_lowercase(subtag));
  675|  1.37k|            if subtag.len() < 4 {
  676|  1.37k|                // extlangs are only allowed for short language tags
  677|  1.37k|                state = State::AfterLanguage;
  678|  1.37k|            } else {
  679|      0|                state = State::AfterExtLang;
  680|      0|            }
  681|      0|        } else if let State::InPrivateUse { .. } = state {
  682|      0|            if !is_alphanumeric(subtag) {
  683|      0|                return Err(LanguageTagParseError {
  684|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  685|      0|                });
  686|      0|            }
  687|      0|            output.push('-');
  688|      0|            output.extend(to_lowercase(subtag));
  689|      0|            state = State::InPrivateUse { expected: false };
  690|      0|        } else if subtag == "x" || subtag == "X" {
  691|       |            // We make sure extension is found
  692|      0|            if let State::InExtension { expected: true } = state {
  693|      0|                return Err(LanguageTagParseError {
  694|      0|                    kind: TagParseErrorKind::EmptyExtension,
  695|      0|                });
  696|      0|            }
  697|      0|            output.push('-');
  698|      0|            output.push('x');
  699|      0|            state = State::InPrivateUse { expected: true };
  700|      0|        } else if subtag.len() == 1 && is_alphanumeric(subtag) {
  701|       |            // We make sure extension is found
  702|      0|            if let State::InExtension { expected: true } = state {
  703|      0|                return Err(LanguageTagParseError {
  704|      0|                    kind: TagParseErrorKind::EmptyExtension,
  705|      0|                });
  706|      0|            }
  707|      0|            let extension_tag = subtag.chars().next().unwrap().to_ascii_lowercase();
  708|      0|            output.push('-');
  709|      0|            output.push(extension_tag);
  710|      0|            state = State::InExtension { expected: true };
  711|      0|        } else if let State::InExtension { .. } = state {
  712|      0|            if !is_alphanumeric(subtag) {
  713|      0|                return Err(LanguageTagParseError {
  714|      0|                    kind: TagParseErrorKind::InvalidSubtag,
  715|      0|                });
  716|      0|            }
  717|      0|            extension_end = end;
  718|      0|            output.push('-');
  719|      0|            output.extend(to_lowercase(subtag));
  720|      0|            state = State::InExtension { expected: false };
  721|      0|        } else if state == State::AfterLanguage && subtag.len() == 3 && is_alphabetic(subtag) {
  722|      0|            extlangs_count += 1;
  723|      0|            if extlangs_count > 3 {
  724|      0|                return Err(LanguageTagParseError {
  725|      0|                    kind: TagParseErrorKind::TooManyExtlangs,
  726|      0|                });
  727|      0|            }
  728|      0|            // valid extlangs
  729|      0|            extlang_end = end;
  730|      0|            output.push('-');
  731|      0|            output.extend(to_lowercase(subtag));
  732|      0|        } else if (state == State::AfterLanguage || state == State::AfterExtLang)
  733|      0|            && subtag.len() == 4
  734|      0|            && is_alphabetic(subtag)
  735|      0|        {
  736|      0|            // Script
  737|      0|            script_end = end;
  738|      0|            output.push('-');
  739|      0|            output.extend(to_uppercase_first(subtag));
  740|      0|            state = State::AfterScript;
  741|      0|        } else if (state == State::AfterLanguage
  742|      0|            || state == State::AfterExtLang
  743|      0|            || state == State::AfterScript)
  744|      0|            && (subtag.len() == 2 && is_alphabetic(subtag)
  745|      0|                || subtag.len() == 3 && is_numeric(subtag))
  746|      0|        {
  747|      0|            // Region
  748|      0|            region_end = end;
  749|      0|            output.push('-');
  750|      0|            output.extend(to_uppercase(subtag));
  751|      0|            state = State::AfterRegion;
  752|      0|        } else if (state == State::AfterLanguage
  753|      0|            || state == State::AfterExtLang
  754|      0|            || state == State::AfterScript
  755|      0|            || state == State::AfterRegion)
  756|      0|            && is_alphanumeric(subtag)
  757|      0|            && (subtag.len() >= 5 && is_alphabetic(&subtag[0..1])
  758|      0|                || subtag.len() >= 4 && is_numeric(&subtag[0..1]))
  759|      0|        {
  760|      0|            // Variant
  761|      0|            variant_end = end;
  762|      0|            output.push('-');
  763|      0|            output.extend(to_lowercase(subtag));
  764|      0|            state = State::AfterRegion;
  765|      0|        } else {
  766|      0|            return Err(LanguageTagParseError {
  767|      0|                kind: TagParseErrorKind::InvalidSubtag,
  768|      0|            });
  769|       |        }
  770|       |    }
  771|       |
  772|       |    //We make sure we are in a correct final state
  773|  1.37k|    if let State::InExtension { expected: true } = state {
  774|      0|        return Err(LanguageTagParseError {
  775|      0|            kind: TagParseErrorKind::EmptyExtension,
  776|      0|        });
  777|  1.37k|    }
  778|  1.37k|    if let State::InPrivateUse { expected: true } = state {
  779|      0|        return Err(LanguageTagParseError {
  780|      0|            kind: TagParseErrorKind::EmptyPrivateUse,
  781|      0|        });
  782|  1.37k|    }
  783|  1.37k|
  784|  1.37k|    //We make sure we have not skipped anyone
  785|  1.37k|    if extlang_end < language_end {
  786|  1.37k|        extlang_end = language_end;
  787|  1.37k|    }
  788|  1.37k|    if script_end < extlang_end {
  789|  1.37k|        script_end = extlang_end;
  790|  1.37k|    }
  791|  1.37k|    if region_end < script_end {
  792|  1.37k|        region_end = script_end;
  793|  1.37k|    }
  794|  1.37k|    if variant_end < region_end {
  795|  1.37k|        variant_end = region_end;
  796|  1.37k|    }
  797|  1.37k|    if extension_end < variant_end {
  798|  1.37k|        extension_end = variant_end;
  799|  1.37k|    }
  800|       |
  801|  1.37k|    Ok(TagElementsPositions {
  802|  1.37k|        language_end,
  803|  1.37k|        extlang_end,
  804|  1.37k|        script_end,
  805|  1.37k|        region_end,
  806|  1.37k|        variant_end,
  807|  1.37k|        extension_end,
  808|  1.37k|    })
  809|  1.37k|}
_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCshJ9d6mhVUZV_5oxrdf:
   62|  1.37k|    pub fn into_inner(self) -> T {
   63|  1.37k|        self.tag
   64|  1.37k|    }
_RINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB2_16VoidOutputBufferECshJ9d6mhVUZV_5oxrdf:
  587|  1.37k|fn parse_language_tag(
  588|  1.37k|    input: &str,
  589|  1.37k|    output: &mut impl OutputBuffer,
  590|  1.37k|) -> Result<TagElementsPositions, LanguageTagParseError> {
  591|       |    //grandfathered tags
  592|  1.37k|    if let Some(tag) = GRANDFATHEREDS
  593|  1.37k|        .iter()
  594|  1.37k|        .find(|record| record.eq_ignore_ascii_case(input))
  595|       |    {
  596|      0|        output.push_str(tag);
  597|      0|        Ok(TagElementsPositions {
  598|      0|            language_end: tag.len(),
  599|      0|            extlang_end: tag.len(),
  600|      0|            script_end: tag.len(),
  601|      0|            region_end: tag.len(),
  602|      0|            variant_end: tag.len(),
  603|      0|            extension_end: tag.len(),
  604|      0|        })
  605|  1.37k|    } else if input.starts_with("x-") || input.starts_with("X-") {
  606|       |        // private use
  607|      0|        if !is_alphanumeric_or_dash(input) {
  608|      0|            Err(LanguageTagParseError {
  609|      0|                kind: TagParseErrorKind::ForbiddenChar,
  610|      0|            })
  611|      0|        } else if input.len() == 2 {
  612|      0|            Err(LanguageTagParseError {
  613|      0|                kind: TagParseErrorKind::EmptyPrivateUse,
  614|      0|            })
  615|       |        } else {
  616|      0|            output.extend(input.chars().map(|c| c.to_ascii_lowercase()));
  617|      0|            Ok(TagElementsPositions {
  618|      0|                language_end: input.len(),
  619|      0|                extlang_end: input.len(),
  620|      0|                script_end: input.len(),
  621|      0|                region_end: input.len(),
  622|      0|                variant_end: input.len(),
  623|      0|                extension_end: input.len(),
  624|      0|            })
  625|       |        }
  626|       |    } else {
  627|  1.37k|        parse_langtag(input, output)
  628|       |    }
  629|  1.37k|}
_RNCINvCs87w0kKV82sz_10oxilangtag18parse_language_tagNtB4_16VoidOutputBufferE0CshJ9d6mhVUZV_5oxrdf:
  594|  35.8k|        .find(|record| record.eq_ignore_ascii_case(input))
_RNvMCs87w0kKV82sz_10oxilangtagINtB2_11LanguageTagNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCshJ9d6mhVUZV_5oxrdf:
   49|  1.37k|    pub fn parse(tag: T) -> Result<Self, LanguageTagParseError> {
   50|  1.37k|        let positions = parse_language_tag(&tag, &mut VoidOutputBuffer::default())?;
   51|  1.37k|        Ok(Self { tag, positions })
   52|  1.37k|    }
_RNvXsE_Cs87w0kKV82sz_10oxilangtagNtB5_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCshJ9d6mhVUZV_5oxrdf:
  558|  1.37k|#[derive(Default)]
_RNvXs_NvCs87w0kKV82sz_10oxilangtag13parse_langtagNtB4_5StateNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCshJ9d6mhVUZV_5oxrdf:
  636|  1.37k|    #[derive(PartialEq, Eq)]
_RNvCs87w0kKV82sz_10oxilangtag13is_alphabeticCshJ9d6mhVUZV_5oxrdf:
  871|  1.37k|fn is_alphabetic(s: &str) -> bool {
  872|  1.37k|    s.chars().all(|x| x.is_ascii_alphabetic())
  873|  1.37k|}
_RNvCs87w0kKV82sz_10oxilangtag12to_lowercaseCshJ9d6mhVUZV_5oxrdf:
  903|  1.37k|fn to_lowercase(s: &str) -> impl Iterator<Item = char> + '_ {
  904|  1.37k|    s.chars().map(|c| c.to_ascii_lowercase())
  905|  1.37k|}
_RNvXsw_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nextCshJ9d6mhVUZV_5oxrdf:
  862|  2.75k|    fn next(&mut self) -> Option<(&'a str, usize)> {
  863|  2.75k|        let tag = self.split.next()?;
  864|  1.37k|        let tag_end = self.position + tag.len();
  865|  1.37k|        self.position = tag_end + 1;
  866|  1.37k|        Some((tag, tag_end))
  867|  2.75k|    }
_RNvMsv_Cs87w0kKV82sz_10oxilangtagNtB5_14SubTagIterator3newCshJ9d6mhVUZV_5oxrdf:
  850|  1.37k|    fn new(input: &'a str) -> Self {
  851|  1.37k|        Self {
  852|  1.37k|            split: input.split('-'),
  853|  1.37k|            position: 0,
  854|  1.37k|        }
  855|  1.37k|    }
_RNCNvCs87w0kKV82sz_10oxilangtag13is_alphabetic0B3_:
  872|  2.75k|    s.chars().all(|x| x.is_ascii_alphabetic())

_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E12parse_schemeCshJ9d6mhVUZV_5oxrdf:
 1213|  44.1k|    fn parse_scheme(&mut self) -> Result<(), IriParseError> {
 1214|   220k|        loop {
 1215|   220k|            let c = self.input.next();
 1216|   220k|            match c {
 1217|   220k|                Some(c) if c.is_ascii_alphanumeric() || c == '+' || c == '-' || c == '.' => {
 1218|   176k|                    self.output.push(c)
 1219|       |                }
 1220|       |                Some(':') => {
 1221|  44.1k|                    self.output.push(':');
 1222|  44.1k|                    self.output_positions.scheme_end = self.output.len();
 1223|  44.1k|                    self.input_scheme_end = self.input.position;
 1224|  44.1k|                    return if self.input.starts_with('/') {
 1225|  44.1k|                        self.input.next();
 1226|  44.1k|                        self.output.push('/');
 1227|  44.1k|                        self.parse_path_or_authority()
 1228|       |                    } else {
 1229|      0|                        self.output_positions.authority_end = self.output.len();
 1230|      0|                        self.parse_path()
 1231|       |                    };
 1232|       |                }
 1233|       |                _ => {
 1234|      0|                    self.input = ParserInput {
 1235|      0|                        value: self.iri.chars(),
 1236|      0|                        position: 0,
 1237|      0|                    }; // reset
 1238|      0|                    self.output.clear();
 1239|      0|                    return self.parse_relative();
 1240|       |                }
 1241|       |            }
 1242|       |        }
 1243|  44.1k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCshJ9d6mhVUZV_5oxrdf:
  185|  44.1k|    pub fn into_inner(self) -> T {
  186|  44.1k|        self.iri
  187|  44.1k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCshJ9d6mhVUZV_5oxrdf:
   58|  44.1k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
   59|  44.1k|        let positions = IriParser::<_, false>::parse(&iri, None, &mut VoidOutputBuffer::default())?;
   60|  44.1k|        Ok(Self { iri, positions })
   61|  44.1k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE5parseCshJ9d6mhVUZV_5oxrdf:
  556|  44.1k|    pub fn parse(iri: T) -> Result<Self, IriParseError> {
  557|  44.1k|        IriRef::parse(iri)?.try_into()
  558|  44.1k|    }
_RNvMCsbOXESBDtkxG_5oxiriINtB2_6IriRefNtNtCsjOdcKtOMjJI_5alloc6string6StringE11is_absoluteCshJ9d6mhVUZV_5oxrdf:
  199|  44.1k|    pub fn is_absolute(&self) -> bool {
  200|  44.1k|        self.positions.scheme_end != 0
  201|  44.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E27read_url_codepoint_or_echarCshJ9d6mhVUZV_5oxrdf:
 1534|  1.01M|    fn read_url_codepoint_or_echar(&mut self, c: char) -> Result<(), IriParseError> {
 1535|  1.01M|        if UNCHECKED || is_url_code_point(c) {
 1536|  1.01M|            self.output.push(c);
 1537|  1.01M|            Ok(())
 1538|      0|        } else if c == '%' {
 1539|      0|            self.read_echar()
 1540|       |        } else {
 1541|      0|            self.parse_error(IriParseErrorKind::InvalidIriCodePoint(c))
 1542|       |        }
 1543|  1.01M|    }
_RNvXsV_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringEINtNtCs9nhK3FOW46N_4core7convert7TryFromINtB5_6IriRefBz_EE8try_fromCshJ9d6mhVUZV_5oxrdf:
  968|  44.1k|    fn try_from(iri: IriRef<T>) -> Result<Self, IriParseError> {
  969|  44.1k|        if iri.is_absolute() {
  970|  44.1k|            Ok(Self(iri))
  971|       |        } else {
  972|      0|            Err(IriParseError {
  973|      0|                kind: IriParseErrorKind::NoScheme,
  974|      0|            })
  975|       |        }
  976|  44.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E18parse_scheme_startCshJ9d6mhVUZV_5oxrdf:
 1199|  44.1k|    fn parse_scheme_start(&mut self) -> Result<(), IriParseError> {
 1200|  44.1k|        match self.input.front() {
 1201|       |            Some(':') => {
 1202|      0|                if UNCHECKED {
 1203|      0|                    self.parse_scheme()
 1204|       |                } else {
 1205|      0|                    self.parse_error(IriParseErrorKind::NoScheme)
 1206|       |                }
 1207|       |            }
 1208|  44.1k|            Some(c) if c.is_ascii_alphabetic() => self.parse_scheme(),
 1209|      0|            _ => self.parse_relative(),
 1210|       |        }
 1211|  44.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_hostCshJ9d6mhVUZV_5oxrdf:
 1359|  44.1k|    fn parse_host(&mut self) -> Result<(), IriParseError> {
 1360|  44.1k|        if self.input.starts_with('[') {
 1361|       |            // IP v6
 1362|      0|            let start_position = self.input.position;
 1363|      0|            while let Some(c) = self.input.next() {
 1364|      0|                self.output.push(c);
 1365|      0|                if c == ']' {
 1366|      0|                    let ip = &self.iri[start_position + 1..self.input.position - 1];
 1367|      0|                    if !UNCHECKED {
 1368|      0|                        if let Err(error) = Ipv6Addr::from_str(ip) {
 1369|      0|                            return self.parse_error(IriParseErrorKind::InvalidHostIp(error));
 1370|      0|                        }
 1371|      0|                    }
 1372|       |
 1373|      0|                    let c = self.input.next();
 1374|      0|                    return match c {
 1375|       |                        Some(':') => {
 1376|      0|                            self.output.push(':');
 1377|      0|                            self.parse_port()
 1378|       |                        }
 1379|       |                        None | Some('/') | Some('?') | Some('#') => {
 1380|      0|                            self.output_positions.authority_end = self.output.len();
 1381|      0|                            self.parse_path_start(c)
 1382|       |                        }
 1383|      0|                        Some(c) => {
 1384|      0|                            if UNCHECKED {
 1385|      0|                                self.output.push(c);
 1386|      0|                                continue;
 1387|       |                            } else {
 1388|      0|                                self.parse_error(IriParseErrorKind::InvalidHostCharacter(c))
 1389|       |                            }
 1390|       |                        }
 1391|       |                    };
 1392|      0|                }
 1393|       |            }
 1394|      0|            if UNCHECKED {
 1395|       |                // We consider it's valid even if it's not finished
 1396|      0|                self.output_positions.authority_end = self.output.len();
 1397|      0|                self.parse_path_start(None)
 1398|       |            } else {
 1399|      0|                self.parse_error(IriParseErrorKind::InvalidHostCharacter('['))
 1400|       |            }
 1401|       |        } else {
 1402|       |            // Other host
 1403|   529k|            loop {
 1404|   529k|                let c = self.input.next();
 1405|   529k|                match c {
 1406|       |                    Some(':') => {
 1407|      0|                        self.output.push(':');
 1408|      0|                        return self.parse_port();
 1409|       |                    }
 1410|       |                    None | Some('/') | Some('?') | Some('#') => {
 1411|  44.1k|                        self.output_positions.authority_end = self.output.len();
 1412|  44.1k|                        return self.parse_path_start(c);
 1413|       |                    }
 1414|   485k|                    Some(c) => self.read_url_codepoint_or_echar(c)?,
 1415|       |                }
 1416|       |            }
 1417|       |        }
 1418|  44.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E23parse_path_or_authorityCshJ9d6mhVUZV_5oxrdf:
 1245|  44.1k|    fn parse_path_or_authority(&mut self) -> Result<(), IriParseError> {
 1246|  44.1k|        if self.input.starts_with('/') {
 1247|  44.1k|            self.input.next();
 1248|  44.1k|            self.output.push('/');
 1249|  44.1k|            self.parse_authority()
 1250|       |        } else {
 1251|      0|            self.output_positions.authority_end = self.output.len() - 1;
 1252|      0|            self.parse_path()
 1253|       |        }
 1254|  44.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E16parse_path_startCshJ9d6mhVUZV_5oxrdf:
 1439|  44.1k|    fn parse_path_start(&mut self, c: Option<char>) -> Result<(), IriParseError> {
 1440|  44.1k|        match c {
 1441|       |            None => {
 1442|      0|                self.output_positions.path_end = self.output.len();
 1443|      0|                self.output_positions.query_end = self.output.len();
 1444|      0|                Ok(())
 1445|       |            }
 1446|       |            Some('?') => {
 1447|      0|                self.output_positions.path_end = self.output.len();
 1448|      0|                self.output.push('?');
 1449|      0|                self.parse_query()
 1450|       |            }
 1451|       |            Some('#') => {
 1452|      0|                self.output_positions.path_end = self.output.len();
 1453|      0|                self.output_positions.query_end = self.output.len();
 1454|      0|                self.output.push('#');
 1455|      0|                self.parse_fragment()
 1456|       |            }
 1457|       |            Some('/') => {
 1458|  44.1k|                self.output.push('/');
 1459|  44.1k|                self.parse_path()
 1460|       |            }
 1461|      0|            Some(c) => {
 1462|      0|                self.read_url_codepoint_or_echar(c)?;
 1463|      0|                self.parse_path()
 1464|       |            }
 1465|       |        }
 1466|  44.1k|    }
_RNvMsp_CsbOXESBDtkxG_5oxiriINtB5_3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringE10into_innerCshJ9d6mhVUZV_5oxrdf:
  665|  44.1k|    pub fn into_inner(self) -> T {
  666|  44.1k|        self.0.into_inner()
  667|  44.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E10parse_pathCshJ9d6mhVUZV_5oxrdf:
 1468|  44.1k|    fn parse_path(&mut self) -> Result<(), IriParseError> {
 1469|  90.1k|        loop {
 1470|  90.1k|            let c = self.input.next();
 1471|  90.1k|            match c {
 1472|       |                None | Some('/') | Some('?') | Some('#') => {
 1473|  44.2k|                    if self.output.as_str().ends_with("/..") {
 1474|      0|                        self.remove_last_segment();
 1475|      0|                        self.remove_last_segment();
 1476|      0|                        self.output.push('/');
 1477|  44.2k|                    } else if self.output.as_str().ends_with("/.") {
 1478|      0|                        self.remove_last_segment();
 1479|      0|                        self.output.push('/');
 1480|  44.2k|                    } else if c == Some('/') {
 1481|    138|                        self.output.push('/');
 1482|  44.1k|                    }
 1483|       |
 1484|  44.2k|                    if c == Some('?') {
 1485|      0|                        self.output_positions.path_end = self.output.len();
 1486|      0|                        self.output.push('?');
 1487|      0|                        return self.parse_query();
 1488|  44.2k|                    } else if c == Some('#') {
 1489|    138|                        self.output_positions.path_end = self.output.len();
 1490|    138|                        self.output_positions.query_end = self.output.len();
 1491|    138|                        self.output.push('#');
 1492|    138|                        return self.parse_fragment();
 1493|  44.1k|                    } else if c.is_none() {
 1494|  44.0k|                        self.output_positions.path_end = self.output.len();
 1495|  44.0k|                        self.output_positions.query_end = self.output.len();
 1496|  44.0k|                        return Ok(());
 1497|    138|                    }
 1498|       |                }
 1499|  45.8k|                Some(c) => self.read_url_codepoint_or_echar(c)?,
 1500|       |            }
 1501|       |        }
 1502|  44.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E5parseCshJ9d6mhVUZV_5oxrdf:
 1174|  44.1k|    fn parse(
 1175|  44.1k|        iri: &'a str,
 1176|  44.1k|        base: Option<IriRef<&'a str>>,
 1177|  44.1k|        output: &'a mut O,
 1178|  44.1k|    ) -> Result<IriElementsPositions, IriParseError> {
 1179|  44.1k|        let mut parser = Self {
 1180|  44.1k|            iri,
 1181|  44.1k|            base,
 1182|  44.1k|            input: ParserInput {
 1183|  44.1k|                value: iri.chars(),
 1184|  44.1k|                position: 0,
 1185|  44.1k|            },
 1186|  44.1k|            output,
 1187|  44.1k|            output_positions: IriElementsPositions {
 1188|  44.1k|                scheme_end: 0,
 1189|  44.1k|                authority_end: 0,
 1190|  44.1k|                path_end: 0,
 1191|  44.1k|                query_end: 0,
 1192|  44.1k|            },
 1193|  44.1k|            input_scheme_end: 0,
 1194|  44.1k|        };
 1195|  44.1k|        parser.parse_scheme_start()?;
 1196|  44.1k|        Ok(parser.output_positions)
 1197|  44.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E15parse_authorityCshJ9d6mhVUZV_5oxrdf:
 1335|  44.1k|    fn parse_authority(&mut self) -> Result<(), IriParseError> {
 1336|       |        // @ are not allowed in IRI authorities so not need to take care of ambiguities
 1337|   529k|        loop {
 1338|   529k|            let c = self.input.next();
 1339|   529k|            match c {
 1340|       |                Some('@') => {
 1341|      0|                    self.output.push('@');
 1342|      0|                    return self.parse_host();
 1343|       |                }
 1344|       |                None | Some('[') | Some('/') | Some('?') | Some('#') => {
 1345|  44.1k|                    self.input = ParserInput {
 1346|  44.1k|                        value: self.iri[self.input_scheme_end + 2..].chars(),
 1347|  44.1k|                        position: self.input_scheme_end + 2,
 1348|  44.1k|                    };
 1349|  44.1k|                    self.output.truncate(self.output_positions.scheme_end + 2);
 1350|  44.1k|                    return self.parse_host();
 1351|       |                }
 1352|   485k|                Some(c) => {
 1353|   485k|                    self.read_url_codepoint_or_echar(c)?;
 1354|       |                }
 1355|       |            }
 1356|       |        }
 1357|  44.1k|    }
_RNvMs11_CsbOXESBDtkxG_5oxiriINtB6_9IriParserNtB6_16VoidOutputBufferKb0_E14parse_fragmentCshJ9d6mhVUZV_5oxrdf:
 1518|    138|    fn parse_fragment(&mut self) -> Result<(), IriParseError> {
 1519|    966|        while let Some(c) = self.input.next() {
 1520|    828|            self.read_url_codepoint_or_echar(c)?
 1521|       |        }
 1522|    138|        Ok(())
 1523|    138|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput11starts_withCshJ9d6mhVUZV_5oxrdf:
 1156|   132k|    fn starts_with(&self, c: char) -> bool {
 1157|   132k|        self.value.as_str().starts_with(c)
 1158|   132k|    }
_RNvXs1b_CsbOXESBDtkxG_5oxiriNtB6_16VoidOutputBufferNtNtCs9nhK3FOW46N_4core7default7Default7defaultCshJ9d6mhVUZV_5oxrdf:
 1065|  44.1k|#[derive(Default)]
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer3lenCshJ9d6mhVUZV_5oxrdf:
 1092|   176k|    fn len(&self) -> usize {
 1093|   176k|        self.len
 1094|   176k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer4pushCshJ9d6mhVUZV_5oxrdf:
 1072|  1.37M|    fn push(&mut self, c: char) {
 1073|  1.37M|        self.len += c.len_utf8();
 1074|  1.37M|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer6as_strCshJ9d6mhVUZV_5oxrdf:
 1097|  88.5k|    fn as_str(&self) -> &str {
 1098|  88.5k|        ""
 1099|  88.5k|    }
_RNvXsY_CsbOXESBDtkxG_5oxiriNtB5_16VoidOutputBufferNtB5_12OutputBuffer8truncateCshJ9d6mhVUZV_5oxrdf:
 1087|  44.1k|    fn truncate(&mut self, new_len: usize) {
 1088|  44.1k|        self.len = new_len;
 1089|  44.1k|    }
_RNvCsbOXESBDtkxG_5oxiri17is_url_code_pointCshJ9d6mhVUZV_5oxrdf:
 1584|  1.01M|fn is_url_code_point(c: char) -> bool {
 1585|  1.01M|    matches!(c,
 1586|   883k|        'a'..='z'
 1587|    552|        | 'A'..='Z'
 1588|  44.8k|        | '0'..='9'
 1589|       |        | '!'
 1590|       |        | '$'
 1591|       |        | '&'
 1592|       |        | '\''
 1593|       |        | '('
 1594|       |        | ')'
 1595|       |        | '*'
 1596|       |        | '+'
 1597|       |        | ','
 1598|       |        | '-'
 1599|       |        | '.'
 1600|       |        | '/'
 1601|       |        | ':'
 1602|       |        | ';'
 1603|       |        | '='
 1604|       |        | '?'
 1605|       |        | '@'
 1606|       |        | '_'
 1607|       |        | '~'
 1608|      0|        | '\u{A0}'..='\u{D7FF}'
 1609|      0|        | '\u{F900}'..='\u{FDCF}'
 1610|      0|        | '\u{FDF0}'..='\u{FFEF}'
 1611|      0|        | '\u{10000}'..='\u{1FFFD}'
 1612|      0|        | '\u{20000}'..='\u{2FFFD}'
 1613|      0|        | '\u{30000}'..='\u{3FFFD}'
 1614|      0|        | '\u{40000}'..='\u{4FFFD}'
 1615|      0|        | '\u{50000}'..='\u{5FFFD}'
 1616|      0|        | '\u{60000}'..='\u{6FFFD}'
 1617|      0|        | '\u{70000}'..='\u{7FFFD}'
 1618|      0|        | '\u{80000}'..='\u{8FFFD}'
 1619|      0|        | '\u{90000}'..='\u{9FFFD}'
 1620|      0|        | '\u{A0000}'..='\u{AFFFD}'
 1621|      0|        | '\u{B0000}'..='\u{BFFFD}'
 1622|      0|        | '\u{C0000}'..='\u{CFFFD}'
 1623|      0|        | '\u{D0000}'..='\u{DFFFD}'
 1624|      0|        | '\u{E1000}'..='\u{EFFFD}'
 1625|       |    )
 1626|  1.01M|}
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput4nextCshJ9d6mhVUZV_5oxrdf:
 1141|  1.45M|    fn next(&mut self) -> Option<char> {
 1142|  1.45M|        if let Some(head) = self.value.next() {
 1143|  1.41M|            self.position += head.len_utf8();
 1144|  1.41M|            Some(head)
 1145|       |        } else {
 1146|  44.1k|            None
 1147|       |        }
 1148|  1.45M|    }
_RNvMs10_CsbOXESBDtkxG_5oxiriNtB6_11ParserInput5frontCshJ9d6mhVUZV_5oxrdf:
 1151|  44.1k|    fn front(&self) -> Option<char> {
 1152|  44.1k|        self.value.clone().next()
 1153|  44.1k|    }

_RINvMs2_NtCs6eXinN4QzrH_11peg_runtime5errorNtB6_10ErrorState16into_parse_erroreECskGc5T8eVihK_9spargebra:
  128|    163|    pub fn into_parse_error<I: Parse + ?Sized>(self, input: &I) -> ParseError<I::PositionRepr> {
  129|    163|        ParseError {
  130|    163|            location: Parse::position_repr(input, self.max_err_pos.into()),
  131|    163|            expected: self.expected,
  132|    163|        }
  133|    163|    }
_RNvMs2_NtCs6eXinN4QzrH_11peg_runtime5errorNtB5_10ErrorState12mark_failure:
  117|  5.05M|    pub fn mark_failure(&mut self, pos: usize, expected: &'static str) -> RuleResult<()> {
  118|  5.05M|        if self.suppress_fail == 0 {
  119|  3.01M|            if self.reparsing_on_error {
  120|   292k|                self.mark_failure_slow_path(pos, expected);
  121|  2.72M|            } else if pos > self.max_err_pos {
  122|   320k|                self.max_err_pos = pos;
  123|  2.40M|            }
  124|  2.03M|        }
  125|  5.05M|        RuleResult::Failed
  126|  5.05M|    }
_RNvMs2_NtCs6eXinN4QzrH_11peg_runtime5errorNtB5_10ErrorState17reparse_for_error:
  103|    163|    pub fn reparse_for_error(&mut self) {
  104|    163|        self.suppress_fail = 0;
  105|    163|        self.reparsing_on_error = true;
  106|    163|    }
_RNvMs2_NtCs6eXinN4QzrH_11peg_runtime5errorNtB5_10ErrorState22mark_failure_slow_path:
  109|   292k|    pub fn mark_failure_slow_path(&mut self, pos: usize, expected: &'static str) {
  110|   292k|        if pos == self.max_err_pos {
  111|  1.75k|            self.expected.expected.insert(expected);
  112|   290k|        }
  113|   292k|    }
_RNvMs2_NtCs6eXinN4QzrH_11peg_runtime5errorNtB5_10ErrorState3new:
   91|  2.28k|    pub fn new(initial_pos: usize) -> Self {
   92|  2.28k|        ErrorState {
   93|  2.28k|            max_err_pos: initial_pos,
   94|  2.28k|            suppress_fail: 0,
   95|  2.28k|            reparsing_on_error: false,
   96|  2.28k|            expected: ExpectedSet {
   97|  2.28k|                expected: BTreeSet::new(),
   98|  2.28k|            },
   99|  2.28k|        }
  100|  2.28k|    }

_RNvXs1_NtCs6eXinN4QzrH_11peg_runtime3streNtB7_12ParseLiteral20parse_string_literal:
   59|  2.24M|    fn parse_string_literal(&self, pos: usize, literal: &str) -> RuleResult<()> {
   60|  2.24M|        let l = literal.len();
   61|  2.24M|        if self.len() >= pos + l && &self.as_bytes()[pos..pos + l] == literal.as_bytes() {
   62|   334k|            RuleResult::Matched(pos + l, ())
   63|       |        } else {
   64|  1.91M|            RuleResult::Failed
   65|       |        }
   66|  2.24M|    }
_RNvXs_NtCs6eXinN4QzrH_11peg_runtime3streNtB6_5Parse5start:
   27|  4.73k|    fn start(&self) -> usize {
   28|  4.73k|        0
   29|  4.73k|    }
_RNCNvXs_NtCs6eXinN4QzrH_11peg_runtime3streNtB8_5Parse13position_reprs_0B8_:
   38|   123k|        let column = before.chars().rev().take_while(|&c| c != '\n').count() + 1;
_RNvXs0_NtCs6eXinN4QzrH_11peg_runtime3streNtB7_9ParseElem10parse_elem:
   50|  5.93M|    fn parse_elem(&'input self, pos: usize) -> RuleResult<char> {
   51|  5.93M|        match self[pos..].chars().next() {
   52|  5.88M|            Some(c) => RuleResult::Matched(pos + c.len_utf8(), c),
   53|  50.8k|            None => RuleResult::Failed,
   54|       |        }
   55|  5.93M|    }
_RNCNvXs_NtCs6eXinN4QzrH_11peg_runtime3streNtB8_5Parse13position_repr0B8_:
   37|   123k|        let line = before.as_bytes().iter().filter(|&&c| c == b'\n').count() + 1;
_RNvXs2_NtCs6eXinN4QzrH_11peg_runtime3streNtB7_10ParseSlice11parse_slice:
   71|   498k|    fn parse_slice(&'input self, p1: usize, p2: usize) -> &'input str {
   72|   498k|        &self[p1..p2]
   73|   498k|    }
_RNvXs_NtCs6eXinN4QzrH_11peg_runtime3streNtB6_5Parse6is_eof:
   31|  2.45k|    fn is_eof(&self, pos: usize) -> bool {
   32|  2.45k|        pos >= self.len()
   33|  2.45k|    }
_RNvXs_NtCs6eXinN4QzrH_11peg_runtime3streNtB6_5Parse13position_repr:
   35|    163|    fn position_repr(&self, pos: usize) -> LineCol {
   36|    163|        let before = &self[..pos];
   37|    163|        let line = before.as_bytes().iter().filter(|&&c| c == b'\n').count() + 1;
   38|    163|        let column = before.chars().rev().take_while(|&c| c != '\n').count() + 1;
   39|    163|        LineCol {
   40|    163|            line,
   41|    163|            column,
   42|    163|            offset: pos,
   43|    163|        }
   44|    163|    }

_RNvXsM_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCswkaVU3ZAmW_11rand_chacha:
   32|   183k|            fn $fn_assign(&mut self, rhs: Self) {
   33|   183k|                (self.0[0]).$fn_assign(rhs.0[0]);
   34|   183k|                (self.0[1]).$fn_assign(rhs.0[1]);
   35|   183k|            }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right24CswkaVU3ZAmW_11rand_chacha:
   42|  45.8k|        fn $fn(self) -> Self {
   43|  45.8k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  45.8k|        }
_RNvXsG_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCswkaVU3ZAmW_11rand_chacha:
   22|   183k|            fn $fn(self, rhs: Self) -> Self::Output {
   23|   183k|                x2::new([self.0[0].$fn(rhs.0[0]), self.0[1].$fn(rhs.0[1])])
   24|   183k|            }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right16CswkaVU3ZAmW_11rand_chacha:
   42|  45.8k|        fn $fn(self) -> Self {
   43|  45.8k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  45.8k|        }
_RNvMNtCsf8HyAzZvOrI_10ppv_lite864softINtB2_2x2INtNtNtNtB4_6x86_644sse24avx212u32x4x2_avx2NtBP_4NoNIENtBN_2G0E3newCswkaVU3ZAmW_11rand_chacha:
   13|   523k|    pub fn new(xs: [W; 2]) -> Self {
   14|   523k|        x2(xs, PhantomData)
   15|   523k|    }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words3012CswkaVU3ZAmW_11rand_chacha:
  215|  45.8k|    fn shuffle_lane_words3012(self) -> Self {
  216|  45.8k|        Self::new([
  217|  45.8k|            self.0[0].shuffle_lane_words3012(),
  218|  45.8k|            self.0[1].shuffle_lane_words3012(),
  219|  45.8k|        ])
  220|  45.8k|    }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words1230CswkaVU3ZAmW_11rand_chacha:
  208|  45.8k|    fn shuffle_lane_words1230(self) -> Self {
  209|  45.8k|        Self::new([
  210|  45.8k|            self.0[0].shuffle_lane_words1230(),
  211|  45.8k|            self.0[1].shuffle_lane_words1230(),
  212|  45.8k|        ])
  213|  45.8k|    }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right20CswkaVU3ZAmW_11rand_chacha:
   42|  45.8k|        fn $fn(self) -> Self {
   43|  45.8k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  45.8k|        }
_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite864softINtB4_2x2INtNtNtNtB6_6x86_644sse24avx212u32x4x2_avx2NtBR_4NoNIENtBP_2G0ENtNtB6_5types16RotateEachWord3224rotate_each_word_right25CswkaVU3ZAmW_11rand_chacha:
   42|  45.8k|        fn $fn(self) -> Self {
   43|  45.8k|            x2::new([self.0[0].$fn(), self.0[1].$fn()])
   44|  45.8k|        }
_RNvXsg_NtCsf8HyAzZvOrI_10ppv_lite864softINtB5_2x2INtNtNtNtB7_6x86_644sse24avx212u32x4x2_avx2NtBS_4NoNIENtBQ_2G0ENtNtB7_5types10LaneWords422shuffle_lane_words2301CswkaVU3ZAmW_11rand_chacha:
  201|  45.8k|    fn shuffle_lane_words2301(self) -> Self {
  202|  45.8k|        Self::new([
  203|  45.8k|            self.0[0].shuffle_lane_words2301(),
  204|  45.8k|            self.0[1].shuffle_lane_words2301(),
  205|  45.8k|        ])
  206|  45.8k|    }

_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec512_storageINtNtB8_4soft2x2INtNtNtB6_4sse24avx212u32x4x2_avx2BS_ENtB2b_2G0EECswkaVU3ZAmW_11rand_chacha:
  246|  3.82k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  3.82k|        unsafe { V::unpack(s) }
  248|  3.82k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine3vecINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EAmj4_ECswkaVU3ZAmW_11rand_chacha:
  251|  3.82k|    fn vec<V, A>(self, a: A) -> V
  252|  3.82k|    where
  253|  3.82k|        V: MultiLane<A>,
  254|  3.82k|    {
  255|  3.82k|        V::from_lanes(a)
  256|  3.82k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtB6_4NoNIENtNtB8_5types7Machine6unpackNtB6_14vec128_storageINtNtB6_4sse210u32x4_sse2NtB6_5YesS3NtB6_5YesS4BS_EECswkaVU3ZAmW_11rand_chacha:
  246|  34.3k|    fn unpack<S, V: Store<S>>(self, s: S) -> V {
  247|  34.3k|        unsafe { V::unpack(s) }
  248|  34.3k|    }
_RINvYINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtB6_5YesS3NtB6_5YesS4NtB6_4NoNIENtNtB8_5types7Machine7read_leINtNtB6_4sse210u32x4_sse2BR_B12_B1d_EECswkaVU3ZAmW_11rand_chacha:
  259|     30|    fn read_le<V>(self, input: &[u8]) -> V
  260|     30|    where
  261|     30|        V: StoreBytes,
  262|     30|    {
  263|     30|        unsafe { V::unsafe_read_le(input) }
  264|     30|    }

_RNvXs_NtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB4_11Avx2MachineNtB4_4NoNIENtNtB6_5types7Machine8instanceCswkaVU3ZAmW_11rand_chacha:
   92|  3.82k|    unsafe fn instance() -> Self {
   93|  3.82k|        Avx2Machine(PhantomData)
   94|  3.82k|    }
_RNvNtCswkaVU3ZAmW_11rand_chacha4guts11init_chacha:
  333|     15|        $($pub $(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  334|     15|            #[inline(always)]
  335|     15|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  336|     15|            use std::arch::x86_64::*;
  337|     15|            #[target_feature(enable = "avx")]
  338|     15|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|     15|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|     15|            }
  341|     15|            #[target_feature(enable = "sse2")]
  342|     15|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  343|     15|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  344|     15|            }
  345|     15|            unsafe {
  346|     15|                if is_x86_feature_detected!("avx") {
  347|     15|                    impl_avx($($arg),*)
  348|      0|                } else if is_x86_feature_detected!("sse2") {
  349|      0|                    impl_sse2($($arg),*)
  350|       |                } else {
  351|      0|                    unimplemented!()
  352|       |                }
  353|       |            }
  354|     15|        }
_RNvXNtCsf8HyAzZvOrI_10ppv_lite866x86_64INtB2_10SseMachineNtB2_5YesS3NtB2_5YesS4NtB2_4NoNIENtNtB4_5types7Machine8instanceCswkaVU3ZAmW_11rand_chacha:
   64|     15|    unsafe fn instance() -> Self {
   65|     15|        SseMachine(PhantomData)
   66|     15|    }
_RNvNtCswkaVU3ZAmW_11rand_chacha4guts11refill_wide:
  250|  3.82k|        $($pub$(($krate))*)* fn $name($($arg: $argty),*) -> $ret {
  251|  3.82k|            #[inline(always)]
  252|  3.82k|            fn fn_impl<$MTy: $crate::Machine>($mach: $MTy, $($arg: $argty),*) -> $ret $body
  253|  3.82k|            use std::arch::x86_64::*;
  254|  3.82k|            #[target_feature(enable = "avx2")]
  255|  3.82k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  3.82k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  3.82k|                _mm256_zeroupper();
  258|  3.82k|                ret
  259|  3.82k|            }
  260|  3.82k|            #[target_feature(enable = "avx")]
  261|  3.82k|            #[target_feature(enable = "sse4.1")]
  262|  3.82k|            #[target_feature(enable = "ssse3")]
  263|  3.82k|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  264|  3.82k|                let ret = fn_impl($crate::x86_64::AVX::instance(), $($arg),*);
  265|  3.82k|                _mm256_zeroupper();
  266|  3.82k|                ret
  267|  3.82k|            }
  268|  3.82k|            #[target_feature(enable = "sse4.1")]
  269|  3.82k|            #[target_feature(enable = "ssse3")]
  270|  3.82k|            unsafe fn impl_sse41($($arg: $argty),*) -> $ret {
  271|  3.82k|                fn_impl($crate::x86_64::SSE41::instance(), $($arg),*)
  272|  3.82k|            }
  273|  3.82k|            #[target_feature(enable = "ssse3")]
  274|  3.82k|            unsafe fn impl_ssse3($($arg: $argty),*) -> $ret {
  275|  3.82k|                fn_impl($crate::x86_64::SSSE3::instance(), $($arg),*)
  276|  3.82k|            }
  277|  3.82k|            #[target_feature(enable = "sse2")]
  278|  3.82k|            unsafe fn impl_sse2($($arg: $argty),*) -> $ret {
  279|  3.82k|                fn_impl($crate::x86_64::SSE2::instance(), $($arg),*)
  280|  3.82k|            }
  281|  3.82k|            unsafe {
  282|  3.82k|                if is_x86_feature_detected!("avx2") {
  283|  3.82k|                    impl_avx2($($arg),*)
  284|      0|                } else if is_x86_feature_detected!("avx") {
  285|      0|                    impl_avx($($arg),*)
  286|      0|                } else if is_x86_feature_detected!("sse4.1") {
  287|      0|                    impl_sse41($($arg),*)
  288|      0|                } else if is_x86_feature_detected!("ssse3") {
  289|      0|                    impl_ssse3($($arg),*)
  290|      0|                } else if is_x86_feature_detected!("sse2") {
  291|      0|                    impl_sse2($($arg),*)
  292|       |                } else {
  293|      0|                    unimplemented!()
  294|       |                }
  295|       |            }
  296|  3.82k|        }
_RNvNvNtCswkaVU3ZAmW_11rand_chacha4guts11refill_wide9impl_avx2:
  255|  3.82k|            unsafe fn impl_avx2($($arg: $argty),*) -> $ret {
  256|  3.82k|                let ret = fn_impl($crate::x86_64::AVX2::instance(), $($arg),*);
  257|  3.82k|                _mm256_zeroupper();
  258|  3.82k|                ret
  259|  3.82k|            }
_RNvNvNtCswkaVU3ZAmW_11rand_chacha4guts11init_chacha8impl_avx:
  338|     15|            unsafe fn impl_avx($($arg: $argty),*) -> $ret {
  339|     15|                fn_impl($crate::x86_64::AVX::instance(), $($arg),*)
  340|     15|            }
_RNvXs2_NtCsf8HyAzZvOrI_10ppv_lite866x86_64NtB5_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromAmj4_E4from:
  130|     15|    fn from(u32x4: [u32; 4]) -> Self {
  131|     15|        vec128_storage { u32x4 }
  132|     15|    }

_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E8to_lanesCswkaVU3ZAmW_11rand_chacha:
  323|  15.2k|    fn to_lanes(self) -> [u32; 4] {
  324|  15.2k|        unsafe {
  325|  15.2k|            let x = _mm_cvtsi128_si64(self.x) as u64;
  326|  15.2k|            let y = _mm_extract_epi64(self.x, 1) as u64;
  327|  15.2k|            [x as u32, (x >> 32) as u32, y as u32, (y >> 32) as u32]
  328|  15.2k|        }
  329|  15.2k|    }
_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes8write_leCswkaVU3ZAmW_11rand_chacha:
   89|  61.1k|            fn write_le(self, out: &mut [u8]) {
   90|  61.1k|                assert_eq!(out.len(), 16);
   91|  61.1k|                unsafe { _mm_storeu_si128(out.as_mut_ptr() as *mut _, self.x) }
   92|  61.1k|            }
_RNvXs1R_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCswkaVU3ZAmW_11rand_chacha:
   18|  61.1k|            fn $fn(self, rhs: Self) -> Self::Output {
   19|  61.1k|                Self::new(unsafe { $impl_fn(self.x, rhs.x) })
   20|  61.1k|            }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E8to_lanesCswkaVU3ZAmW_11rand_chacha:
 1611|  15.2k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 4] {
 1612|  15.2k|            let [a, b] = self.0[0].to_lanes();
 1613|  15.2k|            let [c, d] = self.0[1].to_lanes();
 1614|  15.2k|            [a, b, c, d]
 1615|  15.2k|        }
_RNvXs0_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types5StoreNtB9_14vec256_storageE6unpackCswkaVU3ZAmW_11rand_chacha:
 1402|  7.64k|        unsafe fn unpack(p: vec256_storage) -> Self {
 1403|  7.64k|            Self::new(p.avx)
 1404|  7.64k|        }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E10from_lanesCswkaVU3ZAmW_11rand_chacha:
 1439|  30.5k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 2]) -> Self {
 1440|  30.5k|            Self::new(unsafe { _mm256_setr_m128i(x[0].x, x[1].x) })
 1441|  30.5k|        }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words3012CswkaVU3ZAmW_11rand_chacha:
 1590|  91.6k|        fn shuffle_lane_words3012(self) -> Self {
 1591|  91.6k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0011_1001) })
 1592|  91.6k|        }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right24CswkaVU3ZAmW_11rand_chacha:
 1470|  91.6k|            fn $name(self) -> Self {
 1471|  91.6k|                Self::new(unsafe {
 1472|  91.6k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  91.6k|                })
 1474|  91.6k|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words2301CswkaVU3ZAmW_11rand_chacha:
 1586|  91.6k|        fn shuffle_lane_words2301(self) -> Self {
 1587|  91.6k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b0100_1110) })
 1588|  91.6k|        }
_RNvXsr_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops3bit6BitXor6bitxorCswkaVU3ZAmW_11rand_chacha:
 1543|   366k|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|   366k|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|   366k|                }
_RNvXsv_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3addCswkaVU3ZAmW_11rand_chacha:
 1543|   366k|                fn $op_fn(self, rhs: Self) -> Self::Output {
 1544|   366k|                    Self::new(unsafe { $impl_fn(self.x, rhs.x) })
 1545|   366k|                }
_RNvXsq_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtNtCs9nhK3FOW46N_4core3ops5arith9AddAssign10add_assignCswkaVU3ZAmW_11rand_chacha:
 1527|   366k|                fn $assign_fn(&mut self, rhs: Self) {
 1528|   366k|                    *self = self.$bin_fn(rhs);
 1529|   366k|                }
_RNvXs10_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB6_10u32x4_sse2NtB8_5YesS3NtB8_5YesS4NtB8_4NoNIENtNtBa_5types10StoreBytes14unsafe_read_leCswkaVU3ZAmW_11rand_chacha:
   79|     30|            unsafe fn unsafe_read_le(input: &[u8]) -> Self {
   80|     30|                assert_eq!(input.len(), 16);
   81|     30|                Self::new(_mm_loadu_si128(input.as_ptr() as *const _))
   82|     30|            }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE7extractCswkaVU3ZAmW_11rand_chacha:
  519|  15.2k|    fn extract(self, i: u32) -> u32 {
  520|  15.2k|        self.to_lanes()[i as usize]
  521|  15.2k|    }
_RNvXs2_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIEINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1c_Ej2_E8to_lanesCswkaVU3ZAmW_11rand_chacha:
 1430|  30.5k|        fn to_lanes(self) -> [u32x4_sse2<YesS3, YesS4, NI>; 2] {
 1431|  30.5k|            unsafe {
 1432|  30.5k|                [
 1433|  30.5k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 0)),
 1434|  30.5k|                    u32x4_sse2::new(_mm256_extracti128_si256(self.x, 1)),
 1435|  30.5k|                ]
 1436|  30.5k|            }
 1437|  30.5k|        }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right25CswkaVU3ZAmW_11rand_chacha:
 1480|  91.6k|            fn $name(self) -> Self {
 1481|  91.6k|                Self::new(unsafe {
 1482|  91.6k|                    _mm256_or_si256(
 1483|  91.6k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  91.6k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  91.6k|                    )
 1486|  91.6k|                })
 1487|  91.6k|            }
_RNvMsZ_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIE3newCswkaVU3ZAmW_11rand_chacha:
   64|   213k|            fn new(x: __m128i) -> Self {
   65|   213k|                $vec {
   66|   213k|                    x,
   67|   213k|                    s3: PhantomData,
   68|   213k|                    s4: PhantomData,
   69|   213k|                    ni: PhantomData,
   70|   213k|                }
   71|   213k|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right16CswkaVU3ZAmW_11rand_chacha:
 1470|  91.6k|            fn $name(self) -> Self {
 1471|  91.6k|                Self::new(unsafe {
 1472|  91.6k|                    _mm256_shuffle_epi8(self.x, _mm256_set_epi64x($k0, $k1, $k0, $k1))
 1473|  91.6k|                })
 1474|  91.6k|            }
_RNvXs6_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types16RotateEachWord3224rotate_each_word_right20CswkaVU3ZAmW_11rand_chacha:
 1480|  91.6k|            fn $name(self) -> Self {
 1481|  91.6k|                Self::new(unsafe {
 1482|  91.6k|                    _mm256_or_si256(
 1483|  91.6k|                        _mm256_srli_epi32(self.x, $i as i32),
 1484|  91.6k|                        _mm256_slli_epi32(self.x, 32 - $i as i32),
 1485|  91.6k|                    )
 1486|  91.6k|                })
 1487|  91.6k|            }
_RNvXsc_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB5_12u32x4x2_avx2NtB9_4NoNIENtNtBb_5types10LaneWords422shuffle_lane_words1230CswkaVU3ZAmW_11rand_chacha:
 1582|  91.6k|        fn shuffle_lane_words1230(self) -> Self {
 1583|  91.6k|            Self::new(unsafe { _mm256_shuffle_epi32(self.x, 0b1001_0011) })
 1584|  91.6k|        }
_RNvXse_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types5StoreNtB9_14vec512_storageE6unpackCswkaVU3ZAmW_11rand_chacha:
 1602|  3.82k|        unsafe fn unpack(p: vec512_storage) -> Self {
 1603|  3.82k|            Self::new([
 1604|  3.82k|                u32x4x2_avx2::unpack(p.avx[0]),
 1605|  3.82k|                u32x4x2_avx2::unpack(p.avx[1]),
 1606|  3.82k|            ])
 1607|  3.82k|        }
_RNvXsf_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EINtNtBb_5types9MultiLaneAINtB7_10u32x4_sse2NtB9_5YesS3NtB9_5YesS4B1s_Ej4_E10from_lanesCswkaVU3ZAmW_11rand_chacha:
 1617|  15.2k|        fn from_lanes(x: [u32x4_sse2<YesS3, YesS4, NI>; 4]) -> Self {
 1618|  15.2k|            let ab = u32x4x2_avx2::from_lanes([x[0], x[1]]);
 1619|  15.2k|            let cd = u32x4x2_avx2::from_lanes([x[2], x[3]]);
 1620|  15.2k|            Self::new([ab, cd])
 1621|  15.2k|        }
_RNvXsX_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types5StoreNtB7_14vec128_storageE6unpackCswkaVU3ZAmW_11rand_chacha:
   52|  34.3k|            unsafe fn unpack(x: vec128_storage) -> Self {
   53|  34.3k|                Self::new(x.sse2)
   54|  34.3k|            }
_RNvMNtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2INtB2_12u32x4x2_avx2NtB6_4NoNIE3newCswkaVU3ZAmW_11rand_chacha:
 1394|  1.41M|        fn new(x: __m256i) -> Self {
 1395|  1.41M|            Self { x, ni: PhantomData }
 1396|  1.41M|        }
_RNvXsl_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types4Vec4mE6insertCswkaVU3ZAmW_11rand_chacha:
  523|  53.4k|    fn insert(self, v: u32, i: u32) -> Self {
  524|  53.4k|        Self::new(unsafe {
  525|  53.4k|            match i {
  526|  26.7k|                0 => _mm_insert_epi32(self.x, v as i32, 0),
  527|  26.7k|                1 => _mm_insert_epi32(self.x, v as i32, 1),
  528|      0|                2 => _mm_insert_epi32(self.x, v as i32, 2),
  529|      0|                3 => _mm_insert_epi32(self.x, v as i32, 3),
  530|      0|                _ => unreachable!(),
  531|       |            }
  532|       |        })
  533|  53.4k|    }
_RNvXs6_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2INtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEINtNtB9_5types9MultiLaneAmj4_E10from_lanesCswkaVU3ZAmW_11rand_chacha:
  331|  3.82k|    fn from_lanes(xs: [u32; 4]) -> Self {
  332|  3.82k|        unsafe {
  333|  3.82k|            let mut x = _mm_cvtsi64_si128((xs[0] as u64 | ((xs[1] as u64) << 32)) as i64);
  334|  3.82k|            x = _mm_insert_epi64(x, (xs[2] as u64 | ((xs[3] as u64) << 32)) as i64, 1);
  335|  3.82k|            Self::new(x)
  336|  3.82k|        }
  337|  3.82k|    }
_RNvXsj_NtNtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse24avx2NtB9_14vec512_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtNtBb_4soft2x2INtB5_12u32x4x2_avx2NtB9_4NoNIENtB7_2G0EE4fromCswkaVU3ZAmW_11rand_chacha:
 1683|  3.82k|        fn from(x: u32x4x4_avx2<NI>) -> Self {
 1684|  3.82k|            Self {
 1685|  3.82k|                avx: [
 1686|  3.82k|                    vec256_storage { avx: x.0[0].x },
 1687|  3.82k|                    vec256_storage { avx: x.0[1].x },
 1688|  3.82k|                ],
 1689|  3.82k|            }
 1690|  3.82k|        }
_RNvXsY_NtNtCsf8HyAzZvOrI_10ppv_lite866x86_644sse2NtB7_14vec128_storageINtNtCs9nhK3FOW46N_4core7convert4FromINtB5_10u32x4_sse2NtB7_5YesS3NtB7_5YesS4NtB7_4NoNIEE4fromCswkaVU3ZAmW_11rand_chacha:
   58|  3.85k|            fn from(x: $vec<S3, S4, NI>) -> Self {
   59|  3.85k|                vec128_storage { sse2: x.x }
   60|  3.85k|            }

_RINvXs2_NtNtCs6voGXdKRTOy_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionoE6sampleNtNtNtBa_4rngs6thread9ThreadRngECskGc5T8eVihK_9spargebra:
   51|  61.1k|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u128 {
   52|  61.1k|        // Use LE; we explicitly generate one value before the next.
   53|  61.1k|        let x = u128::from(rng.next_u64());
   54|  61.1k|        let y = u128::from(rng.next_u64());
   55|  61.1k|        (y << 64) | x
   56|  61.1k|    }

_RINvCs6voGXdKRTOy_4rand6randomoECskGc5T8eVihK_9spargebra:
  183|  61.1k|pub fn random<T>() -> T
  184|  61.1k|where Standard: Distribution<T> {
  185|  61.1k|    thread_rng().gen()
  186|  61.1k|}

_RINvYNtNtNtCs6voGXdKRTOy_4rand4rngs6thread9ThreadRngNtNtB9_3rng3Rng3genoECskGc5T8eVihK_9spargebra:
   93|  61.1k|    fn gen<T>(&mut self) -> T
   94|  61.1k|    where Standard: Distribution<T> {
   95|  61.1k|        Standard.sample(self)
   96|  61.1k|    }

_RNvXs_NtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseedingINtB4_12ReseedingRngNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtNtCsfg7E1GDOqBC_9rand_core2os5OsRngENtB23_7RngCore8next_u64CskGc5T8eVihK_9spargebra:
  124|   122k|    fn next_u64(&mut self) -> u64 {
  125|   122k|        self.0.next_u64()
  126|   122k|    }
_RNvNtNtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseeding4fork21register_fork_handler:
  317|      1|    pub fn register_fork_handler() {
  318|      1|        static REGISTER: Once = Once::new();
  319|      1|        REGISTER.call_once(|| {
  320|       |            // Bump the counter before and after forking (see #1169):
  321|       |            let ret = unsafe { libc::pthread_atfork(
  322|       |                Some(fork_handler),
  323|       |                Some(fork_handler),
  324|       |                Some(fork_handler),
  325|       |            ) };
  326|       |            if ret != 0 {
  327|       |                panic!("libc::pthread_atfork failed with code {}", ret);
  328|       |            }
  329|      1|        });
  330|      1|    }
_RNCNvMs3_NtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseedingINtB7_13ReseedingCoreNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtNtCsfg7E1GDOqBC_9rand_core2os5OsRngE6reseed0Bd_:
  220|     14|        R::from_rng(&mut self.reseeder).map(|result| {
  221|     14|            self.bytes_until_reseed = self.threshold;
  222|     14|            self.inner = result
  223|     14|        })
_RNCNvNtNtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseeding4fork21register_fork_handler0Bb_:
  319|      1|        REGISTER.call_once(|| {
  320|      1|            // Bump the counter before and after forking (see #1169):
  321|      1|            let ret = unsafe { libc::pthread_atfork(
  322|      1|                Some(fork_handler),
  323|      1|                Some(fork_handler),
  324|      1|                Some(fork_handler),
  325|      1|            ) };
  326|      1|            if ret != 0 {
  327|      0|                panic!("libc::pthread_atfork failed with code {}", ret);
  328|      1|            }
  329|      1|        });
_RNvMs3_NtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtNtCsfg7E1GDOqBC_9rand_core2os5OsRngE9is_forkedBb_:
  226|  3.82k|    fn is_forked(&self, global_fork_counter: usize) -> bool {
  227|  3.82k|        // In theory, on 32-bit platforms, it is possible for
  228|  3.82k|        // `global_fork_counter` to wrap around after ~4e9 forks.
  229|  3.82k|        //
  230|  3.82k|        // This check will detect a fork in the normal case where
  231|  3.82k|        // `fork_counter < global_fork_counter`, and also when the difference
  232|  3.82k|        // between both is greater than `isize::MAX` (wrapped around).
  233|  3.82k|        //
  234|  3.82k|        // It will still fail to detect a fork if there have been more than
  235|  3.82k|        // `isize::MAX` forks, without any reseed in between. Seems unlikely
  236|  3.82k|        // enough.
  237|  3.82k|        (self.fork_counter.wrapping_sub(global_fork_counter) as isize) < 0
  238|  3.82k|    }
_RNvMs3_NtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtNtCsfg7E1GDOqBC_9rand_core2os5OsRngE19reseed_and_generateBb_:
  241|     14|    fn reseed_and_generate(
  242|     14|        &mut self, results: &mut <Self as BlockRngCore>::Results, global_fork_counter: usize,
  243|     14|    ) {
  244|     14|        #![allow(clippy::if_same_then_else)] // false positive
  245|     14|        if self.is_forked(global_fork_counter) {
  246|      0|            info!("Fork detected, reseeding RNG");
  247|     14|        } else {
  248|     14|            trace!("Reseeding RNG (periodic reseed)");
  249|     14|        }
  250|       |
  251|     14|        let num_bytes = results.as_ref().len() * size_of::<<R as BlockRngCore>::Item>();
  252|       |
  253|     14|        if let Err(e) = self.reseed() {
  254|      0|            warn!("Reseeding RNG failed: {}", e);
  255|      0|            let _ = e;
  256|     14|        }
  257|     14|        self.fork_counter = global_fork_counter;
  258|     14|
  259|     14|        self.bytes_until_reseed = self.threshold - num_bytes as i64;
  260|     14|        self.inner.generate(results);
  261|     14|    }
_RNvNtNtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseeding4fork16get_fork_counter:
  307|  3.82k|    pub fn get_fork_counter() -> usize {
  308|  3.82k|        RESEEDING_RNG_FORK_COUNTER.load(Ordering::Relaxed)
  309|  3.82k|    }
_RNvXs2_NtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtNtCsfg7E1GDOqBC_9rand_core2os5OsRngENtNtB25_5block12BlockRngCore8generateBb_:
  173|  3.82k|    fn generate(&mut self, results: &mut Self::Results) {
  174|  3.82k|        let global_fork_counter = fork::get_fork_counter();
  175|  3.82k|        if self.bytes_until_reseed <= 0 || self.is_forked(global_fork_counter) {
  176|       |            // We get better performance by not calling only `reseed` here
  177|       |            // and continuing with the rest of the function, but by directly
  178|       |            // returning from a non-inlined function.
  179|     14|            return self.reseed_and_generate(results, global_fork_counter);
  180|  3.80k|        }
  181|  3.80k|        let num_bytes = results.as_ref().len() * size_of::<Self::Item>();
  182|  3.80k|        self.bytes_until_reseed -= num_bytes as i64;
  183|  3.80k|        self.inner.generate(results);
  184|  3.82k|    }
_RNvMs3_NtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtNtCsfg7E1GDOqBC_9rand_core2os5OsRngE6reseedBb_:
  219|     14|    fn reseed(&mut self) -> Result<(), Error> {
  220|     14|        R::from_rng(&mut self.reseeder).map(|result| {
  221|       |            self.bytes_until_reseed = self.threshold;
  222|       |            self.inner = result
  223|     14|        })
  224|     14|    }
_RNvMs3_NtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseedingINtB5_13ReseedingCoreNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtNtCsfg7E1GDOqBC_9rand_core2os5OsRngE3newBb_:
  193|      1|    fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  194|      1|        use ::core::i64::MAX;
  195|      1|        fork::register_fork_handler();
  196|       |
  197|       |        // Because generating more values than `i64::MAX` takes centuries on
  198|       |        // current hardware, we just clamp to that value.
  199|       |        // Also we set a threshold of 0, which indicates no limit, to that
  200|       |        // value.
  201|      1|        let threshold = if threshold == 0 {
  202|      0|            MAX
  203|      1|        } else if threshold <= MAX as u64 {
  204|      1|            threshold as i64
  205|       |        } else {
  206|      0|            MAX
  207|       |        };
  208|       |
  209|      1|        ReseedingCore {
  210|      1|            inner: rng,
  211|      1|            reseeder,
  212|      1|            threshold: threshold as i64,
  213|      1|            bytes_until_reseed: threshold as i64,
  214|      1|            fork_counter: 0,
  215|      1|        }
  216|      1|    }
_RNvMNtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseedingINtB2_12ReseedingRngNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtNtCsfg7E1GDOqBC_9rand_core2os5OsRngE3newB8_:
  101|      1|    pub fn new(rng: R, threshold: u64, reseeder: Rsdr) -> Self {
  102|      1|        ReseedingRng(BlockRng::new(ReseedingCore::new(rng, threshold, reseeder)))
  103|      1|    }

_RNvXs_NtNtCs6voGXdKRTOy_4rand4rngs6threadNtB4_9ThreadRngNtCsfg7E1GDOqBC_9rand_core7RngCore8next_u64:
  109|   122k|    fn next_u64(&mut self) -> u64 {
  110|   122k|        // SAFETY: We must make sure to stop using `rng` before anyone else
  111|   122k|        // creates another mutable reference
  112|   122k|        let rng = unsafe { &mut *self.rng.get() };
  113|   122k|        rng.next_u64()
  114|   122k|    }
_RNCNvNtNtCs6voGXdKRTOy_4rand4rngs6thread10thread_rng0B7_:
   89|  61.1k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
_RNCNvNvNtNtCs6voGXdKRTOy_4rand4rngs6thread14THREAD_RNG_KEY7___getit0B9_:
   67|      1|thread_local!(
   68|      1|    // We require Rc<..> to avoid premature freeing when thread_rng is used
   69|      1|    // within thread-local destructors. See #968.
   70|      1|    static THREAD_RNG_KEY: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>> = {
   71|      1|        let r = Core::from_rng(OsRng).unwrap_or_else(|err|
   72|      1|                panic!("could not initialize thread_rng: {}", err));
   73|      1|        let rng = ReseedingRng::new(r,
   74|      1|                                    THREAD_RNG_RESEED_THRESHOLD,
   75|      1|                                    OsRng);
   76|      1|        Rc::new(UnsafeCell::new(rng))
   77|      1|    }
   78|      1|);
_RNvNtNtCs6voGXdKRTOy_4rand4rngs6thread10thread_rng:
   88|  61.1k|pub fn thread_rng() -> ThreadRng {
   89|  61.1k|    let rng = THREAD_RNG_KEY.with(|t| t.clone());
   90|  61.1k|    ThreadRng { rng }
   91|  61.1k|}

_RNvXsm_NtCswkaVU3ZAmW_11rand_chacha6chachaNtB5_12ChaCha12CoreNtNtCsfg7E1GDOqBC_9rand_core5block12BlockRngCore8generateCs6voGXdKRTOy_4rand:
   89|  3.82k|            fn generate(&mut self, r: &mut Self::Results) {
   90|  3.82k|                // Fill slice of words by writing to equivalent slice of bytes, then fixing endianness.
   91|  3.82k|                self.state.refill4($rounds, unsafe {
   92|  3.82k|                    &mut *(&mut *r as *mut Array64<u32> as *mut [u8; 256])
   93|  3.82k|                });
   94|   244k|                for x in r.as_mut() {
   95|   244k|                    *x = x.to_le();
   96|   244k|                }
   97|  3.82k|            }
_RNvXsn_NtCswkaVU3ZAmW_11rand_chacha6chachaNtB5_12ChaCha12CoreNtCsfg7E1GDOqBC_9rand_core11SeedableRng9from_seedCs6voGXdKRTOy_4rand:
  103|     15|            fn from_seed(seed: Self::Seed) -> Self {
  104|     15|                $ChaChaXCore { state: ChaCha::new(&seed, &[0u8; 8]) }
  105|     15|            }
_RNvXs_NtCswkaVU3ZAmW_11rand_chacha6chachaINtB4_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsRefSmE6as_refB6_:
   46|   252k|    fn as_ref(&self) -> &[T] {
   47|   252k|        &self.0
   48|   252k|    }
_RNvXs0_NtCswkaVU3ZAmW_11rand_chacha6chachaINtB5_7Array64mEINtNtCs9nhK3FOW46N_4core7convert5AsMutSmE6as_mutB7_:
   51|  3.82k|    fn as_mut(&mut self) -> &mut [T] {
   52|  3.82k|        &mut self.0
   53|  3.82k|    }
_RNvXNtCswkaVU3ZAmW_11rand_chacha6chachaINtB2_7Array64mENtNtCs9nhK3FOW46N_4core7default7Default7defaultB4_:
   32|      1|    fn default() -> Self {
   33|      1|        Self([
   34|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   35|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   36|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   37|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   38|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   39|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   40|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   41|      1|            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),
   42|      1|        ])
   43|      1|    }

_RNvMNtCswkaVU3ZAmW_11rand_chacha4gutsNtB2_6ChaCha7refill4:
   84|  3.82k|    pub fn refill4(&mut self, drounds: u32, out: &mut [u8; BUFSZ]) {
   85|  3.82k|        refill_wide(self, drounds, out)
   86|  3.82k|    }
_RNvMNtCswkaVU3ZAmW_11rand_chacha4gutsNtB2_6ChaCha3new:
   72|     15|    pub fn new(key: &[u8; 32], nonce: &[u8]) -> Self {
   73|     15|        init_chacha(key, nonce)
   74|     15|    }
_RINvNvNtCswkaVU3ZAmW_11rand_chacha4guts11init_chacha7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6410SseMachineNtBZ_5YesS3NtBZ_5YesS4NtBZ_4NoNIEEB6_:
  235|     15|    fn init_chacha(key: &[u8; 32], nonce: &[u8]) -> ChaCha {
  236|     15|        let ctr_nonce = [
  237|       |            0,
  238|     15|            if nonce.len() == 12 {
  239|      0|                read_u32le(&nonce[0..4])
  240|       |            } else {
  241|     15|                0
  242|       |            },
  243|     15|            read_u32le(&nonce[nonce.len() - 8..nonce.len() - 4]),
  244|     15|            read_u32le(&nonce[nonce.len() - 4..]),
  245|     15|        ];
  246|     15|        let key0: Mach::u32x4 = m.read_le(&key[..16]);
  247|     15|        let key1: Mach::u32x4 = m.read_le(&key[16..]);
  248|     15|        ChaCha {
  249|     15|            b: key0.into(),
  250|     15|            c: key1.into(),
  251|     15|            d: ctr_nonce.into(),
  252|     15|        }
_RINvNtCswkaVU3ZAmW_11rand_chacha4guts13undiagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBT_6x86_644sse24avx212u32x4x2_avx2NtB1y_4NoNIENtB1w_2G0EEB4_:
   63|  22.9k|pub(crate) fn undiagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   64|  22.9k|    x.b = x.b.shuffle_lane_words1230();
   65|  22.9k|    x.c = x.c.shuffle_lane_words2301();
   66|  22.9k|    x.d = x.d.shuffle_lane_words3012();
   67|  22.9k|    x
   68|  22.9k|}
_RINvNtCswkaVU3ZAmW_11rand_chacha4guts11diagonalizeINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBR_6x86_644sse24avx212u32x4x2_avx2NtB1w_4NoNIENtB1u_2G0EEB4_:
   56|  22.9k|pub(crate) fn diagonalize<V: LaneWords4>(mut x: State<V>) -> State<V> {
   57|  22.9k|    x.b = x.b.shuffle_lane_words3012();
   58|  22.9k|    x.c = x.c.shuffle_lane_words2301();
   59|  22.9k|    x.d = x.d.shuffle_lane_words1230();
   60|  22.9k|    x
   61|  22.9k|}
_RINvNtCswkaVU3ZAmW_11rand_chacha4guts5roundINtNtCsf8HyAzZvOrI_10ppv_lite864soft2x2INtNtNtNtBK_6x86_644sse24avx212u32x4x2_avx2NtB1p_4NoNIENtB1n_2G0EEB4_:
   43|  45.8k|pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {
   44|  45.8k|    x.a += x.b;
   45|  45.8k|    x.d = (x.d ^ x.a).rotate_each_word_right16();
   46|  45.8k|    x.c += x.d;
   47|  45.8k|    x.b = (x.b ^ x.c).rotate_each_word_right20();
   48|  45.8k|    x.a += x.b;
   49|  45.8k|    x.d = (x.d ^ x.a).rotate_each_word_right24();
   50|  45.8k|    x.c += x.d;
   51|  45.8k|    x.b = (x.b ^ x.c).rotate_each_word_right25();
   52|  45.8k|    x
   53|  45.8k|}
_RINvNtCswkaVU3ZAmW_11rand_chacha4guts16refill_wide_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBU_4NoNIEEB4_:
  116|  3.82k|fn refill_wide_impl<Mach: Machine>(
  117|  3.82k|    m: Mach, state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ],
  118|  3.82k|) {
  119|  3.82k|    let k = m.vec([0x6170_7865, 0x3320_646e, 0x7962_2d32, 0x6b20_6574]);
  120|  3.82k|    let mut pos = state.pos64(m);
  121|  3.82k|    let d0: Mach::u32x4 = m.unpack(state.d);
  122|  3.82k|    pos = pos.wrapping_add(1);
  123|  3.82k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  124|  3.82k|    pos = pos.wrapping_add(1);
  125|  3.82k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  126|  3.82k|    pos = pos.wrapping_add(1);
  127|  3.82k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  128|  3.82k|
  129|  3.82k|    let b = m.unpack(state.b);
  130|  3.82k|    let c = m.unpack(state.c);
  131|  3.82k|    let mut x = State {
  132|  3.82k|        a: Mach::u32x4x4::from_lanes([k, k, k, k]),
  133|  3.82k|        b: Mach::u32x4x4::from_lanes([b, b, b, b]),
  134|  3.82k|        c: Mach::u32x4x4::from_lanes([c, c, c, c]),
  135|  3.82k|        d: m.unpack(Mach::u32x4x4::from_lanes([d0, d1, d2, d3]).into()),
  136|  3.82k|    };
  137|  22.9k|    for _ in 0..drounds {
  138|  22.9k|        x = round(x);
  139|  22.9k|        x = undiagonalize(round(diagonalize(x)));
  140|  22.9k|    }
  141|  3.82k|    let mut pos = state.pos64(m);
  142|  3.82k|    let d0: Mach::u32x4 = m.unpack(state.d);
  143|  3.82k|    pos = pos.wrapping_add(1);
  144|  3.82k|    let d1 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  145|  3.82k|    pos = pos.wrapping_add(1);
  146|  3.82k|    let d2 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  147|  3.82k|    pos = pos.wrapping_add(1);
  148|  3.82k|    let d3 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  149|  3.82k|    pos = pos.wrapping_add(1);
  150|  3.82k|    let d4 = d0.insert((pos >> 32) as u32, 1).insert(pos as u32, 0);
  151|  3.82k|
  152|  3.82k|    let (a, b, c, d) = (
  153|  3.82k|        x.a.to_lanes(),
  154|  3.82k|        x.b.to_lanes(),
  155|  3.82k|        x.c.to_lanes(),
  156|  3.82k|        x.d.to_lanes(),
  157|  3.82k|    );
  158|  3.82k|    let sb = m.unpack(state.b);
  159|  3.82k|    let sc = m.unpack(state.c);
  160|  3.82k|    let sd = [m.unpack(state.d), d1, d2, d3];
  161|  3.82k|    state.d = d4.into();
  162|  3.82k|    let mut words = out.chunks_exact_mut(16);
  163|  15.2k|    for ((((&a, &b), &c), &d), &sd) in a.iter().zip(&b).zip(&c).zip(&d).zip(&sd) {
  164|  15.2k|        (a + k).write_le(words.next().unwrap());
  165|  15.2k|        (b + sb).write_le(words.next().unwrap());
  166|  15.2k|        (c + sc).write_le(words.next().unwrap());
  167|  15.2k|        (d + sd).write_le(words.next().unwrap());
  168|  15.2k|    }
  169|  3.82k|}
_RNvNtCswkaVU3ZAmW_11rand_chacha4guts10read_u32le:
  229|     30|fn read_u32le(xs: &[u8]) -> u32 {
  230|     30|    assert_eq!(xs.len(), 4);
  231|     30|    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)
  232|     30|}
_RINvMNtCswkaVU3ZAmW_11rand_chacha4gutsNtB3_6ChaCha5pos64INtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBV_4NoNIEEB5_:
   77|  7.64k|    fn pos64<M: Machine>(&self, m: M) -> u64 {
   78|  7.64k|        let d: M::u32x4 = m.unpack(self.d);
   79|  7.64k|        ((d.extract(1) as u64) << 32) | d.extract(0) as u64
   80|  7.64k|    }
_RINvNvNtCswkaVU3ZAmW_11rand_chacha4guts11refill_wide7fn_implINtNtCsf8HyAzZvOrI_10ppv_lite866x86_6411Avx2MachineNtBZ_4NoNIEEB6_:
  172|  3.82k|    fn refill_wide(state: &mut ChaCha, drounds: u32, out: &mut [u8; BUFSZ]) {
  173|  3.82k|        refill_wide_impl(m, state, drounds, out);
  174|  3.82k|    }

_RNCNvXs0_NtCsfg7E1GDOqBC_9rand_core5blockINtB7_8BlockRngINtNtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtNtB9_2os5OsRngEENtB9_7RngCore8next_u640CskGc5T8eVihK_9spargebra:
  198|   122k|        let read_u64 = |results: &[u32], index| {
  199|   122k|            let data = &results[index..=index + 1];
  200|   122k|            u64::from(data[1]) << 32 | u64::from(data[0])
  201|   122k|        };
_RNvXs0_NtCsfg7E1GDOqBC_9rand_core5blockINtB5_8BlockRngINtNtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtNtB7_2os5OsRngEENtB7_7RngCore8next_u64CskGc5T8eVihK_9spargebra:
  197|   122k|    fn next_u64(&mut self) -> u64 {
  198|   122k|        let read_u64 = |results: &[u32], index| {
  199|       |            let data = &results[index..=index + 1];
  200|       |            u64::from(data[1]) << 32 | u64::from(data[0])
  201|       |        };
  202|       |
  203|   122k|        let len = self.results.as_ref().len();
  204|   122k|
  205|   122k|        let index = self.index;
  206|   122k|        if index < len - 1 {
  207|   118k|            self.index += 2;
  208|   118k|            // Read an u64 from the current index
  209|   118k|            read_u64(self.results.as_ref(), index)
  210|  3.82k|        } else if index >= len {
  211|  3.82k|            self.generate_and_set(2);
  212|  3.82k|            read_u64(self.results.as_ref(), 0)
  213|       |        } else {
  214|      0|            let x = u64::from(self.results.as_ref()[len - 1]);
  215|      0|            self.generate_and_set(1);
  216|      0|            let y = u64::from(self.results.as_ref()[0]);
  217|      0|            (y << 32) | x
  218|       |        }
  219|   122k|    }
_RNvMs_NtCsfg7E1GDOqBC_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE16generate_and_setBY_:
  174|  3.82k|    pub fn generate_and_set(&mut self, index: usize) {
  175|  3.82k|        assert!(index < self.results.as_ref().len());
  176|  3.82k|        self.core.generate(&mut self.results);
  177|  3.82k|        self.index = index;
  178|  3.82k|    }
_RNvMs_NtCsfg7E1GDOqBC_9rand_core5blockINtB4_8BlockRngINtNtNtNtCs6voGXdKRTOy_4rand4rngs7adapter9reseeding13ReseedingCoreNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtNtB6_2os5OsRngEE3newBY_:
  145|      1|    pub fn new(core: R) -> BlockRng<R> {
  146|      1|        let results_empty = R::Results::default();
  147|      1|        BlockRng {
  148|      1|            core,
  149|      1|            index: results_empty.as_ref().len(),
  150|      1|            results: results_empty,
  151|      1|        }
  152|      1|    }

_RINvYNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtCsfg7E1GDOqBC_9rand_core11SeedableRng8from_rngQNtNtBU_2os5OsRngECs6voGXdKRTOy_4rand:
  390|     14|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|     14|        let mut seed = Self::Seed::default();
  392|     14|        rng.try_fill_bytes(seed.as_mut())?;
  393|     14|        Ok(Self::from_seed(seed))
  394|     14|    }
_RINvYNtNtCswkaVU3ZAmW_11rand_chacha6chacha12ChaCha12CoreNtCsfg7E1GDOqBC_9rand_core11SeedableRng8from_rngNtNtBU_2os5OsRngECs6voGXdKRTOy_4rand:
  390|      1|    fn from_rng<R: RngCore>(mut rng: R) -> Result<Self, Error> {
  391|      1|        let mut seed = Self::Seed::default();
  392|      1|        rng.try_fill_bytes(seed.as_mut())?;
  393|      1|        Ok(Self::from_seed(seed))
  394|      1|    }
_RNvXs_Csfg7E1GDOqBC_9rand_coreQNtNtB4_2os5OsRngNtB4_7RngCore14try_fill_bytesCs6voGXdKRTOy_4rand:
  441|     14|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
  442|     14|        (**self).try_fill_bytes(dest)
  443|     14|    }

_RNvXs_NtCsfg7E1GDOqBC_9rand_core2osNtB4_5OsRngNtB6_7RngCore14try_fill_bytes:
   67|     15|    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {
   68|     15|        getrandom(dest)?;
   69|     15|        Ok(())
   70|     15|    }

_RNvXsb_NtCsdmAy3pJ2Dco_9siphasher6sip128INtB5_6HasherNtB5_11Sip24RoundsENtNtCs9nhK3FOW46N_4core4hash6Hasher5writeCsd92XLxb96zi_8oxigraph:
  558|  81.7k|    fn write(&mut self, msg: &[u8]) {
  559|  81.7k|        let length = msg.len();
  560|  81.7k|        self.length += length;
  561|  81.7k|
  562|  81.7k|        let mut needed = 0;
  563|  81.7k|
  564|  81.7k|        if self.ntail != 0 {
  565|      0|            needed = 8 - self.ntail;
  566|      0|            self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);
  567|      0|            if length < needed {
  568|      0|                self.ntail += length;
  569|      0|                return;
  570|      0|            } else {
  571|      0|                self.state.v3 ^= self.tail;
  572|      0|                S::c_rounds(&mut self.state);
  573|      0|                self.state.v0 ^= self.tail;
  574|      0|                self.ntail = 0;
  575|      0|            }
  576|  81.7k|        }
  577|       |
  578|       |        // Buffered tail is now flushed, process new input.
  579|  81.7k|        let len = length - needed;
  580|  81.7k|        let left = len & 0x7;
  581|  81.7k|
  582|  81.7k|        let mut i = needed;
  583|   321k|        while i < len - left {
  584|   239k|            let mi = unsafe { load_int_le!(msg, i, u64) };
  585|   239k|
  586|   239k|            self.state.v3 ^= mi;
  587|   239k|            S::c_rounds(&mut self.state);
  588|   239k|            self.state.v0 ^= mi;
  589|   239k|
  590|   239k|            i += 8;
  591|       |        }
  592|       |
  593|  81.7k|        self.tail = unsafe { u8to64_le(msg, i, left) };
  594|  81.7k|        self.ntail = left;
  595|  81.7k|    }
_RNvMs7_NtCsdmAy3pJ2Dco_9siphasher6sip128INtB5_6HasherNtB5_11Sip24RoundsE9finish128Csd92XLxb96zi_8oxigraph:
  404|  81.7k|    pub fn finish128(&self) -> Hash128 {
  405|  81.7k|        let mut state = self.state;
  406|  81.7k|
  407|  81.7k|        let b: u64 = ((self.length as u64 & 0xff) << 56) | self.tail;
  408|  81.7k|
  409|  81.7k|        state.v3 ^= b;
  410|  81.7k|        S::c_rounds(&mut state);
  411|  81.7k|        state.v0 ^= b;
  412|  81.7k|
  413|  81.7k|        state.v2 ^= 0xee;
  414|  81.7k|        S::d_rounds(&mut state);
  415|  81.7k|        let h1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
  416|  81.7k|
  417|  81.7k|        state.v1 ^= 0xdd;
  418|  81.7k|        S::d_rounds(&mut state);
  419|  81.7k|        let h2 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
  420|  81.7k|
  421|  81.7k|        Hash128 { h1, h2 }
  422|  81.7k|    }
_RNvXsf_NtCsdmAy3pJ2Dco_9siphasher6sip128NtB5_11Sip24RoundsNtB5_3Sip8c_roundsCsd92XLxb96zi_8oxigraph:
  654|   321k|    fn c_rounds(state: &mut State) {
  655|   321k|        compress!(state);
  656|   321k|        compress!(state);
  657|   321k|    }
_RNvXsf_NtCsdmAy3pJ2Dco_9siphasher6sip128NtB5_11Sip24RoundsNtB5_3Sip8d_roundsCsd92XLxb96zi_8oxigraph:
  660|   163k|    fn d_rounds(state: &mut State) {
  661|   163k|        compress!(state);
  662|   163k|        compress!(state);
  663|   163k|        compress!(state);
  664|   163k|        compress!(state);
  665|   163k|    }
_RNvXsa_NtCsdmAy3pJ2Dco_9siphasher6sip128NtB5_11SipHasher24NtNtCs9nhK3FOW46N_4core4hash6Hasher5writeCsd92XLxb96zi_8oxigraph:
  501|  81.7k|    fn write(&mut self, msg: &[u8]) {
  502|  81.7k|        self.hasher.write(msg)
  503|  81.7k|    }
_RNvMs4_NtCsdmAy3pJ2Dco_9siphasher6sip128NtB5_11SipHasher2413new_with_keysCsd92XLxb96zi_8oxigraph:
  286|  81.7k|    pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher24 {
  287|  81.7k|        SipHasher24 {
  288|  81.7k|            hasher: Hasher::new_with_keys(key0, key1),
  289|  81.7k|        }
  290|  81.7k|    }
_RNvMs4_NtCsdmAy3pJ2Dco_9siphasher6sip128NtB5_11SipHasher243newCsd92XLxb96zi_8oxigraph:
  280|  81.7k|    pub fn new() -> SipHasher24 {
  281|  81.7k|        SipHasher24::new_with_keys(0, 0)
  282|  81.7k|    }
_RNvXs5_NtCsdmAy3pJ2Dco_9siphasher6sip128NtB5_11SipHasher24NtB5_9Hasher1289finish128Csd92XLxb96zi_8oxigraph:
  328|  81.7k|    fn finish128(&self) -> Hash128 {
  329|  81.7k|        self.hasher.finish128()
  330|  81.7k|    }
_RNvNtCsdmAy3pJ2Dco_9siphasher6sip1289u8to64_leCsd92XLxb96zi_8oxigraph:
  142|  81.7k|unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {
  143|      0|    debug_assert!(len < 8);
  144|  81.7k|    let mut i = 0; // current byte index (from LSB) in the output u64
  145|  81.7k|    let mut out = 0;
  146|  81.7k|    if i + 3 < len {
  147|  77.9k|        out = load_int_le!(buf, start + i, u32) as u64;
  148|  77.9k|        i += 4;
  149|  3.87k|    }
  150|  81.7k|    if i + 1 < len {
  151|  20.3k|        out |= (load_int_le!(buf, start + i, u16) as u64) << (i * 8);
  152|  20.3k|        i += 2
  153|  61.4k|    }
  154|  81.7k|    if i < len {
  155|  16.9k|        out |= (*buf.get_unchecked(start + i) as u64) << (i * 8);
  156|  16.9k|        i += 1;
  157|  64.8k|    }
  158|  81.7k|    debug_assert_eq!(i, len);
  159|  81.7k|    out
  160|  81.7k|}
_RNvMs6_NtCsdmAy3pJ2Dco_9siphasher6sip128INtB5_6HasherNtB5_11Sip24RoundsE13new_with_keysB7_:
  335|  81.7k|    fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {
  336|  81.7k|        let mut state = Hasher {
  337|  81.7k|            k0: key0,
  338|  81.7k|            k1: key1,
  339|  81.7k|            length: 0,
  340|  81.7k|            state: State {
  341|  81.7k|                v0: 0,
  342|  81.7k|                v1: 0xee,
  343|  81.7k|                v2: 0,
  344|  81.7k|                v3: 0,
  345|  81.7k|            },
  346|  81.7k|            tail: 0,
  347|  81.7k|            ntail: 0,
  348|  81.7k|            _marker: PhantomData,
  349|  81.7k|        };
  350|  81.7k|        state.reset();
  351|  81.7k|        state
  352|  81.7k|    }
_RNvXs_NtCsdmAy3pJ2Dco_9siphasher6sip128oINtNtCs9nhK3FOW46N_4core7convert4FromNtB4_7Hash128E4from:
   39|  81.7k|    fn from(h: Hash128) -> u128 {
   40|  81.7k|        (h.h1 as u128) | ((h.h2 as u128) << 64)
   41|  81.7k|    }
_RNvMs6_NtCsdmAy3pJ2Dco_9siphasher6sip128INtB5_6HasherNtB5_11Sip24RoundsE5resetB7_:
  355|  81.7k|    fn reset(&mut self) {
  356|  81.7k|        self.length = 0;
  357|  81.7k|        self.state.v0 = self.k0 ^ 0x736f6d6570736575;
  358|  81.7k|        self.state.v1 = self.k1 ^ 0x646f72616e646f83;
  359|  81.7k|        self.state.v2 = self.k0 ^ 0x6c7967656e657261;
  360|  81.7k|        self.state.v3 = self.k1 ^ 0x7465646279746573;
  361|  81.7k|        self.ntail = 0;
  362|  81.7k|    }

_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsY_1__30RECURSIVE_COUNT_ObjectListPath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__29RECURSIVE_COUNT_GraphNodePath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__29RECURSIVE_COUNT_IriOrFunction7___getitB5_:
   83|      6|            unsafe fn __getit(
   84|      6|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      6|            ) -> $crate::option::Option<&'static $t> {
   86|      6|                #[thread_local]
   87|      6|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      6|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      6|
   90|      6|                unsafe {
   91|      6|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      6|                    })
  101|      6|                }
  102|      6|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths7_1__32RECURSIVE_COUNT_SolutionModifier7___getitB5_:
   83|  1.80k|            unsafe fn __getit(
   84|  1.80k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.80k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.80k|                #[thread_local]
   87|  1.80k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.80k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.80k|
   90|  1.80k|                unsafe {
   91|  1.80k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.80k|                    })
  101|  1.80k|                }
  102|  1.80k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsO_1__30RECURSIVE_COUNT_ExpressionList6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsn_1__22RECURSIVE_COUNT_Modify7___getitB5_:
   83|      8|            unsafe fn __getit(
   84|      8|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      8|            ) -> $crate::option::Option<&'static $t> {
   86|      8|                #[thread_local]
   87|      8|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      8|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      8|
   90|      8|                unsafe {
   91|      8|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      8|                    })
  101|      8|                }
  102|      8|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsq_1__27RECURSIVE_COUNT_GraphRefAll7___getitB5_:
   83|     76|            unsafe fn __getit(
   84|     76|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     76|            ) -> $crate::option::Option<&'static $t> {
   86|     76|                #[thread_local]
   87|     76|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     76|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     76|
   90|     76|                unsafe {
   91|     76|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     76|                    })
  101|     76|                }
  102|     76|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsf_1__20RECURSIVE_COUNT_Drop6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsR_1__20RECURSIVE_COUNT_Verb7___getitB5_:
   83|    168|            unsafe fn __getit(
   84|    168|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    168|            ) -> $crate::option::Option<&'static $t> {
   86|    168|                #[thread_local]
   87|    168|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    168|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    168|
   90|    168|                unsafe {
   91|    168|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    168|                    })
  101|    168|                }
  102|    168|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths14_1__27RECURSIVE_COUNT_PathPrimary6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsX_1__39RECURSIVE_COUNT_PropertyListPathElement6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths6_1__27RECURSIVE_COUNT_WhereClause7___getitB5_:
   83|    368|            unsafe fn __getit(
   84|    368|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    368|            ) -> $crate::option::Option<&'static $t> {
   86|    368|                #[thread_local]
   87|    368|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    368|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    368|
   90|    368|                unsafe {
   91|    368|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    368|                    })
  101|    368|                }
  102|    368|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithst_1__24RECURSIVE_COUNT_QuadData7___getitB5_:
   83|      6|            unsafe fn __getit(
   84|      6|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      6|            ) -> $crate::option::Option<&'static $t> {
   86|      6|                #[thread_local]
   87|      6|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      6|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      6|
   90|      6|                unsafe {
   91|      6|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      6|                    })
  101|      6|                }
  102|      6|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsz_1__38RECURSIVE_COUNT_GraphPatternNotTriples7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__40RECURSIVE_COUNT_GroupOrUnionGraphPattern6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__34RECURSIVE_COUNT_AdditiveExpression7___getitB5_:
   83|  1.55k|            unsafe fn __getit(
   84|  1.55k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.55k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.55k|                #[thread_local]
   87|  1.55k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.55k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.55k|
   90|  1.55k|                unsafe {
   91|  1.55k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.55k|                    })
  101|  1.55k|                }
  102|  1.55k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithse_1__21RECURSIVE_COUNT_Clear6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsW_1__44RECURSIVE_COUNT_PropertyListPathNotEmptyVerb6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsp_1__24RECURSIVE_COUNT_GraphRef7___getitB5_:
   83|    104|            unsafe fn __getit(
   84|    104|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    104|            ) -> $crate::option::Option<&'static $t> {
   86|    104|                #[thread_local]
   87|    104|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    104|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    104|
   90|    104|                unsafe {
   91|    104|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    104|                    })
  101|    104|                }
  102|    104|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths5_1__32RECURSIVE_COUNT_SelectProjection7___getitB5_:
   83|      2|            unsafe fn __getit(
   84|      2|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      2|            ) -> $crate::option::Option<&'static $t> {
   86|      2|                #[thread_local]
   87|      2|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      2|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      2|
   90|      2|                unsafe {
   91|      2|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      2|                    })
  101|      2|                }
  102|      2|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithss_1__33RECURSIVE_COUNT_VarOrIriOrLiteral6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__29RECURSIVE_COUNT_IriOrFunction6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths10_1__28RECURSIVE_COUNT_PathSequence7___getitB5_:
   83|    170|            unsafe fn __getit(
   84|    170|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    170|            ) -> $crate::option::Option<&'static $t> {
   86|    170|                #[thread_local]
   87|    170|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    170|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    170|
   90|    170|                unsafe {
   91|    170|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    170|                    })
  101|    170|                }
  102|    170|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsd_1__29RECURSIVE_COUNT_UpdateVariant6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsk_1__26RECURSIVE_COUNT_InsertData7___getitB5_:
   83|      6|            unsafe fn __getit(
   84|      6|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      6|            ) -> $crate::option::Option<&'static $t> {
   86|      6|                #[thread_local]
   87|      6|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      6|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      6|
   90|      6|                unsafe {
   91|      6|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      6|                    })
  101|      6|                }
  102|      6|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsr_1__27RECURSIVE_COUNT_QuadPattern6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__36RECURSIVE_COUNT_BrackettedExpression7___getitB5_:
   83|  1.54k|            unsafe fn __getit(
   84|  1.54k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.54k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.54k|                #[thread_local]
   87|  1.54k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.54k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.54k|
   90|  1.54k|                unsafe {
   91|  1.54k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.54k|                    })
  101|  1.54k|                }
  102|  1.54k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__31RECURSIVE_COUNT_PathAlternative7___getitB5_:
   83|    168|            unsafe fn __getit(
   84|    168|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    168|            ) -> $crate::option::Option<&'static $t> {
   86|    168|                #[thread_local]
   87|    168|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    168|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    168|
   90|    168|                unsafe {
   91|    168|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    168|                    })
  101|    168|                }
  102|    168|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsv_1__33RECURSIVE_COUNT_GroupGraphPattern7___getitB5_:
   83|    818|            unsafe fn __getit(
   84|    818|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    818|            ) -> $crate::option::Option<&'static $t> {
   86|    818|                #[thread_local]
   87|    818|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    818|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    818|
   90|    818|                unsafe {
   91|    818|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    818|                    })
  101|    818|                }
  102|    818|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__30RECURSIVE_COUNT_CollectionPath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__33RECURSIVE_COUNT_PrimaryExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsY_1__30RECURSIVE_COUNT_ObjectListPath7___getitB5_:
   83|  1.61k|            unsafe fn __getit(
   84|  1.61k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.61k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.61k|                #[thread_local]
   87|  1.61k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.61k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.61k|
   90|  1.61k|                unsafe {
   91|  1.61k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.61k|                    })
  101|  1.61k|                }
  102|  1.61k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsO_1__30RECURSIVE_COUNT_ExpressionList7___getitB5_:
   83|    102|            unsafe fn __getit(
   84|    102|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    102|            ) -> $crate::option::Option<&'static $t> {
   86|    102|                #[thread_local]
   87|    102|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    102|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    102|
   90|    102|                unsafe {
   91|    102|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    102|                    })
  101|    102|                }
  102|    102|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__31RECURSIVE_COUNT_UnaryExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__40RECURSIVE_COUNT_MultiplicativeExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths14_1__27RECURSIVE_COUNT_PathPrimary7___getitB5_:
   83|    550|            unsafe fn __getit(
   84|    550|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    550|            ) -> $crate::option::Option<&'static $t> {
   86|    550|                #[thread_local]
   87|    550|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    550|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    550|
   90|    550|                unsafe {
   91|    550|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    550|                    })
  101|    550|                }
  102|    550|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsf_1__20RECURSIVE_COUNT_Drop7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsk_1__26RECURSIVE_COUNT_InsertData6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsG_1__32RECURSIVE_COUNT_InlineDataOneVar7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsX_1__39RECURSIVE_COUNT_PropertyListPathElement7___getitB5_:
   83|      6|            unsafe fn __getit(
   84|      6|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      6|            ) -> $crate::option::Option<&'static $t> {
   86|      6|                #[thread_local]
   87|      6|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      6|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      6|
   90|      6|                unsafe {
   91|      6|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      6|                    })
  101|      6|                }
  102|      6|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsT_1__38RECURSIVE_COUNT_TriplesSameSubjectPath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__36RECURSIVE_COUNT_BrackettedExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__27RECURSIVE_COUNT_BuiltInCall6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__40RECURSIVE_COUNT_GroupOrUnionGraphPattern7___getitB5_:
   83|     10|            unsafe fn __getit(
   84|     10|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     10|            ) -> $crate::option::Option<&'static $t> {
   86|     10|                #[thread_local]
   87|     10|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     10|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     10|
   90|     10|                unsafe {
   91|     10|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     10|                    })
  101|     10|                }
  102|     10|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__41RECURSIVE_COUNT_BlankNodePropertyListPath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths2_1__28RECURSIVE_COUNT_SelectClause6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths3_1__28RECURSIVE_COUNT_SelectOption7___getitB5_:
   83|      2|            unsafe fn __getit(
   84|      2|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      2|            ) -> $crate::option::Option<&'static $t> {
   86|      2|                #[thread_local]
   87|      2|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      2|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      2|
   90|      2|                unsafe {
   91|      2|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      2|                    })
  101|      2|                }
  102|      2|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithse_1__21RECURSIVE_COUNT_Clear7___getitB5_:
   83|     58|            unsafe fn __getit(
   84|     58|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     58|            ) -> $crate::option::Option<&'static $t> {
   86|     58|                #[thread_local]
   87|     58|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     58|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     58|
   90|     58|                unsafe {
   91|     58|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     58|                    })
  101|     58|                }
  102|     58|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths16_1__36RECURSIVE_COUNT_PathOneInPropertySet7___getitB5_:
   83|     66|            unsafe fn __getit(
   84|     66|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     66|            ) -> $crate::option::Option<&'static $t> {
   86|     66|                #[thread_local]
   87|     66|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     66|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     66|
   90|     66|                unsafe {
   91|     66|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     66|                    })
  101|     66|                }
  102|     66|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithss_1__33RECURSIVE_COUNT_VarOrIriOrLiteral7___getitB5_:
   83|    350|            unsafe fn __getit(
   84|    350|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    350|            ) -> $crate::option::Option<&'static $t> {
   86|    350|                #[thread_local]
   87|    350|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    350|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    350|
   90|    350|                unsafe {
   91|    350|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    350|                    })
  101|    350|                }
  102|    350|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__24RECURSIVE_COUNT_VarOrIri7___getitB5_:
   83|    312|            unsafe fn __getit(
   84|    312|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    312|            ) -> $crate::option::Option<&'static $t> {
   86|    312|                #[thread_local]
   87|    312|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    312|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    312|
   90|    312|                unsafe {
   91|    312|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    312|                    })
  101|    312|                }
  102|    312|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsm_1__27RECURSIVE_COUNT_DeleteWhere6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsi_1__20RECURSIVE_COUNT_Move6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1_1__25RECURSIVE_COUNT_SubSelect6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsU_1__32RECURSIVE_COUNT_PropertyListPath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__40RECURSIVE_COUNT_ConditionalAndExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsG_1__32RECURSIVE_COUNT_InlineDataOneVar6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsr_1__27RECURSIVE_COUNT_QuadPattern7___getitB5_:
   83|    266|            unsafe fn __getit(
   84|    266|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    266|            ) -> $crate::option::Option<&'static $t> {
   86|    266|                #[thread_local]
   87|    266|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    266|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    266|
   90|    266|                unsafe {
   91|    266|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    266|                    })
  101|    266|                }
  102|    266|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths16_1__36RECURSIVE_COUNT_PathOneInPropertySet6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__30RECURSIVE_COUNT_CollectionPath7___getitB5_:
   83|    100|            unsafe fn __getit(
   84|    100|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    100|            ) -> $crate::option::Option<&'static $t> {
   86|    100|                #[thread_local]
   87|    100|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    100|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    100|
   90|    100|                unsafe {
   91|    100|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    100|                    })
  101|    100|                }
  102|    100|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsb_1__28RECURSIVE_COUNT_ValuesClause7___getitB5_:
   83|  1.82k|            unsafe fn __getit(
   84|  1.82k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.82k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.82k|                #[thread_local]
   87|  1.82k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.82k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.82k|
   90|  1.82k|                unsafe {
   91|  1.82k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.82k|                    })
  101|  1.82k|                }
  102|  1.82k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__25RECURSIVE_COUNT_VarOrTerm7___getitB5_:
   83|  1.97k|            unsafe fn __getit(
   84|  1.97k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.97k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.97k|                #[thread_local]
   87|  1.97k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.97k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.97k|
   90|  1.97k|                unsafe {
   91|  1.97k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.97k|                    })
  101|  1.97k|                }
  102|  1.97k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__25RECURSIVE_COUNT_GraphTerm6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__31RECURSIVE_COUNT_UnaryExpression7___getitB5_:
   83|  1.58k|            unsafe fn __getit(
   84|  1.58k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.58k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.58k|                #[thread_local]
   87|  1.58k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.58k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.58k|
   90|  1.58k|                unsafe {
   91|  1.58k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.58k|                    })
  101|  1.58k|                }
  102|  1.58k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithst_1__24RECURSIVE_COUNT_QuadData6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__40RECURSIVE_COUNT_MultiplicativeExpression7___getitB5_:
   83|  1.54k|            unsafe fn __getit(
   84|  1.54k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.54k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.54k|                #[thread_local]
   87|  1.54k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.54k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.54k|
   90|  1.54k|                unsafe {
   91|  1.54k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.54k|                    })
  101|  1.54k|                }
  102|  1.54k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithso_1__30RECURSIVE_COUNT_GraphOrDefault6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsz_1__38RECURSIVE_COUNT_GraphPatternNotTriples6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsa_1__28RECURSIVE_COUNT_HavingClause6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths15_1__38RECURSIVE_COUNT_PathNegatedPropertySet7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsT_1__38RECURSIVE_COUNT_TriplesSameSubjectPath7___getitB5_:
   83|      8|            unsafe fn __getit(
   84|      8|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      8|            ) -> $crate::option::Option<&'static $t> {
   86|      8|                #[thread_local]
   87|      8|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      8|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      8|
   90|      8|                unsafe {
   91|      8|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      8|                    })
  101|      8|                }
  102|      8|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__27RECURSIVE_COUNT_BuiltInCall7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsV_1__40RECURSIVE_COUNT_PropertyListPathNotEmpty6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths2_1__28RECURSIVE_COUNT_SelectClause7___getitB5_:
   83|     16|            unsafe fn __getit(
   84|     16|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     16|            ) -> $crate::option::Option<&'static $t> {
   86|     16|                #[thread_local]
   87|     16|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     16|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     16|
   90|     16|                unsafe {
   91|     16|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     16|                    })
  101|     16|                }
  102|     16|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths10_1__28RECURSIVE_COUNT_PathSequence6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsw_1__36RECURSIVE_COUNT_GroupGraphPatternSub6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__29RECURSIVE_COUNT_GraphNodePath7___getitB5_:
   83|  1.73k|            unsafe fn __getit(
   84|  1.73k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.73k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.73k|                #[thread_local]
   87|  1.73k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.73k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.73k|
   90|  1.73k|                unsafe {
   91|  1.73k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.73k|                    })
  101|  1.73k|                }
  102|  1.73k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsi_1__20RECURSIVE_COUNT_Move7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsm_1__27RECURSIVE_COUNT_DeleteWhere7___getitB5_:
   83|      2|            unsafe fn __getit(
   84|      2|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      2|            ) -> $crate::option::Option<&'static $t> {
   86|      2|                #[thread_local]
   87|      2|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      2|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      2|
   90|      2|                unsafe {
   91|      2|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      2|                    })
  101|      2|                }
  102|      2|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsv_1__33RECURSIVE_COUNT_GroupGraphPattern6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsU_1__32RECURSIVE_COUNT_PropertyListPath7___getitB5_:
   83|    820|            unsafe fn __getit(
   84|    820|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    820|            ) -> $crate::option::Option<&'static $t> {
   86|    820|                #[thread_local]
   87|    820|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    820|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    820|
   90|    820|                unsafe {
   91|    820|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    820|                    })
  101|    820|                }
  102|    820|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__40RECURSIVE_COUNT_ConditionalAndExpression7___getitB5_:
   83|  1.41k|            unsafe fn __getit(
   84|  1.41k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.41k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.41k|                #[thread_local]
   87|  1.41k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.41k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.41k|
   90|  1.41k|                unsafe {
   91|  1.41k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.41k|                    })
  101|  1.41k|                }
  102|  1.41k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths13_1__23RECURSIVE_COUNT_PathMod6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsH_1__30RECURSIVE_COUNT_DataBlockValue7___getitB5_:
   83|  3.46k|            unsafe fn __getit(
   84|  3.46k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  3.46k|            ) -> $crate::option::Option<&'static $t> {
   86|  3.46k|                #[thread_local]
   87|  3.46k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  3.46k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  3.46k|
   90|  3.46k|                unsafe {
   91|  3.46k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  3.46k|                    })
  101|  3.46k|                }
  102|  3.46k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__39RECURSIVE_COUNT_ConditionalOrExpression7___getitB5_:
   83|  1.41k|            unsafe fn __getit(
   84|  1.41k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.41k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.41k|                #[thread_local]
   87|  1.41k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.41k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.41k|
   90|  1.41k|                unsafe {
   91|  1.41k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.41k|                    })
  101|  1.41k|                }
  102|  1.41k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsW_1__44RECURSIVE_COUNT_PropertyListPathNotEmptyVerb7___getitB5_:
   83|     66|            unsafe fn __getit(
   84|     66|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     66|            ) -> $crate::option::Option<&'static $t> {
   86|     66|                #[thread_local]
   87|     66|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     66|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     66|
   90|     66|                unsafe {
   91|     66|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     66|                    })
  101|     66|                }
  102|     66|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__36RECURSIVE_COUNT_RelationalExpression7___getitB5_:
   83|  1.41k|            unsafe fn __getit(
   84|  1.41k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.41k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.41k|                #[thread_local]
   87|  1.41k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.41k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.41k|
   90|  1.41k|                unsafe {
   91|  1.41k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.41k|                    })
  101|  1.41k|                }
  102|  1.41k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsL_1__26RECURSIVE_COUNT_Constraint6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsy_1__28RECURSIVE_COUNT_TriplesBlock6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__25RECURSIVE_COUNT_GraphTerm7___getitB5_:
   83|      6|            unsafe fn __getit(
   84|      6|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      6|            ) -> $crate::option::Option<&'static $t> {
   86|      6|                #[thread_local]
   87|      6|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      6|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      6|
   90|      6|                unsafe {
   91|      6|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      6|                    })
  101|      6|                }
  102|      6|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsd_1__29RECURSIVE_COUNT_UpdateVariant7___getitB5_:
   83|     14|            unsafe fn __getit(
   84|     14|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     14|            ) -> $crate::option::Option<&'static $t> {
   86|     14|                #[thread_local]
   87|     14|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     14|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     14|
   90|     14|                unsafe {
   91|     14|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     14|                    })
  101|     14|                }
  102|     14|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsu_1__28RECURSIVE_COUNT_IriOrLiteral6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithso_1__30RECURSIVE_COUNT_GraphOrDefault7___getitB5_:
   83|     28|            unsafe fn __getit(
   84|     28|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     28|            ) -> $crate::option::Option<&'static $t> {
   86|     28|                #[thread_local]
   87|     28|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     28|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     28|
   90|     28|                unsafe {
   91|     28|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     28|                    })
  101|     28|                }
  102|     28|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsa_1__28RECURSIVE_COUNT_HavingClause7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths3_1__28RECURSIVE_COUNT_SelectOption6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsx_1__46RECURSIVE_COUNT_GroupGraphPatternSubOtherBlock6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths4_1__28RECURSIVE_COUNT_SelectValues6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths11_1__23RECURSIVE_COUNT_PathElt7___getitB5_:
   83|    550|            unsafe fn __getit(
   84|    550|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    550|            ) -> $crate::option::Option<&'static $t> {
   86|    550|                #[thread_local]
   87|    550|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    550|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    550|
   90|    550|                unsafe {
   91|    550|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    550|                    })
  101|    550|                }
  102|    550|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths12_1__32RECURSIVE_COUNT_PathEltOrInverse6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsH_1__30RECURSIVE_COUNT_DataBlockValue6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths7_1__32RECURSIVE_COUNT_SolutionModifier6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__24RECURSIVE_COUNT_VarOrIri6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__39RECURSIVE_COUNT_ConditionalOrExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsn_1__22RECURSIVE_COUNT_Modify6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsw_1__36RECURSIVE_COUNT_GroupGraphPatternSub7___getitB5_:
   83|    868|            unsafe fn __getit(
   84|    868|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    868|            ) -> $crate::option::Option<&'static $t> {
   86|    868|                #[thread_local]
   87|    868|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    868|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    868|
   90|    868|                unsafe {
   91|    868|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    868|                    })
  101|    868|                }
  102|    868|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsV_1__40RECURSIVE_COUNT_PropertyListPathNotEmpty7___getitB5_:
   83|     60|            unsafe fn __getit(
   84|     60|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     60|            ) -> $crate::option::Option<&'static $t> {
   86|     60|                #[thread_local]
   87|     60|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     60|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     60|
   90|     60|                unsafe {
   91|     60|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     60|                    })
  101|     60|                }
  102|     60|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__36RECURSIVE_COUNT_RelationalExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsq_1__27RECURSIVE_COUNT_GraphRefAll6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsR_1__20RECURSIVE_COUNT_Verb6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__33RECURSIVE_COUNT_PrimaryExpression7___getitB5_:
   83|  1.54k|            unsafe fn __getit(
   84|  1.54k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  1.54k|            ) -> $crate::option::Option<&'static $t> {
   86|  1.54k|                #[thread_local]
   87|  1.54k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  1.54k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  1.54k|
   90|  1.54k|                unsafe {
   91|  1.54k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  1.54k|                    })
  101|  1.54k|                }
  102|  1.54k|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths6_1__27RECURSIVE_COUNT_WhereClause6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths19_1__31RECURSIVE_COUNT_TriplesNodePath7___getitB5_:
   83|     10|            unsafe fn __getit(
   84|     10|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     10|            ) -> $crate::option::Option<&'static $t> {
   86|     10|                #[thread_local]
   87|     10|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     10|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     10|
   90|     10|                unsafe {
   91|     10|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     10|                    })
  101|     10|                }
  102|     10|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__34RECURSIVE_COUNT_AdditiveExpression6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsp_1__24RECURSIVE_COUNT_GraphRef6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths11_1__23RECURSIVE_COUNT_PathElt6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths5_1__32RECURSIVE_COUNT_SelectProjection6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths13_1__23RECURSIVE_COUNT_PathMod7___getitB5_:
   83|     40|            unsafe fn __getit(
   84|     40|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     40|            ) -> $crate::option::Option<&'static $t> {
   86|     40|                #[thread_local]
   87|     40|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     40|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     40|
   90|     40|                unsafe {
   91|     40|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     40|                    })
  101|     40|                }
  102|     40|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsb_1__28RECURSIVE_COUNT_ValuesClause6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__25RECURSIVE_COUNT_VarOrTerm6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__41RECURSIVE_COUNT_BlankNodePropertyListPath7___getitB5_:
   83|     16|            unsafe fn __getit(
   84|     16|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     16|            ) -> $crate::option::Option<&'static $t> {
   86|     16|                #[thread_local]
   87|     16|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     16|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     16|
   90|     16|                unsafe {
   91|     16|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     16|                    })
  101|     16|                }
  102|     16|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsL_1__26RECURSIVE_COUNT_Constraint7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths15_1__38RECURSIVE_COUNT_PathNegatedPropertySet6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsy_1__28RECURSIVE_COUNT_TriplesBlock7___getitB5_:
   83|      8|            unsafe fn __getit(
   84|      8|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      8|            ) -> $crate::option::Option<&'static $t> {
   86|      8|                #[thread_local]
   87|      8|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      8|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      8|
   90|      8|                unsafe {
   91|      8|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      8|                    })
  101|      8|                }
  102|      8|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths19_1__31RECURSIVE_COUNT_TriplesNodePath6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsu_1__28RECURSIVE_COUNT_IriOrLiteral7___getitB5_:
   83|     58|            unsafe fn __getit(
   84|     58|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     58|            ) -> $crate::option::Option<&'static $t> {
   86|     58|                #[thread_local]
   87|     58|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     58|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     58|
   90|     58|                unsafe {
   91|     58|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     58|                    })
  101|     58|                }
  102|     58|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1_1__25RECURSIVE_COUNT_SubSelect7___getitB5_:
   83|     16|            unsafe fn __getit(
   84|     16|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     16|            ) -> $crate::option::Option<&'static $t> {
   86|     16|                #[thread_local]
   87|     16|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     16|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     16|
   90|     16|                unsafe {
   91|     16|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     16|                    })
  101|     16|                }
  102|     16|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__31RECURSIVE_COUNT_PathAlternative6___initB5_:
   80|      1|            fn __init() -> $t { $init }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smithsx_1__46RECURSIVE_COUNT_GroupGraphPatternSubOtherBlock7___getitB5_:
   83|      4|            unsafe fn __getit(
   84|      4|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|      4|            ) -> $crate::option::Option<&'static $t> {
   86|      4|                #[thread_local]
   87|      4|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|      4|                    $crate::thread::local_impl::Key::<$t>::new();
   89|      4|
   90|      4|                unsafe {
   91|      4|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|      4|                    })
  101|      4|                }
  102|      4|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths4_1__28RECURSIVE_COUNT_SelectValues7___getitB5_:
   83|     34|            unsafe fn __getit(
   84|     34|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|     34|            ) -> $crate::option::Option<&'static $t> {
   86|     34|                #[thread_local]
   87|     34|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|     34|                    $crate::thread::local_impl::Key::<$t>::new();
   89|     34|
   90|     34|                unsafe {
   91|     34|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|     34|                    })
  101|     34|                }
  102|     34|            }
_RNvNvNvCs6Lc7YXa2Vl_12sparql_smiths12_1__32RECURSIVE_COUNT_PathEltOrInverse7___getitB5_:
   83|    220|            unsafe fn __getit(
   84|    220|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|    220|            ) -> $crate::option::Option<&'static $t> {
   86|    220|                #[thread_local]
   87|    220|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|    220|                    $crate::thread::local_impl::Key::<$t>::new();
   89|    220|
   90|    220|                unsafe {
   91|    220|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|    220|                    })
  101|    220|                }
  102|    220|            }
_RNvNvNtNtCs6voGXdKRTOy_4rand4rngs6thread14THREAD_RNG_KEY7___getitB7_:
   83|  61.1k|            unsafe fn __getit(
   84|  61.1k|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
   85|  61.1k|            ) -> $crate::option::Option<&'static $t> {
   86|  61.1k|                #[thread_local]
   87|  61.1k|                static __KEY: $crate::thread::local_impl::Key<$t> =
   88|  61.1k|                    $crate::thread::local_impl::Key::<$t>::new();
   89|  61.1k|
   90|  61.1k|                unsafe {
   91|  61.1k|                    __KEY.get(move || {
   92|       |                        if let $crate::option::Option::Some(init) = init {
   93|       |                            if let $crate::option::Option::Some(value) = init.take() {
   94|       |                                return value;
   95|       |                            } else if $crate::cfg!(debug_assertions) {
   96|       |                                $crate::unreachable!("missing default value");
   97|       |                            }
   98|       |                        }
   99|       |                        __init()
  100|  61.1k|                    })
  101|  61.1k|                }
  102|  61.1k|            }
_RNvNvNtNtCs6voGXdKRTOy_4rand4rngs6thread14THREAD_RNG_KEY6___initB7_:
   80|      1|            fn __init() -> $t { $init }

_RNCNvNvCsh41WZG82U3t_18sparql_update_eval1__19___libfuzzer_sys_run0B5_:
   11|      1|    let store = STORE.get_or_init(|| Store::new().unwrap());

_RNvXsn_NtNtCsd92XLxb96zi_8oxigraph6sparql7algebraNtB5_6UpdateNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  121|  2.12k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsu_NtNtCsd92XLxb96zi_8oxigraph6sparql7algebraNtB5_12QueryDatasetNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  197|  2.18k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs4_NtNtCsd92XLxb96zi_8oxigraph6sparql7algebraNtB5_6Update5parse:
  129|  2.28k|    pub fn parse(
  130|  2.28k|        update: &str,
  131|  2.28k|        base_iri: Option<&str>,
  132|  2.28k|    ) -> Result<Self, spargebra::SparqlSyntaxError> {
  133|  2.28k|        Ok(spargebra::Update::parse(update, base_iri)?.into())
  134|  2.28k|    }
_RNvMsa_NtNtCsd92XLxb96zi_8oxigraph6sparql7algebraNtB5_12QueryDataset3new:
  204|  4.17k|    pub(crate) fn new() -> Self {
  205|  4.17k|        Self {
  206|  4.17k|            default: None,
  207|  4.17k|            named: None,
  208|  4.17k|        }
  209|  4.17k|    }
_RNvMsa_NtNtCsd92XLxb96zi_8oxigraph6sparql7algebraNtB5_12QueryDataset22available_named_graphs:
  286|  4.17k|    pub fn available_named_graphs(&self) -> Option<&[NamedOrBlankNode]> {
  287|  4.17k|        self.named.as_deref()
  288|  4.17k|    }
_RNvMsa_NtNtCsd92XLxb96zi_8oxigraph6sparql7algebraNtB5_12QueryDataset12from_algebra:
  211|  2.18k|    fn from_algebra(inner: &Option<spargebra::algebra::QueryDataset>) -> Self {
  212|  2.18k|        if let Some(inner) = inner {
  213|  1.48k|            Self {
  214|  1.48k|                default: Some(inner.default.iter().map(|g| g.clone().into()).collect()),
  215|  1.48k|                named: inner
  216|  1.48k|                    .named
  217|  1.48k|                    .as_ref()
  218|  1.48k|                    .map(|named| named.iter().map(|g| g.clone().into()).collect()),
  219|  1.48k|            }
  220|       |        } else {
  221|    694|            Self {
  222|    694|                default: Some(vec![GraphName::DefaultGraph]),
  223|    694|                named: None,
  224|    694|            }
  225|       |        }
  226|  2.18k|    }
_RNvXs9_NtNtCsd92XLxb96zi_8oxigraph6sparql7algebraNtB5_6UpdateINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCskGc5T8eVihK_9spargebra6update6UpdateE4from:
  178|  2.12k|    fn from(update: spargebra::Update) -> Self {
  179|  2.12k|        Self {
  180|  2.12k|            using_datasets: update
  181|  2.12k|                .operations
  182|  2.12k|                .iter()
  183|  2.12k|                .map(|operation| {
  184|       |                    if let GraphUpdateOperation::DeleteInsert { using, .. } = operation {
  185|       |                        Some(QueryDataset::from_algebra(using))
  186|       |                    } else {
  187|       |                        None
  188|       |                    }
  189|  2.12k|                })
  190|  2.12k|                .collect(),
  191|  2.12k|            inner: update,
  192|  2.12k|        }
  193|  2.12k|    }
_RNvMsa_NtNtCsd92XLxb96zi_8oxigraph6sparql7algebraNtB5_12QueryDataset20default_graph_graphs:
  255|  4.17k|    pub fn default_graph_graphs(&self) -> Option<&[GraphName]> {
  256|  4.17k|        self.default.as_deref()
  257|  4.17k|    }
_RNCNvMsa_NtNtCsd92XLxb96zi_8oxigraph6sparql7algebraNtB7_12QueryDataset12from_algebra0Bb_:
  214|  1.48k|                default: Some(inner.default.iter().map(|g| g.clone().into()).collect()),
_RNCNvXs9_NtNtCsd92XLxb96zi_8oxigraph6sparql7algebraNtB7_6UpdateINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCskGc5T8eVihK_9spargebra6update6UpdateE4from0Bb_:
  183|  4.20k|                .map(|operation| {
  184|  4.20k|                    if let GraphUpdateOperation::DeleteInsert { using, .. } = operation {
  185|  2.18k|                        Some(QueryDataset::from_algebra(using))
  186|       |                    } else {
  187|  2.02k|                        None
  188|       |                    }
  189|  4.20k|                })

_RNCNvMNtNtCsd92XLxb96zi_8oxigraph6sparql7datasetNtB4_11DatasetView31store_encoded_quads_for_pattern0B8_:
   43|     19|            .map(|t| t.map_err(Into::into))
_RINvMNtNtCsd92XLxb96zi_8oxigraph6sparql7datasetNtB3_11DatasetView11encode_termRNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeEB7_:
  151|  59.0k|    pub fn encode_term<'a>(&self, term: impl Into<TermRef<'a>>) -> EncodedTerm {
  152|  59.0k|        let term = term.into();
  153|  59.0k|        let encoded = term.into();
  154|  59.0k|        insert_term(term, &encoded, &mut |key, value| {
  155|       |            self.insert_str(key, value);
  156|       |            Ok(())
  157|  59.0k|        })
  158|  59.0k|        .unwrap();
  159|  59.0k|        encoded
  160|  59.0k|    }
_RNCNvMNtNtCsd92XLxb96zi_8oxigraph6sparql7datasetNtB4_11DatasetView3new0B8_:
   22|  4.17k|                .map(|graphs| graphs.iter().map(|g| g.as_ref().into()).collect::<Vec<_>>()),
_RNCNvMNtNtCsd92XLxb96zi_8oxigraph6sparql7datasetNtB4_11DatasetView25encoded_quads_for_pattern0B8_:
   66|     19|                            .map(|quad| {
   67|     19|                                let quad = quad?;
   68|     19|                                Ok(EncodedQuad::new(
   69|     19|                                    quad.subject,
   70|     19|                                    quad.predicate,
   71|     19|                                    quad.object,
   72|     19|                                    EncodedTerm::DefaultGraph,
   73|     19|                                ))
   74|     19|                            }),
_RNCINvMNtNtCsd92XLxb96zi_8oxigraph6sparql7datasetNtB5_11DatasetView11encode_termRNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeE0B9_:
  154|  59.0k|        insert_term(term, &encoded, &mut |key, value| {
  155|  59.0k|            self.insert_str(key, value);
  156|  59.0k|            Ok(())
  157|  59.0k|        })
_RNCNCNvMNtNtCsd92XLxb96zi_8oxigraph6sparql7datasetNtB6_11DatasetView3new00Ba_:
   22|  4.17k|                .map(|graphs| graphs.iter().map(|g| g.as_ref().into()).collect::<Vec<_>>()),
_RINvMNtNtCsd92XLxb96zi_8oxigraph6sparql7datasetNtB3_11DatasetView11encode_termRNtNtCshJ9d6mhVUZV_5oxrdf7literal7LiteralEB7_:
  151|  4.43k|    pub fn encode_term<'a>(&self, term: impl Into<TermRef<'a>>) -> EncodedTerm {
  152|  4.43k|        let term = term.into();
  153|  4.43k|        let encoded = term.into();
  154|  4.43k|        insert_term(term, &encoded, &mut |key, value| {
  155|       |            self.insert_str(key, value);
  156|       |            Ok(())
  157|  4.43k|        })
  158|  4.43k|        .unwrap();
  159|  4.43k|        encoded
  160|  4.43k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql7datasetNtB2_11DatasetView31store_encoded_quads_for_pattern:
   34|  25.2k|    fn store_encoded_quads_for_pattern(
   35|  25.2k|        &self,
   36|  25.2k|        subject: Option<&EncodedTerm>,
   37|  25.2k|        predicate: Option<&EncodedTerm>,
   38|  25.2k|        object: Option<&EncodedTerm>,
   39|  25.2k|        graph_name: Option<&EncodedTerm>,
   40|  25.2k|    ) -> impl Iterator<Item = Result<EncodedQuad, EvaluationError>> + 'static {
   41|  25.2k|        self.reader
   42|  25.2k|            .quads_for_pattern(subject, predicate, object, graph_name)
   43|  25.2k|            .map(|t| t.map_err(Into::into))
   44|  25.2k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql7datasetNtB2_11DatasetView3new:
   18|  4.17k|    pub fn new(reader: StorageReader, dataset: &QueryDataset) -> Self {
   19|  4.17k|        let dataset = EncodedDatasetSpec {
   20|  4.17k|            default: dataset
   21|  4.17k|                .default_graph_graphs()
   22|  4.17k|                .map(|graphs| graphs.iter().map(|g| g.as_ref().into()).collect::<Vec<_>>()),
   23|  4.17k|            named: dataset
   24|  4.17k|                .available_named_graphs()
   25|  4.17k|                .map(|graphs| graphs.iter().map(|g| g.as_ref().into()).collect::<Vec<_>>()),
   26|  4.17k|        };
   27|  4.17k|        Self {
   28|  4.17k|            reader,
   29|  4.17k|            extra: RefCell::new(HashMap::default()),
   30|  4.17k|            dataset,
   31|  4.17k|        }
   32|  4.17k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql7datasetNtB2_11DatasetView25encoded_quads_for_pattern:
   47|  25.2k|    pub fn encoded_quads_for_pattern(
   48|  25.2k|        &self,
   49|  25.2k|        subject: Option<&EncodedTerm>,
   50|  25.2k|        predicate: Option<&EncodedTerm>,
   51|  25.2k|        object: Option<&EncodedTerm>,
   52|  25.2k|        graph_name: Option<&EncodedTerm>,
   53|  25.2k|    ) -> Box<dyn Iterator<Item = Result<EncodedQuad, EvaluationError>>> {
   54|  25.2k|        if let Some(graph_name) = graph_name {
   55|  23.9k|            if graph_name.is_default_graph() {
   56|  21.9k|                if let Some(default_graph_graphs) = &self.dataset.default {
   57|  21.9k|                    if default_graph_graphs.len() == 1 {
   58|       |                        // Single graph optimization
   59|  21.9k|                        Box::new(
   60|  21.9k|                            self.store_encoded_quads_for_pattern(
   61|  21.9k|                                subject,
   62|  21.9k|                                predicate,
   63|  21.9k|                                object,
   64|  21.9k|                                Some(&default_graph_graphs[0]),
   65|  21.9k|                            )
   66|  21.9k|                            .map(|quad| {
   67|       |                                let quad = quad?;
   68|       |                                Ok(EncodedQuad::new(
   69|       |                                    quad.subject,
   70|       |                                    quad.predicate,
   71|       |                                    quad.object,
   72|       |                                    EncodedTerm::DefaultGraph,
   73|       |                                ))
   74|  21.9k|                            }),
   75|  21.9k|                        )
   76|       |                    } else {
   77|      0|                        let iters = default_graph_graphs
   78|      0|                            .iter()
   79|      0|                            .map(|graph_name| {
   80|       |                                self.store_encoded_quads_for_pattern(
   81|       |                                    subject,
   82|       |                                    predicate,
   83|       |                                    object,
   84|       |                                    Some(graph_name),
   85|       |                                )
   86|      0|                            })
   87|      0|                            .collect::<Vec<_>>();
   88|      0|                        Box::new(iters.into_iter().flatten().map(|quad| {
   89|       |                            let quad = quad?;
   90|       |                            Ok(EncodedQuad::new(
   91|       |                                quad.subject,
   92|       |                                quad.predicate,
   93|       |                                quad.object,
   94|       |                                EncodedTerm::DefaultGraph,
   95|       |                            ))
   96|      0|                        }))
   97|       |                    }
   98|       |                } else {
   99|      0|                    Box::new(
  100|      0|                        self.store_encoded_quads_for_pattern(subject, predicate, object, None)
  101|      0|                            .map(|quad| {
  102|       |                                let quad = quad?;
  103|       |                                Ok(EncodedQuad::new(
  104|       |                                    quad.subject,
  105|       |                                    quad.predicate,
  106|       |                                    quad.object,
  107|       |                                    EncodedTerm::DefaultGraph,
  108|       |                                ))
  109|      0|                            }),
  110|      0|                    )
  111|       |                }
  112|  2.01k|            } else if self
  113|  2.01k|                .dataset
  114|  2.01k|                .named
  115|  2.01k|                .as_ref()
  116|  2.01k|                .map_or(true, |d| d.contains(graph_name))
  117|       |            {
  118|  2.01k|                Box::new(self.store_encoded_quads_for_pattern(
  119|  2.01k|                    subject,
  120|  2.01k|                    predicate,
  121|  2.01k|                    object,
  122|  2.01k|                    Some(graph_name),
  123|  2.01k|                ))
  124|       |            } else {
  125|      0|                Box::new(empty())
  126|       |            }
  127|  1.24k|        } else if let Some(named_graphs) = &self.dataset.named {
  128|      0|            let iters = named_graphs
  129|      0|                .iter()
  130|      0|                .map(|graph_name| {
  131|       |                    self.store_encoded_quads_for_pattern(
  132|       |                        subject,
  133|       |                        predicate,
  134|       |                        object,
  135|       |                        Some(graph_name),
  136|       |                    )
  137|      0|                })
  138|      0|                .collect::<Vec<_>>();
  139|      0|            Box::new(iters.into_iter().flatten())
  140|       |        } else {
  141|  1.24k|            Box::new(
  142|  1.24k|                self.store_encoded_quads_for_pattern(subject, predicate, object, None)
  143|  1.24k|                    .filter(|quad| match quad {
  144|       |                        Err(_) => true,
  145|       |                        Ok(quad) => !quad.graph_name.is_default_graph(),
  146|  1.24k|                    }),
  147|  1.24k|            )
  148|       |        }
  149|  25.2k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql7datasetNtB2_11DatasetView10insert_str:
  162|  59.0k|    pub fn insert_str(&self, key: &StrHash, value: &str) {
  163|  59.0k|        if let Entry::Vacant(e) = self.extra.borrow_mut().entry(*key) {
  164|  50.6k|            if !matches!(self.reader.contains_str(key), Ok(true)) {
  165|  3.00k|                e.insert(value.to_owned());
  166|  47.6k|            }
  167|  8.41k|        }
  168|  59.0k|    }
_RNvXs_NtNtCsd92XLxb96zi_8oxigraph6sparql7datasetNtB4_11DatasetViewNtNtNtB8_7storage15numeric_encoder9StrLookup7get_str:
  172|    230|    fn get_str(&self, key: &StrHash) -> Result<Option<String>, StorageError> {
  173|    230|        Ok(if let Some(value) = self.extra.borrow().get(key) {
  174|      0|            Some(value.clone())
  175|       |        } else {
  176|    230|            self.reader.get_str(key)?
  177|       |        })
  178|    230|    }

_RNvXs4_NtNtCsd92XLxb96zi_8oxigraph6sparql5errorNtB5_15EvaluationErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtNtNtB9_7storage5error12StorageErrorE4from:
   11|      2|#[derive(Debug, thiserror::Error)]

_RINvXse_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultNtNtNtBa_7storage15numeric_encoder11EncodedQuadNtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okTNtB2J_11EncodedTermB4G_B4G_ENCNvMs3_B6_NtB6_13PathEvaluator47get_subject_or_object_identity_pairs_in_dataset0AIB2l_B4F_B3s_Ej2_EBa_:
 5201|     49|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|     49|        self,
 5203|     49|        f: F,
 5204|     49|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|     49|        FlatMapOk {
 5206|     49|            inner: self,
 5207|     49|            f,
 5208|     49|            current: None,
 5209|     49|        }
 5210|     49|    }
_RINvXse_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultNtNtNtBa_7storage15numeric_encoder11EncodedQuadNtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okTNtB2J_11EncodedTermB4G_ENCNvMs3_B6_NtB6_13PathEvaluator45get_subject_or_object_identity_pairs_in_graph0AIB2l_B4F_B3s_Ej2_EBa_:
 5201|  3.17k|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|  3.17k|        self,
 5203|  3.17k|        f: F,
 5204|  3.17k|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|  3.17k|        FlatMapOk {
 5206|  3.17k|            inner: self,
 5207|  3.17k|            f,
 5208|  3.17k|            current: None,
 5209|  3.17k|        }
 5210|  3.17k|    }
_RINvXse_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultNtNtNtBa_7storage15numeric_encoder11EncodedTermNtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okB2H_NCNvMs3_B6_NtB6_13PathEvaluator16eval_to_in_graphs_0BJ_EBa_:
 5201|     86|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|     86|        self,
 5203|     86|        f: F,
 5204|     86|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|     86|        FlatMapOk {
 5206|     86|            inner: self,
 5207|     86|            f,
 5208|     86|            current: None,
 5209|     86|        }
 5210|     86|    }
_RINvXse_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultTNtNtNtBa_7storage15numeric_encoder11EncodedTermB2I_B2I_ENtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okB2H_NCNvMs3_B6_NtB6_13PathEvaluator26eval_open_in_unknown_graphs0_0INtNtNtB1p_8adapters3map3MapIBK_DB1j_p4ItemIB2l_B2I_B3C_EEL_ENCNCB4V_s0_00EEBa_:
 5201|     27|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|     27|        self,
 5203|     27|        f: F,
 5204|     27|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|     27|        FlatMapOk {
 5206|     27|            inner: self,
 5207|     27|            f,
 5208|     27|            current: None,
 5209|     27|        }
 5210|     27|    }
_RINvXse_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultNtNtNtBa_7storage15numeric_encoder11EncodedTermNtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okB2H_NCNvMs3_B6_NtB6_13PathEvaluator18eval_from_in_graphs_0BJ_EBa_:
 5201|    133|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|    133|        self,
 5203|    133|        f: F,
 5204|    133|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|    133|        FlatMapOk {
 5206|    133|            inner: self,
 5207|    133|            f,
 5208|    133|            current: None,
 5209|    133|        }
 5210|    133|    }
_RINvXse_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultTNtNtNtBa_7storage15numeric_encoder11EncodedTermB2I_ENtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okB2H_NCNvMs3_B6_NtB6_13PathEvaluator18eval_open_in_graphs0_0INtNtNtB1p_8adapters3map3MapIBK_DB1j_p4ItemIB2l_B2I_B3y_EEL_ENCNCB4R_s0_00EEBa_:
 5201|  1.59k|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|  1.59k|        self,
 5203|  1.59k|        f: F,
 5204|  1.59k|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|  1.59k|        FlatMapOk {
 5206|  1.59k|            inner: self,
 5207|  1.59k|            f,
 5208|  1.59k|            current: None,
 5209|  1.59k|        }
 5210|  1.59k|    }
_RINvXse_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1r_6result6ResultTNtNtNtBa_7storage15numeric_encoder11EncodedTermB2I_ENtNtB8_5error15EvaluationErrorEEL_EINtB6_14ResultIteratorB2H_E11flat_map_okB2H_NCNvMs3_B6_NtB6_13PathEvaluator24eval_to_in_unknown_graphs_0INtNtNtB1p_8adapters3map3MapIBK_DB1j_p4ItemIB2l_B2I_B3y_EEL_ENCNCB4R_s_00EEBa_:
 5201|      5|    fn flat_map_ok<O, F: FnMut(T) -> U, U: IntoIterator<Item = Result<O, EvaluationError>>>(
 5202|      5|        self,
 5203|      5|        f: F,
 5204|      5|    ) -> FlatMapOk<T, O, Self, F, U> {
 5205|      5|        FlatMapOk {
 5206|      5|            inner: self,
 5207|      5|            f,
 5208|      5|            current: None,
 5209|      5|        }
 5210|      5|    }
_RNvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval7to_bool:
 2875|    106|fn to_bool(term: &EncodedTerm) -> Option<bool> {
 2876|    106|    match term {
 2877|     92|        EncodedTerm::BooleanLiteral(value) => Some((*value).into()),
 2878|      1|        EncodedTerm::SmallStringLiteral(value) => Some(!value.is_empty()),
 2879|       |        EncodedTerm::BigStringLiteral { .. } => {
 2880|      0|            Some(false) // A big literal can't be empty
 2881|       |        }
 2882|      0|        EncodedTerm::FloatLiteral(value) => Some(Boolean::from(*value).into()),
 2883|      0|        EncodedTerm::DoubleLiteral(value) => Some(Boolean::from(*value).into()),
 2884|      2|        EncodedTerm::IntegerLiteral(value) => Some(Boolean::from(*value).into()),
 2885|      1|        EncodedTerm::DecimalLiteral(value) => Some(Boolean::from(*value).into()),
 2886|     10|        _ => None,
 2887|       |    }
 2888|    106|}
_RNvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval15encode_variable:
 5502|  99.9k|fn encode_variable(variables: &mut Vec<Variable>, variable: &Variable) -> usize {
 5503|  99.9k|    if let Some(key) = slice_key(variables, variable) {
 5504|  65.6k|        key
 5505|       |    } else {
 5506|  34.2k|        variables.push(variable.clone());
 5507|  34.2k|        variables.len() - 1
 5508|       |    }
 5509|  99.9k|}
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB2_12EncodedTuple4iter:
   67|      8|    pub fn iter(&self) -> impl Iterator<Item = Option<EncodedTerm>> + '_ {
   68|      8|        self.inner.iter().cloned()
   69|      8|    }
_RNvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13PathEvaluator24eval_to_in_unknown_graph:
 4392|     26|    fn eval_to_in_unknown_graph(
 4393|     26|        &self,
 4394|     26|        path: &PropertyPath,
 4395|     26|        end: &EncodedTerm,
 4396|     26|    ) -> Box<dyn Iterator<Item = Result<(EncodedTerm, EncodedTerm), EvaluationError>>> {
 4397|     26|        match path {
 4398|      5|            PropertyPath::Path(p) => Box::new(
 4399|      5|                self.dataset
 4400|      5|                    .encoded_quads_for_pattern(None, Some(p), Some(end), None)
 4401|      5|                    .map(|t| {
 4402|       |                        let t = t?;
 4403|       |                        Ok((t.subject, t.graph_name))
 4404|      5|                    }),
 4405|      5|            ),
 4406|      6|            PropertyPath::Reverse(p) => self.eval_from_in_unknown_graph(p, end),
 4407|      5|            PropertyPath::Sequence(a, b) => {
 4408|      5|                let eval = self.clone();
 4409|      5|                let a = Rc::clone(a);
 4410|      5|                Box::new(self.eval_to_in_unknown_graph(b, end).flat_map_ok(
 4411|      5|                    move |(middle, graph_name)| {
 4412|       |                        eval.eval_from_in_graph(&a, &middle, &graph_name)
 4413|       |                            .map(move |start| Ok((start?, graph_name.clone())))
 4414|      5|                    },
 4415|      5|                ))
 4416|       |            }
 4417|      6|            PropertyPath::Alternative(a, b) => Box::new(hash_deduplicate(
 4418|      6|                self.eval_to_in_unknown_graph(a, end)
 4419|      6|                    .chain(self.eval_to_in_unknown_graph(b, end)),
 4420|      6|            )),
 4421|      0|            PropertyPath::ZeroOrMore(p) => {
 4422|      0|                let end2 = end.clone();
 4423|      0|                let eval = self.clone();
 4424|      0|                let p = Rc::clone(p);
 4425|      0|                self.run_if_term_is_a_dataset_node(end, move |graph_name| {
 4426|       |                    let eval = eval.clone();
 4427|       |                    let p = Rc::clone(&p);
 4428|       |                    let graph_name2 = graph_name.clone();
 4429|       |                    transitive_closure(Some(Ok(end2.clone())), move |e| {
 4430|       |                        eval.eval_to_in_graph(&p, &e, &graph_name2)
 4431|       |                    })
 4432|       |                    .map(move |e| Ok((e?, graph_name.clone())))
 4433|      0|                })
 4434|       |            }
 4435|      1|            PropertyPath::OneOrMore(p) => {
 4436|      1|                let eval = self.clone();
 4437|      1|                let p = Rc::clone(p);
 4438|      1|                Box::new(transitive_closure(
 4439|      1|                    self.eval_to_in_unknown_graph(&p, end),
 4440|      1|                    move |(e, graph_name)| {
 4441|       |                        eval.eval_to_in_graph(&p, &e, &graph_name)
 4442|       |                            .map(move |e| Ok((e?, graph_name.clone())))
 4443|      1|                    },
 4444|      1|                ))
 4445|       |            }
 4446|      1|            PropertyPath::ZeroOrOne(p) => {
 4447|      1|                let eval = self.clone();
 4448|      1|                let end2 = end.clone();
 4449|      1|                let p = Rc::clone(p);
 4450|      1|                self.run_if_term_is_a_dataset_node(end, move |graph_name| {
 4451|       |                    hash_deduplicate(once(Ok(end2.clone())).chain(eval.eval_to_in_graph(
 4452|       |                        &p,
 4453|       |                        &end2,
 4454|       |                        &graph_name,
 4455|       |                    )))
 4456|       |                    .map(move |e| Ok((e?, graph_name.clone())))
 4457|      1|                })
 4458|       |            }
 4459|      2|            PropertyPath::NegatedPropertySet(ps) => {
 4460|      2|                let ps = Rc::clone(ps);
 4461|      2|                Box::new(
 4462|      2|                    self.dataset
 4463|      2|                        .encoded_quads_for_pattern(Some(end), None, None, None)
 4464|      2|                        .filter_map(move |t| match t {
 4465|       |                            Ok(t) => {
 4466|       |                                if ps.iter().any(|p| *p == t.predicate) {
 4467|       |                                    None
 4468|       |                                } else {
 4469|       |                                    Some(Ok((t.subject, t.graph_name)))
 4470|       |                                }
 4471|       |                            }
 4472|       |                            Err(e) => Some(Err(e)),
 4473|      2|                        }),
 4474|      2|                )
 4475|       |            }
 4476|       |        }
 4477|     26|    }
_RNvXs5_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_16HashJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hint:
 4790|      1|    fn size_hint(&self) -> (usize, Option<usize>) {
 4791|      1|        (
 4792|      1|            0,
 4793|      1|            self.probe_iter
 4794|      1|                .size_hint()
 4795|      1|                .1
 4796|      1|                .map(|v| v.saturating_mul(self.built.len())),
 4797|      1|        )
 4798|      1|    }
_RNvXsF_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_12EncodedTupleNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
   43|    158|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs9_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_24ConsecutiveDeduplicationNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hint:
 4932|    658|    fn size_hint(&self) -> (usize, Option<usize>) {
 4933|    658|        let (min, max) = self.inner.size_hint();
 4934|    658|        ((min != 0).into(), max)
 4935|    658|    }
_RNvXs8_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13UnionIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 4886|     45|    fn next(&mut self) -> Option<Self::Item> {
 4887|       |        loop {
 4888|     85|            if let Some(tuple) = self.current_iterator.next() {
 4889|     20|                return Some(tuple);
 4890|     65|            }
 4891|     65|            if self.current_plan >= self.plans.len() {
 4892|     25|                return None;
 4893|     40|            }
 4894|     40|            self.current_iterator = self.plans[self.current_plan](self.input.clone());
 4895|     40|            self.current_plan += 1;
 4896|       |        }
 4897|     45|    }
_RNvXs9_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_24ConsecutiveDeduplicationNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 4908|  2.77k|    fn next(&mut self) -> Option<Self::Item> {
 4909|       |        // Basic idea. We buffer the previous result and we only emit it when we know the next one or it's the end
 4910|       |        loop {
 4911|  3.46k|            if let Some(next) = self.inner.next() {
 4912|    731|                match next {
 4913|    731|                    Ok(next) => match self.current.take() {
 4914|     74|                        Some(current) if current != next => {
 4915|     43|                            // We found a relevant value
 4916|     43|                            self.current = Some(next);
 4917|     43|                            return Some(Ok(current));
 4918|       |                        }
 4919|    688|                        _ => {
 4920|    688|                            //  We discard the value and move to the next one
 4921|    688|                            self.current = Some(next);
 4922|    688|                        }
 4923|       |                    },
 4924|      0|                    Err(error) => return Some(Err(error)), // We swap but it's fine. It's an error.
 4925|       |                }
 4926|       |            } else {
 4927|  2.73k|                return self.current.take().map(Ok);
 4928|       |            }
 4929|       |        }
 4930|  2.77k|    }
_RNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_15SimpleEvaluator29build_graph_pattern_evaluator:
  281|  83.7k|    fn build_graph_pattern_evaluator(
  282|  83.7k|        &self,
  283|  83.7k|        pattern: &GraphPattern,
  284|  83.7k|        encoded_variables: &mut Vec<Variable>,
  285|  83.7k|        stat_children: &mut Vec<Rc<EvalNodeWithStats>>,
  286|  83.7k|    ) -> Rc<dyn Fn(EncodedTuple) -> EncodedTuplesIterator> {
  287|  83.7k|        match pattern {
  288|       |            GraphPattern::Values {
  289|  1.93k|                variables,
  290|  1.93k|                bindings,
  291|  1.93k|            } => {
  292|  1.93k|                let encoding = variables
  293|  1.93k|                    .iter()
  294|  1.93k|                    .map(|v| encode_variable(encoded_variables, v))
  295|  1.93k|                    .collect::<Vec<_>>();
  296|  1.93k|                let encoded_tuples = bindings
  297|  1.93k|                    .iter()
  298|  1.93k|                    .map(|row| {
  299|       |                        let mut result = EncodedTuple::with_capacity(variables.len());
  300|       |                        for (key, value) in row.iter().enumerate() {
  301|       |                            if let Some(term) = value {
  302|       |                                result.set(
  303|       |                                    encoding[key],
  304|       |                                    match term {
  305|       |                                        GroundTerm::NamedNode(node) => self.encode_term(node),
  306|       |                                        GroundTerm::Literal(literal) => self.encode_term(literal),
  307|       |                                        GroundTerm::Triple(triple) => self.encode_triple(triple),
  308|       |                                    },
  309|       |                                );
  310|       |                            }
  311|       |                        }
  312|       |                        result
  313|  1.93k|                    })
  314|  1.93k|                    .collect::<Vec<_>>();
  315|  1.93k|                Rc::new(move |from| {
  316|       |                    Box::new(
  317|       |                        encoded_tuples
  318|       |                            .iter()
  319|       |                            .filter_map(move |t| Some(Ok(t.combine_with(&from)?)))
  320|       |                            .collect::<Vec<_>>()
  321|       |                            .into_iter(),
  322|       |                    )
  323|  1.93k|                })
  324|       |            }
  325|       |            GraphPattern::Service {
  326|      0|                name,
  327|      0|                inner,
  328|      0|                silent,
  329|      0|            } => {
  330|      0|                #[allow(clippy::shadow_same)]
  331|      0|                let silent = *silent;
  332|      0|                let service_name =
  333|      0|                    TupleSelector::from_named_node_pattern(name, encoded_variables, &self.dataset);
  334|      0|                self.build_graph_pattern_evaluator(inner, encoded_variables, &mut Vec::new()); // We call recursively to fill "encoded_variables"
  335|      0|                let graph_pattern = spargebra::algebra::GraphPattern::from(inner.as_ref());
  336|      0|                let variables = Rc::from(encoded_variables.as_slice());
  337|      0|                let eval = self.clone();
  338|      0|                Rc::new(move |from| {
  339|       |                    match eval.evaluate_service(
  340|       |                        &service_name,
  341|       |                        &graph_pattern,
  342|       |                        Rc::clone(&variables),
  343|       |                        &from,
  344|       |                    ) {
  345|       |                        Ok(result) => Box::new(result.filter_map(move |binding| {
  346|       |                            binding
  347|       |                                .map(|binding| binding.combine_with(&from))
  348|       |                                .transpose()
  349|       |                        })),
  350|       |                        Err(e) => {
  351|       |                            if silent {
  352|       |                                Box::new(once(Ok(from)))
  353|       |                            } else {
  354|       |                                Box::new(once(Err(e)))
  355|       |                            }
  356|       |                        }
  357|       |                    }
  358|      0|                })
  359|       |            }
  360|       |            GraphPattern::QuadPattern {
  361|  29.9k|                subject,
  362|  29.9k|                predicate,
  363|  29.9k|                object,
  364|  29.9k|                graph_name,
  365|  29.9k|            } => {
  366|  29.9k|                let subject = TupleSelector::from_ground_term_pattern(
  367|  29.9k|                    subject,
  368|  29.9k|                    encoded_variables,
  369|  29.9k|                    &self.dataset,
  370|  29.9k|                );
  371|  29.9k|                let predicate = TupleSelector::from_named_node_pattern(
  372|  29.9k|                    predicate,
  373|  29.9k|                    encoded_variables,
  374|  29.9k|                    &self.dataset,
  375|  29.9k|                );
  376|  29.9k|                let object = TupleSelector::from_ground_term_pattern(
  377|  29.9k|                    object,
  378|  29.9k|                    encoded_variables,
  379|  29.9k|                    &self.dataset,
  380|  29.9k|                );
  381|  29.9k|                let graph_name = TupleSelector::from_graph_name_pattern(
  382|  29.9k|                    graph_name,
  383|  29.9k|                    encoded_variables,
  384|  29.9k|                    &self.dataset,
  385|  29.9k|                );
  386|  29.9k|                let dataset = Rc::clone(&self.dataset);
  387|  29.9k|                Rc::new(move |from| {
  388|       |                    let iter = dataset.encoded_quads_for_pattern(
  389|       |                        subject.get_pattern_value(&from).as_ref(),
  390|       |                        predicate.get_pattern_value(&from).as_ref(),
  391|       |                        object.get_pattern_value(&from).as_ref(),
  392|       |                        graph_name.get_pattern_value(&from).as_ref(),
  393|       |                    );
  394|       |                    let subject = subject.clone();
  395|       |                    let predicate = predicate.clone();
  396|       |                    let object = object.clone();
  397|       |                    let graph_name = graph_name.clone();
  398|       |                    Box::new(iter.filter_map(move |quad| match quad {
  399|       |                        Ok(quad) => {
  400|       |                            let mut new_tuple = from.clone();
  401|       |                            put_pattern_value(&subject, quad.subject, &mut new_tuple)?;
  402|       |                            put_pattern_value(&predicate, quad.predicate, &mut new_tuple)?;
  403|       |                            put_pattern_value(&object, quad.object, &mut new_tuple)?;
  404|       |                            put_pattern_value(&graph_name, quad.graph_name, &mut new_tuple)?;
  405|       |                            Some(Ok(new_tuple))
  406|       |                        }
  407|       |                        Err(error) => Some(Err(error)),
  408|       |                    }))
  409|  29.9k|                })
  410|       |            }
  411|       |            GraphPattern::Path {
  412|  9.45k|                subject,
  413|  9.45k|                path,
  414|  9.45k|                object,
  415|  9.45k|                graph_name,
  416|  9.45k|            } => {
  417|  9.45k|                let subject = TupleSelector::from_ground_term_pattern(
  418|  9.45k|                    subject,
  419|  9.45k|                    encoded_variables,
  420|  9.45k|                    &self.dataset,
  421|  9.45k|                );
  422|  9.45k|                let path = self.encode_property_path(path);
  423|  9.45k|
  424|  9.45k|                let object = TupleSelector::from_ground_term_pattern(
  425|  9.45k|                    object,
  426|  9.45k|                    encoded_variables,
  427|  9.45k|                    &self.dataset,
  428|  9.45k|                );
  429|  9.45k|                let graph_name = TupleSelector::from_graph_name_pattern(
  430|  9.45k|                    graph_name,
  431|  9.45k|                    encoded_variables,
  432|  9.45k|                    &self.dataset,
  433|  9.45k|                );
  434|  9.45k|                let dataset = Rc::clone(&self.dataset);
  435|  9.45k|                Rc::new(move |from| {
  436|       |                    let input_subject = subject.get_pattern_value(&from);
  437|       |                    let input_object = object.get_pattern_value(&from);
  438|       |                    let input_graph_name = graph_name.get_pattern_value(&from);
  439|       |                    let path_eval = PathEvaluator {
  440|       |                        dataset: Rc::clone(&dataset),
  441|       |                    };
  442|       |                    match (input_subject, input_object, input_graph_name) {
  443|       |                        (Some(input_subject), Some(input_object), Some(input_graph_name)) => {
  444|       |                            match path_eval.eval_closed_in_graph(
  445|       |                                &path,
  446|       |                                &input_subject,
  447|       |                                &input_object,
  448|       |                                &input_graph_name,
  449|       |                            ) {
  450|       |                                Ok(true) => Box::new(once(Ok(from))),
  451|       |                                Ok(false) => Box::new(empty()),
  452|       |                                Err(e) => Box::new(once(Err(e))),
  453|       |                            }
  454|       |                        }
  455|       |                        (Some(input_subject), None, Some(input_graph_name)) => {
  456|       |                            let object = object.clone();
  457|       |                            Box::new(
  458|       |                                path_eval
  459|       |                                    .eval_from_in_graph(&path, &input_subject, &input_graph_name)
  460|       |                                    .filter_map(move |o| match o {
  461|       |                                        Ok(o) => {
  462|       |                                            let mut new_tuple = from.clone();
  463|       |                                            put_pattern_value(&object, o, &mut new_tuple)?;
  464|       |                                            Some(Ok(new_tuple))
  465|       |                                        }
  466|       |                                        Err(error) => Some(Err(error)),
  467|       |                                    }),
  468|       |                            )
  469|       |                        }
  470|       |                        (None, Some(input_object), Some(input_graph_name)) => {
  471|       |                            let subject = subject.clone();
  472|       |                            Box::new(
  473|       |                                path_eval
  474|       |                                    .eval_to_in_graph(&path, &input_object, &input_graph_name)
  475|       |                                    .filter_map(move |s| match s {
  476|       |                                        Ok(s) => {
  477|       |                                            let mut new_tuple = from.clone();
  478|       |                                            put_pattern_value(&subject, s, &mut new_tuple)?;
  479|       |                                            Some(Ok(new_tuple))
  480|       |                                        }
  481|       |                                        Err(error) => Some(Err(error)),
  482|       |                                    }),
  483|       |                            )
  484|       |                        }
  485|       |                        (None, None, Some(input_graph_name)) => {
  486|       |                            let subject = subject.clone();
  487|       |                            let object = object.clone();
  488|       |                            Box::new(
  489|       |                                path_eval
  490|       |                                    .eval_open_in_graph(&path, &input_graph_name)
  491|       |                                    .filter_map(move |so| match so {
  492|       |                                        Ok((s, o)) => {
  493|       |                                            let mut new_tuple = from.clone();
  494|       |                                            put_pattern_value(&subject, s, &mut new_tuple)?;
  495|       |                                            put_pattern_value(&object, o, &mut new_tuple)?;
  496|       |                                            Some(Ok(new_tuple))
  497|       |                                        }
  498|       |                                        Err(error) => Some(Err(error)),
  499|       |                                    }),
  500|       |                            )
  501|       |                        }
  502|       |                        (Some(input_subject), Some(input_object), None) => {
  503|       |                            let graph_name = graph_name.clone();
  504|       |                            Box::new(
  505|       |                                path_eval
  506|       |                                    .eval_closed_in_unknown_graph(
  507|       |                                        &path,
  508|       |                                        &input_subject,
  509|       |                                        &input_object,
  510|       |                                    )
  511|       |                                    .filter_map(move |r| match r {
  512|       |                                        Ok(g) => {
  513|       |                                            let mut new_tuple = from.clone();
  514|       |                                            put_pattern_value(&graph_name, g, &mut new_tuple)?;
  515|       |                                            Some(Ok(new_tuple))
  516|       |                                        }
  517|       |                                        Err(error) => Some(Err(error)),
  518|       |                                    }),
  519|       |                            )
  520|       |                        }
  521|       |                        (Some(input_subject), None, None) => {
  522|       |                            let object = object.clone();
  523|       |                            let graph_name = graph_name.clone();
  524|       |                            Box::new(
  525|       |                                path_eval
  526|       |                                    .eval_from_in_unknown_graph(&path, &input_subject)
  527|       |                                    .filter_map(move |r| match r {
  528|       |                                        Ok((o, g)) => {
  529|       |                                            let mut new_tuple = from.clone();
  530|       |                                            put_pattern_value(&object, o, &mut new_tuple)?;
  531|       |                                            put_pattern_value(&graph_name, g, &mut new_tuple)?;
  532|       |                                            Some(Ok(new_tuple))
  533|       |                                        }
  534|       |                                        Err(error) => Some(Err(error)),
  535|       |                                    }),
  536|       |                            )
  537|       |                        }
  538|       |                        (None, Some(input_object), None) => {
  539|       |                            let subject = subject.clone();
  540|       |                            let graph_name = graph_name.clone();
  541|       |                            Box::new(
  542|       |                                path_eval
  543|       |                                    .eval_to_in_unknown_graph(&path, &input_object)
  544|       |                                    .filter_map(move |r| match r {
  545|       |                                        Ok((s, g)) => {
  546|       |                                            let mut new_tuple = from.clone();
  547|       |                                            put_pattern_value(&subject, s, &mut new_tuple)?;
  548|       |                                            put_pattern_value(&graph_name, g, &mut new_tuple)?;
  549|       |
  550|       |                                            Some(Ok(new_tuple))
  551|       |                                        }
  552|       |                                        Err(error) => Some(Err(error)),
  553|       |                                    }),
  554|       |                            )
  555|       |                        }
  556|       |                        (None, None, None) => {
  557|       |                            let subject = subject.clone();
  558|       |                            let object = object.clone();
  559|       |                            let graph_name = graph_name.clone();
  560|       |                            Box::new(path_eval.eval_open_in_unknown_graph(&path).filter_map(
  561|       |                                move |r| match r {
  562|       |                                    Ok((s, o, g)) => {
  563|       |                                        let mut new_tuple = from.clone();
  564|       |                                        put_pattern_value(&subject, s, &mut new_tuple)?;
  565|       |                                        put_pattern_value(&object, o, &mut new_tuple)?;
  566|       |                                        put_pattern_value(&graph_name, g, &mut new_tuple)?;
  567|       |                                        Some(Ok(new_tuple))
  568|       |                                    }
  569|       |                                    Err(error) => Some(Err(error)),
  570|       |                                },
  571|       |                            ))
  572|       |                        }
  573|       |                    }
  574|  9.45k|                })
  575|       |            }
  576|       |            GraphPattern::Join {
  577|  19.0k|                left,
  578|  19.0k|                right,
  579|  19.0k|                algorithm,
  580|  19.0k|            } => {
  581|  19.0k|                let (left, left_stats) = self.graph_pattern_evaluator(left, encoded_variables);
  582|  19.0k|                stat_children.push(left_stats);
  583|  19.0k|                let (right, right_stats) = self.graph_pattern_evaluator(right, encoded_variables);
  584|  19.0k|                stat_children.push(right_stats);
  585|  19.0k|
  586|  19.0k|                match algorithm {
  587|  19.0k|                    JoinAlgorithm::HashBuildLeftProbeRight { keys } => {
  588|  19.0k|                        let build = left;
  589|  19.0k|                        let probe = right;
  590|  19.0k|                        if keys.is_empty() {
  591|       |                            // Cartesian product
  592|  19.0k|                            Rc::new(move |from| {
  593|       |                                let mut errors = Vec::default();
  594|       |                                let build_values = build(from.clone())
  595|       |                                    .filter_map(|result| match result {
  596|       |                                        Ok(result) => Some(result),
  597|       |                                        Err(error) => {
  598|       |                                            errors.push(Err(error));
  599|       |                                            None
  600|       |                                        }
  601|       |                                    })
  602|       |                                    .collect::<Vec<_>>();
  603|       |                                Box::new(CartesianProductJoinIterator {
  604|       |                                    probe_iter: probe(from),
  605|       |                                    built: build_values,
  606|       |                                    buffered_results: errors,
  607|       |                                })
  608|  19.0k|                            })
  609|       |                        } else {
  610|       |                            // Real hash join
  611|      6|                            let keys = keys
  612|      6|                                .iter()
  613|      6|                                .map(|v| encode_variable(encoded_variables, v))
  614|      6|                                .collect::<Vec<_>>();
  615|      6|                            Rc::new(move |from| {
  616|       |                                let mut errors = Vec::default();
  617|       |                                let mut built_values = EncodedTupleSet::new(keys.clone());
  618|       |                                built_values.extend(build(from.clone()).filter_map(|result| {
  619|       |                                    match result {
  620|       |                                        Ok(result) => Some(result),
  621|       |                                        Err(error) => {
  622|       |                                            errors.push(Err(error));
  623|       |                                            None
  624|       |                                        }
  625|       |                                    }
  626|       |                                }));
  627|       |                                Box::new(HashJoinIterator {
  628|       |                                    probe_iter: probe(from),
  629|       |                                    built: built_values,
  630|       |                                    buffered_results: errors,
  631|       |                                })
  632|      6|                            })
  633|       |                        }
  634|       |                    }
  635|       |                }
  636|       |            }
  637|  17.6k|            GraphPattern::Lateral { left, right } => {
  638|  17.6k|                let (left, left_stats) = self.graph_pattern_evaluator(left, encoded_variables);
  639|  17.6k|                stat_children.push(left_stats);
  640|       |
  641|       |                if let GraphPattern::LeftJoin {
  642|     28|                    left: nested_left,
  643|     28|                    right: nested_right,
  644|     28|                    expression,
  645|       |                    ..
  646|  17.6k|                } = right.as_ref()
  647|       |                {
  648|     28|                    if nested_left.is_empty_singleton() {
  649|       |                        // We are in a ForLoopLeftJoin
  650|     28|                        let right =
  651|     28|                            GraphPattern::filter(nested_right.as_ref().clone(), expression.clone());
  652|     28|                        let (right, right_stats) =
  653|     28|                            self.graph_pattern_evaluator(&right, encoded_variables);
  654|     28|                        stat_children.push(right_stats);
  655|     28|                        return Rc::new(move |from| {
  656|       |                            Box::new(ForLoopLeftJoinIterator {
  657|       |                                right_evaluator: Rc::clone(&right),
  658|       |                                left_iter: left(from),
  659|       |                                current_right: Box::new(empty()),
  660|       |                            })
  661|     28|                        });
  662|      0|                    }
  663|  17.6k|                }
  664|  17.6k|                let (right, right_stats) = self.graph_pattern_evaluator(right, encoded_variables);
  665|  17.6k|                stat_children.push(right_stats);
  666|  17.6k|                Rc::new(move |from| {
  667|       |                    let right = Rc::clone(&right);
  668|       |                    Box::new(left(from).flat_map(move |t| match t {
  669|       |                        Ok(t) => right(t),
  670|       |                        Err(e) => Box::new(once(Err(e))),
  671|       |                    }))
  672|  17.6k|                })
  673|       |            }
  674|       |            GraphPattern::Minus {
  675|     28|                left,
  676|     28|                right,
  677|     28|                algorithm,
  678|     28|            } => {
  679|     28|                let (left, left_stats) = self.graph_pattern_evaluator(left, encoded_variables);
  680|     28|                stat_children.push(left_stats);
  681|     28|                let (right, right_stats) = self.graph_pattern_evaluator(right, encoded_variables);
  682|     28|                stat_children.push(right_stats);
  683|     28|
  684|     28|                match algorithm {
  685|     28|                    MinusAlgorithm::HashBuildRightProbeLeft { keys } => {
  686|     28|                        if keys.is_empty() {
  687|     27|                            Rc::new(move |from| {
  688|       |                                let right: Vec<_> =
  689|       |                                    right(from.clone()).filter_map(Result::ok).collect();
  690|       |                                Box::new(left(from).filter(move |left_tuple| {
  691|       |                                    if let Ok(left_tuple) = left_tuple {
  692|       |                                        !right.iter().any(|right_tuple| {
  693|       |                                            are_compatible_and_not_disjointed(
  694|       |                                                left_tuple,
  695|       |                                                right_tuple,
  696|       |                                            )
  697|       |                                        })
  698|       |                                    } else {
  699|       |                                        true
  700|       |                                    }
  701|       |                                }))
  702|     27|                            })
  703|       |                        } else {
  704|      1|                            let keys = keys
  705|      1|                                .iter()
  706|      1|                                .map(|v| encode_variable(encoded_variables, v))
  707|      1|                                .collect::<Vec<_>>();
  708|      1|                            Rc::new(move |from| {
  709|       |                                let mut right_values = EncodedTupleSet::new(keys.clone());
  710|       |                                right_values.extend(right(from.clone()).filter_map(Result::ok));
  711|       |                                Box::new(left(from).filter(move |left_tuple| {
  712|       |                                    if let Ok(left_tuple) = left_tuple {
  713|       |                                        !right_values.get(left_tuple).iter().any(|right_tuple| {
  714|       |                                            are_compatible_and_not_disjointed(
  715|       |                                                left_tuple,
  716|       |                                                right_tuple,
  717|       |                                            )
  718|       |                                        })
  719|       |                                    } else {
  720|       |                                        true
  721|       |                                    }
  722|       |                                }))
  723|      1|                            })
  724|       |                        }
  725|       |                    }
  726|       |                }
  727|       |            }
  728|       |            GraphPattern::LeftJoin {
  729|    255|                left,
  730|    255|                right,
  731|    255|                expression,
  732|    255|                algorithm,
  733|    255|            } => {
  734|    255|                let (left, left_stats) = self.graph_pattern_evaluator(left, encoded_variables);
  735|    255|                stat_children.push(left_stats);
  736|    255|                let (right, right_stats) = self.graph_pattern_evaluator(right, encoded_variables);
  737|    255|                stat_children.push(right_stats);
  738|    255|                let expression =
  739|    255|                    self.expression_evaluator(expression, encoded_variables, stat_children);
  740|    255|
  741|    255|                match algorithm {
  742|    255|                    LeftJoinAlgorithm::HashBuildRightProbeLeft { keys } => {
  743|    255|                        // Real hash join
  744|    255|                        let keys = keys
  745|    255|                            .iter()
  746|    255|                            .map(|v| encode_variable(encoded_variables, v))
  747|    255|                            .collect::<Vec<_>>();
  748|    255|                        Rc::new(move |from| {
  749|       |                            let mut errors = Vec::default();
  750|       |                            let mut right_values = EncodedTupleSet::new(keys.clone());
  751|       |                            right_values.extend(right(from.clone()).filter_map(
  752|       |                                |result| match result {
  753|       |                                    Ok(result) => Some(result),
  754|       |                                    Err(error) => {
  755|       |                                        errors.push(Err(error));
  756|       |                                        None
  757|       |                                    }
  758|       |                                },
  759|       |                            ));
  760|       |                            Box::new(HashLeftJoinIterator {
  761|       |                                left_iter: left(from),
  762|       |                                right: right_values,
  763|       |                                buffered_results: errors,
  764|       |                                expression: Rc::clone(&expression),
  765|       |                            })
  766|    255|                        })
  767|    255|                    }
  768|    255|                }
  769|       |            }
  770|     30|            GraphPattern::Filter { inner, expression } => {
  771|     30|                let (child, child_stats) = self.graph_pattern_evaluator(inner, encoded_variables);
  772|     30|                stat_children.push(child_stats);
  773|     30|                let expression =
  774|     30|                    self.expression_evaluator(expression, encoded_variables, stat_children);
  775|     30|
  776|     30|                Rc::new(move |from| {
  777|       |                    let expression = Rc::clone(&expression);
  778|       |                    Box::new(child(from).filter(move |tuple| {
  779|       |                        match tuple {
  780|       |                            Ok(tuple) => expression(tuple)
  781|       |                                .and_then(|term| to_bool(&term))
  782|       |                                .unwrap_or(false),
  783|       |                            Err(_) => true,
  784|       |                        }
  785|       |                    }))
  786|     30|                })
  787|       |            }
  788|     20|            GraphPattern::Union { inner } => {
  789|     20|                let children = inner
  790|     20|                    .iter()
  791|     20|                    .map(|child| {
  792|       |                        let (child, child_stats) =
  793|       |                            self.graph_pattern_evaluator(child, encoded_variables);
  794|       |                        stat_children.push(child_stats);
  795|       |                        child
  796|     20|                    })
  797|     20|                    .collect::<Vec<_>>();
  798|     20|
  799|     20|                Rc::new(move |from| {
  800|       |                    Box::new(UnionIterator {
  801|       |                        plans: children.clone(),
  802|       |                        input: from,
  803|       |                        current_iterator: Box::new(empty()),
  804|       |                        current_plan: 0,
  805|       |                    })
  806|     20|                })
  807|       |            }
  808|       |            GraphPattern::Extend {
  809|    453|                inner,
  810|    453|                variable,
  811|    453|                expression,
  812|    453|            } => {
  813|    453|                let (child, child_stats) = self.graph_pattern_evaluator(inner, encoded_variables);
  814|    453|                stat_children.push(child_stats);
  815|    453|
  816|    453|                let position = encode_variable(encoded_variables, variable);
  817|    453|                let expression =
  818|    453|                    self.expression_evaluator(expression, encoded_variables, stat_children);
  819|    453|                Rc::new(move |from| {
  820|       |                    let expression = Rc::clone(&expression);
  821|       |                    Box::new(child(from).map(move |tuple| {
  822|       |                        let mut tuple = tuple?;
  823|       |                        if let Some(value) = expression(&tuple) {
  824|       |                            tuple.set(position, value);
  825|       |                        }
  826|       |                        Ok(tuple)
  827|       |                    }))
  828|    453|                })
  829|       |            }
  830|      0|            GraphPattern::OrderBy { inner, expression } => {
  831|      0|                let (child, child_stats) = self.graph_pattern_evaluator(inner, encoded_variables);
  832|      0|                stat_children.push(child_stats);
  833|      0|                let by = expression
  834|      0|                    .iter()
  835|      0|                    .map(|comp| match comp {
  836|       |                        OrderExpression::Asc(expression) => ComparatorFunction::Asc(
  837|       |                            self.expression_evaluator(expression, encoded_variables, stat_children),
  838|       |                        ),
  839|       |                        OrderExpression::Desc(expression) => ComparatorFunction::Desc(
  840|       |                            self.expression_evaluator(expression, encoded_variables, stat_children),
  841|       |                        ),
  842|      0|                    })
  843|      0|                    .collect::<Vec<_>>();
  844|      0|                let dataset = Rc::clone(&self.dataset);
  845|      0|                Rc::new(move |from| {
  846|       |                    let mut errors = Vec::default();
  847|       |                    let mut values = child(from)
  848|       |                        .filter_map(|result| match result {
  849|       |                            Ok(result) => Some(result),
  850|       |                            Err(error) => {
  851|       |                                errors.push(Err(error));
  852|       |                                None
  853|       |                            }
  854|       |                        })
  855|       |                        .collect::<Vec<_>>();
  856|       |                    values.sort_unstable_by(|a, b| {
  857|       |                        for comp in &by {
  858|       |                            match comp {
  859|       |                                ComparatorFunction::Asc(expression) => {
  860|       |                                    match cmp_terms(
  861|       |                                        &dataset,
  862|       |                                        expression(a).as_ref(),
  863|       |                                        expression(b).as_ref(),
  864|       |                                    ) {
  865|       |                                        Ordering::Greater => return Ordering::Greater,
  866|       |                                        Ordering::Less => return Ordering::Less,
  867|       |                                        Ordering::Equal => (),
  868|       |                                    }
  869|       |                                }
  870|       |                                ComparatorFunction::Desc(expression) => {
  871|       |                                    match cmp_terms(
  872|       |                                        &dataset,
  873|       |                                        expression(a).as_ref(),
  874|       |                                        expression(b).as_ref(),
  875|       |                                    ) {
  876|       |                                        Ordering::Greater => return Ordering::Less,
  877|       |                                        Ordering::Less => return Ordering::Greater,
  878|       |                                        Ordering::Equal => (),
  879|       |                                    }
  880|       |                                }
  881|       |                            }
  882|       |                        }
  883|       |                        Ordering::Equal
  884|       |                    });
  885|       |                    Box::new(errors.into_iter().chain(values.into_iter().map(Ok)))
  886|      0|                })
  887|       |            }
  888|  1.18k|            GraphPattern::Distinct { inner } => {
  889|  1.18k|                let (child, child_stats) = self.graph_pattern_evaluator(inner, encoded_variables);
  890|  1.18k|                stat_children.push(child_stats);
  891|  1.18k|                Rc::new(move |from| Box::new(hash_deduplicate(child(from))))
  892|       |            }
  893|  2.07k|            GraphPattern::Reduced { inner } => {
  894|  2.07k|                let (child, child_stats) = self.graph_pattern_evaluator(inner, encoded_variables);
  895|  2.07k|                stat_children.push(child_stats);
  896|  2.07k|                Rc::new(move |from| {
  897|       |                    Box::new(ConsecutiveDeduplication {
  898|       |                        inner: child(from),
  899|       |                        current: None,
  900|       |                    })
  901|  2.07k|                })
  902|       |            }
  903|       |            GraphPattern::Slice {
  904|      0|                inner,
  905|      0|                start,
  906|      0|                length,
  907|      0|            } => {
  908|      0|                let (mut child, child_stats) =
  909|      0|                    self.graph_pattern_evaluator(inner, encoded_variables);
  910|      0|                stat_children.push(child_stats);
  911|      0|                #[allow(clippy::shadow_same)]
  912|      0|                let start = *start;
  913|      0|                if start > 0 {
  914|      0|                    child = Rc::new(move |from| Box::new(child(from).skip(start)));
  915|      0|                }
  916|      0|                if let Some(length) = *length {
  917|      0|                    child = Rc::new(move |from| Box::new(child(from).take(length)));
  918|      0|                }
  919|      0|                child
  920|       |            }
  921|  1.56k|            GraphPattern::Project { inner, variables } => {
  922|  1.56k|                let mut inner_encoded_variables = variables.clone();
  923|  1.56k|                let (child, child_stats) =
  924|  1.56k|                    self.graph_pattern_evaluator(inner, &mut inner_encoded_variables);
  925|  1.56k|                stat_children.push(child_stats);
  926|  1.56k|                let mapping = variables
  927|  1.56k|                    .iter()
  928|  1.56k|                    .enumerate()
  929|  1.56k|                    .map(|(new_variable, variable)| {
  930|       |                        (new_variable, encode_variable(encoded_variables, variable))
  931|  1.56k|                    })
  932|  1.56k|                    .collect::<Rc<[(usize, usize)]>>();
  933|  1.56k|                Rc::new(move |from| {
  934|       |                    let mapping = Rc::clone(&mapping);
  935|       |                    let mut input_tuple = EncodedTuple::with_capacity(mapping.len());
  936|       |                    for (input_key, output_key) in &*mapping {
  937|       |                        if let Some(value) = from.get(*output_key) {
  938|       |                            input_tuple.set(*input_key, value.clone());
  939|       |                        }
  940|       |                    }
  941|       |                    Box::new(child(input_tuple).filter_map(move |tuple| {
  942|       |                        match tuple {
  943|       |                            Ok(tuple) => {
  944|       |                                let mut output_tuple = from.clone();
  945|       |                                for (input_key, output_key) in &*mapping {
  946|       |                                    if let Some(value) = tuple.get(*input_key) {
  947|       |                                        if let Some(existing_value) = output_tuple.get(*output_key)
  948|       |                                        {
  949|       |                                            if existing_value != value {
  950|       |                                                return None; // Conflict
  951|       |                                            }
  952|       |                                        } else {
  953|       |                                            output_tuple.set(*output_key, value.clone());
  954|       |                                        }
  955|       |                                    }
  956|       |                                }
  957|       |                                Some(Ok(output_tuple))
  958|       |                            }
  959|       |                            Err(e) => Some(Err(e)),
  960|       |                        }
  961|       |                    }))
  962|  1.56k|                })
  963|       |            }
  964|       |            GraphPattern::Group {
  965|      8|                inner,
  966|      8|                aggregates,
  967|      8|                variables,
  968|      8|            } => {
  969|      8|                let (child, child_stats) = self.graph_pattern_evaluator(inner, encoded_variables);
  970|      8|                stat_children.push(child_stats);
  971|      8|                let key_variables = variables
  972|      8|                    .iter()
  973|      8|                    .map(|k| encode_variable(encoded_variables, k))
  974|      8|                    .collect::<Rc<[_]>>();
  975|      8|                let aggregate_input_expressions = aggregates
  976|      8|                    .iter()
  977|      8|                    .map(|(_, expression)| match expression {
  978|       |                        AggregateExpression::CountSolutions { .. } => None,
  979|       |                        AggregateExpression::FunctionCall { expr, .. } => {
  980|       |                            Some(self.expression_evaluator(expr, encoded_variables, stat_children))
  981|       |                        }
  982|      8|                    })
  983|      8|                    .collect::<Vec<_>>();
  984|      8|                let accumulator_builders = aggregates
  985|      8|                    .iter()
  986|      8|                    .map(|(_, aggregate)| Self::accumulator_builder(&self.dataset, aggregate))
  987|      8|                    .collect::<Vec<_>>();
  988|      8|                let accumulator_variables = aggregates
  989|      8|                    .iter()
  990|      8|                    .map(|(variable, _)| encode_variable(encoded_variables, variable))
  991|      8|                    .collect::<Vec<_>>();
  992|      8|                Rc::new(move |from| {
  993|       |                    let tuple_size = from.capacity();
  994|       |                    let key_variables = Rc::clone(&key_variables);
  995|       |                    let mut errors = Vec::default();
  996|       |                    let mut accumulators_for_group =
  997|       |                        HashMap::<Vec<Option<EncodedTerm>>, Vec<Box<dyn Accumulator>>>::default();
  998|       |                    if key_variables.is_empty() {
  999|       |                        // There is always a single group if there is no GROUP BY
 1000|       |                        accumulators_for_group.insert(
 1001|       |                            Vec::new(),
 1002|       |                            accumulator_builders.iter().map(|c| c()).collect::<Vec<_>>(),
 1003|       |                        );
 1004|       |                    }
 1005|       |                    child(from)
 1006|       |                        .filter_map(|result| match result {
 1007|       |                            Ok(result) => Some(result),
 1008|       |                            Err(error) => {
 1009|       |                                errors.push(error);
 1010|       |                                None
 1011|       |                            }
 1012|       |                        })
 1013|       |                        .for_each(|tuple| {
 1014|       |                            // TODO avoid copy for key?
 1015|       |                            let key = key_variables
 1016|       |                                .iter()
 1017|       |                                .map(|v| tuple.get(*v).cloned())
 1018|       |                                .collect();
 1019|       |
 1020|       |                            let key_accumulators =
 1021|       |                                accumulators_for_group.entry(key).or_insert_with(|| {
 1022|       |                                    accumulator_builders.iter().map(|c| c()).collect::<Vec<_>>()
 1023|       |                                });
 1024|       |                            for (accumulator, input_expression) in key_accumulators
 1025|       |                                .iter_mut()
 1026|       |                                .zip(&aggregate_input_expressions)
 1027|       |                            {
 1028|       |                                accumulator.add(
 1029|       |                                    input_expression
 1030|       |                                        .as_ref()
 1031|       |                                        .and_then(|parameter| parameter(&tuple)),
 1032|       |                                );
 1033|       |                            }
 1034|       |                        });
 1035|       |                    let accumulator_variables = accumulator_variables.clone();
 1036|       |                    Box::new(
 1037|       |                        errors
 1038|       |                            .into_iter()
 1039|       |                            .map(Err)
 1040|       |                            .chain(accumulators_for_group.into_iter().map(
 1041|       |                                move |(key, accumulators)| {
 1042|       |                                    let mut result = EncodedTuple::with_capacity(tuple_size);
 1043|       |                                    for (variable, value) in key_variables.iter().zip(key) {
 1044|       |                                        if let Some(value) = value {
 1045|       |                                            result.set(*variable, value);
 1046|       |                                        }
 1047|       |                                    }
 1048|       |                                    for (accumulator, variable) in
 1049|       |                                        accumulators.into_iter().zip(&accumulator_variables)
 1050|       |                                    {
 1051|       |                                        if let Some(value) = accumulator.state() {
 1052|       |                                            result.set(*variable, value);
 1053|       |                                        }
 1054|       |                                    }
 1055|       |                                    Ok(result)
 1056|       |                                },
 1057|       |                            )),
 1058|       |                    )
 1059|      8|                })
 1060|       |            }
 1061|       |        }
 1062|  83.7k|    }
_RNvMsw_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_15EncodedTupleSet3get:
 5608|    197|    fn get(&self, tuple: &EncodedTuple) -> &[EncodedTuple] {
 5609|    197|        self.map.get(&self.tuple_key(tuple)).map_or(&[], |v| v)
 5610|    197|    }
_RNvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval15eval_node_label:
 5713|  83.7k|fn eval_node_label(node: &GraphPattern) -> String {
 5714|  83.7k|    match node {
 5715|  1.18k|        GraphPattern::Distinct { .. } => "Distinct(Hash)".to_owned(),
 5716|       |        GraphPattern::Extend {
 5717|    453|            expression,
 5718|    453|            variable,
 5719|    453|            ..
 5720|    453|        } => format!(
 5721|    453|            "Extend({} -> {variable})",
 5722|    453|            spargebra::algebra::Expression::from(expression)
 5723|    453|        ),
 5724|     30|        GraphPattern::Filter { expression, .. } => format!(
 5725|     30|            "Filter({})",
 5726|     30|            spargebra::algebra::Expression::from(expression)
 5727|     30|        ),
 5728|       |        GraphPattern::Group {
 5729|      8|            variables,
 5730|      8|            aggregates,
 5731|      8|            ..
 5732|      8|        } => {
 5733|      8|            format!(
 5734|      8|                "Aggregate({})",
 5735|      8|                format_list(variables.iter().map(ToString::to_string).chain(
 5736|      8|                    aggregates.iter().map(|(v, agg)| format!(
 5737|       |                        "{} -> {v}",
 5738|       |                        spargebra::algebra::AggregateExpression::from(agg)
 5739|      8|                    ))
 5740|      8|                ))
 5741|      8|            )
 5742|       |        }
 5743|  19.0k|        GraphPattern::Join { algorithm, .. } => match algorithm {
 5744|  19.0k|            JoinAlgorithm::HashBuildLeftProbeRight { keys } => format!(
 5745|  19.0k|                "LeftJoin(HashBuildLeftProbeRight, keys = {})",
 5746|  19.0k|                format_list(keys)
 5747|  19.0k|            ),
 5748|       |        },
 5749|  17.6k|        GraphPattern::Lateral { right, .. } => {
 5750|       |            if let GraphPattern::LeftJoin {
 5751|     28|                left: nested_left,
 5752|     28|                expression,
 5753|       |                ..
 5754|  17.6k|            } = right.as_ref()
 5755|       |            {
 5756|     28|                if nested_left.is_empty_singleton() {
 5757|       |                    // We are in a ForLoopLeftJoin
 5758|     28|                    return format!(
 5759|     28|                        "ForLoopLeftJoin(expression = {})",
 5760|     28|                        spargebra::algebra::Expression::from(expression)
 5761|     28|                    );
 5762|      0|                }
 5763|  17.6k|            }
 5764|  17.6k|            "Lateral".to_owned()
 5765|       |        }
 5766|       |        GraphPattern::LeftJoin {
 5767|    255|            algorithm,
 5768|    255|            expression,
 5769|    255|            ..
 5770|    255|        } => match algorithm {
 5771|    255|            LeftJoinAlgorithm::HashBuildRightProbeLeft { keys } => format!(
 5772|    255|                "LeftJoin(HashBuildRightProbeLeft, keys = {}, expression = {})",
 5773|    255|                format_list(keys),
 5774|    255|                spargebra::algebra::Expression::from(expression)
 5775|    255|            ),
 5776|       |        },
 5777|     28|        GraphPattern::Minus { algorithm, .. } => match algorithm {
 5778|     28|            MinusAlgorithm::HashBuildRightProbeLeft { keys } => format!(
 5779|     28|                "AntiJoin(HashBuildRightProbeLeft, keys = {})",
 5780|     28|                format_list(keys)
 5781|     28|            ),
 5782|       |        },
 5783|      0|        GraphPattern::OrderBy { expression, .. } => {
 5784|      0|            format!(
 5785|      0|                "Sort({})",
 5786|      0|                format_list(
 5787|      0|                    expression
 5788|      0|                        .iter()
 5789|      0|                        .map(spargebra::algebra::OrderExpression::from)
 5790|      0|                )
 5791|      0|            )
 5792|       |        }
 5793|       |        GraphPattern::Path {
 5794|  9.45k|            subject,
 5795|  9.45k|            path,
 5796|  9.45k|            object,
 5797|  9.45k|            graph_name,
 5798|       |        } => {
 5799|  9.45k|            if let Some(graph_name) = graph_name {
 5800|    410|                format!("Path({subject} {path} {object} {graph_name})")
 5801|       |            } else {
 5802|  9.04k|                format!("Path({subject} {path} {object})")
 5803|       |            }
 5804|       |        }
 5805|  1.56k|        GraphPattern::Project { variables, .. } => {
 5806|  1.56k|            format!("Project({})", format_list(variables))
 5807|       |        }
 5808|       |        GraphPattern::QuadPattern {
 5809|  29.9k|            subject,
 5810|  29.9k|            predicate,
 5811|  29.9k|            object,
 5812|  29.9k|            graph_name,
 5813|       |        } => {
 5814|  29.9k|            if let Some(graph_name) = graph_name {
 5815|  4.80k|                format!("QuadPattern({subject} {predicate} {object} {graph_name})")
 5816|       |            } else {
 5817|  25.1k|                format!("QuadPattern({subject} {predicate} {object})")
 5818|       |            }
 5819|       |        }
 5820|  2.07k|        GraphPattern::Reduced { .. } => "Reduced".to_owned(),
 5821|      0|        GraphPattern::Service { name, silent, .. } => {
 5822|      0|            if *silent {
 5823|      0|                format!("Service({name}, Silent)")
 5824|       |            } else {
 5825|      0|                format!("Service({name})")
 5826|       |            }
 5827|       |        }
 5828|      0|        GraphPattern::Slice { start, length, .. } => {
 5829|      0|            if let Some(length) = length {
 5830|      0|                format!("Slice(start = {start}, length = {length})")
 5831|       |            } else {
 5832|      0|                format!("Slice(start = {start})")
 5833|       |            }
 5834|       |        }
 5835|     20|        GraphPattern::Union { .. } => "Union".to_owned(),
 5836|  1.93k|        GraphPattern::Values { variables, .. } => {
 5837|  1.93k|            format!("StaticBindings({})", format_list(variables))
 5838|       |        }
 5839|       |    }
 5840|  83.7k|}
_RNvMs2_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13TupleSelector23from_graph_name_pattern:
 3882|  39.3k|    fn from_graph_name_pattern(
 3883|  39.3k|        graph_name_pattern: &Option<NamedNodePattern>,
 3884|  39.3k|        variables: &mut Vec<Variable>,
 3885|  39.3k|        dataset: &DatasetView,
 3886|  39.3k|    ) -> Self {
 3887|  39.3k|        if let Some(graph_name_pattern) = graph_name_pattern {
 3888|  5.21k|            Self::from_named_node_pattern(graph_name_pattern, variables, dataset)
 3889|       |        } else {
 3890|  34.1k|            Self::Constant(EncodedTerm::DefaultGraph)
 3891|       |        }
 3892|  39.3k|    }
_RNvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval17put_pattern_value:
 3916|     76|fn put_pattern_value(
 3917|     76|    selector: &TupleSelector,
 3918|     76|    value: EncodedTerm,
 3919|     76|    tuple: &mut EncodedTuple,
 3920|     76|) -> Option<()> {
 3921|     76|    match selector {
 3922|     20|        TupleSelector::Constant(c) => (*c == value).then_some(()),
 3923|     56|        TupleSelector::Variable(v) => {
 3924|     56|            if let Some(old) = tuple.get(*v) {
 3925|      0|                (value == *old).then_some(())
 3926|       |            } else {
 3927|     56|                tuple.set(*v, value);
 3928|     56|                Some(())
 3929|       |            }
 3930|       |        }
 3931|      0|        TupleSelector::TriplePattern(triple) => {
 3932|      0|            if let EncodedTerm::Triple(value) = value {
 3933|      0|                put_pattern_value(&triple.subject, value.subject.clone(), tuple)?;
 3934|      0|                put_pattern_value(&triple.predicate, value.predicate.clone(), tuple)?;
 3935|      0|                put_pattern_value(&triple.object, value.object.clone(), tuple)
 3936|       |            } else {
 3937|      0|                None
 3938|       |            }
 3939|       |        }
 3940|       |    }
 3941|     76|}
_RNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_15SimpleEvaluator20expression_evaluator:
 1138|  15.4k|    fn expression_evaluator(
 1139|  15.4k|        &self,
 1140|  15.4k|        expression: &Expression,
 1141|  15.4k|        encoded_variables: &mut Vec<Variable>,
 1142|  15.4k|        stat_children: &mut Vec<Rc<EvalNodeWithStats>>,
 1143|  15.4k|    ) -> Rc<dyn Fn(&EncodedTuple) -> Option<EncodedTerm>> {
 1144|  15.4k|        match expression {
 1145|    378|            Expression::NamedNode(t) => {
 1146|    378|                let t = self.encode_term(t);
 1147|    378|                Rc::new(move |_| Some(t.clone()))
 1148|       |            }
 1149|  2.85k|            Expression::Literal(t) => {
 1150|  2.85k|                let t = self.encode_term(t);
 1151|  2.85k|                Rc::new(move |_| Some(t.clone()))
 1152|       |            }
 1153|  3.20k|            Expression::Variable(v) => {
 1154|  3.20k|                let v = encode_variable(encoded_variables, v);
 1155|  3.20k|                Rc::new(move |tuple| tuple.get(v).cloned())
 1156|       |            }
 1157|    127|            Expression::Bound(v) => {
 1158|    127|                let v = encode_variable(encoded_variables, v);
 1159|    127|                Rc::new(move |tuple| Some(tuple.contains(v).into()))
 1160|       |            }
 1161|     87|            Expression::Exists(plan) => {
 1162|     87|                let (eval, stats) = self.graph_pattern_evaluator(plan, encoded_variables);
 1163|     87|                stat_children.push(stats);
 1164|     87|                Rc::new(move |tuple| Some(eval(tuple.clone()).next().is_some().into()))
 1165|       |            }
 1166|     24|            Expression::Or(inner) => {
 1167|     24|                let children = inner
 1168|     24|                    .iter()
 1169|     24|                    .map(|i| self.expression_evaluator(i, encoded_variables, stat_children))
 1170|     24|                    .collect::<Rc<[_]>>();
 1171|     24|                Rc::new(move |tuple| {
 1172|       |                    let mut error = false;
 1173|       |                    for child in &*children {
 1174|       |                        match child(tuple).and_then(|v| to_bool(&v)) {
 1175|       |                            Some(true) => return Some(true.into()),
 1176|       |                            Some(false) => continue,
 1177|       |                            None => error = true,
 1178|       |                        }
 1179|       |                    }
 1180|       |                    if error {
 1181|       |                        None
 1182|       |                    } else {
 1183|       |                        Some(false.into())
 1184|       |                    }
 1185|     24|                })
 1186|       |            }
 1187|    181|            Expression::And(inner) => {
 1188|    181|                let children = inner
 1189|    181|                    .iter()
 1190|    181|                    .map(|i| self.expression_evaluator(i, encoded_variables, stat_children))
 1191|    181|                    .collect::<Rc<[_]>>();
 1192|    181|                Rc::new(move |tuple| {
 1193|       |                    let mut error = false;
 1194|       |                    for child in &*children {
 1195|       |                        match child(tuple).and_then(|v| to_bool(&v)) {
 1196|       |                            Some(true) => continue,
 1197|       |                            Some(false) => return Some(false.into()),
 1198|       |                            None => error = true,
 1199|       |                        }
 1200|       |                    }
 1201|       |                    if error {
 1202|       |                        None
 1203|       |                    } else {
 1204|       |                        Some(true.into())
 1205|       |                    }
 1206|    181|                })
 1207|       |            }
 1208|    573|            Expression::Equal(a, b) => {
 1209|    573|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1210|    573|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1211|    573|                Rc::new(move |tuple| equals(&a(tuple)?, &b(tuple)?).map(Into::into))
 1212|       |            }
 1213|      2|            Expression::SameTerm(a, b) => {
 1214|      2|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1215|      2|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1216|      2|                Rc::new(move |tuple| Some((a(tuple)? == b(tuple)?).into()))
 1217|       |            }
 1218|     32|            Expression::Greater(a, b) => {
 1219|     32|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1220|     32|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1221|     32|                let dataset = Rc::clone(&self.dataset);
 1222|     32|                Rc::new(move |tuple| {
 1223|       |                    Some(
 1224|       |                        (partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? == Ordering::Greater)
 1225|       |                            .into(),
 1226|       |                    )
 1227|     32|                })
 1228|       |            }
 1229|    120|            Expression::GreaterOrEqual(a, b) => {
 1230|    120|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1231|    120|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1232|    120|                let dataset = Rc::clone(&self.dataset);
 1233|    120|                Rc::new(move |tuple| {
 1234|       |                    Some(
 1235|       |                        match partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? {
 1236|       |                            Ordering::Greater | Ordering::Equal => true,
 1237|       |                            Ordering::Less => false,
 1238|       |                        }
 1239|       |                        .into(),
 1240|       |                    )
 1241|    120|                })
 1242|       |            }
 1243|      8|            Expression::Less(a, b) => {
 1244|      8|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1245|      8|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1246|      8|                let dataset = Rc::clone(&self.dataset);
 1247|      8|                Rc::new(move |tuple| {
 1248|       |                    Some((partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? == Ordering::Less).into())
 1249|      8|                })
 1250|       |            }
 1251|     16|            Expression::LessOrEqual(a, b) => {
 1252|     16|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1253|     16|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1254|     16|                let dataset = Rc::clone(&self.dataset);
 1255|     16|                Rc::new(move |tuple| {
 1256|       |                    Some(
 1257|       |                        match partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? {
 1258|       |                            Ordering::Less | Ordering::Equal => true,
 1259|       |                            Ordering::Greater => false,
 1260|       |                        }
 1261|       |                        .into(),
 1262|       |                    )
 1263|     16|                })
 1264|       |            }
 1265|    178|            Expression::Add(a, b) => {
 1266|    178|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1267|    178|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1268|    178|                Rc::new(
 1269|    178|                    move |tuple| match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1270|       |                        NumericBinaryOperands::Float(v1, v2) => Some((v1 + v2).into()),
 1271|       |                        NumericBinaryOperands::Double(v1, v2) => Some((v1 + v2).into()),
 1272|       |                        NumericBinaryOperands::Integer(v1, v2) => Some(v1.checked_add(v2)?.into()),
 1273|       |                        NumericBinaryOperands::Decimal(v1, v2) => Some(v1.checked_add(v2)?.into()),
 1274|       |                        NumericBinaryOperands::Duration(v1, v2) => Some(v1.checked_add(v2)?.into()),
 1275|       |                        NumericBinaryOperands::YearMonthDuration(v1, v2) => {
 1276|       |                            Some(v1.checked_add(v2)?.into())
 1277|       |                        }
 1278|       |                        NumericBinaryOperands::DayTimeDuration(v1, v2) => {
 1279|       |                            Some(v1.checked_add(v2)?.into())
 1280|       |                        }
 1281|       |                        NumericBinaryOperands::DateTimeDuration(v1, v2) => {
 1282|       |                            Some(v1.checked_add_duration(v2)?.into())
 1283|       |                        }
 1284|       |                        NumericBinaryOperands::DateTimeYearMonthDuration(v1, v2) => {
 1285|       |                            Some(v1.checked_add_year_month_duration(v2)?.into())
 1286|       |                        }
 1287|       |                        NumericBinaryOperands::DateTimeDayTimeDuration(v1, v2) => {
 1288|       |                            Some(v1.checked_add_day_time_duration(v2)?.into())
 1289|       |                        }
 1290|       |                        NumericBinaryOperands::DateDuration(v1, v2) => {
 1291|       |                            Some(v1.checked_add_duration(v2)?.into())
 1292|       |                        }
 1293|       |                        NumericBinaryOperands::DateYearMonthDuration(v1, v2) => {
 1294|       |                            Some(v1.checked_add_year_month_duration(v2)?.into())
 1295|       |                        }
 1296|       |                        NumericBinaryOperands::DateDayTimeDuration(v1, v2) => {
 1297|       |                            Some(v1.checked_add_day_time_duration(v2)?.into())
 1298|       |                        }
 1299|       |                        NumericBinaryOperands::TimeDuration(v1, v2) => {
 1300|       |                            Some(v1.checked_add_duration(v2)?.into())
 1301|       |                        }
 1302|       |                        NumericBinaryOperands::TimeDayTimeDuration(v1, v2) => {
 1303|       |                            Some(v1.checked_add_day_time_duration(v2)?.into())
 1304|       |                        }
 1305|       |                        NumericBinaryOperands::DateTime(_, _)
 1306|       |                        | NumericBinaryOperands::Time(_, _)
 1307|       |                        | NumericBinaryOperands::Date(_, _) => None,
 1308|    178|                    },
 1309|    178|                )
 1310|       |            }
 1311|  1.18k|            Expression::Subtract(a, b) => {
 1312|  1.18k|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1313|  1.18k|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1314|  1.18k|                Rc::new(move |tuple| {
 1315|       |                    Some(match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1316|       |                        NumericBinaryOperands::Float(v1, v2) => (v1 - v2).into(),
 1317|       |                        NumericBinaryOperands::Double(v1, v2) => (v1 - v2).into(),
 1318|       |                        NumericBinaryOperands::Integer(v1, v2) => v1.checked_sub(v2)?.into(),
 1319|       |                        NumericBinaryOperands::Decimal(v1, v2) => v1.checked_sub(v2)?.into(),
 1320|       |                        NumericBinaryOperands::DateTime(v1, v2) => v1.checked_sub(v2)?.into(),
 1321|       |                        NumericBinaryOperands::Date(v1, v2) => v1.checked_sub(v2)?.into(),
 1322|       |                        NumericBinaryOperands::Time(v1, v2) => v1.checked_sub(v2)?.into(),
 1323|       |                        NumericBinaryOperands::Duration(v1, v2) => v1.checked_sub(v2)?.into(),
 1324|       |                        NumericBinaryOperands::YearMonthDuration(v1, v2) => {
 1325|       |                            v1.checked_sub(v2)?.into()
 1326|       |                        }
 1327|       |                        NumericBinaryOperands::DayTimeDuration(v1, v2) => {
 1328|       |                            v1.checked_sub(v2)?.into()
 1329|       |                        }
 1330|       |                        NumericBinaryOperands::DateTimeDuration(v1, v2) => {
 1331|       |                            v1.checked_sub_duration(v2)?.into()
 1332|       |                        }
 1333|       |                        NumericBinaryOperands::DateTimeYearMonthDuration(v1, v2) => {
 1334|       |                            v1.checked_sub_year_month_duration(v2)?.into()
 1335|       |                        }
 1336|       |                        NumericBinaryOperands::DateTimeDayTimeDuration(v1, v2) => {
 1337|       |                            v1.checked_sub_day_time_duration(v2)?.into()
 1338|       |                        }
 1339|       |                        NumericBinaryOperands::DateDuration(v1, v2) => {
 1340|       |                            v1.checked_sub_duration(v2)?.into()
 1341|       |                        }
 1342|       |                        NumericBinaryOperands::DateYearMonthDuration(v1, v2) => {
 1343|       |                            v1.checked_sub_year_month_duration(v2)?.into()
 1344|       |                        }
 1345|       |                        NumericBinaryOperands::DateDayTimeDuration(v1, v2) => {
 1346|       |                            v1.checked_sub_day_time_duration(v2)?.into()
 1347|       |                        }
 1348|       |                        NumericBinaryOperands::TimeDuration(v1, v2) => {
 1349|       |                            v1.checked_sub_duration(v2)?.into()
 1350|       |                        }
 1351|       |                        NumericBinaryOperands::TimeDayTimeDuration(v1, v2) => {
 1352|       |                            v1.checked_sub_day_time_duration(v2)?.into()
 1353|       |                        }
 1354|       |                    })
 1355|  1.18k|                })
 1356|       |            }
 1357|    392|            Expression::Multiply(a, b) => {
 1358|    392|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1359|    392|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1360|    392|                Rc::new(
 1361|    392|                    move |tuple| match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1362|       |                        NumericBinaryOperands::Float(v1, v2) => Some((v1 * v2).into()),
 1363|       |                        NumericBinaryOperands::Double(v1, v2) => Some((v1 * v2).into()),
 1364|       |                        NumericBinaryOperands::Integer(v1, v2) => Some(v1.checked_mul(v2)?.into()),
 1365|       |                        NumericBinaryOperands::Decimal(v1, v2) => Some(v1.checked_mul(v2)?.into()),
 1366|       |                        _ => None,
 1367|    392|                    },
 1368|    392|                )
 1369|       |            }
 1370|  2.26k|            Expression::Divide(a, b) => {
 1371|  2.26k|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1372|  2.26k|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1373|  2.26k|                Rc::new(
 1374|  2.26k|                    move |tuple| match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1375|       |                        NumericBinaryOperands::Float(v1, v2) => Some((v1 / v2).into()),
 1376|       |                        NumericBinaryOperands::Double(v1, v2) => Some((v1 / v2).into()),
 1377|       |                        NumericBinaryOperands::Integer(v1, v2) => {
 1378|       |                            Some(Decimal::from(v1).checked_div(v2)?.into())
 1379|       |                        }
 1380|       |                        NumericBinaryOperands::Decimal(v1, v2) => Some(v1.checked_div(v2)?.into()),
 1381|       |                        _ => None,
 1382|  2.26k|                    },
 1383|  2.26k|                )
 1384|       |            }
 1385|    210|            Expression::UnaryPlus(e) => {
 1386|    210|                let e = self.expression_evaluator(e, encoded_variables, stat_children);
 1387|    210|                Rc::new(move |tuple| match e(tuple)? {
 1388|       |                    EncodedTerm::FloatLiteral(value) => Some(value.into()),
 1389|       |                    EncodedTerm::DoubleLiteral(value) => Some(value.into()),
 1390|       |                    EncodedTerm::IntegerLiteral(value) => Some(value.into()),
 1391|       |                    EncodedTerm::DecimalLiteral(value) => Some(value.into()),
 1392|       |                    EncodedTerm::DurationLiteral(value) => Some(value.into()),
 1393|       |                    EncodedTerm::YearMonthDurationLiteral(value) => Some(value.into()),
 1394|       |                    EncodedTerm::DayTimeDurationLiteral(value) => Some(value.into()),
 1395|       |                    _ => None,
 1396|    210|                })
 1397|       |            }
 1398|  1.55k|            Expression::UnaryMinus(e) => {
 1399|  1.55k|                let e = self.expression_evaluator(e, encoded_variables, stat_children);
 1400|  1.55k|                Rc::new(move |tuple| match e(tuple)? {
 1401|       |                    EncodedTerm::FloatLiteral(value) => Some((-value).into()),
 1402|       |                    EncodedTerm::DoubleLiteral(value) => Some((-value).into()),
 1403|       |                    EncodedTerm::IntegerLiteral(value) => Some(value.checked_neg()?.into()),
 1404|       |                    EncodedTerm::DecimalLiteral(value) => Some(value.checked_neg()?.into()),
 1405|       |                    EncodedTerm::DurationLiteral(value) => Some(value.checked_neg()?.into()),
 1406|       |                    EncodedTerm::YearMonthDurationLiteral(value) => {
 1407|       |                        Some(value.checked_neg()?.into())
 1408|       |                    }
 1409|       |                    EncodedTerm::DayTimeDurationLiteral(value) => Some(value.checked_neg()?.into()),
 1410|       |                    _ => None,
 1411|  1.55k|                })
 1412|       |            }
 1413|  1.46k|            Expression::Not(e) => {
 1414|  1.46k|                let e = self.expression_evaluator(e, encoded_variables, stat_children);
 1415|  1.46k|                Rc::new(move |tuple| to_bool(&e(tuple)?).map(|v| (!v).into()))
 1416|       |            }
 1417|     54|            Expression::Coalesce(l) => {
 1418|     54|                let l: Vec<_> = l
 1419|     54|                    .iter()
 1420|     54|                    .map(|e| self.expression_evaluator(e, encoded_variables, stat_children))
 1421|     54|                    .collect();
 1422|     54|                Rc::new(move |tuple| {
 1423|       |                    for e in &l {
 1424|       |                        if let Some(result) = e(tuple) {
 1425|       |                            return Some(result);
 1426|       |                        }
 1427|       |                    }
 1428|       |                    None
 1429|     54|                })
 1430|       |            }
 1431|    490|            Expression::If(a, b, c) => {
 1432|    490|                let a = self.expression_evaluator(a, encoded_variables, stat_children);
 1433|    490|                let b = self.expression_evaluator(b, encoded_variables, stat_children);
 1434|    490|                let c = self.expression_evaluator(c, encoded_variables, stat_children);
 1435|    490|                Rc::new(move |tuple| {
 1436|       |                    if to_bool(&a(tuple)?)? {
 1437|       |                        b(tuple)
 1438|       |                    } else {
 1439|       |                        c(tuple)
 1440|       |                    }
 1441|    490|                })
 1442|       |            }
 1443|     36|            Expression::FunctionCall(function, parameters) => {
 1444|     36|                match function {
 1445|       |                    Function::Str => {
 1446|      8|                        let e = self.expression_evaluator(
 1447|      8|                            &parameters[0],
 1448|      8|                            encoded_variables,
 1449|      8|                            stat_children,
 1450|      8|                        );
 1451|      8|                        let dataset = Rc::clone(&self.dataset);
 1452|      8|                        Rc::new(move |tuple| {
 1453|       |                            Some(build_string_literal_from_id(to_string_id(
 1454|       |                                &dataset,
 1455|       |                                &e(tuple)?,
 1456|       |                            )?))
 1457|      8|                        })
 1458|       |                    }
 1459|       |                    Function::Lang => {
 1460|      4|                        let e = self.expression_evaluator(
 1461|      4|                            &parameters[0],
 1462|      4|                            encoded_variables,
 1463|      4|                            stat_children,
 1464|      4|                        );
 1465|      4|                        let dataset = Rc::clone(&self.dataset);
 1466|      4|                        Rc::new(move |tuple| match e(tuple)? {
 1467|       |                            EncodedTerm::SmallSmallLangStringLiteral { language, .. }
 1468|       |                            | EncodedTerm::BigSmallLangStringLiteral { language, .. } => {
 1469|       |                                Some(build_string_literal_from_id(language.into()))
 1470|       |                            }
 1471|       |                            EncodedTerm::SmallBigLangStringLiteral { language_id, .. }
 1472|       |                            | EncodedTerm::BigBigLangStringLiteral { language_id, .. } => {
 1473|       |                                Some(build_string_literal_from_id(language_id.into()))
 1474|       |                            }
 1475|       |                            e if e.is_literal() => Some(build_string_literal(&dataset, "")),
 1476|       |                            _ => None,
 1477|      4|                        })
 1478|       |                    }
 1479|       |                    Function::LangMatches => {
 1480|      0|                        let language_tag = self.expression_evaluator(
 1481|      0|                            &parameters[0],
 1482|      0|                            encoded_variables,
 1483|      0|                            stat_children,
 1484|      0|                        );
 1485|      0|                        let language_range = self.expression_evaluator(
 1486|      0|                            &parameters[1],
 1487|      0|                            encoded_variables,
 1488|      0|                            stat_children,
 1489|      0|                        );
 1490|      0|                        let dataset = Rc::clone(&self.dataset);
 1491|      0|                        Rc::new(move |tuple| {
 1492|       |                            let mut language_tag =
 1493|       |                                to_simple_string(&dataset, &language_tag(tuple)?)?;
 1494|       |                            language_tag.make_ascii_lowercase();
 1495|       |                            let mut language_range =
 1496|       |                                to_simple_string(&dataset, &language_range(tuple)?)?;
 1497|       |                            language_range.make_ascii_lowercase();
 1498|       |                            Some(
 1499|       |                                if &*language_range == "*" {
 1500|       |                                    !language_tag.is_empty()
 1501|       |                                } else {
 1502|       |                                    !ZipLongest::new(
 1503|       |                                        language_range.split('-'),
 1504|       |                                        language_tag.split('-'),
 1505|       |                                    )
 1506|       |                                    .any(|parts| match parts {
 1507|       |                                        (Some(range_subtag), Some(language_subtag)) => {
 1508|       |                                            range_subtag != language_subtag
 1509|       |                                        }
 1510|       |                                        (Some(_), None) => true,
 1511|       |                                        (None, _) => false,
 1512|       |                                    })
 1513|       |                                }
 1514|       |                                .into(),
 1515|       |                            )
 1516|      0|                        })
 1517|       |                    }
 1518|       |                    Function::Datatype => {
 1519|      0|                        let e = self.expression_evaluator(
 1520|      0|                            &parameters[0],
 1521|      0|                            encoded_variables,
 1522|      0|                            stat_children,
 1523|      0|                        );
 1524|      0|                        let dataset = Rc::clone(&self.dataset);
 1525|      0|                        Rc::new(move |tuple| datatype(&dataset, &e(tuple)?))
 1526|       |                    }
 1527|       |                    Function::Iri => {
 1528|      0|                        let e = self.expression_evaluator(
 1529|      0|                            &parameters[0],
 1530|      0|                            encoded_variables,
 1531|      0|                            stat_children,
 1532|      0|                        );
 1533|      0|                        let dataset = Rc::clone(&self.dataset);
 1534|      0|                        let base_iri = self.base_iri.clone();
 1535|      0|                        Rc::new(move |tuple| {
 1536|       |                            let e = e(tuple)?;
 1537|       |                            if e.is_named_node() {
 1538|       |                                Some(e)
 1539|       |                            } else {
 1540|       |                                let iri = to_simple_string(&dataset, &e)?;
 1541|       |                                Some(build_named_node(
 1542|       |                                    &dataset,
 1543|       |                                    &if let Some(base_iri) = &base_iri {
 1544|       |                                        base_iri.resolve(&iri)
 1545|       |                                    } else {
 1546|       |                                        Iri::parse(iri)
 1547|       |                                    }
 1548|       |                                    .ok()?
 1549|       |                                    .into_inner(),
 1550|       |                                ))
 1551|       |                            }
 1552|      0|                        })
 1553|       |                    }
 1554|      8|                    Function::BNode => match parameters.first() {
 1555|      8|                        Some(id) => {
 1556|      8|                            let id =
 1557|      8|                                self.expression_evaluator(id, encoded_variables, stat_children);
 1558|      8|                            let dataset = Rc::clone(&self.dataset);
 1559|      8|                            Rc::new(move |tuple| {
 1560|       |                                Some(
 1561|       |                                    dataset.encode_term(
 1562|       |                                        BlankNode::new(to_simple_string(&dataset, &id(tuple)?)?)
 1563|       |                                            .ok()?
 1564|       |                                            .as_ref(),
 1565|       |                                    ),
 1566|       |                                )
 1567|      8|                            })
 1568|       |                        }
 1569|      0|                        None => Rc::new(|_| {
 1570|       |                            Some(EncodedTerm::NumericalBlankNode {
 1571|       |                                id: random::<u128>(),
 1572|       |                            })
 1573|      0|                        }),
 1574|       |                    },
 1575|      0|                    Function::Rand => Rc::new(|_| Some(random::<f64>().into())),
 1576|       |                    Function::Abs => {
 1577|      0|                        let e = self.expression_evaluator(
 1578|      0|                            &parameters[0],
 1579|      0|                            encoded_variables,
 1580|      0|                            stat_children,
 1581|      0|                        );
 1582|      0|                        Rc::new(move |tuple| match e(tuple)? {
 1583|       |                            EncodedTerm::IntegerLiteral(value) => Some(value.checked_abs()?.into()),
 1584|       |                            EncodedTerm::DecimalLiteral(value) => Some(value.checked_abs()?.into()),
 1585|       |                            EncodedTerm::FloatLiteral(value) => Some(value.abs().into()),
 1586|       |                            EncodedTerm::DoubleLiteral(value) => Some(value.abs().into()),
 1587|       |                            _ => None,
 1588|      0|                        })
 1589|       |                    }
 1590|       |                    Function::Ceil => {
 1591|      0|                        let e = self.expression_evaluator(
 1592|      0|                            &parameters[0],
 1593|      0|                            encoded_variables,
 1594|      0|                            stat_children,
 1595|      0|                        );
 1596|      0|                        Rc::new(move |tuple| match e(tuple)? {
 1597|       |                            EncodedTerm::IntegerLiteral(value) => Some(value.into()),
 1598|       |                            EncodedTerm::DecimalLiteral(value) => {
 1599|       |                                Some(value.checked_ceil()?.into())
 1600|       |                            }
 1601|       |                            EncodedTerm::FloatLiteral(value) => Some(value.ceil().into()),
 1602|       |                            EncodedTerm::DoubleLiteral(value) => Some(value.ceil().into()),
 1603|       |                            _ => None,
 1604|      0|                        })
 1605|       |                    }
 1606|       |                    Function::Floor => {
 1607|      0|                        let e = self.expression_evaluator(
 1608|      0|                            &parameters[0],
 1609|      0|                            encoded_variables,
 1610|      0|                            stat_children,
 1611|      0|                        );
 1612|      0|                        Rc::new(move |tuple| match e(tuple)? {
 1613|       |                            EncodedTerm::IntegerLiteral(value) => Some(value.into()),
 1614|       |                            EncodedTerm::DecimalLiteral(value) => {
 1615|       |                                Some(value.checked_floor()?.into())
 1616|       |                            }
 1617|       |                            EncodedTerm::FloatLiteral(value) => Some(value.floor().into()),
 1618|       |                            EncodedTerm::DoubleLiteral(value) => Some(value.floor().into()),
 1619|       |                            _ => None,
 1620|      0|                        })
 1621|       |                    }
 1622|       |                    Function::Round => {
 1623|      0|                        let e = self.expression_evaluator(
 1624|      0|                            &parameters[0],
 1625|      0|                            encoded_variables,
 1626|      0|                            stat_children,
 1627|      0|                        );
 1628|      0|                        Rc::new(move |tuple| match e(tuple)? {
 1629|       |                            EncodedTerm::IntegerLiteral(value) => Some(value.into()),
 1630|       |                            EncodedTerm::DecimalLiteral(value) => {
 1631|       |                                Some(value.checked_round()?.into())
 1632|       |                            }
 1633|       |                            EncodedTerm::FloatLiteral(value) => Some(value.round().into()),
 1634|       |                            EncodedTerm::DoubleLiteral(value) => Some(value.round().into()),
 1635|       |                            _ => None,
 1636|      0|                        })
 1637|       |                    }
 1638|       |                    Function::Concat => {
 1639|      0|                        let l: Vec<_> = parameters
 1640|      0|                            .iter()
 1641|      0|                            .map(|e| self.expression_evaluator(e, encoded_variables, stat_children))
 1642|      0|                            .collect();
 1643|      0|                        let dataset = Rc::clone(&self.dataset);
 1644|      0|                        Rc::new(move |tuple| {
 1645|       |                            let mut result = String::default();
 1646|       |                            let mut language = None;
 1647|       |                            for e in &l {
 1648|       |                                let (value, e_language) =
 1649|       |                                    to_string_and_language(&dataset, &e(tuple)?)?;
 1650|       |                                if let Some(lang) = language {
 1651|       |                                    if lang != e_language {
 1652|       |                                        language = Some(None)
 1653|       |                                    }
 1654|       |                                } else {
 1655|       |                                    language = Some(e_language)
 1656|       |                                }
 1657|       |                                result += &value
 1658|       |                            }
 1659|       |                            Some(build_plain_literal(
 1660|       |                                &dataset,
 1661|       |                                &result,
 1662|       |                                language.and_then(|v| v),
 1663|       |                            ))
 1664|      0|                        })
 1665|       |                    }
 1666|       |                    Function::SubStr => {
 1667|      0|                        let source = self.expression_evaluator(
 1668|      0|                            &parameters[0],
 1669|      0|                            encoded_variables,
 1670|      0|                            stat_children,
 1671|      0|                        );
 1672|      0|                        let starting_loc = self.expression_evaluator(
 1673|      0|                            &parameters[1],
 1674|      0|                            encoded_variables,
 1675|      0|                            stat_children,
 1676|      0|                        );
 1677|      0|                        let length = parameters.get(2).map(|l| {
 1678|       |                            self.expression_evaluator(l, encoded_variables, stat_children)
 1679|      0|                        });
 1680|      0|                        let dataset = Rc::clone(&self.dataset);
 1681|      0|                        Rc::new(move |tuple| {
 1682|       |                            let (source, language) =
 1683|       |                                to_string_and_language(&dataset, &source(tuple)?)?;
 1684|       |
 1685|       |                            let starting_location: usize =
 1686|       |                                if let EncodedTerm::IntegerLiteral(v) = starting_loc(tuple)? {
 1687|       |                                    i64::from(v).try_into().ok()?
 1688|       |                                } else {
 1689|       |                                    return None;
 1690|       |                                };
 1691|       |                            let length: Option<usize> = if let Some(length) = &length {
 1692|       |                                if let EncodedTerm::IntegerLiteral(v) = length(tuple)? {
 1693|       |                                    Some(i64::from(v).try_into().ok()?)
 1694|       |                                } else {
 1695|       |                                    return None;
 1696|       |                                }
 1697|       |                            } else {
 1698|       |                                None
 1699|       |                            };
 1700|       |
 1701|       |                            // We want to slice on char indices, not byte indices
 1702|       |                            let mut start_iter = source
 1703|       |                                .char_indices()
 1704|       |                                .skip(starting_location.checked_sub(1)?)
 1705|       |                                .peekable();
 1706|       |                            let result =
 1707|       |                                if let Some((start_position, _)) = start_iter.peek().copied() {
 1708|       |                                    if let Some(length) = length {
 1709|       |                                        let mut end_iter = start_iter.skip(length).peekable();
 1710|       |                                        if let Some((end_position, _)) = end_iter.peek() {
 1711|       |                                            &source[start_position..*end_position]
 1712|       |                                        } else {
 1713|       |                                            &source[start_position..]
 1714|       |                                        }
 1715|       |                                    } else {
 1716|       |                                        &source[start_position..]
 1717|       |                                    }
 1718|       |                                } else {
 1719|       |                                    ""
 1720|       |                                };
 1721|       |                            Some(build_plain_literal(&dataset, result, language))
 1722|      0|                        })
 1723|       |                    }
 1724|       |                    Function::StrLen => {
 1725|      0|                        let arg = self.expression_evaluator(
 1726|      0|                            &parameters[0],
 1727|      0|                            encoded_variables,
 1728|      0|                            stat_children,
 1729|      0|                        );
 1730|      0|                        let dataset = Rc::clone(&self.dataset);
 1731|      0|                        Rc::new(move |tuple| {
 1732|       |                            Some(
 1733|       |                                i64::try_from(to_string(&dataset, &arg(tuple)?)?.chars().count())
 1734|       |                                    .ok()?
 1735|       |                                    .into(),
 1736|       |                            )
 1737|      0|                        })
 1738|       |                    }
 1739|       |                    Function::Replace => {
 1740|      0|                        let arg = self.expression_evaluator(
 1741|      0|                            &parameters[0],
 1742|      0|                            encoded_variables,
 1743|      0|                            stat_children,
 1744|      0|                        );
 1745|      0|                        let replacement = self.expression_evaluator(
 1746|      0|                            &parameters[2],
 1747|      0|                            encoded_variables,
 1748|      0|                            stat_children,
 1749|      0|                        );
 1750|      0|                        let dataset = Rc::clone(&self.dataset);
 1751|      0|                        if let Some(regex) =
 1752|      0|                            compile_static_pattern_if_exists(&parameters[1], parameters.get(3))
 1753|       |                        {
 1754|      0|                            Rc::new(move |tuple| {
 1755|       |                                let (text, language) =
 1756|       |                                    to_string_and_language(&dataset, &arg(tuple)?)?;
 1757|       |                                let replacement = to_simple_string(&dataset, &replacement(tuple)?)?;
 1758|       |                                Some(build_plain_literal(
 1759|       |                                    &dataset,
 1760|       |                                    &regex.replace_all(&text, replacement.as_str()),
 1761|       |                                    language,
 1762|       |                                ))
 1763|      0|                            })
 1764|       |                        } else {
 1765|      0|                            let pattern = self.expression_evaluator(
 1766|      0|                                &parameters[1],
 1767|      0|                                encoded_variables,
 1768|      0|                                stat_children,
 1769|      0|                            );
 1770|      0|                            let flags = parameters.get(3).map(|flags| {
 1771|       |                                self.expression_evaluator(flags, encoded_variables, stat_children)
 1772|      0|                            });
 1773|      0|                            Rc::new(move |tuple| {
 1774|       |                                let pattern = to_simple_string(&dataset, &pattern(tuple)?)?;
 1775|       |                                let options = if let Some(flags) = &flags {
 1776|       |                                    Some(to_simple_string(&dataset, &flags(tuple)?)?)
 1777|       |                                } else {
 1778|       |                                    None
 1779|       |                                };
 1780|       |                                let regex = compile_pattern(&pattern, options.as_deref())?;
 1781|       |                                let (text, language) =
 1782|       |                                    to_string_and_language(&dataset, &arg(tuple)?)?;
 1783|       |                                let replacement = to_simple_string(&dataset, &replacement(tuple)?)?;
 1784|       |                                Some(build_plain_literal(
 1785|       |                                    &dataset,
 1786|       |                                    &regex.replace_all(&text, replacement.as_str()),
 1787|       |                                    language,
 1788|       |                                ))
 1789|      0|                            })
 1790|       |                        }
 1791|       |                    }
 1792|       |                    Function::UCase => {
 1793|      0|                        let e = self.expression_evaluator(
 1794|      0|                            &parameters[0],
 1795|      0|                            encoded_variables,
 1796|      0|                            stat_children,
 1797|      0|                        );
 1798|      0|                        let dataset = Rc::clone(&self.dataset);
 1799|      0|                        Rc::new(move |tuple| {
 1800|       |                            let (value, language) = to_string_and_language(&dataset, &e(tuple)?)?;
 1801|       |                            Some(build_plain_literal(
 1802|       |                                &dataset,
 1803|       |                                &value.to_uppercase(),
 1804|       |                                language,
 1805|       |                            ))
 1806|      0|                        })
 1807|       |                    }
 1808|       |                    Function::LCase => {
 1809|      0|                        let e = self.expression_evaluator(
 1810|      0|                            &parameters[0],
 1811|      0|                            encoded_variables,
 1812|      0|                            stat_children,
 1813|      0|                        );
 1814|      0|                        let dataset = Rc::clone(&self.dataset);
 1815|      0|                        Rc::new(move |tuple| {
 1816|       |                            let (value, language) = to_string_and_language(&dataset, &e(tuple)?)?;
 1817|       |                            Some(build_plain_literal(
 1818|       |                                &dataset,
 1819|       |                                &value.to_lowercase(),
 1820|       |                                language,
 1821|       |                            ))
 1822|      0|                        })
 1823|       |                    }
 1824|       |                    Function::StrStarts => {
 1825|      0|                        let arg1 = self.expression_evaluator(
 1826|      0|                            &parameters[0],
 1827|      0|                            encoded_variables,
 1828|      0|                            stat_children,
 1829|      0|                        );
 1830|      0|                        let arg2 = self.expression_evaluator(
 1831|      0|                            &parameters[1],
 1832|      0|                            encoded_variables,
 1833|      0|                            stat_children,
 1834|      0|                        );
 1835|      0|                        let dataset = Rc::clone(&self.dataset);
 1836|      0|                        Rc::new(move |tuple| {
 1837|       |                            let (arg1, arg2, _) = to_argument_compatible_strings(
 1838|       |                                &dataset,
 1839|       |                                &arg1(tuple)?,
 1840|       |                                &arg2(tuple)?,
 1841|       |                            )?;
 1842|       |                            Some(arg1.starts_with(arg2.as_str()).into())
 1843|      0|                        })
 1844|       |                    }
 1845|       |                    Function::EncodeForUri => {
 1846|      0|                        let ltrl = self.expression_evaluator(
 1847|      0|                            &parameters[0],
 1848|      0|                            encoded_variables,
 1849|      0|                            stat_children,
 1850|      0|                        );
 1851|      0|                        let dataset = Rc::clone(&self.dataset);
 1852|      0|                        Rc::new(move |tuple| {
 1853|       |                            let ltlr = to_string(&dataset, &ltrl(tuple)?)?;
 1854|       |                            let mut result = Vec::with_capacity(ltlr.len());
 1855|       |                            for c in ltlr.bytes() {
 1856|       |                                match c {
 1857|       |                                    b'A'..=b'Z'
 1858|       |                                    | b'a'..=b'z'
 1859|       |                                    | b'0'..=b'9'
 1860|       |                                    | b'-'
 1861|       |                                    | b'_'
 1862|       |                                    | b'.'
 1863|       |                                    | b'~' => result.push(c),
 1864|       |                                    _ => {
 1865|       |                                        result.push(b'%');
 1866|       |                                        let high = c / 16;
 1867|       |                                        let low = c % 16;
 1868|       |                                        result.push(if high < 10 {
 1869|       |                                            b'0' + high
 1870|       |                                        } else {
 1871|       |                                            b'A' + (high - 10)
 1872|       |                                        });
 1873|       |                                        result.push(if low < 10 {
 1874|       |                                            b'0' + low
 1875|       |                                        } else {
 1876|       |                                            b'A' + (low - 10)
 1877|       |                                        });
 1878|       |                                    }
 1879|       |                                }
 1880|       |                            }
 1881|       |                            Some(build_string_literal(
 1882|       |                                &dataset,
 1883|       |                                str::from_utf8(&result).ok()?,
 1884|       |                            ))
 1885|      0|                        })
 1886|       |                    }
 1887|       |                    Function::StrEnds => {
 1888|      0|                        let arg1 = self.expression_evaluator(
 1889|      0|                            &parameters[0],
 1890|      0|                            encoded_variables,
 1891|      0|                            stat_children,
 1892|      0|                        );
 1893|      0|                        let arg2 = self.expression_evaluator(
 1894|      0|                            &parameters[1],
 1895|      0|                            encoded_variables,
 1896|      0|                            stat_children,
 1897|      0|                        );
 1898|      0|                        let dataset = Rc::clone(&self.dataset);
 1899|      0|                        Rc::new(move |tuple| {
 1900|       |                            let (arg1, arg2, _) = to_argument_compatible_strings(
 1901|       |                                &dataset,
 1902|       |                                &arg1(tuple)?,
 1903|       |                                &arg2(tuple)?,
 1904|       |                            )?;
 1905|       |                            Some(arg1.ends_with(arg2.as_str()).into())
 1906|      0|                        })
 1907|       |                    }
 1908|       |                    Function::Contains => {
 1909|      0|                        let arg1 = self.expression_evaluator(
 1910|      0|                            &parameters[0],
 1911|      0|                            encoded_variables,
 1912|      0|                            stat_children,
 1913|      0|                        );
 1914|      0|                        let arg2 = self.expression_evaluator(
 1915|      0|                            &parameters[1],
 1916|      0|                            encoded_variables,
 1917|      0|                            stat_children,
 1918|      0|                        );
 1919|      0|                        let dataset = Rc::clone(&self.dataset);
 1920|      0|                        Rc::new(move |tuple| {
 1921|       |                            let (arg1, arg2, _) = to_argument_compatible_strings(
 1922|       |                                &dataset,
 1923|       |                                &arg1(tuple)?,
 1924|       |                                &arg2(tuple)?,
 1925|       |                            )?;
 1926|       |                            Some(arg1.contains(arg2.as_str()).into())
 1927|      0|                        })
 1928|       |                    }
 1929|       |                    Function::StrBefore => {
 1930|      0|                        let arg1 = self.expression_evaluator(
 1931|      0|                            &parameters[0],
 1932|      0|                            encoded_variables,
 1933|      0|                            stat_children,
 1934|      0|                        );
 1935|      0|                        let arg2 = self.expression_evaluator(
 1936|      0|                            &parameters[1],
 1937|      0|                            encoded_variables,
 1938|      0|                            stat_children,
 1939|      0|                        );
 1940|      0|                        let dataset = Rc::clone(&self.dataset);
 1941|      0|                        Rc::new(move |tuple| {
 1942|       |                            let (arg1, arg2, language) = to_argument_compatible_strings(
 1943|       |                                &dataset,
 1944|       |                                &arg1(tuple)?,
 1945|       |                                &arg2(tuple)?,
 1946|       |                            )?;
 1947|       |                            Some(if let Some(position) = arg1.find(arg2.as_str()) {
 1948|       |                                build_plain_literal(&dataset, &arg1[..position], language)
 1949|       |                            } else {
 1950|       |                                build_string_literal(&dataset, "")
 1951|       |                            })
 1952|      0|                        })
 1953|       |                    }
 1954|       |                    Function::StrAfter => {
 1955|      0|                        let arg1 = self.expression_evaluator(
 1956|      0|                            &parameters[0],
 1957|      0|                            encoded_variables,
 1958|      0|                            stat_children,
 1959|      0|                        );
 1960|      0|                        let arg2 = self.expression_evaluator(
 1961|      0|                            &parameters[1],
 1962|      0|                            encoded_variables,
 1963|      0|                            stat_children,
 1964|      0|                        );
 1965|      0|                        let dataset = Rc::clone(&self.dataset);
 1966|      0|                        Rc::new(move |tuple| {
 1967|       |                            let (arg1, arg2, language) = to_argument_compatible_strings(
 1968|       |                                &dataset,
 1969|       |                                &arg1(tuple)?,
 1970|       |                                &arg2(tuple)?,
 1971|       |                            )?;
 1972|       |                            Some(if let Some(position) = arg1.find(arg2.as_str()) {
 1973|       |                                build_plain_literal(
 1974|       |                                    &dataset,
 1975|       |                                    &arg1[position + arg2.len()..],
 1976|       |                                    language,
 1977|       |                                )
 1978|       |                            } else {
 1979|       |                                build_string_literal(&dataset, "")
 1980|       |                            })
 1981|      0|                        })
 1982|       |                    }
 1983|       |                    Function::Year => {
 1984|      0|                        let e = self.expression_evaluator(
 1985|      0|                            &parameters[0],
 1986|      0|                            encoded_variables,
 1987|      0|                            stat_children,
 1988|      0|                        );
 1989|      0|                        Rc::new(move |tuple| match e(tuple)? {
 1990|       |                            EncodedTerm::DateTimeLiteral(date_time) => {
 1991|       |                                Some(date_time.year().into())
 1992|       |                            }
 1993|       |                            EncodedTerm::DateLiteral(date) => Some(date.year().into()),
 1994|       |                            EncodedTerm::GYearMonthLiteral(year_month) => {
 1995|       |                                Some(year_month.year().into())
 1996|       |                            }
 1997|       |                            EncodedTerm::GYearLiteral(year) => Some(year.year().into()),
 1998|       |                            _ => None,
 1999|      0|                        })
 2000|       |                    }
 2001|       |                    Function::Month => {
 2002|      0|                        let e = self.expression_evaluator(
 2003|      0|                            &parameters[0],
 2004|      0|                            encoded_variables,
 2005|      0|                            stat_children,
 2006|      0|                        );
 2007|      0|                        Rc::new(move |tuple| match e(tuple)? {
 2008|       |                            EncodedTerm::DateTimeLiteral(date_time) => {
 2009|       |                                Some(date_time.month().into())
 2010|       |                            }
 2011|       |                            EncodedTerm::DateLiteral(date) => Some(date.month().into()),
 2012|       |                            EncodedTerm::GYearMonthLiteral(year_month) => {
 2013|       |                                Some(year_month.month().into())
 2014|       |                            }
 2015|       |                            EncodedTerm::GMonthDayLiteral(month_day) => {
 2016|       |                                Some(month_day.month().into())
 2017|       |                            }
 2018|       |                            EncodedTerm::GMonthLiteral(month) => Some(month.month().into()),
 2019|       |                            _ => None,
 2020|      0|                        })
 2021|       |                    }
 2022|       |                    Function::Day => {
 2023|      0|                        let e = self.expression_evaluator(
 2024|      0|                            &parameters[0],
 2025|      0|                            encoded_variables,
 2026|      0|                            stat_children,
 2027|      0|                        );
 2028|      0|                        Rc::new(move |tuple| match e(tuple)? {
 2029|       |                            EncodedTerm::DateTimeLiteral(date_time) => Some(date_time.day().into()),
 2030|       |                            EncodedTerm::DateLiteral(date) => Some(date.day().into()),
 2031|       |                            EncodedTerm::GMonthDayLiteral(month_day) => {
 2032|       |                                Some(month_day.day().into())
 2033|       |                            }
 2034|       |                            EncodedTerm::GDayLiteral(day) => Some(day.day().into()),
 2035|       |                            _ => None,
 2036|      0|                        })
 2037|       |                    }
 2038|       |                    Function::Hours => {
 2039|      0|                        let e = self.expression_evaluator(
 2040|      0|                            &parameters[0],
 2041|      0|                            encoded_variables,
 2042|      0|                            stat_children,
 2043|      0|                        );
 2044|      0|                        Rc::new(move |tuple| match e(tuple)? {
 2045|       |                            EncodedTerm::DateTimeLiteral(date_time) => {
 2046|       |                                Some(date_time.hour().into())
 2047|       |                            }
 2048|       |                            EncodedTerm::TimeLiteral(time) => Some(time.hour().into()),
 2049|       |                            _ => None,
 2050|      0|                        })
 2051|       |                    }
 2052|       |                    Function::Minutes => {
 2053|      0|                        let e = self.expression_evaluator(
 2054|      0|                            &parameters[0],
 2055|      0|                            encoded_variables,
 2056|      0|                            stat_children,
 2057|      0|                        );
 2058|      0|                        Rc::new(move |tuple| match e(tuple)? {
 2059|       |                            EncodedTerm::DateTimeLiteral(date_time) => {
 2060|       |                                Some(date_time.minute().into())
 2061|       |                            }
 2062|       |                            EncodedTerm::TimeLiteral(time) => Some(time.minute().into()),
 2063|       |                            _ => None,
 2064|      0|                        })
 2065|       |                    }
 2066|       |                    Function::Seconds => {
 2067|      0|                        let e = self.expression_evaluator(
 2068|      0|                            &parameters[0],
 2069|      0|                            encoded_variables,
 2070|      0|                            stat_children,
 2071|      0|                        );
 2072|      0|                        Rc::new(move |tuple| match e(tuple)? {
 2073|       |                            EncodedTerm::DateTimeLiteral(date_time) => {
 2074|       |                                Some(date_time.second().into())
 2075|       |                            }
 2076|       |                            EncodedTerm::TimeLiteral(time) => Some(time.second().into()),
 2077|       |                            _ => None,
 2078|      0|                        })
 2079|       |                    }
 2080|       |                    Function::Timezone => {
 2081|      0|                        let e = self.expression_evaluator(
 2082|      0|                            &parameters[0],
 2083|      0|                            encoded_variables,
 2084|      0|                            stat_children,
 2085|      0|                        );
 2086|      0|                        Rc::new(move |tuple| {
 2087|       |                            Some(
 2088|       |                                match e(tuple)? {
 2089|       |                                    EncodedTerm::DateTimeLiteral(date_time) => date_time.timezone(),
 2090|       |                                    EncodedTerm::TimeLiteral(time) => time.timezone(),
 2091|       |                                    EncodedTerm::DateLiteral(date) => date.timezone(),
 2092|       |                                    EncodedTerm::GYearMonthLiteral(year_month) => {
 2093|       |                                        year_month.timezone()
 2094|       |                                    }
 2095|       |                                    EncodedTerm::GYearLiteral(year) => year.timezone(),
 2096|       |                                    EncodedTerm::GMonthDayLiteral(month_day) => {
 2097|       |                                        month_day.timezone()
 2098|       |                                    }
 2099|       |                                    EncodedTerm::GDayLiteral(day) => day.timezone(),
 2100|       |                                    EncodedTerm::GMonthLiteral(month) => month.timezone(),
 2101|       |                                    _ => None,
 2102|       |                                }?
 2103|       |                                .into(),
 2104|       |                            )
 2105|      0|                        })
 2106|       |                    }
 2107|       |                    Function::Tz => {
 2108|      0|                        let e = self.expression_evaluator(
 2109|      0|                            &parameters[0],
 2110|      0|                            encoded_variables,
 2111|      0|                            stat_children,
 2112|      0|                        );
 2113|      0|                        let dataset = Rc::clone(&self.dataset);
 2114|      0|                        Rc::new(move |tuple| {
 2115|       |                            let timezone_offset = match e(tuple)? {
 2116|       |                                EncodedTerm::DateTimeLiteral(date_time) => {
 2117|       |                                    date_time.timezone_offset()
 2118|       |                                }
 2119|       |                                EncodedTerm::TimeLiteral(time) => time.timezone_offset(),
 2120|       |                                EncodedTerm::DateLiteral(date) => date.timezone_offset(),
 2121|       |                                EncodedTerm::GYearMonthLiteral(year_month) => {
 2122|       |                                    year_month.timezone_offset()
 2123|       |                                }
 2124|       |                                EncodedTerm::GYearLiteral(year) => year.timezone_offset(),
 2125|       |                                EncodedTerm::GMonthDayLiteral(month_day) => {
 2126|       |                                    month_day.timezone_offset()
 2127|       |                                }
 2128|       |                                EncodedTerm::GDayLiteral(day) => day.timezone_offset(),
 2129|       |                                EncodedTerm::GMonthLiteral(month) => month.timezone_offset(),
 2130|       |                                _ => return None,
 2131|       |                            };
 2132|       |                            Some(match timezone_offset {
 2133|       |                                Some(timezone_offset) => {
 2134|       |                                    build_string_literal(&dataset, &timezone_offset.to_string())
 2135|       |                                }
 2136|       |                                None => build_string_literal(&dataset, ""),
 2137|       |                            })
 2138|      0|                        })
 2139|       |                    }
 2140|       |                    Function::Adjust => {
 2141|      0|                        let dt = self.expression_evaluator(
 2142|      0|                            &parameters[0],
 2143|      0|                            encoded_variables,
 2144|      0|                            stat_children,
 2145|      0|                        );
 2146|      0|                        let tz = self.expression_evaluator(
 2147|      0|                            &parameters[1],
 2148|      0|                            encoded_variables,
 2149|      0|                            stat_children,
 2150|      0|                        );
 2151|      0|                        Rc::new(move |tuple| {
 2152|       |                            let timezone_offset = Some(
 2153|       |                                match tz(tuple)? {
 2154|       |                                    EncodedTerm::DayTimeDurationLiteral(tz) => {
 2155|       |                                        TimezoneOffset::try_from(tz)
 2156|       |                                    }
 2157|       |                                    EncodedTerm::DurationLiteral(tz) => {
 2158|       |                                        TimezoneOffset::try_from(tz)
 2159|       |                                    }
 2160|       |                                    _ => return None,
 2161|       |                                }
 2162|       |                                .ok()?,
 2163|       |                            );
 2164|       |                            Some(match dt(tuple)? {
 2165|       |                                EncodedTerm::DateTimeLiteral(date_time) => {
 2166|       |                                    date_time.adjust(timezone_offset)?.into()
 2167|       |                                }
 2168|       |                                EncodedTerm::TimeLiteral(time) => {
 2169|       |                                    time.adjust(timezone_offset)?.into()
 2170|       |                                }
 2171|       |                                EncodedTerm::DateLiteral(date) => {
 2172|       |                                    date.adjust(timezone_offset)?.into()
 2173|       |                                }
 2174|       |                                EncodedTerm::GYearMonthLiteral(year_month) => {
 2175|       |                                    year_month.adjust(timezone_offset)?.into()
 2176|       |                                }
 2177|       |                                EncodedTerm::GYearLiteral(year) => {
 2178|       |                                    year.adjust(timezone_offset)?.into()
 2179|       |                                }
 2180|       |                                EncodedTerm::GMonthDayLiteral(month_day) => {
 2181|       |                                    month_day.adjust(timezone_offset)?.into()
 2182|       |                                }
 2183|       |                                EncodedTerm::GDayLiteral(day) => {
 2184|       |                                    day.adjust(timezone_offset)?.into()
 2185|       |                                }
 2186|       |                                EncodedTerm::GMonthLiteral(month) => {
 2187|       |                                    month.adjust(timezone_offset)?.into()
 2188|       |                                }
 2189|       |                                _ => return None,
 2190|       |                            })
 2191|      0|                        })
 2192|       |                    }
 2193|       |                    Function::Now => {
 2194|      0|                        let now = self.now;
 2195|      0|                        Rc::new(move |_| Some(now.into()))
 2196|       |                    }
 2197|       |                    Function::Uuid => {
 2198|      0|                        let dataset = Rc::clone(&self.dataset);
 2199|      0|                        Rc::new(move |_| {
 2200|       |                            let mut buffer = String::with_capacity(44);
 2201|       |                            buffer.push_str("urn:uuid:");
 2202|       |                            generate_uuid(&mut buffer);
 2203|       |                            Some(build_named_node(&dataset, &buffer))
 2204|      0|                        })
 2205|       |                    }
 2206|       |                    Function::StrUuid => {
 2207|      0|                        let dataset = Rc::clone(&self.dataset);
 2208|      0|                        Rc::new(move |_| {
 2209|       |                            let mut buffer = String::with_capacity(36);
 2210|       |                            generate_uuid(&mut buffer);
 2211|       |                            Some(build_string_literal(&dataset, &buffer))
 2212|      0|                        })
 2213|       |                    }
 2214|      0|                    Function::Md5 => self.hash::<Md5>(parameters, encoded_variables, stat_children),
 2215|       |                    Function::Sha1 => {
 2216|      0|                        self.hash::<Sha1>(parameters, encoded_variables, stat_children)
 2217|       |                    }
 2218|       |                    Function::Sha256 => {
 2219|      0|                        self.hash::<Sha256>(parameters, encoded_variables, stat_children)
 2220|       |                    }
 2221|       |                    Function::Sha384 => {
 2222|      0|                        self.hash::<Sha384>(parameters, encoded_variables, stat_children)
 2223|       |                    }
 2224|       |                    Function::Sha512 => {
 2225|      0|                        self.hash::<Sha512>(parameters, encoded_variables, stat_children)
 2226|       |                    }
 2227|       |                    Function::StrLang => {
 2228|      0|                        let lexical_form = self.expression_evaluator(
 2229|      0|                            &parameters[0],
 2230|      0|                            encoded_variables,
 2231|      0|                            stat_children,
 2232|      0|                        );
 2233|      0|                        let lang_tag = self.expression_evaluator(
 2234|      0|                            &parameters[1],
 2235|      0|                            encoded_variables,
 2236|      0|                            stat_children,
 2237|      0|                        );
 2238|      0|                        let dataset = Rc::clone(&self.dataset);
 2239|      0|                        Rc::new(move |tuple| {
 2240|       |                            Some(build_lang_string_literal_from_id(
 2241|       |                                to_simple_string_id(&lexical_form(tuple)?)?,
 2242|       |                                build_language_id(&dataset, &lang_tag(tuple)?)?,
 2243|       |                            ))
 2244|      0|                        })
 2245|       |                    }
 2246|       |                    Function::StrDt => {
 2247|      2|                        let lexical_form = self.expression_evaluator(
 2248|      2|                            &parameters[0],
 2249|      2|                            encoded_variables,
 2250|      2|                            stat_children,
 2251|      2|                        );
 2252|      2|                        let datatype = self.expression_evaluator(
 2253|      2|                            &parameters[1],
 2254|      2|                            encoded_variables,
 2255|      2|                            stat_children,
 2256|      2|                        );
 2257|      2|                        let dataset = Rc::clone(&self.dataset);
 2258|      2|                        Rc::new(move |tuple| {
 2259|       |                            let value = to_simple_string(&dataset, &lexical_form(tuple)?)?;
 2260|       |                            let datatype =
 2261|       |                                if let EncodedTerm::NamedNode { iri_id } = datatype(tuple)? {
 2262|       |                                    dataset.get_str(&iri_id).ok()?
 2263|       |                                } else {
 2264|       |                                    None
 2265|       |                                }?;
 2266|       |                            Some(dataset.encode_term(LiteralRef::new_typed_literal(
 2267|       |                                &value,
 2268|       |                                NamedNodeRef::new_unchecked(&datatype),
 2269|       |                            )))
 2270|      2|                        })
 2271|       |                    }
 2272|       |                    Function::IsIri => {
 2273|      2|                        let e = self.expression_evaluator(
 2274|      2|                            &parameters[0],
 2275|      2|                            encoded_variables,
 2276|      2|                            stat_children,
 2277|      2|                        );
 2278|      2|                        Rc::new(move |tuple| Some(e(tuple)?.is_named_node().into()))
 2279|       |                    }
 2280|       |                    Function::IsBlank => {
 2281|      8|                        let e = self.expression_evaluator(
 2282|      8|                            &parameters[0],
 2283|      8|                            encoded_variables,
 2284|      8|                            stat_children,
 2285|      8|                        );
 2286|      8|                        Rc::new(move |tuple| Some(e(tuple)?.is_blank_node().into()))
 2287|       |                    }
 2288|       |                    Function::IsLiteral => {
 2289|      0|                        let e = self.expression_evaluator(
 2290|      0|                            &parameters[0],
 2291|      0|                            encoded_variables,
 2292|      0|                            stat_children,
 2293|      0|                        );
 2294|      0|                        Rc::new(move |tuple| Some(e(tuple)?.is_literal().into()))
 2295|       |                    }
 2296|       |                    Function::IsNumeric => {
 2297|      4|                        let e = self.expression_evaluator(
 2298|      4|                            &parameters[0],
 2299|      4|                            encoded_variables,
 2300|      4|                            stat_children,
 2301|      4|                        );
 2302|      4|                        Rc::new(move |tuple| {
 2303|       |                            Some(
 2304|       |                                matches!(
 2305|       |                                    e(tuple)?,
 2306|       |                                    EncodedTerm::FloatLiteral(_)
 2307|       |                                        | EncodedTerm::DoubleLiteral(_)
 2308|       |                                        | EncodedTerm::IntegerLiteral(_)
 2309|       |                                        | EncodedTerm::DecimalLiteral(_)
 2310|       |                                )
 2311|       |                                .into(),
 2312|       |                            )
 2313|      4|                        })
 2314|       |                    }
 2315|       |                    Function::Regex => {
 2316|      0|                        let text = self.expression_evaluator(
 2317|      0|                            &parameters[0],
 2318|      0|                            encoded_variables,
 2319|      0|                            stat_children,
 2320|      0|                        );
 2321|      0|                        let dataset = Rc::clone(&self.dataset);
 2322|      0|                        if let Some(regex) =
 2323|      0|                            compile_static_pattern_if_exists(&parameters[1], parameters.get(2))
 2324|       |                        {
 2325|      0|                            Rc::new(move |tuple| {
 2326|       |                                let text = to_string(&dataset, &text(tuple)?)?;
 2327|       |                                Some(regex.is_match(&text).into())
 2328|      0|                            })
 2329|       |                        } else {
 2330|      0|                            let pattern = self.expression_evaluator(
 2331|      0|                                &parameters[0],
 2332|      0|                                encoded_variables,
 2333|      0|                                stat_children,
 2334|      0|                            );
 2335|      0|                            let flags = parameters.get(2).map(|flags| {
 2336|       |                                self.expression_evaluator(flags, encoded_variables, stat_children)
 2337|      0|                            });
 2338|      0|                            Rc::new(move |tuple| {
 2339|       |                                let pattern = to_simple_string(&dataset, &pattern(tuple)?)?;
 2340|       |                                let options = if let Some(flags) = &flags {
 2341|       |                                    Some(to_simple_string(&dataset, &flags(tuple)?)?)
 2342|       |                                } else {
 2343|       |                                    None
 2344|       |                                };
 2345|       |                                let regex = compile_pattern(&pattern, options.as_deref())?;
 2346|       |                                let text = to_string(&dataset, &text(tuple)?)?;
 2347|       |                                Some(regex.is_match(&text).into())
 2348|      0|                            })
 2349|       |                        }
 2350|       |                    }
 2351|       |                    Function::Triple => {
 2352|      0|                        let s = self.expression_evaluator(
 2353|      0|                            &parameters[0],
 2354|      0|                            encoded_variables,
 2355|      0|                            stat_children,
 2356|      0|                        );
 2357|      0|                        let p = self.expression_evaluator(
 2358|      0|                            &parameters[1],
 2359|      0|                            encoded_variables,
 2360|      0|                            stat_children,
 2361|      0|                        );
 2362|      0|                        let o = self.expression_evaluator(
 2363|      0|                            &parameters[2],
 2364|      0|                            encoded_variables,
 2365|      0|                            stat_children,
 2366|      0|                        );
 2367|      0|                        Rc::new(move |tuple| {
 2368|       |                            let s = s(tuple)?;
 2369|       |                            let p = p(tuple)?;
 2370|       |                            let o = o(tuple)?;
 2371|       |                            (!s.is_literal()
 2372|       |                                && !s.is_default_graph()
 2373|       |                                && p.is_named_node()
 2374|       |                                && !o.is_default_graph())
 2375|       |                            .then(|| EncodedTriple::new(s, p, o).into())
 2376|      0|                        })
 2377|       |                    }
 2378|       |                    Function::Subject => {
 2379|      0|                        let e = self.expression_evaluator(
 2380|      0|                            &parameters[0],
 2381|      0|                            encoded_variables,
 2382|      0|                            stat_children,
 2383|      0|                        );
 2384|      0|                        Rc::new(move |tuple| {
 2385|       |                            if let EncodedTerm::Triple(t) = e(tuple)? {
 2386|       |                                Some(t.subject.clone())
 2387|       |                            } else {
 2388|       |                                None
 2389|       |                            }
 2390|      0|                        })
 2391|       |                    }
 2392|       |                    Function::Predicate => {
 2393|      0|                        let e = self.expression_evaluator(
 2394|      0|                            &parameters[0],
 2395|      0|                            encoded_variables,
 2396|      0|                            stat_children,
 2397|      0|                        );
 2398|      0|                        Rc::new(move |tuple| {
 2399|       |                            if let EncodedTerm::Triple(t) = e(tuple)? {
 2400|       |                                Some(t.predicate.clone())
 2401|       |                            } else {
 2402|       |                                None
 2403|       |                            }
 2404|      0|                        })
 2405|       |                    }
 2406|       |                    Function::Object => {
 2407|      0|                        let e = self.expression_evaluator(
 2408|      0|                            &parameters[0],
 2409|      0|                            encoded_variables,
 2410|      0|                            stat_children,
 2411|      0|                        );
 2412|      0|                        Rc::new(move |tuple| {
 2413|       |                            if let EncodedTerm::Triple(t) = e(tuple)? {
 2414|       |                                Some(t.object.clone())
 2415|       |                            } else {
 2416|       |                                None
 2417|       |                            }
 2418|      0|                        })
 2419|       |                    }
 2420|       |                    Function::IsTriple => {
 2421|      0|                        let e = self.expression_evaluator(
 2422|      0|                            &parameters[0],
 2423|      0|                            encoded_variables,
 2424|      0|                            stat_children,
 2425|      0|                        );
 2426|      0|                        Rc::new(move |tuple| Some(e(tuple)?.is_triple().into()))
 2427|       |                    }
 2428|      0|                    Function::Custom(function_name) => {
 2429|      0|                        if let Some(function) = self.custom_functions.get(function_name).cloned() {
 2430|      0|                            let args = parameters
 2431|      0|                                .iter()
 2432|      0|                                .map(|e| {
 2433|       |                                    self.expression_evaluator(e, encoded_variables, stat_children)
 2434|      0|                                })
 2435|      0|                                .collect::<Vec<_>>();
 2436|      0|                            let dataset = Rc::clone(&self.dataset);
 2437|      0|                            return Rc::new(move |tuple| {
 2438|       |                                let args = args
 2439|       |                                    .iter()
 2440|       |                                    .map(|f| dataset.decode_term(&f(tuple)?).ok())
 2441|       |                                    .collect::<Option<Vec<_>>>()?;
 2442|       |                                Some(dataset.encode_term(&function(&args)?))
 2443|      0|                            });
 2444|      0|                        }
 2445|      0|                        match function_name.as_ref() {
 2446|      0|                            xsd::STRING => {
 2447|      0|                                let e = self.expression_evaluator(
 2448|      0|                                    &parameters[0],
 2449|      0|                                    encoded_variables,
 2450|      0|                                    stat_children,
 2451|      0|                                );
 2452|      0|                                let dataset = Rc::clone(&self.dataset);
 2453|      0|                                Rc::new(move |tuple| {
 2454|       |                                    Some(build_string_literal_from_id(to_string_id(
 2455|       |                                        &dataset,
 2456|       |                                        &e(tuple)?,
 2457|       |                                    )?))
 2458|      0|                                })
 2459|       |                            }
 2460|      0|                            xsd::BOOLEAN => {
 2461|      0|                                let e = self.expression_evaluator(
 2462|      0|                                    &parameters[0],
 2463|      0|                                    encoded_variables,
 2464|      0|                                    stat_children,
 2465|      0|                                );
 2466|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2467|       |                                    EncodedTerm::BooleanLiteral(value) => Some(value.into()),
 2468|       |                                    EncodedTerm::FloatLiteral(value) => {
 2469|       |                                        Some(Boolean::from(value).into())
 2470|       |                                    }
 2471|       |                                    EncodedTerm::DoubleLiteral(value) => {
 2472|       |                                        Some(Boolean::from(value).into())
 2473|       |                                    }
 2474|       |                                    EncodedTerm::IntegerLiteral(value) => {
 2475|       |                                        Some(Boolean::from(value).into())
 2476|       |                                    }
 2477|       |                                    EncodedTerm::DecimalLiteral(value) => {
 2478|       |                                        Some(Boolean::from(value).into())
 2479|       |                                    }
 2480|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2481|       |                                        parse_boolean_str(&value)
 2482|       |                                    }
 2483|       |                                    _ => None,
 2484|      0|                                })
 2485|       |                            }
 2486|      0|                            xsd::DOUBLE => {
 2487|      0|                                let e = self.expression_evaluator(
 2488|      0|                                    &parameters[0],
 2489|      0|                                    encoded_variables,
 2490|      0|                                    stat_children,
 2491|      0|                                );
 2492|      0|                                let dataset = Rc::clone(&self.dataset);
 2493|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2494|       |                                    EncodedTerm::FloatLiteral(value) => {
 2495|       |                                        Some(Double::from(value).into())
 2496|       |                                    }
 2497|       |                                    EncodedTerm::DoubleLiteral(value) => Some(value.into()),
 2498|       |                                    EncodedTerm::IntegerLiteral(value) => {
 2499|       |                                        Some(Double::from(value).into())
 2500|       |                                    }
 2501|       |                                    EncodedTerm::DecimalLiteral(value) => {
 2502|       |                                        Some(Double::from(value).into())
 2503|       |                                    }
 2504|       |                                    EncodedTerm::BooleanLiteral(value) => {
 2505|       |                                        Some(Double::from(value).into())
 2506|       |                                    }
 2507|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2508|       |                                        parse_double_str(&value)
 2509|       |                                    }
 2510|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2511|       |                                        parse_double_str(&dataset.get_str(&value_id).ok()??)
 2512|       |                                    }
 2513|       |                                    _ => None,
 2514|      0|                                })
 2515|       |                            }
 2516|      0|                            xsd::FLOAT => {
 2517|      0|                                let e = self.expression_evaluator(
 2518|      0|                                    &parameters[0],
 2519|      0|                                    encoded_variables,
 2520|      0|                                    stat_children,
 2521|      0|                                );
 2522|      0|                                let dataset = Rc::clone(&self.dataset);
 2523|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2524|       |                                    EncodedTerm::FloatLiteral(value) => Some(value.into()),
 2525|       |                                    EncodedTerm::DoubleLiteral(value) => {
 2526|       |                                        Some(Float::from(value).into())
 2527|       |                                    }
 2528|       |                                    EncodedTerm::IntegerLiteral(value) => {
 2529|       |                                        Some(Float::from(value).into())
 2530|       |                                    }
 2531|       |                                    EncodedTerm::DecimalLiteral(value) => {
 2532|       |                                        Some(Float::from(value).into())
 2533|       |                                    }
 2534|       |                                    EncodedTerm::BooleanLiteral(value) => {
 2535|       |                                        Some(Float::from(value).into())
 2536|       |                                    }
 2537|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2538|       |                                        parse_float_str(&value)
 2539|       |                                    }
 2540|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2541|       |                                        parse_float_str(&dataset.get_str(&value_id).ok()??)
 2542|       |                                    }
 2543|       |                                    _ => None,
 2544|      0|                                })
 2545|       |                            }
 2546|      0|                            xsd::INTEGER => {
 2547|      0|                                let e = self.expression_evaluator(
 2548|      0|                                    &parameters[0],
 2549|      0|                                    encoded_variables,
 2550|      0|                                    stat_children,
 2551|      0|                                );
 2552|      0|                                let dataset = Rc::clone(&self.dataset);
 2553|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2554|       |                                    EncodedTerm::FloatLiteral(value) => {
 2555|       |                                        Some(Integer::try_from(value).ok()?.into())
 2556|       |                                    }
 2557|       |                                    EncodedTerm::DoubleLiteral(value) => {
 2558|       |                                        Some(Integer::try_from(value).ok()?.into())
 2559|       |                                    }
 2560|       |                                    EncodedTerm::IntegerLiteral(value) => Some(value.into()),
 2561|       |                                    EncodedTerm::DecimalLiteral(value) => {
 2562|       |                                        Some(Integer::try_from(value).ok()?.into())
 2563|       |                                    }
 2564|       |                                    EncodedTerm::BooleanLiteral(value) => {
 2565|       |                                        Some(Integer::from(value).into())
 2566|       |                                    }
 2567|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2568|       |                                        parse_integer_str(&value)
 2569|       |                                    }
 2570|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2571|       |                                        parse_integer_str(&dataset.get_str(&value_id).ok()??)
 2572|       |                                    }
 2573|       |                                    _ => None,
 2574|      0|                                })
 2575|       |                            }
 2576|      0|                            xsd::DECIMAL => {
 2577|      0|                                let e = self.expression_evaluator(
 2578|      0|                                    &parameters[0],
 2579|      0|                                    encoded_variables,
 2580|      0|                                    stat_children,
 2581|      0|                                );
 2582|      0|                                let dataset = Rc::clone(&self.dataset);
 2583|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2584|       |                                    EncodedTerm::FloatLiteral(value) => {
 2585|       |                                        Some(Decimal::try_from(value).ok()?.into())
 2586|       |                                    }
 2587|       |                                    EncodedTerm::DoubleLiteral(value) => {
 2588|       |                                        Some(Decimal::try_from(value).ok()?.into())
 2589|       |                                    }
 2590|       |                                    EncodedTerm::IntegerLiteral(value) => {
 2591|       |                                        Some(Decimal::from(value).into())
 2592|       |                                    }
 2593|       |                                    EncodedTerm::DecimalLiteral(value) => Some(value.into()),
 2594|       |                                    EncodedTerm::BooleanLiteral(value) => {
 2595|       |                                        Some(Decimal::from(value).into())
 2596|       |                                    }
 2597|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2598|       |                                        parse_decimal_str(&value)
 2599|       |                                    }
 2600|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2601|       |                                        parse_decimal_str(&dataset.get_str(&value_id).ok()??)
 2602|       |                                    }
 2603|       |                                    _ => None,
 2604|      0|                                })
 2605|       |                            }
 2606|      0|                            xsd::DATE => {
 2607|      0|                                let e = self.expression_evaluator(
 2608|      0|                                    &parameters[0],
 2609|      0|                                    encoded_variables,
 2610|      0|                                    stat_children,
 2611|      0|                                );
 2612|      0|                                let dataset = Rc::clone(&self.dataset);
 2613|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2614|       |                                    EncodedTerm::DateLiteral(value) => Some(value.into()),
 2615|       |                                    EncodedTerm::DateTimeLiteral(value) => {
 2616|       |                                        Some(Date::try_from(value).ok()?.into())
 2617|       |                                    }
 2618|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2619|       |                                        parse_date_str(&value)
 2620|       |                                    }
 2621|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2622|       |                                        parse_date_str(&dataset.get_str(&value_id).ok()??)
 2623|       |                                    }
 2624|       |                                    _ => None,
 2625|      0|                                })
 2626|       |                            }
 2627|      0|                            xsd::TIME => {
 2628|      0|                                let e = self.expression_evaluator(
 2629|      0|                                    &parameters[0],
 2630|      0|                                    encoded_variables,
 2631|      0|                                    stat_children,
 2632|      0|                                );
 2633|      0|                                let dataset = Rc::clone(&self.dataset);
 2634|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2635|       |                                    EncodedTerm::TimeLiteral(value) => Some(value.into()),
 2636|       |                                    EncodedTerm::DateTimeLiteral(value) => {
 2637|       |                                        Some(Time::from(value).into())
 2638|       |                                    }
 2639|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2640|       |                                        parse_time_str(&value)
 2641|       |                                    }
 2642|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2643|       |                                        parse_time_str(&dataset.get_str(&value_id).ok()??)
 2644|       |                                    }
 2645|       |                                    _ => None,
 2646|      0|                                })
 2647|       |                            }
 2648|      0|                            xsd::DATE_TIME => {
 2649|      0|                                let e = self.expression_evaluator(
 2650|      0|                                    &parameters[0],
 2651|      0|                                    encoded_variables,
 2652|      0|                                    stat_children,
 2653|      0|                                );
 2654|      0|                                let dataset = Rc::clone(&self.dataset);
 2655|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2656|       |                                    EncodedTerm::DateTimeLiteral(value) => Some(value.into()),
 2657|       |                                    EncodedTerm::DateLiteral(value) => {
 2658|       |                                        Some(DateTime::try_from(value).ok()?.into())
 2659|       |                                    }
 2660|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2661|       |                                        parse_date_time_str(&value)
 2662|       |                                    }
 2663|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2664|       |                                        parse_date_time_str(&dataset.get_str(&value_id).ok()??)
 2665|       |                                    }
 2666|       |                                    _ => None,
 2667|      0|                                })
 2668|       |                            }
 2669|      0|                            xsd::DURATION => {
 2670|      0|                                let e = self.expression_evaluator(
 2671|      0|                                    &parameters[0],
 2672|      0|                                    encoded_variables,
 2673|      0|                                    stat_children,
 2674|      0|                                );
 2675|      0|                                let dataset = Rc::clone(&self.dataset);
 2676|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2677|       |                                    EncodedTerm::DurationLiteral(value) => Some(value.into()),
 2678|       |                                    EncodedTerm::YearMonthDurationLiteral(value) => {
 2679|       |                                        Some(Duration::from(value).into())
 2680|       |                                    }
 2681|       |                                    EncodedTerm::DayTimeDurationLiteral(value) => {
 2682|       |                                        Some(Duration::from(value).into())
 2683|       |                                    }
 2684|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2685|       |                                        parse_duration_str(&value)
 2686|       |                                    }
 2687|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2688|       |                                        parse_duration_str(&dataset.get_str(&value_id).ok()??)
 2689|       |                                    }
 2690|       |                                    _ => None,
 2691|      0|                                })
 2692|       |                            }
 2693|      0|                            xsd::YEAR_MONTH_DURATION => {
 2694|      0|                                let e = self.expression_evaluator(
 2695|      0|                                    &parameters[0],
 2696|      0|                                    encoded_variables,
 2697|      0|                                    stat_children,
 2698|      0|                                );
 2699|      0|                                let dataset = Rc::clone(&self.dataset);
 2700|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2701|       |                                    EncodedTerm::DurationLiteral(value) => {
 2702|       |                                        Some(YearMonthDuration::try_from(value).ok()?.into())
 2703|       |                                    }
 2704|       |                                    EncodedTerm::YearMonthDurationLiteral(value) => {
 2705|       |                                        Some(value.into())
 2706|       |                                    }
 2707|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2708|       |                                        parse_year_month_duration_str(&value)
 2709|       |                                    }
 2710|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2711|       |                                        parse_year_month_duration_str(
 2712|       |                                            &dataset.get_str(&value_id).ok()??,
 2713|       |                                        )
 2714|       |                                    }
 2715|       |                                    _ => None,
 2716|      0|                                })
 2717|       |                            }
 2718|      0|                            xsd::DAY_TIME_DURATION => {
 2719|      0|                                let e = self.expression_evaluator(
 2720|      0|                                    &parameters[0],
 2721|      0|                                    encoded_variables,
 2722|      0|                                    stat_children,
 2723|      0|                                );
 2724|      0|                                let dataset = Rc::clone(&self.dataset);
 2725|      0|                                Rc::new(move |tuple| match e(tuple)? {
 2726|       |                                    EncodedTerm::DurationLiteral(value) => {
 2727|       |                                        Some(DayTimeDuration::try_from(value).ok()?.into())
 2728|       |                                    }
 2729|       |                                    EncodedTerm::DayTimeDurationLiteral(value) => {
 2730|       |                                        Some(value.into())
 2731|       |                                    }
 2732|       |                                    EncodedTerm::SmallStringLiteral(value) => {
 2733|       |                                        parse_day_time_duration_str(&value)
 2734|       |                                    }
 2735|       |                                    EncodedTerm::BigStringLiteral { value_id } => {
 2736|       |                                        parse_day_time_duration_str(
 2737|       |                                            &dataset.get_str(&value_id).ok()??,
 2738|       |                                        )
 2739|       |                                    }
 2740|       |                                    _ => None,
 2741|      0|                                })
 2742|       |                            }
 2743|      0|                            _ => Rc::new(|_| None),
 2744|       |                        }
 2745|       |                    }
 2746|       |                }
 2747|       |            }
 2748|       |        }
 2749|  15.4k|    }
_RNvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13PathEvaluator26eval_from_in_unknown_graph:
 4233|     12|    fn eval_from_in_unknown_graph(
 4234|     12|        &self,
 4235|     12|        path: &PropertyPath,
 4236|     12|        start: &EncodedTerm,
 4237|     12|    ) -> Box<dyn Iterator<Item = Result<(EncodedTerm, EncodedTerm), EvaluationError>>> {
 4238|     12|        match path {
 4239|      4|            PropertyPath::Path(p) => Box::new(
 4240|      4|                self.dataset
 4241|      4|                    .encoded_quads_for_pattern(Some(start), Some(p), None, None)
 4242|      4|                    .map(|t| {
 4243|       |                        let t = t?;
 4244|       |                        Ok((t.object, t.graph_name))
 4245|      4|                    }),
 4246|      4|            ),
 4247|      2|            PropertyPath::Reverse(p) => self.eval_to_in_unknown_graph(p, start),
 4248|      0|            PropertyPath::Sequence(a, b) => {
 4249|      0|                let eval = self.clone();
 4250|      0|                let b = Rc::clone(b);
 4251|      0|                Box::new(self.eval_from_in_unknown_graph(a, start).flat_map_ok(
 4252|      0|                    move |(middle, graph_name)| {
 4253|       |                        eval.eval_from_in_graph(&b, &middle, &graph_name)
 4254|       |                            .map(move |end| Ok((end?, graph_name.clone())))
 4255|      0|                    },
 4256|      0|                ))
 4257|       |            }
 4258|      2|            PropertyPath::Alternative(a, b) => Box::new(hash_deduplicate(
 4259|      2|                self.eval_from_in_unknown_graph(a, start)
 4260|      2|                    .chain(self.eval_from_in_unknown_graph(b, start)),
 4261|      2|            )),
 4262|      2|            PropertyPath::ZeroOrMore(p) => {
 4263|      2|                let start2 = start.clone();
 4264|      2|                let eval = self.clone();
 4265|      2|                let p = Rc::clone(p);
 4266|      2|                self.run_if_term_is_a_dataset_node(start, move |graph_name| {
 4267|       |                    let eval = eval.clone();
 4268|       |                    let p = Rc::clone(&p);
 4269|       |                    let graph_name2 = graph_name.clone();
 4270|       |                    transitive_closure(Some(Ok(start2.clone())), move |e| {
 4271|       |                        eval.eval_from_in_graph(&p, &e, &graph_name2)
 4272|       |                    })
 4273|       |                    .map(move |e| Ok((e?, graph_name.clone())))
 4274|      2|                })
 4275|       |            }
 4276|      0|            PropertyPath::OneOrMore(p) => {
 4277|      0|                let eval = self.clone();
 4278|      0|                let p = Rc::clone(p);
 4279|      0|                Box::new(transitive_closure(
 4280|      0|                    self.eval_from_in_unknown_graph(&p, start),
 4281|      0|                    move |(e, graph_name)| {
 4282|       |                        eval.eval_from_in_graph(&p, &e, &graph_name)
 4283|       |                            .map(move |e| Ok((e?, graph_name.clone())))
 4284|      0|                    },
 4285|      0|                ))
 4286|       |            }
 4287|      0|            PropertyPath::ZeroOrOne(p) => {
 4288|      0|                let eval = self.clone();
 4289|      0|                let start2 = start.clone();
 4290|      0|                let p = Rc::clone(p);
 4291|      0|                self.run_if_term_is_a_dataset_node(start, move |graph_name| {
 4292|       |                    hash_deduplicate(once(Ok(start2.clone())).chain(eval.eval_from_in_graph(
 4293|       |                        &p,
 4294|       |                        &start2,
 4295|       |                        &graph_name,
 4296|       |                    )))
 4297|       |                    .map(move |e| Ok((e?, graph_name.clone())))
 4298|      0|                })
 4299|       |            }
 4300|      2|            PropertyPath::NegatedPropertySet(ps) => {
 4301|      2|                let ps = Rc::clone(ps);
 4302|      2|                Box::new(
 4303|      2|                    self.dataset
 4304|      2|                        .encoded_quads_for_pattern(Some(start), None, None, None)
 4305|      2|                        .filter_map(move |t| match t {
 4306|       |                            Ok(t) => {
 4307|       |                                if ps.iter().any(|p| *p == t.predicate) {
 4308|       |                                    None
 4309|       |                                } else {
 4310|       |                                    Some(Ok((t.object, t.graph_name)))
 4311|       |                                }
 4312|       |                            }
 4313|       |                            Err(e) => Some(Err(e)),
 4314|      2|                        }),
 4315|      2|                )
 4316|       |            }
 4317|       |        }
 4318|     12|    }
_RNvXs6_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_20HashLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 4811|    509|    fn next(&mut self) -> Option<Self::Item> {
 4812|       |        loop {
 4813|    557|            if let Some(result) = self.buffered_results.pop() {
 4814|     48|                return Some(result);
 4815|    509|            }
 4816|    509|            let left_tuple = match self.left_iter.next()? {
 4817|    197|                Ok(left_tuple) => left_tuple,
 4818|      0|                Err(error) => return Some(Err(error)),
 4819|       |            };
 4820|    197|            self.buffered_results.extend(
 4821|    197|                self.right
 4822|    197|                    .get(&left_tuple)
 4823|    197|                    .iter()
 4824|    197|                    .filter_map(|right_tuple| left_tuple.combine_with(right_tuple))
 4825|    197|                    .filter(|tuple| {
 4826|       |                        (self.expression)(tuple)
 4827|       |                            .and_then(|term| to_bool(&term))
 4828|       |                            .unwrap_or(false)
 4829|    197|                    })
 4830|    197|                    .map(Ok),
 4831|    197|            );
 4832|    197|            if self.buffered_results.is_empty() {
 4833|       |                // We have not manage to join with anything
 4834|    149|                return Some(Ok(left_tuple));
 4835|     48|            }
 4836|       |        }
 4837|    509|    }
_RNvMs2_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13TupleSelector23from_named_node_pattern:
 3869|  35.1k|    fn from_named_node_pattern(
 3870|  35.1k|        named_node_pattern: &NamedNodePattern,
 3871|  35.1k|        variables: &mut Vec<Variable>,
 3872|  35.1k|        dataset: &DatasetView,
 3873|  35.1k|    ) -> Self {
 3874|  35.1k|        match named_node_pattern {
 3875|  18.8k|            NamedNodePattern::Variable(variable) => {
 3876|  18.8k|                Self::Variable(encode_variable(variables, variable))
 3877|       |            }
 3878|  16.3k|            NamedNodePattern::NamedNode(term) => Self::Constant(dataset.encode_term(term)),
 3879|       |        }
 3880|  35.1k|    }
_RNvXs7_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_23ForLoopLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 4859|     29|    fn next(&mut self) -> Option<Self::Item> {
 4860|     29|        if let Some(tuple) = self.current_right.next() {
 4861|      0|            return Some(tuple);
 4862|     29|        }
 4863|     29|        let left_tuple = match self.left_iter.next()? {
 4864|      1|            Ok(left_tuple) => left_tuple,
 4865|      0|            Err(error) => return Some(Err(error)),
 4866|       |        };
 4867|      1|        self.current_right = (self.right_evaluator)(left_tuple.clone());
 4868|      1|        if let Some(right_tuple) = self.current_right.next() {
 4869|      1|            Some(right_tuple)
 4870|       |        } else {
 4871|      0|            Some(Ok(left_tuple))
 4872|       |        }
 4873|     29|    }
_RNvXs4_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_28CartesianProductJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hint:
 4754|    509|    fn size_hint(&self) -> (usize, Option<usize>) {
 4755|    509|        let (min, max) = self.probe_iter.size_hint();
 4756|    509|        (
 4757|    509|            min.saturating_mul(self.built.len()),
 4758|    509|            max.map(|v| v.saturating_mul(self.built.len())),
 4759|    509|        )
 4760|    509|    }
_RNvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13PathEvaluator18eval_open_in_graph:
 4479|  13.8k|    fn eval_open_in_graph(
 4480|  13.8k|        &self,
 4481|  13.8k|        path: &PropertyPath,
 4482|  13.8k|        graph_name: &EncodedTerm,
 4483|  13.8k|    ) -> Box<dyn Iterator<Item = Result<(EncodedTerm, EncodedTerm), EvaluationError>>> {
 4484|  13.8k|        match path {
 4485|  3.91k|            PropertyPath::Path(p) => Box::new(
 4486|  3.91k|                self.dataset
 4487|  3.91k|                    .encoded_quads_for_pattern(None, Some(p), None, Some(graph_name))
 4488|  3.91k|                    .map(|t| t.map(|t| (t.subject, t.object))),
 4489|  3.91k|            ),
 4490|  2.56k|            PropertyPath::Reverse(p) => Box::new(
 4491|  2.56k|                self.eval_open_in_graph(p, graph_name)
 4492|  2.56k|                    .map(|t| t.map(|(s, o)| (o, s))),
 4493|  2.56k|            ),
 4494|  1.59k|            PropertyPath::Sequence(a, b) => {
 4495|  1.59k|                let eval = self.clone();
 4496|  1.59k|                let b = Rc::clone(b);
 4497|  1.59k|                let graph_name2 = graph_name.clone();
 4498|  1.59k|                Box::new(self.eval_open_in_graph(a, graph_name).flat_map_ok(
 4499|  1.59k|                    move |(start, middle)| {
 4500|       |                        eval.eval_from_in_graph(&b, &middle, &graph_name2)
 4501|       |                            .map(move |end| Ok((start.clone(), end?)))
 4502|  1.59k|                    },
 4503|  1.59k|                ))
 4504|       |            }
 4505|    913|            PropertyPath::Alternative(a, b) => Box::new(hash_deduplicate(
 4506|    913|                self.eval_open_in_graph(a, graph_name)
 4507|    913|                    .chain(self.eval_open_in_graph(b, graph_name)),
 4508|    913|            )),
 4509|    466|            PropertyPath::ZeroOrMore(p) => {
 4510|    466|                let eval = self.clone();
 4511|    466|                let p = Rc::clone(p);
 4512|    466|                let graph_name2 = graph_name.clone();
 4513|    466|                Box::new(transitive_closure(
 4514|    466|                    self.get_subject_or_object_identity_pairs_in_graph(graph_name),
 4515|    466|                    move |(start, middle)| {
 4516|       |                        eval.eval_from_in_graph(&p, &middle, &graph_name2)
 4517|       |                            .map(move |end| Ok((start.clone(), end?)))
 4518|    466|                    },
 4519|    466|                ))
 4520|       |            }
 4521|    966|            PropertyPath::OneOrMore(p) => {
 4522|    966|                let eval = self.clone();
 4523|    966|                let p = Rc::clone(p);
 4524|    966|                let graph_name2 = graph_name.clone();
 4525|    966|                Box::new(transitive_closure(
 4526|    966|                    self.eval_open_in_graph(&p, graph_name),
 4527|    966|                    move |(start, middle)| {
 4528|       |                        eval.eval_from_in_graph(&p, &middle, &graph_name2)
 4529|       |                            .map(move |end| Ok((start.clone(), end?)))
 4530|    966|                    },
 4531|    966|                ))
 4532|       |            }
 4533|  2.70k|            PropertyPath::ZeroOrOne(p) => Box::new(hash_deduplicate(
 4534|  2.70k|                self.get_subject_or_object_identity_pairs_in_graph(graph_name)
 4535|  2.70k|                    .chain(self.eval_open_in_graph(p, graph_name)),
 4536|  2.70k|            )),
 4537|    681|            PropertyPath::NegatedPropertySet(ps) => {
 4538|    681|                let ps = Rc::clone(ps);
 4539|    681|                Box::new(
 4540|    681|                    self.dataset
 4541|    681|                        .encoded_quads_for_pattern(None, None, None, Some(graph_name))
 4542|    681|                        .filter_map(move |t| match t {
 4543|       |                            Ok(t) => {
 4544|       |                                if ps.iter().any(|p| *p == t.predicate) {
 4545|       |                                    None
 4546|       |                                } else {
 4547|       |                                    Some(Ok((t.subject, t.object)))
 4548|       |                                }
 4549|       |                            }
 4550|       |                            Err(e) => Some(Err(e)),
 4551|    681|                        }),
 4552|    681|                )
 4553|       |            }
 4554|       |        }
 4555|  13.8k|    }
_RNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_15SimpleEvaluator3new:
  135|  4.17k|    pub fn new(
  136|  4.17k|        dataset: Rc<DatasetView>,
  137|  4.17k|        base_iri: Option<Rc<Iri<String>>>,
  138|  4.17k|        service_handler: Arc<dyn ServiceHandler<Error = EvaluationError>>,
  139|  4.17k|        custom_functions: Arc<CustomFunctionRegistry>,
  140|  4.17k|        run_stats: bool,
  141|  4.17k|    ) -> Self {
  142|  4.17k|        Self {
  143|  4.17k|            dataset,
  144|  4.17k|            base_iri,
  145|  4.17k|            now: DateTime::now(),
  146|  4.17k|            service_handler,
  147|  4.17k|            custom_functions,
  148|  4.17k|            run_stats,
  149|  4.17k|        }
  150|  4.17k|    }
_RNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_15SimpleEvaluator23graph_pattern_evaluator:
  244|  83.7k|    pub fn graph_pattern_evaluator(
  245|  83.7k|        &self,
  246|  83.7k|        pattern: &GraphPattern,
  247|  83.7k|        encoded_variables: &mut Vec<Variable>,
  248|  83.7k|    ) -> (
  249|  83.7k|        Rc<dyn Fn(EncodedTuple) -> EncodedTuplesIterator>,
  250|  83.7k|        Rc<EvalNodeWithStats>,
  251|  83.7k|    ) {
  252|  83.7k|        let mut stat_children = Vec::new();
  253|  83.7k|        let mut evaluator =
  254|  83.7k|            self.build_graph_pattern_evaluator(pattern, encoded_variables, &mut stat_children);
  255|  83.7k|        let stats = Rc::new(EvalNodeWithStats {
  256|  83.7k|            label: eval_node_label(pattern),
  257|  83.7k|            children: stat_children,
  258|  83.7k|            exec_count: Cell::new(0),
  259|  83.7k|            exec_duration: Cell::new(self.run_stats.then(DayTimeDuration::default)),
  260|  83.7k|        });
  261|  83.7k|        if self.run_stats {
  262|      0|            let stats = Rc::clone(&stats);
  263|      0|            evaluator = Rc::new(move |tuple| {
  264|       |                let start = Timer::now();
  265|       |                let inner = evaluator(tuple);
  266|       |                stats.exec_duration.set(
  267|       |                    stats
  268|       |                        .exec_duration
  269|       |                        .get()
  270|       |                        .and_then(|stat| stat.checked_add(start.elapsed()?)),
  271|       |                );
  272|       |                Box::new(StatsIterator {
  273|       |                    inner,
  274|       |                    stats: Rc::clone(&stats),
  275|       |                })
  276|      0|            })
  277|  83.7k|        }
  278|  83.7k|        (evaluator, stats)
  279|  83.7k|    }
_RNvMsw_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_15EncodedTupleSet3len:
 5622|    214|    fn len(&self) -> usize {
 5623|    214|        self.len
 5624|    214|    }
_RNvXs6_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_20HashLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hint:
 4839|    236|    fn size_hint(&self) -> (usize, Option<usize>) {
 4840|    236|        (
 4841|    236|            0,
 4842|    236|            self.left_iter
 4843|    236|                .size_hint()
 4844|    236|                .1
 4845|    236|                .map(|v| v.saturating_mul(self.right.len())),
 4846|    236|        )
 4847|    236|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB2_12EncodedTuple13with_capacity:
   49|  7.81k|    pub fn with_capacity(capacity: usize) -> Self {
   50|  7.81k|        Self {
   51|  7.81k|            inner: Vec::with_capacity(capacity),
   52|  7.81k|        }
   53|  7.81k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB2_12EncodedTuple12combine_with:
   78|  2.17k|    pub fn combine_with(&self, other: &Self) -> Option<Self> {
   79|  2.17k|        if self.inner.len() < other.inner.len() {
   80|      6|            let mut result = other.inner.clone();
   81|      6|            for (key, self_value) in self.inner.iter().enumerate() {
   82|      0|                if let Some(self_value) = self_value {
   83|      0|                    match &other.inner[key] {
   84|      0|                        Some(other_value) => {
   85|      0|                            if self_value != other_value {
   86|      0|                                return None;
   87|      0|                            }
   88|       |                        }
   89|      0|                        None => result[key] = Some(self_value.clone()),
   90|       |                    }
   91|      0|                }
   92|       |            }
   93|      6|            Some(Self { inner: result })
   94|       |        } else {
   95|  2.16k|            let mut result = self.inner.clone();
   96|  2.16k|            for (key, other_value) in other.inner.iter().enumerate() {
   97|      4|                if let Some(other_value) = other_value {
   98|      4|                    match &self.inner[key] {
   99|      4|                        Some(self_value) => {
  100|      4|                            if self_value != other_value {
  101|      2|                                return None;
  102|      2|                            }
  103|       |                        }
  104|      0|                        None => result[key] = Some(other_value.clone()),
  105|       |                    }
  106|      0|                }
  107|       |            }
  108|  2.16k|            Some(Self { inner: result })
  109|       |        }
  110|  2.17k|    }
_RNvMsw_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_15EncodedTupleSet9tuple_key:
 5612|    259|    fn tuple_key(&self, tuple: &EncodedTuple) -> u64 {
 5613|    259|        let mut hasher = DefaultHasher::default();
 5614|    262|        for v in &self.key {
 5615|      3|            if let Some(val) = tuple.get(*v) {
 5616|      3|                val.hash(&mut hasher);
 5617|      3|            }
 5618|       |        }
 5619|    259|        hasher.finish()
 5620|    259|    }
_RNvMs1_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_21NumericBinaryOperands3new:
 3702|     98|    fn new(a: EncodedTerm, b: EncodedTerm) -> Option<Self> {
 3703|     98|        match (a, b) {
 3704|      0|            (EncodedTerm::FloatLiteral(v1), EncodedTerm::FloatLiteral(v2)) => {
 3705|      0|                Some(Self::Float(v1, v2))
 3706|       |            }
 3707|      0|            (EncodedTerm::FloatLiteral(v1), EncodedTerm::DoubleLiteral(v2)) => {
 3708|      0|                Some(Self::Double(v1.into(), v2))
 3709|       |            }
 3710|      0|            (EncodedTerm::FloatLiteral(v1), EncodedTerm::IntegerLiteral(v2)) => {
 3711|      0|                Some(Self::Float(v1, v2.into()))
 3712|       |            }
 3713|      0|            (EncodedTerm::FloatLiteral(v1), EncodedTerm::DecimalLiteral(v2)) => {
 3714|      0|                Some(Self::Float(v1, v2.into()))
 3715|       |            }
 3716|      0|            (EncodedTerm::DoubleLiteral(v1), EncodedTerm::FloatLiteral(v2)) => {
 3717|      0|                Some(Self::Double(v1, v2.into()))
 3718|       |            }
 3719|      0|            (EncodedTerm::DoubleLiteral(v1), EncodedTerm::DoubleLiteral(v2)) => {
 3720|      0|                Some(Self::Double(v1, v2))
 3721|       |            }
 3722|      0|            (EncodedTerm::DoubleLiteral(v1), EncodedTerm::IntegerLiteral(v2)) => {
 3723|      0|                Some(Self::Double(v1, v2.into()))
 3724|       |            }
 3725|      0|            (EncodedTerm::DoubleLiteral(v1), EncodedTerm::DecimalLiteral(v2)) => {
 3726|      0|                Some(Self::Double(v1, v2.into()))
 3727|       |            }
 3728|      0|            (EncodedTerm::IntegerLiteral(v1), EncodedTerm::FloatLiteral(v2)) => {
 3729|      0|                Some(Self::Float(v1.into(), v2))
 3730|       |            }
 3731|      0|            (EncodedTerm::IntegerLiteral(v1), EncodedTerm::DoubleLiteral(v2)) => {
 3732|      0|                Some(Self::Double(v1.into(), v2))
 3733|       |            }
 3734|     40|            (EncodedTerm::IntegerLiteral(v1), EncodedTerm::IntegerLiteral(v2)) => {
 3735|     40|                Some(Self::Integer(v1, v2))
 3736|       |            }
 3737|      1|            (EncodedTerm::IntegerLiteral(v1), EncodedTerm::DecimalLiteral(v2)) => {
 3738|      1|                Some(Self::Decimal(v1.into(), v2))
 3739|       |            }
 3740|      0|            (EncodedTerm::DecimalLiteral(v1), EncodedTerm::FloatLiteral(v2)) => {
 3741|      0|                Some(Self::Float(v1.into(), v2))
 3742|       |            }
 3743|      0|            (EncodedTerm::DecimalLiteral(v1), EncodedTerm::DoubleLiteral(v2)) => {
 3744|      0|                Some(Self::Double(v1.into(), v2))
 3745|       |            }
 3746|      0|            (EncodedTerm::DecimalLiteral(v1), EncodedTerm::IntegerLiteral(v2)) => {
 3747|      0|                Some(Self::Decimal(v1, v2.into()))
 3748|       |            }
 3749|     29|            (EncodedTerm::DecimalLiteral(v1), EncodedTerm::DecimalLiteral(v2)) => {
 3750|     29|                Some(Self::Decimal(v1, v2))
 3751|       |            }
 3752|      0|            (EncodedTerm::DurationLiteral(v1), EncodedTerm::DurationLiteral(v2)) => {
 3753|      0|                Some(Self::Duration(v1, v2))
 3754|       |            }
 3755|      0|            (EncodedTerm::DurationLiteral(v1), EncodedTerm::YearMonthDurationLiteral(v2)) => {
 3756|      0|                Some(Self::Duration(v1, v2.into()))
 3757|       |            }
 3758|      0|            (EncodedTerm::DurationLiteral(v1), EncodedTerm::DayTimeDurationLiteral(v2)) => {
 3759|      0|                Some(Self::Duration(v1, v2.into()))
 3760|       |            }
 3761|      0|            (EncodedTerm::YearMonthDurationLiteral(v1), EncodedTerm::DurationLiteral(v2)) => {
 3762|      0|                Some(Self::Duration(v1.into(), v2))
 3763|       |            }
 3764|       |            (
 3765|      0|                EncodedTerm::YearMonthDurationLiteral(v1),
 3766|      0|                EncodedTerm::YearMonthDurationLiteral(v2),
 3767|      0|            ) => Some(Self::YearMonthDuration(v1, v2)),
 3768|       |            (
 3769|      0|                EncodedTerm::YearMonthDurationLiteral(v1),
 3770|      0|                EncodedTerm::DayTimeDurationLiteral(v2),
 3771|      0|            ) => Some(Self::Duration(v1.into(), v2.into())),
 3772|      0|            (EncodedTerm::DayTimeDurationLiteral(v1), EncodedTerm::DurationLiteral(v2)) => {
 3773|      0|                Some(Self::Duration(v1.into(), v2))
 3774|       |            }
 3775|       |            (
 3776|      0|                EncodedTerm::DayTimeDurationLiteral(v1),
 3777|      0|                EncodedTerm::YearMonthDurationLiteral(v2),
 3778|      0|            ) => Some(Self::Duration(v1.into(), v2.into())),
 3779|      0|            (EncodedTerm::DayTimeDurationLiteral(v1), EncodedTerm::DayTimeDurationLiteral(v2)) => {
 3780|      0|                Some(Self::DayTimeDuration(v1, v2))
 3781|       |            }
 3782|      0|            (EncodedTerm::DateTimeLiteral(v1), EncodedTerm::DateTimeLiteral(v2)) => {
 3783|      0|                Some(Self::DateTime(v1, v2))
 3784|       |            }
 3785|      0|            (EncodedTerm::DateLiteral(v1), EncodedTerm::DateLiteral(v2)) => {
 3786|      0|                Some(Self::Date(v1, v2))
 3787|       |            }
 3788|      0|            (EncodedTerm::TimeLiteral(v1), EncodedTerm::TimeLiteral(v2)) => {
 3789|      0|                Some(Self::Time(v1, v2))
 3790|       |            }
 3791|      0|            (EncodedTerm::DateTimeLiteral(v1), EncodedTerm::DurationLiteral(v2)) => {
 3792|      0|                Some(Self::DateTimeDuration(v1, v2))
 3793|       |            }
 3794|      0|            (EncodedTerm::DateTimeLiteral(v1), EncodedTerm::YearMonthDurationLiteral(v2)) => {
 3795|      0|                Some(Self::DateTimeYearMonthDuration(v1, v2))
 3796|       |            }
 3797|      0|            (EncodedTerm::DateTimeLiteral(v1), EncodedTerm::DayTimeDurationLiteral(v2)) => {
 3798|      0|                Some(Self::DateTimeDayTimeDuration(v1, v2))
 3799|       |            }
 3800|      0|            (EncodedTerm::DateLiteral(v1), EncodedTerm::DurationLiteral(v2)) => {
 3801|      0|                Some(Self::DateDuration(v1, v2))
 3802|       |            }
 3803|      0|            (EncodedTerm::DateLiteral(v1), EncodedTerm::YearMonthDurationLiteral(v2)) => {
 3804|      0|                Some(Self::DateYearMonthDuration(v1, v2))
 3805|       |            }
 3806|      0|            (EncodedTerm::DateLiteral(v1), EncodedTerm::DayTimeDurationLiteral(v2)) => {
 3807|      0|                Some(Self::DateDayTimeDuration(v1, v2))
 3808|       |            }
 3809|      0|            (EncodedTerm::TimeLiteral(v1), EncodedTerm::DurationLiteral(v2)) => {
 3810|      0|                Some(Self::TimeDuration(v1, v2))
 3811|       |            }
 3812|      0|            (EncodedTerm::TimeLiteral(v1), EncodedTerm::DayTimeDurationLiteral(v2)) => {
 3813|      0|                Some(Self::TimeDayTimeDuration(v1, v2))
 3814|       |            }
 3815|     28|            _ => None,
 3816|       |        }
 3817|     98|    }
_RNvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval6equals:
 3178|      9|fn equals(a: &EncodedTerm, b: &EncodedTerm) -> Option<bool> {
 3179|      9|    match a {
 3180|       |        EncodedTerm::DefaultGraph
 3181|       |        | EncodedTerm::NamedNode { .. }
 3182|       |        | EncodedTerm::NumericalBlankNode { .. }
 3183|       |        | EncodedTerm::SmallBlankNode { .. }
 3184|       |        | EncodedTerm::BigBlankNode { .. }
 3185|       |        | EncodedTerm::SmallSmallLangStringLiteral { .. }
 3186|       |        | EncodedTerm::SmallBigLangStringLiteral { .. }
 3187|       |        | EncodedTerm::BigSmallLangStringLiteral { .. }
 3188|      0|        | EncodedTerm::BigBigLangStringLiteral { .. } => Some(a == b),
 3189|      0|        EncodedTerm::SmallStringLiteral(a) => match b {
 3190|      0|            EncodedTerm::SmallStringLiteral(b) => Some(a == b),
 3191|      0|            EncodedTerm::SmallTypedLiteral { .. } | EncodedTerm::BigTypedLiteral { .. } => None,
 3192|      0|            _ => Some(false),
 3193|       |        },
 3194|      0|        EncodedTerm::BigStringLiteral { value_id: a } => match b {
 3195|      0|            EncodedTerm::BigStringLiteral { value_id: b } => Some(a == b),
 3196|      0|            EncodedTerm::SmallTypedLiteral { .. } | EncodedTerm::BigTypedLiteral { .. } => None,
 3197|      0|            _ => Some(false),
 3198|       |        },
 3199|      0|        EncodedTerm::SmallTypedLiteral { .. } => match b {
 3200|      0|            EncodedTerm::SmallTypedLiteral { .. } if a == b => Some(true),
 3201|       |            EncodedTerm::NamedNode { .. }
 3202|       |            | EncodedTerm::NumericalBlankNode { .. }
 3203|       |            | EncodedTerm::SmallBlankNode { .. }
 3204|       |            | EncodedTerm::BigBlankNode { .. }
 3205|       |            | EncodedTerm::SmallSmallLangStringLiteral { .. }
 3206|       |            | EncodedTerm::SmallBigLangStringLiteral { .. }
 3207|       |            | EncodedTerm::BigSmallLangStringLiteral { .. }
 3208|       |            | EncodedTerm::BigBigLangStringLiteral { .. }
 3209|      0|            | EncodedTerm::BigTypedLiteral { .. } => Some(false),
 3210|      0|            _ => None,
 3211|       |        },
 3212|      0|        EncodedTerm::BigTypedLiteral { .. } => match b {
 3213|      0|            EncodedTerm::BigTypedLiteral { .. } if a == b => Some(true),
 3214|       |            EncodedTerm::NamedNode { .. }
 3215|       |            | EncodedTerm::NumericalBlankNode { .. }
 3216|       |            | EncodedTerm::SmallBlankNode { .. }
 3217|       |            | EncodedTerm::BigBlankNode { .. }
 3218|       |            | EncodedTerm::SmallSmallLangStringLiteral { .. }
 3219|       |            | EncodedTerm::SmallBigLangStringLiteral { .. }
 3220|       |            | EncodedTerm::BigSmallLangStringLiteral { .. }
 3221|       |            | EncodedTerm::BigBigLangStringLiteral { .. }
 3222|      0|            | EncodedTerm::SmallTypedLiteral { .. } => Some(false),
 3223|      0|            _ => None,
 3224|       |        },
 3225|      9|        EncodedTerm::BooleanLiteral(a) => match b {
 3226|      9|            EncodedTerm::BooleanLiteral(b) => Some(a == b),
 3227|      0|            _ if b.is_unknown_typed_literal() => None,
 3228|      0|            _ => Some(false),
 3229|       |        },
 3230|      0|        EncodedTerm::FloatLiteral(a) => match b {
 3231|      0|            EncodedTerm::FloatLiteral(b) => Some(a == b),
 3232|      0|            EncodedTerm::DoubleLiteral(b) => Some(Double::from(*a) == *b),
 3233|      0|            EncodedTerm::IntegerLiteral(b) => Some(*a == (*b).into()),
 3234|      0|            EncodedTerm::DecimalLiteral(b) => Some(*a == (*b).into()),
 3235|      0|            _ if b.is_unknown_typed_literal() => None,
 3236|      0|            _ => Some(false),
 3237|       |        },
 3238|      0|        EncodedTerm::DoubleLiteral(a) => match b {
 3239|      0|            EncodedTerm::FloatLiteral(b) => Some(*a == (*b).into()),
 3240|      0|            EncodedTerm::DoubleLiteral(b) => Some(a == b),
 3241|      0|            EncodedTerm::IntegerLiteral(b) => Some(*a == (*b).into()),
 3242|      0|            EncodedTerm::DecimalLiteral(b) => Some(*a == (*b).into()),
 3243|      0|            _ if b.is_unknown_typed_literal() => None,
 3244|      0|            _ => Some(false),
 3245|       |        },
 3246|      0|        EncodedTerm::IntegerLiteral(a) => match b {
 3247|      0|            EncodedTerm::FloatLiteral(b) => Some(Float::from(*a) == *b),
 3248|      0|            EncodedTerm::DoubleLiteral(b) => Some(Double::from(*a) == *b),
 3249|      0|            EncodedTerm::IntegerLiteral(b) => Some(a == b),
 3250|      0|            EncodedTerm::DecimalLiteral(b) => Some(Decimal::from(*a) == *b),
 3251|      0|            _ if b.is_unknown_typed_literal() => None,
 3252|      0|            _ => Some(false),
 3253|       |        },
 3254|      0|        EncodedTerm::DecimalLiteral(a) => match b {
 3255|      0|            EncodedTerm::FloatLiteral(b) => Some(Float::from(*a) == *b),
 3256|      0|            EncodedTerm::DoubleLiteral(b) => Some(Double::from(*a) == *b),
 3257|      0|            EncodedTerm::IntegerLiteral(b) => Some(*a == (*b).into()),
 3258|      0|            EncodedTerm::DecimalLiteral(b) => Some(a == b),
 3259|      0|            _ if b.is_unknown_typed_literal() => None,
 3260|      0|            _ => Some(false),
 3261|       |        },
 3262|      0|        EncodedTerm::DateTimeLiteral(a) => match b {
 3263|      0|            EncodedTerm::DateTimeLiteral(b) => Some(a == b),
 3264|      0|            _ if b.is_unknown_typed_literal() => None,
 3265|      0|            _ => Some(false),
 3266|       |        },
 3267|      0|        EncodedTerm::TimeLiteral(a) => match b {
 3268|      0|            EncodedTerm::TimeLiteral(b) => Some(a == b),
 3269|      0|            _ if b.is_unknown_typed_literal() => None,
 3270|      0|            _ => Some(false),
 3271|       |        },
 3272|      0|        EncodedTerm::DateLiteral(a) => match b {
 3273|      0|            EncodedTerm::DateLiteral(b) => Some(a == b),
 3274|      0|            _ if b.is_unknown_typed_literal() => None,
 3275|      0|            _ => Some(false),
 3276|       |        },
 3277|      0|        EncodedTerm::GYearMonthLiteral(a) => match b {
 3278|      0|            EncodedTerm::GYearMonthLiteral(b) => Some(a == b),
 3279|      0|            _ if b.is_unknown_typed_literal() => None,
 3280|      0|            _ => Some(false),
 3281|       |        },
 3282|      0|        EncodedTerm::GYearLiteral(a) => match b {
 3283|      0|            EncodedTerm::GYearLiteral(b) => Some(a == b),
 3284|      0|            _ if b.is_unknown_typed_literal() => None,
 3285|      0|            _ => Some(false),
 3286|       |        },
 3287|      0|        EncodedTerm::GMonthDayLiteral(a) => match b {
 3288|      0|            EncodedTerm::GMonthDayLiteral(b) => Some(a == b),
 3289|      0|            _ if b.is_unknown_typed_literal() => None,
 3290|      0|            _ => Some(false),
 3291|       |        },
 3292|      0|        EncodedTerm::GDayLiteral(a) => match b {
 3293|      0|            EncodedTerm::GDayLiteral(b) => Some(a == b),
 3294|      0|            _ if b.is_unknown_typed_literal() => None,
 3295|      0|            _ => Some(false),
 3296|       |        },
 3297|      0|        EncodedTerm::GMonthLiteral(a) => match b {
 3298|      0|            EncodedTerm::GMonthLiteral(b) => Some(a == b),
 3299|      0|            _ if b.is_unknown_typed_literal() => None,
 3300|      0|            _ => Some(false),
 3301|       |        },
 3302|      0|        EncodedTerm::DurationLiteral(a) => match b {
 3303|      0|            EncodedTerm::DurationLiteral(b) => Some(a == b),
 3304|      0|            EncodedTerm::YearMonthDurationLiteral(b) => Some(a == b),
 3305|      0|            EncodedTerm::DayTimeDurationLiteral(b) => Some(a == b),
 3306|      0|            _ if b.is_unknown_typed_literal() => None,
 3307|      0|            _ => Some(false),
 3308|       |        },
 3309|      0|        EncodedTerm::YearMonthDurationLiteral(a) => match b {
 3310|      0|            EncodedTerm::DurationLiteral(b) => Some(a == b),
 3311|      0|            EncodedTerm::YearMonthDurationLiteral(b) => Some(a == b),
 3312|      0|            EncodedTerm::DayTimeDurationLiteral(b) => Some(a == b),
 3313|      0|            _ if b.is_unknown_typed_literal() => None,
 3314|      0|            _ => Some(false),
 3315|       |        },
 3316|      0|        EncodedTerm::DayTimeDurationLiteral(a) => match b {
 3317|      0|            EncodedTerm::DurationLiteral(b) => Some(a == b),
 3318|      0|            EncodedTerm::YearMonthDurationLiteral(b) => Some(a == b),
 3319|      0|            EncodedTerm::DayTimeDurationLiteral(b) => Some(a == b),
 3320|      0|            _ if b.is_unknown_typed_literal() => None,
 3321|      0|            _ => Some(false),
 3322|       |        },
 3323|      0|        EncodedTerm::Triple(a) => {
 3324|      0|            if let EncodedTerm::Triple(b) = b {
 3325|       |                Some(
 3326|      0|                    equals(&a.subject, &b.subject)?
 3327|      0|                        && equals(&a.predicate, &b.predicate)?
 3328|      0|                        && equals(&a.object, &b.object)?,
 3329|       |                )
 3330|       |            } else {
 3331|      0|                Some(false)
 3332|       |            }
 3333|       |        }
 3334|       |    }
 3335|      9|}
_RNvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval33are_compatible_and_not_disjointed:
 3957|      4|pub fn are_compatible_and_not_disjointed(a: &EncodedTuple, b: &EncodedTuple) -> bool {
 3958|      4|    let mut found_intersection = false;
 3959|      4|    for (a_value, b_value) in a.iter().zip(b.iter()) {
 3960|      0|        if let (Some(a_value), Some(b_value)) = (a_value, b_value) {
 3961|      0|            if a_value != b_value {
 3962|      0|                return false;
 3963|      0|            }
 3964|      0|            found_intersection = true;
 3965|      0|        }
 3966|       |    }
 3967|      4|    found_intersection
 3968|      4|}
_RNvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13PathEvaluator32find_graphs_where_the_node_is_in:
 4714|      3|    fn find_graphs_where_the_node_is_in(
 4715|      3|        &self,
 4716|      3|        term: &EncodedTerm,
 4717|      3|    ) -> impl Iterator<Item = Result<EncodedTerm, EvaluationError>> {
 4718|      3|        self.dataset
 4719|      3|            .encoded_quads_for_pattern(Some(term), None, None, None)
 4720|      3|            .chain(
 4721|      3|                self.dataset
 4722|      3|                    .encoded_quads_for_pattern(None, None, Some(term), None),
 4723|      3|            )
 4724|      3|            .map(|q| Ok(q?.graph_name))
 4725|      3|    }
_RNvMs2_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13TupleSelector17get_pattern_value:
 3894|  79.9k|    fn get_pattern_value(&self, tuple: &EncodedTuple) -> Option<EncodedTerm> {
 3895|  79.9k|        match self {
 3896|  33.6k|            Self::Constant(c) => Some(c.clone()),
 3897|  46.2k|            Self::Variable(v) => tuple.get(*v).cloned(),
 3898|      0|            Self::TriplePattern(triple) => Some(
 3899|      0|                EncodedTriple {
 3900|      0|                    subject: triple.subject.get_pattern_value(tuple)?,
 3901|      0|                    predicate: triple.predicate.get_pattern_value(tuple)?,
 3902|      0|                    object: triple.object.get_pattern_value(tuple)?,
 3903|       |                }
 3904|      0|                .into(),
 3905|       |            ),
 3906|       |        }
 3907|  79.9k|    }
_RNvXsL_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13PathEvaluatorNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
 3981|  3.37k|#[derive(Clone)]
_RNvXs5_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_16HashJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 4772|      6|    fn next(&mut self) -> Option<Self::Item> {
 4773|       |        loop {
 4774|      6|            if let Some(result) = self.buffered_results.pop() {
 4775|      0|                return Some(result);
 4776|      6|            }
 4777|      6|            let probe_tuple = match self.probe_iter.next()? {
 4778|      0|                Ok(probe_tuple) => probe_tuple,
 4779|      0|                Err(error) => return Some(Err(error)),
 4780|       |            };
 4781|      0|            self.buffered_results.extend(
 4782|      0|                self.built
 4783|      0|                    .get(&probe_tuple)
 4784|      0|                    .iter()
 4785|      0|                    .filter_map(|built_tuple| probe_tuple.combine_with(built_tuple).map(Ok)),
 4786|      0|            )
 4787|       |        }
 4788|      6|    }
_RNvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13PathEvaluator16eval_to_in_graph:
 4320|    763|    fn eval_to_in_graph(
 4321|    763|        &self,
 4322|    763|        path: &PropertyPath,
 4323|    763|        end: &EncodedTerm,
 4324|    763|        graph_name: &EncodedTerm,
 4325|    763|    ) -> Box<dyn Iterator<Item = Result<EncodedTerm, EvaluationError>>> {
 4326|    763|        match path {
 4327|     91|            PropertyPath::Path(p) => Box::new(
 4328|     91|                self.dataset
 4329|     91|                    .encoded_quads_for_pattern(None, Some(p), Some(end), Some(graph_name))
 4330|     91|                    .map(|t| Ok(t?.subject)),
 4331|     91|            ),
 4332|    337|            PropertyPath::Reverse(p) => self.eval_from_in_graph(p, end, graph_name),
 4333|     86|            PropertyPath::Sequence(a, b) => {
 4334|     86|                let eval = self.clone();
 4335|     86|                let a = Rc::clone(a);
 4336|     86|                let graph_name2 = graph_name.clone();
 4337|     86|                Box::new(
 4338|     86|                    self.eval_to_in_graph(b, end, graph_name)
 4339|     86|                        .flat_map_ok(move |middle| {
 4340|       |                            eval.eval_to_in_graph(&a, &middle, &graph_name2)
 4341|     86|                        }),
 4342|     86|                )
 4343|       |            }
 4344|     95|            PropertyPath::Alternative(a, b) => Box::new(hash_deduplicate(
 4345|     95|                self.eval_to_in_graph(a, end, graph_name)
 4346|     95|                    .chain(self.eval_to_in_graph(b, end, graph_name)),
 4347|     95|            )),
 4348|     31|            PropertyPath::ZeroOrMore(p) => {
 4349|     31|                self.run_if_term_is_a_graph_node(end, graph_name, || {
 4350|       |                    let eval = self.clone();
 4351|       |                    let p = Rc::clone(p);
 4352|       |                    let graph_name2 = graph_name.clone();
 4353|       |                    transitive_closure(Some(Ok(end.clone())), move |e| {
 4354|       |                        eval.eval_to_in_graph(&p, &e, &graph_name2)
 4355|       |                    })
 4356|     31|                })
 4357|       |            }
 4358|     19|            PropertyPath::OneOrMore(p) => {
 4359|     19|                let eval = self.clone();
 4360|     19|                let p = Rc::clone(p);
 4361|     19|                let graph_name2 = graph_name.clone();
 4362|     19|                Box::new(transitive_closure(
 4363|     19|                    self.eval_to_in_graph(&p, end, graph_name),
 4364|     19|                    move |e| eval.eval_to_in_graph(&p, &e, &graph_name2),
 4365|     19|                ))
 4366|       |            }
 4367|     68|            PropertyPath::ZeroOrOne(p) => self.run_if_term_is_a_graph_node(end, graph_name, || {
 4368|       |                hash_deduplicate(
 4369|       |                    once(Ok(end.clone())).chain(self.eval_to_in_graph(p, end, graph_name)),
 4370|       |                )
 4371|     68|            }),
 4372|     36|            PropertyPath::NegatedPropertySet(ps) => {
 4373|     36|                let ps = Rc::clone(ps);
 4374|     36|                Box::new(
 4375|     36|                    self.dataset
 4376|     36|                        .encoded_quads_for_pattern(None, None, Some(end), Some(graph_name))
 4377|     36|                        .filter_map(move |t| match t {
 4378|       |                            Ok(t) => {
 4379|       |                                if ps.iter().any(|p| *p == t.predicate) {
 4380|       |                                    None
 4381|       |                                } else {
 4382|       |                                    Some(Ok(t.subject))
 4383|       |                                }
 4384|       |                            }
 4385|       |                            Err(e) => Some(Err(e)),
 4386|     36|                        }),
 4387|     36|                )
 4388|       |            }
 4389|       |        }
 4390|    763|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB2_12EncodedTuple3get:
   63|  51.8k|    pub fn get(&self, index: usize) -> Option<&EncodedTerm> {
   64|  51.8k|        self.inner.get(index).unwrap_or(&None).as_ref()
   65|  51.8k|    }
_RNvMsw_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_15EncodedTupleSet6insert:
 5600|     62|    fn insert(&mut self, tuple: EncodedTuple) {
 5601|     62|        self.map
 5602|     62|            .entry(self.tuple_key(&tuple))
 5603|     62|            .or_default()
 5604|     62|            .push(tuple);
 5605|     62|        self.len += 1;
 5606|     62|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB2_12EncodedTuple8contains:
   59|     34|    pub fn contains(&self, index: usize) -> bool {
   60|     34|        self.inner.get(index).map_or(false, Option::is_some)
   61|     34|    }
_RNvMsw_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_15EncodedTupleSet3new:
 5592|    252|    fn new(key: Vec<usize>) -> Self {
 5593|    252|        Self {
 5594|    252|            key,
 5595|    252|            map: HashMap::new(),
 5596|    252|            len: 0,
 5597|    252|        }
 5598|    252|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB2_12EncodedTuple8capacity:
   55|      8|    pub fn capacity(&self) -> usize {
   56|      8|        self.inner.capacity()
   57|      8|    }
_RNvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13PathEvaluator47get_subject_or_object_identity_pairs_in_dataset:
 4646|     49|    fn get_subject_or_object_identity_pairs_in_dataset(
 4647|     49|        &self,
 4648|     49|    ) -> impl Iterator<Item = Result<(EncodedTerm, EncodedTerm, EncodedTerm), EvaluationError>>
 4649|     49|    {
 4650|     49|        self.dataset
 4651|     49|            .encoded_quads_for_pattern(None, None, None, None)
 4652|     49|            .flat_map_ok(|t| {
 4653|       |                [
 4654|       |                    Ok((t.subject.clone(), t.subject, t.graph_name.clone())),
 4655|       |                    Ok((t.object.clone(), t.object, t.graph_name)),
 4656|       |                ]
 4657|     49|            })
 4658|     49|    }
_RNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_15SimpleEvaluator20encode_property_path:
 2786|  69.8k|    fn encode_property_path(&self, path: &PropertyPathExpression) -> Rc<PropertyPath> {
 2787|  69.8k|        Rc::new(match path {
 2788|  17.9k|            PropertyPathExpression::NamedNode(node) => PropertyPath::Path(self.encode_term(node)),
 2789|  22.1k|            PropertyPathExpression::Reverse(p) => {
 2790|  22.1k|                PropertyPath::Reverse(self.encode_property_path(p))
 2791|       |            }
 2792|  7.97k|            PropertyPathExpression::Sequence(a, b) => {
 2793|  7.97k|                PropertyPath::Sequence(self.encode_property_path(a), self.encode_property_path(b))
 2794|       |            }
 2795|  3.56k|            PropertyPathExpression::Alternative(a, b) => PropertyPath::Alternative(
 2796|  3.56k|                self.encode_property_path(a),
 2797|  3.56k|                self.encode_property_path(b),
 2798|  3.56k|            ),
 2799|  1.77k|            PropertyPathExpression::ZeroOrMore(p) => {
 2800|  1.77k|                PropertyPath::ZeroOrMore(self.encode_property_path(p))
 2801|       |            }
 2802|  3.97k|            PropertyPathExpression::OneOrMore(p) => {
 2803|  3.97k|                PropertyPath::OneOrMore(self.encode_property_path(p))
 2804|       |            }
 2805|  9.50k|            PropertyPathExpression::ZeroOrOne(p) => {
 2806|  9.50k|                PropertyPath::ZeroOrOne(self.encode_property_path(p))
 2807|       |            }
 2808|  3.01k|            PropertyPathExpression::NegatedPropertySet(ps) => {
 2809|  3.01k|                PropertyPath::NegatedPropertySet(ps.iter().map(|p| self.encode_term(p)).collect())
 2810|       |            }
 2811|       |        })
 2812|  69.8k|    }
_RNvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval11partial_cmp:
 3425|      4|fn partial_cmp(dataset: &DatasetView, a: &EncodedTerm, b: &EncodedTerm) -> Option<Ordering> {
 3426|      4|    if a == b {
 3427|      4|        Some(Ordering::Equal)
 3428|      0|    } else if let EncodedTerm::Triple(a) = a {
 3429|      0|        if let EncodedTerm::Triple(b) = b {
 3430|      0|            match partial_cmp(dataset, &a.subject, &b.subject) {
 3431|      0|                Some(Ordering::Equal) => match partial_cmp(dataset, &a.predicate, &b.predicate) {
 3432|      0|                    Some(Ordering::Equal) => partial_cmp(dataset, &a.object, &b.object),
 3433|      0|                    o => o,
 3434|       |                },
 3435|      0|                o => o,
 3436|       |            }
 3437|       |        } else {
 3438|      0|            None
 3439|       |        }
 3440|       |    } else {
 3441|      0|        partial_cmp_literals(dataset, a, b)
 3442|       |    }
 3443|      4|}
_RNvMs2_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13TupleSelector24from_ground_term_pattern:
 3828|  78.7k|    fn from_ground_term_pattern(
 3829|  78.7k|        term_pattern: &GroundTermPattern,
 3830|  78.7k|        variables: &mut Vec<Variable>,
 3831|  78.7k|        dataset: &DatasetView,
 3832|  78.7k|    ) -> Self {
 3833|  78.7k|        match term_pattern {
 3834|  70.2k|            GroundTermPattern::Variable(variable) => {
 3835|  70.2k|                Self::Variable(encode_variable(variables, variable))
 3836|       |            }
 3837|  7.42k|            GroundTermPattern::NamedNode(term) => Self::Constant(dataset.encode_term(term)),
 3838|  1.09k|            GroundTermPattern::Literal(term) => Self::Constant(dataset.encode_term(term)),
 3839|      0|            GroundTermPattern::Triple(triple) => {
 3840|      0|                match (
 3841|      0|                    Self::from_ground_term_pattern(&triple.subject, variables, dataset),
 3842|      0|                    Self::from_named_node_pattern(&triple.predicate, variables, dataset),
 3843|      0|                    Self::from_ground_term_pattern(&triple.object, variables, dataset),
 3844|       |                ) {
 3845|       |                    (
 3846|      0|                        Self::Constant(subject),
 3847|      0|                        Self::Constant(predicate),
 3848|      0|                        Self::Constant(object),
 3849|      0|                    ) => Self::Constant(
 3850|      0|                        EncodedTriple {
 3851|      0|                            subject,
 3852|      0|                            predicate,
 3853|      0|                            object,
 3854|      0|                        }
 3855|      0|                        .into(),
 3856|      0|                    ),
 3857|      0|                    (subject, predicate, object) => {
 3858|      0|                        Self::TriplePattern(Rc::new(TripleTupleSelector {
 3859|      0|                            subject,
 3860|      0|                            predicate,
 3861|      0|                            object,
 3862|      0|                        }))
 3863|       |                    }
 3864|       |                }
 3865|       |            }
 3866|       |        }
 3867|  78.7k|    }
_RNvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13PathEvaluator20eval_closed_in_graph:
 3987|     56|    fn eval_closed_in_graph(
 3988|     56|        &self,
 3989|     56|        path: &PropertyPath,
 3990|     56|        start: &EncodedTerm,
 3991|     56|        end: &EncodedTerm,
 3992|     56|        graph_name: &EncodedTerm,
 3993|     56|    ) -> Result<bool, EvaluationError> {
 3994|     56|        Ok(match path {
 3995|     10|            PropertyPath::Path(p) => self
 3996|     10|                .dataset
 3997|     10|                .encoded_quads_for_pattern(Some(start), Some(p), Some(end), Some(graph_name))
 3998|     10|                .next()
 3999|     10|                .transpose()?
 4000|     10|                .is_some(),
 4001|     28|            PropertyPath::Reverse(p) => self.eval_closed_in_graph(p, end, start, graph_name)?,
 4002|      4|            PropertyPath::Sequence(a, b) => self
 4003|      4|                .eval_from_in_graph(a, start, graph_name)
 4004|      4|                .find_map(|middle| {
 4005|       |                    middle
 4006|       |                        .and_then(|middle| {
 4007|       |                            Ok(self
 4008|       |                                .eval_closed_in_graph(b, &middle, end, graph_name)?
 4009|       |                                .then_some(()))
 4010|       |                        })
 4011|       |                        .transpose()
 4012|      4|                })
 4013|      4|                .transpose()?
 4014|      4|                .is_some(),
 4015|      8|            PropertyPath::Alternative(a, b) => {
 4016|      8|                self.eval_closed_in_graph(a, start, end, graph_name)?
 4017|      8|                    || self.eval_closed_in_graph(b, start, end, graph_name)?
 4018|       |            }
 4019|      0|            PropertyPath::ZeroOrMore(p) => {
 4020|      0|                if start == end {
 4021|      0|                    self.is_subject_or_object_in_graph(start, graph_name)?
 4022|       |                } else {
 4023|      0|                    look_in_transitive_closure(
 4024|      0|                        self.eval_from_in_graph(p, start, graph_name),
 4025|      0|                        move |e| self.eval_from_in_graph(p, &e, graph_name),
 4026|      0|                        end,
 4027|      0|                    )?
 4028|       |                }
 4029|       |            }
 4030|      0|            PropertyPath::OneOrMore(p) => look_in_transitive_closure(
 4031|      0|                self.eval_from_in_graph(p, start, graph_name),
 4032|      0|                move |e| self.eval_from_in_graph(p, &e, graph_name),
 4033|      0|                end,
 4034|      0|            )?,
 4035|      6|            PropertyPath::ZeroOrOne(p) => {
 4036|      6|                if start == end {
 4037|      4|                    self.is_subject_or_object_in_graph(start, graph_name)
 4038|       |                } else {
 4039|      2|                    self.eval_closed_in_graph(p, start, end, graph_name)
 4040|      0|                }?
 4041|       |            }
 4042|      0|            PropertyPath::NegatedPropertySet(ps) => self
 4043|      0|                .dataset
 4044|      0|                .encoded_quads_for_pattern(Some(start), None, Some(end), Some(graph_name))
 4045|      0|                .find_map(move |t| match t {
 4046|       |                    Ok(t) => {
 4047|       |                        if ps.iter().any(|p| *p == t.predicate) {
 4048|       |                            None
 4049|       |                        } else {
 4050|       |                            Some(Ok(()))
 4051|       |                        }
 4052|       |                    }
 4053|       |                    Err(e) => Some(Err(e)),
 4054|      0|                })
 4055|      0|                .transpose()?
 4056|      0|                .is_some(),
 4057|       |        })
 4058|     56|    }
_RNvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13PathEvaluator29is_subject_or_object_in_graph:
 4678|    219|    fn is_subject_or_object_in_graph(
 4679|    219|        &self,
 4680|    219|        term: &EncodedTerm,
 4681|    219|        graph_name: &EncodedTerm,
 4682|    219|    ) -> Result<bool, EvaluationError> {
 4683|    219|        Ok(self
 4684|    219|            .dataset
 4685|    219|            .encoded_quads_for_pattern(Some(term), None, None, Some(graph_name))
 4686|    219|            .next()
 4687|    219|            .transpose()?
 4688|    219|            .is_some()
 4689|    219|            || self
 4690|    219|                .dataset
 4691|    219|                .encoded_quads_for_pattern(None, None, Some(term), Some(graph_name))
 4692|    219|                .next()
 4693|    219|                .transpose()?
 4694|    219|                .is_some())
 4695|    219|    }
_RNvXs4_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_28CartesianProductJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 4737|  18.3k|    fn next(&mut self) -> Option<Self::Item> {
 4738|       |        loop {
 4739|  18.3k|            if let Some(result) = self.buffered_results.pop() {
 4740|     10|                return Some(result);
 4741|  18.3k|            }
 4742|  18.3k|            let probe_tuple = match self.probe_iter.next()? {
 4743|     70|                Ok(probe_tuple) => probe_tuple,
 4744|      0|                Err(error) => return Some(Err(error)),
 4745|       |            };
 4746|     82|            for built_tuple in &self.built {
 4747|     12|                if let Some(result_tuple) = probe_tuple.combine_with(built_tuple) {
 4748|     10|                    self.buffered_results.push(Ok(result_tuple))
 4749|      2|                }
 4750|       |            }
 4751|       |        }
 4752|  18.3k|    }
_RNvXsH_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_12EncodedTupleNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   43|  20.0k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13PathEvaluator45get_subject_or_object_identity_pairs_in_graph:
 4632|  3.17k|    fn get_subject_or_object_identity_pairs_in_graph(
 4633|  3.17k|        &self,
 4634|  3.17k|        graph_name: &EncodedTerm,
 4635|  3.17k|    ) -> impl Iterator<Item = Result<(EncodedTerm, EncodedTerm), EvaluationError>> {
 4636|  3.17k|        self.dataset
 4637|  3.17k|            .encoded_quads_for_pattern(None, None, None, Some(graph_name))
 4638|  3.17k|            .flat_map_ok(|t| {
 4639|       |                [
 4640|       |                    Ok((t.subject.clone(), t.subject)),
 4641|       |                    Ok((t.object.clone(), t.object)),
 4642|       |                ]
 4643|  3.17k|            })
 4644|  3.17k|    }
_RNvXsK_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13TupleSelectorNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
 3820|  75.1k|#[derive(Clone)]
_RNvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13PathEvaluator18eval_from_in_graph:
 4158|    851|    fn eval_from_in_graph(
 4159|    851|        &self,
 4160|    851|        path: &PropertyPath,
 4161|    851|        start: &EncodedTerm,
 4162|    851|        graph_name: &EncodedTerm,
 4163|    851|    ) -> Box<dyn Iterator<Item = Result<EncodedTerm, EvaluationError>>> {
 4164|    851|        match path {
 4165|    117|            PropertyPath::Path(p) => Box::new(
 4166|    117|                self.dataset
 4167|    117|                    .encoded_quads_for_pattern(Some(start), Some(p), None, Some(graph_name))
 4168|    117|                    .map(|t| Ok(t?.object)),
 4169|    117|            ),
 4170|    325|            PropertyPath::Reverse(p) => self.eval_to_in_graph(p, start, graph_name),
 4171|    133|            PropertyPath::Sequence(a, b) => {
 4172|    133|                let eval = self.clone();
 4173|    133|                let b = Rc::clone(b);
 4174|    133|                let graph_name2 = graph_name.clone();
 4175|    133|                Box::new(
 4176|    133|                    self.eval_from_in_graph(a, start, graph_name)
 4177|    133|                        .flat_map_ok(move |middle| {
 4178|       |                            eval.eval_from_in_graph(&b, &middle, &graph_name2)
 4179|    133|                        }),
 4180|    133|                )
 4181|       |            }
 4182|     92|            PropertyPath::Alternative(a, b) => Box::new(hash_deduplicate(
 4183|     92|                self.eval_from_in_graph(a, start, graph_name)
 4184|     92|                    .chain(self.eval_from_in_graph(b, start, graph_name)),
 4185|     92|            )),
 4186|     19|            PropertyPath::ZeroOrMore(p) => {
 4187|     19|                self.run_if_term_is_a_graph_node(start, graph_name, || {
 4188|       |                    let eval = self.clone();
 4189|       |                    let p = Rc::clone(p);
 4190|       |                    let graph_name2 = graph_name.clone();
 4191|       |                    transitive_closure(Some(Ok(start.clone())), move |e| {
 4192|       |                        eval.eval_from_in_graph(&p, &e, &graph_name2)
 4193|       |                    })
 4194|     19|                })
 4195|       |            }
 4196|     37|            PropertyPath::OneOrMore(p) => {
 4197|     37|                let eval = self.clone();
 4198|     37|                let p = Rc::clone(p);
 4199|     37|                let graph_name2 = graph_name.clone();
 4200|     37|                Box::new(transitive_closure(
 4201|     37|                    self.eval_from_in_graph(&p, start, graph_name),
 4202|     37|                    move |e| eval.eval_from_in_graph(&p, &e, &graph_name2),
 4203|     37|                ))
 4204|       |            }
 4205|     97|            PropertyPath::ZeroOrOne(p) => {
 4206|     97|                self.run_if_term_is_a_graph_node(start, graph_name, || {
 4207|       |                    hash_deduplicate(
 4208|       |                        once(Ok(start.clone()))
 4209|       |                            .chain(self.eval_from_in_graph(p, start, graph_name)),
 4210|       |                    )
 4211|     97|                })
 4212|       |            }
 4213|     31|            PropertyPath::NegatedPropertySet(ps) => {
 4214|     31|                let ps = Rc::clone(ps);
 4215|     31|                Box::new(
 4216|     31|                    self.dataset
 4217|     31|                        .encoded_quads_for_pattern(Some(start), None, None, Some(graph_name))
 4218|     31|                        .filter_map(move |t| match t {
 4219|       |                            Ok(t) => {
 4220|       |                                if ps.iter().any(|p| *p == t.predicate) {
 4221|       |                                    None
 4222|       |                                } else {
 4223|       |                                    Some(Ok(t.object))
 4224|       |                                }
 4225|       |                            }
 4226|       |                            Err(e) => Some(Err(e)),
 4227|     31|                        }),
 4228|     31|                )
 4229|       |            }
 4230|       |        }
 4231|    851|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB2_12EncodedTuple3set:
   71|  5.82k|    pub fn set(&mut self, index: usize, value: EncodedTerm) {
   72|  5.82k|        if self.inner.len() <= index {
   73|    983|            self.inner.resize(index + 1, None);
   74|  4.83k|        }
   75|  5.82k|        self.inner[index] = Some(value);
   76|  5.82k|    }
_RNvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB5_13PathEvaluator26eval_open_in_unknown_graph:
 4557|    250|    fn eval_open_in_unknown_graph(
 4558|    250|        &self,
 4559|    250|        path: &PropertyPath,
 4560|    250|    ) -> Box<dyn Iterator<Item = Result<(EncodedTerm, EncodedTerm, EncodedTerm), EvaluationError>>>
 4561|    250|    {
 4562|    250|        match path {
 4563|     65|            PropertyPath::Path(p) => Box::new(
 4564|     65|                self.dataset
 4565|     65|                    .encoded_quads_for_pattern(None, Some(p), None, None)
 4566|     65|                    .map(|t| t.map(|t| (t.subject, t.object, t.graph_name))),
 4567|     65|            ),
 4568|     30|            PropertyPath::Reverse(p) => Box::new(
 4569|     30|                self.eval_open_in_unknown_graph(p)
 4570|     30|                    .map(|t| t.map(|(s, o, g)| (o, s, g))),
 4571|     30|            ),
 4572|     27|            PropertyPath::Sequence(a, b) => {
 4573|     27|                let eval = self.clone();
 4574|     27|                let b = Rc::clone(b);
 4575|     27|                Box::new(self.eval_open_in_unknown_graph(a).flat_map_ok(
 4576|     27|                    move |(start, middle, graph_name)| {
 4577|       |                        eval.eval_from_in_graph(&b, &middle, &graph_name)
 4578|       |                            .map(move |end| Ok((start.clone(), end?, graph_name.clone())))
 4579|     27|                    },
 4580|     27|                ))
 4581|       |            }
 4582|     25|            PropertyPath::Alternative(a, b) => Box::new(hash_deduplicate(
 4583|     25|                self.eval_open_in_unknown_graph(a)
 4584|     25|                    .chain(self.eval_open_in_unknown_graph(b)),
 4585|     25|            )),
 4586|     16|            PropertyPath::ZeroOrMore(p) => {
 4587|     16|                let eval = self.clone();
 4588|     16|                let p = Rc::clone(p);
 4589|     16|                Box::new(transitive_closure(
 4590|     16|                    self.get_subject_or_object_identity_pairs_in_dataset(),
 4591|     16|                    move |(start, middle, graph_name)| {
 4592|       |                        eval.eval_from_in_graph(&p, &middle, &graph_name)
 4593|       |                            .map(move |end| Ok((start.clone(), end?, graph_name.clone())))
 4594|     16|                    },
 4595|     16|                ))
 4596|       |            }
 4597|     21|            PropertyPath::OneOrMore(p) => {
 4598|     21|                let eval = self.clone();
 4599|     21|                let p = Rc::clone(p);
 4600|     21|                Box::new(transitive_closure(
 4601|     21|                    self.eval_open_in_unknown_graph(&p),
 4602|     21|                    move |(start, middle, graph_name)| {
 4603|       |                        eval.eval_from_in_graph(&p, &middle, &graph_name)
 4604|       |                            .map(move |end| Ok((start.clone(), end?, graph_name.clone())))
 4605|     21|                    },
 4606|     21|                ))
 4607|       |            }
 4608|     33|            PropertyPath::ZeroOrOne(p) => Box::new(hash_deduplicate(
 4609|     33|                self.get_subject_or_object_identity_pairs_in_dataset()
 4610|     33|                    .chain(self.eval_open_in_unknown_graph(p)),
 4611|     33|            )),
 4612|     33|            PropertyPath::NegatedPropertySet(ps) => {
 4613|     33|                let ps = Rc::clone(ps);
 4614|     33|                Box::new(
 4615|     33|                    self.dataset
 4616|     33|                        .encoded_quads_for_pattern(None, None, None, None)
 4617|     33|                        .filter_map(move |t| match t {
 4618|       |                            Ok(t) => {
 4619|       |                                if ps.iter().any(|p| *p == t.predicate) {
 4620|       |                                    None
 4621|       |                                } else {
 4622|       |                                    Some(Ok((t.subject, t.object, t.graph_name)))
 4623|       |                                }
 4624|       |                            }
 4625|       |                            Err(e) => Some(Err(e)),
 4626|     33|                        }),
 4627|     33|                )
 4628|       |            }
 4629|       |        }
 4630|    250|    }
_RINvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB6_13PathEvaluator29run_if_term_is_a_dataset_nodeTNtNtNtBa_7storage15numeric_encoder11EncodedTermB1z_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtB2u_6filter6FilterINtNtB2u_5chain5ChainINtNtNtB2w_7sources4once4OnceINtNtB2y_6result6ResultB1z_NtNtB8_5error15EvaluationErrorEEINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB2w_6traits8iterator8Iteratorp4ItemB4o_EL_EENCINvB6_16hash_deduplicateB1z_B3A_E0ENCNCNvB2_24eval_to_in_unknown_graphs2_00ENCB7o_s2_0EBa_:
 4697|      1|    fn run_if_term_is_a_dataset_node<
 4698|      1|        T: 'static,
 4699|      1|        I: IntoIterator<Item = Result<T, EvaluationError>> + 'static,
 4700|      1|    >(
 4701|      1|        &self,
 4702|      1|        term: &EncodedTerm,
 4703|      1|        f: impl FnMut(EncodedTerm) -> I + 'static,
 4704|      1|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4705|      1|        match self
 4706|      1|            .find_graphs_where_the_node_is_in(term)
 4707|      1|            .collect::<Result<HashSet<_>, _>>()
 4708|       |        {
 4709|      1|            Ok(graph_names) => Box::new(graph_names.into_iter().flat_map(f)),
 4710|      0|            Err(error) => Box::new(once(Err(error))),
 4711|       |        }
 4712|      1|    }
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval18transitive_closureTNtNtNtB6_7storage15numeric_encoder11EncodedTermB10_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1X_6traits8iterator8Iteratorp4ItemINtNtB1Z_6result6ResultB10_NtNtB4_5error15EvaluationErrorEEL_ENCNCNvMs3_B2_NtB2_13PathEvaluator24eval_to_in_unknown_graphs1_00EIB2F_DB3e_p4ItemIB3U_BZ_B4k_EEL_ENCB4X_s1_0EB6_:
 5120|      1|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|      1|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|      1|    mut next: impl FnMut(T) -> NI,
 5123|      1|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|      1|    let mut errors = Vec::new();
 5125|      1|    let mut todo = start
 5126|      1|        .into_iter()
 5127|      1|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|      1|        })
 5134|      1|        .collect::<Vec<_>>();
 5135|      1|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|      1|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|      1|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|      1|}
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsf_0Bb_:
  791|     40|                    .map(|child| {
  792|     40|                        let (child, child_stats) =
  793|     40|                            self.graph_pattern_evaluator(child, encoded_variables);
  794|     40|                        stat_children.push(child_stats);
  795|     40|                        child
  796|     40|                    })
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsd_0Bb_:
  748|    245|                        Rc::new(move |from| {
  749|    245|                            let mut errors = Vec::default();
  750|    245|                            let mut right_values = EncodedTupleSet::new(keys.clone());
  751|    245|                            right_values.extend(right(from.clone()).filter_map(
  752|    245|                                |result| match result {
  753|       |                                    Ok(result) => Some(result),
  754|       |                                    Err(error) => {
  755|       |                                        errors.push(Err(error));
  756|       |                                        None
  757|       |                                    }
  758|    245|                                },
  759|    245|                            ));
  760|    245|                            Box::new(HashLeftJoinIterator {
  761|    245|                                left_iter: left(from),
  762|    245|                                right: right_values,
  763|    245|                                buffered_results: errors,
  764|    245|                                expression: Rc::clone(&expression),
  765|    245|                            })
  766|    245|                        })
_RNCNvXs6_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_20HashLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hint0Bb_:
 4845|    214|                .map(|v| v.saturating_mul(self.right.len())),
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluators6_00Bd_:
  618|      1|                                built_values.extend(build(from.clone()).filter_map(|result| {
  619|      1|                                    match result {
  620|      1|                                        Ok(result) => Some(result),
  621|      0|                                        Err(error) => {
  622|      0|                                            errors.push(Err(error));
  623|      0|                                            None
  624|       |                                        }
  625|       |                                    }
  626|      1|                                }));
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval18transitive_closureNtNtNtB6_7storage15numeric_encoder11EncodedTermINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2s_6result6ResultBZ_NtNtB4_5error15EvaluationErrorEEL_EB1K_NCNvMs3_B2_NtB2_13PathEvaluator18eval_from_in_graphs1_0EB6_:
 5120|     37|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|     37|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|     37|    mut next: impl FnMut(T) -> NI,
 5123|     37|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|     37|    let mut errors = Vec::new();
 5125|     37|    let mut todo = start
 5126|     37|        .into_iter()
 5127|     37|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|     37|        })
 5134|     37|        .collect::<Vec<_>>();
 5135|     37|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|     37|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|     37|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|     37|}
_RNCNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtBb_15SimpleEvaluator29build_graph_pattern_evaluatorsu_0s0_00Bf_:
 1017|     30|                                .map(|v| tuple.get(*v).cloned())
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators1_0Bb_:
 1159|     34|                Rc::new(move |tuple| Some(tuple.contains(v).into()))
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsk_0Bb_:
 1420|     10|                    .map(|e| self.expression_evaluator(e, encoded_variables, stat_children))
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsn_0Bb_:
 1452|      2|                        Rc::new(move |tuple| {
 1453|      2|                            Some(build_string_literal_from_id(to_string_id(
 1454|      2|                                &dataset,
 1455|      2|                                &e(tuple)?,
 1456|      0|                            )?))
 1457|      2|                        })
_RNCNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtBb_15SimpleEvaluator29build_graph_pattern_evaluatorse_000Bf_:
  781|      2|                                .and_then(|term| to_bool(&term))
_RINvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB6_15SimpleEvaluator11encode_termRNtNtCshJ9d6mhVUZV_5oxrdf7literal7LiteralEBa_:
 2766|  3.34k|    fn encode_term<'b>(&self, term: impl Into<TermRef<'b>>) -> EncodedTerm {
 2767|  3.34k|        self.dataset.encode_term(term)
 2768|  3.34k|    }
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsl_0Bb_:
  896|  2.07k|                Rc::new(move |from| {
  897|  2.07k|                    Box::new(ConsecutiveDeduplication {
  898|  2.07k|                        inner: child(from),
  899|  2.07k|                        current: None,
  900|  2.07k|                    })
  901|  2.07k|                })
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsg_0Bb_:
  799|     20|                Rc::new(move |from| {
  800|     20|                    Box::new(UnionIterator {
  801|     20|                        plans: children.clone(),
  802|     20|                        input: from,
  803|     20|                        current_iterator: Box::new(empty()),
  804|     20|                        current_plan: 0,
  805|     20|                    })
  806|     20|                })
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators3_0Bb_:
 1169|     48|                    .map(|i| self.expression_evaluator(i, encoded_variables, stat_children))
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsm_0Bb_:
 1435|    188|                Rc::new(move |tuple| {
 1436|    188|                    if to_bool(&a(tuple)?)? {
 1437|      0|                        b(tuple)
 1438|       |                    } else {
 1439|      1|                        c(tuple)
 1440|       |                    }
 1441|    188|                })
_RINvXsI_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB6_12EncodedTupleNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEBa_:
   43|    665|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNCNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtBb_15SimpleEvaluator29build_graph_pattern_evaluators9_000Bf_:
  692|      4|                                        !right.iter().any(|right_tuple| {
  693|      4|                                            are_compatible_and_not_disjointed(
  694|      4|                                                left_tuple,
  695|      4|                                                right_tuple,
  696|      4|                                            )
  697|      4|                                        })
_RINvXsx_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB6_15EncodedTupleSetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendNtB6_12EncodedTupleE6extendINtNtNtB1c_8adapters10filter_map9FilterMapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtB1a_8iterator8Iteratorp4ItemINtNtB1e_6result6ResultB1Y_NtNtB8_5error15EvaluationErrorEEL_ENCNCNvMs0_B6_NtB6_15SimpleEvaluator29build_graph_pattern_evaluators6_00EEBa_:
 5628|      6|    fn extend<T: IntoIterator<Item = EncodedTuple>>(&mut self, iter: T) {
 5629|      6|        let iter = iter.into_iter();
 5630|      6|        self.map.reserve(iter.size_hint().0);
 5631|      7|        for tuple in iter {
 5632|      1|            self.insert(tuple);
 5633|      1|        }
 5634|      6|    }
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorse_0Bb_:
  776|     30|                Rc::new(move |from| {
  777|     30|                    let expression = Rc::clone(&expression);
  778|     30|                    Box::new(child(from).filter(move |tuple| {
  779|       |                        match tuple {
  780|       |                            Ok(tuple) => expression(tuple)
  781|       |                                .and_then(|term| to_bool(&term))
  782|       |                                .unwrap_or(false),
  783|       |                            Err(_) => true,
  784|       |                        }
  785|     30|                    }))
  786|     30|                })
_RINvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB6_13PathEvaluator27run_if_term_is_a_graph_nodeNtNtNtBa_7storage15numeric_encoder11EncodedTermINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters6filter6FilterINtNtB2m_5chain5ChainINtNtNtB2o_7sources4once4OnceINtNtB2q_6result6ResultB1w_NtNtB8_5error15EvaluationErrorEEINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB2o_6traits8iterator8Iteratorp4ItemB3Z_EL_EENCINvB6_16hash_deduplicateB1w_B3b_E0ENCNvB2_16eval_to_in_graphs2_0EBa_:
 4660|     68|    fn run_if_term_is_a_graph_node<
 4661|     68|        T: 'static,
 4662|     68|        I: Iterator<Item = Result<T, EvaluationError>> + 'static,
 4663|     68|    >(
 4664|     68|        &self,
 4665|     68|        term: &EncodedTerm,
 4666|     68|        graph_name: &EncodedTerm,
 4667|     68|        f: impl FnOnce() -> I,
 4668|     68|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4669|     68|        match self.is_subject_or_object_in_graph(term, graph_name) {
 4670|      0|            Ok(true) => Box::new(f()),
 4671|       |            Ok(false) => {
 4672|     68|                Box::new(empty()) // Not in the database
 4673|       |            }
 4674|      0|            Err(error) => Box::new(once(Err(error))),
 4675|       |        }
 4676|     68|    }
_RINvXsx_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB6_15EncodedTupleSetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendNtB6_12EncodedTupleE6extendINtNtNtB1c_8adapters10filter_map9FilterMapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtB1a_8iterator8Iteratorp4ItemINtNtB1e_6result6ResultB1Y_NtNtB8_5error15EvaluationErrorEEL_ENCNCNvMs0_B6_NtB6_15SimpleEvaluator29build_graph_pattern_evaluatorsd_00EEBa_:
 5628|    245|    fn extend<T: IntoIterator<Item = EncodedTuple>>(&mut self, iter: T) {
 5629|    245|        let iter = iter.into_iter();
 5630|    245|        self.map.reserve(iter.size_hint().0);
 5631|    306|        for tuple in iter {
 5632|     61|            self.insert(tuple);
 5633|     61|        }
 5634|    245|    }
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators2_0Bb_:
 1164|      3|                Rc::new(move |tuple| Some(eval(tuple.clone()).next().is_some().into()))
_RINvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB6_13PathEvaluator29run_if_term_is_a_dataset_nodeTNtNtNtBa_7storage15numeric_encoder11EncodedTermB1z_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtB2u_5chain5ChainIB2q_INtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterNtNtB8_5error15EvaluationErrorENcNtINtNtB2y_6result6ResultB1z_B4r_E3Err0EIB2q_INtNtNtNtCsc4CYCHgsNRQ_3std11collections4hash3set8IntoIterB1z_ENcNtB50_2Ok0EENCNCNvB2_26eval_from_in_unknown_graphs0_0s_0ENCB70_s0_0EBa_:
 4697|      2|    fn run_if_term_is_a_dataset_node<
 4698|      2|        T: 'static,
 4699|      2|        I: IntoIterator<Item = Result<T, EvaluationError>> + 'static,
 4700|      2|    >(
 4701|      2|        &self,
 4702|      2|        term: &EncodedTerm,
 4703|      2|        f: impl FnMut(EncodedTerm) -> I + 'static,
 4704|      2|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4705|      2|        match self
 4706|      2|            .find_graphs_where_the_node_is_in(term)
 4707|      2|            .collect::<Result<HashSet<_>, _>>()
 4708|       |        {
 4709|      2|            Ok(graph_names) => Box::new(graph_names.into_iter().flat_map(f)),
 4710|      0|            Err(error) => Box::new(once(Err(error))),
 4711|       |        }
 4712|      2|    }
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators5_0Bb_:
 1190|    365|                    .map(|i| self.expression_evaluator(i, encoded_variables, stat_children))
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorsh_00Bd_:
  821|    388|                    Box::new(child(from).map(move |tuple| {
  822|    388|                        let mut tuple = tuple?;
  823|    388|                        if let Some(value) = expression(&tuple) {
  824|      6|                            tuple.set(position, value);
  825|    382|                        }
  826|    388|                        Ok(tuple)
  827|    388|                    }))
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval16hash_deduplicateNtB2_12EncodedTupleINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB1Y_6result6ResultBX_NtNtB4_5error15EvaluationErrorEEL_EEB6_:
 5175|  1.09k|fn hash_deduplicate<T: Eq + Hash + Clone>(
 5176|  1.09k|    iter: impl Iterator<Item = Result<T, EvaluationError>>,
 5177|  1.09k|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5178|  1.09k|    let mut already_seen = HashSet::with_capacity(iter.size_hint().0);
 5179|  1.09k|    iter.filter(move |e| {
 5180|       |        if let Ok(e) = e {
 5181|       |            if already_seen.contains(e) {
 5182|       |                false
 5183|       |            } else {
 5184|       |                already_seen.insert(e.clone());
 5185|       |                true
 5186|       |            }
 5187|       |        } else {
 5188|       |            true
 5189|       |        }
 5190|  1.09k|    })
 5191|  1.09k|}
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsp_0Bb_:
  933|  1.46k|                Rc::new(move |from| {
  934|  1.46k|                    let mapping = Rc::clone(&mapping);
  935|  1.46k|                    let mut input_tuple = EncodedTuple::with_capacity(mapping.len());
  936|  2.42k|                    for (input_key, output_key) in &*mapping {
  937|  2.42k|                        if let Some(value) = from.get(*output_key) {
  938|      0|                            input_tuple.set(*input_key, value.clone());
  939|  2.42k|                        }
  940|       |                    }
  941|  1.46k|                    Box::new(child(input_tuple).filter_map(move |tuple| {
  942|       |                        match tuple {
  943|       |                            Ok(tuple) => {
  944|       |                                let mut output_tuple = from.clone();
  945|       |                                for (input_key, output_key) in &*mapping {
  946|       |                                    if let Some(value) = tuple.get(*input_key) {
  947|       |                                        if let Some(existing_value) = output_tuple.get(*output_key)
  948|       |                                        {
  949|       |                                            if existing_value != value {
  950|       |                                                return None; // Conflict
  951|       |                                            }
  952|       |                                        } else {
  953|       |                                            output_tuple.set(*output_key, value.clone());
  954|       |                                        }
  955|       |                                    }
  956|       |                                }
  957|       |                                Some(Ok(output_tuple))
  958|       |                            }
  959|       |                            Err(e) => Some(Err(e)),
  960|       |                        }
  961|  1.46k|                    }))
  962|  1.46k|                })
_RNCNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtBb_15SimpleEvaluator29build_graph_pattern_evaluatorsu_0s0_0s_0Bf_:
 1021|      6|                                accumulators_for_group.entry(key).or_insert_with(|| {
 1022|      6|                                    accumulator_builders.iter().map(|c| c()).collect::<Vec<_>>()
 1023|      6|                                });
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval16hash_deduplicateTNtNtNtB6_7storage15numeric_encoder11EncodedTermBY_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1U_6traits8iterator8Iteratorp4ItemINtNtB1W_6result6ResultBX_NtNtB4_5error15EvaluationErrorEEL_EB2F_EEB6_:
 5175|    921|fn hash_deduplicate<T: Eq + Hash + Clone>(
 5176|    921|    iter: impl Iterator<Item = Result<T, EvaluationError>>,
 5177|    921|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5178|    921|    let mut already_seen = HashSet::with_capacity(iter.size_hint().0);
 5179|    921|    iter.filter(move |e| {
 5180|       |        if let Ok(e) = e {
 5181|       |            if already_seen.contains(e) {
 5182|       |                false
 5183|       |            } else {
 5184|       |                already_seen.insert(e.clone());
 5185|       |                true
 5186|       |            }
 5187|       |        } else {
 5188|       |            true
 5189|       |        }
 5190|    921|    })
 5191|    921|}
_RNvXsf_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtB5_9FlatMapOkNtNtNtB9_7storage15numeric_encoder11EncodedQuadTNtB10_11EncodedTermB1K_EINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2Q_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator45get_subject_or_object_identity_pairs_in_graph0AIB3K_B1J_B49_Ej2_EB2I_4nextB9_:
 5235|  3.17k|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|  3.17k|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|  3.17k|            }
 5242|  3.17k|            self.current = None;
 5243|  3.17k|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|  3.17k|    }
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators_0Bb_:
  298|  2.16k|                    .map(|row| {
  299|  2.16k|                        let mut result = EncodedTuple::with_capacity(variables.len());
  300|  7.00k|                        for (key, value) in row.iter().enumerate() {
  301|  7.00k|                            if let Some(term) = value {
  302|  5.34k|                                result.set(
  303|  5.34k|                                    encoding[key],
  304|  5.34k|                                    match term {
  305|  4.85k|                                        GroundTerm::NamedNode(node) => self.encode_term(node),
  306|    484|                                        GroundTerm::Literal(literal) => self.encode_term(literal),
  307|      0|                                        GroundTerm::Triple(triple) => self.encode_triple(triple),
  308|       |                                    },
  309|       |                                );
  310|  1.66k|                            }
  311|       |                        }
  312|  2.16k|                        result
  313|  2.16k|                    })
_RNCNvXs4_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_28CartesianProductJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator9size_hint0Bb_:
 4758|     48|            max.map(|v| v.saturating_mul(self.built.len())),
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorse_0Bb_:
 1314|    407|                Rc::new(move |tuple| {
 1315|    407|                    Some(match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1316|      0|                        NumericBinaryOperands::Float(v1, v2) => (v1 - v2).into(),
 1317|      0|                        NumericBinaryOperands::Double(v1, v2) => (v1 - v2).into(),
 1318|      0|                        NumericBinaryOperands::Integer(v1, v2) => v1.checked_sub(v2)?.into(),
 1319|     15|                        NumericBinaryOperands::Decimal(v1, v2) => v1.checked_sub(v2)?.into(),
 1320|      0|                        NumericBinaryOperands::DateTime(v1, v2) => v1.checked_sub(v2)?.into(),
 1321|      0|                        NumericBinaryOperands::Date(v1, v2) => v1.checked_sub(v2)?.into(),
 1322|      0|                        NumericBinaryOperands::Time(v1, v2) => v1.checked_sub(v2)?.into(),
 1323|      0|                        NumericBinaryOperands::Duration(v1, v2) => v1.checked_sub(v2)?.into(),
 1324|      0|                        NumericBinaryOperands::YearMonthDuration(v1, v2) => {
 1325|      0|                            v1.checked_sub(v2)?.into()
 1326|       |                        }
 1327|      0|                        NumericBinaryOperands::DayTimeDuration(v1, v2) => {
 1328|      0|                            v1.checked_sub(v2)?.into()
 1329|       |                        }
 1330|      0|                        NumericBinaryOperands::DateTimeDuration(v1, v2) => {
 1331|      0|                            v1.checked_sub_duration(v2)?.into()
 1332|       |                        }
 1333|      0|                        NumericBinaryOperands::DateTimeYearMonthDuration(v1, v2) => {
 1334|      0|                            v1.checked_sub_year_month_duration(v2)?.into()
 1335|       |                        }
 1336|      0|                        NumericBinaryOperands::DateTimeDayTimeDuration(v1, v2) => {
 1337|      0|                            v1.checked_sub_day_time_duration(v2)?.into()
 1338|       |                        }
 1339|      0|                        NumericBinaryOperands::DateDuration(v1, v2) => {
 1340|      0|                            v1.checked_sub_duration(v2)?.into()
 1341|       |                        }
 1342|      0|                        NumericBinaryOperands::DateYearMonthDuration(v1, v2) => {
 1343|      0|                            v1.checked_sub_year_month_duration(v2)?.into()
 1344|       |                        }
 1345|      0|                        NumericBinaryOperands::DateDayTimeDuration(v1, v2) => {
 1346|      0|                            v1.checked_sub_day_time_duration(v2)?.into()
 1347|       |                        }
 1348|      0|                        NumericBinaryOperands::TimeDuration(v1, v2) => {
 1349|      0|                            v1.checked_sub_duration(v2)?.into()
 1350|       |                        }
 1351|      0|                        NumericBinaryOperands::TimeDayTimeDuration(v1, v2) => {
 1352|      0|                            v1.checked_sub_day_time_duration(v2)?.into()
 1353|       |                        }
 1354|       |                    })
 1355|    407|                })
_RNCNCNvXs6_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_20HashLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nexts_00Bd_:
 4827|     48|                            .and_then(|term| to_bool(&term))
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval16hash_deduplicateNtNtNtB6_7storage15numeric_encoder11EncodedTermINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1P_6traits8iterator8Iteratorp4ItemINtNtB1R_6result6ResultBX_NtNtB4_5error15EvaluationErrorEEL_EB2A_EEB6_:
 5175|    187|fn hash_deduplicate<T: Eq + Hash + Clone>(
 5176|    187|    iter: impl Iterator<Item = Result<T, EvaluationError>>,
 5177|    187|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5178|    187|    let mut already_seen = HashSet::with_capacity(iter.size_hint().0);
 5179|    187|    iter.filter(move |e| {
 5180|       |        if let Ok(e) = e {
 5181|       |            if already_seen.contains(e) {
 5182|       |                false
 5183|       |            } else {
 5184|       |                already_seen.insert(e.clone());
 5185|       |                true
 5186|       |            }
 5187|       |        } else {
 5188|       |            true
 5189|       |        }
 5190|    187|    })
 5191|    187|}
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsk_0Bb_:
  891|  1.09k|                Rc::new(move |from| Box::new(hash_deduplicate(child(from))))
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval16hash_deduplicateTNtNtNtB6_7storage15numeric_encoder11EncodedTermBY_BY_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtB2_9FlatMapOkNtB10_11EncodedQuadBX_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1X_6traits8iterator8Iteratorp4ItemINtNtB1Z_6result6ResultB2Y_NtNtB4_5error15EvaluationErrorEEL_ENCNvMs3_B2_NtB2_13PathEvaluator47get_subject_or_object_identity_pairs_in_dataset0AIB4A_BX_B50_Ej2_EIB3l_DB3U_p4ItemB6T_EL_EEEB6_:
 5175|     33|fn hash_deduplicate<T: Eq + Hash + Clone>(
 5176|     33|    iter: impl Iterator<Item = Result<T, EvaluationError>>,
 5177|     33|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5178|     33|    let mut already_seen = HashSet::with_capacity(iter.size_hint().0);
 5179|     33|    iter.filter(move |e| {
 5180|       |        if let Ok(e) = e {
 5181|       |            if already_seen.contains(e) {
 5182|       |                false
 5183|       |            } else {
 5184|       |                already_seen.insert(e.clone());
 5185|       |                true
 5186|       |            }
 5187|       |        } else {
 5188|       |            true
 5189|       |        }
 5190|     33|    })
 5191|     33|}
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluator0Bb_:
  294|  4.42k|                    .map(|v| encode_variable(encoded_variables, v))
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsj_0Bb_:
 1415|    522|                Rc::new(move |tuple| to_bool(&e(tuple)?).map(|v| (!v).into()))
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval18transitive_closureTNtNtNtB6_7storage15numeric_encoder11EncodedTermB10_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1X_6traits8iterator8Iteratorp4ItemINtNtB1Z_6result6ResultB10_NtNtB4_5error15EvaluationErrorEEL_ENCNCNvMs3_B2_NtB2_13PathEvaluator18eval_open_in_graphs1_00EINtB2_9FlatMapOkNtB12_11EncodedQuadBZ_IB2F_DB3e_p4ItemIB3U_B66_B4k_EEL_ENCNvB4Z_45get_subject_or_object_identity_pairs_in_graph0AIB3U_BZ_B4k_Ej2_ENCB4X_s1_0EB6_:
 5120|    466|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|    466|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|    466|    mut next: impl FnMut(T) -> NI,
 5123|    466|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|    466|    let mut errors = Vec::new();
 5125|    466|    let mut todo = start
 5126|    466|        .into_iter()
 5127|    466|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|    466|        })
 5134|    466|        .collect::<Vec<_>>();
 5135|    466|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|    466|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|    466|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|    466|}
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators7_0Bb_:
 1211|    232|                Rc::new(move |tuple| equals(&a(tuple)?, &b(tuple)?).map(Into::into))
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsq_0Bb_:
  973|     34|                    .map(|k| encode_variable(encoded_variables, k))
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorsp_00Bd_:
  941|    873|                    Box::new(child(input_tuple).filter_map(move |tuple| {
  942|    873|                        match tuple {
  943|    873|                            Ok(tuple) => {
  944|    873|                                let mut output_tuple = from.clone();
  945|  1.07k|                                for (input_key, output_key) in &*mapping {
  946|  1.07k|                                    if let Some(value) = tuple.get(*input_key) {
  947|    418|                                        if let Some(existing_value) = output_tuple.get(*output_key)
  948|       |                                        {
  949|      0|                                            if existing_value != value {
  950|      0|                                                return None; // Conflict
  951|      0|                                            }
  952|    418|                                        } else {
  953|    418|                                            output_tuple.set(*output_key, value.clone());
  954|    418|                                        }
  955|    658|                                    }
  956|       |                                }
  957|    873|                                Some(Ok(output_tuple))
  958|       |                            }
  959|      0|                            Err(e) => Some(Err(e)),
  960|       |                        }
  961|    873|                    }))
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsl_0Bb_:
 1422|      4|                Rc::new(move |tuple| {
 1423|      4|                    for e in &l {
 1424|      0|                        if let Some(result) = e(tuple) {
 1425|      0|                            return Some(result);
 1426|      0|                        }
 1427|       |                    }
 1428|      4|                    None
 1429|      4|                })
_RNCNvMsw_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15EncodedTupleSet3get0Bb_:
 5609|     48|        self.map.get(&self.tuple_key(tuple)).map_or(&[], |v| v)
_RINvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB6_15SimpleEvaluator11encode_termRNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeEBa_:
 2766|  35.3k|    fn encode_term<'b>(&self, term: impl Into<TermRef<'b>>) -> EncodedTerm {
 2767|  35.3k|        self.dataset.encode_term(term)
 2768|  35.3k|    }
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsc_0Bb_:
  746|      2|                            .map(|v| encode_variable(encoded_variables, v))
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorsd_00Bd_:
  752|     61|                                |result| match result {
  753|     61|                                    Ok(result) => Some(result),
  754|      0|                                    Err(error) => {
  755|      0|                                        errors.push(Err(error));
  756|      0|                                        None
  757|       |                                    }
  758|     61|                                },
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators8_0Bb_:
  666|  17.0k|                Rc::new(move |from| {
  667|  17.0k|                    let right = Rc::clone(&right);
  668|  17.0k|                    Box::new(left(from).flat_map(move |t| match t {
  669|       |                        Ok(t) => right(t),
  670|       |                        Err(e) => Box::new(once(Err(e))),
  671|  17.0k|                    }))
  672|  17.0k|                })
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorse_00Bd_:
  778|     12|                    Box::new(child(from).filter(move |tuple| {
  779|     12|                        match tuple {
  780|     12|                            Ok(tuple) => expression(tuple)
  781|     12|                                .and_then(|term| to_bool(&term))
  782|     12|                                .unwrap_or(false),
  783|      0|                            Err(_) => true,
  784|       |                        }
  785|     12|                    }))
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators0_0Bb_:
  315|  1.88k|                Rc::new(move |from| {
  316|  1.88k|                    Box::new(
  317|  1.88k|                        encoded_tuples
  318|  1.88k|                            .iter()
  319|  1.88k|                            .filter_map(move |t| Some(Ok(t.combine_with(&from)?)))
  320|  1.88k|                            .collect::<Vec<_>>()
  321|  1.88k|                            .into_iter(),
  322|  1.88k|                    )
  323|  1.88k|                })
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators6_0Bb_:
 1192|     78|                Rc::new(move |tuple| {
 1193|     78|                    let mut error = false;
 1194|    161|                    for child in &*children {
 1195|    161|                        match child(tuple).and_then(|v| to_bool(&v)) {
 1196|      0|                            Some(true) => continue,
 1197|      2|                            Some(false) => return Some(false.into()),
 1198|    159|                            None => error = true,
 1199|       |                        }
 1200|       |                    }
 1201|     76|                    if error {
 1202|     76|                        None
 1203|       |                    } else {
 1204|      0|                        Some(true.into())
 1205|       |                    }
 1206|     78|                })
_RNCINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval11format_listNtNtCsjOdcKtOMjJI_5alloc6string6StringINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtB1B_3map3MapINtNtNtB1F_5slice4iter4IterNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableENvYB36_NtBW_8ToString9to_stringEIB2p_IB2G_TB36_NtNtCsj4YExd6TrWR_7sparopt7algebra19AggregateExpressionEENCNvB4_15eval_node_label0EEE0B8_:
 5845|     34|        .map(|v| v.to_string())
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval18transitive_closureTNtNtNtB6_7storage15numeric_encoder11EncodedTermB10_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1X_6traits8iterator8Iteratorp4ItemINtNtB1Z_6result6ResultB10_NtNtB4_5error15EvaluationErrorEEL_ENCNCNvMs3_B2_NtB2_13PathEvaluator18eval_open_in_graphs2_00EIB2F_DB3e_p4ItemIB3U_BZ_B4k_EEL_ENCB4X_s2_0EB6_:
 5120|    966|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|    966|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|    966|    mut next: impl FnMut(T) -> NI,
 5123|    966|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|    966|    let mut errors = Vec::new();
 5125|    966|    let mut todo = start
 5126|    966|        .into_iter()
 5127|    966|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|    966|        })
 5134|    966|        .collect::<Vec<_>>();
 5135|    966|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|    966|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|    966|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|    966|}
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsf_0Bb_:
 1361|     63|                    move |tuple| match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1362|      0|                        NumericBinaryOperands::Float(v1, v2) => Some((v1 * v2).into()),
 1363|      0|                        NumericBinaryOperands::Double(v1, v2) => Some((v1 * v2).into()),
 1364|      0|                        NumericBinaryOperands::Integer(v1, v2) => Some(v1.checked_mul(v2)?.into()),
 1365|     12|                        NumericBinaryOperands::Decimal(v1, v2) => Some(v1.checked_mul(v2)?.into()),
 1366|      0|                        _ => None,
 1367|     63|                    },
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval11format_listRNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableRINtNtCsjOdcKtOMjJI_5alloc3vec3VecBT_EEB6_:
 5842|  22.8k|fn format_list<T: ToString>(values: impl IntoIterator<Item = T>) -> String {
 5843|  22.8k|    values
 5844|  22.8k|        .into_iter()
 5845|  22.8k|        .map(|v| v.to_string())
 5846|  22.8k|        .collect::<Vec<_>>()
 5847|  22.8k|        .join(", ")
 5848|  22.8k|}
_RNvXsf_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtB5_9FlatMapOkTNtNtNtB9_7storage15numeric_encoder11EncodedTermBZ_EBY_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2z_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator18eval_open_in_graphs0_0INtNtNtB2x_8adapters3map3MapIB1S_DB2r_p4ItemIB3t_BZ_B3S_EEL_ENCNCB4t_s0_00EEB2r_4nextB9_:
 5235|  1.59k|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|  1.59k|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|  1.59k|            }
 5242|  1.59k|            self.current = None;
 5243|  1.59k|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|  1.59k|    }
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsb_0Bb_:
  708|      1|                            Rc::new(move |from| {
  709|      1|                                let mut right_values = EncodedTupleSet::new(keys.clone());
  710|      1|                                right_values.extend(right(from.clone()).filter_map(Result::ok));
  711|      1|                                Box::new(left(from).filter(move |left_tuple| {
  712|       |                                    if let Ok(left_tuple) = left_tuple {
  713|       |                                        !right_values.get(left_tuple).iter().any(|right_tuple| {
  714|       |                                            are_compatible_and_not_disjointed(
  715|       |                                                left_tuple,
  716|       |                                                right_tuple,
  717|       |                                            )
  718|       |                                        })
  719|       |                                    } else {
  720|       |                                        true
  721|       |                                    }
  722|      1|                                }))
  723|      1|                            })
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorso_0Bb_:
  929|  2.54k|                    .map(|(new_variable, variable)| {
  930|  2.54k|                        (new_variable, encode_variable(encoded_variables, variable))
  931|  2.54k|                    })
_RNCINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval11format_listRNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableRINtNtCsjOdcKtOMjJI_5alloc3vec3VecBV_EE0B8_:
 5845|  6.97k|        .map(|v| v.to_string())
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators9_0Bb_:
 1222|     20|                Rc::new(move |tuple| {
 1223|     20|                    Some(
 1224|     20|                        (partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? == Ordering::Greater)
 1225|      0|                            .into(),
 1226|       |                    )
 1227|     20|                })
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsh_0Bb_:
  819|    431|                Rc::new(move |from| {
  820|    431|                    let expression = Rc::clone(&expression);
  821|    431|                    Box::new(child(from).map(move |tuple| {
  822|       |                        let mut tuple = tuple?;
  823|       |                        if let Some(value) = expression(&tuple) {
  824|       |                            tuple.set(position, value);
  825|       |                        }
  826|       |                        Ok(tuple)
  827|    431|                    }))
  828|    431|                })
_RNvXsf_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtB5_9FlatMapOkNtNtNtB9_7storage15numeric_encoder11EncodedQuadTNtB10_11EncodedTermB1K_B1K_EINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2U_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator47get_subject_or_object_identity_pairs_in_dataset0AIB3O_B1J_B4d_Ej2_EB2M_4nextB9_:
 5235|     49|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|     49|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|     49|            }
 5242|     49|            self.current = None;
 5243|     49|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|     49|    }
_RNvXsf_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtB5_9FlatMapOkNtNtNtB9_7storage15numeric_encoder11EncodedTermBY_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2u_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator16eval_to_in_graphs_0B1M_EB2m_4nextB9_:
 5235|     86|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|     86|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|     86|            }
 5242|     86|            self.current = None;
 5243|     86|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|     86|    }
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsc_0Bb_:
 1255|      9|                Rc::new(move |tuple| {
 1256|      9|                    Some(
 1257|      9|                        match partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? {
 1258|      0|                            Ordering::Less | Ordering::Equal => true,
 1259|      0|                            Ordering::Greater => false,
 1260|       |                        }
 1261|      0|                        .into(),
 1262|       |                    )
 1263|      9|                })
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluators4_00Bd_:
  595|    225|                                    .filter_map(|result| match result {
  596|    225|                                        Ok(result) => Some(result),
  597|      0|                                        Err(error) => {
  598|      0|                                            errors.push(Err(error));
  599|      0|                                            None
  600|       |                                        }
  601|    225|                                    })
_RINvXsx_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB6_15EncodedTupleSetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendNtB6_12EncodedTupleE6extendINtNtNtB1c_8adapters10filter_map9FilterMapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtB1a_8iterator8Iteratorp4ItemINtNtB1e_6result6ResultB1Y_NtNtB8_5error15EvaluationErrorEEL_ENvMB4e_B4b_2okEEBa_:
 5628|      1|    fn extend<T: IntoIterator<Item = EncodedTuple>>(&mut self, iter: T) {
 5629|      1|        let iter = iter.into_iter();
 5630|      1|        self.map.reserve(iter.size_hint().0);
 5631|      1|        for tuple in iter {
 5632|      0|            self.insert(tuple);
 5633|      0|        }
 5634|      1|    }
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval11format_listNtNtCsjOdcKtOMjJI_5alloc6string6StringINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtB1z_3map3MapINtNtNtB1D_5slice4iter4IterNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableENvYB34_NtBU_8ToString9to_stringEIB2n_IB2E_TB34_NtNtCsj4YExd6TrWR_7sparopt7algebra19AggregateExpressionEENCNvB2_15eval_node_label0EEEB6_:
 5842|      8|fn format_list<T: ToString>(values: impl IntoIterator<Item = T>) -> String {
 5843|      8|    values
 5844|      8|        .into_iter()
 5845|      8|        .map(|v| v.to_string())
 5846|      8|        .collect::<Vec<_>>()
 5847|      8|        .join(", ")
 5848|      8|}
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators14_0Bb_:
 2286|      8|                        Rc::new(move |tuple| Some(e(tuple)?.is_blank_node().into()))
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators7_0Bb_:
  655|     28|                        return Rc::new(move |from| {
  656|     28|                            Box::new(ForLoopLeftJoinIterator {
  657|     28|                                right_evaluator: Rc::clone(&right),
  658|     28|                                left_iter: left(from),
  659|     28|                                current_right: Box::new(empty()),
  660|     28|                            })
  661|     28|                        });
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval18transitive_closureNtNtNtB6_7storage15numeric_encoder11EncodedTermINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2s_6result6ResultBZ_NtNtB4_5error15EvaluationErrorEEL_EB1K_NCNvMs3_B2_NtB2_13PathEvaluator16eval_to_in_graphs1_0EB6_:
 5120|     19|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|     19|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|     19|    mut next: impl FnMut(T) -> NI,
 5123|     19|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|     19|    let mut errors = Vec::new();
 5125|     19|    let mut todo = start
 5126|     19|        .into_iter()
 5127|     19|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|     19|        })
 5134|     19|        .collect::<Vec<_>>();
 5135|     19|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|     19|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|     19|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|     19|}
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval16hash_deduplicateTNtNtNtB6_7storage15numeric_encoder11EncodedTermBY_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtB2_9FlatMapOkNtB10_11EncodedQuadBX_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1U_6traits8iterator8Iteratorp4ItemINtNtB1W_6result6ResultB2V_NtNtB4_5error15EvaluationErrorEEL_ENCNvMs3_B2_NtB2_13PathEvaluator45get_subject_or_object_identity_pairs_in_graph0AIB4x_BX_B4X_Ej2_EIB3i_DB3R_p4ItemB6O_EL_EEEB6_:
 5175|  2.70k|fn hash_deduplicate<T: Eq + Hash + Clone>(
 5176|  2.70k|    iter: impl Iterator<Item = Result<T, EvaluationError>>,
 5177|  2.70k|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5178|  2.70k|    let mut already_seen = HashSet::with_capacity(iter.size_hint().0);
 5179|  2.70k|    iter.filter(move |e| {
 5180|       |        if let Ok(e) = e {
 5181|       |            if already_seen.contains(e) {
 5182|       |                false
 5183|       |            } else {
 5184|       |                already_seen.insert(e.clone());
 5185|       |                true
 5186|       |            }
 5187|       |        } else {
 5188|       |            true
 5189|       |        }
 5190|  2.70k|    })
 5191|  2.70k|}
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators0_0Bb_:
 1155|    331|                Rc::new(move |tuple| tuple.get(v).cloned())
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval18transitive_closureTNtNtNtB6_7storage15numeric_encoder11EncodedTermB10_B10_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB21_6traits8iterator8Iteratorp4ItemINtNtB23_6result6ResultB10_NtNtB4_5error15EvaluationErrorEEL_ENCNCNvMs3_B2_NtB2_13PathEvaluator26eval_open_in_unknown_graphs2_00EIB2J_DB3i_p4ItemIB3Y_BZ_B4o_EEL_ENCB51_s2_0EB6_:
 5120|     21|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|     21|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|     21|    mut next: impl FnMut(T) -> NI,
 5123|     21|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|     21|    let mut errors = Vec::new();
 5125|     21|    let mut todo = start
 5126|     21|        .into_iter()
 5127|     21|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|     21|        })
 5134|     21|        .collect::<Vec<_>>();
 5135|     21|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|     21|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|     21|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|     21|}
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators_0Bb_:
 1151|    303|                Rc::new(move |_| Some(t.clone()))
_RNCNvXs6_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_20HashLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0Bb_:
 4824|     48|                    .filter_map(|right_tuple| left_tuple.combine_with(right_tuple))
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval9slice_keyNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableEB6_:
 5520|  99.9k|fn slice_key<T: Eq>(slice: &[T], element: &T) -> Option<usize> {
 5521|  1.15M|    for (i, item) in slice.iter().enumerate() {
 5522|  1.15M|        if item == element {
 5523|  65.6k|            return Some(i);
 5524|  1.09M|        }
 5525|       |    }
 5526|  34.2k|    None
 5527|  99.9k|}
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluators8_00Bd_:
  668|    227|                    Box::new(left(from).flat_map(move |t| match t {
  669|    227|                        Ok(t) => right(t),
  670|      0|                        Err(e) => Box::new(once(Err(e))),
  671|    227|                    }))
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorso_0Bb_:
 1466|      4|                        Rc::new(move |tuple| match e(tuple)? {
 1467|      0|                            EncodedTerm::SmallSmallLangStringLiteral { language, .. }
 1468|      0|                            | EncodedTerm::BigSmallLangStringLiteral { language, .. } => {
 1469|      0|                                Some(build_string_literal_from_id(language.into()))
 1470|       |                            }
 1471|      0|                            EncodedTerm::SmallBigLangStringLiteral { language_id, .. }
 1472|      0|                            | EncodedTerm::BigBigLangStringLiteral { language_id, .. } => {
 1473|      0|                                Some(build_string_literal_from_id(language_id.into()))
 1474|       |                            }
 1475|      0|                            e if e.is_literal() => Some(build_string_literal(&dataset, "")),
 1476|      0|                            _ => None,
 1477|      4|                        })
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators5_0Bb_:
  613|      8|                                .map(|v| encode_variable(encoded_variables, v))
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators4_0Bb_:
  592|  18.3k|                            Rc::new(move |from| {
  593|  18.3k|                                let mut errors = Vec::default();
  594|  18.3k|                                let build_values = build(from.clone())
  595|  18.3k|                                    .filter_map(|result| match result {
  596|       |                                        Ok(result) => Some(result),
  597|       |                                        Err(error) => {
  598|       |                                            errors.push(Err(error));
  599|       |                                            None
  600|       |                                        }
  601|  18.3k|                                    })
  602|  18.3k|                                    .collect::<Vec<_>>();
  603|  18.3k|                                Box::new(CartesianProductJoinIterator {
  604|  18.3k|                                    probe_iter: probe(from),
  605|  18.3k|                                    built: build_values,
  606|  18.3k|                                    buffered_results: errors,
  607|  18.3k|                                })
  608|  18.3k|                            })
_RNvXsf_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtB5_9FlatMapOkTNtNtNtB9_7storage15numeric_encoder11EncodedTermBZ_BZ_EBY_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2C_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator26eval_open_in_unknown_graphs0_0INtNtNtB2A_8adapters3map3MapIB1V_DB2u_p4ItemIB3w_BZ_B3V_EEL_ENCNCB4w_s0_00EEB2u_4nextB9_:
 5235|     27|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|     27|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|     27|            }
 5242|     27|            self.current = None;
 5243|     27|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|     27|    }
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsa_0Bb_:
  706|      1|                                .map(|v| encode_variable(encoded_variables, v))
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsh_0Bb_:
 1387|     17|                Rc::new(move |tuple| match e(tuple)? {
 1388|      0|                    EncodedTerm::FloatLiteral(value) => Some(value.into()),
 1389|      0|                    EncodedTerm::DoubleLiteral(value) => Some(value.into()),
 1390|      2|                    EncodedTerm::IntegerLiteral(value) => Some(value.into()),
 1391|      0|                    EncodedTerm::DecimalLiteral(value) => Some(value.into()),
 1392|      0|                    EncodedTerm::DurationLiteral(value) => Some(value.into()),
 1393|      0|                    EncodedTerm::YearMonthDurationLiteral(value) => Some(value.into()),
 1394|      0|                    EncodedTerm::DayTimeDurationLiteral(value) => Some(value.into()),
 1395|      8|                    _ => None,
 1396|     17|                })
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval18transitive_closureTNtNtNtB6_7storage15numeric_encoder11EncodedTermB10_B10_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB21_6traits8iterator8Iteratorp4ItemINtNtB23_6result6ResultB10_NtNtB4_5error15EvaluationErrorEEL_ENCNCNvMs3_B2_NtB2_13PathEvaluator26eval_open_in_unknown_graphs1_00EINtB2_9FlatMapOkNtB12_11EncodedQuadBZ_IB2J_DB3i_p4ItemIB3Y_B6i_B4o_EEL_ENCNvB53_47get_subject_or_object_identity_pairs_in_dataset0AIB3Y_BZ_B4o_Ej2_ENCB51_s1_0EB6_:
 5120|     16|fn transitive_closure<T: Clone + Eq + Hash, NI: Iterator<Item = Result<T, EvaluationError>>>(
 5121|     16|    start: impl IntoIterator<Item = Result<T, EvaluationError>>,
 5122|     16|    mut next: impl FnMut(T) -> NI,
 5123|     16|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5124|     16|    let mut errors = Vec::new();
 5125|     16|    let mut todo = start
 5126|     16|        .into_iter()
 5127|     16|        .filter_map(|e| match e {
 5128|       |            Ok(e) => Some(e),
 5129|       |            Err(e) => {
 5130|       |                errors.push(e);
 5131|       |                None
 5132|       |            }
 5133|     16|        })
 5134|     16|        .collect::<Vec<_>>();
 5135|     16|    let mut all = todo.iter().cloned().collect::<HashSet<_>>();
 5136|     16|    while let Some(e) = todo.pop() {
 5137|      0|        for e in next(e) {
 5138|      0|            match e {
 5139|      0|                Ok(e) => {
 5140|      0|                    if all.insert(e.clone()) {
 5141|      0|                        todo.push(e)
 5142|      0|                    }
 5143|       |                }
 5144|      0|                Err(e) => errors.push(e),
 5145|       |            }
 5146|       |        }
 5147|       |    }
 5148|     16|    errors.into_iter().map(Err).chain(all.into_iter().map(Ok))
 5149|     16|}
_RNvXsf_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtB5_9FlatMapOkNtNtNtB9_7storage15numeric_encoder11EncodedTermBY_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2u_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator18eval_from_in_graphs_0B1M_EB2m_4nextB9_:
 5235|    133|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|    133|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|    133|            }
 5242|    133|            self.current = None;
 5243|    133|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|    133|    }
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsb_0Bb_:
 1247|      4|                Rc::new(move |tuple| {
 1248|      4|                    Some((partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? == Ordering::Less).into())
 1249|      4|                })
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators3_0Bb_:
  435|  4.55k|                Rc::new(move |from| {
  436|  4.55k|                    let input_subject = subject.get_pattern_value(&from);
  437|  4.55k|                    let input_object = object.get_pattern_value(&from);
  438|  4.55k|                    let input_graph_name = graph_name.get_pattern_value(&from);
  439|  4.55k|                    let path_eval = PathEvaluator {
  440|  4.55k|                        dataset: Rc::clone(&dataset),
  441|  4.55k|                    };
  442|  4.55k|                    match (input_subject, input_object, input_graph_name) {
  443|     10|                        (Some(input_subject), Some(input_object), Some(input_graph_name)) => {
  444|     10|                            match path_eval.eval_closed_in_graph(
  445|     10|                                &path,
  446|     10|                                &input_subject,
  447|     10|                                &input_object,
  448|     10|                                &input_graph_name,
  449|     10|                            ) {
  450|      0|                                Ok(true) => Box::new(once(Ok(from))),
  451|     10|                                Ok(false) => Box::new(empty()),
  452|      0|                                Err(e) => Box::new(once(Err(e))),
  453|       |                            }
  454|       |                        }
  455|    156|                        (Some(input_subject), None, Some(input_graph_name)) => {
  456|    156|                            let object = object.clone();
  457|    156|                            Box::new(
  458|    156|                                path_eval
  459|    156|                                    .eval_from_in_graph(&path, &input_subject, &input_graph_name)
  460|    156|                                    .filter_map(move |o| match o {
  461|       |                                        Ok(o) => {
  462|       |                                            let mut new_tuple = from.clone();
  463|       |                                            put_pattern_value(&object, o, &mut new_tuple)?;
  464|       |                                            Some(Ok(new_tuple))
  465|       |                                        }
  466|       |                                        Err(error) => Some(Err(error)),
  467|    156|                                    }),
  468|    156|                            )
  469|       |                        }
  470|    143|                        (None, Some(input_object), Some(input_graph_name)) => {
  471|    143|                            let subject = subject.clone();
  472|    143|                            Box::new(
  473|    143|                                path_eval
  474|    143|                                    .eval_to_in_graph(&path, &input_object, &input_graph_name)
  475|    143|                                    .filter_map(move |s| match s {
  476|       |                                        Ok(s) => {
  477|       |                                            let mut new_tuple = from.clone();
  478|       |                                            put_pattern_value(&subject, s, &mut new_tuple)?;
  479|       |                                            Some(Ok(new_tuple))
  480|       |                                        }
  481|       |                                        Err(error) => Some(Err(error)),
  482|    143|                                    }),
  483|    143|                            )
  484|       |                        }
  485|  4.15k|                        (None, None, Some(input_graph_name)) => {
  486|  4.15k|                            let subject = subject.clone();
  487|  4.15k|                            let object = object.clone();
  488|  4.15k|                            Box::new(
  489|  4.15k|                                path_eval
  490|  4.15k|                                    .eval_open_in_graph(&path, &input_graph_name)
  491|  4.15k|                                    .filter_map(move |so| match so {
  492|       |                                        Ok((s, o)) => {
  493|       |                                            let mut new_tuple = from.clone();
  494|       |                                            put_pattern_value(&subject, s, &mut new_tuple)?;
  495|       |                                            put_pattern_value(&object, o, &mut new_tuple)?;
  496|       |                                            Some(Ok(new_tuple))
  497|       |                                        }
  498|       |                                        Err(error) => Some(Err(error)),
  499|  4.15k|                                    }),
  500|  4.15k|                            )
  501|       |                        }
  502|      0|                        (Some(input_subject), Some(input_object), None) => {
  503|      0|                            let graph_name = graph_name.clone();
  504|      0|                            Box::new(
  505|      0|                                path_eval
  506|      0|                                    .eval_closed_in_unknown_graph(
  507|      0|                                        &path,
  508|      0|                                        &input_subject,
  509|      0|                                        &input_object,
  510|      0|                                    )
  511|      0|                                    .filter_map(move |r| match r {
  512|       |                                        Ok(g) => {
  513|       |                                            let mut new_tuple = from.clone();
  514|       |                                            put_pattern_value(&graph_name, g, &mut new_tuple)?;
  515|       |                                            Some(Ok(new_tuple))
  516|       |                                        }
  517|       |                                        Err(error) => Some(Err(error)),
  518|      0|                                    }),
  519|      0|                            )
  520|       |                        }
  521|      2|                        (Some(input_subject), None, None) => {
  522|      2|                            let object = object.clone();
  523|      2|                            let graph_name = graph_name.clone();
  524|      2|                            Box::new(
  525|      2|                                path_eval
  526|      2|                                    .eval_from_in_unknown_graph(&path, &input_subject)
  527|      2|                                    .filter_map(move |r| match r {
  528|       |                                        Ok((o, g)) => {
  529|       |                                            let mut new_tuple = from.clone();
  530|       |                                            put_pattern_value(&object, o, &mut new_tuple)?;
  531|       |                                            put_pattern_value(&graph_name, g, &mut new_tuple)?;
  532|       |                                            Some(Ok(new_tuple))
  533|       |                                        }
  534|       |                                        Err(error) => Some(Err(error)),
  535|      2|                                    }),
  536|      2|                            )
  537|       |                        }
  538|      6|                        (None, Some(input_object), None) => {
  539|      6|                            let subject = subject.clone();
  540|      6|                            let graph_name = graph_name.clone();
  541|      6|                            Box::new(
  542|      6|                                path_eval
  543|      6|                                    .eval_to_in_unknown_graph(&path, &input_object)
  544|      6|                                    .filter_map(move |r| match r {
  545|       |                                        Ok((s, g)) => {
  546|       |                                            let mut new_tuple = from.clone();
  547|       |                                            put_pattern_value(&subject, s, &mut new_tuple)?;
  548|       |                                            put_pattern_value(&graph_name, g, &mut new_tuple)?;
  549|       |
  550|       |                                            Some(Ok(new_tuple))
  551|       |                                        }
  552|       |                                        Err(error) => Some(Err(error)),
  553|      6|                                    }),
  554|      6|                            )
  555|       |                        }
  556|       |                        (None, None, None) => {
  557|     89|                            let subject = subject.clone();
  558|     89|                            let object = object.clone();
  559|     89|                            let graph_name = graph_name.clone();
  560|     89|                            Box::new(path_eval.eval_open_in_unknown_graph(&path).filter_map(
  561|     89|                                move |r| match r {
  562|       |                                    Ok((s, o, g)) => {
  563|       |                                        let mut new_tuple = from.clone();
  564|       |                                        put_pattern_value(&subject, s, &mut new_tuple)?;
  565|       |                                        put_pattern_value(&object, o, &mut new_tuple)?;
  566|       |                                        put_pattern_value(&graph_name, g, &mut new_tuple)?;
  567|       |                                        Some(Ok(new_tuple))
  568|       |                                    }
  569|       |                                    Err(error) => Some(Err(error)),
  570|     89|                                },
  571|     89|                            ))
  572|       |                        }
  573|       |                    }
  574|  4.55k|                })
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorsu_0s1_0Bd_:
 1041|      6|                                move |(key, accumulators)| {
 1042|      6|                                    let mut result = EncodedTuple::with_capacity(tuple_size);
 1043|     30|                                    for (variable, value) in key_variables.iter().zip(key) {
 1044|     30|                                        if let Some(value) = value {
 1045|      2|                                            result.set(*variable, value);
 1046|     28|                                        }
 1047|       |                                    }
 1048|      0|                                    for (accumulator, variable) in
 1049|      6|                                        accumulators.into_iter().zip(&accumulator_variables)
 1050|       |                                    {
 1051|      0|                                        if let Some(value) = accumulator.state() {
 1052|      0|                                            result.set(*variable, value);
 1053|      0|                                        }
 1054|       |                                    }
 1055|      6|                                    Ok(result)
 1056|      6|                                },
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluators0_00Bd_:
  319|  2.11k|                            .filter_map(move |t| Some(Ok(t.combine_with(&from)?)))
_RNCNvXs6_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_20HashLeftJoinIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4nexts_0Bb_:
 4825|     48|                    .filter(|tuple| {
 4826|     48|                        (self.expression)(tuple)
 4827|     48|                            .and_then(|term| to_bool(&term))
 4828|     48|                            .unwrap_or(false)
 4829|     48|                    })
_RINvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB6_13PathEvaluator27run_if_term_is_a_graph_nodeNtNtNtBa_7storage15numeric_encoder11EncodedTermINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtB2m_3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterNtNtB8_5error15EvaluationErrorENcNtINtNtB2q_6result6ResultB1w_B4e_E3Err0EIB3a_INtNtNtNtCsc4CYCHgsNRQ_3std11collections4hash3set8IntoIterB1w_ENcNtB4N_2Ok0EENCNvB2_16eval_to_in_graphs0_0EBa_:
 4660|     31|    fn run_if_term_is_a_graph_node<
 4661|     31|        T: 'static,
 4662|     31|        I: Iterator<Item = Result<T, EvaluationError>> + 'static,
 4663|     31|    >(
 4664|     31|        &self,
 4665|     31|        term: &EncodedTerm,
 4666|     31|        graph_name: &EncodedTerm,
 4667|     31|        f: impl FnOnce() -> I,
 4668|     31|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4669|     31|        match self.is_subject_or_object_in_graph(term, graph_name) {
 4670|      0|            Ok(true) => Box::new(f()),
 4671|       |            Ok(false) => {
 4672|     31|                Box::new(empty()) // Not in the database
 4673|       |            }
 4674|      0|            Err(error) => Box::new(once(Err(error))),
 4675|       |        }
 4676|     31|    }
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorsu_0s_0Bd_:
 1006|      6|                        .filter_map(|result| match result {
 1007|      6|                            Ok(result) => Some(result),
 1008|      0|                            Err(error) => {
 1009|      0|                                errors.push(error);
 1010|      0|                                None
 1011|       |                            }
 1012|      6|                        })
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20encode_property_path0Bb_:
 2809|  12.1k|                PropertyPath::NegatedPropertySet(ps.iter().map(|p| self.encode_term(p)).collect())
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators8_0Bb_:
 1216|      1|                Rc::new(move |tuple| Some((a(tuple)? == b(tuple)?).into()))
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluators9_00Bd_:
  690|     26|                                Box::new(left(from).filter(move |left_tuple| {
  691|     26|                                    if let Ok(left_tuple) = left_tuple {
  692|     26|                                        !right.iter().any(|right_tuple| {
  693|       |                                            are_compatible_and_not_disjointed(
  694|       |                                                left_tuple,
  695|       |                                                right_tuple,
  696|       |                                            )
  697|     26|                                        })
  698|       |                                    } else {
  699|      0|                                        true
  700|       |                                    }
  701|     26|                                }))
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluator0Bb_:
 1147|     43|                Rc::new(move |_| Some(t.clone()))
_RINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval16hash_deduplicateTNtNtNtB6_7storage15numeric_encoder11EncodedTermBY_BY_EINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB1X_6traits8iterator8Iteratorp4ItemINtNtB1Z_6result6ResultBX_NtNtB4_5error15EvaluationErrorEEL_EB2I_EEB6_:
 5175|     25|fn hash_deduplicate<T: Eq + Hash + Clone>(
 5176|     25|    iter: impl Iterator<Item = Result<T, EvaluationError>>,
 5177|     25|) -> impl Iterator<Item = Result<T, EvaluationError>> {
 5178|     25|    let mut already_seen = HashSet::with_capacity(iter.size_hint().0);
 5179|     25|    iter.filter(move |e| {
 5180|       |        if let Ok(e) = e {
 5181|       |            if already_seen.contains(e) {
 5182|       |                false
 5183|       |            } else {
 5184|       |                already_seen.insert(e.clone());
 5185|       |                true
 5186|       |            }
 5187|       |        } else {
 5188|       |            true
 5189|       |        }
 5190|     25|    })
 5191|     25|}
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators9_0Bb_:
  687|     27|                            Rc::new(move |from| {
  688|     27|                                let right: Vec<_> =
  689|     27|                                    right(from.clone()).filter_map(Result::ok).collect();
  690|     27|                                Box::new(left(from).filter(move |left_tuple| {
  691|       |                                    if let Ok(left_tuple) = left_tuple {
  692|       |                                        !right.iter().any(|right_tuple| {
  693|       |                                            are_compatible_and_not_disjointed(
  694|       |                                                left_tuple,
  695|       |                                                right_tuple,
  696|       |                                            )
  697|       |                                        })
  698|       |                                    } else {
  699|       |                                        true
  700|       |                                    }
  701|     27|                                }))
  702|     27|                            })
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluatorsu_0s0_0Bd_:
 1013|      6|                        .for_each(|tuple| {
 1014|      6|                            // TODO avoid copy for key?
 1015|      6|                            let key = key_variables
 1016|      6|                                .iter()
 1017|      6|                                .map(|v| tuple.get(*v).cloned())
 1018|      6|                                .collect();
 1019|      6|
 1020|      6|                            let key_accumulators =
 1021|      6|                                accumulators_for_group.entry(key).or_insert_with(|| {
 1022|       |                                    accumulator_builders.iter().map(|c| c()).collect::<Vec<_>>()
 1023|      6|                                });
 1024|      6|                            for (accumulator, input_expression) in key_accumulators
 1025|      6|                                .iter_mut()
 1026|      6|                                .zip(&aggregate_input_expressions)
 1027|      0|                            {
 1028|      0|                                accumulator.add(
 1029|      0|                                    input_expression
 1030|      0|                                        .as_ref()
 1031|      0|                                        .and_then(|parameter| parameter(&tuple)),
 1032|      0|                                );
 1033|      0|                            }
 1034|      6|                        });
_RNCINvNtNtCsd92XLxb96zi_8oxigraph6sparql4eval16hash_deduplicateNtB4_12EncodedTupleINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB20_6result6ResultBZ_NtNtB6_5error15EvaluationErrorEEL_EE0B8_:
 5179|    615|    iter.filter(move |e| {
 5180|    615|        if let Ok(e) = e {
 5181|    615|            if already_seen.contains(e) {
 5182|     80|                false
 5183|       |            } else {
 5184|    535|                already_seen.insert(e.clone());
 5185|    535|                true
 5186|       |            }
 5187|       |        } else {
 5188|      0|            true
 5189|       |        }
 5190|    615|    })
_RINvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB6_13PathEvaluator27run_if_term_is_a_graph_nodeNtNtNtBa_7storage15numeric_encoder11EncodedTermINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters6filter6FilterINtNtB2m_5chain5ChainINtNtNtB2o_7sources4once4OnceINtNtB2q_6result6ResultB1w_NtNtB8_5error15EvaluationErrorEEINtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtB2o_6traits8iterator8Iteratorp4ItemB3Z_EL_EENCINvB6_16hash_deduplicateB1w_B3b_E0ENCNvB2_18eval_from_in_graphs2_0EBa_:
 4660|     97|    fn run_if_term_is_a_graph_node<
 4661|     97|        T: 'static,
 4662|     97|        I: Iterator<Item = Result<T, EvaluationError>> + 'static,
 4663|     97|    >(
 4664|     97|        &self,
 4665|     97|        term: &EncodedTerm,
 4666|     97|        graph_name: &EncodedTerm,
 4667|     97|        f: impl FnOnce() -> I,
 4668|     97|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4669|     97|        match self.is_subject_or_object_in_graph(term, graph_name) {
 4670|      0|            Ok(true) => Box::new(f()),
 4671|       |            Ok(false) => {
 4672|     97|                Box::new(empty()) // Not in the database
 4673|       |            }
 4674|      0|            Err(error) => Box::new(once(Err(error))),
 4675|       |        }
 4676|     97|    }
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsd_0Bb_:
 1269|     54|                    move |tuple| match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1270|      0|                        NumericBinaryOperands::Float(v1, v2) => Some((v1 + v2).into()),
 1271|      0|                        NumericBinaryOperands::Double(v1, v2) => Some((v1 + v2).into()),
 1272|      0|                        NumericBinaryOperands::Integer(v1, v2) => Some(v1.checked_add(v2)?.into()),
 1273|      1|                        NumericBinaryOperands::Decimal(v1, v2) => Some(v1.checked_add(v2)?.into()),
 1274|      0|                        NumericBinaryOperands::Duration(v1, v2) => Some(v1.checked_add(v2)?.into()),
 1275|      0|                        NumericBinaryOperands::YearMonthDuration(v1, v2) => {
 1276|      0|                            Some(v1.checked_add(v2)?.into())
 1277|       |                        }
 1278|      0|                        NumericBinaryOperands::DayTimeDuration(v1, v2) => {
 1279|      0|                            Some(v1.checked_add(v2)?.into())
 1280|       |                        }
 1281|      0|                        NumericBinaryOperands::DateTimeDuration(v1, v2) => {
 1282|      0|                            Some(v1.checked_add_duration(v2)?.into())
 1283|       |                        }
 1284|      0|                        NumericBinaryOperands::DateTimeYearMonthDuration(v1, v2) => {
 1285|      0|                            Some(v1.checked_add_year_month_duration(v2)?.into())
 1286|       |                        }
 1287|      0|                        NumericBinaryOperands::DateTimeDayTimeDuration(v1, v2) => {
 1288|      0|                            Some(v1.checked_add_day_time_duration(v2)?.into())
 1289|       |                        }
 1290|      0|                        NumericBinaryOperands::DateDuration(v1, v2) => {
 1291|      0|                            Some(v1.checked_add_duration(v2)?.into())
 1292|       |                        }
 1293|      0|                        NumericBinaryOperands::DateYearMonthDuration(v1, v2) => {
 1294|      0|                            Some(v1.checked_add_year_month_duration(v2)?.into())
 1295|       |                        }
 1296|      0|                        NumericBinaryOperands::DateDayTimeDuration(v1, v2) => {
 1297|      0|                            Some(v1.checked_add_day_time_duration(v2)?.into())
 1298|       |                        }
 1299|      0|                        NumericBinaryOperands::TimeDuration(v1, v2) => {
 1300|      0|                            Some(v1.checked_add_duration(v2)?.into())
 1301|       |                        }
 1302|      0|                        NumericBinaryOperands::TimeDayTimeDuration(v1, v2) => {
 1303|      0|                            Some(v1.checked_add_day_time_duration(v2)?.into())
 1304|       |                        }
 1305|       |                        NumericBinaryOperands::DateTime(_, _)
 1306|       |                        | NumericBinaryOperands::Time(_, _)
 1307|      0|                        | NumericBinaryOperands::Date(_, _) => None,
 1308|     54|                    },
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsi_0Bb_:
 1400|    239|                Rc::new(move |tuple| match e(tuple)? {
 1401|      0|                    EncodedTerm::FloatLiteral(value) => Some((-value).into()),
 1402|      0|                    EncodedTerm::DoubleLiteral(value) => Some((-value).into()),
 1403|     94|                    EncodedTerm::IntegerLiteral(value) => Some(value.checked_neg()?.into()),
 1404|     28|                    EncodedTerm::DecimalLiteral(value) => Some(value.checked_neg()?.into()),
 1405|      0|                    EncodedTerm::DurationLiteral(value) => Some(value.checked_neg()?.into()),
 1406|      0|                    EncodedTerm::YearMonthDurationLiteral(value) => {
 1407|      0|                        Some(value.checked_neg()?.into())
 1408|       |                    }
 1409|      0|                    EncodedTerm::DayTimeDurationLiteral(value) => Some(value.checked_neg()?.into()),
 1410|     96|                    _ => None,
 1411|    239|                })
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsa_0Bb_:
 1233|     74|                Rc::new(move |tuple| {
 1234|     74|                    Some(
 1235|     74|                        match partial_cmp(&dataset, &a(tuple)?, &b(tuple)?)? {
 1236|      4|                            Ordering::Greater | Ordering::Equal => true,
 1237|      0|                            Ordering::Less => false,
 1238|       |                        }
 1239|      4|                        .into(),
 1240|       |                    )
 1241|     74|                })
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators2_0Bb_:
  387|  16.5k|                Rc::new(move |from| {
  388|  16.5k|                    let iter = dataset.encoded_quads_for_pattern(
  389|  16.5k|                        subject.get_pattern_value(&from).as_ref(),
  390|  16.5k|                        predicate.get_pattern_value(&from).as_ref(),
  391|  16.5k|                        object.get_pattern_value(&from).as_ref(),
  392|  16.5k|                        graph_name.get_pattern_value(&from).as_ref(),
  393|  16.5k|                    );
  394|  16.5k|                    let subject = subject.clone();
  395|  16.5k|                    let predicate = predicate.clone();
  396|  16.5k|                    let object = object.clone();
  397|  16.5k|                    let graph_name = graph_name.clone();
  398|  16.5k|                    Box::new(iter.filter_map(move |quad| match quad {
  399|       |                        Ok(quad) => {
  400|       |                            let mut new_tuple = from.clone();
  401|       |                            put_pattern_value(&subject, quad.subject, &mut new_tuple)?;
  402|       |                            put_pattern_value(&predicate, quad.predicate, &mut new_tuple)?;
  403|       |                            put_pattern_value(&object, quad.object, &mut new_tuple)?;
  404|       |                            put_pattern_value(&graph_name, quad.graph_name, &mut new_tuple)?;
  405|       |                            Some(Ok(new_tuple))
  406|       |                        }
  407|       |                        Err(error) => Some(Err(error)),
  408|  16.5k|                    }))
  409|  16.5k|                })
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluatorsu_0Bb_:
  992|      8|                Rc::new(move |from| {
  993|      8|                    let tuple_size = from.capacity();
  994|      8|                    let key_variables = Rc::clone(&key_variables);
  995|      8|                    let mut errors = Vec::default();
  996|      8|                    let mut accumulators_for_group =
  997|      8|                        HashMap::<Vec<Option<EncodedTerm>>, Vec<Box<dyn Accumulator>>>::default();
  998|      8|                    if key_variables.is_empty() {
  999|      0|                        // There is always a single group if there is no GROUP BY
 1000|      0|                        accumulators_for_group.insert(
 1001|      0|                            Vec::new(),
 1002|      0|                            accumulator_builders.iter().map(|c| c()).collect::<Vec<_>>(),
 1003|      0|                        );
 1004|      8|                    }
 1005|      8|                    child(from)
 1006|      8|                        .filter_map(|result| match result {
 1007|       |                            Ok(result) => Some(result),
 1008|       |                            Err(error) => {
 1009|       |                                errors.push(error);
 1010|       |                                None
 1011|       |                            }
 1012|      8|                        })
 1013|      8|                        .for_each(|tuple| {
 1014|       |                            // TODO avoid copy for key?
 1015|       |                            let key = key_variables
 1016|       |                                .iter()
 1017|       |                                .map(|v| tuple.get(*v).cloned())
 1018|       |                                .collect();
 1019|       |
 1020|       |                            let key_accumulators =
 1021|       |                                accumulators_for_group.entry(key).or_insert_with(|| {
 1022|       |                                    accumulator_builders.iter().map(|c| c()).collect::<Vec<_>>()
 1023|       |                                });
 1024|       |                            for (accumulator, input_expression) in key_accumulators
 1025|       |                                .iter_mut()
 1026|       |                                .zip(&aggregate_input_expressions)
 1027|       |                            {
 1028|       |                                accumulator.add(
 1029|       |                                    input_expression
 1030|       |                                        .as_ref()
 1031|       |                                        .and_then(|parameter| parameter(&tuple)),
 1032|       |                                );
 1033|       |                            }
 1034|      8|                        });
 1035|      8|                    let accumulator_variables = accumulator_variables.clone();
 1036|      8|                    Box::new(
 1037|      8|                        errors
 1038|      8|                            .into_iter()
 1039|      8|                            .map(Err)
 1040|      8|                            .chain(accumulators_for_group.into_iter().map(
 1041|      8|                                move |(key, accumulators)| {
 1042|       |                                    let mut result = EncodedTuple::with_capacity(tuple_size);
 1043|       |                                    for (variable, value) in key_variables.iter().zip(key) {
 1044|       |                                        if let Some(value) = value {
 1045|       |                                            result.set(*variable, value);
 1046|       |                                        }
 1047|       |                                    }
 1048|       |                                    for (accumulator, variable) in
 1049|       |                                        accumulators.into_iter().zip(&accumulator_variables)
 1050|       |                                    {
 1051|       |                                        if let Some(value) = accumulator.state() {
 1052|       |                                            result.set(*variable, value);
 1053|       |                                        }
 1054|       |                                    }
 1055|       |                                    Ok(result)
 1056|      8|                                },
 1057|      8|                            )),
 1058|      8|                    )
 1059|      8|                })
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator29build_graph_pattern_evaluators6_0Bb_:
  615|      6|                            Rc::new(move |from| {
  616|      6|                                let mut errors = Vec::default();
  617|      6|                                let mut built_values = EncodedTupleSet::new(keys.clone());
  618|      6|                                built_values.extend(build(from.clone()).filter_map(|result| {
  619|       |                                    match result {
  620|       |                                        Ok(result) => Some(result),
  621|       |                                        Err(error) => {
  622|       |                                            errors.push(Err(error));
  623|       |                                            None
  624|       |                                        }
  625|       |                                    }
  626|      6|                                }));
  627|      6|                                Box::new(HashJoinIterator {
  628|      6|                                    probe_iter: probe(from),
  629|      6|                                    built: built_values,
  630|      6|                                    buffered_results: errors,
  631|      6|                                })
  632|      6|                            })
_RINvMs3_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB6_13PathEvaluator27run_if_term_is_a_graph_nodeNtNtNtBa_7storage15numeric_encoder11EncodedTermINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters5chain5ChainINtNtB2m_3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterNtNtB8_5error15EvaluationErrorENcNtINtNtB2q_6result6ResultB1w_B4e_E3Err0EIB3a_INtNtNtNtCsc4CYCHgsNRQ_3std11collections4hash3set8IntoIterB1w_ENcNtB4N_2Ok0EENCNvB2_18eval_from_in_graphs0_0EBa_:
 4660|     19|    fn run_if_term_is_a_graph_node<
 4661|     19|        T: 'static,
 4662|     19|        I: Iterator<Item = Result<T, EvaluationError>> + 'static,
 4663|     19|    >(
 4664|     19|        &self,
 4665|     19|        term: &EncodedTerm,
 4666|     19|        graph_name: &EncodedTerm,
 4667|     19|        f: impl FnOnce() -> I,
 4668|     19|    ) -> Box<dyn Iterator<Item = Result<T, EvaluationError>>> {
 4669|     19|        match self.is_subject_or_object_in_graph(term, graph_name) {
 4670|      0|            Ok(true) => Box::new(f()),
 4671|       |            Ok(false) => {
 4672|     19|                Box::new(empty()) // Not in the database
 4673|       |            }
 4674|      0|            Err(error) => Box::new(once(Err(error))),
 4675|       |        }
 4676|     19|    }
_RNvXsf_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalINtB5_9FlatMapOkTNtNtNtB9_7storage15numeric_encoder11EncodedTermBZ_EBY_INtNtCsjOdcKtOMjJI_5alloc5boxed3BoxDNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iteratorp4ItemINtNtB2z_6result6ResultBY_NtNtB7_5error15EvaluationErrorEEL_ENCNvMs3_B5_NtB5_13PathEvaluator24eval_to_in_unknown_graphs_0INtNtNtB2x_8adapters3map3MapIB1S_DB2r_p4ItemIB3t_BZ_B3S_EEL_ENCNCB4t_s_00EEB2r_4nextB9_:
 5235|      5|    fn next(&mut self) -> Option<Self::Item> {
 5236|       |        loop {
 5237|      5|            if let Some(current) = &mut self.current {
 5238|      0|                if let Some(next) = current.next() {
 5239|      0|                    return Some(next);
 5240|      0|                }
 5241|      5|            }
 5242|      5|            self.current = None;
 5243|      5|            match self.inner.next()? {
 5244|      0|                Ok(e) => self.current = Some((self.f)(e).into_iter()),
 5245|      0|                Err(error) => return Some(Err(error)),
 5246|       |            }
 5247|       |        }
 5248|      5|    }
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluatorsg_0Bb_:
 1374|    434|                    move |tuple| match NumericBinaryOperands::new(a(tuple)?, b(tuple)?)? {
 1375|      0|                        NumericBinaryOperands::Float(v1, v2) => Some((v1 / v2).into()),
 1376|      0|                        NumericBinaryOperands::Double(v1, v2) => Some((v1 / v2).into()),
 1377|     40|                        NumericBinaryOperands::Integer(v1, v2) => {
 1378|     40|                            Some(Decimal::from(v1).checked_div(v2)?.into())
 1379|       |                        }
 1380|      2|                        NumericBinaryOperands::Decimal(v1, v2) => Some(v1.checked_div(v2)?.into()),
 1381|      0|                        _ => None,
 1382|    434|                    },
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator29build_graph_pattern_evaluators2_00Bd_:
  398|     19|                    Box::new(iter.filter_map(move |quad| match quad {
  399|     19|                        Ok(quad) => {
  400|     19|                            let mut new_tuple = from.clone();
  401|     19|                            put_pattern_value(&subject, quad.subject, &mut new_tuple)?;
  402|     19|                            put_pattern_value(&predicate, quad.predicate, &mut new_tuple)?;
  403|     19|                            put_pattern_value(&object, quad.object, &mut new_tuple)?;
  404|     19|                            put_pattern_value(&graph_name, quad.graph_name, &mut new_tuple)?;
  405|     19|                            Some(Ok(new_tuple))
  406|       |                        }
  407|      0|                        Err(error) => Some(Err(error)),
  408|     19|                    }))
_RNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB7_15SimpleEvaluator20expression_evaluators4_0Bb_:
 1171|      8|                Rc::new(move |tuple| {
 1172|      8|                    let mut error = false;
 1173|     16|                    for child in &*children {
 1174|     16|                        match child(tuple).and_then(|v| to_bool(&v)) {
 1175|      0|                            Some(true) => return Some(true.into()),
 1176|      0|                            Some(false) => continue,
 1177|     16|                            None => error = true,
 1178|       |                        }
 1179|       |                    }
 1180|      8|                    if error {
 1181|      8|                        None
 1182|       |                    } else {
 1183|      0|                        Some(false.into())
 1184|       |                    }
 1185|      8|                })
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator20expression_evaluatorsj_00Bd_:
 1415|     43|                Rc::new(move |tuple| to_bool(&e(tuple)?).map(|v| (!v).into()))
_RNCNCNvMs0_NtNtCsd92XLxb96zi_8oxigraph6sparql4evalNtB9_15SimpleEvaluator20expression_evaluators6_00Bd_:
 1195|      2|                        match child(tuple).and_then(|v| to_bool(&v)) {

_RNvMNtNtNtCsd92XLxb96zi_8oxigraph6sparql4http5dummyNtB2_6Client3new:
    9|  4.25k|    pub fn new(_timeout: Option<Duration>, _redirection_limit: usize) -> Self {
   10|  4.25k|        Self
   11|  4.25k|    }

_RNvXs2_NtCsd92XLxb96zi_8oxigraph6sparqlNtB5_12QueryOptionsNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  157|  2.12k|#[derive(Clone, Default)]
_RNvMNtCsd92XLxb96zi_8oxigraph6sparqlNtB2_12QueryOptions21without_optimizationsCsh41WZG82U3t_18sparql_update_eval:
  259|  2.12k|    pub fn without_optimizations(mut self) -> Self {
  260|  2.12k|        self.without_optimizations = true;
  261|  2.12k|        self
  262|  2.12k|    }
_RNvXs3_NtCsd92XLxb96zi_8oxigraph6sparqlNtB5_12QueryOptionsNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsh41WZG82U3t_18sparql_update_eval:
  157|  2.12k|#[derive(Clone, Default)]
_RNvXs_NtCsd92XLxb96zi_8oxigraph6sparqlNtB4_13UpdateOptionsINtNtCs9nhK3FOW46N_4core7convert4FromNtB4_12QueryOptionsE4fromCsh41WZG82U3t_18sparql_update_eval:
  273|  4.25k|    fn from(query_options: QueryOptions) -> Self {
  274|  4.25k|        Self { query_options }
  275|  4.25k|    }
_RNCNvMNtCsd92XLxb96zi_8oxigraph6sparqlNtB4_12QueryOptions15service_handler0B6_:
  244|  4.17k|        self.service_handler.clone().unwrap_or_else(|| {
  245|  4.17k|            if cfg!(feature = "http-client") {
  246|      0|                Arc::new(service::SimpleServiceHandler::new(
  247|      0|                    self.http_timeout,
  248|      0|                    self.http_redirection_limit,
  249|      0|                ))
  250|       |            } else {
  251|  4.17k|                Arc::new(EmptyServiceHandler)
  252|       |            }
  253|  4.17k|        })
_RNvXs2_NtCsd92XLxb96zi_8oxigraph6sparqlNtB5_12QueryOptionsNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  157|  4.25k|#[derive(Clone, Default)]
_RNvXs4_NtCsd92XLxb96zi_8oxigraph6sparqlNtB5_13UpdateOptionsNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  266|  4.25k|#[derive(Clone, Default)]
_RNvMNtCsd92XLxb96zi_8oxigraph6sparqlNtB2_12QueryOptions15service_handler:
  243|  4.17k|    fn service_handler(&self) -> Arc<dyn ServiceHandler<Error = EvaluationError>> {
  244|  4.17k|        self.service_handler.clone().unwrap_or_else(|| {
  245|       |            if cfg!(feature = "http-client") {
  246|       |                Arc::new(service::SimpleServiceHandler::new(
  247|       |                    self.http_timeout,
  248|       |                    self.http_redirection_limit,
  249|       |                ))
  250|       |            } else {
  251|       |                Arc::new(EmptyServiceHandler)
  252|       |            }
  253|  4.17k|        })
  254|  4.17k|    }

_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator10eval_clear:
  201|  1.87k|    fn eval_clear(&mut self, graph: &GraphTarget, silent: bool) -> Result<(), EvaluationError> {
  202|  1.87k|        match graph {
  203|  1.27k|            GraphTarget::NamedNode(graph_name) => {
  204|  1.27k|                if self
  205|  1.27k|                    .transaction
  206|  1.27k|                    .reader()
  207|  1.27k|                    .contains_named_graph(&graph_name.as_ref().into())?
  208|       |                {
  209|     50|                    Ok(self.transaction.clear_graph(graph_name.into())?)
  210|  1.22k|                } else if silent {
  211|    960|                    Ok(())
  212|       |                } else {
  213|    260|                    Err(EvaluationError::GraphDoesNotExist(graph_name.clone()))
  214|       |                }
  215|       |            }
  216|       |            GraphTarget::DefaultGraph => {
  217|    296|                self.transaction.clear_graph(GraphNameRef::DefaultGraph)?;
  218|    296|                Ok(())
  219|       |            }
  220|     54|            GraphTarget::NamedGraphs => Ok(self.transaction.clear_all_named_graphs()?),
  221|    252|            GraphTarget::AllGraphs => Ok(self.transaction.clear_all_graphs()?),
  222|       |        }
  223|  1.87k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator9eval_drop:
  225|    884|    fn eval_drop(&mut self, graph: &GraphTarget, silent: bool) -> Result<(), EvaluationError> {
  226|    884|        match graph {
  227|    504|            GraphTarget::NamedNode(graph_name) => {
  228|    504|                if self.transaction.remove_named_graph(graph_name.into())? || silent {
  229|    472|                    Ok(())
  230|       |                } else {
  231|     32|                    Err(EvaluationError::GraphDoesNotExist(graph_name.clone()))
  232|       |                }
  233|       |            }
  234|       |            GraphTarget::DefaultGraph => {
  235|    242|                Ok(self.transaction.clear_graph(GraphNameRef::DefaultGraph)?)
  236|       |            }
  237|     14|            GraphTarget::NamedGraphs => Ok(self.transaction.remove_all_named_graphs()?),
  238|    124|            GraphTarget::AllGraphs => Ok(self.transaction.clear()?),
  239|       |        }
  240|    884|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator12convert_quad:
  242|  2.51k|    fn convert_quad(quad: &Quad, bnodes: &mut HashMap<BlankNode, BlankNode>) -> OxQuad {
  243|  2.51k|        OxQuad {
  244|  2.51k|            subject: match &quad.subject {
  245|  2.51k|                Subject::NamedNode(subject) => subject.clone().into(),
  246|      0|                Subject::BlankNode(subject) => Self::convert_blank_node(subject, bnodes).into(),
  247|      0|                Subject::Triple(subject) => Self::convert_triple(subject, bnodes).into(),
  248|       |            },
  249|  2.51k|            predicate: quad.predicate.clone(),
  250|  2.51k|            object: match &quad.object {
  251|    654|                Term::NamedNode(object) => object.clone().into(),
  252|      0|                Term::BlankNode(object) => Self::convert_blank_node(object, bnodes).into(),
  253|  1.85k|                Term::Literal(object) => object.clone().into(),
  254|      0|                Term::Triple(subject) => Self::convert_triple(subject, bnodes).into(),
  255|       |            },
  256|  2.51k|            graph_name: match &quad.graph_name {
  257|  2.25k|                GraphName::NamedNode(graph_name) => graph_name.clone().into(),
  258|    262|                GraphName::DefaultGraph => OxGraphName::DefaultGraph,
  259|       |            },
  260|       |        }
  261|  2.51k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator19convert_term_or_var:
  365|  3.94k|    fn convert_term_or_var(
  366|  3.94k|        term: &TermPattern,
  367|  3.94k|        variables: &[Variable],
  368|  3.94k|        values: &EncodedTuple,
  369|  3.94k|        dataset: &DatasetView,
  370|  3.94k|        bnodes: &mut HashMap<BlankNode, BlankNode>,
  371|  3.94k|    ) -> Result<Option<Term>, EvaluationError> {
  372|  3.94k|        Ok(match term {
  373|  1.83k|            TermPattern::NamedNode(term) => Some(term.clone().into()),
  374|      0|            TermPattern::BlankNode(bnode) => Some(Self::convert_blank_node(bnode, bnodes).into()),
  375|    224|            TermPattern::Literal(term) => Some(term.clone().into()),
  376|      0|            TermPattern::Triple(triple) => {
  377|      0|                Self::convert_triple_pattern(triple, variables, values, dataset, bnodes)?
  378|      0|                    .map(Into::into)
  379|       |            }
  380|  1.88k|            TermPattern::Variable(v) => Self::lookup_variable(v, variables, values)
  381|  1.88k|                .map(|node| dataset.decode_term(&node))
  382|  1.88k|                .transpose()?,
  383|       |        })
  384|  3.94k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator16eval_delete_data:
  109|    102|    fn eval_delete_data(&mut self, data: &[GroundQuad]) -> Result<(), EvaluationError> {
  110|  1.95k|        for quad in data {
  111|  1.85k|            let quad = Self::convert_ground_quad(quad);
  112|  1.85k|            self.transaction.remove(quad.as_ref())?;
  113|       |        }
  114|    102|        Ok(())
  115|    102|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator25convert_named_node_or_var:
  386|  6.83k|    fn convert_named_node_or_var(
  387|  6.83k|        term: &NamedNodePattern,
  388|  6.83k|        variables: &[Variable],
  389|  6.83k|        values: &EncodedTuple,
  390|  6.83k|        dataset: &DatasetView,
  391|  6.83k|    ) -> Result<Option<NamedNode>, EvaluationError> {
  392|  6.83k|        Ok(match term {
  393|  6.31k|            NamedNodePattern::NamedNode(term) => Some(term.clone()),
  394|    517|            NamedNodePattern::Variable(v) => Self::lookup_variable(v, variables, values)
  395|    517|                .map(|node| dataset.decode_named_node(&node))
  396|    517|                .transpose()?,
  397|       |        })
  398|  6.83k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator18eval_delete_insert:
  117|  4.17k|    fn eval_delete_insert(
  118|  4.17k|        &mut self,
  119|  4.17k|        delete: &[GroundQuadPattern],
  120|  4.17k|        insert: &[QuadPattern],
  121|  4.17k|        using: &QueryDataset,
  122|  4.17k|        algebra: &GraphPattern,
  123|  4.17k|    ) -> Result<(), EvaluationError> {
  124|  4.17k|        let dataset = Rc::new(DatasetView::new(self.transaction.reader(), using));
  125|  4.17k|        let mut pattern = sparopt::algebra::GraphPattern::from(algebra);
  126|  4.17k|        if !self.options.query_options.without_optimizations {
  127|  2.08k|            pattern = Optimizer::optimize_graph_pattern(sparopt::algebra::GraphPattern::Reduced {
  128|  2.08k|                inner: Box::new(pattern),
  129|  2.08k|            });
  130|  2.08k|        }
  131|  4.17k|        let evaluator = SimpleEvaluator::new(
  132|  4.17k|            Rc::clone(&dataset),
  133|  4.17k|            self.base_iri.clone(),
  134|  4.17k|            self.options.query_options.service_handler(),
  135|  4.17k|            Arc::new(self.options.query_options.custom_functions.clone()),
  136|  4.17k|            false,
  137|  4.17k|        );
  138|  4.17k|        let mut variables = Vec::new();
  139|  4.17k|        let mut bnodes = HashMap::new();
  140|  4.17k|        let (eval, _) = evaluator.graph_pattern_evaluator(&pattern, &mut variables);
  141|  4.17k|        let tuples =
  142|  4.17k|            eval(EncodedTuple::with_capacity(variables.len())).collect::<Result<Vec<_>, _>>()?; // TODO: would be much better to stream
  143|  5.60k|        for tuple in tuples {
  144|  8.53k|            for quad in delete {
  145|    637|                if let Some(quad) =
  146|  7.10k|                    Self::convert_ground_quad_pattern(quad, &variables, &tuple, &dataset)?
  147|       |                {
  148|    637|                    self.transaction.remove(quad.as_ref())?;
  149|  6.47k|                }
  150|       |            }
  151|  3.79k|            for quad in insert {
  152|    338|                if let Some(quad) =
  153|  2.36k|                    Self::convert_quad_pattern(quad, &variables, &tuple, &dataset, &mut bnodes)?
  154|       |                {
  155|    338|                    self.transaction.insert(quad.as_ref())?;
  156|  2.02k|                }
  157|       |            }
  158|  1.42k|            bnodes.clear();
  159|       |        }
  160|  4.17k|        Ok(())
  161|  4.17k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator27convert_ground_quad_pattern:
  458|  7.10k|    fn convert_ground_quad_pattern(
  459|  7.10k|        quad: &GroundQuadPattern,
  460|  7.10k|        variables: &[Variable],
  461|  7.10k|        values: &EncodedTuple,
  462|  7.10k|        dataset: &DatasetView,
  463|  7.10k|    ) -> Result<Option<OxQuad>, EvaluationError> {
  464|  7.10k|        Ok(Some(OxQuad {
  465|  7.10k|            subject: match Self::convert_ground_term_or_var(
  466|  7.10k|                &quad.subject,
  467|  7.10k|                variables,
  468|  7.10k|                values,
  469|  7.10k|                dataset,
  470|  7.10k|            )? {
  471|  5.14k|                Some(Term::NamedNode(node)) => node.into(),
  472|      0|                Some(Term::BlankNode(node)) => node.into(),
  473|      0|                Some(Term::Triple(triple)) => triple.into(),
  474|  1.96k|                Some(Term::Literal(_)) | None => return Ok(None),
  475|       |            },
  476|  4.74k|            predicate: if let Some(predicate) =
  477|  5.14k|                Self::convert_named_node_or_var(&quad.predicate, variables, values, dataset)?
  478|       |            {
  479|  4.74k|                predicate
  480|       |            } else {
  481|    394|                return Ok(None);
  482|       |            },
  483|    801|            object: if let Some(object) =
  484|  4.74k|                Self::convert_ground_term_or_var(&quad.object, variables, values, dataset)?
  485|       |            {
  486|    801|                object
  487|       |            } else {
  488|  3.94k|                return Ok(None);
  489|       |            },
  490|    637|            graph_name: if let Some(graph_name) =
  491|    801|                Self::convert_graph_name_or_var(&quad.graph_name, variables, values, dataset)?
  492|       |            {
  493|    637|                graph_name
  494|       |            } else {
  495|    164|                return Ok(None);
  496|       |            },
  497|       |        }))
  498|  7.10k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator8eval_all:
   49|  4.25k|    fn eval_all(
   50|  4.25k|        &mut self,
   51|  4.25k|        updates: &[GraphUpdateOperation],
   52|  4.25k|        using_datasets: &[Option<QueryDataset>],
   53|  4.25k|    ) -> Result<(), EvaluationError> {
   54|  7.70k|        for (update, using_dataset) in updates.iter().zip(using_datasets) {
   55|  7.70k|            self.eval(update, using_dataset)?;
   56|       |        }
   57|  3.95k|        Ok(())
   58|  4.25k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator20convert_quad_pattern:
  321|  2.36k|    fn convert_quad_pattern(
  322|  2.36k|        quad: &QuadPattern,
  323|  2.36k|        variables: &[Variable],
  324|  2.36k|        values: &EncodedTuple,
  325|  2.36k|        dataset: &DatasetView,
  326|  2.36k|        bnodes: &mut HashMap<BlankNode, BlankNode>,
  327|  2.36k|    ) -> Result<Option<OxQuad>, EvaluationError> {
  328|  2.36k|        Ok(Some(OxQuad {
  329|  2.36k|            subject: match Self::convert_term_or_var(
  330|  2.36k|                &quad.subject,
  331|  2.36k|                variables,
  332|  2.36k|                values,
  333|  2.36k|                dataset,
  334|  2.36k|                bnodes,
  335|  2.36k|            )? {
  336|  1.69k|                Some(Term::NamedNode(node)) => node.into(),
  337|      0|                Some(Term::BlankNode(node)) => node.into(),
  338|      0|                Some(Term::Triple(triple)) => triple.into(),
  339|    677|                Some(Term::Literal(_)) | None => return Ok(None),
  340|       |            },
  341|  1.58k|            predicate: if let Some(predicate) =
  342|  1.69k|                Self::convert_named_node_or_var(&quad.predicate, variables, values, dataset)?
  343|       |            {
  344|  1.58k|                predicate
  345|       |            } else {
  346|    110|                return Ok(None);
  347|       |            },
  348|    418|            object: if let Some(object) =
  349|  1.58k|                Self::convert_term_or_var(&quad.object, variables, values, dataset, bnodes)?
  350|       |            {
  351|    418|                object
  352|       |            } else {
  353|  1.16k|                return Ok(None);
  354|       |            },
  355|    338|            graph_name: if let Some(graph_name) =
  356|    418|                Self::convert_graph_name_or_var(&quad.graph_name, variables, values, dataset)?
  357|       |            {
  358|    338|                graph_name
  359|       |            } else {
  360|     78|                return Ok(None);
  361|       |            },
  362|       |        }))
  363|  2.36k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator4eval:
   60|  7.70k|    fn eval(
   61|  7.70k|        &mut self,
   62|  7.70k|        update: &GraphUpdateOperation,
   63|  7.70k|        using_dataset: &Option<QueryDataset>,
   64|  7.70k|    ) -> Result<(), EvaluationError> {
   65|  7.70k|        match update {
   66|    286|            GraphUpdateOperation::InsertData { data } => self.eval_insert_data(data),
   67|    102|            GraphUpdateOperation::DeleteData { data } => self.eval_delete_data(data),
   68|       |            GraphUpdateOperation::DeleteInsert {
   69|  4.17k|                delete,
   70|  4.17k|                insert,
   71|  4.17k|                pattern,
   72|  4.17k|                ..
   73|  4.17k|            } => self.eval_delete_insert(
   74|  4.17k|                delete,
   75|  4.17k|                insert,
   76|  4.17k|                using_dataset.as_ref().unwrap_or(&QueryDataset::new()),
   77|  4.17k|                pattern,
   78|  4.17k|            ),
   79|       |            GraphUpdateOperation::Load {
   80|      0|                silent,
   81|      0|                source,
   82|      0|                destination,
   83|       |            } => {
   84|      0|                if let Err(error) = self.eval_load(source, destination) {
   85|      0|                    if *silent {
   86|      0|                        Ok(())
   87|       |                    } else {
   88|      0|                        Err(error)
   89|       |                    }
   90|       |                } else {
   91|      0|                    Ok(())
   92|       |                }
   93|       |            }
   94|  1.87k|            GraphUpdateOperation::Clear { graph, silent } => self.eval_clear(graph, *silent),
   95|    380|            GraphUpdateOperation::Create { graph, silent } => self.eval_create(graph, *silent),
   96|    884|            GraphUpdateOperation::Drop { graph, silent } => self.eval_drop(graph, *silent),
   97|       |        }
   98|  7.70k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator25convert_graph_name_or_var:
  400|  1.21k|    fn convert_graph_name_or_var(
  401|  1.21k|        term: &GraphNamePattern,
  402|  1.21k|        variables: &[Variable],
  403|  1.21k|        values: &EncodedTuple,
  404|  1.21k|        dataset: &DatasetView,
  405|  1.21k|    ) -> Result<Option<OxGraphName>, EvaluationError> {
  406|  1.21k|        match term {
  407|    939|            GraphNamePattern::NamedNode(term) => Ok(Some(term.clone().into())),
  408|     28|            GraphNamePattern::DefaultGraph => Ok(Some(OxGraphName::DefaultGraph)),
  409|    252|            GraphNamePattern::Variable(v) => Self::lookup_variable(v, variables, values)
  410|    252|                .map(|node| {
  411|       |                    Ok(if node == EncodedTerm::DefaultGraph {
  412|       |                        OxGraphName::DefaultGraph
  413|       |                    } else {
  414|       |                        dataset.decode_named_node(&node)?.into()
  415|       |                    })
  416|    252|                })
  417|    252|                .transpose(),
  418|       |        }
  419|  1.21k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator16eval_insert_data:
  100|    286|    fn eval_insert_data(&mut self, data: &[Quad]) -> Result<(), EvaluationError> {
  101|    286|        let mut bnodes = HashMap::new();
  102|  2.79k|        for quad in data {
  103|  2.51k|            let quad = Self::convert_quad(quad, &mut bnodes);
  104|  2.51k|            self.transaction.insert(quad.as_ref())?;
  105|       |        }
  106|    286|        Ok(())
  107|    286|    }
_RNvNtNtCsd92XLxb96zi_8oxigraph6sparql6update15evaluate_update:
   24|  4.25k|pub fn evaluate_update<'a, 'b: 'a>(
   25|  4.25k|    transaction: &'a mut StorageWriter<'b>,
   26|  4.25k|    update: &Update,
   27|  4.25k|    options: &UpdateOptions,
   28|  4.25k|) -> Result<(), EvaluationError> {
   29|  4.25k|    SimpleUpdateEvaluator {
   30|  4.25k|        transaction,
   31|  4.25k|        base_iri: update.inner.base_iri.clone().map(Rc::new),
   32|  4.25k|        options: options.clone(),
   33|  4.25k|        client: Client::new(
   34|  4.25k|            options.query_options.http_timeout,
   35|  4.25k|            options.query_options.http_redirection_limit,
   36|  4.25k|        ),
   37|  4.25k|    }
   38|  4.25k|    .eval_all(&update.inner.operations, &update.using_datasets)
   39|  4.25k|}
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator11eval_create:
  193|    380|    fn eval_create(&mut self, graph_name: &NamedNode, silent: bool) -> Result<(), EvaluationError> {
  194|    380|        if self.transaction.insert_named_graph(graph_name.into())? || silent {
  195|    378|            Ok(())
  196|       |        } else {
  197|      2|            Err(EvaluationError::GraphAlreadyExists(graph_name.clone()))
  198|       |        }
  199|    380|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator19convert_ground_quad:
  287|  1.85k|    fn convert_ground_quad(quad: &GroundQuad) -> OxQuad {
  288|  1.85k|        OxQuad {
  289|  1.85k|            subject: match &quad.subject {
  290|  1.85k|                GroundSubject::NamedNode(subject) => subject.clone().into(),
  291|      0|                GroundSubject::Triple(subject) => Self::convert_ground_triple(subject).into(),
  292|       |            },
  293|  1.85k|            predicate: quad.predicate.clone(),
  294|  1.85k|            object: match &quad.object {
  295|    870|                GroundTerm::NamedNode(object) => object.clone().into(),
  296|    982|                GroundTerm::Literal(object) => object.clone().into(),
  297|      0|                GroundTerm::Triple(subject) => Self::convert_ground_triple(subject).into(),
  298|       |            },
  299|  1.85k|            graph_name: match &quad.graph_name {
  300|  1.75k|                GraphName::NamedNode(graph_name) => graph_name.clone().into(),
  301|     96|                GraphName::DefaultGraph => OxGraphName::DefaultGraph,
  302|       |            },
  303|       |        }
  304|  1.85k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator15lookup_variable:
  554|  8.75k|    fn lookup_variable(
  555|  8.75k|        v: &Variable,
  556|  8.75k|        variables: &[Variable],
  557|  8.75k|        values: &EncodedTuple,
  558|  8.75k|    ) -> Option<EncodedTerm> {
  559|  8.75k|        variables
  560|  8.75k|            .iter()
  561|  8.75k|            .position(|v2| v == v2)
  562|  8.75k|            .and_then(|i| values.get(i))
  563|  8.75k|            .cloned()
  564|  8.75k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB2_21SimpleUpdateEvaluator26convert_ground_term_or_var:
  500|  11.8k|    fn convert_ground_term_or_var(
  501|  11.8k|        term: &GroundTermPattern,
  502|  11.8k|        variables: &[Variable],
  503|  11.8k|        values: &EncodedTuple,
  504|  11.8k|        dataset: &DatasetView,
  505|  11.8k|    ) -> Result<Option<Term>, EvaluationError> {
  506|  11.8k|        Ok(match term {
  507|  5.47k|            GroundTermPattern::NamedNode(term) => Some(term.clone().into()),
  508|    278|            GroundTermPattern::Literal(term) => Some(term.clone().into()),
  509|      0|            GroundTermPattern::Triple(triple) => {
  510|      0|                Self::convert_ground_triple_pattern(triple, variables, values, dataset)?
  511|      0|                    .map(Into::into)
  512|       |            }
  513|  6.09k|            GroundTermPattern::Variable(v) => Self::lookup_variable(v, variables, values)
  514|  6.09k|                .map(|node| dataset.decode_term(&node))
  515|  6.09k|                .transpose()?,
  516|       |        })
  517|  11.8k|    }
_RNCNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB4_21SimpleUpdateEvaluator25convert_named_node_or_var0B8_:
  395|     13|                .map(|node| dataset.decode_named_node(&node))
_RNCNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB4_21SimpleUpdateEvaluator15lookup_variable0B8_:
  561|  9.31k|            .position(|v2| v == v2)
_RNCNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB4_21SimpleUpdateEvaluator15lookup_variables_0B8_:
  562|  1.20k|            .and_then(|i| values.get(i))
_RNCNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB4_21SimpleUpdateEvaluator25convert_graph_name_or_var0B8_:
  410|     10|                .map(|node| {
  411|     10|                    Ok(if node == EncodedTerm::DefaultGraph {
  412|      0|                        OxGraphName::DefaultGraph
  413|       |                    } else {
  414|     10|                        dataset.decode_named_node(&node)?.into()
  415|       |                    })
  416|     10|                })
_RNCNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB4_21SimpleUpdateEvaluator26convert_ground_term_or_var0B8_:
  514|    189|                .map(|node| dataset.decode_term(&node))
_RNCNvMNtNtCsd92XLxb96zi_8oxigraph6sparql6updateNtB4_21SimpleUpdateEvaluator19convert_term_or_var0B8_:
  381|     50|                .map(|node| dataset.decode_term(&node))

_RINvMNtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB3_2Db11transactionuNtNtNtB9_6sparql5error15EvaluationErrorNCINvMB7_NtB7_7Storage11transactionuB1h_NCINvMNtB9_5storeNtB2E_5Store10update_optNtNtCs9nhK3FOW46N_4core7convert10InfallibleNtNtB1l_7algebra6UpdateNtB1l_12QueryOptionsE0E0ECsh41WZG82U3t_18sparql_update_eval:
   49|  4.25k|    pub fn transaction<'a, 'b: 'a, T, E: Error + 'static + From<StorageError>>(
   50|  4.25k|        &'b self,
   51|  4.25k|        f: impl Fn(Transaction<'a>) -> Result<T, E>,
   52|  4.25k|    ) -> Result<T, E> {
   53|  4.25k|        f(Transaction(Rc::new(RefCell::new(self.0.write().unwrap()))))
   54|  4.25k|    }
_RINvXsa_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB6_12ColumnFamilyNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEBc_:
   57|   142k|#[derive(Clone, Ord, PartialOrd, Eq, PartialEq, Hash)]
_RNCNvMs_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB6_6Reader12contains_keys_0Bc_:
  114|  51.9k|                        .map_or(false, |cf| cf.contains_key(key)))
_RINvMNtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB3_2Db11transactionuNtNtB7_5error12StorageErrorNCINvMB7_NtB7_7Storage11transactionuB1h_NCINvMNtB9_5storeNtB2s_5Store11transactionuB1h_NCNvB2r_5clear0E0E0EB9_:
   49|  4.25k|    pub fn transaction<'a, 'b: 'a, T, E: Error + 'static + From<StorageError>>(
   50|  4.25k|        &'b self,
   51|  4.25k|        f: impl Fn(Transaction<'a>) -> Result<T, E>,
   52|  4.25k|    ) -> Result<T, E> {
   53|  4.25k|        f(Transaction(Rc::new(RefCell::new(self.0.write().unwrap()))))
   54|  4.25k|    }
_RNCNvMs_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB6_6Reader3get0Bc_:
   81|  5.08k|                .and_then(|cf| cf.get(key).cloned())),
_RNCNvMs_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB6_6Reader11scan_prefixs2_0Bc_:
  170|  1.74k|                        .take_while(|(k, _)| k.starts_with(prefix))
_RNCNvMs_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB6_6Reader3gets_0Bc_:
   87|    230|                        .and_then(|cf| cf.get(key).cloned()))
_RNCNvMs_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB6_6Reader11scan_prefixs1_0Bc_:
  167|  1.22k|                    tree.iter().map(|(k, v)| (k.clone(), v.clone())).collect()
_RNCNvMs0_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB7_11Transaction23contains_key_for_update0Bd_:
  250|  10.2k|            .map_or(false, |cf| cf.contains_key(key)))
_RNCNvMs_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB6_6Reader11scan_prefixs3_0Bc_:
  171|  1.38k|                        .map(|(k, v)| (k.clone(), v.clone()))
_RNCNvMs_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB6_6Reader11scan_prefix0Bc_:
  145|  1.59k|                    tree.iter().map(|(k, v)| (k.clone(), v.clone())).collect()
_RNvMs_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB4_6Reader3get:
   71|  5.31k|    pub fn get(
   72|  5.31k|        &self,
   73|  5.31k|        column_family: &ColumnFamily,
   74|  5.31k|        key: &[u8],
   75|  5.31k|    ) -> Result<Option<Vec<u8>>, StorageError> {
   76|  5.31k|        match &self.0 {
   77|  5.08k|            InnerReader::Simple(reader) => Ok(reader
   78|  5.08k|                .read()
   79|  5.08k|                .unwrap()
   80|  5.08k|                .get(column_family)
   81|  5.08k|                .and_then(|cf| cf.get(key).cloned())),
   82|    230|            InnerReader::Transaction(reader) => {
   83|    230|                if let Some(reader) = reader.upgrade() {
   84|    230|                    Ok((*reader)
   85|    230|                        .borrow()
   86|    230|                        .get(column_family)
   87|    230|                        .and_then(|cf| cf.get(key).cloned()))
   88|       |                } else {
   89|      0|                    Err(StorageError::Other(
   90|      0|                        "The transaction is already ended".into(),
   91|      0|                    ))
   92|       |                }
   93|       |            }
   94|       |        }
   95|  5.31k|    }
_RNvMs_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB4_6Reader4iter:
  125|  4.38k|    pub fn iter(&self, column_family: &ColumnFamily) -> Result<Iter, StorageError> {
  126|  4.38k|        self.scan_prefix(column_family, &[])
  127|  4.38k|    }
_RNvMs1_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB5_4Iter6status:
  307|  55.7k|    pub fn status(&self) -> Result<(), StorageError> {
  308|  55.7k|        Ok(())
  309|  55.7k|    }
_RNvMs0_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB5_11Transaction6remove:
  277|  10.1k|    pub fn remove(&mut self, column_family: &ColumnFamily, key: &[u8]) -> Result<(), StorageError> {
  278|  10.1k|        self.0
  279|  10.1k|            .borrow_mut()
  280|  10.1k|            .get_mut(column_family)
  281|  10.1k|            .unwrap()
  282|  10.1k|            .remove(key);
  283|  10.1k|        Ok(())
  284|  10.1k|    }
_RNvMNtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB2_2Db13column_family:
   34|     11|    pub fn column_family(&self, name: &'static str) -> Result<ColumnFamily, StorageError> {
   35|     11|        let column_family = ColumnFamily(name);
   36|     11|        if self.0.read().unwrap().contains_key(&column_family) {
   37|     11|            Ok(column_family)
   38|       |        } else {
   39|      0|            Err(CorruptionError::from_missing_column_family_name(name).into())
   40|       |        }
   41|     11|    }
_RNvXs2_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB5_2DbNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneBb_:
   19|  20.2k|#[derive(Clone)]
_RNvMs0_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB5_11Transaction12insert_empty:
  268|  10.1k|    pub fn insert_empty(
  269|  10.1k|        &mut self,
  270|  10.1k|        column_family: &ColumnFamily,
  271|  10.1k|        key: &[u8],
  272|  10.1k|    ) -> Result<(), StorageError> {
  273|  10.1k|        self.insert(column_family, key, &[])
  274|  10.1k|    }
_RNvMNtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB2_2Db8snapshot:
   44|  4.25k|    pub fn snapshot(&self) -> Reader {
   45|  4.25k|        Reader(InnerReader::Simple(Arc::clone(&self.0)))
   46|  4.25k|    }
_RNvMs1_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB5_4Iter4next:
  302|  4.20k|    pub fn next(&mut self) {
  303|  4.20k|        self.current = self.iter.next();
  304|  4.20k|    }
_RNvMs_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB4_6Reader11scan_prefix:
  130|  50.1k|    pub fn scan_prefix(
  131|  50.1k|        &self,
  132|  50.1k|        column_family: &ColumnFamily,
  133|  50.1k|        prefix: &[u8],
  134|  50.1k|    ) -> Result<Iter, StorageError> {
  135|  50.1k|        let data: Vec<_> = match &self.0 {
  136|  8.50k|            InnerReader::Simple(reader) => {
  137|  8.50k|                let trees = reader.read().unwrap();
  138|  8.50k|                let Some(tree) = trees.get(column_family) else {
  139|      0|                    return Ok(Iter {
  140|      0|                        iter: Vec::new().into_iter(),
  141|      0|                        current: None,
  142|      0|                    });
  143|       |                };
  144|  8.50k|                if prefix.is_empty() {
  145|  8.50k|                    tree.iter().map(|(k, v)| (k.clone(), v.clone())).collect()
  146|       |                } else {
  147|      0|                    tree.range(prefix.to_vec()..)
  148|      0|                        .take_while(|(k, _)| k.starts_with(prefix))
  149|      0|                        .map(|(k, v)| (k.clone(), v.clone()))
  150|      0|                        .collect()
  151|       |                }
  152|       |            }
  153|  41.6k|            InnerReader::Transaction(reader) => {
  154|  41.6k|                let Some(reader) = reader.upgrade() else {
  155|      0|                    return Err(StorageError::Other(
  156|      0|                        "The transaction is already ended".into(),
  157|      0|                    ));
  158|       |                };
  159|  41.6k|                let trees = (*reader).borrow();
  160|  41.6k|                let Some(tree) = trees.get(column_family) else {
  161|      0|                    return Ok(Iter {
  162|      0|                        iter: Vec::new().into_iter(),
  163|      0|                        current: None,
  164|      0|                    });
  165|       |                };
  166|  41.6k|                if prefix.is_empty() {
  167|  15.8k|                    tree.iter().map(|(k, v)| (k.clone(), v.clone())).collect()
  168|       |                } else {
  169|  25.8k|                    tree.range(prefix.to_vec()..)
  170|  25.8k|                        .take_while(|(k, _)| k.starts_with(prefix))
  171|  25.8k|                        .map(|(k, v)| (k.clone(), v.clone()))
  172|  25.8k|                        .collect()
  173|       |                }
  174|       |            }
  175|       |        };
  176|  50.1k|        let mut iter = data.into_iter();
  177|  50.1k|        let current = iter.next();
  178|  50.1k|        Ok(Iter { iter, current })
  179|  50.1k|    }
_RNvMNtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB2_2Db3new:
   24|      1|    pub fn new(column_families: Vec<ColumnFamilyDefinition>) -> Result<Self, StorageError> {
   25|      1|        let mut trees = HashMap::new();
   26|     12|        for cf in column_families {
   27|     11|            trees.insert(ColumnFamily(cf.name), BTreeMap::default());
   28|     11|        }
   29|      1|        trees.entry(ColumnFamily("default")).or_default(); // We make sure that "default" key exists.
   30|      1|        Ok(Self(Arc::new(RwLock::new(trees))))
   31|      1|    }
_RNvMs_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB4_6Reader12contains_key:
   98|  51.9k|    pub fn contains_key(
   99|  51.9k|        &self,
  100|  51.9k|        column_family: &ColumnFamily,
  101|  51.9k|        key: &[u8],
  102|  51.9k|    ) -> Result<bool, StorageError> {
  103|  51.9k|        match &self.0 {
  104|      0|            InnerReader::Simple(reader) => Ok(reader
  105|      0|                .read()
  106|      0|                .unwrap()
  107|      0|                .get(column_family)
  108|      0|                .map_or(false, |cf| cf.contains_key(key))),
  109|  51.9k|            InnerReader::Transaction(reader) => {
  110|  51.9k|                if let Some(reader) = reader.upgrade() {
  111|  51.9k|                    Ok((*reader)
  112|  51.9k|                        .borrow()
  113|  51.9k|                        .get(column_family)
  114|  51.9k|                        .map_or(false, |cf| cf.contains_key(key)))
  115|       |                } else {
  116|      0|                    Err(StorageError::Other(
  117|      0|                        "The transaction is already ended".into(),
  118|      0|                    ))
  119|       |                }
  120|       |            }
  121|       |        }
  122|  51.9k|    }
_RNvMs0_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB5_11Transaction6reader:
  234|  16.0k|    pub fn reader(&self) -> Reader {
  235|  16.0k|        // SAFETY: This transmute is safe because we take a weak reference and the only Rc reference used is guarded by the lifetime.
  236|  16.0k|        Reader(InnerReader::Transaction(Rc::downgrade(unsafe {
  237|  16.0k|            transmute(&self.0)
  238|  16.0k|        })))
  239|  16.0k|    }
_RNvMs0_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB5_11Transaction23contains_key_for_update:
  242|  10.2k|    pub fn contains_key_for_update(
  243|  10.2k|        &self,
  244|  10.2k|        column_family: &ColumnFamily,
  245|  10.2k|        key: &[u8],
  246|  10.2k|    ) -> Result<bool, StorageError> {
  247|  10.2k|        Ok((*self.0)
  248|  10.2k|            .borrow()
  249|  10.2k|            .get(column_family)
  250|  10.2k|            .map_or(false, |cf| cf.contains_key(key)))
  251|  10.2k|    }
_RNvMs1_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB5_4Iter3key:
  293|  55.7k|    pub fn key(&self) -> Option<&[u8]> {
  294|  55.7k|        Some(&self.current.as_ref()?.0)
  295|  55.7k|    }
_RNvXs3_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB5_12ColumnFamilyNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneBb_:
   57|   223k|#[derive(Clone, Ord, PartialOrd, Eq, PartialEq, Hash)]
_RNvMs0_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB5_11Transaction6insert:
  254|  15.0k|    pub fn insert(
  255|  15.0k|        &mut self,
  256|  15.0k|        column_family: &ColumnFamily,
  257|  15.0k|        key: &[u8],
  258|  15.0k|        value: &[u8],
  259|  15.0k|    ) -> Result<(), StorageError> {
  260|  15.0k|        self.0
  261|  15.0k|            .borrow_mut()
  262|  15.0k|            .get_mut(column_family)
  263|  15.0k|            .unwrap()
  264|  15.0k|            .insert(key.into(), value.into());
  265|  15.0k|        Ok(())
  266|  15.0k|    }
_RNvXs9_NtNtNtCsd92XLxb96zi_8oxigraph7storage7backend8fallbackNtB5_12ColumnFamilyNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqBb_:
   57|   142k|#[derive(Clone, Ord, PartialOrd, Eq, PartialEq, Hash)]

_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder10write_term:
  497|   134k|pub fn write_term(sink: &mut Vec<u8>, term: &EncodedTerm) {
  498|   134k|    match term {
  499|      0|        EncodedTerm::DefaultGraph => (),
  500|   118k|        EncodedTerm::NamedNode { iri_id } => {
  501|   118k|            sink.push(TYPE_NAMED_NODE_ID);
  502|   118k|            sink.extend_from_slice(&iri_id.to_be_bytes());
  503|   118k|        }
  504|      0|        EncodedTerm::NumericalBlankNode { id } => {
  505|      0|            sink.push(TYPE_NUMERICAL_BLANK_NODE_ID);
  506|      0|            sink.extend_from_slice(&id.to_be_bytes())
  507|       |        }
  508|      0|        EncodedTerm::SmallBlankNode(id) => {
  509|      0|            sink.push(TYPE_SMALL_BLANK_NODE_ID);
  510|      0|            sink.extend_from_slice(&id.to_be_bytes())
  511|       |        }
  512|      0|        EncodedTerm::BigBlankNode { id_id } => {
  513|      0|            sink.push(TYPE_BIG_BLANK_NODE_ID);
  514|      0|            sink.extend_from_slice(&id_id.to_be_bytes());
  515|      0|        }
  516|    706|        EncodedTerm::SmallStringLiteral(value) => {
  517|    706|            sink.push(TYPE_SMALL_STRING_LITERAL);
  518|    706|            sink.extend_from_slice(&value.to_be_bytes())
  519|       |        }
  520|      0|        EncodedTerm::BigStringLiteral { value_id } => {
  521|      0|            sink.push(TYPE_BIG_STRING_LITERAL);
  522|      0|            sink.extend_from_slice(&value_id.to_be_bytes());
  523|      0|        }
  524|  4.89k|        EncodedTerm::SmallSmallLangStringLiteral { value, language } => {
  525|  4.89k|            sink.push(TYPE_SMALL_SMALL_LANG_STRING_LITERAL);
  526|  4.89k|            sink.extend_from_slice(&language.to_be_bytes());
  527|  4.89k|            sink.extend_from_slice(&value.to_be_bytes());
  528|  4.89k|        }
  529|      0|        EncodedTerm::SmallBigLangStringLiteral { value, language_id } => {
  530|      0|            sink.push(TYPE_SMALL_BIG_LANG_STRING_LITERAL);
  531|      0|            sink.extend_from_slice(&language_id.to_be_bytes());
  532|      0|            sink.extend_from_slice(&value.to_be_bytes());
  533|      0|        }
  534|      0|        EncodedTerm::BigSmallLangStringLiteral { value_id, language } => {
  535|      0|            sink.push(TYPE_BIG_SMALL_LANG_STRING_LITERAL);
  536|      0|            sink.extend_from_slice(&language.to_be_bytes());
  537|      0|            sink.extend_from_slice(&value_id.to_be_bytes());
  538|      0|        }
  539|       |        EncodedTerm::BigBigLangStringLiteral {
  540|      0|            value_id,
  541|      0|            language_id,
  542|      0|        } => {
  543|      0|            sink.push(TYPE_BIG_BIG_LANG_STRING_LITERAL);
  544|      0|            sink.extend_from_slice(&language_id.to_be_bytes());
  545|      0|            sink.extend_from_slice(&value_id.to_be_bytes());
  546|      0|        }
  547|      0|        EncodedTerm::SmallTypedLiteral { value, datatype_id } => {
  548|      0|            sink.push(TYPE_SMALL_TYPED_LITERAL);
  549|      0|            sink.extend_from_slice(&datatype_id.to_be_bytes());
  550|      0|            sink.extend_from_slice(&value.to_be_bytes());
  551|      0|        }
  552|       |        EncodedTerm::BigTypedLiteral {
  553|      0|            value_id,
  554|      0|            datatype_id,
  555|      0|        } => {
  556|      0|            sink.push(TYPE_BIG_TYPED_LITERAL);
  557|      0|            sink.extend_from_slice(&datatype_id.to_be_bytes());
  558|      0|            sink.extend_from_slice(&value_id.to_be_bytes());
  559|      0|        }
  560|  2.21k|        EncodedTerm::BooleanLiteral(value) => sink.push(if bool::from(*value) {
  561|    564|            TYPE_BOOLEAN_LITERAL_TRUE
  562|       |        } else {
  563|  1.65k|            TYPE_BOOLEAN_LITERAL_FALSE
  564|       |        }),
  565|      0|        EncodedTerm::FloatLiteral(value) => {
  566|      0|            sink.push(TYPE_FLOAT_LITERAL);
  567|      0|            sink.extend_from_slice(&value.to_be_bytes())
  568|       |        }
  569|    970|        EncodedTerm::DoubleLiteral(value) => {
  570|    970|            sink.push(TYPE_DOUBLE_LITERAL);
  571|    970|            sink.extend_from_slice(&value.to_be_bytes())
  572|       |        }
  573|  2.45k|        EncodedTerm::IntegerLiteral(value) => {
  574|  2.45k|            sink.push(TYPE_INTEGER_LITERAL);
  575|  2.45k|            sink.extend_from_slice(&value.to_be_bytes())
  576|       |        }
  577|  4.88k|        EncodedTerm::DecimalLiteral(value) => {
  578|  4.88k|            sink.push(TYPE_DECIMAL_LITERAL);
  579|  4.88k|            sink.extend_from_slice(&value.to_be_bytes())
  580|       |        }
  581|      0|        EncodedTerm::DateTimeLiteral(value) => {
  582|      0|            sink.push(TYPE_DATE_TIME_LITERAL);
  583|      0|            sink.extend_from_slice(&value.to_be_bytes())
  584|       |        }
  585|      0|        EncodedTerm::TimeLiteral(value) => {
  586|      0|            sink.push(TYPE_TIME_LITERAL);
  587|      0|            sink.extend_from_slice(&value.to_be_bytes())
  588|       |        }
  589|      0|        EncodedTerm::DurationLiteral(value) => {
  590|      0|            sink.push(TYPE_DURATION_LITERAL);
  591|      0|            sink.extend_from_slice(&value.to_be_bytes())
  592|       |        }
  593|      0|        EncodedTerm::DateLiteral(value) => {
  594|      0|            sink.push(TYPE_DATE_LITERAL);
  595|      0|            sink.extend_from_slice(&value.to_be_bytes())
  596|       |        }
  597|      0|        EncodedTerm::GYearMonthLiteral(value) => {
  598|      0|            sink.push(TYPE_G_YEAR_MONTH_LITERAL);
  599|      0|            sink.extend_from_slice(&value.to_be_bytes())
  600|       |        }
  601|      0|        EncodedTerm::GYearLiteral(value) => {
  602|      0|            sink.push(TYPE_G_YEAR_LITERAL);
  603|      0|            sink.extend_from_slice(&value.to_be_bytes())
  604|       |        }
  605|      0|        EncodedTerm::GMonthDayLiteral(value) => {
  606|      0|            sink.push(TYPE_G_MONTH_DAY_LITERAL);
  607|      0|            sink.extend_from_slice(&value.to_be_bytes())
  608|       |        }
  609|      0|        EncodedTerm::GDayLiteral(value) => {
  610|      0|            sink.push(TYPE_G_DAY_LITERAL);
  611|      0|            sink.extend_from_slice(&value.to_be_bytes())
  612|       |        }
  613|      0|        EncodedTerm::GMonthLiteral(value) => {
  614|      0|            sink.push(TYPE_G_MONTH_LITERAL);
  615|      0|            sink.extend_from_slice(&value.to_be_bytes())
  616|       |        }
  617|      0|        EncodedTerm::YearMonthDurationLiteral(value) => {
  618|      0|            sink.push(TYPE_YEAR_MONTH_DURATION_LITERAL);
  619|      0|            sink.extend_from_slice(&value.to_be_bytes())
  620|       |        }
  621|      0|        EncodedTerm::DayTimeDurationLiteral(value) => {
  622|      0|            sink.push(TYPE_DAY_TIME_DURATION_LITERAL);
  623|      0|            sink.extend_from_slice(&value.to_be_bytes())
  624|       |        }
  625|      0|        EncodedTerm::Triple(value) => {
  626|      0|            sink.push(TYPE_TRIPLE);
  627|      0|            write_term(sink, &value.subject);
  628|      0|            write_term(sink, &value.predicate);
  629|      0|            write_term(sink, &value.object);
  630|      0|        }
  631|       |    }
  632|   134k|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder15write_gspo_quad:
  423|  2.81k|pub fn write_gspo_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  424|  2.81k|    write_term(sink, &quad.graph_name);
  425|  2.81k|    write_term(sink, &quad.subject);
  426|  2.81k|    write_term(sink, &quad.predicate);
  427|  2.81k|    write_term(sink, &quad.object);
  428|  2.81k|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder11encode_term:
  462|  14.3k|pub fn encode_term(t: &EncodedTerm) -> Vec<u8> {
  463|  14.3k|    let mut vec = Vec::with_capacity(WRITTEN_TERM_MAX_SIZE);
  464|  14.3k|    write_term(&mut vec, t);
  465|  14.3k|    vec
  466|  14.3k|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder16encode_term_pair:
  468|  9.28k|pub fn encode_term_pair(t1: &EncodedTerm, t2: &EncodedTerm) -> Vec<u8> {
  469|  9.28k|    let mut vec = Vec::with_capacity(2 * WRITTEN_TERM_MAX_SIZE);
  470|  9.28k|    write_term(&mut vec, t1);
  471|  9.28k|    write_term(&mut vec, t2);
  472|  9.28k|    vec
  473|  9.28k|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder15write_spog_quad:
  402|  6.36k|pub fn write_spog_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  403|  6.36k|    write_term(sink, &quad.subject);
  404|  6.36k|    write_term(sink, &quad.predicate);
  405|  6.36k|    write_term(sink, &quad.object);
  406|  6.36k|    write_term(sink, &quad.graph_name);
  407|  6.36k|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder14write_spo_quad:
  444|    646|pub fn write_spo_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  445|    646|    write_term(sink, &quad.subject);
  446|    646|    write_term(sink, &quad.predicate);
  447|    646|    write_term(sink, &quad.object);
  448|    646|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder16encode_term_quad:
  483|    398|pub fn encode_term_quad(
  484|    398|    t1: &EncodedTerm,
  485|    398|    t2: &EncodedTerm,
  486|    398|    t3: &EncodedTerm,
  487|    398|    t4: &EncodedTerm,
  488|    398|) -> Vec<u8> {
  489|    398|    let mut vec = Vec::with_capacity(4 * WRITTEN_TERM_MAX_SIZE);
  490|    398|    write_term(&mut vec, t1);
  491|    398|    write_term(&mut vec, t2);
  492|    398|    write_term(&mut vec, t3);
  493|    398|    write_term(&mut vec, t4);
  494|    398|    vec
  495|    398|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder11decode_term:
   80|    926|pub fn decode_term(mut buffer: &[u8]) -> Result<EncodedTerm, StorageError> {
   81|    926|    buffer.read_term()
   82|    926|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder15write_ospg_quad:
  416|  2.81k|pub fn write_ospg_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  417|  2.81k|    write_term(sink, &quad.object);
  418|  2.81k|    write_term(sink, &quad.subject);
  419|  2.81k|    write_term(sink, &quad.predicate);
  420|  2.81k|    write_term(sink, &quad.graph_name);
  421|  2.81k|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder14write_osp_quad:
  456|    520|pub fn write_osp_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  457|    520|    write_term(sink, &quad.object);
  458|    520|    write_term(sink, &quad.subject);
  459|    520|    write_term(sink, &quad.predicate);
  460|    520|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder15write_gpos_quad:
  430|  2.81k|pub fn write_gpos_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  431|  2.81k|    write_term(sink, &quad.graph_name);
  432|  2.81k|    write_term(sink, &quad.predicate);
  433|  2.81k|    write_term(sink, &quad.object);
  434|  2.81k|    write_term(sink, &quad.subject);
  435|  2.81k|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder15write_gosp_quad:
  437|  2.81k|pub fn write_gosp_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  438|  2.81k|    write_term(sink, &quad.graph_name);
  439|  2.81k|    write_term(sink, &quad.object);
  440|  2.81k|    write_term(sink, &quad.subject);
  441|  2.81k|    write_term(sink, &quad.predicate);
  442|  2.81k|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder18encode_term_triple:
  475|  3.03k|pub fn encode_term_triple(t1: &EncodedTerm, t2: &EncodedTerm, t3: &EncodedTerm) -> Vec<u8> {
  476|  3.03k|    let mut vec = Vec::with_capacity(3 * WRITTEN_TERM_MAX_SIZE);
  477|  3.03k|    write_term(&mut vec, t1);
  478|  3.03k|    write_term(&mut vec, t2);
  479|  3.03k|    write_term(&mut vec, t3);
  480|  3.03k|    vec
  481|  3.03k|}
_RNvMNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoderNtB2_12QuadEncoding6decode:
   65|  3.27k|    pub fn decode(self, mut buffer: &[u8]) -> Result<EncodedQuad, StorageError> {
   66|  3.27k|        match self {
   67|      0|            Self::Spog => buffer.read_spog_quad(),
   68|      0|            Self::Posg => buffer.read_posg_quad(),
   69|      0|            Self::Ospg => buffer.read_ospg_quad(),
   70|  2.75k|            Self::Gspo => buffer.read_gspo_quad(),
   71|      1|            Self::Gpos => buffer.read_gpos_quad(),
   72|      0|            Self::Gosp => buffer.read_gosp_quad(),
   73|    520|            Self::Dspo => buffer.read_dspo_quad(),
   74|      0|            Self::Dpos => buffer.read_dpos_quad(),
   75|      0|            Self::Dosp => buffer.read_dosp_quad(),
   76|       |        }
   77|  3.27k|    }
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder15write_posg_quad:
  409|  2.81k|pub fn write_posg_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  410|  2.81k|    write_term(sink, &quad.predicate);
  411|  2.81k|    write_term(sink, &quad.object);
  412|  2.81k|    write_term(sink, &quad.subject);
  413|  2.81k|    write_term(sink, &quad.graph_name);
  414|  2.81k|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder14write_pos_quad:
  450|    520|pub fn write_pos_quad(sink: &mut Vec<u8>, quad: &EncodedQuad) {
  451|    520|    write_term(sink, &quad.predicate);
  452|    520|    write_term(sink, &quad.object);
  453|    520|    write_term(sink, &quad.subject);
  454|    520|}
_RNvYRShNtNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder10TermReader14read_gspo_quadBb_:
  126|  2.75k|    fn read_gspo_quad(&mut self) -> Result<EncodedQuad, StorageError> {
  127|  2.75k|        let graph_name = self.read_term()?;
  128|  2.75k|        let subject = self.read_term()?;
  129|  2.75k|        let predicate = self.read_term()?;
  130|  2.75k|        let object = self.read_term()?;
  131|  2.75k|        Ok(EncodedQuad {
  132|  2.75k|            subject,
  133|  2.75k|            predicate,
  134|  2.75k|            object,
  135|  2.75k|            graph_name,
  136|  2.75k|        })
  137|  2.75k|    }
_RNvYRShNtNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder10TermReader14read_gpos_quadBb_:
  139|      1|    fn read_gpos_quad(&mut self) -> Result<EncodedQuad, StorageError> {
  140|      1|        let graph_name = self.read_term()?;
  141|      1|        let predicate = self.read_term()?;
  142|      1|        let object = self.read_term()?;
  143|      1|        let subject = self.read_term()?;
  144|      1|        Ok(EncodedQuad {
  145|      1|            subject,
  146|      1|            predicate,
  147|      1|            object,
  148|      1|            graph_name,
  149|      1|        })
  150|      1|    }
_RNvYRShNtNtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoder10TermReader14read_dspo_quadBb_:
  165|    520|    fn read_dspo_quad(&mut self) -> Result<EncodedQuad, StorageError> {
  166|    520|        let subject = self.read_term()?;
  167|    520|        let predicate = self.read_term()?;
  168|    520|        let object = self.read_term()?;
  169|    520|        Ok(EncodedQuad {
  170|    520|            subject,
  171|    520|            predicate,
  172|    520|            object,
  173|    520|            graph_name: EncodedTerm::DefaultGraph,
  174|    520|        })
  175|    520|    }
_RNvXs_NtNtCsd92XLxb96zi_8oxigraph7storage14binary_encoderRShNtB4_10TermReader9read_termB8_:
  203|  13.5k|    fn read_term(&mut self) -> Result<EncodedTerm, StorageError> {
  204|  13.5k|        let mut type_buffer = [0];
  205|  13.5k|        self.read_exact(&mut type_buffer)?;
  206|  13.5k|        match type_buffer[0] {
  207|       |            TYPE_NAMED_NODE_ID => {
  208|  11.3k|                let mut buffer = [0; 16];
  209|  11.3k|                self.read_exact(&mut buffer)?;
  210|  11.3k|                Ok(EncodedTerm::NamedNode {
  211|  11.3k|                    iri_id: StrHash::from_be_bytes(buffer),
  212|  11.3k|                })
  213|       |            }
  214|       |            TYPE_NUMERICAL_BLANK_NODE_ID => {
  215|      0|                let mut buffer = [0; 16];
  216|      0|                self.read_exact(&mut buffer)?;
  217|      0|                Ok(EncodedTerm::NumericalBlankNode {
  218|      0|                    id: u128::from_be_bytes(buffer),
  219|      0|                })
  220|       |            }
  221|       |            TYPE_SMALL_BLANK_NODE_ID => {
  222|      0|                let mut buffer = [0; 16];
  223|      0|                self.read_exact(&mut buffer)?;
  224|       |                Ok(EncodedTerm::SmallBlankNode(
  225|      0|                    SmallString::from_be_bytes(buffer).map_err(CorruptionError::new)?,
  226|       |                ))
  227|       |            }
  228|       |            TYPE_BIG_BLANK_NODE_ID => {
  229|      0|                let mut buffer = [0; 16];
  230|      0|                self.read_exact(&mut buffer)?;
  231|      0|                Ok(EncodedTerm::BigBlankNode {
  232|      0|                    id_id: StrHash::from_be_bytes(buffer),
  233|      0|                })
  234|       |            }
  235|       |            TYPE_SMALL_SMALL_LANG_STRING_LITERAL => {
  236|    671|                let mut language_buffer = [0; 16];
  237|    671|                self.read_exact(&mut language_buffer)?;
  238|    671|                let mut value_buffer = [0; 16];
  239|    671|                self.read_exact(&mut value_buffer)?;
  240|       |                Ok(EncodedTerm::SmallSmallLangStringLiteral {
  241|    671|                    value: SmallString::from_be_bytes(value_buffer)
  242|    671|                        .map_err(CorruptionError::new)?,
  243|    671|                    language: SmallString::from_be_bytes(language_buffer)
  244|    671|                        .map_err(CorruptionError::new)?,
  245|       |                })
  246|       |            }
  247|       |            TYPE_SMALL_BIG_LANG_STRING_LITERAL => {
  248|      0|                let mut language_buffer = [0; 16];
  249|      0|                self.read_exact(&mut language_buffer)?;
  250|      0|                let mut value_buffer = [0; 16];
  251|      0|                self.read_exact(&mut value_buffer)?;
  252|       |                Ok(EncodedTerm::SmallBigLangStringLiteral {
  253|      0|                    value: SmallString::from_be_bytes(value_buffer)
  254|      0|                        .map_err(CorruptionError::new)?,
  255|      0|                    language_id: StrHash::from_be_bytes(language_buffer),
  256|       |                })
  257|       |            }
  258|       |            TYPE_BIG_SMALL_LANG_STRING_LITERAL => {
  259|      0|                let mut language_buffer = [0; 16];
  260|      0|                self.read_exact(&mut language_buffer)?;
  261|      0|                let mut value_buffer = [0; 16];
  262|      0|                self.read_exact(&mut value_buffer)?;
  263|       |                Ok(EncodedTerm::BigSmallLangStringLiteral {
  264|      0|                    value_id: StrHash::from_be_bytes(value_buffer),
  265|      0|                    language: SmallString::from_be_bytes(language_buffer)
  266|      0|                        .map_err(CorruptionError::new)?,
  267|       |                })
  268|       |            }
  269|       |            TYPE_BIG_BIG_LANG_STRING_LITERAL => {
  270|      0|                let mut language_buffer = [0; 16];
  271|      0|                self.read_exact(&mut language_buffer)?;
  272|      0|                let mut value_buffer = [0; 16];
  273|      0|                self.read_exact(&mut value_buffer)?;
  274|      0|                Ok(EncodedTerm::BigBigLangStringLiteral {
  275|      0|                    value_id: StrHash::from_be_bytes(value_buffer),
  276|      0|                    language_id: StrHash::from_be_bytes(language_buffer),
  277|      0|                })
  278|       |            }
  279|       |            TYPE_SMALL_TYPED_LITERAL => {
  280|      0|                let mut datatype_buffer = [0; 16];
  281|      0|                self.read_exact(&mut datatype_buffer)?;
  282|      0|                let mut value_buffer = [0; 16];
  283|      0|                self.read_exact(&mut value_buffer)?;
  284|       |                Ok(EncodedTerm::SmallTypedLiteral {
  285|      0|                    datatype_id: StrHash::from_be_bytes(datatype_buffer),
  286|      0|                    value: SmallString::from_be_bytes(value_buffer)
  287|      0|                        .map_err(CorruptionError::new)?,
  288|       |                })
  289|       |            }
  290|       |            TYPE_BIG_TYPED_LITERAL => {
  291|      0|                let mut datatype_buffer = [0; 16];
  292|      0|                self.read_exact(&mut datatype_buffer)?;
  293|      0|                let mut value_buffer = [0; 16];
  294|      0|                self.read_exact(&mut value_buffer)?;
  295|      0|                Ok(EncodedTerm::BigTypedLiteral {
  296|      0|                    datatype_id: StrHash::from_be_bytes(datatype_buffer),
  297|      0|                    value_id: StrHash::from_be_bytes(value_buffer),
  298|      0|                })
  299|       |            }
  300|       |            TYPE_SMALL_STRING_LITERAL => {
  301|     62|                let mut buffer = [0; 16];
  302|     62|                self.read_exact(&mut buffer)?;
  303|       |                Ok(EncodedTerm::SmallStringLiteral(
  304|     62|                    SmallString::from_be_bytes(buffer).map_err(CorruptionError::new)?,
  305|       |                ))
  306|       |            }
  307|       |            TYPE_BIG_STRING_LITERAL => {
  308|      0|                let mut buffer = [0; 16];
  309|      0|                self.read_exact(&mut buffer)?;
  310|      0|                Ok(EncodedTerm::BigStringLiteral {
  311|      0|                    value_id: StrHash::from_be_bytes(buffer),
  312|      0|                })
  313|       |            }
  314|     60|            TYPE_BOOLEAN_LITERAL_TRUE => Ok(true.into()),
  315|    204|            TYPE_BOOLEAN_LITERAL_FALSE => Ok(false.into()),
  316|       |            TYPE_FLOAT_LITERAL => {
  317|      0|                let mut buffer = [0; 4];
  318|      0|                self.read_exact(&mut buffer)?;
  319|      0|                Ok(Float::from_be_bytes(buffer).into())
  320|       |            }
  321|       |            TYPE_DOUBLE_LITERAL => {
  322|     62|                let mut buffer = [0; 8];
  323|     62|                self.read_exact(&mut buffer)?;
  324|     62|                Ok(Double::from_be_bytes(buffer).into())
  325|       |            }
  326|       |            TYPE_INTEGER_LITERAL => {
  327|    340|                let mut buffer = [0; 8];
  328|    340|                self.read_exact(&mut buffer)?;
  329|    340|                Ok(Integer::from_be_bytes(buffer).into())
  330|       |            }
  331|       |            TYPE_DECIMAL_LITERAL => {
  332|    732|                let mut buffer = [0; 16];
  333|    732|                self.read_exact(&mut buffer)?;
  334|    732|                Ok(Decimal::from_be_bytes(buffer).into())
  335|       |            }
  336|       |            TYPE_DATE_TIME_LITERAL => {
  337|      0|                let mut buffer = [0; 18];
  338|      0|                self.read_exact(&mut buffer)?;
  339|      0|                Ok(DateTime::from_be_bytes(buffer).into())
  340|       |            }
  341|       |            TYPE_TIME_LITERAL => {
  342|      0|                let mut buffer = [0; 18];
  343|      0|                self.read_exact(&mut buffer)?;
  344|      0|                Ok(Time::from_be_bytes(buffer).into())
  345|       |            }
  346|       |            TYPE_DATE_LITERAL => {
  347|      0|                let mut buffer = [0; 18];
  348|      0|                self.read_exact(&mut buffer)?;
  349|      0|                Ok(Date::from_be_bytes(buffer).into())
  350|       |            }
  351|       |            TYPE_G_YEAR_MONTH_LITERAL => {
  352|      0|                let mut buffer = [0; 18];
  353|      0|                self.read_exact(&mut buffer)?;
  354|      0|                Ok(GYearMonth::from_be_bytes(buffer).into())
  355|       |            }
  356|       |            TYPE_G_YEAR_LITERAL => {
  357|      0|                let mut buffer = [0; 18];
  358|      0|                self.read_exact(&mut buffer)?;
  359|      0|                Ok(GYear::from_be_bytes(buffer).into())
  360|       |            }
  361|       |            TYPE_G_MONTH_DAY_LITERAL => {
  362|      0|                let mut buffer = [0; 18];
  363|      0|                self.read_exact(&mut buffer)?;
  364|      0|                Ok(GMonthDay::from_be_bytes(buffer).into())
  365|       |            }
  366|       |            TYPE_G_DAY_LITERAL => {
  367|      0|                let mut buffer = [0; 18];
  368|      0|                self.read_exact(&mut buffer)?;
  369|      0|                Ok(GDay::from_be_bytes(buffer).into())
  370|       |            }
  371|       |            TYPE_G_MONTH_LITERAL => {
  372|      0|                let mut buffer = [0; 18];
  373|      0|                self.read_exact(&mut buffer)?;
  374|      0|                Ok(GMonth::from_be_bytes(buffer).into())
  375|       |            }
  376|       |            TYPE_DURATION_LITERAL => {
  377|      0|                let mut buffer = [0; 24];
  378|      0|                self.read_exact(&mut buffer)?;
  379|      0|                Ok(Duration::from_be_bytes(buffer).into())
  380|       |            }
  381|       |            TYPE_YEAR_MONTH_DURATION_LITERAL => {
  382|      0|                let mut buffer = [0; 8];
  383|      0|                self.read_exact(&mut buffer)?;
  384|      0|                Ok(YearMonthDuration::from_be_bytes(buffer).into())
  385|       |            }
  386|       |            TYPE_DAY_TIME_DURATION_LITERAL => {
  387|      0|                let mut buffer = [0; 16];
  388|      0|                self.read_exact(&mut buffer)?;
  389|      0|                Ok(DayTimeDuration::from_be_bytes(buffer).into())
  390|       |            }
  391|       |            TYPE_TRIPLE => Ok(EncodedTriple {
  392|      0|                subject: self.read_term()?,
  393|      0|                predicate: self.read_term()?,
  394|      0|                object: self.read_term()?,
  395|       |            }
  396|      0|            .into()),
  397|      0|            _ => Err(CorruptionError::msg("the term buffer has an invalid type id").into()),
  398|       |        }
  399|  13.5k|    }

_RINvMs_NtNtCsd92XLxb96zi_8oxigraph7storage5errorNtB5_15CorruptionError3msgReEB9_:
   69|      2|    pub(crate) fn msg(msg: impl Into<String>) -> Self {
   70|      2|        Self(CorruptionErrorKind::Msg(msg.into()))
   71|      2|    }
_RNvXs7_NtNtCsd92XLxb96zi_8oxigraph7storage5errorNtB5_12StorageErrorINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_15CorruptionErrorE4from:
    9|      2|#[derive(Debug, thiserror::Error)]

_RNCINvMNtCsd92XLxb96zi_8oxigraph7storageNtB5_7Storage11transactionuNtNtNtB7_6sparql5error15EvaluationErrorNCINvMNtB7_5storeNtB1M_5Store10update_optNtNtCs9nhK3FOW46N_4core7convert10InfallibleNtNtB17_7algebra6UpdateNtB17_12QueryOptionsE0E0Csh41WZG82U3t_18sparql_update_eval:
  275|  4.25k|        self.db.transaction(|transaction| {
  276|  4.25k|            f(StorageWriter {
  277|  4.25k|                buffer: Vec::new(),
  278|  4.25k|                transaction,
  279|  4.25k|                storage: self,
  280|  4.25k|            })
  281|  4.25k|        })
_RINvMNtCsd92XLxb96zi_8oxigraph7storageNtB3_7Storage11transactionuNtNtNtB5_6sparql5error15EvaluationErrorNCINvMNtB5_5storeNtB1K_5Store10update_optNtNtCs9nhK3FOW46N_4core7convert10InfallibleNtNtB15_7algebra6UpdateNtB15_12QueryOptionsE0ECsh41WZG82U3t_18sparql_update_eval:
  271|  4.25k|    pub fn transaction<'a, 'b: 'a, T, E: Error + 'static + From<StorageError>>(
  272|  4.25k|        &'b self,
  273|  4.25k|        f: impl Fn(StorageWriter<'a>) -> Result<T, E>,
  274|  4.25k|    ) -> Result<T, E> {
  275|  4.25k|        self.db.transaction(|transaction| {
  276|       |            f(StorageWriter {
  277|       |                buffer: Vec::new(),
  278|       |                transaction,
  279|       |                storage: self,
  280|       |            })
  281|  4.25k|        })
  282|  4.25k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader27quads_for_subject_predicate:
  414|    221|    fn quads_for_subject_predicate(
  415|    221|        &self,
  416|    221|        subject: &EncodedTerm,
  417|    221|        predicate: &EncodedTerm,
  418|    221|    ) -> ChainedDecodingQuadIterator {
  419|    221|        ChainedDecodingQuadIterator::pair(
  420|    221|            self.dspo_quads(&encode_term_pair(subject, predicate)),
  421|    221|            self.spog_quads(&encode_term_pair(subject, predicate)),
  422|    221|        )
  423|    221|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader15quads_for_graph:
  473|  12.7k|    fn quads_for_graph(&self, graph_name: &EncodedTerm) -> ChainedDecodingQuadIterator {
  474|  12.7k|        ChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  475|  1.61k|            self.dspo_quads(&Vec::default())
  476|       |        } else {
  477|  11.1k|            self.gspo_quads(&encode_term(graph_name))
  478|       |        })
  479|  12.7k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader32quads_for_predicate_object_graph:
  545|  1.69k|    fn quads_for_predicate_object_graph(
  546|  1.69k|        &self,
  547|  1.69k|        predicate: &EncodedTerm,
  548|  1.69k|        object: &EncodedTerm,
  549|  1.69k|        graph_name: &EncodedTerm,
  550|  1.69k|    ) -> ChainedDecodingQuadIterator {
  551|  1.69k|        ChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  552|    117|            self.dpos_quads(&encode_term_pair(predicate, object))
  553|       |        } else {
  554|  1.57k|            self.gpos_quads(&encode_term_triple(graph_name, predicate, object))
  555|       |        })
  556|  1.69k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader10ospg_quads:
  589|    269|    fn ospg_quads(&self, prefix: &[u8]) -> DecodingQuadIterator {
  590|    269|        self.inner_quads(&self.storage.ospg_cf, prefix, QuadEncoding::Ospg)
  591|    269|    }
_RNvMNtCsd92XLxb96zi_8oxigraph7storageNtB2_7Storage15column_families:
  110|      1|    fn column_families() -> Vec<ColumnFamilyDefinition> {
  111|      1|        vec![
  112|      1|            ColumnFamilyDefinition {
  113|      1|                name: ID2STR_CF,
  114|      1|                use_iter: false,
  115|      1|                min_prefix_size: 0,
  116|      1|                unordered_writes: true,
  117|      1|            },
  118|      1|            ColumnFamilyDefinition {
  119|      1|                name: SPOG_CF,
  120|      1|                use_iter: true,
  121|      1|                min_prefix_size: 17, // named or blank node start
  122|      1|                unordered_writes: false,
  123|      1|            },
  124|      1|            ColumnFamilyDefinition {
  125|      1|                name: POSG_CF,
  126|      1|                use_iter: true,
  127|      1|                min_prefix_size: 17, // named node start
  128|      1|                unordered_writes: false,
  129|      1|            },
  130|      1|            ColumnFamilyDefinition {
  131|      1|                name: OSPG_CF,
  132|      1|                use_iter: true,
  133|      1|                min_prefix_size: 0, // There are small literals...
  134|      1|                unordered_writes: false,
  135|      1|            },
  136|      1|            ColumnFamilyDefinition {
  137|      1|                name: GSPO_CF,
  138|      1|                use_iter: true,
  139|      1|                min_prefix_size: 17, // named or blank node start
  140|      1|                unordered_writes: false,
  141|      1|            },
  142|      1|            ColumnFamilyDefinition {
  143|      1|                name: GPOS_CF,
  144|      1|                use_iter: true,
  145|      1|                min_prefix_size: 17, // named or blank node start
  146|      1|                unordered_writes: false,
  147|      1|            },
  148|      1|            ColumnFamilyDefinition {
  149|      1|                name: GOSP_CF,
  150|      1|                use_iter: true,
  151|      1|                min_prefix_size: 17, // named or blank node start
  152|      1|                unordered_writes: false,
  153|      1|            },
  154|      1|            ColumnFamilyDefinition {
  155|      1|                name: DSPO_CF,
  156|      1|                use_iter: true,
  157|      1|                min_prefix_size: 17, // named or blank node start
  158|      1|                unordered_writes: false,
  159|      1|            },
  160|      1|            ColumnFamilyDefinition {
  161|      1|                name: DPOS_CF,
  162|      1|                use_iter: true,
  163|      1|                min_prefix_size: 17, // named or blank node start
  164|      1|                unordered_writes: false,
  165|      1|            },
  166|      1|            ColumnFamilyDefinition {
  167|      1|                name: DOSP_CF,
  168|      1|                use_iter: true,
  169|      1|                min_prefix_size: 0, // There are small literals...
  170|      1|                unordered_writes: false,
  171|      1|            },
  172|      1|            ColumnFamilyDefinition {
  173|      1|                name: GRAPHS_CF,
  174|      1|                use_iter: true,
  175|      1|                min_prefix_size: 17, // named or blank node start
  176|      1|                unordered_writes: false,
  177|      1|            },
  178|      1|        ]
  179|      1|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader10dosp_quads:
  613|    489|    fn dosp_quads(&self, prefix: &[u8]) -> DecodingQuadIterator {
  614|    489|        self.inner_quads(&self.storage.dosp_cf, prefix, QuadEncoding::Dosp)
  615|    489|    }
_RNvXs4_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageReaderNtNtB5_15numeric_encoder9StrLookup7get_str:
  854|  5.08k|    fn get_str(&self, key: &StrHash) -> Result<Option<String>, StorageError> {
  855|  5.08k|        self.get_str(key)
  856|  5.08k|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter17insert_graph_name:
  988|    754|    fn insert_graph_name(
  989|    754|        &mut self,
  990|    754|        graph_name: GraphNameRef<'_>,
  991|    754|        encoded: &EncodedTerm,
  992|    754|    ) -> Result<(), StorageError> {
  993|    754|        match graph_name {
  994|    754|            GraphNameRef::NamedNode(graph_name) => self.insert_term(graph_name.into(), encoded),
  995|      0|            GraphNameRef::BlankNode(graph_name) => self.insert_term(graph_name.into(), encoded),
  996|      0|            GraphNameRef::DefaultGraph => Ok(()),
  997|       |        }
  998|    754|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter16clear_all_graphs:
 1124|    252|    pub fn clear_all_graphs(&mut self) -> Result<(), StorageError> {
 1125|    252|        for quad in self.reader().quads() {
 1126|     20|            self.remove_encoded(&quad?)?;
 1127|       |        }
 1128|    252|        Ok(())
 1129|    252|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader11inner_quads:
  617|  45.8k|    fn inner_quads(
  618|  45.8k|        &self,
  619|  45.8k|        column_family: &ColumnFamily,
  620|  45.8k|        prefix: &[u8],
  621|  45.8k|        encoding: QuadEncoding,
  622|  45.8k|    ) -> DecodingQuadIterator {
  623|  45.8k|        DecodingQuadIterator {
  624|  45.8k|            iter: self.reader.scan_prefix(column_family, prefix).unwrap(), // TODO: propagate error?
  625|  45.8k|            encoding,
  626|  45.8k|        }
  627|  45.8k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader17quads_for_subject:
  407|     30|    fn quads_for_subject(&self, subject: &EncodedTerm) -> ChainedDecodingQuadIterator {
  408|     30|        ChainedDecodingQuadIterator::pair(
  409|     30|            self.dspo_quads(&encode_term(subject)),
  410|     30|            self.spog_quads(&encode_term(subject)),
  411|     30|        )
  412|     30|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader16quads_for_object:
  466|    194|    fn quads_for_object(&self, object: &EncodedTerm) -> ChainedDecodingQuadIterator {
  467|    194|        ChainedDecodingQuadIterator::pair(
  468|    194|            self.dosp_quads(&encode_term(object)),
  469|    194|            self.ospg_quads(&encode_term(object)),
  470|    194|        )
  471|    194|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader25quads_for_predicate_graph:
  533|  8.02k|    fn quads_for_predicate_graph(
  534|  8.02k|        &self,
  535|  8.02k|        predicate: &EncodedTerm,
  536|  8.02k|        graph_name: &EncodedTerm,
  537|  8.02k|    ) -> ChainedDecodingQuadIterator {
  538|  8.02k|        ChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  539|    818|            self.dpos_quads(&encode_term(predicate))
  540|       |        } else {
  541|  7.21k|            self.gpos_quads(&encode_term_pair(graph_name, predicate))
  542|       |        })
  543|  8.02k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader10posg_quads:
  585|    303|    fn posg_quads(&self, prefix: &[u8]) -> DecodingQuadIterator {
  586|    303|        self.inner_quads(&self.storage.posg_cf, prefix, QuadEncoding::Posg)
  587|    303|    }
_RNvMNtCsd92XLxb96zi_8oxigraph7storageNtB2_7Storage3new:
   75|      1|    pub fn new() -> Result<Self, StorageError> {
   76|      1|        Self::setup(Db::new(Self::column_families())?)
   77|      1|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader10dpos_quads:
  609|  1.23k|    fn dpos_quads(&self, prefix: &[u8]) -> DecodingQuadIterator {
  610|  1.23k|        self.inner_quads(&self.storage.dpos_cf, prefix, QuadEncoding::Dpos)
  611|  1.23k|    }
_RNvXs1_NtCsd92XLxb96zi_8oxigraph7storageNtB5_27ChainedDecodingQuadIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
  807|  38.9k|    fn next(&mut self) -> Option<Self::Item> {
  808|  38.9k|        if let Some(result) = self.first.next() {
  809|  1.90k|            Some(result)
  810|  36.9k|        } else if let Some(second) = self.second.as_mut() {
  811|  11.4k|            second.next()
  812|       |        } else {
  813|  25.5k|            None
  814|       |        }
  815|  38.9k|    }
_RNvXs2_NtCsd92XLxb96zi_8oxigraph7storageNtB5_20DecodingQuadIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
  826|  50.4k|    fn next(&mut self) -> Option<Self::Item> {
  827|  50.4k|        if let Err(e) = self.iter.status() {
  828|      0|            return Some(Err(e));
  829|  50.4k|        }
  830|  50.4k|        let term = self.encoding.decode(self.iter.key()?);
  831|  3.27k|        self.iter.next();
  832|  3.27k|        Some(term)
  833|  50.4k|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter6reader:
  866|  16.0k|    pub fn reader(&self) -> StorageReader {
  867|  16.0k|        StorageReader {
  868|  16.0k|            reader: self.transaction.reader(),
  869|  16.0k|            storage: self.storage.clone(),
  870|  16.0k|        }
  871|  16.0k|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter6insert:
  873|  2.85k|    pub fn insert(&mut self, quad: QuadRef<'_>) -> Result<bool, StorageError> {
  874|  2.85k|        let encoded = quad.into();
  875|  2.85k|        self.buffer.clear();
  876|  2.85k|        let result = if quad.graph_name.is_default_graph() {
  877|    272|            write_spo_quad(&mut self.buffer, &encoded);
  878|    272|            if self
  879|    272|                .transaction
  880|    272|                .contains_key_for_update(&self.storage.dspo_cf, &self.buffer)?
  881|       |            {
  882|     12|                false
  883|       |            } else {
  884|    260|                self.transaction
  885|    260|                    .insert_empty(&self.storage.dspo_cf, &self.buffer)?;
  886|       |
  887|    260|                self.buffer.clear();
  888|    260|                write_pos_quad(&mut self.buffer, &encoded);
  889|    260|                self.transaction
  890|    260|                    .insert_empty(&self.storage.dpos_cf, &self.buffer)?;
  891|       |
  892|    260|                self.buffer.clear();
  893|    260|                write_osp_quad(&mut self.buffer, &encoded);
  894|    260|                self.transaction
  895|    260|                    .insert_empty(&self.storage.dosp_cf, &self.buffer)?;
  896|       |
  897|    260|                self.insert_term(quad.subject.into(), &encoded.subject)?;
  898|    260|                self.insert_term(quad.predicate.into(), &encoded.predicate)?;
  899|    260|                self.insert_term(quad.object, &encoded.object)?;
  900|    260|                true
  901|       |            }
  902|       |        } else {
  903|  2.57k|            write_spog_quad(&mut self.buffer, &encoded);
  904|  2.57k|            if self
  905|  2.57k|                .transaction
  906|  2.57k|                .contains_key_for_update(&self.storage.spog_cf, &self.buffer)?
  907|       |            {
  908|  1.17k|                false
  909|       |            } else {
  910|  1.40k|                self.transaction
  911|  1.40k|                    .insert_empty(&self.storage.spog_cf, &self.buffer)?;
  912|       |
  913|  1.40k|                self.buffer.clear();
  914|  1.40k|                write_posg_quad(&mut self.buffer, &encoded);
  915|  1.40k|                self.transaction
  916|  1.40k|                    .insert_empty(&self.storage.posg_cf, &self.buffer)?;
  917|       |
  918|  1.40k|                self.buffer.clear();
  919|  1.40k|                write_ospg_quad(&mut self.buffer, &encoded);
  920|  1.40k|                self.transaction
  921|  1.40k|                    .insert_empty(&self.storage.ospg_cf, &self.buffer)?;
  922|       |
  923|  1.40k|                self.buffer.clear();
  924|  1.40k|                write_gspo_quad(&mut self.buffer, &encoded);
  925|  1.40k|                self.transaction
  926|  1.40k|                    .insert_empty(&self.storage.gspo_cf, &self.buffer)?;
  927|       |
  928|  1.40k|                self.buffer.clear();
  929|  1.40k|                write_gpos_quad(&mut self.buffer, &encoded);
  930|  1.40k|                self.transaction
  931|  1.40k|                    .insert_empty(&self.storage.gpos_cf, &self.buffer)?;
  932|       |
  933|  1.40k|                self.buffer.clear();
  934|  1.40k|                write_gosp_quad(&mut self.buffer, &encoded);
  935|  1.40k|                self.transaction
  936|  1.40k|                    .insert_empty(&self.storage.gosp_cf, &self.buffer)?;
  937|       |
  938|  1.40k|                self.insert_term(quad.subject.into(), &encoded.subject)?;
  939|  1.40k|                self.insert_term(quad.predicate.into(), &encoded.predicate)?;
  940|  1.40k|                self.insert_term(quad.object, &encoded.object)?;
  941|       |
  942|  1.40k|                self.buffer.clear();
  943|  1.40k|                write_term(&mut self.buffer, &encoded.graph_name);
  944|  1.40k|                if !self
  945|  1.40k|                    .transaction
  946|  1.40k|                    .contains_key_for_update(&self.storage.graphs_cf, &self.buffer)?
  947|       |                {
  948|    754|                    self.transaction
  949|    754|                        .insert_empty(&self.storage.graphs_cf, &self.buffer)?;
  950|    754|                    self.insert_graph_name(quad.graph_name, &encoded.graph_name)?;
  951|    654|                }
  952|  1.40k|                true
  953|       |            }
  954|       |        };
  955|  2.85k|        Ok(result)
  956|  2.85k|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter6remove:
 1025|  2.48k|    pub fn remove(&mut self, quad: QuadRef<'_>) -> Result<bool, StorageError> {
 1026|  2.48k|        self.remove_encoded(&quad.into())
 1027|  2.48k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader20quads_in_named_graph:
  403|     54|    fn quads_in_named_graph(&self) -> DecodingQuadIterator {
  404|     54|        self.gspo_quads(&[])
  405|     54|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader26quads_for_predicate_object:
  455|     74|    fn quads_for_predicate_object(
  456|     74|        &self,
  457|     74|        predicate: &EncodedTerm,
  458|     74|        object: &EncodedTerm,
  459|     74|    ) -> ChainedDecodingQuadIterator {
  460|     74|        ChainedDecodingQuadIterator::pair(
  461|     74|            self.dpos_quads(&encode_term_pair(predicate, object)),
  462|     74|            self.posg_quads(&encode_term_pair(predicate, object)),
  463|     74|        )
  464|     74|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader30quads_for_subject_object_graph:
  520|    132|    fn quads_for_subject_object_graph(
  521|    132|        &self,
  522|    132|        subject: &EncodedTerm,
  523|    132|        object: &EncodedTerm,
  524|    132|        graph_name: &EncodedTerm,
  525|    132|    ) -> ChainedDecodingQuadIterator {
  526|    132|        ChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  527|     49|            self.dosp_quads(&encode_term_pair(object, subject))
  528|       |        } else {
  529|     83|            self.gosp_quads(&encode_term_triple(graph_name, object, subject))
  530|       |        })
  531|    132|    }
_RNvXs3_NtCsd92XLxb96zi_8oxigraph7storageNtB5_21DecodingGraphIteratorNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
  843|  5.31k|    fn next(&mut self) -> Option<Self::Item> {
  844|  5.31k|        if let Err(e) = self.iter.status() {
  845|      0|            return Some(Err(e));
  846|  5.31k|        }
  847|  5.31k|        let term = decode_term(self.iter.key()?);
  848|    926|        self.iter.next();
  849|    926|        Some(term)
  850|  5.31k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader5quads:
  399|  9.16k|    pub fn quads(&self) -> ChainedDecodingQuadIterator {
  400|  9.16k|        ChainedDecodingQuadIterator::pair(self.dspo_quads(&[]), self.gspo_quads(&[]))
  401|  9.16k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader19quads_for_predicate:
  448|    229|    fn quads_for_predicate(&self, predicate: &EncodedTerm) -> ChainedDecodingQuadIterator {
  449|    229|        ChainedDecodingQuadIterator::pair(
  450|    229|            self.dpos_quads(&encode_term(predicate)),
  451|    229|            self.posg_quads(&encode_term(predicate)),
  452|    229|        )
  453|    229|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader10spog_quads:
  581|    382|    fn spog_quads(&self, prefix: &[u8]) -> DecodingQuadIterator {
  582|    382|        self.inner_quads(&self.storage.spog_cf, prefix, QuadEncoding::Spog)
  583|    382|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader10dspo_quads:
  605|  11.5k|    fn dspo_quads(&self, prefix: &[u8]) -> DecodingQuadIterator {
  606|  11.5k|        self.inner_quads(&self.storage.dspo_cf, prefix, QuadEncoding::Dspo)
  607|  11.5k|    }
_RNvMs0_NtCsd92XLxb96zi_8oxigraph7storageNtB5_27ChainedDecodingQuadIterator4pair:
  796|  10.1k|    fn pair(first: DecodingQuadIterator, second: DecodingQuadIterator) -> Self {
  797|  10.1k|        Self {
  798|  10.1k|            first,
  799|  10.1k|            second: Some(second),
  800|  10.1k|        }
  801|  10.1k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader17quads_for_pattern:
  336|  29.4k|    pub fn quads_for_pattern(
  337|  29.4k|        &self,
  338|  29.4k|        subject: Option<&EncodedTerm>,
  339|  29.4k|        predicate: Option<&EncodedTerm>,
  340|  29.4k|        object: Option<&EncodedTerm>,
  341|  29.4k|        graph_name: Option<&EncodedTerm>,
  342|  29.4k|    ) -> ChainedDecodingQuadIterator {
  343|  29.4k|        match subject {
  344|  2.67k|            Some(subject) => match predicate {
  345|  1.99k|                Some(predicate) => match object {
  346|    677|                    Some(object) => match graph_name {
  347|    546|                        Some(graph_name) => self.quads_for_subject_predicate_object_graph(
  348|    546|                            subject, predicate, object, graph_name,
  349|    546|                        ),
  350|    131|                        None => self.quads_for_subject_predicate_object(subject, predicate, object),
  351|       |                    },
  352|  1.32k|                    None => match graph_name {
  353|  1.10k|                        Some(graph_name) => {
  354|  1.10k|                            self.quads_for_subject_predicate_graph(subject, predicate, graph_name)
  355|       |                        }
  356|    221|                        None => self.quads_for_subject_predicate(subject, predicate),
  357|       |                    },
  358|       |                },
  359|    671|                None => match object {
  360|    207|                    Some(object) => match graph_name {
  361|    132|                        Some(graph_name) => {
  362|    132|                            self.quads_for_subject_object_graph(subject, object, graph_name)
  363|       |                        }
  364|     75|                        None => self.quads_for_subject_object(subject, object),
  365|       |                    },
  366|    464|                    None => match graph_name {
  367|    434|                        Some(graph_name) => self.quads_for_subject_graph(subject, graph_name),
  368|     30|                        None => self.quads_for_subject(subject),
  369|       |                    },
  370|       |                },
  371|       |            },
  372|  26.8k|            None => match predicate {
  373|  10.0k|                Some(predicate) => match object {
  374|  1.76k|                    Some(object) => match graph_name {
  375|  1.69k|                        Some(graph_name) => {
  376|  1.69k|                            self.quads_for_predicate_object_graph(predicate, object, graph_name)
  377|       |                        }
  378|     74|                        None => self.quads_for_predicate_object(predicate, object),
  379|       |                    },
  380|  8.25k|                    None => match graph_name {
  381|  8.02k|                        Some(graph_name) => self.quads_for_predicate_graph(predicate, graph_name),
  382|    229|                        None => self.quads_for_predicate(predicate),
  383|       |                    },
  384|       |                },
  385|  16.7k|                None => match object {
  386|  1.04k|                    Some(object) => match graph_name {
  387|    850|                        Some(graph_name) => self.quads_for_object_graph(object, graph_name),
  388|    194|                        None => self.quads_for_object(object),
  389|       |                    },
  390|  15.7k|                    None => match graph_name {
  391|  11.2k|                        Some(graph_name) => self.quads_for_graph(graph_name),
  392|  4.53k|                        None => self.quads(),
  393|       |                    },
  394|       |                },
  395|       |            },
  396|       |        }
  397|  29.4k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader24quads_for_subject_object:
  437|     75|    fn quads_for_subject_object(
  438|     75|        &self,
  439|     75|        subject: &EncodedTerm,
  440|     75|        object: &EncodedTerm,
  441|     75|    ) -> ChainedDecodingQuadIterator {
  442|     75|        ChainedDecodingQuadIterator::pair(
  443|     75|            self.dosp_quads(&encode_term_pair(object, subject)),
  444|     75|            self.ospg_quads(&encode_term_pair(object, subject)),
  445|     75|        )
  446|     75|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader33quads_for_subject_predicate_graph:
  493|  1.10k|    fn quads_for_subject_predicate_graph(
  494|  1.10k|        &self,
  495|  1.10k|        subject: &EncodedTerm,
  496|  1.10k|        predicate: &EncodedTerm,
  497|  1.10k|        graph_name: &EncodedTerm,
  498|  1.10k|    ) -> ChainedDecodingQuadIterator {
  499|  1.10k|        ChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  500|    141|            self.dspo_quads(&encode_term_pair(subject, predicate))
  501|       |        } else {
  502|    960|            self.gspo_quads(&encode_term_triple(graph_name, subject, predicate))
  503|       |        })
  504|  1.10k|    }
_RNvXs6_NtCsd92XLxb96zi_8oxigraph7storageNtB5_7StorageNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   56|  20.2k|#[derive(Clone)]
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter26remove_encoded_named_graph:
 1138|  1.43k|    fn remove_encoded_named_graph(
 1139|  1.43k|        &mut self,
 1140|  1.43k|        graph_name: &EncodedTerm,
 1141|  1.43k|    ) -> Result<bool, StorageError> {
 1142|  1.43k|        self.buffer.clear();
 1143|  1.43k|        write_term(&mut self.buffer, graph_name);
 1144|  1.43k|        let result = if self
 1145|  1.43k|            .transaction
 1146|  1.43k|            .contains_key_for_update(&self.storage.graphs_cf, &self.buffer)?
 1147|       |        {
 1148|       |            // The condition is done ASAP to lock the graph itself
 1149|  1.35k|            for quad in self.reader().quads_for_graph(graph_name) {
 1150|  1.35k|                self.remove_encoded(&quad?)?;
 1151|       |            }
 1152|    934|            self.buffer.clear();
 1153|    934|            write_term(&mut self.buffer, graph_name);
 1154|    934|            self.transaction
 1155|    934|                .remove(&self.storage.graphs_cf, &self.buffer)?;
 1156|    934|            true
 1157|       |        } else {
 1158|    496|            false
 1159|       |        };
 1160|  1.43k|        Ok(result)
 1161|  1.43k|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter23remove_all_named_graphs:
 1163|     14|    pub fn remove_all_named_graphs(&mut self) -> Result<(), StorageError> {
 1164|     14|        for graph_name in self.reader().named_graphs() {
 1165|      6|            self.remove_encoded_named_graph(&graph_name?)?;
 1166|       |        }
 1167|     14|        Ok(())
 1168|     14|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader40quads_for_subject_predicate_object_graph:
  506|    546|    fn quads_for_subject_predicate_object_graph(
  507|    546|        &self,
  508|    546|        subject: &EncodedTerm,
  509|    546|        predicate: &EncodedTerm,
  510|    546|        object: &EncodedTerm,
  511|    546|        graph_name: &EncodedTerm,
  512|    546|    ) -> ChainedDecodingQuadIterator {
  513|    546|        ChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  514|    148|            self.dspo_quads(&encode_term_triple(subject, predicate, object))
  515|       |        } else {
  516|    398|            self.gspo_quads(&encode_term_quad(graph_name, subject, predicate, object))
  517|       |        })
  518|    546|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader20contains_named_graph:
  576|  1.27k|    pub fn contains_named_graph(&self, graph_name: &EncodedTerm) -> Result<bool, StorageError> {
  577|  1.27k|        self.reader
  578|  1.27k|            .contains_key(&self.storage.graphs_cf, &encode_term(graph_name))
  579|  1.27k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader10gosp_quads:
  601|    762|    fn gosp_quads(&self, prefix: &[u8]) -> DecodingQuadIterator {
  602|    762|        self.inner_quads(&self.storage.gosp_cf, prefix, QuadEncoding::Gosp)
  603|    762|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader12contains_str:
  658|  50.6k|    pub fn contains_str(&self, key: &StrHash) -> Result<bool, StorageError> {
  659|  50.6k|        self.reader
  660|  50.6k|            .contains_key(&self.storage.id2str_cf, &key.to_be_bytes())
  661|  50.6k|    }
_RNvMs0_NtCsd92XLxb96zi_8oxigraph7storageNtB5_27ChainedDecodingQuadIterator3new:
  789|  25.5k|    fn new(first: DecodingQuadIterator) -> Self {
  790|  25.5k|        Self {
  791|  25.5k|            first,
  792|  25.5k|            second: None,
  793|  25.5k|        }
  794|  25.5k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader34quads_for_subject_predicate_object:
  425|    131|    fn quads_for_subject_predicate_object(
  426|    131|        &self,
  427|    131|        subject: &EncodedTerm,
  428|    131|        predicate: &EncodedTerm,
  429|    131|        object: &EncodedTerm,
  430|    131|    ) -> ChainedDecodingQuadIterator {
  431|    131|        ChainedDecodingQuadIterator::pair(
  432|    131|            self.dspo_quads(&encode_term_triple(subject, predicate, object)),
  433|    131|            self.spog_quads(&encode_term_triple(subject, predicate, object)),
  434|    131|        )
  435|    131|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader23quads_for_subject_graph:
  481|    434|    fn quads_for_subject_graph(
  482|    434|        &self,
  483|    434|        subject: &EncodedTerm,
  484|    434|        graph_name: &EncodedTerm,
  485|    434|    ) -> ChainedDecodingQuadIterator {
  486|    434|        ChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  487|     84|            self.dspo_quads(&encode_term(subject))
  488|       |        } else {
  489|    350|            self.gspo_quads(&encode_term_pair(graph_name, subject))
  490|       |        })
  491|    434|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter22clear_all_named_graphs:
 1117|     54|    pub fn clear_all_named_graphs(&mut self) -> Result<(), StorageError> {
 1118|     54|        for quad in self.reader().quads_in_named_graph() {
 1119|     10|            self.remove_encoded(&quad?)?;
 1120|       |        }
 1121|     54|        Ok(())
 1122|     54|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter11insert_term:
  980|  5.93k|    fn insert_term(
  981|  5.93k|        &mut self,
  982|  5.93k|        term: TermRef<'_>,
  983|  5.93k|        encoded: &EncodedTerm,
  984|  5.93k|    ) -> Result<(), StorageError> {
  985|  5.93k|        insert_term(term, encoded, &mut |key, value| self.insert_str(key, value))
  986|  5.93k|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter11clear_graph:
 1096|    588|    pub fn clear_graph(&mut self, graph_name: GraphNameRef<'_>) -> Result<(), StorageError> {
 1097|    588|        if graph_name.is_default_graph() {
 1098|    538|            for quad in self.reader().quads_for_graph(&EncodedTerm::DefaultGraph) {
 1099|     10|                self.remove_encoded(&quad?)?;
 1100|       |            }
 1101|       |        } else {
 1102|     50|            self.buffer.clear();
 1103|     50|            write_term(&mut self.buffer, &graph_name.into());
 1104|     50|            if self
 1105|     50|                .transaction
 1106|     50|                .contains_key_for_update(&self.storage.graphs_cf, &self.buffer)?
 1107|       |            {
 1108|       |                // The condition is useful to lock the graph itself and ensure no quad is inserted at the same time
 1109|     50|                for quad in self.reader().quads_for_graph(&graph_name.into()) {
 1110|     24|                    self.remove_encoded(&quad?)?;
 1111|       |                }
 1112|      0|            }
 1113|       |        }
 1114|    588|        Ok(())
 1115|    588|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader12named_graphs:
  570|  4.38k|    pub fn named_graphs(&self) -> DecodingGraphIterator {
  571|  4.38k|        DecodingGraphIterator {
  572|  4.38k|            iter: self.reader.iter(&self.storage.graphs_cf).unwrap(), // TODO: propagate error?
  573|  4.38k|        }
  574|  4.38k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader10gpos_quads:
  597|  8.78k|    fn gpos_quads(&self, prefix: &[u8]) -> DecodingQuadIterator {
  598|  8.78k|        self.inner_quads(&self.storage.gpos_cf, prefix, QuadEncoding::Gpos)
  599|  8.78k|    }
_RNvMNtCsd92XLxb96zi_8oxigraph7storageNtB2_7Storage8snapshot:
  264|  4.25k|    pub fn snapshot(&self) -> StorageReader {
  265|  4.25k|        StorageReader {
  266|  4.25k|            reader: self.db.snapshot(),
  267|  4.25k|            storage: self.clone(),
  268|  4.25k|        }
  269|  4.25k|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader7get_str:
  641|  5.31k|    pub fn get_str(&self, key: &StrHash) -> Result<Option<String>, StorageError> {
  642|  5.31k|        Ok(self
  643|  5.31k|            .reader
  644|  5.31k|            .get(&self.storage.id2str_cf, &key.to_be_bytes())?
  645|  5.31k|            .map(String::from_utf8)
  646|  5.31k|            .transpose()
  647|  5.31k|            .map_err(CorruptionError::new)?)
  648|  5.31k|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter5clear:
 1170|  4.37k|    pub fn clear(&mut self) -> Result<(), StorageError> {
 1171|  4.37k|        for graph_name in self.reader().named_graphs() {
 1172|    920|            self.remove_encoded_named_graph(&graph_name?)?;
 1173|       |        }
 1174|  4.37k|        for quad in self.reader().quads() {
 1175|    250|            self.remove_encoded(&quad?)?;
 1176|       |        }
 1177|  4.37k|        Ok(())
 1178|  4.37k|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter10insert_str:
 1017|  4.85k|    fn insert_str(&mut self, key: &StrHash, value: &str) -> Result<(), StorageError> {
 1018|  4.85k|        self.transaction.insert(
 1019|  4.85k|            &self.storage.id2str_cf,
 1020|  4.85k|            &key.to_be_bytes(),
 1021|  4.85k|            value.as_bytes(),
 1022|  4.85k|        )
 1023|  4.85k|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter18remove_named_graph:
 1131|    504|    pub fn remove_named_graph(
 1132|    504|        &mut self,
 1133|    504|        graph_name: NamedOrBlankNodeRef<'_>,
 1134|    504|    ) -> Result<bool, StorageError> {
 1135|    504|        self.remove_encoded_named_graph(&graph_name.into())
 1136|    504|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader22quads_for_object_graph:
  558|    850|    fn quads_for_object_graph(
  559|    850|        &self,
  560|    850|        object: &EncodedTerm,
  561|    850|        graph_name: &EncodedTerm,
  562|    850|    ) -> ChainedDecodingQuadIterator {
  563|    850|        ChainedDecodingQuadIterator::new(if graph_name.is_default_graph() {
  564|    171|            self.dosp_quads(&encode_term(object))
  565|       |        } else {
  566|    679|            self.gosp_quads(&encode_term_pair(graph_name, object))
  567|       |        })
  568|    850|    }
_RNvMs_NtCsd92XLxb96zi_8oxigraph7storageNtB4_13StorageReader10gspo_quads:
  593|  22.0k|    fn gspo_quads(&self, prefix: &[u8]) -> DecodingQuadIterator {
  594|  22.0k|        self.inner_quads(&self.storage.gspo_cf, prefix, QuadEncoding::Gspo)
  595|  22.0k|    }
_RNvMNtCsd92XLxb96zi_8oxigraph7storageNtB2_7Storage5setup:
  181|      1|    fn setup(db: Db) -> Result<Self, StorageError> {
  182|      1|        let this = Self {
  183|       |            #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  184|       |            default_cf: db.column_family(DEFAULT_CF)?,
  185|      1|            id2str_cf: db.column_family(ID2STR_CF)?,
  186|      1|            spog_cf: db.column_family(SPOG_CF)?,
  187|      1|            posg_cf: db.column_family(POSG_CF)?,
  188|      1|            ospg_cf: db.column_family(OSPG_CF)?,
  189|      1|            gspo_cf: db.column_family(GSPO_CF)?,
  190|      1|            gpos_cf: db.column_family(GPOS_CF)?,
  191|      1|            gosp_cf: db.column_family(GOSP_CF)?,
  192|      1|            dspo_cf: db.column_family(DSPO_CF)?,
  193|      1|            dpos_cf: db.column_family(DPOS_CF)?,
  194|      1|            dosp_cf: db.column_family(DOSP_CF)?,
  195|      1|            graphs_cf: db.column_family(GRAPHS_CF)?,
  196|      1|            db,
  197|      1|        };
  198|      1|        #[cfg(all(not(target_family = "wasm"), feature = "rocksdb"))]
  199|      1|        this.migrate()?;
  200|      1|        Ok(this)
  201|      1|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter18insert_named_graph:
  958|    380|    pub fn insert_named_graph(
  959|    380|        &mut self,
  960|    380|        graph_name: NamedOrBlankNodeRef<'_>,
  961|    380|    ) -> Result<bool, StorageError> {
  962|    380|        let encoded_graph_name = graph_name.into();
  963|    380|
  964|    380|        self.buffer.clear();
  965|    380|        write_term(&mut self.buffer, &encoded_graph_name);
  966|    380|        let result = if self
  967|    380|            .transaction
  968|    380|            .contains_key_for_update(&self.storage.graphs_cf, &self.buffer)?
  969|       |        {
  970|    200|            false
  971|       |        } else {
  972|    180|            self.transaction
  973|    180|                .insert_empty(&self.storage.graphs_cf, &self.buffer)?;
  974|    180|            self.insert_term(graph_name.into(), &encoded_graph_name)?;
  975|    180|            true
  976|       |        };
  977|    380|        Ok(result)
  978|    380|    }
_RNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB5_13StorageWriter14remove_encoded:
 1029|  4.15k|    fn remove_encoded(&mut self, quad: &EncodedQuad) -> Result<bool, StorageError> {
 1030|  4.15k|        self.buffer.clear();
 1031|  4.15k|        let result = if quad.graph_name.is_default_graph() {
 1032|    374|            write_spo_quad(&mut self.buffer, quad);
 1033|    374|
 1034|    374|            if self
 1035|    374|                .transaction
 1036|    374|                .contains_key_for_update(&self.storage.dspo_cf, &self.buffer)?
 1037|       |            {
 1038|    260|                self.transaction
 1039|    260|                    .remove(&self.storage.dspo_cf, &self.buffer)?;
 1040|       |
 1041|    260|                self.buffer.clear();
 1042|    260|                write_pos_quad(&mut self.buffer, quad);
 1043|    260|                self.transaction
 1044|    260|                    .remove(&self.storage.dpos_cf, &self.buffer)?;
 1045|       |
 1046|    260|                self.buffer.clear();
 1047|    260|                write_osp_quad(&mut self.buffer, quad);
 1048|    260|                self.transaction
 1049|    260|                    .remove(&self.storage.dosp_cf, &self.buffer)?;
 1050|    260|                true
 1051|       |            } else {
 1052|    114|                false
 1053|       |            }
 1054|       |        } else {
 1055|  3.78k|            write_spog_quad(&mut self.buffer, quad);
 1056|  3.78k|
 1057|  3.78k|            if self
 1058|  3.78k|                .transaction
 1059|  3.78k|                .contains_key_for_update(&self.storage.spog_cf, &self.buffer)?
 1060|       |            {
 1061|  1.40k|                self.transaction
 1062|  1.40k|                    .remove(&self.storage.spog_cf, &self.buffer)?;
 1063|       |
 1064|  1.40k|                self.buffer.clear();
 1065|  1.40k|                write_posg_quad(&mut self.buffer, quad);
 1066|  1.40k|                self.transaction
 1067|  1.40k|                    .remove(&self.storage.posg_cf, &self.buffer)?;
 1068|       |
 1069|  1.40k|                self.buffer.clear();
 1070|  1.40k|                write_ospg_quad(&mut self.buffer, quad);
 1071|  1.40k|                self.transaction
 1072|  1.40k|                    .remove(&self.storage.ospg_cf, &self.buffer)?;
 1073|       |
 1074|  1.40k|                self.buffer.clear();
 1075|  1.40k|                write_gspo_quad(&mut self.buffer, quad);
 1076|  1.40k|                self.transaction
 1077|  1.40k|                    .remove(&self.storage.gspo_cf, &self.buffer)?;
 1078|       |
 1079|  1.40k|                self.buffer.clear();
 1080|  1.40k|                write_gpos_quad(&mut self.buffer, quad);
 1081|  1.40k|                self.transaction
 1082|  1.40k|                    .remove(&self.storage.gpos_cf, &self.buffer)?;
 1083|       |
 1084|  1.40k|                self.buffer.clear();
 1085|  1.40k|                write_gosp_quad(&mut self.buffer, quad);
 1086|  1.40k|                self.transaction
 1087|  1.40k|                    .remove(&self.storage.gosp_cf, &self.buffer)?;
 1088|  1.40k|                true
 1089|       |            } else {
 1090|  2.37k|                false
 1091|       |            }
 1092|       |        };
 1093|  4.15k|        Ok(result)
 1094|  4.15k|    }
_RINvMNtCsd92XLxb96zi_8oxigraph7storageNtB3_7Storage11transactionuNtNtB3_5error12StorageErrorNCINvMNtB5_5storeNtB1y_5Store11transactionuB11_NCNvB1x_5clear0E0EB5_:
  271|  4.25k|    pub fn transaction<'a, 'b: 'a, T, E: Error + 'static + From<StorageError>>(
  272|  4.25k|        &'b self,
  273|  4.25k|        f: impl Fn(StorageWriter<'a>) -> Result<T, E>,
  274|  4.25k|    ) -> Result<T, E> {
  275|  4.25k|        self.db.transaction(|transaction| {
  276|       |            f(StorageWriter {
  277|       |                buffer: Vec::new(),
  278|       |                transaction,
  279|       |                storage: self,
  280|       |            })
  281|  4.25k|        })
  282|  4.25k|    }
_RNCNvMs5_NtCsd92XLxb96zi_8oxigraph7storageNtB7_13StorageWriter11insert_term0B9_:
  985|  4.85k|        insert_term(term, encoded, &mut |key, value| self.insert_str(key, value))
_RNCINvMNtCsd92XLxb96zi_8oxigraph7storageNtB5_7Storage11transactionuNtNtB5_5error12StorageErrorNCINvMNtB7_5storeNtB1A_5Store11transactionuB13_NCNvB1z_5clear0E0E0B7_:
  275|  4.25k|        self.db.transaction(|transaction| {
  276|  4.25k|            f(StorageWriter {
  277|  4.25k|                buffer: Vec::new(),
  278|  4.25k|                transaction,
  279|  4.25k|                storage: self,
  280|  4.25k|            })
  281|  4.25k|        })

_RNvYNtNtNtCsd92XLxb96zi_8oxigraph6sparql7dataset11DatasetViewNtNtNtB8_7storage15numeric_encoder7Decoder17decode_named_nodeB8_:
  893|     23|    fn decode_named_node(&self, encoded: &EncodedTerm) -> Result<NamedNode, StorageError> {
  894|     23|        match self.decode_term(encoded)? {
  895|     21|            Term::NamedNode(named_node) => Ok(named_node),
  896|      0|            Term::BlankNode(_) => Err(CorruptionError::msg(
  897|      0|                "A blank node has been found instead of a named node",
  898|      0|            )
  899|      0|            .into()),
  900|       |            Term::Literal(_) => {
  901|      2|                Err(CorruptionError::msg("A literal has been found instead of a named node").into())
  902|       |            }
  903|       |            Term::Triple(_) => {
  904|      0|                Err(CorruptionError::msg("A triple has been found instead of a named node").into())
  905|       |            }
  906|       |        }
  907|     23|    }
_RNvXsD_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtNtNtB9_6sparql7dataset11DatasetViewNtB5_7Decoder11decode_termB9_:
  945|    262|    fn decode_term(&self, encoded: &EncodedTerm) -> Result<Term, StorageError> {
  946|    262|        match encoded {
  947|       |            EncodedTerm::DefaultGraph => {
  948|      0|                Err(CorruptionError::msg("The default graph tag is not a valid term").into())
  949|       |            }
  950|    230|            EncodedTerm::NamedNode { iri_id } => {
  951|    230|                Ok(NamedNode::new_unchecked(get_required_str(self, iri_id)?).into())
  952|       |            }
  953|      0|            EncodedTerm::NumericalBlankNode { id } => Ok(BlankNode::new_from_unique_id(*id).into()),
  954|      0|            EncodedTerm::SmallBlankNode(id) => Ok(BlankNode::new_unchecked(id.as_str()).into()),
  955|      0|            EncodedTerm::BigBlankNode { id_id } => {
  956|      0|                Ok(BlankNode::new_unchecked(get_required_str(self, id_id)?).into())
  957|       |            }
  958|      0|            EncodedTerm::SmallStringLiteral(value) => {
  959|      0|                Ok(Literal::new_simple_literal(*value).into())
  960|       |            }
  961|      0|            EncodedTerm::BigStringLiteral { value_id } => {
  962|      0|                Ok(Literal::new_simple_literal(get_required_str(self, value_id)?).into())
  963|       |            }
  964|      6|            EncodedTerm::SmallSmallLangStringLiteral { value, language } => {
  965|      6|                Ok(Literal::new_language_tagged_literal_unchecked(*value, *language).into())
  966|       |            }
  967|      0|            EncodedTerm::SmallBigLangStringLiteral { value, language_id } => {
  968|      0|                Ok(Literal::new_language_tagged_literal_unchecked(
  969|      0|                    *value,
  970|      0|                    get_required_str(self, language_id)?,
  971|       |                )
  972|      0|                .into())
  973|       |            }
  974|      0|            EncodedTerm::BigSmallLangStringLiteral { value_id, language } => {
  975|      0|                Ok(Literal::new_language_tagged_literal_unchecked(
  976|      0|                    get_required_str(self, value_id)?,
  977|      0|                    *language,
  978|      0|                )
  979|      0|                .into())
  980|       |            }
  981|       |            EncodedTerm::BigBigLangStringLiteral {
  982|      0|                value_id,
  983|      0|                language_id,
  984|      0|            } => Ok(Literal::new_language_tagged_literal_unchecked(
  985|      0|                get_required_str(self, value_id)?,
  986|      0|                get_required_str(self, language_id)?,
  987|       |            )
  988|      0|            .into()),
  989|      0|            EncodedTerm::SmallTypedLiteral { value, datatype_id } => {
  990|      0|                Ok(Literal::new_typed_literal(
  991|      0|                    *value,
  992|      0|                    NamedNode::new_unchecked(get_required_str(self, datatype_id)?),
  993|       |                )
  994|      0|                .into())
  995|       |            }
  996|       |            EncodedTerm::BigTypedLiteral {
  997|      0|                value_id,
  998|      0|                datatype_id,
  999|      0|            } => Ok(Literal::new_typed_literal(
 1000|      0|                get_required_str(self, value_id)?,
 1001|      0|                NamedNode::new_unchecked(get_required_str(self, datatype_id)?),
 1002|       |            )
 1003|      0|            .into()),
 1004|     16|            EncodedTerm::BooleanLiteral(value) => Ok(Literal::from(*value).into()),
 1005|      0|            EncodedTerm::FloatLiteral(value) => Ok(Literal::from(*value).into()),
 1006|      0|            EncodedTerm::DoubleLiteral(value) => Ok(Literal::from(*value).into()),
 1007|      4|            EncodedTerm::IntegerLiteral(value) => Ok(Literal::from(*value).into()),
 1008|      6|            EncodedTerm::DecimalLiteral(value) => Ok(Literal::from(*value).into()),
 1009|      0|            EncodedTerm::DateTimeLiteral(value) => Ok(Literal::from(*value).into()),
 1010|      0|            EncodedTerm::DateLiteral(value) => Ok(Literal::from(*value).into()),
 1011|      0|            EncodedTerm::TimeLiteral(value) => Ok(Literal::from(*value).into()),
 1012|      0|            EncodedTerm::GYearMonthLiteral(value) => Ok(Literal::from(*value).into()),
 1013|      0|            EncodedTerm::GYearLiteral(value) => Ok(Literal::from(*value).into()),
 1014|      0|            EncodedTerm::GMonthDayLiteral(value) => Ok(Literal::from(*value).into()),
 1015|      0|            EncodedTerm::GDayLiteral(value) => Ok(Literal::from(*value).into()),
 1016|      0|            EncodedTerm::GMonthLiteral(value) => Ok(Literal::from(*value).into()),
 1017|      0|            EncodedTerm::DurationLiteral(value) => Ok(Literal::from(*value).into()),
 1018|      0|            EncodedTerm::YearMonthDurationLiteral(value) => Ok(Literal::from(*value).into()),
 1019|      0|            EncodedTerm::DayTimeDurationLiteral(value) => Ok(Literal::from(*value).into()),
 1020|      0|            EncodedTerm::Triple(triple) => Ok(self.decode_triple(triple)?.into()),
 1021|       |        }
 1022|    262|    }
_RINvXsL_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB6_7StrHashNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEBa_:
   13|  61.7k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RINvNtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoder11insert_termNCNvMs5_B4_NtB4_13StorageWriter11insert_term0EB6_:
  706|  5.93k|pub fn insert_term<F: FnMut(&StrHash, &str) -> Result<(), StorageError>>(
  707|  5.93k|    term: TermRef<'_>,
  708|  5.93k|    encoded: &EncodedTerm,
  709|  5.93k|    insert_str: &mut F,
  710|  5.93k|) -> Result<(), StorageError> {
  711|  5.93k|    match term {
  712|  4.85k|        TermRef::NamedNode(node) => {
  713|  4.85k|            if let EncodedTerm::NamedNode { iri_id } = encoded {
  714|  4.85k|                insert_str(iri_id, node.as_str())
  715|       |            } else {
  716|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  717|       |            }
  718|       |        }
  719|      0|        TermRef::BlankNode(node) => match encoded {
  720|      0|            EncodedTerm::BigBlankNode { id_id } => insert_str(id_id, node.as_str()),
  721|      0|            EncodedTerm::SmallBlankNode(..) | EncodedTerm::NumericalBlankNode { .. } => Ok(()),
  722|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  723|       |        },
  724|  1.08k|        TermRef::Literal(literal) => match encoded {
  725|      0|            EncodedTerm::BigStringLiteral { value_id }
  726|      0|            | EncodedTerm::BigSmallLangStringLiteral { value_id, .. } => {
  727|      0|                insert_str(value_id, literal.value())
  728|       |            }
  729|      0|            EncodedTerm::SmallBigLangStringLiteral { language_id, .. } => {
  730|      0|                if let Some(language) = literal.language() {
  731|      0|                    insert_str(language_id, language)
  732|       |                } else {
  733|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  734|       |                }
  735|       |            }
  736|       |            EncodedTerm::BigBigLangStringLiteral {
  737|      0|                value_id,
  738|      0|                language_id,
  739|      0|            } => {
  740|      0|                insert_str(value_id, literal.value())?;
  741|      0|                if let Some(language) = literal.language() {
  742|      0|                    insert_str(language_id, language)
  743|       |                } else {
  744|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  745|       |                }
  746|       |            }
  747|      0|            EncodedTerm::SmallTypedLiteral { datatype_id, .. } => {
  748|      0|                insert_str(datatype_id, literal.datatype().as_str())
  749|       |            }
  750|       |            EncodedTerm::BigTypedLiteral {
  751|      0|                value_id,
  752|      0|                datatype_id,
  753|      0|            } => {
  754|      0|                insert_str(value_id, literal.value())?;
  755|      0|                insert_str(datatype_id, literal.datatype().as_str())
  756|       |            }
  757|       |            EncodedTerm::SmallStringLiteral(..)
  758|       |            | EncodedTerm::SmallSmallLangStringLiteral { .. }
  759|       |            | EncodedTerm::BooleanLiteral(..)
  760|       |            | EncodedTerm::FloatLiteral(..)
  761|       |            | EncodedTerm::DoubleLiteral(..)
  762|       |            | EncodedTerm::IntegerLiteral(..)
  763|       |            | EncodedTerm::DecimalLiteral(..)
  764|       |            | EncodedTerm::DateTimeLiteral(..)
  765|       |            | EncodedTerm::TimeLiteral(..)
  766|       |            | EncodedTerm::DateLiteral(..)
  767|       |            | EncodedTerm::GYearMonthLiteral(..)
  768|       |            | EncodedTerm::GYearLiteral(..)
  769|       |            | EncodedTerm::GMonthDayLiteral(..)
  770|       |            | EncodedTerm::GDayLiteral(..)
  771|       |            | EncodedTerm::GMonthLiteral(..)
  772|       |            | EncodedTerm::DurationLiteral(..)
  773|       |            | EncodedTerm::YearMonthDurationLiteral(..)
  774|  1.08k|            | EncodedTerm::DayTimeDurationLiteral(..) => Ok(()),
  775|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  776|       |        },
  777|      0|        TermRef::Triple(triple) => {
  778|      0|            if let EncodedTerm::Triple(encoded) = encoded {
  779|      0|                insert_term(triple.subject.as_ref().into(), &encoded.subject, insert_str)?;
  780|      0|                insert_term(
  781|      0|                    triple.predicate.as_ref().into(),
  782|      0|                    &encoded.predicate,
  783|      0|                    insert_str,
  784|      0|                )?;
  785|      0|                insert_term(triple.object.as_ref(), &encoded.object, insert_str)
  786|       |            } else {
  787|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  788|       |            }
  789|       |        }
  790|       |    }
  791|  5.93k|}
_RINvNtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoder16get_required_strNtB4_13StorageReaderEB6_:
 1025|  5.08k|fn get_required_str<L: StrLookup>(lookup: &L, id: &StrHash) -> Result<String, StorageError> {
 1026|  5.08k|    Ok(lookup.get_str(id)?.ok_or_else(|| {
 1027|       |        CorruptionError::new(format!(
 1028|       |            "Not able to find the string with id {id:?} in the string store"
 1029|       |        ))
 1030|  5.08k|    })?)
 1031|  5.08k|}
_RINvXs1_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB6_11EncodedTermNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEBa_:
  213|    575|    fn hash<H: Hasher>(&self, state: &mut H) {
  214|    575|        match self {
  215|    535|            Self::NamedNode { iri_id } => iri_id.hash(state),
  216|      0|            Self::NumericalBlankNode { id } => id.hash(state),
  217|      0|            Self::SmallBlankNode(id) => id.hash(state),
  218|      0|            Self::BigBlankNode { id_id } => id_id.hash(state),
  219|      0|            Self::DefaultGraph => (),
  220|      0|            Self::SmallStringLiteral(value) => value.hash(state),
  221|      0|            Self::BigStringLiteral { value_id } => value_id.hash(state),
  222|     12|            Self::SmallSmallLangStringLiteral { value, language } => {
  223|     12|                value.hash(state);
  224|     12|                language.hash(state);
  225|     12|            }
  226|      0|            Self::SmallBigLangStringLiteral { value, language_id } => {
  227|      0|                value.hash(state);
  228|      0|                language_id.hash(state);
  229|      0|            }
  230|      0|            Self::BigSmallLangStringLiteral { value_id, language } => {
  231|      0|                value_id.hash(state);
  232|      0|                language.hash(state);
  233|      0|            }
  234|       |            Self::BigBigLangStringLiteral {
  235|      0|                value_id,
  236|      0|                language_id,
  237|      0|            } => {
  238|      0|                value_id.hash(state);
  239|      0|                language_id.hash(state);
  240|      0|            }
  241|      0|            Self::SmallTypedLiteral { value, datatype_id } => {
  242|      0|                value.hash(state);
  243|      0|                datatype_id.hash(state);
  244|      0|            }
  245|       |            Self::BigTypedLiteral {
  246|      0|                value_id,
  247|      0|                datatype_id,
  248|      0|            } => {
  249|      0|                value_id.hash(state);
  250|      0|                datatype_id.hash(state);
  251|      0|            }
  252|     12|            Self::BooleanLiteral(value) => value.hash(state),
  253|      0|            Self::FloatLiteral(value) => value.to_be_bytes().hash(state),
  254|      0|            Self::DoubleLiteral(value) => value.to_be_bytes().hash(state),
  255|     12|            Self::IntegerLiteral(value) => value.hash(state),
  256|      4|            Self::DecimalLiteral(value) => value.hash(state),
  257|      0|            Self::DateTimeLiteral(value) => value.hash(state),
  258|      0|            Self::TimeLiteral(value) => value.hash(state),
  259|      0|            Self::DateLiteral(value) => value.hash(state),
  260|      0|            Self::GYearMonthLiteral(value) => value.hash(state),
  261|      0|            Self::GYearLiteral(value) => value.hash(state),
  262|      0|            Self::GMonthDayLiteral(value) => value.hash(state),
  263|      0|            Self::GDayLiteral(value) => value.hash(state),
  264|      0|            Self::GMonthLiteral(value) => value.hash(state),
  265|      0|            Self::DurationLiteral(value) => value.hash(state),
  266|      0|            Self::YearMonthDurationLiteral(value) => value.hash(state),
  267|      0|            Self::DayTimeDurationLiteral(value) => value.hash(state),
  268|      0|            Self::Triple(value) => value.hash(state),
  269|       |        }
  270|    575|    }
_RINvNtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoder11insert_termNCINvMNtNtB6_6sparql7datasetNtB1b_11DatasetView11encode_termRNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeE0EB6_:
  706|  59.0k|pub fn insert_term<F: FnMut(&StrHash, &str) -> Result<(), StorageError>>(
  707|  59.0k|    term: TermRef<'_>,
  708|  59.0k|    encoded: &EncodedTerm,
  709|  59.0k|    insert_str: &mut F,
  710|  59.0k|) -> Result<(), StorageError> {
  711|  59.0k|    match term {
  712|  59.0k|        TermRef::NamedNode(node) => {
  713|  59.0k|            if let EncodedTerm::NamedNode { iri_id } = encoded {
  714|  59.0k|                insert_str(iri_id, node.as_str())
  715|       |            } else {
  716|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  717|       |            }
  718|       |        }
  719|      0|        TermRef::BlankNode(node) => match encoded {
  720|      0|            EncodedTerm::BigBlankNode { id_id } => insert_str(id_id, node.as_str()),
  721|      0|            EncodedTerm::SmallBlankNode(..) | EncodedTerm::NumericalBlankNode { .. } => Ok(()),
  722|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  723|       |        },
  724|      0|        TermRef::Literal(literal) => match encoded {
  725|      0|            EncodedTerm::BigStringLiteral { value_id }
  726|      0|            | EncodedTerm::BigSmallLangStringLiteral { value_id, .. } => {
  727|      0|                insert_str(value_id, literal.value())
  728|       |            }
  729|      0|            EncodedTerm::SmallBigLangStringLiteral { language_id, .. } => {
  730|      0|                if let Some(language) = literal.language() {
  731|      0|                    insert_str(language_id, language)
  732|       |                } else {
  733|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  734|       |                }
  735|       |            }
  736|       |            EncodedTerm::BigBigLangStringLiteral {
  737|      0|                value_id,
  738|      0|                language_id,
  739|      0|            } => {
  740|      0|                insert_str(value_id, literal.value())?;
  741|      0|                if let Some(language) = literal.language() {
  742|      0|                    insert_str(language_id, language)
  743|       |                } else {
  744|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  745|       |                }
  746|       |            }
  747|      0|            EncodedTerm::SmallTypedLiteral { datatype_id, .. } => {
  748|      0|                insert_str(datatype_id, literal.datatype().as_str())
  749|       |            }
  750|       |            EncodedTerm::BigTypedLiteral {
  751|      0|                value_id,
  752|      0|                datatype_id,
  753|      0|            } => {
  754|      0|                insert_str(value_id, literal.value())?;
  755|      0|                insert_str(datatype_id, literal.datatype().as_str())
  756|       |            }
  757|       |            EncodedTerm::SmallStringLiteral(..)
  758|       |            | EncodedTerm::SmallSmallLangStringLiteral { .. }
  759|       |            | EncodedTerm::BooleanLiteral(..)
  760|       |            | EncodedTerm::FloatLiteral(..)
  761|       |            | EncodedTerm::DoubleLiteral(..)
  762|       |            | EncodedTerm::IntegerLiteral(..)
  763|       |            | EncodedTerm::DecimalLiteral(..)
  764|       |            | EncodedTerm::DateTimeLiteral(..)
  765|       |            | EncodedTerm::TimeLiteral(..)
  766|       |            | EncodedTerm::DateLiteral(..)
  767|       |            | EncodedTerm::GYearMonthLiteral(..)
  768|       |            | EncodedTerm::GYearLiteral(..)
  769|       |            | EncodedTerm::GMonthDayLiteral(..)
  770|       |            | EncodedTerm::GDayLiteral(..)
  771|       |            | EncodedTerm::GMonthLiteral(..)
  772|       |            | EncodedTerm::DurationLiteral(..)
  773|       |            | EncodedTerm::YearMonthDurationLiteral(..)
  774|      0|            | EncodedTerm::DayTimeDurationLiteral(..) => Ok(()),
  775|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  776|       |        },
  777|      0|        TermRef::Triple(triple) => {
  778|      0|            if let EncodedTerm::Triple(encoded) = encoded {
  779|      0|                insert_term(triple.subject.as_ref().into(), &encoded.subject, insert_str)?;
  780|      0|                insert_term(
  781|      0|                    triple.predicate.as_ref().into(),
  782|      0|                    &encoded.predicate,
  783|      0|                    insert_str,
  784|      0|                )?;
  785|      0|                insert_term(triple.object.as_ref(), &encoded.object, insert_str)
  786|       |            } else {
  787|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  788|       |            }
  789|       |        }
  790|       |    }
  791|  59.0k|}
_RNCNvXst_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB7_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf7literal10LiteralRefE4from0Bb_:
  508|  1.94k|                literal.language().map(|language| {
  509|  1.94k|                    if let Ok(value) = SmallString::try_from(value) {
  510|  1.94k|                        if let Ok(language) = SmallString::try_from(language) {
  511|  1.94k|                            Self::SmallSmallLangStringLiteral { value, language }
  512|       |                        } else {
  513|      0|                            Self::SmallBigLangStringLiteral {
  514|      0|                                value,
  515|      0|                                language_id: StrHash::new(language),
  516|      0|                            }
  517|       |                        }
  518|      0|                    } else if let Ok(language) = SmallString::try_from(language) {
  519|      0|                        Self::BigSmallLangStringLiteral {
  520|      0|                            value_id: StrHash::new(value),
  521|      0|                            language,
  522|      0|                        }
  523|       |                    } else {
  524|      0|                        Self::BigBigLangStringLiteral {
  525|      0|                            value_id: StrHash::new(value),
  526|      0|                            language_id: StrHash::new(language),
  527|      0|                        }
  528|       |                    }
  529|  1.94k|                })
_RINvNtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoder11insert_termNCINvMNtNtB6_6sparql7datasetNtB1b_11DatasetView11encode_termRNtNtCshJ9d6mhVUZV_5oxrdf7literal7LiteralE0EB6_:
  706|  4.43k|pub fn insert_term<F: FnMut(&StrHash, &str) -> Result<(), StorageError>>(
  707|  4.43k|    term: TermRef<'_>,
  708|  4.43k|    encoded: &EncodedTerm,
  709|  4.43k|    insert_str: &mut F,
  710|  4.43k|) -> Result<(), StorageError> {
  711|  4.43k|    match term {
  712|      0|        TermRef::NamedNode(node) => {
  713|      0|            if let EncodedTerm::NamedNode { iri_id } = encoded {
  714|      0|                insert_str(iri_id, node.as_str())
  715|       |            } else {
  716|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  717|       |            }
  718|       |        }
  719|      0|        TermRef::BlankNode(node) => match encoded {
  720|      0|            EncodedTerm::BigBlankNode { id_id } => insert_str(id_id, node.as_str()),
  721|      0|            EncodedTerm::SmallBlankNode(..) | EncodedTerm::NumericalBlankNode { .. } => Ok(()),
  722|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  723|       |        },
  724|  4.43k|        TermRef::Literal(literal) => match encoded {
  725|      0|            EncodedTerm::BigStringLiteral { value_id }
  726|      0|            | EncodedTerm::BigSmallLangStringLiteral { value_id, .. } => {
  727|      0|                insert_str(value_id, literal.value())
  728|       |            }
  729|      0|            EncodedTerm::SmallBigLangStringLiteral { language_id, .. } => {
  730|      0|                if let Some(language) = literal.language() {
  731|      0|                    insert_str(language_id, language)
  732|       |                } else {
  733|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  734|       |                }
  735|       |            }
  736|       |            EncodedTerm::BigBigLangStringLiteral {
  737|      0|                value_id,
  738|      0|                language_id,
  739|      0|            } => {
  740|      0|                insert_str(value_id, literal.value())?;
  741|      0|                if let Some(language) = literal.language() {
  742|      0|                    insert_str(language_id, language)
  743|       |                } else {
  744|      0|                    Err(CorruptionError::from_encoded_term(encoded, &term).into())
  745|       |                }
  746|       |            }
  747|      0|            EncodedTerm::SmallTypedLiteral { datatype_id, .. } => {
  748|      0|                insert_str(datatype_id, literal.datatype().as_str())
  749|       |            }
  750|       |            EncodedTerm::BigTypedLiteral {
  751|      0|                value_id,
  752|      0|                datatype_id,
  753|      0|            } => {
  754|      0|                insert_str(value_id, literal.value())?;
  755|      0|                insert_str(datatype_id, literal.datatype().as_str())
  756|       |            }
  757|       |            EncodedTerm::SmallStringLiteral(..)
  758|       |            | EncodedTerm::SmallSmallLangStringLiteral { .. }
  759|       |            | EncodedTerm::BooleanLiteral(..)
  760|       |            | EncodedTerm::FloatLiteral(..)
  761|       |            | EncodedTerm::DoubleLiteral(..)
  762|       |            | EncodedTerm::IntegerLiteral(..)
  763|       |            | EncodedTerm::DecimalLiteral(..)
  764|       |            | EncodedTerm::DateTimeLiteral(..)
  765|       |            | EncodedTerm::TimeLiteral(..)
  766|       |            | EncodedTerm::DateLiteral(..)
  767|       |            | EncodedTerm::GYearMonthLiteral(..)
  768|       |            | EncodedTerm::GYearLiteral(..)
  769|       |            | EncodedTerm::GMonthDayLiteral(..)
  770|       |            | EncodedTerm::GDayLiteral(..)
  771|       |            | EncodedTerm::GMonthLiteral(..)
  772|       |            | EncodedTerm::DurationLiteral(..)
  773|       |            | EncodedTerm::YearMonthDurationLiteral(..)
  774|  4.43k|            | EncodedTerm::DayTimeDurationLiteral(..) => Ok(()),
  775|      0|            _ => Err(CorruptionError::from_encoded_term(encoded, &term).into()),
  776|       |        },
  777|      0|        TermRef::Triple(triple) => {
  778|      0|            if let EncodedTerm::Triple(encoded) = encoded {
  779|      0|                insert_term(triple.subject.as_ref().into(), &encoded.subject, insert_str)?;
  780|      0|                insert_term(
  781|      0|                    triple.predicate.as_ref().into(),
  782|      0|                    &encoded.predicate,
  783|      0|                    insert_str,
  784|      0|                )?;
  785|      0|                insert_term(triple.object.as_ref(), &encoded.object, insert_str)
  786|       |            } else {
  787|      0|                Err(CorruptionError::from_encoded_term(encoded, &term).into())
  788|       |            }
  789|       |        }
  790|       |    }
  791|  4.43k|}
_RINvNtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoder16get_required_strNtNtNtB6_6sparql7dataset11DatasetViewEB6_:
 1025|    230|fn get_required_str<L: StrLookup>(lookup: &L, id: &StrHash) -> Result<String, StorageError> {
 1026|    230|    Ok(lookup.get_str(id)?.ok_or_else(|| {
 1027|       |        CorruptionError::new(format!(
 1028|       |            "Not able to find the string with id {id:?} in the string store"
 1029|       |        ))
 1030|    230|    })?)
 1031|    230|}
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoder16parse_double_str:
  801|    700|pub fn parse_double_str(value: &str) -> Option<EncodedTerm> {
  802|    700|    value.parse().map(EncodedTerm::DoubleLiteral).ok()
  803|    700|}
_RNvXsd_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes7integer7IntegerE4from:
  394|    436|    fn from(value: Integer) -> Self {
  395|    436|        Self::IntegerLiteral(value)
  396|    436|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB2_7StrHash13from_be_bytesB6_:
   29|  11.3k|    pub fn from_be_bytes(bytes: [u8; 16]) -> Self {
   30|  11.3k|        Self {
   31|  11.3k|            hash: u128::from_be_bytes(bytes),
   32|  11.3k|        }
   33|  11.3k|    }
_RNvXsx_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf6triple12GraphNameRefE4from:
  625|  9.61k|    fn from(name: GraphNameRef<'_>) -> Self {
  626|  9.61k|        match name {
  627|  7.89k|            GraphNameRef::NamedNode(named_node) => named_node.into(),
  628|      0|            GraphNameRef::BlankNode(blank_node) => blank_node.into(),
  629|  1.72k|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  630|       |        }
  631|  9.61k|    }
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoder17parse_boolean_str:
  793|  2.19k|pub fn parse_boolean_str(value: &str) -> Option<EncodedTerm> {
  794|  2.19k|    value.parse().map(EncodedTerm::BooleanLiteral).ok()
  795|  2.19k|}
_RNvXsv_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf6triple10SubjectRefE4from:
  604|  5.33k|    fn from(term: SubjectRef<'_>) -> Self {
  605|  5.33k|        match term {
  606|  5.33k|            SubjectRef::NamedNode(named_node) => named_node.into(),
  607|      0|            SubjectRef::BlankNode(blank_node) => blank_node.into(),
  608|      0|            SubjectRef::Triple(triple) => triple.as_ref().into(),
  609|       |        }
  610|  5.33k|    }
_RNvXs3_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FrombE4from:
  334|    359|    fn from(value: bool) -> Self {
  335|    359|        Self::BooleanLiteral(value.into())
  336|    359|    }
_RNvXsc_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes6double6DoubleE4from:
  388|     62|    fn from(value: Double) -> Self {
  389|     62|        Self::DoubleLiteral(value)
  390|     62|    }
_RNvXsu_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf6triple19NamedOrBlankNodeRefE4from:
  595|    884|    fn from(term: NamedOrBlankNodeRef<'_>) -> Self {
  596|    884|        match term {
  597|    884|            NamedOrBlankNodeRef::NamedNode(named_node) => named_node.into(),
  598|      0|            NamedOrBlankNodeRef::BlankNode(blank_node) => blank_node.into(),
  599|       |        }
  600|    884|    }
_RNvMsB_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedQuad3new:
  676|     19|    pub fn new(
  677|     19|        subject: EncodedTerm,
  678|     19|        predicate: EncodedTerm,
  679|     19|        object: EncodedTerm,
  680|     19|        graph_name: EncodedTerm,
  681|     19|    ) -> Self {
  682|     19|        Self {
  683|     19|            subject,
  684|     19|            predicate,
  685|     19|            object,
  686|     19|            graph_name,
  687|     19|        }
  688|     19|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB2_7StrHash3new:
   20|  81.7k|    pub fn new(value: &str) -> Self {
   21|  81.7k|        let mut hasher = SipHasher24::new();
   22|  81.7k|        hasher.write(value.as_bytes());
   23|  81.7k|        Self {
   24|  81.7k|            hash: hasher.finish128().into(),
   25|  81.7k|        }
   26|  81.7k|    }
_RNvXs_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB4_11EncodedTermNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eq:
  102|  1.74k|    fn eq(&self, other: &Self) -> bool {
  103|  1.74k|        match (self, other) {
  104|    269|            (Self::DefaultGraph, Self::DefaultGraph) => true,
  105|    103|            (Self::NamedNode { iri_id: iri_id_a }, Self::NamedNode { iri_id: iri_id_b }) => {
  106|    103|                iri_id_a == iri_id_b
  107|       |            }
  108|      0|            (Self::NumericalBlankNode { id: id_a }, Self::NumericalBlankNode { id: id_b }) => {
  109|      0|                id_a == id_b
  110|       |            }
  111|      0|            (Self::SmallBlankNode(id_a), Self::SmallBlankNode(id_b)) => id_a == id_b,
  112|      0|            (Self::BigBlankNode { id_id: id_a }, Self::BigBlankNode { id_id: id_b }) => {
  113|      0|                id_a == id_b
  114|       |            }
  115|      0|            (Self::SmallStringLiteral(a), Self::SmallStringLiteral(b)) => a == b,
  116|       |            (
  117|       |                Self::BigStringLiteral {
  118|      0|                    value_id: value_id_a,
  119|      0|                },
  120|      0|                Self::BigStringLiteral {
  121|      0|                    value_id: value_id_b,
  122|      0|                },
  123|      0|            ) => value_id_a == value_id_b,
  124|       |            (
  125|       |                Self::SmallSmallLangStringLiteral {
  126|      0|                    value: value_a,
  127|      0|                    language: language_a,
  128|      0|                },
  129|      0|                Self::SmallSmallLangStringLiteral {
  130|      0|                    value: value_b,
  131|      0|                    language: language_b,
  132|      0|                },
  133|      0|            ) => value_a == value_b && language_a == language_b,
  134|       |            (
  135|       |                Self::SmallBigLangStringLiteral {
  136|      0|                    value: value_a,
  137|      0|                    language_id: language_id_a,
  138|      0|                },
  139|      0|                Self::SmallBigLangStringLiteral {
  140|      0|                    value: value_b,
  141|      0|                    language_id: language_id_b,
  142|      0|                },
  143|      0|            ) => value_a == value_b && language_id_a == language_id_b,
  144|       |            (
  145|       |                Self::BigSmallLangStringLiteral {
  146|      0|                    value_id: value_id_a,
  147|      0|                    language: language_a,
  148|      0|                },
  149|      0|                Self::BigSmallLangStringLiteral {
  150|      0|                    value_id: value_id_b,
  151|      0|                    language: language_b,
  152|      0|                },
  153|      0|            ) => value_id_a == value_id_b && language_a == language_b,
  154|       |            (
  155|       |                Self::BigBigLangStringLiteral {
  156|      0|                    value_id: value_id_a,
  157|      0|                    language_id: language_id_a,
  158|      0|                },
  159|      0|                Self::BigBigLangStringLiteral {
  160|      0|                    value_id: value_id_b,
  161|      0|                    language_id: language_id_b,
  162|      0|                },
  163|      0|            ) => value_id_a == value_id_b && language_id_a == language_id_b,
  164|       |            (
  165|       |                Self::SmallTypedLiteral {
  166|      0|                    value: value_a,
  167|      0|                    datatype_id: datatype_id_a,
  168|      0|                },
  169|      0|                Self::SmallTypedLiteral {
  170|      0|                    value: value_b,
  171|      0|                    datatype_id: datatype_id_b,
  172|      0|                },
  173|      0|            ) => value_a == value_b && datatype_id_a == datatype_id_b,
  174|       |            (
  175|       |                Self::BigTypedLiteral {
  176|      0|                    value_id: value_id_a,
  177|      0|                    datatype_id: datatype_id_a,
  178|      0|                },
  179|      0|                Self::BigTypedLiteral {
  180|      0|                    value_id: value_id_b,
  181|      0|                    datatype_id: datatype_id_b,
  182|      0|                },
  183|      0|            ) => value_id_a == value_id_b && datatype_id_a == datatype_id_b,
  184|      4|            (Self::BooleanLiteral(a), Self::BooleanLiteral(b)) => a == b,
  185|      0|            (Self::FloatLiteral(a), Self::FloatLiteral(b)) => a.is_identical_with(*b),
  186|      0|            (Self::DoubleLiteral(a), Self::DoubleLiteral(b)) => a.is_identical_with(*b),
  187|      4|            (Self::IntegerLiteral(a), Self::IntegerLiteral(b)) => a.is_identical_with(*b),
  188|      4|            (Self::DecimalLiteral(a), Self::DecimalLiteral(b)) => a.is_identical_with(*b),
  189|      0|            (Self::DateTimeLiteral(a), Self::DateTimeLiteral(b)) => a.is_identical_with(*b),
  190|      0|            (Self::TimeLiteral(a), Self::TimeLiteral(b)) => a.is_identical_with(*b),
  191|      0|            (Self::DateLiteral(a), Self::DateLiteral(b)) => a.is_identical_with(*b),
  192|      0|            (Self::GYearMonthLiteral(a), Self::GYearMonthLiteral(b)) => a.is_identical_with(*b),
  193|      0|            (Self::GYearLiteral(a), Self::GYearLiteral(b)) => a.is_identical_with(*b),
  194|      0|            (Self::GMonthDayLiteral(a), Self::GMonthDayLiteral(b)) => a.is_identical_with(*b),
  195|      0|            (Self::GMonthLiteral(a), Self::GMonthLiteral(b)) => a.is_identical_with(*b),
  196|      0|            (Self::GDayLiteral(a), Self::GDayLiteral(b)) => a.is_identical_with(*b),
  197|      0|            (Self::DurationLiteral(a), Self::DurationLiteral(b)) => a.is_identical_with(*b),
  198|      0|            (Self::YearMonthDurationLiteral(a), Self::YearMonthDurationLiteral(b)) => {
  199|      0|                a.is_identical_with(*b)
  200|       |            }
  201|      0|            (Self::DayTimeDurationLiteral(a), Self::DayTimeDurationLiteral(b)) => {
  202|      0|                a.is_identical_with(*b)
  203|       |            }
  204|      0|            (Self::Triple(a), Self::Triple(b)) => a == b,
  205|  1.35k|            (_, _) => false,
  206|       |        }
  207|  1.74k|    }
_RNvXst_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf7literal10LiteralRefE4from:
  503|  7.77k|    fn from(literal: LiteralRef<'_>) -> Self {
  504|  7.77k|        let value = literal.value();
  505|  7.77k|        let datatype = literal.datatype().as_str();
  506|  7.77k|        let native_encoding = match datatype {
  507|  7.77k|            "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString" => {
  508|  1.94k|                literal.language().map(|language| {
  509|       |                    if let Ok(value) = SmallString::try_from(value) {
  510|       |                        if let Ok(language) = SmallString::try_from(language) {
  511|       |                            Self::SmallSmallLangStringLiteral { value, language }
  512|       |                        } else {
  513|       |                            Self::SmallBigLangStringLiteral {
  514|       |                                value,
  515|       |                                language_id: StrHash::new(language),
  516|       |                            }
  517|       |                        }
  518|       |                    } else if let Ok(language) = SmallString::try_from(language) {
  519|       |                        Self::BigSmallLangStringLiteral {
  520|       |                            value_id: StrHash::new(value),
  521|       |                            language,
  522|       |                        }
  523|       |                    } else {
  524|       |                        Self::BigBigLangStringLiteral {
  525|       |                            value_id: StrHash::new(value),
  526|       |                            language_id: StrHash::new(language),
  527|       |                        }
  528|       |                    }
  529|  1.94k|                })
  530|       |            }
  531|  5.83k|            "http://www.w3.org/2001/XMLSchema#boolean" => parse_boolean_str(value),
  532|  3.64k|            "http://www.w3.org/2001/XMLSchema#string" => {
  533|    555|                Some(if let Ok(value) = SmallString::try_from(value) {
  534|    555|                    Self::SmallStringLiteral(value)
  535|       |                } else {
  536|      0|                    Self::BigStringLiteral {
  537|      0|                        value_id: StrHash::new(value),
  538|      0|                    }
  539|       |                })
  540|       |            }
  541|  3.08k|            "http://www.w3.org/2001/XMLSchema#float" => parse_float_str(value),
  542|  3.08k|            "http://www.w3.org/2001/XMLSchema#double" => parse_double_str(value),
  543|  2.38k|            "http://www.w3.org/2001/XMLSchema#integer"
  544|  1.09k|            | "http://www.w3.org/2001/XMLSchema#byte"
  545|  1.09k|            | "http://www.w3.org/2001/XMLSchema#short"
  546|  1.09k|            | "http://www.w3.org/2001/XMLSchema#int"
  547|  1.09k|            | "http://www.w3.org/2001/XMLSchema#long"
  548|  1.09k|            | "http://www.w3.org/2001/XMLSchema#unsignedByte"
  549|  1.09k|            | "http://www.w3.org/2001/XMLSchema#unsignedShort"
  550|  1.09k|            | "http://www.w3.org/2001/XMLSchema#unsignedInt"
  551|  1.09k|            | "http://www.w3.org/2001/XMLSchema#unsignedLong"
  552|  1.09k|            | "http://www.w3.org/2001/XMLSchema#positiveInteger"
  553|  1.09k|            | "http://www.w3.org/2001/XMLSchema#negativeInteger"
  554|  1.09k|            | "http://www.w3.org/2001/XMLSchema#nonPositiveInteger"
  555|  1.29k|            | "http://www.w3.org/2001/XMLSchema#nonNegativeInteger" => parse_integer_str(value),
  556|  1.09k|            "http://www.w3.org/2001/XMLSchema#decimal" => parse_decimal_str(value),
  557|      0|            "http://www.w3.org/2001/XMLSchema#dateTime"
  558|      0|            | "http://www.w3.org/2001/XMLSchema#dateTimeStamp" => parse_date_time_str(value),
  559|      0|            "http://www.w3.org/2001/XMLSchema#time" => parse_time_str(value),
  560|      0|            "http://www.w3.org/2001/XMLSchema#date" => parse_date_str(value),
  561|      0|            "http://www.w3.org/2001/XMLSchema#gYearMonth" => parse_g_year_month_str(value),
  562|      0|            "http://www.w3.org/2001/XMLSchema#gYear" => parse_g_year_str(value),
  563|      0|            "http://www.w3.org/2001/XMLSchema#gMonthDay" => parse_g_month_day_str(value),
  564|      0|            "http://www.w3.org/2001/XMLSchema#gDay" => parse_g_day_str(value),
  565|      0|            "http://www.w3.org/2001/XMLSchema#gMonth" => parse_g_month_str(value),
  566|      0|            "http://www.w3.org/2001/XMLSchema#duration" => parse_duration_str(value),
  567|      0|            "http://www.w3.org/2001/XMLSchema#yearMonthDuration" => {
  568|      0|                parse_year_month_duration_str(value)
  569|       |            }
  570|      0|            "http://www.w3.org/2001/XMLSchema#dayTimeDuration" => {
  571|      0|                parse_day_time_duration_str(value)
  572|       |            }
  573|      0|            _ => None,
  574|       |        };
  575|  7.77k|        match native_encoding {
  576|  7.77k|            Some(term) => term,
  577|       |            None => {
  578|      0|                if let Ok(value) = SmallString::try_from(value) {
  579|      0|                    Self::SmallTypedLiteral {
  580|      0|                        value,
  581|      0|                        datatype_id: StrHash::new(datatype),
  582|      0|                    }
  583|       |                } else {
  584|      0|                    Self::BigTypedLiteral {
  585|      0|                        value_id: StrHash::new(value),
  586|      0|                        datatype_id: StrHash::new(datatype),
  587|      0|                    }
  588|       |                }
  589|       |            }
  590|       |        }
  591|  7.77k|    }
_RNvXsH_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_7StrHashNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
   13|  8.88k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXsw_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf6triple7TermRefE4from:
  614|  68.8k|    fn from(term: TermRef<'_>) -> Self {
  615|  68.8k|        match term {
  616|  61.0k|            TermRef::NamedNode(named_node) => named_node.into(),
  617|      0|            TermRef::BlankNode(blank_node) => blank_node.into(),
  618|  7.77k|            TermRef::Literal(literal) => literal.into(),
  619|      0|            TermRef::Triple(triple) => triple.as_ref().into(),
  620|       |        }
  621|  68.8k|    }
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoder17parse_decimal_str:
  809|  1.09k|pub fn parse_decimal_str(value: &str) -> Option<EncodedTerm> {
  810|  1.09k|    value.parse().map(EncodedTerm::DecimalLiteral).ok()
  811|  1.09k|}
_RNvXsr_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf10named_node12NamedNodeRefE4from:
  478|  81.7k|    fn from(named_node: NamedNodeRef<'_>) -> Self {
  479|  81.7k|        Self::NamedNode {
  480|  81.7k|            iri_id: StrHash::new(named_node.as_str()),
  481|  81.7k|        }
  482|  81.7k|    }
_RNvXse_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes7decimal7DecimalE4from:
  400|    816|    fn from(value: Decimal) -> Self {
  401|    816|        Self::DecimalLiteral(value)
  402|    816|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB2_7StrHash11to_be_bytesB6_:
   36|   179k|    pub fn to_be_bytes(self) -> [u8; 16] {
   37|   179k|        self.hash.to_be_bytes()
   38|   179k|    }
_RNvXsC_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedQuadINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf6triple7QuadRefE4from:
  692|  5.33k|    fn from(quad: QuadRef<'_>) -> Self {
  693|  5.33k|        Self {
  694|  5.33k|            subject: quad.subject.into(),
  695|  5.33k|            predicate: quad.predicate.into(),
  696|  5.33k|            object: quad.object.into(),
  697|  5.33k|            graph_name: quad.graph_name.into(),
  698|  5.33k|        }
  699|  5.33k|    }
_RNvNtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoder17parse_integer_str:
  805|  1.29k|pub fn parse_integer_str(value: &str) -> Option<EncodedTerm> {
  806|  1.29k|    value.parse().map(EncodedTerm::IntegerLiteral).ok()
  807|  1.29k|}
_RNvMs2_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedTerm16is_default_graph:
  324|  53.6k|    pub fn is_default_graph(&self) -> bool {
  325|  53.6k|        matches!(self, Self::DefaultGraph)
  326|  53.6k|    }
_RNvXsJ_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_7StrHashNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   13|  31.2k|#[derive(Eq, PartialEq, Debug, Clone, Copy, Hash)]
_RNvXsN_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB5_11EncodedTermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   41|  68.0k|#[derive(Debug, Clone)]
_RNvYNtNtCsd92XLxb96zi_8oxigraph7storage13StorageReaderNtNtB4_15numeric_encoder7Decoder11decode_quadB6_:
  917|  1.59k|    fn decode_quad(&self, encoded: &EncodedQuad) -> Result<Quad, StorageError> {
  918|  1.59k|        Ok(Quad::new(
  919|  1.59k|            self.decode_subject(&encoded.subject)?,
  920|  1.59k|            self.decode_named_node(&encoded.predicate)?,
  921|  1.59k|            self.decode_term(&encoded.object)?,
  922|  1.59k|            if encoded.graph_name == EncodedTerm::DefaultGraph {
  923|    250|                GraphName::DefaultGraph
  924|       |            } else {
  925|  1.34k|                match self.decode_term(&encoded.graph_name)? {
  926|  1.34k|                    Term::NamedNode(named_node) => named_node.into(),
  927|      0|                    Term::BlankNode(blank_node) => blank_node.into(),
  928|       |                    Term::Literal(_) => {
  929|      0|                        return Err(
  930|      0|                            CorruptionError::msg("A literal is not a valid graph name").into()
  931|      0|                        )
  932|       |                    }
  933|       |                    Term::Triple(_) => {
  934|      0|                        return Err(
  935|      0|                            CorruptionError::msg("A triple is not a valid graph name").into()
  936|      0|                        )
  937|       |                    }
  938|       |                }
  939|       |            },
  940|       |        ))
  941|  1.59k|    }
_RNvYNtNtCsd92XLxb96zi_8oxigraph7storage13StorageReaderNtNtB4_15numeric_encoder7Decoder14decode_subjectB6_:
  863|  1.59k|    fn decode_subject(&self, encoded: &EncodedTerm) -> Result<Subject, StorageError> {
  864|  1.59k|        match self.decode_term(encoded)? {
  865|  1.59k|            Term::NamedNode(named_node) => Ok(named_node.into()),
  866|      0|            Term::BlankNode(blank_node) => Ok(blank_node.into()),
  867|      0|            Term::Literal(_) => Err(CorruptionError::msg(
  868|      0|                "A literal has been found instead of a subject node",
  869|      0|            )
  870|      0|            .into()),
  871|      0|            Term::Triple(triple) => Ok(Subject::Triple(triple)),
  872|       |        }
  873|  1.59k|    }
_RNvXsD_NtNtCsd92XLxb96zi_8oxigraph7storage15numeric_encoderNtB7_13StorageReaderNtB5_7Decoder11decode_termB9_:
  945|  6.11k|    fn decode_term(&self, encoded: &EncodedTerm) -> Result<Term, StorageError> {
  946|  6.11k|        match encoded {
  947|       |            EncodedTerm::DefaultGraph => {
  948|      0|                Err(CorruptionError::msg("The default graph tag is not a valid term").into())
  949|       |            }
  950|  5.08k|            EncodedTerm::NamedNode { iri_id } => {
  951|  5.08k|                Ok(NamedNode::new_unchecked(get_required_str(self, iri_id)?).into())
  952|       |            }
  953|      0|            EncodedTerm::NumericalBlankNode { id } => Ok(BlankNode::new_from_unique_id(*id).into()),
  954|      0|            EncodedTerm::SmallBlankNode(id) => Ok(BlankNode::new_unchecked(id.as_str()).into()),
  955|      0|            EncodedTerm::BigBlankNode { id_id } => {
  956|      0|                Ok(BlankNode::new_unchecked(get_required_str(self, id_id)?).into())
  957|       |            }
  958|     30|            EncodedTerm::SmallStringLiteral(value) => {
  959|     30|                Ok(Literal::new_simple_literal(*value).into())
  960|       |            }
  961|      0|            EncodedTerm::BigStringLiteral { value_id } => {
  962|      0|                Ok(Literal::new_simple_literal(get_required_str(self, value_id)?).into())
  963|       |            }
  964|    324|            EncodedTerm::SmallSmallLangStringLiteral { value, language } => {
  965|    324|                Ok(Literal::new_language_tagged_literal_unchecked(*value, *language).into())
  966|       |            }
  967|      0|            EncodedTerm::SmallBigLangStringLiteral { value, language_id } => {
  968|      0|                Ok(Literal::new_language_tagged_literal_unchecked(
  969|      0|                    *value,
  970|      0|                    get_required_str(self, language_id)?,
  971|       |                )
  972|      0|                .into())
  973|       |            }
  974|      0|            EncodedTerm::BigSmallLangStringLiteral { value_id, language } => {
  975|      0|                Ok(Literal::new_language_tagged_literal_unchecked(
  976|      0|                    get_required_str(self, value_id)?,
  977|      0|                    *language,
  978|      0|                )
  979|      0|                .into())
  980|       |            }
  981|       |            EncodedTerm::BigBigLangStringLiteral {
  982|      0|                value_id,
  983|      0|                language_id,
  984|      0|            } => Ok(Literal::new_language_tagged_literal_unchecked(
  985|      0|                get_required_str(self, value_id)?,
  986|      0|                get_required_str(self, language_id)?,
  987|       |            )
  988|      0|            .into()),
  989|      0|            EncodedTerm::SmallTypedLiteral { value, datatype_id } => {
  990|      0|                Ok(Literal::new_typed_literal(
  991|      0|                    *value,
  992|      0|                    NamedNode::new_unchecked(get_required_str(self, datatype_id)?),
  993|       |                )
  994|      0|                .into())
  995|       |            }
  996|       |            EncodedTerm::BigTypedLiteral {
  997|      0|                value_id,
  998|      0|                datatype_id,
  999|      0|            } => Ok(Literal::new_typed_literal(
 1000|      0|                get_required_str(self, value_id)?,
 1001|      0|                NamedNode::new_unchecked(get_required_str(self, datatype_id)?),
 1002|       |            )
 1003|      0|            .into()),
 1004|    128|            EncodedTerm::BooleanLiteral(value) => Ok(Literal::from(*value).into()),
 1005|      0|            EncodedTerm::FloatLiteral(value) => Ok(Literal::from(*value).into()),
 1006|     30|            EncodedTerm::DoubleLiteral(value) => Ok(Literal::from(*value).into()),
 1007|    166|            EncodedTerm::IntegerLiteral(value) => Ok(Literal::from(*value).into()),
 1008|    356|            EncodedTerm::DecimalLiteral(value) => Ok(Literal::from(*value).into()),
 1009|      0|            EncodedTerm::DateTimeLiteral(value) => Ok(Literal::from(*value).into()),
 1010|      0|            EncodedTerm::DateLiteral(value) => Ok(Literal::from(*value).into()),
 1011|      0|            EncodedTerm::TimeLiteral(value) => Ok(Literal::from(*value).into()),
 1012|      0|            EncodedTerm::GYearMonthLiteral(value) => Ok(Literal::from(*value).into()),
 1013|      0|            EncodedTerm::GYearLiteral(value) => Ok(Literal::from(*value).into()),
 1014|      0|            EncodedTerm::GMonthDayLiteral(value) => Ok(Literal::from(*value).into()),
 1015|      0|            EncodedTerm::GDayLiteral(value) => Ok(Literal::from(*value).into()),
 1016|      0|            EncodedTerm::GMonthLiteral(value) => Ok(Literal::from(*value).into()),
 1017|      0|            EncodedTerm::DurationLiteral(value) => Ok(Literal::from(*value).into()),
 1018|      0|            EncodedTerm::YearMonthDurationLiteral(value) => Ok(Literal::from(*value).into()),
 1019|      0|            EncodedTerm::DayTimeDurationLiteral(value) => Ok(Literal::from(*value).into()),
 1020|      0|            EncodedTerm::Triple(triple) => Ok(self.decode_triple(triple)?.into()),
 1021|       |        }
 1022|  6.11k|    }
_RNvYNtNtCsd92XLxb96zi_8oxigraph7storage13StorageReaderNtNtB4_15numeric_encoder7Decoder17decode_named_nodeB6_:
  893|  1.59k|    fn decode_named_node(&self, encoded: &EncodedTerm) -> Result<NamedNode, StorageError> {
  894|  1.59k|        match self.decode_term(encoded)? {
  895|  1.59k|            Term::NamedNode(named_node) => Ok(named_node),
  896|      0|            Term::BlankNode(_) => Err(CorruptionError::msg(
  897|      0|                "A blank node has been found instead of a named node",
  898|      0|            )
  899|      0|            .into()),
  900|       |            Term::Literal(_) => {
  901|      0|                Err(CorruptionError::msg("A literal has been found instead of a named node").into())
  902|       |            }
  903|       |            Term::Triple(_) => {
  904|      0|                Err(CorruptionError::msg("A triple has been found instead of a named node").into())
  905|       |            }
  906|       |        }
  907|  1.59k|    }

_RINvXs8_NtNtCsd92XLxb96zi_8oxigraph7storage12small_stringNtB6_11SmallStringNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEBa_:
  124|     24|    fn hash<H: Hasher>(&self, state: &mut H) {
  125|     24|        self.as_str().hash(state)
  126|     24|    }
_RNvXs9_NtNtCsd92XLxb96zi_8oxigraph7storage12small_stringNtNtCsjOdcKtOMjJI_5alloc6string6StringINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_11SmallStringE4fromB9_:
  131|    690|    fn from(value: SmallString) -> Self {
  132|    690|        value.as_str().into()
  133|    690|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph7storage12small_stringNtB2_11SmallString6as_strB6_:
   46|    714|    pub fn as_str(&self) -> &str {
   47|    714|        // SAFETY: safe because we ensured it in constructors
   48|    714|        unsafe { str::from_utf8_unchecked(self.as_bytes()) }
   49|    714|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph7storage12small_stringNtB2_11SmallString13from_be_bytesB6_:
   27|  1.40k|    pub fn from_be_bytes(bytes: [u8; 16]) -> Result<Self, BadSmallStringError> {
   28|  1.40k|        // We check that it is valid UTF-8
   29|  1.40k|        str::from_utf8(&bytes.as_ref()[..bytes[15].into()])
   30|  1.40k|            .map_err(BadSmallStringError::BadUtf8)?;
   31|  1.40k|        Ok(Self { inner: bytes })
   32|  1.40k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph7storage12small_stringNtB2_11SmallString11to_be_bytesB6_:
   57|  10.4k|    pub fn to_be_bytes(self) -> [u8; 16] {
   58|  10.4k|        self.inner
   59|  10.4k|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph7storage12small_stringNtB2_11SmallString3lenB6_:
   35|    715|    pub fn len(&self) -> usize {
   36|    715|        self.inner[15].into()
   37|    715|    }
_RNvXsc_NtNtCsd92XLxb96zi_8oxigraph7storage12small_stringNtB5_11SmallStringINtNtCs9nhK3FOW46N_4core7convert7TryFromReE8try_fromB9_:
  166|  4.43k|    fn try_from(value: &'a str) -> Result<Self, Self::Error> {
  167|  4.43k|        Self::from_str(value)
  168|  4.43k|    }
_RNvXsb_NtNtCsd92XLxb96zi_8oxigraph7storage12small_stringNtB5_11SmallStringNtNtNtCs9nhK3FOW46N_4core3str6traits7FromStr8from_strB9_:
  147|  4.43k|    fn from_str(value: &str) -> Result<Self, Self::Err> {
  148|  4.43k|        if value.len() <= 15 {
  149|  4.43k|            let mut inner = [0; 16];
  150|  4.43k|            inner[..value.len()].copy_from_slice(value.as_bytes());
  151|  4.43k|            inner[15] = value
  152|  4.43k|                .len()
  153|  4.43k|                .try_into()
  154|  4.43k|                .map_err(|_| Self::Err::TooLong(value.len()))?;
  155|  4.43k|            Ok(Self { inner })
  156|       |        } else {
  157|      0|            Err(Self::Err::TooLong(value.len()))
  158|       |        }
  159|  4.43k|    }
_RNvXsd_NtNtCsd92XLxb96zi_8oxigraph7storage12small_stringNtB5_11SmallStringNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
    9|    758|#[derive(Clone, Copy, Default)]
_RNvMNtNtCsd92XLxb96zi_8oxigraph7storage12small_stringNtB2_11SmallString8as_bytesB6_:
   52|    714|    pub fn as_bytes(&self) -> &[u8] {
   53|    714|        &self.inner[..self.len()]
   54|    714|    }
_RNvMNtNtCsd92XLxb96zi_8oxigraph7storage12small_stringNtB2_11SmallString8is_emptyB6_:
   40|      1|    pub fn is_empty(&self) -> bool {
   41|      1|        self.len() == 0
   42|      1|    }

_RINvMNtCsd92XLxb96zi_8oxigraph5storeNtB3_5Store10update_optNtNtCs9nhK3FOW46N_4core7convert10InfallibleNtNtNtB5_6sparql7algebra6UpdateNtB1G_12QueryOptionsECsh41WZG82U3t_18sparql_update_eval:
  451|  4.25k|    pub fn update_opt(
  452|  4.25k|        &self,
  453|  4.25k|        update: impl TryInto<Update, Error = impl Into<EvaluationError>>,
  454|  4.25k|        options: impl Into<UpdateOptions>,
  455|  4.25k|    ) -> Result<(), EvaluationError> {
  456|  4.25k|        let update = update.try_into().map_err(Into::into)?;
  457|  4.25k|        let options = options.into();
  458|  4.25k|        self.storage
  459|  4.25k|            .transaction(|mut t| evaluate_update(&mut t, &update, &options))
  460|  4.25k|    }
_RNCINvMNtCsd92XLxb96zi_8oxigraph5storeNtB5_5Store10update_optNtNtCs9nhK3FOW46N_4core7convert10InfallibleNtNtNtB7_6sparql7algebra6UpdateNtB1I_12QueryOptionsE0Csh41WZG82U3t_18sparql_update_eval:
  459|  4.25k|            .transaction(|mut t| evaluate_update(&mut t, &update, &options))
_RNvMNtCsd92XLxb96zi_8oxigraph5storeNtB2_5Store17quads_for_pattern:
  274|  4.25k|    pub fn quads_for_pattern(
  275|  4.25k|        &self,
  276|  4.25k|        subject: Option<SubjectRef<'_>>,
  277|  4.25k|        predicate: Option<NamedNodeRef<'_>>,
  278|  4.25k|        object: Option<TermRef<'_>>,
  279|  4.25k|        graph_name: Option<GraphNameRef<'_>>,
  280|  4.25k|    ) -> QuadIter {
  281|  4.25k|        let reader = self.storage.snapshot();
  282|  4.25k|        QuadIter {
  283|  4.25k|            iter: reader.quads_for_pattern(
  284|  4.25k|                subject.map(EncodedTerm::from).as_ref(),
  285|  4.25k|                predicate.map(EncodedTerm::from).as_ref(),
  286|  4.25k|                object.map(EncodedTerm::from).as_ref(),
  287|  4.25k|                graph_name.map(EncodedTerm::from).as_ref(),
  288|  4.25k|            ),
  289|  4.25k|            reader,
  290|  4.25k|        }
  291|  4.25k|    }
_RNvMNtCsd92XLxb96zi_8oxigraph5storeNtB2_5Store3new:
   92|      1|    pub fn new() -> Result<Self, StorageError> {
   93|      1|        Ok(Self {
   94|      1|            storage: Storage::new()?,
   95|       |        })
   96|      1|    }
_RNvMs1_NtCsd92XLxb96zi_8oxigraph5storeNtB5_11Transaction5clear:
 1522|  4.25k|    pub fn clear(&mut self) -> Result<(), StorageError> {
 1523|  4.25k|        self.writer.clear()
 1524|  4.25k|    }
_RNvMNtCsd92XLxb96zi_8oxigraph5storeNtB2_5Store4iter:
  312|  4.25k|    pub fn iter(&self) -> QuadIter {
  313|  4.25k|        self.quads_for_pattern(None, None, None, None)
  314|  4.25k|    }
_RNvMNtCsd92XLxb96zi_8oxigraph5storeNtB2_5Store5clear:
  926|  4.25k|    pub fn clear(&self) -> Result<(), StorageError> {
  927|  4.25k|        self.transaction(|mut t| t.clear())
  928|  4.25k|    }
_RNvXs3_NtCsd92XLxb96zi_8oxigraph5storeNtB5_8QuadIterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 1546|  5.84k|    fn next(&mut self) -> Option<Self::Item> {
 1547|  5.84k|        Some(match self.iter.next()? {
 1548|  1.59k|            Ok(quad) => self.reader.decode_quad(&quad),
 1549|      0|            Err(error) => Err(error),
 1550|       |        })
 1551|  5.84k|    }
_RNCINvMNtCsd92XLxb96zi_8oxigraph5storeNtB5_5Store11transactionuNtNtNtB7_7storage5error12StorageErrorNCNvB4_5clear0E0B7_:
  406|  4.25k|        self.storage.transaction(|writer| f(Transaction { writer }))
_RINvMNtCsd92XLxb96zi_8oxigraph5storeNtB3_5Store11transactionuNtNtNtB5_7storage5error12StorageErrorNCNvB2_5clear0EB5_:
  402|  4.25k|    pub fn transaction<'a, 'b: 'a, T, E: Error + 'static + From<StorageError>>(
  403|  4.25k|        &'b self,
  404|  4.25k|        f: impl Fn(Transaction<'a>) -> Result<T, E>,
  405|  4.25k|    ) -> Result<T, E> {
  406|  4.25k|        self.storage.transaction(|writer| f(Transaction { writer }))
  407|  4.25k|    }
_RNCNvMNtCsd92XLxb96zi_8oxigraph5storeNtB4_5Store5clear0B6_:
  927|  4.25k|        self.transaction(|mut t| t.clear())

_RNvXsH_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
  249|  7.86k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsk_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
   22|  7.86k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsd_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
   19|  7.86k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsH_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsj4YExd6TrWR_7sparopt:
  249|  56.4k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsb_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsj4YExd6TrWR_7sparopt:
   19|  33.3k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsd_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsj4YExd6TrWR_7sparopt:
   19|  56.4k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsg_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsj4YExd6TrWR_7sparopt:
   22|  33.3k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsD_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsj4YExd6TrWR_7sparopt:
  249|  31.6k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsk_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsj4YExd6TrWR_7sparopt:
   22|  56.4k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvXsl_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB6_16BlankNodeContentNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECskGc5T8eVihK_9spargebra:
   22|  84.9k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvXse_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB6_9BlankNodeNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECskGc5T8eVihK_9spargebra:
   19|  84.9k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvXsI_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB6_5IdStrNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECskGc5T8eVihK_9spargebra:
  249|  84.9k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsH_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_5IdStrNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCskGc5T8eVihK_9spargebra:
  249|  40.7k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs7_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_5IdStr3newCskGc5T8eVihK_9spargebra:
  254|  36.1k|    fn new(id: u128) -> Self {
  255|  36.1k|        let mut str = [0; 32];
  256|  36.1k|        write!(&mut str[..], "{id:x}").unwrap();
  257|  36.1k|        Self(str)
  258|  36.1k|    }
_RNvXsk_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_16BlankNodeContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCskGc5T8eVihK_9spargebra:
   22|  40.7k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMs7_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_5IdStr6as_strCskGc5T8eVihK_9spargebra:
  261|  36.1k|    fn as_str(&self) -> &str {
  262|  36.1k|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);
  263|  36.1k|        str::from_utf8(&self.0[..len]).unwrap()
  264|  36.1k|    }
_RNvXsd_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCskGc5T8eVihK_9spargebra:
   19|  40.7k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs0_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB5_9BlankNodeNtNtCs9nhK3FOW46N_4core7default7Default7defaultCskGc5T8eVihK_9spargebra:
  108|  14.4k|    fn default() -> Self {
  109|       |        // We ensure the ID does not start with a number to be also valid with RDF/XML
  110|  36.1k|        loop {
  111|  36.1k|            let id = random();
  112|  36.1k|            let str = IdStr::new(id);
  113|  36.1k|            if matches!(str.as_str().as_bytes().first(), Some(b'a'..=b'f')) {
  114|  14.4k|                return Self(BlankNodeContent::Anonymous { id, str });
  115|  21.7k|            }
  116|       |        }
  117|  14.4k|    }
_RNCNvMs7_NtCshJ9d6mhVUZV_5oxrdf10blank_nodeNtB7_5IdStr6as_str0B9_:
  262|  1.15M|        let len = self.0.iter().position(|x| x == &0).unwrap_or(32);

_RINvXs4_NtCshJ9d6mhVUZV_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect6ExtendNtNtB8_6triple4QuadE6extendINtNtBU_8adapters12GenericShuntNtNtCsd92XLxb96zi_8oxigraph5store8QuadIterINtNtBW_6result6ResultNtNtBW_7convert10InfallibleNtNtNtB2G_7storage5error12StorageErrorEEECsh41WZG82U3t_18sparql_update_eval:
  973|  4.25k|    fn extend<I: IntoIterator<Item = Quad>>(&mut self, iter: I) {
  974|  5.84k|        for t in iter {
  975|  1.59k|            self.insert(&t);
  976|  1.59k|        }
  977|  4.25k|    }
_RINvXs2_NtCshJ9d6mhVUZV_5oxrdf7datasetNtB6_7DatasetINtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect12FromIteratorNtNtB8_6triple4QuadE9from_iterINtNtBU_8adapters12GenericShuntNtNtCsd92XLxb96zi_8oxigraph5store8QuadIterINtNtBW_6result6ResultNtNtBW_7convert10InfallibleNtNtNtB2Q_7storage5error12StorageErrorEEECsh41WZG82U3t_18sparql_update_eval:
  957|  4.25k|    fn from_iter<I: IntoIterator<Item = Quad>>(iter: I) -> Self {
  958|  4.25k|        let mut g = Self::new();
  959|  4.25k|        g.extend(iter);
  960|  4.25k|        g
  961|  4.25k|    }
_RINvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB3_7Dataset6insertRNtNtB5_6triple4QuadECsh41WZG82U3t_18sparql_update_eval:
  360|  1.59k|    pub fn insert<'a>(&mut self, quad: impl Into<QuadRef<'a>>) -> bool {
  361|  1.59k|        let quad = self.encode_quad(quad.into());
  362|  1.59k|        self.insert_encoded(quad)
  363|  1.59k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset12canonicalize:
  539|  4.25k|    pub fn canonicalize(&mut self, algorithm: CanonicalizationAlgorithm) {
  540|  4.25k|        let bnode_mapping = self.canonicalize_interned_blank_nodes(algorithm);
  541|  4.25k|        let new_quads = self.map_blank_nodes(&bnode_mapping);
  542|  4.25k|        self.clear();
  543|  5.84k|        for quad in new_quads {
  544|  1.59k|            self.insert_encoded(quad);
  545|  1.59k|        }
  546|  4.25k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset11blank_nodes:
  582|  4.25k|    fn blank_nodes(&self) -> HashSet<InternedBlankNode> {
  583|  4.25k|        let mut bnodes = HashSet::new();
  584|  5.84k|        for (g, s, _, o) in &self.gspo {
  585|  1.59k|            if let InternedSubject::BlankNode(bnode) = s {
  586|      0|                bnodes.insert(*bnode);
  587|  1.59k|            }
  588|       |            #[cfg(feature = "rdf-star")]
  589|  1.59k|            if let InternedSubject::Triple(triple) = s {
  590|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  591|  1.59k|            }
  592|  1.59k|            if let InternedTerm::BlankNode(bnode) = o {
  593|      0|                bnodes.insert(*bnode);
  594|  1.59k|            }
  595|       |            #[cfg(feature = "rdf-star")]
  596|  1.59k|            if let InternedTerm::Triple(triple) = o {
  597|      0|                Self::triple_blank_nodes(triple, &mut bnodes);
  598|  1.59k|            }
  599|  1.59k|            if let InternedGraphName::BlankNode(bnode) = g {
  600|      0|                bnodes.insert(*bnode);
  601|  1.59k|            }
  602|       |        }
  603|  4.25k|        bnodes
  604|  4.25k|    }
_RNvXsg_NtCshJ9d6mhVUZV_5oxrdf7datasetNtB5_4IterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
 1551|  2.92k|    fn next(&mut self) -> Option<Self::Item> {
 1552|  2.92k|        self.inner
 1553|  2.92k|            .next()
 1554|  2.92k|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
 1555|  2.92k|    }
_RNvXsj_NtCshJ9d6mhVUZV_5oxrdf7datasetNtB5_7DatasetNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
   66|  4.25k|#[derive(Debug, Default, Clone)]
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset11decode_spog:
  479|    796|    fn decode_spog(
  480|    796|        &self,
  481|    796|        quad: (
  482|    796|            &InternedSubject,
  483|    796|            &InternedNamedNode,
  484|    796|            &InternedTerm,
  485|    796|            &InternedGraphName,
  486|    796|        ),
  487|    796|    ) -> QuadRef<'_> {
  488|    796|        QuadRef {
  489|    796|            subject: quad.0.decode_from(&self.interner),
  490|    796|            predicate: quad.1.decode_from(&self.interner),
  491|    796|            object: quad.2.decode_from(&self.interner),
  492|    796|            graph_name: quad.3.decode_from(&self.interner),
  493|    796|        }
  494|    796|    }
_RNvXs_NtCshJ9d6mhVUZV_5oxrdf7datasetNtB4_7DatasetNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eq:
  932|  2.12k|    fn eq(&self, other: &Self) -> bool {
  933|  2.12k|        if self.len() != other.len() {
  934|      0|            return false;
  935|  2.12k|        }
  936|  2.92k|        for q in self {
  937|    796|            if !other.contains(q) {
  938|      0|                return false;
  939|    796|            }
  940|       |        }
  941|  2.12k|        true
  942|  2.12k|    }
_RNvXs1_NtCshJ9d6mhVUZV_5oxrdf7datasetRNtB5_7DatasetNtNtNtNtCs9nhK3FOW46N_4core4iter6traits7collect12IntoIterator9into_iter:
  951|  2.12k|    fn into_iter(self) -> Self::IntoIter {
  952|  2.12k|        self.iter()
  953|  2.12k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset3len:
  350|  4.25k|    pub fn len(&self) -> usize {
  351|  4.25k|        self.gspo.len()
  352|  4.25k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset33canonicalize_interned_blank_nodes:
  562|  4.25k|    fn canonicalize_interned_blank_nodes(
  563|  4.25k|        &self,
  564|  4.25k|        algorithm: CanonicalizationAlgorithm,
  565|  4.25k|    ) -> HashMap<InternedBlankNode, BlankNode> {
  566|  4.25k|        match algorithm {
  567|  4.25k|            CanonicalizationAlgorithm::Unstable => {
  568|  4.25k|                let bnodes = self.blank_nodes();
  569|  4.25k|                let quads_per_blank_node = self.quads_per_blank_nodes();
  570|  4.25k|                let (hash, partition) = self.hash_bnodes(
  571|  4.25k|                    bnodes.into_iter().map(|bnode| (bnode, 0)).collect(),
  572|  4.25k|                    &quads_per_blank_node,
  573|  4.25k|                );
  574|  4.25k|                self.distinguish(hash, &partition, &quads_per_blank_node)
  575|  4.25k|                    .into_iter()
  576|  4.25k|                    .map(|(from, to)| (from, BlankNode::new_from_unique_id(to.into())))
  577|  4.25k|                    .collect()
  578|  4.25k|            }
  579|  4.25k|        }
  580|  4.25k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset11hash_bnodes:
  669|  4.25k|    fn hash_bnodes(
  670|  4.25k|        &self,
  671|  4.25k|        mut hashes: HashMap<InternedBlankNode, u64>,
  672|  4.25k|        quads_per_blank_node: &QuadsPerBlankNode,
  673|  4.25k|    ) -> (
  674|  4.25k|        HashMap<InternedBlankNode, u64>,
  675|  4.25k|        Vec<(u64, Vec<InternedBlankNode>)>,
  676|  4.25k|    ) {
  677|  4.25k|        let mut to_hash = Vec::new();
  678|  4.25k|        let mut to_do = hashes
  679|  4.25k|            .keys()
  680|  4.25k|            .map(|bnode| (*bnode, true))
  681|  4.25k|            .collect::<HashMap<_, _>>();
  682|  4.25k|        let mut partition = HashMap::<_, Vec<_>>::with_capacity(hashes.len());
  683|  4.25k|        let mut old_partition_count = usize::MAX;
  684|  8.50k|        while old_partition_count != partition.len() {
  685|  4.25k|            old_partition_count = partition.len();
  686|  4.25k|            partition.clear();
  687|  4.25k|            let mut new_hashes = hashes.clone();
  688|  4.25k|            for bnode in hashes.keys() {
  689|      0|                let hash = if to_do.contains_key(bnode) {
  690|      0|                    for (s, p, o, g) in &quads_per_blank_node[bnode] {
  691|      0|                        to_hash.push((
  692|      0|                            self.hash_subject(s, *bnode, &hashes),
  693|      0|                            self.hash_named_node(*p),
  694|      0|                            self.hash_term(o, *bnode, &hashes),
  695|      0|                            self.hash_graph_name(g, *bnode, &hashes),
  696|      0|                        ));
  697|      0|                    }
  698|      0|                    to_hash.sort_unstable();
  699|      0|                    let hash = Self::hash_tuple((&to_hash, hashes[bnode]));
  700|      0|                    to_hash.clear();
  701|      0|                    if hash == hashes[bnode] {
  702|      0|                        to_do.insert(*bnode, false);
  703|      0|                    } else {
  704|      0|                        new_hashes.insert(*bnode, hash);
  705|      0|                    }
  706|      0|                    hash
  707|       |                } else {
  708|      0|                    hashes[bnode]
  709|       |                };
  710|      0|                partition.entry(hash).or_default().push(*bnode);
  711|       |            }
  712|  4.25k|            hashes = new_hashes;
  713|       |        }
  714|  4.25k|        let mut partition: Vec<_> = partition.into_iter().collect();
  715|  4.25k|        partition.sort_unstable_by(|(h1, b1), (h2, b2)| (b1.len(), h1).cmp(&(b2.len(), h2)));
  716|  4.25k|        (hashes, partition)
  717|  4.25k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset4iter:
  169|  2.12k|    pub fn iter(&self) -> Iter<'_> {
  170|  2.12k|        let iter = self.spog.iter();
  171|  2.12k|        Iter {
  172|  2.12k|            dataset: self,
  173|  2.12k|            inner: iter,
  174|  2.12k|        }
  175|  2.12k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset3new:
  109|  4.25k|    pub fn new() -> Self {
  110|  4.25k|        Self::default()
  111|  4.25k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset21quads_per_blank_nodes:
  620|  4.25k|    fn quads_per_blank_nodes(&self) -> QuadsPerBlankNode {
  621|  4.25k|        let mut map: HashMap<_, Vec<_>> = HashMap::new();
  622|  5.84k|        for quad in &self.spog {
  623|  1.59k|            if let InternedSubject::BlankNode(bnode) = &quad.0 {
  624|      0|                map.entry(*bnode).or_default().push(quad.clone());
  625|  1.59k|            }
  626|       |            #[cfg(feature = "rdf-star")]
  627|  1.59k|            if let InternedSubject::Triple(t) = &quad.0 {
  628|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  629|  1.59k|            }
  630|  1.59k|            if let InternedTerm::BlankNode(bnode) = &quad.2 {
  631|      0|                map.entry(*bnode).or_default().push(quad.clone());
  632|  1.59k|            }
  633|       |            #[cfg(feature = "rdf-star")]
  634|  1.59k|            if let InternedTerm::Triple(t) = &quad.2 {
  635|      0|                Self::add_quad_with_quoted_triple_to_quad_per_blank_nodes_map(quad, t, &mut map);
  636|  1.59k|            }
  637|  1.59k|            if let InternedGraphName::BlankNode(bnode) = &quad.3 {
  638|      0|                map.entry(*bnode).or_default().push(quad.clone());
  639|  1.59k|            }
  640|       |        }
  641|  4.25k|        map
  642|  4.25k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset11distinguish:
  809|  4.25k|    fn distinguish(
  810|  4.25k|        &self,
  811|  4.25k|        hash: HashMap<InternedBlankNode, u64>,
  812|  4.25k|        partition: &[(u64, Vec<InternedBlankNode>)],
  813|  4.25k|        quads_per_blank_node: &QuadsPerBlankNode,
  814|  4.25k|    ) -> HashMap<InternedBlankNode, u64> {
  815|  4.25k|        let b_prime = partition.iter().map(|(_, b)| b).find(|b| b.len() > 1);
  816|  4.25k|        if let Some(b_prime) = b_prime {
  817|      0|            b_prime
  818|      0|                .iter()
  819|      0|                .map(|b| {
  820|       |                    let mut hash_prime = hash.clone();
  821|       |                    hash_prime.insert(*b, Self::hash_tuple((hash_prime[b], 22)));
  822|       |                    let (hash_prime_prime, partition_prime) =
  823|       |                        self.hash_bnodes(hash_prime, quads_per_blank_node);
  824|       |                    self.distinguish(hash_prime_prime, &partition_prime, quads_per_blank_node)
  825|      0|                })
  826|      0|                .reduce(|a, b| {
  827|       |                    let mut a_hashes = a.values().collect::<Vec<_>>();
  828|       |                    a_hashes.sort();
  829|       |                    let mut b_hashes = a.values().collect::<Vec<_>>();
  830|       |                    b_hashes.sort();
  831|       |                    if a_hashes <= b_hashes {
  832|       |                        a
  833|       |                    } else {
  834|       |                        b
  835|       |                    }
  836|      0|                })
  837|      0|                .unwrap_or_default()
  838|       |        } else {
  839|  4.25k|            hash
  840|       |        }
  841|  4.25k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset11encode_quad:
  420|  1.59k|    fn encode_quad(
  421|  1.59k|        &mut self,
  422|  1.59k|        quad: QuadRef<'_>,
  423|  1.59k|    ) -> (
  424|  1.59k|        InternedSubject,
  425|  1.59k|        InternedNamedNode,
  426|  1.59k|        InternedTerm,
  427|  1.59k|        InternedGraphName,
  428|  1.59k|    ) {
  429|  1.59k|        (
  430|  1.59k|            InternedSubject::encoded_into(quad.subject, &mut self.interner),
  431|  1.59k|            InternedNamedNode::encoded_into(quad.predicate, &mut self.interner),
  432|  1.59k|            InternedTerm::encoded_into(quad.object, &mut self.interner),
  433|  1.59k|            InternedGraphName::encoded_into(quad.graph_name, &mut self.interner),
  434|  1.59k|        )
  435|  1.59k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset14insert_encoded:
  365|  3.18k|    fn insert_encoded(
  366|  3.18k|        &mut self,
  367|  3.18k|        quad: (
  368|  3.18k|            InternedSubject,
  369|  3.18k|            InternedNamedNode,
  370|  3.18k|            InternedTerm,
  371|  3.18k|            InternedGraphName,
  372|  3.18k|        ),
  373|  3.18k|    ) -> bool {
  374|  3.18k|        let (s, p, o, g) = quad;
  375|  3.18k|        self.gspo.insert((g.clone(), s.clone(), p, o.clone()));
  376|  3.18k|        self.gpos.insert((g.clone(), p, o.clone(), s.clone()));
  377|  3.18k|        self.gosp.insert((g.clone(), o.clone(), s.clone(), p));
  378|  3.18k|        self.spog.insert((s.clone(), p, o.clone(), g.clone()));
  379|  3.18k|        self.posg.insert((p, o.clone(), s.clone(), g.clone()));
  380|  3.18k|        self.ospg.insert((o, s, p, g))
  381|  3.18k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset12encoded_quad:
  437|    796|    fn encoded_quad(
  438|    796|        &self,
  439|    796|        quad: QuadRef<'_>,
  440|    796|    ) -> Option<(
  441|    796|        InternedSubject,
  442|    796|        InternedNamedNode,
  443|    796|        InternedTerm,
  444|    796|        InternedGraphName,
  445|    796|    )> {
  446|    796|        Some((
  447|    796|            self.encoded_subject(quad.subject)?,
  448|    796|            self.encoded_named_node(quad.predicate)?,
  449|    796|            self.encoded_term(quad.object)?,
  450|    796|            self.encoded_graph_name(quad.graph_name)?,
  451|       |        ))
  452|    796|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset5clear:
  411|  4.25k|    pub fn clear(&mut self) {
  412|  4.25k|        self.gspo.clear();
  413|  4.25k|        self.gpos.clear();
  414|  4.25k|        self.gosp.clear();
  415|  4.25k|        self.spog.clear();
  416|  4.25k|        self.posg.clear();
  417|  4.25k|        self.ospg.clear();
  418|  4.25k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB2_7Dataset15map_blank_nodes:
  844|  4.25k|    fn map_blank_nodes(
  845|  4.25k|        &mut self,
  846|  4.25k|        bnode_mapping: &HashMap<InternedBlankNode, BlankNode>,
  847|  4.25k|    ) -> Vec<(
  848|  4.25k|        InternedSubject,
  849|  4.25k|        InternedNamedNode,
  850|  4.25k|        InternedTerm,
  851|  4.25k|        InternedGraphName,
  852|  4.25k|    )> {
  853|  4.25k|        let old_quads: Vec<_> = self.spog.iter().cloned().collect();
  854|  4.25k|        old_quads
  855|  4.25k|            .into_iter()
  856|  4.25k|            .map(|(s, p, o, g)| {
  857|       |                (
  858|       |                    match s {
  859|       |                        InternedSubject::NamedNode(_) => s,
  860|       |                        InternedSubject::BlankNode(bnode) => {
  861|       |                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|       |                                bnode_mapping[&bnode].as_ref(),
  863|       |                                &mut self.interner,
  864|       |                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|       |                        InternedSubject::Triple(triple) => {
  868|       |                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|       |                                &mut self.interner,
  871|       |                            )))
  872|       |                        }
  873|       |                    },
  874|       |                    p,
  875|       |                    match o {
  876|       |                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|       |                        InternedTerm::BlankNode(bnode) => {
  878|       |                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|       |                                bnode_mapping[&bnode].as_ref(),
  880|       |                                &mut self.interner,
  881|       |                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|       |                        InternedTerm::Triple(triple) => {
  885|       |                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|       |                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|       |                                &mut self.interner,
  888|       |                            )))
  889|       |                        }
  890|       |                    },
  891|       |                    match g {
  892|       |                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|       |                        InternedGraphName::BlankNode(bnode) => {
  894|       |                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|       |                                bnode_mapping[&bnode].as_ref(),
  896|       |                                &mut self.interner,
  897|       |                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  4.25k|            })
  902|  4.25k|            .collect()
  903|  4.25k|    }
_RINvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB3_7Dataset18encoded_graph_nameNtNtB5_6triple12GraphNameRefEB5_:
  472|    796|    pub(super) fn encoded_graph_name<'a>(
  473|    796|        &self,
  474|    796|        graph_name: impl Into<GraphNameRef<'a>>,
  475|    796|    ) -> Option<InternedGraphName> {
  476|    796|        InternedGraphName::encoded_from(graph_name.into(), &self.interner)
  477|    796|    }
_RNCNvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB4_7Dataset15map_blank_nodes0B6_:
  856|  1.59k|            .map(|(s, p, o, g)| {
  857|  1.59k|                (
  858|  1.59k|                    match s {
  859|  1.59k|                        InternedSubject::NamedNode(_) => s,
  860|      0|                        InternedSubject::BlankNode(bnode) => {
  861|      0|                            InternedSubject::BlankNode(InternedBlankNode::encoded_into(
  862|      0|                                bnode_mapping[&bnode].as_ref(),
  863|      0|                                &mut self.interner,
  864|      0|                            ))
  865|       |                        }
  866|       |                        #[cfg(feature = "rdf-star")]
  867|      0|                        InternedSubject::Triple(triple) => {
  868|      0|                            InternedSubject::Triple(Box::new(InternedTriple::encoded_into(
  869|      0|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  870|      0|                                &mut self.interner,
  871|      0|                            )))
  872|       |                        }
  873|       |                    },
  874|  1.59k|                    p,
  875|  1.59k|                    match o {
  876|  1.59k|                        InternedTerm::NamedNode(_) | InternedTerm::Literal(_) => o,
  877|      0|                        InternedTerm::BlankNode(bnode) => {
  878|      0|                            InternedTerm::BlankNode(InternedBlankNode::encoded_into(
  879|      0|                                bnode_mapping[&bnode].as_ref(),
  880|      0|                                &mut self.interner,
  881|      0|                            ))
  882|       |                        }
  883|       |                        #[cfg(feature = "rdf-star")]
  884|      0|                        InternedTerm::Triple(triple) => {
  885|      0|                            InternedTerm::Triple(Box::new(InternedTriple::encoded_into(
  886|      0|                                self.map_triple_blank_nodes(&triple, bnode_mapping).as_ref(),
  887|      0|                                &mut self.interner,
  888|      0|                            )))
  889|       |                        }
  890|       |                    },
  891|  1.59k|                    match g {
  892|  1.59k|                        InternedGraphName::NamedNode(_) | InternedGraphName::DefaultGraph => g,
  893|      0|                        InternedGraphName::BlankNode(bnode) => {
  894|      0|                            InternedGraphName::BlankNode(InternedBlankNode::encoded_into(
  895|      0|                                bnode_mapping[&bnode].as_ref(),
  896|      0|                                &mut self.interner,
  897|      0|                            ))
  898|       |                        }
  899|       |                    },
  900|       |                )
  901|  1.59k|            })
_RNCNvXsg_NtCshJ9d6mhVUZV_5oxrdf7datasetNtB7_4IterNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0B9_:
 1554|    796|            .map(|(s, p, o, g)| self.dataset.decode_spog((s, p, o, g)))
_RINvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB3_7Dataset18encoded_named_nodeNtNtB5_10named_node12NamedNodeRefEB5_:
  454|    796|    pub(super) fn encoded_named_node<'a>(
  455|    796|        &self,
  456|    796|        node: impl Into<NamedNodeRef<'a>>,
  457|    796|    ) -> Option<InternedNamedNode> {
  458|    796|        InternedNamedNode::encoded_from(node.into(), &self.interner)
  459|    796|    }
_RINvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB3_7Dataset15encoded_subjectNtNtB5_6triple10SubjectRefEB5_:
  461|    796|    pub(super) fn encoded_subject<'a>(
  462|    796|        &self,
  463|    796|        node: impl Into<SubjectRef<'a>>,
  464|    796|    ) -> Option<InternedSubject> {
  465|    796|        InternedSubject::encoded_from(node.into(), &self.interner)
  466|    796|    }
_RINvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB3_7Dataset12encoded_termNtNtB5_6triple7TermRefEB5_:
  468|    796|    pub(super) fn encoded_term<'a>(&self, term: impl Into<TermRef<'a>>) -> Option<InternedTerm> {
  469|    796|        InternedTerm::encoded_from(term.into(), &self.interner)
  470|    796|    }
_RINvMNtCshJ9d6mhVUZV_5oxrdf7datasetNtB3_7Dataset8containsNtNtB5_6triple7QuadRefEB5_:
  341|    796|    pub fn contains<'a>(&self, quad: impl Into<QuadRef<'a>>) -> bool {
  342|    796|        if let Some(q) = self.encoded_quad(quad.into()) {
  343|    796|            self.spog.contains(&q)
  344|       |        } else {
  345|      0|            false
  346|       |        }
  347|    796|    }

_RNvMNtCshJ9d6mhVUZV_5oxrdf9interningNtB2_8Interner4hash:
   53|  10.6k|    fn hash(&self, value: &str) -> u64 {
   54|  10.6k|        let mut hasher = self.hasher.build_hasher();
   55|  10.6k|        hasher.write(value.as_bytes());
   56|  10.6k|        let hash = hasher.finish();
   57|  10.6k|        if hash == u64::MAX {
   58|      0|            0
   59|       |        } else {
   60|  10.6k|            hash
   61|       |        }
   62|  10.6k|    }
_RNvMs5_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_12InternedTerm11decode_from:
  436|    796|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> TermRef<'a> {
  437|    796|        match self {
  438|    279|            Self::NamedNode(term) => TermRef::NamedNode(term.decode_from(interner)),
  439|      0|            Self::BlankNode(term) => TermRef::BlankNode(term.decode_from(interner)),
  440|    517|            Self::Literal(term) => TermRef::Literal(term.decode_from(interner)),
  441|       |            #[cfg(feature = "rdf-star")]
  442|      0|            Self::Triple(triple) => TermRef::Triple(&interner.triples[triple.as_ref()]),
  443|       |        }
  444|    796|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf9interningNtB2_8Interner13get_or_intern:
   18|  7.12k|    fn get_or_intern(&mut self, value: &str) -> Key {
   19|  7.12k|        let mut hash = self.hash(value);
   20|  7.12k|        loop {
   21|  7.12k|            match self.string_for_hash.entry(hash) {
   22|  2.38k|                Entry::Vacant(e) => {
   23|  2.38k|                    e.insert(value.into());
   24|  2.38k|                    return Key(hash);
   25|       |                }
   26|  4.74k|                Entry::Occupied(e) => loop {
   27|  4.74k|                    if e.get() == value {
   28|  4.74k|                        return Key(hash);
   29|      0|                    } else if hash == u64::MAX - 1 {
   30|      0|                        hash = 0;
   31|      0|                    } else {
   32|      0|                        hash += 1;
   33|      0|                    }
   34|       |                },
   35|       |            }
   36|       |        }
   37|  7.12k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf9interningNtB2_8Interner3get:
   39|  3.56k|    fn get(&self, value: &str) -> Option<Key> {
   40|  3.56k|        let mut hash = self.hash(value);
   41|       |        loop {
   42|  3.56k|            let v = self.string_for_hash.get(&hash)?;
   43|  3.56k|            if v == value {
   44|  3.56k|                return Some(Key(hash));
   45|      0|            } else if hash == u64::MAX - 1 {
   46|      0|                hash = 0;
   47|      0|            } else {
   48|      0|                hash += 1;
   49|      0|            }
   50|       |        }
   51|  3.56k|    }
_RNvMs5_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_12InternedTerm12encoded_from:
  419|    796|    pub fn encoded_from(term: TermRef<'_>, interner: &Interner) -> Option<Self> {
  420|    796|        Some(match term {
  421|    279|            TermRef::NamedNode(term) => {
  422|    279|                Self::NamedNode(InternedNamedNode::encoded_from(term, interner)?)
  423|       |            }
  424|      0|            TermRef::BlankNode(term) => {
  425|      0|                Self::BlankNode(InternedBlankNode::encoded_from(term, interner)?)
  426|       |            }
  427|    517|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_from(term, interner)?),
  428|       |            #[cfg(feature = "rdf-star")]
  429|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  430|      0|                triple.as_ref(),
  431|      0|                interner,
  432|      0|            )?)),
  433|       |        })
  434|    796|    }
_RNvXs7_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_21IdentityHasherBuilderNtNtCs9nhK3FOW46N_4core4hash11BuildHasher12build_hasher:
  513|  15.8k|    fn build_hasher(&self) -> Self::Hasher {
  514|  15.8k|        Self::Hasher::default()
  515|  15.8k|    }
_RNvXsX_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_15InternedSubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  267|  17.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs1c_NtCshJ9d6mhVUZV_5oxrdf9interningNtB6_12InternedTermNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB8_:
  392|  15.0k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs4_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_17InternedGraphName11decode_from:
  367|    796|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> GraphNameRef<'a> {
  368|    796|        match self {
  369|    125|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  370|    671|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.decode_from(interner)),
  371|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.decode_from(interner)),
  372|       |        }
  373|    796|    }
_RNvMs5_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_12InternedTerm12encoded_into:
  402|  1.59k|    pub fn encoded_into(term: TermRef<'_>, interner: &mut Interner) -> Self {
  403|  1.59k|        match term {
  404|    558|            TermRef::NamedNode(term) => {
  405|    558|                Self::NamedNode(InternedNamedNode::encoded_into(term, interner))
  406|       |            }
  407|      0|            TermRef::BlankNode(term) => {
  408|      0|                Self::BlankNode(InternedBlankNode::encoded_into(term, interner))
  409|       |            }
  410|  1.03k|            TermRef::Literal(term) => Self::Literal(InternedLiteral::encoded_into(term, interner)),
  411|       |            #[cfg(feature = "rdf-star")]
  412|      0|            TermRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  413|      0|                triple.as_ref(),
  414|      0|                interner,
  415|      0|            ))),
  416|       |        }
  417|  1.59k|    }
_RNvXsq_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
   86|  51.8k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXst_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_17InternedNamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   86|  40.0k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXs1f_NtCshJ9d6mhVUZV_5oxrdf9interningNtB6_12InternedTermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  392|  17.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsK_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_15InternedLiteralNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
  174|  7.28k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsN_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_15InternedLiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  174|  11.3k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_17InternedGraphName12encoded_from:
  355|    796|    pub fn encoded_from(node: GraphNameRef<'_>, interner: &Interner) -> Option<Self> {
  356|    796|        Some(match node {
  357|    125|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  358|    671|            GraphNameRef::NamedNode(node) => {
  359|    671|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  360|       |            }
  361|      0|            GraphNameRef::BlankNode(node) => {
  362|      0|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  363|       |            }
  364|       |        })
  365|    796|    }
_RNvMs2_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_15InternedLiteral11decode_from:
  228|    517|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> LiteralRef<'a> {
  229|    517|        match self {
  230|     15|            Self::String { value_id } => {
  231|     15|                LiteralRef::new_simple_literal(interner.resolve(*value_id))
  232|       |            }
  233|       |            Self::LanguageTaggedString {
  234|    162|                value_id,
  235|    162|                language_id,
  236|    162|            } => LiteralRef::new_language_tagged_literal_unchecked(
  237|    162|                interner.resolve(*value_id),
  238|    162|                interner.resolve(*language_id),
  239|    162|            ),
  240|    340|            Self::TypedLiteral { value_id, datatype } => LiteralRef::new_typed_literal(
  241|    340|                interner.resolve(*value_id),
  242|    340|                datatype.decode_from(interner),
  243|    340|            ),
  244|       |        }
  245|    517|    }
_RNvMs3_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_15InternedSubject11decode_from:
  308|    796|    pub fn decode_from<'a>(&self, interner: &'a Interner) -> SubjectRef<'a> {
  309|    796|        match self {
  310|    796|            Self::NamedNode(node) => SubjectRef::NamedNode(node.decode_from(interner)),
  311|      0|            Self::BlankNode(node) => SubjectRef::BlankNode(node.decode_from(interner)),
  312|       |            #[cfg(feature = "rdf-star")]
  313|      0|            Self::Triple(triple) => SubjectRef::Triple(&interner.triples[triple.as_ref()]),
  314|       |        }
  315|    796|    }
_RNvMs4_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_17InternedGraphName12encoded_into:
  343|  1.59k|    pub fn encoded_into(node: GraphNameRef<'_>, interner: &mut Interner) -> Self {
  344|  1.59k|        match node {
  345|    250|            GraphNameRef::DefaultGraph => Self::DefaultGraph,
  346|  1.34k|            GraphNameRef::NamedNode(node) => {
  347|  1.34k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  348|       |            }
  349|      0|            GraphNameRef::BlankNode(node) => {
  350|      0|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  351|       |            }
  352|       |        }
  353|  1.59k|    }
_RNvMs0_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_17InternedNamedNode12encoded_from:
   98|  2.88k|    pub fn encoded_from(named_node: NamedNodeRef<'_>, interner: &Interner) -> Option<Self> {
   99|  2.88k|        Some(Self {
  100|  2.88k|            id: interner.get(named_node.as_str())?,
  101|       |        })
  102|  2.88k|    }
_RNvMs0_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_17InternedNamedNode11decode_from:
  104|  2.88k|    pub fn decode_from(self, interner: &Interner) -> NamedNodeRef<'_> {
  105|  2.88k|        NamedNodeRef::new_unchecked(interner.resolve(self.id))
  106|  2.88k|    }
_RNvXs8_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_14IdentityHasherNtNtCs9nhK3FOW46N_4core4hash6Hasher9write_u64:
  532|  15.8k|    fn write_u64(&mut self, i: u64) {
  533|  15.8k|        self.value = i
  534|  15.8k|    }
_RNvMs2_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_15InternedLiteral12encoded_from:
  209|    517|    pub fn encoded_from(literal: LiteralRef<'_>, interner: &Interner) -> Option<Self> {
  210|    517|        let value_id = interner.get(literal.value())?;
  211|    517|        Some(if literal.is_plain() {
  212|    177|            if let Some(language) = literal.language() {
  213|       |                Self::LanguageTaggedString {
  214|    162|                    value_id,
  215|    162|                    language_id: interner.get(language)?,
  216|       |                }
  217|       |            } else {
  218|     15|                Self::String { value_id }
  219|       |            }
  220|       |        } else {
  221|       |            Self::TypedLiteral {
  222|    340|                value_id,
  223|    340|                datatype: InternedNamedNode::encoded_from(literal.datatype(), interner)?,
  224|       |            }
  225|       |        })
  226|    517|    }
_RNvMs3_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_15InternedSubject12encoded_from:
  292|    796|    pub fn encoded_from(node: SubjectRef<'_>, interner: &Interner) -> Option<Self> {
  293|    796|        Some(match node {
  294|    796|            SubjectRef::NamedNode(node) => {
  295|    796|                Self::NamedNode(InternedNamedNode::encoded_from(node, interner)?)
  296|       |            }
  297|      0|            SubjectRef::BlankNode(node) => {
  298|      0|                Self::BlankNode(InternedBlankNode::encoded_from(node, interner)?)
  299|       |            }
  300|       |            #[cfg(feature = "rdf-star")]
  301|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_from(
  302|      0|                triple.as_ref(),
  303|      0|                interner,
  304|      0|            )?)),
  305|       |        })
  306|    796|    }
_RNvXsa_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_8InternerNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
    7|  4.25k|#[derive(Debug, Default, Clone)]
_RNvMNtCshJ9d6mhVUZV_5oxrdf9interningNtB2_8Interner7resolve:
   64|  3.56k|    fn resolve(&self, key: Key) -> &str {
   65|  3.56k|        &self.string_for_hash[&key.0]
   66|  3.56k|    }
_RNvXsg_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_3KeyNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
   69|  57.8k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs2_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_15InternedLiteral12encoded_into:
  190|  1.03k|    pub fn encoded_into(literal: LiteralRef<'_>, interner: &mut Interner) -> Self {
  191|  1.03k|        let value_id = interner.get_or_intern(literal.value());
  192|  1.03k|        if literal.is_plain() {
  193|    354|            if let Some(language) = literal.language() {
  194|    324|                Self::LanguageTaggedString {
  195|    324|                    value_id,
  196|    324|                    language_id: interner.get_or_intern(language),
  197|    324|                }
  198|       |            } else {
  199|     30|                Self::String { value_id }
  200|       |            }
  201|       |        } else {
  202|    680|            Self::TypedLiteral {
  203|    680|                value_id,
  204|    680|                datatype: InternedNamedNode::encoded_into(literal.datatype(), interner),
  205|    680|            }
  206|       |        }
  207|  1.03k|    }
_RNvMs3_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_15InternedSubject12encoded_into:
  276|  1.59k|    pub fn encoded_into(node: SubjectRef<'_>, interner: &mut Interner) -> Self {
  277|  1.59k|        match node {
  278|  1.59k|            SubjectRef::NamedNode(node) => {
  279|  1.59k|                Self::NamedNode(InternedNamedNode::encoded_into(node, interner))
  280|       |            }
  281|      0|            SubjectRef::BlankNode(node) => {
  282|      0|                Self::BlankNode(InternedBlankNode::encoded_into(node, interner))
  283|       |            }
  284|       |            #[cfg(feature = "rdf-star")]
  285|      0|            SubjectRef::Triple(triple) => Self::Triple(Box::new(InternedTriple::encoded_into(
  286|      0|                triple.as_ref(),
  287|      0|                interner,
  288|      0|            ))),
  289|       |        }
  290|  1.59k|    }
_RNvXs1q_NtCshJ9d6mhVUZV_5oxrdf9interningNtB6_21IdentityHasherBuilderNtNtCs9nhK3FOW46N_4core7default7Default7defaultB8_:
  507|  4.25k|#[derive(Default, Clone)]
_RNvXs1s_NtCshJ9d6mhVUZV_5oxrdf9interningNtB6_14IdentityHasherNtNtCs9nhK3FOW46N_4core7default7Default7defaultB8_:
  518|  15.8k|#[derive(Default)]
_RNvXs13_NtCshJ9d6mhVUZV_5oxrdf9interningNtB6_17InternedGraphNameNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB8_:
  335|  22.2k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs16_NtCshJ9d6mhVUZV_5oxrdf9interningNtB6_17InternedGraphNameNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  335|  17.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsU_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_15InternedSubjectNtNtCs9nhK3FOW46N_4core3cmp3Ord3cmpB7_:
  267|  15.9k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs0_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_17InternedNamedNode12encoded_into:
   92|  5.76k|    pub fn encoded_into(named_node: NamedNodeRef<'_>, interner: &mut Interner) -> Self {
   93|  5.76k|        Self {
   94|  5.76k|            id: interner.get_or_intern(named_node.as_str()),
   95|  5.76k|        }
   96|  5.76k|    }
_RNvXs8_NtCshJ9d6mhVUZV_5oxrdf9interningNtB5_14IdentityHasherNtNtCs9nhK3FOW46N_4core4hash6Hasher6finish:
  524|  15.8k|    fn finish(&self) -> u64 {
  525|  15.8k|        self.value
  526|  15.8k|    }

_RNvMNtCshJ9d6mhVUZV_5oxrdf7literalNtB2_7Literal6as_refCsh41WZG82U3t_18sparql_update_eval:
  129|  1.03k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  1.03k|        LiteralRef(match &self.0 {
  131|     30|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|    324|            LiteralContent::LanguageTaggedString { value, language } => {
  133|    324|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|    680|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|    680|                value,
  137|    680|                datatype: datatype.as_ref(),
  138|    680|            },
  139|       |        })
  140|  1.03k|    }
_RNvXsM_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
   37|  2.63k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXsF_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
   34|  2.63k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtCshJ9d6mhVUZV_5oxrdf7literalNtB2_7Literal6as_refCsd92XLxb96zi_8oxigraph:
  129|  8.86k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  8.86k|        LiteralRef(match &self.0 {
  131|    639|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|  2.04k|            LiteralContent::LanguageTaggedString { value, language } => {
  133|  2.04k|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  6.18k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  6.18k|                value,
  137|  6.18k|                datatype: datatype.as_ref(),
  138|  6.18k|            },
  139|       |        })
  140|  8.86k|    }
_RNvXsM_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
   37|  4.15k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMst_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_10LiteralRef5valueCsd92XLxb96zi_8oxigraph:
  488|  7.77k|    pub const fn value(self) -> &'a str {
  489|  7.77k|        match self.0 {
  490|    555|            LiteralRefContent::String(value)
  491|  1.94k|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  7.77k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  7.77k|        }
  494|  7.77k|    }
_RNvMst_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_10LiteralRef8languageCsd92XLxb96zi_8oxigraph:
  501|  1.94k|    pub const fn language(self) -> Option<&'a str> {
  502|  1.94k|        match self.0 {
  503|  1.94k|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|      0|            _ => None,
  505|       |        }
  506|  1.94k|    }
_RNvXsu_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_10LiteralRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsd92XLxb96zi_8oxigraph:
  565|  1.09k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  1.09k|        match self.0 {
  567|     84|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|    104|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|    104|                print_quoted_str(value, f)?;
  570|    104|                write!(f, "@{language}")
  571|       |            }
  572|    904|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|    904|                print_quoted_str(value, f)?;
  574|    904|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  1.09k|    }
_RNvMst_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_10LiteralRef8datatypeCsd92XLxb96zi_8oxigraph:
  513|  7.77k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  7.77k|        match self.0 {
  515|    555|            LiteralRefContent::String(_) => xsd::STRING,
  516|  1.94k|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  5.28k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  7.77k|    }
_RNvXsh_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_7LiteralINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes7decimal7DecimalE4fromCsd92XLxb96zi_8oxigraph:
  330|    362|    fn from(value: Decimal) -> Self {
  331|    362|        Self::new_typed_literal(value.to_string(), xsd::DECIMAL)
  332|    362|    }
_RNvXs_NtCshJ9d6mhVUZV_5oxrdf7literalNtB4_7LiteralNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsd92XLxb96zi_8oxigraph:
  157|  1.09k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  158|  1.09k|        self.as_ref().fmt(f)
  159|  1.09k|    }
_RNvXsf_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_7LiteralINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes6double6DoubleE4fromCsd92XLxb96zi_8oxigraph:
  314|     30|    fn from(value: Double) -> Self {
  315|     30|        Self::new_typed_literal(value.to_string(), xsd::DOUBLE)
  316|     30|    }
_RNvXsF_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
   34|  4.15k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsd_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_7LiteralINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes7boolean7BooleanE4fromCsd92XLxb96zi_8oxigraph:
  298|    144|    fn from(value: Boolean) -> Self {
  299|    144|        Self::new_typed_literal(value.to_string(), xsd::BOOLEAN)
  300|    144|    }
_RNvXsg_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_7LiteralINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCsaP05r1vbY5r_12oxsdatatypes7integer7IntegerE4fromCsd92XLxb96zi_8oxigraph:
  322|    170|    fn from(value: Integer) -> Self {
  323|    170|        Self::new_typed_literal(value.to_string(), xsd::INTEGER)
  324|    170|    }
_RINvMNtCshJ9d6mhVUZV_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtNtCsd92XLxb96zi_8oxigraph7storage12small_string11SmallStringB1n_EB1t_:
   85|    330|    pub fn new_language_tagged_literal_unchecked(
   86|    330|        value: impl Into<String>,
   87|    330|        language: impl Into<String>,
   88|    330|    ) -> Self {
   89|    330|        Self(LiteralContent::LanguageTaggedString {
   90|    330|            value: value.into(),
   91|    330|            language: language.into(),
   92|    330|        })
   93|    330|    }
_RINvMNtCshJ9d6mhVUZV_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtNtCsd92XLxb96zi_8oxigraph7storage12small_string11SmallStringEB1a_:
   47|     30|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|     30|        Self(LiteralContent::String(value.into()))
   49|     30|    }
_RINvMNtCshJ9d6mhVUZV_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringNtNtB5_10named_node12NamedNodeRefECsd92XLxb96zi_8oxigraph:
   53|    706|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|    706|        let value = value.into();
   55|    706|        let datatype = datatype.into();
   56|    706|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|    706|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|    706|    }
_RINvXsN_NtCshJ9d6mhVUZV_5oxrdf7literalNtB6_14LiteralContentNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsj4YExd6TrWR_7sparopt:
   37|  2.66k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvXsG_NtCshJ9d6mhVUZV_5oxrdf7literalNtB6_7LiteralNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsj4YExd6TrWR_7sparopt:
   34|  2.66k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsD_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsj4YExd6TrWR_7sparopt:
   34|      2|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtCshJ9d6mhVUZV_5oxrdf7literalNtB2_7Literal5valueCsj4YExd6TrWR_7sparopt:
   97|  21.7k|    pub fn value(&self) -> &str {
   98|  21.7k|        self.as_ref().value()
   99|  21.7k|    }
_RNvXsM_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsj4YExd6TrWR_7sparopt:
   37|  6.99k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvXs3_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_7LiteralINtNtCs9nhK3FOW46N_4core7convert4FrombE4fromCsj4YExd6TrWR_7sparopt:
  185|  23.0k|    fn from(value: bool) -> Self {
  186|  23.0k|        Self(LiteralContent::TypedLiteral {
  187|  23.0k|            value: value.to_string(),
  188|  23.0k|            datatype: xsd::BOOLEAN.into(),
  189|  23.0k|        })
  190|  23.0k|    }
_RNvMst_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_10LiteralRef5valueCsj4YExd6TrWR_7sparopt:
  488|  21.7k|    pub const fn value(self) -> &'a str {
  489|  21.7k|        match self.0 {
  490|      3|            LiteralRefContent::String(value)
  491|      0|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  21.7k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  21.7k|        }
  494|  21.7k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7literalNtB2_7Literal8datatypeCsj4YExd6TrWR_7sparopt:
  115|  21.8k|    pub fn datatype(&self) -> NamedNodeRef<'_> {
  116|  21.8k|        self.as_ref().datatype()
  117|  21.8k|    }
_RNvXsI_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsj4YExd6TrWR_7sparopt:
   37|      2|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RNvMst_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_10LiteralRef8datatypeCsj4YExd6TrWR_7sparopt:
  513|  21.8k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  21.8k|        match self.0 {
  515|      3|            LiteralRefContent::String(_) => xsd::STRING,
  516|     16|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  21.8k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  21.8k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf7literalNtB2_7Literal6as_refCsj4YExd6TrWR_7sparopt:
  129|  43.6k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  43.6k|        LiteralRef(match &self.0 {
  131|      6|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|     16|            LiteralContent::LanguageTaggedString { value, language } => {
  133|     16|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  43.5k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  43.5k|                value,
  137|  43.5k|                datatype: datatype.as_ref(),
  138|  43.5k|            },
  139|       |        })
  140|  43.6k|    }
_RNvXsF_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsj4YExd6TrWR_7sparopt:
   34|  6.99k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsu_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_10LiteralRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCskGc5T8eVihK_9spargebra:
  565|  3.00k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  566|  3.00k|        match self.0 {
  567|    139|            LiteralRefContent::String(value) => print_quoted_str(value, f),
  568|    680|            LiteralRefContent::LanguageTaggedString { value, language } => {
  569|    680|                print_quoted_str(value, f)?;
  570|    680|                write!(f, "@{language}")
  571|       |            }
  572|  2.18k|            LiteralRefContent::TypedLiteral { value, datatype } => {
  573|  2.18k|                print_quoted_str(value, f)?;
  574|  2.18k|                write!(f, "^^{datatype}")
  575|       |            }
  576|       |        }
  577|  3.00k|    }
_RNvXs_NtCshJ9d6mhVUZV_5oxrdf7literalNtB4_7LiteralNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCskGc5T8eVihK_9spargebra:
  157|  3.00k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  158|  3.00k|        self.as_ref().fmt(f)
  159|  3.00k|    }
_RNvXsF_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_7LiteralNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCskGc5T8eVihK_9spargebra:
   34|  1.04k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtCshJ9d6mhVUZV_5oxrdf7literalNtB2_7Literal6as_refCskGc5T8eVihK_9spargebra:
  129|  3.00k|    pub fn as_ref(&self) -> LiteralRef<'_> {
  130|  3.00k|        LiteralRef(match &self.0 {
  131|    139|            LiteralContent::String(value) => LiteralRefContent::String(value),
  132|    680|            LiteralContent::LanguageTaggedString { value, language } => {
  133|    680|                LiteralRefContent::LanguageTaggedString { value, language }
  134|       |            }
  135|  2.18k|            LiteralContent::TypedLiteral { value, datatype } => LiteralRefContent::TypedLiteral {
  136|  2.18k|                value,
  137|  2.18k|                datatype: datatype.as_ref(),
  138|  2.18k|            },
  139|       |        })
  140|  3.00k|    }
_RNvXsM_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_14LiteralContentNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCskGc5T8eVihK_9spargebra:
   37|  1.04k|#[derive(PartialEq, Eq, Debug, Clone, Hash)]
_RINvMNtCshJ9d6mhVUZV_5oxrdf7literalNtB3_7Literal17new_typed_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringNtNtB5_10named_node9NamedNodeEB5_:
   53|    138|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|    138|        let value = value.into();
   55|    138|        let datatype = datatype.into();
   56|    138|        Self(if datatype == xsd::STRING {
   57|    138|            LiteralContent::String(value)
   58|       |        } else {
   59|      0|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|    138|    }
_RINvMst_NtCshJ9d6mhVUZV_5oxrdf7literalNtB6_10LiteralRef17new_typed_literalNtNtB8_10named_node12NamedNodeRefEB8_:
  465|    340|    pub fn new_typed_literal(value: &'a str, datatype: impl Into<NamedNodeRef<'a>>) -> Self {
  466|    340|        let datatype = datatype.into();
  467|    340|        LiteralRef(if datatype == xsd::STRING {
  468|      0|            LiteralRefContent::String(value)
  469|       |        } else {
  470|    340|            LiteralRefContent::TypedLiteral { value, datatype }
  471|       |        })
  472|    340|    }
_RINvMNtCshJ9d6mhVUZV_5oxrdf7literalNtB3_7Literal37new_language_tagged_literal_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringB1n_EB5_:
   85|  1.37k|    pub fn new_language_tagged_literal_unchecked(
   86|  1.37k|        value: impl Into<String>,
   87|  1.37k|        language: impl Into<String>,
   88|  1.37k|    ) -> Self {
   89|  1.37k|        Self(LiteralContent::LanguageTaggedString {
   90|  1.37k|            value: value.into(),
   91|  1.37k|            language: language.into(),
   92|  1.37k|        })
   93|  1.37k|    }
_RINvNtCshJ9d6mhVUZV_5oxrdf7literal16print_quoted_strNtNtCs9nhK3FOW46N_4core3fmt9FormatterEB4_:
  616|  4.09k|pub fn print_quoted_str(string: &str, f: &mut impl Write) -> fmt::Result {
  617|  4.09k|    f.write_char('"')?;
  618|  13.8k|    for c in string.chars() {
  619|  13.8k|        match c {
  620|      0|            '\u{08}' => f.write_str("\\b"),
  621|      0|            '\t' => f.write_str("\\t"),
  622|      0|            '\n' => f.write_str("\\n"),
  623|      0|            '\u{0C}' => f.write_str("\\f"),
  624|      0|            '\r' => f.write_str("\\r"),
  625|      0|            '"' => f.write_str("\\\""),
  626|      0|            '\\' => f.write_str("\\\\"),
  627|  13.8k|            '\0'..='\u{1F}' | '\u{7F}' => write!(f, "\\u{:04X}", u32::from(c)),
  628|  13.8k|            _ => f.write_char(c),
  629|      0|        }?;
  630|       |    }
  631|  4.09k|    f.write_char('"')
  632|  4.09k|}
_RINvMNtCshJ9d6mhVUZV_5oxrdf7literalNtB3_7Literal17new_typed_literalReNtNtB5_10named_node12NamedNodeRefEB5_:
   53|  3.50k|    pub fn new_typed_literal(value: impl Into<String>, datatype: impl Into<NamedNode>) -> Self {
   54|  3.50k|        let value = value.into();
   55|  3.50k|        let datatype = datatype.into();
   56|  3.50k|        Self(if datatype == xsd::STRING {
   57|      0|            LiteralContent::String(value)
   58|       |        } else {
   59|  3.50k|            LiteralContent::TypedLiteral { value, datatype }
   60|       |        })
   61|  3.50k|    }
_RINvMNtCshJ9d6mhVUZV_5oxrdf7literalNtB3_7Literal18new_simple_literalNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   47|    276|    pub fn new_simple_literal(value: impl Into<String>) -> Self {
   48|    276|        Self(LiteralContent::String(value.into()))
   49|    276|    }
_RNvMst_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_10LiteralRef8languageB7_:
  501|    531|    pub const fn language(self) -> Option<&'a str> {
  502|    531|        match self.0 {
  503|    486|            LiteralRefContent::LanguageTaggedString { language, .. } => Some(language),
  504|     45|            _ => None,
  505|       |        }
  506|    531|    }
_RNvMst_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_10LiteralRef8datatypeB7_:
  513|  1.02k|    pub const fn datatype(self) -> NamedNodeRef<'a> {
  514|  1.02k|        match self.0 {
  515|      0|            LiteralRefContent::String(_) => xsd::STRING,
  516|      0|            LiteralRefContent::LanguageTaggedString { .. } => rdf::LANG_STRING,
  517|  1.02k|            LiteralRefContent::TypedLiteral { datatype, .. } => datatype,
  518|       |        }
  519|  1.02k|    }
_RNvMst_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_10LiteralRef18new_simple_literalB7_:
  459|     15|    pub const fn new_simple_literal(value: &'a str) -> Self {
  460|     15|        LiteralRef(LiteralRefContent::String(value))
  461|     15|    }
_RNvMst_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_10LiteralRef8is_plainB7_:
  526|  1.55k|    pub const fn is_plain(self) -> bool {
  527|  1.02k|        matches!(
  528|  1.55k|            self.0,
  529|       |            LiteralRefContent::String(_) | LiteralRefContent::LanguageTaggedString { .. }
  530|       |        )
  531|  1.55k|    }
_RNvMst_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_10LiteralRef37new_language_tagged_literal_uncheckedB7_:
  482|    162|    pub const fn new_language_tagged_literal_unchecked(value: &'a str, language: &'a str) -> Self {
  483|    162|        LiteralRef(LiteralRefContent::LanguageTaggedString { value, language })
  484|    162|    }
_RNvMst_NtCshJ9d6mhVUZV_5oxrdf7literalNtB5_10LiteralRef5valueB7_:
  488|  1.55k|    pub const fn value(self) -> &'a str {
  489|  1.55k|        match self.0 {
  490|     45|            LiteralRefContent::String(value)
  491|    486|            | LiteralRefContent::LanguageTaggedString { value, .. }
  492|  1.55k|            | LiteralRefContent::TypedLiteral { value, .. } => value,
  493|  1.55k|        }
  494|  1.55k|    }

_RNvXsp_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
   17|  37.4k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsh41WZG82U3t_18sparql_update_eval:
   54|  5.76k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  5.76k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  5.76k|    }
_RNvMs4_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsh41WZG82U3t_18sparql_update_eval:
  128|  5.76k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  5.76k|        Self { iri }
  130|  5.76k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB2_9NamedNode6as_strCsd92XLxb96zi_8oxigraph:
   44|    706|    pub fn as_str(&self) -> &str {
   45|    706|        self.iri.as_str()
   46|    706|    }
_RNvXsp_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
   17|  34.8k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsd92XLxb96zi_8oxigraph:
   54|  95.3k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  95.3k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  95.3k|    }
_RNvXs5_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsd92XLxb96zi_8oxigraph:
  145|  8.32k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  8.32k|        write!(f, "<{}>", self.as_str())
  147|  8.32k|    }
_RNvMs4_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsd92XLxb96zi_8oxigraph:
  128|  95.3k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  95.3k|        Self { iri }
  130|  95.3k|    }
_RNvMs4_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCsd92XLxb96zi_8oxigraph:
  133|   162k|    pub const fn as_str(self) -> &'a str {
  134|   162k|        self.iri
  135|   162k|    }
_RNvXs9_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqCsd92XLxb96zi_8oxigraph:
  173|    706|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|    706|        self.as_str() == other.as_str()
  175|    706|    }
_RNvXs_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB4_9NamedNodeNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsd92XLxb96zi_8oxigraph:
   61|  7.42k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|  7.42k|        self.as_ref().fmt(f)
   63|  7.42k|    }
_RINvXsq_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB6_9NamedNodeNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsj4YExd6TrWR_7sparopt:
   17|  4.41k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMs4_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCsj4YExd6TrWR_7sparopt:
  128|  43.5k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  43.5k|        Self { iri }
  130|  43.5k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB2_9NamedNode6as_refCsj4YExd6TrWR_7sparopt:
   54|  43.5k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  43.5k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  43.5k|    }
_RNvXsl_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsj4YExd6TrWR_7sparopt:
   17|      1|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsu_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsj4YExd6TrWR_7sparopt:
  106|     35|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvXsp_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsj4YExd6TrWR_7sparopt:
   17|  48.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB4_9NamedNodeNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCskGc5T8eVihK_9spargebra:
   61|  48.2k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   62|  48.2k|        self.as_ref().fmt(f)
   63|  48.2k|    }
_RNvXs5_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCskGc5T8eVihK_9spargebra:
  145|  50.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  146|  50.4k|        write!(f, "<{}>", self.as_str())
  147|  50.4k|    }
_RNvXsp_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCskGc5T8eVihK_9spargebra:
   17|   130k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsg_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core7convert4FromINtCsbOXESBDtkxG_5oxiri3IriNtNtCsjOdcKtOMjJI_5alloc6string6StringEE4fromCskGc5T8eVihK_9spargebra:
  222|  44.1k|    fn from(iri: Iri<String>) -> Self {
  223|  44.1k|        Self {
  224|  44.1k|            iri: iri.into_inner(),
  225|  44.1k|        }
  226|  44.1k|    }
_RNvMs4_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedCskGc5T8eVihK_9spargebra:
  128|  50.4k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  50.4k|        Self { iri }
  130|  50.4k|    }
_RNvMs4_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strCskGc5T8eVihK_9spargebra:
  133|  50.4k|    pub const fn as_str(self) -> &'a str {
  134|  50.4k|        self.iri
  135|  50.4k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB2_9NamedNode6as_refCskGc5T8eVihK_9spargebra:
   54|  50.4k|    pub fn as_ref(&self) -> NamedNodeRef<'_> {
   55|  50.4k|        NamedNodeRef::new_unchecked(&self.iri)
   56|  50.4k|    }
_RNvMs4_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedCskGc5T8eVihK_9spargebra:
  138|  16.5k|    pub fn into_owned(self) -> NamedNode {
  139|  16.5k|        NamedNode::new_unchecked(self.iri)
  140|  16.5k|    }
_RNvXsl_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_9NamedNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCskGc5T8eVihK_9spargebra:
   17|    409|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedReEB5_:
   39|  46.6k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  46.6k|        Self { iri: iri.into() }
   41|  46.6k|    }
_RINvMNtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB3_9NamedNode13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   39|  5.31k|    pub fn new_unchecked(iri: impl Into<String>) -> Self {
   40|  5.31k|        Self { iri: iri.into() }
   41|  5.31k|    }
_RNvMs4_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRef6as_strB7_:
  133|  12.2k|    pub const fn as_str(self) -> &'a str {
  134|  12.2k|        self.iri
  135|  12.2k|    }
_RNvXsu_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRefNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  106|    340|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash)]
_RNvMs4_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRef10into_ownedB7_:
  138|  30.0k|    pub fn into_owned(self) -> NamedNode {
  139|  30.0k|        NamedNode::new_unchecked(self.iri)
  140|  30.0k|    }
_RNvXs9_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core3cmp9PartialEqNtB5_12NamedNodeRefE2eqB7_:
  173|  3.64k|    fn eq(&self, other: &NamedNodeRef<'_>) -> bool {
  174|  3.64k|        self.as_str() == other.as_str()
  175|  3.64k|    }
_RNvMNtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB2_9NamedNode6as_strB4_:
   44|  3.64k|    pub fn as_str(&self) -> &str {
   45|  3.64k|        self.iri.as_str()
   46|  3.64k|    }
_RNvMs4_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_12NamedNodeRef13new_uncheckedB7_:
  128|  2.88k|    pub const fn new_unchecked(iri: &'a str) -> Self {
  129|  2.88k|        Self { iri }
  130|  2.88k|    }
_RNvXs6_NtCshJ9d6mhVUZV_5oxrdf10named_nodeNtB5_9NamedNodeINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_12NamedNodeRefE4fromB7_:
  152|  30.0k|    fn from(node: NamedNodeRef<'_>) -> Self {
  153|  30.0k|        node.into_owned()
  154|  30.0k|    }

_RNvXs2c_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_4TermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  385|  1.29k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMs1u_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_4Quad6as_refCsh41WZG82U3t_18sparql_update_eval:
 1182|  1.59k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1183|  1.59k|        QuadRef {
 1184|  1.59k|            subject: self.subject.as_ref(),
 1185|  1.59k|            predicate: self.predicate.as_ref(),
 1186|  1.59k|            object: self.object.as_ref(),
 1187|  1.59k|            graph_name: self.graph_name.as_ref(),
 1188|  1.59k|        }
 1189|  1.59k|    }
_RNvMs1c_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_9GraphName6as_refCsh41WZG82U3t_18sparql_update_eval:
  965|  1.59k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  966|  1.59k|        match self {
  967|  1.34k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  968|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  969|    250|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  970|       |        }
  971|  1.59k|    }
_RNvXs1X_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_7SubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  155|  1.29k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2G_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_9GraphNameNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  940|  2.18k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvMsc_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB5_7Subject6as_refCsh41WZG82U3t_18sparql_update_eval:
  181|  1.59k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  1.59k|        match self {
  183|  1.59k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|      0|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  1.59k|    }
_RNvMsy_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB5_4Term6as_refCsh41WZG82U3t_18sparql_update_eval:
  417|  1.59k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  1.59k|        match self {
  419|    558|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|      0|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  1.03k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  1.59k|    }
_RNvXs1A_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_7QuadRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtB6_4QuadE4fromCsh41WZG82U3t_18sparql_update_eval:
 1298|  1.59k|    fn from(quad: &'a Quad) -> Self {
 1299|  1.59k|        quad.as_ref()
 1300|  1.59k|    }
_RNvMs1c_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_9GraphName6as_refCsd92XLxb96zi_8oxigraph:
  965|  9.51k|    pub fn as_ref(&self) -> GraphNameRef<'_> {
  966|  9.51k|        match self {
  967|  7.79k|            Self::NamedNode(node) => GraphNameRef::NamedNode(node.as_ref()),
  968|      0|            Self::BlankNode(node) => GraphNameRef::BlankNode(node.as_ref()),
  969|  1.72k|            Self::DefaultGraph => GraphNameRef::DefaultGraph,
  970|       |        }
  971|  9.51k|    }
_RNvMsc_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB5_7Subject6as_refCsd92XLxb96zi_8oxigraph:
  181|  5.33k|    pub fn as_ref(&self) -> SubjectRef<'_> {
  182|  5.33k|        match self {
  183|  5.33k|            Self::NamedNode(node) => SubjectRef::NamedNode(node.as_ref()),
  184|      0|            Self::BlankNode(node) => SubjectRef::BlankNode(node.as_ref()),
  185|       |            #[cfg(feature = "rdf-star")]
  186|      0|            Self::Triple(triple) => SubjectRef::Triple(triple),
  187|       |        }
  188|  5.33k|    }
_RNvXs1n_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_12GraphNameRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtNtB8_10named_node9NamedNodeE4fromCsd92XLxb96zi_8oxigraph:
 1082|     50|    fn from(node: &'a NamedNode) -> Self {
 1083|     50|        node.as_ref().into()
 1084|     50|    }
_RNvXsU_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCsd92XLxb96zi_8oxigraph:
  672|  59.0k|    fn from(node: &'a NamedNode) -> Self {
  673|  59.0k|        node.as_ref().into()
  674|  59.0k|    }
_RNvMs1u_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_4Quad6as_refCsd92XLxb96zi_8oxigraph:
 1182|  5.33k|    pub fn as_ref(&self) -> QuadRef<'_> {
 1183|  5.33k|        QuadRef {
 1184|  5.33k|            subject: self.subject.as_ref(),
 1185|  5.33k|            predicate: self.predicate.as_ref(),
 1186|  5.33k|            object: self.object.as_ref(),
 1187|  5.33k|            graph_name: self.graph_name.as_ref(),
 1188|  5.33k|        }
 1189|  5.33k|    }
_RNvMs1k_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_12GraphNameRef16is_default_graphCsd92XLxb96zi_8oxigraph:
 1048|  3.43k|    pub fn is_default_graph(&self) -> bool {
 1049|  3.43k|        matches!(self, Self::DefaultGraph)
 1050|  3.43k|    }
_RNvXs1m_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_12GraphNameRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB8_10named_node12NamedNodeRefE4fromCsd92XLxb96zi_8oxigraph:
 1075|     50|    fn from(node: NamedNodeRef<'a>) -> Self {
 1076|     50|        Self::NamedNode(node)
 1077|     50|    }
_RNvXsX_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7literal10LiteralRefE4fromCsd92XLxb96zi_8oxigraph:
  693|  4.43k|    fn from(literal: LiteralRef<'a>) -> Self {
  694|  4.43k|        Self::Literal(literal)
  695|  4.43k|    }
_RNvXsY_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtNtB7_7literal7LiteralE4fromCsd92XLxb96zi_8oxigraph:
  700|  4.43k|    fn from(literal: &'a Literal) -> Self {
  701|  4.43k|        literal.as_ref().into()
  702|  4.43k|    }
_RNvXs6_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB5_19NamedOrBlankNodeRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCsd92XLxb96zi_8oxigraph:
  114|    884|    fn from(node: NamedNodeRef<'a>) -> Self {
  115|    884|        Self::NamedNode(node)
  116|    884|    }
_RNvXs7_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB5_19NamedOrBlankNodeRefINtNtCs9nhK3FOW46N_4core7convert4FromRNtNtB7_10named_node9NamedNodeE4fromCsd92XLxb96zi_8oxigraph:
  121|    884|    fn from(node: &'a NamedNode) -> Self {
  122|    884|        node.as_ref().into()
  123|    884|    }
_RNvMsy_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB5_4Term6as_refCsd92XLxb96zi_8oxigraph:
  417|  5.33k|    pub fn as_ref(&self) -> TermRef<'_> {
  418|  5.33k|        match self {
  419|  1.99k|            Self::NamedNode(node) => TermRef::NamedNode(node.as_ref()),
  420|      0|            Self::BlankNode(node) => TermRef::BlankNode(node.as_ref()),
  421|  3.34k|            Self::Literal(literal) => TermRef::Literal(literal.as_ref()),
  422|       |            #[cfg(feature = "rdf-star")]
  423|      0|            Self::Triple(triple) => TermRef::Triple(triple),
  424|       |        }
  425|  5.33k|    }
_RNvXs10_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtB6_19NamedOrBlankNodeRefE4fromCsd92XLxb96zi_8oxigraph:
  715|    180|    fn from(node: NamedOrBlankNodeRef<'a>) -> Self {
  716|    180|        match node {
  717|    180|            NamedOrBlankNodeRef::NamedNode(node) => node.into(),
  718|      0|            NamedOrBlankNodeRef::BlankNode(node) => node.into(),
  719|       |        }
  720|    180|    }
_RNvXs12_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtB6_10SubjectRefE4fromCs1tT6kGyeNZe_10sparesults:
  732|  1.66k|    fn from(node: SubjectRef<'a>) -> Self {
  733|  1.66k|        match node {
  734|  1.66k|            SubjectRef::NamedNode(node) => node.into(),
  735|      0|            SubjectRef::BlankNode(node) => node.into(),
  736|       |            #[cfg(feature = "rdf-star")]
  737|      0|            SubjectRef::Triple(triple) => triple.into(),
  738|       |        }
  739|  1.66k|    }
_RNvXsT_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB5_7TermRefINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node12NamedNodeRefE4fromCs1tT6kGyeNZe_10sparesults:
  665|  63.3k|    fn from(node: NamedNodeRef<'a>) -> Self {
  666|  63.3k|        Self::NamedNode(node)
  667|  63.3k|    }
_RINvMs1u_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB7_4Quad3newNtB7_7SubjectNtNtB9_10named_node9NamedNodeNtB7_4TermNtB7_9GraphNameECsgRlx6Emv1GO_5oxttl:
 1167|  1.59k|    pub fn new(
 1168|  1.59k|        subject: impl Into<Subject>,
 1169|  1.59k|        predicate: impl Into<NamedNode>,
 1170|  1.59k|        object: impl Into<Term>,
 1171|  1.59k|        graph_name: impl Into<GraphName>,
 1172|  1.59k|    ) -> Self {
 1173|  1.59k|        Self {
 1174|  1.59k|            subject: subject.into(),
 1175|  1.59k|            predicate: predicate.into(),
 1176|  1.59k|            object: object.into(),
 1177|  1.59k|            graph_name: graph_name.into(),
 1178|  1.59k|        }
 1179|  1.59k|    }
_RNvXs1e_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB6_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB8_10named_node9NamedNodeE4fromCsgRlx6Emv1GO_5oxttl:
  983|  7.78k|    fn from(node: NamedNode) -> Self {
  984|  7.78k|        Self::NamedNode(node)
  985|  7.78k|    }
_RNvXsA_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  437|  29.9k|    fn from(node: NamedNode) -> Self {
  438|  29.9k|        Self::NamedNode(node)
  439|  29.9k|    }
_RNvXse_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB5_7SubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_10named_node9NamedNodeE4fromB7_:
  200|  15.0k|    fn from(node: NamedNode) -> Self {
  201|  15.0k|        Self::NamedNode(node)
  202|  15.0k|    }
_RNvXsE_NtCshJ9d6mhVUZV_5oxrdf6tripleNtB5_4TermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7literal7LiteralE4fromB7_:
  465|  8.62k|    fn from(literal: Literal) -> Self {
  466|  8.62k|        Self::Literal(literal)
  467|  8.62k|    }

_RNvXsf_NtCshJ9d6mhVUZV_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
   13|  14.8k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs_NtCshJ9d6mhVUZV_5oxrdf8variableNtB4_8VariableNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsd92XLxb96zi_8oxigraph:
   57|  70.3k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|  70.3k|        self.as_ref().fmt(f)
   59|  70.3k|    }
_RNvXsf_NtCshJ9d6mhVUZV_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
   13|  38.4k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCshJ9d6mhVUZV_5oxrdf8variableNtB2_8Variable6as_refCsd92XLxb96zi_8oxigraph:
   50|  70.3k|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|  70.3k|        VariableRef { name: &self.name }
   52|  70.3k|    }
_RNvXs1_NtCshJ9d6mhVUZV_5oxrdf8variableNtB5_11VariableRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsd92XLxb96zi_8oxigraph:
  116|  70.3k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|  70.3k|        write!(f, "?{}", self.name)
  118|  70.3k|    }
_RNvXsf_NtCshJ9d6mhVUZV_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsj4YExd6TrWR_7sparopt:
   13|   208M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCshJ9d6mhVUZV_5oxrdf8variableNtB3_8Variable13new_uncheckedReECskGc5T8eVihK_9spargebra:
   35|  38.7k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  38.7k|        Self { name: name.into() }
   37|  38.7k|    }
_RINvXsg_NtCshJ9d6mhVUZV_5oxrdf8variableNtB6_8VariableNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECskGc5T8eVihK_9spargebra:
   13|   519M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXs_NtCshJ9d6mhVUZV_5oxrdf8variableNtB4_8VariableNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCskGc5T8eVihK_9spargebra:
   57|  30.9k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   58|  30.9k|        self.as_ref().fmt(f)
   59|  30.9k|    }
_RNvXsd_NtCshJ9d6mhVUZV_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core3cmp10PartialOrd11partial_cmpCskGc5T8eVihK_9spargebra:
   13|    906|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvXsf_NtCshJ9d6mhVUZV_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCskGc5T8eVihK_9spargebra:
   13|  40.5k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RNvMNtCshJ9d6mhVUZV_5oxrdf8variableNtB2_8Variable6as_refCskGc5T8eVihK_9spargebra:
   50|  30.9k|    pub fn as_ref(&self) -> VariableRef<'_> {
   51|  30.9k|        VariableRef { name: &self.name }
   52|  30.9k|    }
_RNvXs1_NtCshJ9d6mhVUZV_5oxrdf8variableNtB5_11VariableRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCskGc5T8eVihK_9spargebra:
  116|  30.9k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  117|  30.9k|        write!(f, "?{}", self.name)
  118|  30.9k|    }
_RNvXsb_NtCshJ9d6mhVUZV_5oxrdf8variableNtB5_8VariableNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCskGc5T8eVihK_9spargebra:
   13|   290M|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Hash)]
_RINvMNtCshJ9d6mhVUZV_5oxrdf8variableNtB3_8Variable13new_uncheckedNtNtCsjOdcKtOMjJI_5alloc6string6StringEB5_:
   35|  24.9k|    pub fn new_unchecked(name: impl Into<String>) -> Self {
   36|  24.9k|        Self { name: name.into() }
   37|  24.9k|    }

_RINvXsh_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB6_7BooleanNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsd92XLxb96zi_8oxigraph:
    8|     12|#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Ord, PartialOrd, Hash)]
_RNvXs4_NtCsaP05r1vbY5r_12oxsdatatypes7booleanbINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_7BooleanE4fromCsd92XLxb96zi_8oxigraph:
   60|  2.31k|    fn from(value: Boolean) -> Self {
   61|  2.31k|        value.value
   62|  2.31k|    }
_RNvXs1_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB5_7BooleanINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7decimal7DecimalE4fromCsd92XLxb96zi_8oxigraph:
   39|      1|    fn from(value: Decimal) -> Self {
   40|      1|        (value != Decimal::from(0)).into()
   41|      1|    }
_RNvXs8_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB5_7BooleanNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
    8|    604|#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Ord, PartialOrd, Hash)]
_RNvXs_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB4_7BooleanINtNtCs9nhK3FOW46N_4core7convert4FrombE4fromCsd92XLxb96zi_8oxigraph:
   25|  2.55k|    fn from(value: bool) -> Self {
   26|  2.55k|        Self { value }
   27|  2.55k|    }
_RNvXs0_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB5_7BooleanINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7integer7IntegerE4fromCsd92XLxb96zi_8oxigraph:
   32|      2|    fn from(value: Integer) -> Self {
   33|      2|        (value != Integer::from(0)).into()
   34|      2|    }
_RNvXs5_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB5_7BooleanNtNtNtCs9nhK3FOW46N_4core3str6traits7FromStr8from_strCsd92XLxb96zi_8oxigraph:
   69|  2.19k|    fn from_str(input: &str) -> Result<Self, Self::Err> {
   70|  2.19k|        Ok(match input {
   71|  2.19k|            "true" | "1" => true,
   72|  1.55k|            "false" | "0" => false,
   73|      0|            _ => bool::from_str(input)?,
   74|       |        }
   75|  2.19k|        .into())
   76|  2.19k|    }
_RNvXse_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB5_7BooleanNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsd92XLxb96zi_8oxigraph:
    8|     13|#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Ord, PartialOrd, Hash)]
_RNvXs6_NtCsaP05r1vbY5r_12oxsdatatypes7booleanNtB5_7BooleanNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsd92XLxb96zi_8oxigraph:
   81|    144|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   82|    144|        self.value.fmt(f)
   83|    144|    }

_RNvMsN_NtCsaP05r1vbY5r_12oxsdatatypes9date_timeNtB5_9Timestamp3nowCsd92XLxb96zi_8oxigraph:
 1640|  4.17k|    fn now() -> Self {
 1641|  4.17k|        Self::new(
 1642|  4.17k|            &date_time_plus_duration(
 1643|  4.17k|                since_unix_epoch(),
 1644|  4.17k|                &DateTimeSevenPropertyModel {
 1645|  4.17k|                    year: Some(1970),
 1646|  4.17k|                    month: Some(1),
 1647|  4.17k|                    day: Some(1),
 1648|  4.17k|                    hour: Some(0),
 1649|  4.17k|                    minute: Some(0),
 1650|  4.17k|                    second: Some(Decimal::default()),
 1651|  4.17k|                    timezone_offset: Some(TimezoneOffset::UTC),
 1652|  4.17k|                },
 1653|  4.17k|            )
 1654|  4.17k|            .expect("The current time seems way in the future, it's strange"),
 1655|  4.17k|        )
 1656|  4.17k|        .expect("The current time seems way in the future, it's strange")
 1657|  4.17k|    }
_RNvMsN_NtCsaP05r1vbY5r_12oxsdatatypes9date_timeNtB5_9Timestamp3newCsd92XLxb96zi_8oxigraph:
 1632|  4.17k|    fn new(props: &DateTimeSevenPropertyModel) -> Result<Self, DateTimeOverflowError> {
 1633|  4.17k|        Ok(Self {
 1634|  4.17k|            timezone_offset: props.timezone_offset,
 1635|  4.17k|            value: time_on_timeline(props).ok_or(DateTimeOverflowError)?,
 1636|       |        })
 1637|  4.17k|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes9date_timeNtB2_8DateTime3nowCsd92XLxb96zi_8oxigraph:
   51|  4.17k|    pub fn now() -> Self {
   52|  4.17k|        Self {
   53|  4.17k|            timestamp: Timestamp::now(),
   54|  4.17k|        }
   55|  4.17k|    }
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time13normalize_day:
 1921|  4.17k|fn normalize_day(yr: i64, mo: i64, mut da: i64) -> Option<(i64, u8, u8)> {
 1922|  4.17k|    let (mut yr, mut mo) = normalize_month(yr, mo)?;
 1923|       |    loop {
 1924|  2.72M|        if da <= 0 {
 1925|      0|            let (yr2, mo2) = normalize_month(yr, i64::from(mo).checked_sub(1)?)?;
 1926|      0|            yr = yr2;
 1927|      0|            mo = mo2;
 1928|      0|            da = da.checked_add(days_in_month(Some(yr), mo).into())?;
 1929|  2.72M|        } else if da > days_in_month(Some(yr), mo).into() {
 1930|  2.71M|            da = da.checked_sub(days_in_month(Some(yr), mo).into())?;
 1931|  2.71M|            let (yr2, mo2) = normalize_month(yr, i64::from(mo).checked_add(1)?)?;
 1932|  2.71M|            yr = yr2;
 1933|  2.71M|            mo = mo2;
 1934|       |        } else {
 1935|  4.17k|            return Some((yr, mo, u8::try_from(da).ok()?));
 1936|       |        };
 1937|       |    }
 1938|  4.17k|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time15normalize_month:
 1902|  2.72M|fn normalize_month(yr: i64, mo: i64) -> Option<(i64, u8)> {
 1903|  2.72M|    if mo >= 0 {
 1904|  2.72M|        let yr = yr.checked_add(mo.checked_sub(1)?.checked_div(12)?)?;
 1905|  2.72M|        let mo = u8::try_from(mo.checked_sub(1)?.checked_rem(12)?.abs().checked_add(1)?).ok()?;
 1906|  2.72M|        Some((yr, mo))
 1907|       |    } else {
 1908|       |        // Needed to make it work with negative durations
 1909|      0|        let yr = yr.checked_add(mo.checked_sub(1)?.checked_div(12)?.checked_sub(1)?)?;
 1910|      0|        let mo = u8::try_from(
 1911|       |            12_i64
 1912|      0|                .checked_add(mo.checked_sub(1)?.checked_rem(12)?)?
 1913|      0|                .checked_add(1)?,
 1914|       |        )
 1915|      0|        .ok()?;
 1916|      0|        Some((yr, mo))
 1917|       |    }
 1918|  2.72M|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16time_on_timeline:
 2014|  4.17k|fn time_on_timeline(props: &DateTimeSevenPropertyModel) -> Option<Decimal> {
 2015|  4.17k|    let yr = props.year.map_or(1971, |y| y - 1);
 2016|  4.17k|    let mo = props.month.unwrap_or(12);
 2017|  4.17k|    let da = props
 2018|  4.17k|        .day
 2019|  4.17k|        .map_or_else(|| days_in_month(Some(yr + 1), mo) - 1, |d| d - 1);
 2020|  4.17k|    let hr = props.hour.unwrap_or(0);
 2021|  4.17k|    let mi = i128::from(props.minute.unwrap_or(0))
 2022|  4.17k|        - i128::from(props.timezone_offset.unwrap_or(TimezoneOffset::UTC).offset);
 2023|  4.17k|    let se = props.second.unwrap_or_default();
 2024|  4.17k|
 2025|  4.17k|    Decimal::try_from(
 2026|  4.17k|        31_536_000 * i128::from(yr)
 2027|  4.17k|            + 86400 * i128::from(yr.div_euclid(400) - yr.div_euclid(100) + yr.div_euclid(4))
 2028|  4.17k|            + 86400
 2029|  4.17k|                * (1..mo)
 2030|  4.17k|                    .map(|m| i128::from(days_in_month(Some(yr + 1), m)))
 2031|  4.17k|                    .sum::<i128>()
 2032|  4.17k|            + 86400 * i128::from(da)
 2033|  4.17k|            + 3600 * i128::from(hr)
 2034|  4.17k|            + 60 * mi,
 2035|  4.17k|    )
 2036|  4.17k|    .ok()?
 2037|  4.17k|    .checked_add(se)
 2038|  4.17k|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_duration:
 1985|  4.17k|fn date_time_plus_duration(
 1986|  4.17k|    du: Duration,
 1987|  4.17k|    dt: &DateTimeSevenPropertyModel,
 1988|  4.17k|) -> Option<DateTimeSevenPropertyModel> {
 1989|  4.17k|    let yr = dt.year.unwrap_or(1);
 1990|  4.17k|    let mo = dt.month.unwrap_or(1);
 1991|  4.17k|    let da = dt.day.unwrap_or(1);
 1992|  4.17k|    let hr = dt.hour.unwrap_or(0);
 1993|  4.17k|    let mi = dt.minute.unwrap_or(0);
 1994|  4.17k|    let se = dt.second.unwrap_or_default();
 1995|  4.17k|    let mo = i64::from(mo).checked_add(du.all_months())?;
 1996|  4.17k|    let (yr, mo) = normalize_month(yr, mo)?;
 1997|  4.17k|    let da = min(da, days_in_month(Some(yr), mo));
 1998|  4.17k|    let se = se.checked_add(du.all_seconds())?;
 1999|  4.17k|    let (yr, mo, da, hr, mi, se) =
 2000|  4.17k|        normalize_second(yr, mo.into(), da.into(), hr.into(), mi.into(), se)?;
 2001|       |
 2002|  4.17k|    Some(DateTimeSevenPropertyModel {
 2003|  4.17k|        year: dt.year.map(|_| yr),
 2004|  4.17k|        month: dt.month.map(|_| mo),
 2005|  4.17k|        day: dt.day.map(|_| da),
 2006|  4.17k|        hour: dt.hour.map(|_| hr),
 2007|  4.17k|        minute: dt.minute.map(|_| mi),
 2008|  4.17k|        second: dt.second.map(|_| se),
 2009|  4.17k|        timezone_offset: dt.timezone_offset,
 2010|  4.17k|    })
 2011|  4.17k|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16since_unix_epoch:
 1891|  4.17k|fn since_unix_epoch() -> Duration {
 1892|  4.17k|    use std::time::SystemTime;
 1893|  4.17k|
 1894|  4.17k|    SystemTime::now()
 1895|  4.17k|        .duration_since(SystemTime::UNIX_EPOCH)
 1896|  4.17k|        .expect("System time before UNIX epoch")
 1897|  4.17k|        .try_into()
 1898|  4.17k|        .expect("The current time seems way in the future, it's strange")
 1899|  4.17k|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time13days_in_month:
 1966|  5.46M|fn days_in_month(y: Option<i64>, m: u8) -> u8 {
 1967|  5.46M|    match m {
 1968|       |        2 => {
 1969|   463k|            if let Some(y) = y {
 1970|   463k|                if y % 4 != 0 || (y % 100 == 0 && y % 400 != 0) {
 1971|   342k|                    28
 1972|       |                } else {
 1973|   121k|                    29
 1974|       |                }
 1975|       |            } else {
 1976|      0|                28
 1977|       |            }
 1978|       |        }
 1979|  1.80M|        4 | 6 | 9 | 11 => 30,
 1980|  3.18M|        _ => 31,
 1981|       |    }
 1982|  5.46M|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16normalize_second:
 1951|  4.17k|fn normalize_second(
 1952|  4.17k|    yr: i64,
 1953|  4.17k|    mo: i64,
 1954|  4.17k|    da: i64,
 1955|  4.17k|    hr: i64,
 1956|  4.17k|    mi: i64,
 1957|  4.17k|    se: Decimal,
 1958|  4.17k|) -> Option<(i64, u8, u8, u8, u8, Decimal)> {
 1959|  4.17k|    let mi = mi.checked_add(i64::try_from(se.as_i128().checked_div(60)?).ok()?)?; // TODO: good idea?
 1960|  4.17k|    let se = se.checked_rem(60)?;
 1961|  4.17k|    let (yr, mo, da, hr, mi) = normalize_minute(yr, mo, da, hr, mi)?;
 1962|  4.17k|    Some((yr, mo, da, hr, mi, se))
 1963|  4.17k|}
_RNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16normalize_minute:
 1941|  4.17k|fn normalize_minute(yr: i64, mo: i64, da: i64, hr: i64, mi: i64) -> Option<(i64, u8, u8, u8, u8)> {
 1942|  4.17k|    let hr = hr.checked_add(mi.checked_div(60)?)?;
 1943|  4.17k|    let mi = mi.checked_rem(60)?;
 1944|  4.17k|    let da = da.checked_add(hr.checked_div(24)?)?;
 1945|  4.17k|    let hr = hr.checked_rem(24)?;
 1946|  4.17k|    let (yr, mo, da) = normalize_day(yr, mo, da)?;
 1947|  4.17k|    Some((yr, mo, da, u8::try_from(hr).ok()?, u8::try_from(mi).ok()?))
 1948|  4.17k|}
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_durations1_0B5_:
 2006|  4.17k|        hour: dt.hour.map(|_| hr),
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16time_on_timeline0B5_:
 2015|  4.17k|    let yr = props.year.map_or(1971, |y| y - 1);
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_durations_0B5_:
 2004|  4.17k|        month: dt.month.map(|_| mo),
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16time_on_timelines0_0B5_:
 2019|  4.17k|        .map_or_else(|| days_in_month(Some(yr + 1), mo) - 1, |d| d - 1);
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_durations3_0B5_:
 2008|  4.17k|        second: dt.second.map(|_| se),
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_durations2_0B5_:
 2007|  4.17k|        minute: dt.minute.map(|_| mi),
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_durations0_0B5_:
 2005|  4.17k|        day: dt.day.map(|_| da),
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time16time_on_timelines1_0B5_:
 2030|  12.5k|                    .map(|m| i128::from(days_in_month(Some(yr + 1), m)))
_RNCNvNtCsaP05r1vbY5r_12oxsdatatypes9date_time23date_time_plus_duration0B5_:
 2003|  4.17k|        year: dt.year.map(|_| yr),

_RINvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB3_7Decimal11checked_divBF_ECsd92XLxb96zi_8oxigraph:
  120|      2|    pub fn checked_div(self, rhs: impl Into<Self>) -> Option<Self> {
  121|      2|        // Idea: we shift the dividend left as much as possible to keep as much precision as possible
  122|      2|        // And we shift right the divisor as much as possible
  123|      2|        // Do the multiplication and do the required shift
  124|      2|        let mut left = self.value;
  125|      2|        let mut shift_left = 0_u32;
  126|      2|        if left != 0 {
  127|      0|            while let Some(r) = left.checked_mul(10) {
  128|      0|                left = r;
  129|      0|                shift_left += 1;
  130|      0|            }
  131|      2|        }
  132|      2|        let mut right = rhs.into().value;
  133|      2|        let mut shift_right = 0_u32;
  134|      2|        if right != 0 {
  135|      0|            while right % 10 == 0 {
  136|      0|                right /= 10;
  137|      0|                shift_right += 1;
  138|      0|            }
  139|      2|        }
  140|       |
  141|       |        // We do division + shift
  142|      2|        let shift = (shift_left + shift_right).checked_sub(DECIMAL_PART_DIGITS)?;
  143|       |        Some(Self {
  144|      0|            value: left
  145|      0|                .checked_div(right)?
  146|      0|                .checked_div(10_i128.checked_pow(shift)?)?,
  147|       |        })
  148|      2|    }
_RINvXst_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB6_7DecimalNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsd92XLxb96zi_8oxigraph:
   15|      4|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash, Default)]
_RINvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB3_7Decimal11checked_subBF_ECsd92XLxb96zi_8oxigraph:
   74|     15|    pub fn checked_sub(self, rhs: impl Into<Self>) -> Option<Self> {
   75|     15|        Some(Self {
   76|     15|            value: self.value.checked_sub(rhs.into().value)?,
   77|       |        })
   78|     15|    }
_RINvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB3_7Decimal11checked_mulBF_ECsd92XLxb96zi_8oxigraph:
   85|     12|    pub fn checked_mul(self, rhs: impl Into<Self>) -> Option<Self> {
   86|     12|        // Idea: we shift right as much as possible to keep as much precision as possible
   87|     12|        // Do the multiplication and do the required left shift
   88|     12|        let mut left = self.value;
   89|     12|        let mut shift_left = 0_u32;
   90|     12|        if left != 0 {
   91|      0|            while left % 10 == 0 {
   92|      0|                left /= 10;
   93|      0|                shift_left += 1;
   94|      0|            }
   95|     12|        }
   96|       |
   97|     12|        let mut right = rhs.into().value;
   98|     12|        let mut shift_right = 0_u32;
   99|     12|        if right != 0 {
  100|      0|            while right % 10 == 0 {
  101|      0|                right /= 10;
  102|      0|                shift_right += 1;
  103|      0|            }
  104|     12|        }
  105|       |
  106|       |        // We do multiplication + shift
  107|     12|        let shift = (shift_left + shift_right).checked_sub(DECIMAL_PART_DIGITS)?;
  108|       |        Some(Self {
  109|      0|            value: left
  110|      0|                .checked_mul(right)?
  111|      0|                .checked_mul(10_i128.checked_pow(shift)?)?,
  112|       |        })
  113|     12|    }
_RINvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB3_7Decimal11checked_divNtNtB5_7integer7IntegerECsd92XLxb96zi_8oxigraph:
  120|     40|    pub fn checked_div(self, rhs: impl Into<Self>) -> Option<Self> {
  121|     40|        // Idea: we shift the dividend left as much as possible to keep as much precision as possible
  122|     40|        // And we shift right the divisor as much as possible
  123|     40|        // Do the multiplication and do the required shift
  124|     40|        let mut left = self.value;
  125|     40|        let mut shift_left = 0_u32;
  126|     40|        if left != 0 {
  127|    840|            while let Some(r) = left.checked_mul(10) {
  128|    800|                left = r;
  129|    800|                shift_left += 1;
  130|    800|            }
  131|      0|        }
  132|     40|        let mut right = rhs.into().value;
  133|     40|        let mut shift_right = 0_u32;
  134|     40|        if right != 0 {
  135|    760|            while right % 10 == 0 {
  136|    720|                right /= 10;
  137|    720|                shift_right += 1;
  138|    720|            }
  139|      0|        }
  140|       |
  141|       |        // We do division + shift
  142|     40|        let shift = (shift_left + shift_right).checked_sub(DECIMAL_PART_DIGITS)?;
  143|       |        Some(Self {
  144|     40|            value: left
  145|     40|                .checked_div(right)?
  146|     40|                .checked_div(10_i128.checked_pow(shift)?)?,
  147|       |        })
  148|     40|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB2_7Decimal11to_be_bytesCsd92XLxb96zi_8oxigraph:
   54|  4.88k|    pub fn to_be_bytes(self) -> [u8; 16] {
   55|  4.88k|        self.value.to_be_bytes()
   56|  4.88k|    }
_RNvXs2_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalINtNtCs9nhK3FOW46N_4core7convert4FromlE4fromCsd92XLxb96zi_8oxigraph:
  298|      1|    fn from(value: i32) -> Self {
  299|      1|        Self {
  300|      1|            value: i128::from(value) * DECIMAL_PART_POW,
  301|      1|        }
  302|      1|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB2_7Decimal11checked_negCsd92XLxb96zi_8oxigraph:
  177|     28|    pub fn checked_neg(self) -> Option<Self> {
  178|     28|        Some(Self {
  179|     28|            value: self.value.checked_neg()?,
  180|       |        })
  181|     28|    }
_RNvXsn_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsd92XLxb96zi_8oxigraph:
   15|      4|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash, Default)]
_RNvXsr_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
   15|    181|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash, Default)]
_RNvXsu_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalNtNtCs9nhK3FOW46N_4core7default7Default7defaultCsd92XLxb96zi_8oxigraph:
   15|  4.17k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash, Default)]
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB2_7Decimal17is_identical_withCsd92XLxb96zi_8oxigraph:
  258|      4|    pub fn is_identical_with(self, other: Self) -> bool {
  259|      4|        self == other
  260|      4|    }
_RNvXs8_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7integer7IntegerE4fromCsd92XLxb96zi_8oxigraph:
  352|     81|    fn from(value: Integer) -> Self {
  353|     81|        i64::from(value).into()
  354|     81|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB2_7Decimal13from_be_bytesCsd92XLxb96zi_8oxigraph:
   46|    732|    pub fn from_be_bytes(bytes: [u8; 16]) -> Self {
   47|    732|        Self {
   48|    732|            value: i128::from_be_bytes(bytes),
   49|    732|        }
   50|    732|    }
_RNvXs3_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalINtNtCs9nhK3FOW46N_4core7convert4FromxE4fromCsd92XLxb96zi_8oxigraph:
  307|     81|    fn from(value: i64) -> Self {
  308|     81|        Self {
  309|     81|            value: i128::from(value) * DECIMAL_PART_POW,
  310|     81|        }
  311|     81|    }
_RINvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB3_7Decimal11checked_addBF_EB5_:
   63|  8.35k|    pub fn checked_add(self, rhs: impl Into<Self>) -> Option<Self> {
   64|  8.35k|        Some(Self {
   65|  8.35k|            value: self.value.checked_add(rhs.into().value)?,
   66|       |        })
   67|  8.35k|    }
_RINvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB3_7Decimal11checked_remlEB5_:
  155|  4.17k|    pub fn checked_rem(self, rhs: impl Into<Self>) -> Option<Self> {
  156|  4.17k|        Some(Self {
  157|  4.17k|            value: self.value.checked_rem(rhs.into().value)?,
  158|       |        })
  159|  4.17k|    }
_RNCNvXsi_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB7_7DecimalNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt0B9_:
  567|  6.61k|            .find_map(|(i, v)| if v == b'0' { None } else { Some(i) })
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB2_7Decimal3newB4_:
   28|  4.17k|    pub const fn new(i: i128, n: u32) -> Result<Self, TooLargeForDecimalError> {
   29|  4.17k|        let Some(shift) = DECIMAL_PART_DIGITS.checked_sub(n) else {
   30|      0|            return Err(TooLargeForDecimalError);
   31|       |        };
   32|  4.17k|        let Some(value) = i.checked_mul(10_i128.pow(shift)) else {
   33|      0|            return Err(TooLargeForDecimalError);
   34|       |        };
   35|  4.17k|        Ok(Self { value })
   36|  4.17k|    }
_RNvXs2_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalINtNtCs9nhK3FOW46N_4core7convert4FromlE4fromB7_:
  298|  4.17k|    fn from(value: i32) -> Self {
  299|  4.17k|        Self {
  300|  4.17k|            value: i128::from(value) * DECIMAL_PART_POW,
  301|  4.17k|        }
  302|  4.17k|    }
_RNvXsh_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalNtNtNtCs9nhK3FOW46N_4core3str6traits7FromStr8from_str:
  464|  1.09k|    fn from_str(input: &str) -> Result<Self, Self::Err> {
  465|  1.09k|        // (\+|-)?([0-9]+(\.[0-9]*)?|\.[0-9]+)
  466|  1.09k|        let input = input.as_bytes();
  467|  1.09k|        if input.is_empty() {
  468|      0|            return Err(PARSE_UNEXPECTED_END);
  469|  1.09k|        }
  470|       |
  471|  1.09k|        let (sign, mut input) = match input.first() {
  472|      0|            Some(b'+') => (1_i128, &input[1..]),
  473|      0|            Some(b'-') => (-1_i128, &input[1..]),
  474|  1.09k|            _ => (1, input),
  475|       |        };
  476|       |
  477|  1.09k|        let mut value = 0_i128;
  478|  1.09k|        let with_before_dot = input.first().map_or(false, u8::is_ascii_digit);
  479|  2.19k|        while let Some(c) = input.first() {
  480|  2.19k|            if c.is_ascii_digit() {
  481|  1.09k|                value = value
  482|  1.09k|                    .checked_mul(10)
  483|  1.09k|                    .ok_or(PARSE_OVERFLOW)?
  484|  1.09k|                    .checked_add(sign * i128::from(*c - b'0'))
  485|  1.09k|                    .ok_or(PARSE_OVERFLOW)?;
  486|  1.09k|                input = &input[1..];
  487|       |            } else {
  488|  1.09k|                break;
  489|       |            }
  490|       |        }
  491|       |
  492|  1.09k|        let mut exp = DECIMAL_PART_POW;
  493|  1.09k|        if let Some(c) = input.first() {
  494|  1.09k|            if *c != b'.' {
  495|      0|                return Err(PARSE_UNEXPECTED_CHAR);
  496|  1.09k|            }
  497|  1.09k|            input = &input[1..];
  498|  1.09k|            if input.is_empty() && !with_before_dot {
  499|       |                // We only have a dot
  500|      0|                return Err(PARSE_UNEXPECTED_END);
  501|  1.09k|            }
  502|  2.18k|            while input.last() == Some(&b'0') {
  503|  1.09k|                // Hack to avoid underflows
  504|  1.09k|                input = &input[..input.len() - 1];
  505|  1.09k|            }
  506|  1.09k|            while let Some(c) = input.first() {
  507|      0|                if c.is_ascii_digit() {
  508|      0|                    exp /= 10;
  509|      0|                    value = value
  510|      0|                        .checked_mul(10)
  511|      0|                        .ok_or(PARSE_OVERFLOW)?
  512|      0|                        .checked_add(sign * i128::from(*c - b'0'))
  513|      0|                        .ok_or(PARSE_OVERFLOW)?;
  514|      0|                    input = &input[1..];
  515|       |                } else {
  516|      0|                    return Err(PARSE_UNEXPECTED_CHAR);
  517|       |                }
  518|       |            }
  519|  1.09k|            if exp == 0 {
  520|       |                // Underflow
  521|      0|                return Err(PARSE_UNDERFLOW);
  522|  1.09k|            }
  523|      2|        } else if !with_before_dot {
  524|       |            // It's empty
  525|      0|            return Err(PARSE_UNEXPECTED_END);
  526|      2|        }
  527|       |
  528|       |        Ok(Self {
  529|  1.09k|            value: value.checked_mul(exp).ok_or(PARSE_OVERFLOW)?,
  530|       |        })
  531|  1.09k|    }
_RNvXsi_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  537|    362|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  538|    362|        if self.value == 0 {
  539|     14|            return if let Some(width) = f.width() {
  540|      0|                for _ in 0..width {
  541|      0|                    f.write_char('0')?;
  542|       |                }
  543|      0|                Ok(())
  544|       |            } else {
  545|     14|                f.write_char('0')
  546|       |            };
  547|    348|        }
  548|    348|
  549|    348|        let mut value = self.value;
  550|    348|        if self.value.is_negative() {
  551|      0|            f.write_char('-')?;
  552|    348|        }
  553|       |
  554|    348|        let mut digits = [b'0'; 40];
  555|    348|        let mut i = 0;
  556|  6.96k|        while value != 0 {
  557|  6.61k|            digits[i] = b'0' + ((value % 10).unsigned_abs() as u8);
  558|  6.61k|            value /= 10;
  559|  6.61k|            i += 1;
  560|  6.61k|        }
  561|       |
  562|    348|        let last_non_zero = i - 1;
  563|    348|        let first_non_zero = digits
  564|    348|            .iter()
  565|    348|            .copied()
  566|    348|            .enumerate()
  567|    348|            .find_map(|(i, v)| if v == b'0' { None } else { Some(i) })
  568|    348|            .unwrap_or(40);
  569|       |
  570|    348|        let decimal_part_digits = usize::try_from(DECIMAL_PART_DIGITS).map_err(|_| fmt::Error)?;
  571|    348|        if last_non_zero >= decimal_part_digits {
  572|    348|            let end = if let Some(mut width) = f.width() {
  573|      0|                if self.value.is_negative() {
  574|      0|                    width -= 1;
  575|      0|                }
  576|      0|                if last_non_zero - decimal_part_digits + 1 < width {
  577|      0|                    decimal_part_digits + width
  578|       |                } else {
  579|      0|                    last_non_zero + 1
  580|       |                }
  581|       |            } else {
  582|    348|                last_non_zero + 1
  583|       |            };
  584|    348|            for c in digits[decimal_part_digits..end].iter().rev() {
  585|    348|                f.write_char(char::from(*c))?;
  586|       |            }
  587|       |        } else {
  588|      0|            f.write_char('0')?
  589|       |        }
  590|    348|        if decimal_part_digits > first_non_zero {
  591|      0|            f.write_char('.')?;
  592|      0|            let start = if let Some(precision) = f.precision() {
  593|      0|                if decimal_part_digits - first_non_zero > precision {
  594|      0|                    decimal_part_digits - precision
  595|       |                } else {
  596|      0|                    first_non_zero
  597|       |                }
  598|       |            } else {
  599|      0|                first_non_zero
  600|       |            };
  601|      0|            for c in digits[start..decimal_part_digits].iter().rev() {
  602|      0|                f.write_char(char::from(*c))?;
  603|       |            }
  604|    348|        }
  605|       |
  606|    348|        Ok(())
  607|    362|    }
_RNvXsn_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
   15|      1|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash, Default)]
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB2_7Decimal7as_i128B4_:
  264|  4.17k|    pub(super) const fn as_i128(self) -> i128 {
  265|  4.17k|        self.value / DECIMAL_PART_POW
  266|  4.17k|    }
_RNvXs9_NtCsaP05r1vbY5r_12oxsdatatypes7decimalNtB5_7DecimalINtNtCs9nhK3FOW46N_4core7convert7TryFromnE8try_fromB7_:
  361|  4.17k|    fn try_from(value: i128) -> Result<Self, Self::Error> {
  362|  4.17k|        Ok(Self {
  363|  4.17k|            value: value
  364|  4.17k|                .checked_mul(DECIMAL_PART_POW)
  365|  4.17k|                .ok_or(TooLargeForDecimalError)?,
  366|       |        })
  367|  4.17k|    }

_RNvMNtCsaP05r1vbY5r_12oxsdatatypes6doubleNtB2_6Double13from_be_bytesCsd92XLxb96zi_8oxigraph:
   32|     62|    pub fn from_be_bytes(bytes: [u8; 8]) -> Self {
   33|     62|        Self {
   34|     62|            value: f64::from_be_bytes(bytes),
   35|     62|        }
   36|     62|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes6doubleNtB2_6Double11to_be_bytesCsd92XLxb96zi_8oxigraph:
   40|    970|    pub fn to_be_bytes(self) -> [u8; 8] {
   41|    970|        self.value.to_be_bytes()
   42|    970|    }
_RNvXs0_NtCsaP05r1vbY5r_12oxsdatatypes6doubleNtB5_6DoubleINtNtCs9nhK3FOW46N_4core7convert4FromdE4fromCsd92XLxb96zi_8oxigraph:
  101|    700|    fn from(value: f64) -> Self {
  102|    700|        Self { value }
  103|    700|    }
_RNvXsb_NtCsaP05r1vbY5r_12oxsdatatypes6doubleNtB5_6DoubleNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsd92XLxb96zi_8oxigraph:
  195|     30|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  196|     30|        if self.value == f64::INFINITY {
  197|      0|            f.write_str("INF")
  198|     30|        } else if self.value == f64::NEG_INFINITY {
  199|      0|            f.write_str("-INF")
  200|       |        } else {
  201|     30|            self.value.fmt(f)
  202|       |        }
  203|     30|    }
_RNvXsa_NtCsaP05r1vbY5r_12oxsdatatypes6doubleNtB5_6DoubleNtNtNtCs9nhK3FOW46N_4core3str6traits7FromStr8from_strCsd92XLxb96zi_8oxigraph:
  188|    700|    fn from_str(input: &str) -> Result<Self, Self::Err> {
  189|    700|        Ok(f64::from_str(input)?.into())
  190|    700|    }
_RNvXsj_NtCsaP05r1vbY5r_12oxsdatatypes6doubleNtB5_6DoubleNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
   13|    457|#[derive(Debug, Clone, Copy, Default, PartialEq)]

_RNvMNtCsaP05r1vbY5r_12oxsdatatypes8durationNtB2_8Duration11all_secondsB4_:
  112|  4.17k|    pub(crate) const fn all_seconds(self) -> Decimal {
  113|  4.17k|        self.day_time.as_seconds()
  114|  4.17k|    }
_RNvXsd_NtCsaP05r1vbY5r_12oxsdatatypes8durationNtB5_8DurationINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_15DayTimeDurationE4fromB7_:
  569|  4.17k|    fn from(value: DayTimeDuration) -> Self {
  570|  4.17k|        Self {
  571|  4.17k|            year_month: YearMonthDuration::default(),
  572|  4.17k|            day_time: value,
  573|  4.17k|        }
  574|  4.17k|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes8durationNtB2_8Duration10all_monthsB4_:
  106|  4.17k|    pub(crate) const fn all_months(self) -> i64 {
  107|  4.17k|        self.year_month.all_months()
  108|  4.17k|    }
_RNvMs3_NtCsaP05r1vbY5r_12oxsdatatypes8durationNtB5_17YearMonthDuration10all_monthsB7_:
  332|  4.17k|    pub(crate) const fn all_months(self) -> i64 {
  333|  4.17k|        self.months
  334|  4.17k|    }
_RNvXsM_NtCsaP05r1vbY5r_12oxsdatatypes8durationNtB5_17YearMonthDurationNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
  296|  4.17k|#[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy, Hash, Default)]
_RNvMsc_NtCsaP05r1vbY5r_12oxsdatatypes8durationNtB5_15DayTimeDuration10as_secondsB7_:
  519|  4.17k|    pub const fn as_seconds(self) -> Decimal {
  520|  4.17k|        self.seconds
  521|  4.17k|    }
_RNvXs_NtCsaP05r1vbY5r_12oxsdatatypes8durationNtB4_8DurationINtNtCs9nhK3FOW46N_4core7convert7TryFromNtNtB10_4time8DurationE8try_fromB6_:
  177|  4.17k|    fn try_from(value: StdDuration) -> Result<Self, Self::Error> {
  178|  4.17k|        Ok(DayTimeDuration::try_from(value)?.into())
  179|  4.17k|    }
_RNvXsf_NtCsaP05r1vbY5r_12oxsdatatypes8durationNtB5_15DayTimeDurationINtNtCs9nhK3FOW46N_4core7convert7TryFromNtNtB19_4time8DurationE8try_fromB7_:
  594|  4.17k|    fn try_from(value: StdDuration) -> Result<Self, Self::Error> {
  595|  4.17k|        Ok(Self {
  596|  4.17k|            seconds: Decimal::new(
  597|  4.17k|                i128::try_from(value.as_nanos()).map_err(|_| DurationOverflowError)?,
  598|       |                9,
  599|       |            )
  600|  4.17k|            .map_err(|_| DurationOverflowError)?,
  601|       |        })
  602|  4.17k|    }

_RNvXs8_NtCsaP05r1vbY5r_12oxsdatatypes7integerxINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_7IntegerE4fromCsd92XLxb96zi_8oxigraph:
  220|     81|    fn from(value: Integer) -> Self {
  221|     81|        value.value
  222|     81|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7integerNtB2_7Integer13from_be_bytesCsd92XLxb96zi_8oxigraph:
   21|    340|    pub fn from_be_bytes(bytes: [u8; 8]) -> Self {
   22|    340|        Self {
   23|    340|            value: i64::from_be_bytes(bytes),
   24|    340|        }
   25|    340|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7integerNtB2_7Integer11to_be_bytesCsd92XLxb96zi_8oxigraph:
   29|  2.45k|    pub fn to_be_bytes(self) -> [u8; 8] {
   30|  2.45k|        self.value.to_be_bytes()
   31|  2.45k|    }
_RNvXse_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB5_7IntegerNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
    9|    395|#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Ord, PartialOrd, Hash)]
_RNvXs9_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB5_7IntegerNtNtNtCs9nhK3FOW46N_4core3str6traits7FromStr8from_strCsd92XLxb96zi_8oxigraph:
  229|  1.29k|    fn from_str(input: &str) -> Result<Self, Self::Err> {
  230|  1.29k|        Ok(i64::from_str(input)?.into())
  231|  1.29k|    }
_RNvXsa_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB5_7IntegerNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsd92XLxb96zi_8oxigraph:
  236|    170|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  237|    170|        self.value.fmt(f)
  238|    170|    }
_RNvXsk_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB5_7IntegerNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCsd92XLxb96zi_8oxigraph:
    9|      6|#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Ord, PartialOrd, Hash)]
_RNvXs3_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB5_7IntegerINtNtCs9nhK3FOW46N_4core7convert4FromxE4fromCsd92XLxb96zi_8oxigraph:
  179|  1.29k|    fn from(value: i64) -> Self {
  180|  1.29k|        Self { value }
  181|  1.29k|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7integerNtB2_7Integer17is_identical_withCsd92XLxb96zi_8oxigraph:
  136|      4|    pub fn is_identical_with(self, other: Self) -> bool {
  137|      4|        self == other
  138|      4|    }
_RNvMNtCsaP05r1vbY5r_12oxsdatatypes7integerNtB2_7Integer11checked_negCsd92XLxb96zi_8oxigraph:
  104|     94|    pub fn checked_neg(self) -> Option<Self> {
  105|     94|        Some(Self {
  106|     94|            value: self.value.checked_neg()?,
  107|       |        })
  108|     94|    }
_RNvXs2_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB5_7IntegerINtNtCs9nhK3FOW46N_4core7convert4FromlE4fromCsd92XLxb96zi_8oxigraph:
  170|      2|    fn from(value: i32) -> Self {
  171|      2|        Self {
  172|      2|            value: value.into(),
  173|      2|        }
  174|      2|    }
_RINvXsn_NtCsaP05r1vbY5r_12oxsdatatypes7integerNtB6_7IntegerNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsd92XLxb96zi_8oxigraph:
    9|     12|#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Ord, PartialOrd, Hash)]

_RNvXs1o_NtCskGc5T8eVihK_9spargebra7algebraNtB6_11GraphTargetNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
 1354|  1.60k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1h_NtCskGc5T8eVihK_9spargebra7algebraNtB6_12QueryDatasetNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
 1309|  1.48k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsu_NtCskGc5T8eVihK_9spargebra7algebraNtB5_22PropertyPathExpressionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
    8|  4.78k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsB_NtCskGc5T8eVihK_9spargebra7algebraNtB5_10ExpressionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
  101|  7.55k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCskGc5T8eVihK_9spargebra7algebraNtB5_8FunctionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
  321|     18|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsP_NtCskGc5T8eVihK_9spargebra7algebraNtB5_12GraphPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
  518|  21.8k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsI_NtCskGc5T8eVihK_9spargebra7algebraNtB5_8FunctionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsj4YExd6TrWR_7sparopt:
  321|     72|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsu_NtCskGc5T8eVihK_9spargebra7algebraNtB5_22PropertyPathExpressionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsj4YExd6TrWR_7sparopt:
    8|  14.3k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvXsJ_NtCskGc5T8eVihK_9spargebra7algebraNtB6_8FunctionNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsj4YExd6TrWR_7sparopt:
  321|     14|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvXsv_NtCskGc5T8eVihK_9spargebra7algebraNtB6_22PropertyPathExpressionNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsj4YExd6TrWR_7sparopt:
    8|  3.45k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvMsb_NtCskGc5T8eVihK_9spargebra7algebraNtB6_12GraphPattern25lookup_in_scope_variablesNCNvNtB8_6parser12build_select0EB8_:
  934|  2.36k|    fn lookup_in_scope_variables<'a>(&'a self, callback: &mut impl FnMut(&'a Variable)) {
  935|  2.36k|        #[allow(clippy::match_same_arms)]
  936|  2.36k|        match self {
  937|    531|            Self::Bgp { patterns } => {
  938|  1.95k|                for pattern in patterns {
  939|  1.42k|                    lookup_triple_pattern_variables(pattern, callback)
  940|       |                }
  941|       |            }
  942|       |            Self::Path {
  943|    664|                subject, object, ..
  944|       |            } => {
  945|    664|                if let TermPattern::Variable(s) = subject {
  946|    186|                    callback(s);
  947|    478|                }
  948|       |                #[cfg(feature = "rdf-star")]
  949|    664|                if let TermPattern::Triple(s) = subject {
  950|      0|                    lookup_triple_pattern_variables(s, callback)
  951|    664|                }
  952|    664|                if let TermPattern::Variable(o) = object {
  953|    102|                    callback(o);
  954|    562|                }
  955|       |                #[cfg(feature = "rdf-star")]
  956|    664|                if let TermPattern::Triple(o) = object {
  957|      0|                    lookup_triple_pattern_variables(o, callback)
  958|    664|                }
  959|       |            }
  960|    768|            Self::Join { left, right }
  961|     13|            | Self::LeftJoin { left, right, .. }
  962|    781|            | Self::Union { left, right } => {
  963|    781|                left.lookup_in_scope_variables(callback);
  964|    781|                right.lookup_in_scope_variables(callback);
  965|    781|            }
  966|       |            #[cfg(feature = "sep-0006")]
  967|      3|            Self::Lateral { left, right } => {
  968|      3|                left.lookup_in_scope_variables(callback);
  969|      3|                right.lookup_in_scope_variables(callback);
  970|      3|            }
  971|      9|            Self::Graph { name, inner } => {
  972|      9|                if let NamedNodePattern::Variable(g) = &name {
  973|      9|                    callback(g);
  974|      9|                }
  975|      9|                inner.lookup_in_scope_variables(callback);
  976|       |            }
  977|       |            Self::Extend {
  978|      0|                inner, variable, ..
  979|      0|            } => {
  980|      0|                callback(variable);
  981|      0|                inner.lookup_in_scope_variables(callback);
  982|      0|            }
  983|      0|            Self::Minus { left, .. } => left.lookup_in_scope_variables(callback),
  984|       |            Self::Group {
  985|     24|                variables,
  986|     24|                aggregates,
  987|       |                ..
  988|       |            } => {
  989|    107|                for v in variables {
  990|     83|                    callback(v);
  991|     83|                }
  992|     24|                for (v, _) in aggregates {
  993|      0|                    callback(v);
  994|      0|                }
  995|       |            }
  996|    258|            Self::Values { variables, .. } | Self::Project { variables, .. } => {
  997|    795|                for v in variables {
  998|    509|                    callback(v);
  999|    509|                }
 1000|       |            }
 1001|      0|            Self::Service { inner, .. }
 1002|      3|            | Self::Filter { inner, .. }
 1003|      0|            | Self::OrderBy { inner, .. }
 1004|     34|            | Self::Distinct { inner }
 1005|     29|            | Self::Reduced { inner }
 1006|     66|            | Self::Slice { inner, .. } => inner.lookup_in_scope_variables(callback),
 1007|       |        }
 1008|  2.36k|    }
_RINvNtCskGc5T8eVihK_9spargebra7algebra31lookup_triple_pattern_variablesNCNvNtB4_6parser12build_select0EB4_:
 1011|  1.42k|fn lookup_triple_pattern_variables<'a>(
 1012|  1.42k|    pattern: &'a TriplePattern,
 1013|  1.42k|    callback: &mut impl FnMut(&'a Variable),
 1014|  1.42k|) {
 1015|  1.42k|    if let TermPattern::Variable(s) = &pattern.subject {
 1016|     81|        callback(s);
 1017|  1.34k|    }
 1018|       |    #[cfg(feature = "rdf-star")]
 1019|  1.42k|    if let TermPattern::Triple(s) = &pattern.subject {
 1020|      0|        lookup_triple_pattern_variables(s, callback)
 1021|  1.42k|    }
 1022|  1.42k|    if let NamedNodePattern::Variable(p) = &pattern.predicate {
 1023|    900|        callback(p);
 1024|    900|    }
 1025|  1.42k|    if let TermPattern::Variable(o) = &pattern.object {
 1026|    340|        callback(o);
 1027|  1.08k|    }
 1028|       |    #[cfg(feature = "rdf-star")]
 1029|  1.42k|    if let TermPattern::Triple(o) = &pattern.object {
 1030|      0|        lookup_triple_pattern_variables(o, callback)
 1031|  1.42k|    }
 1032|  1.42k|}
_RINvMsb_NtCskGc5T8eVihK_9spargebra7algebraNtB6_12GraphPattern20on_in_scope_variableNCNCNvNtNtB8_6parser6parser28___parse_GroupGraphPatternSub0s_0EB8_:
  930|      3|    pub fn on_in_scope_variable<'a>(&'a self, mut callback: impl FnMut(&'a Variable)) {
  931|      3|        self.lookup_in_scope_variables(&mut callback)
  932|      3|    }
_RINvMsb_NtCskGc5T8eVihK_9spargebra7algebraNtB6_12GraphPattern20on_in_scope_variableNCNvNtB8_6parser12build_select0EB8_:
  930|    721|    pub fn on_in_scope_variable<'a>(&'a self, mut callback: impl FnMut(&'a Variable)) {
  931|    721|        self.lookup_in_scope_variables(&mut callback)
  932|    721|    }
_RINvMsb_NtCskGc5T8eVihK_9spargebra7algebraNtB6_12GraphPattern20on_in_scope_variableNCNvNtB8_6parser12build_selects_0EB8_:
  930|    600|    pub fn on_in_scope_variable<'a>(&'a self, mut callback: impl FnMut(&'a Variable)) {
  931|    600|        self.lookup_in_scope_variables(&mut callback)
  932|    600|    }
_RINvMsb_NtCskGc5T8eVihK_9spargebra7algebraNtB6_12GraphPattern25lookup_in_scope_variablesNCNCNvNtNtB8_6parser6parser28___parse_GroupGraphPatternSub00EB8_:
  934|    477|    fn lookup_in_scope_variables<'a>(&'a self, callback: &mut impl FnMut(&'a Variable)) {
  935|    477|        #[allow(clippy::match_same_arms)]
  936|    477|        match self {
  937|    257|            Self::Bgp { patterns } => {
  938|    386|                for pattern in patterns {
  939|    129|                    lookup_triple_pattern_variables(pattern, callback)
  940|       |                }
  941|       |            }
  942|       |            Self::Path {
  943|    101|                subject, object, ..
  944|       |            } => {
  945|    101|                if let TermPattern::Variable(s) = subject {
  946|      8|                    callback(s);
  947|     93|                }
  948|       |                #[cfg(feature = "rdf-star")]
  949|    101|                if let TermPattern::Triple(s) = subject {
  950|      0|                    lookup_triple_pattern_variables(s, callback)
  951|    101|                }
  952|    101|                if let TermPattern::Variable(o) = object {
  953|      1|                    callback(o);
  954|    100|                }
  955|       |                #[cfg(feature = "rdf-star")]
  956|    101|                if let TermPattern::Triple(o) = object {
  957|      0|                    lookup_triple_pattern_variables(o, callback)
  958|    101|                }
  959|       |            }
  960|    115|            Self::Join { left, right }
  961|      0|            | Self::LeftJoin { left, right, .. }
  962|    115|            | Self::Union { left, right } => {
  963|    115|                left.lookup_in_scope_variables(callback);
  964|    115|                right.lookup_in_scope_variables(callback);
  965|    115|            }
  966|       |            #[cfg(feature = "sep-0006")]
  967|      2|            Self::Lateral { left, right } => {
  968|      2|                left.lookup_in_scope_variables(callback);
  969|      2|                right.lookup_in_scope_variables(callback);
  970|      2|            }
  971|      0|            Self::Graph { name, inner } => {
  972|      0|                if let NamedNodePattern::Variable(g) = &name {
  973|      0|                    callback(g);
  974|      0|                }
  975|      0|                inner.lookup_in_scope_variables(callback);
  976|       |            }
  977|       |            Self::Extend {
  978|      0|                inner, variable, ..
  979|      0|            } => {
  980|      0|                callback(variable);
  981|      0|                inner.lookup_in_scope_variables(callback);
  982|      0|            }
  983|      0|            Self::Minus { left, .. } => left.lookup_in_scope_variables(callback),
  984|       |            Self::Group {
  985|      0|                variables,
  986|      0|                aggregates,
  987|       |                ..
  988|       |            } => {
  989|      0|                for v in variables {
  990|      0|                    callback(v);
  991|      0|                }
  992|      0|                for (v, _) in aggregates {
  993|      0|                    callback(v);
  994|      0|                }
  995|       |            }
  996|      2|            Self::Values { variables, .. } | Self::Project { variables, .. } => {
  997|     27|                for v in variables {
  998|     25|                    callback(v);
  999|     25|                }
 1000|       |            }
 1001|      0|            Self::Service { inner, .. }
 1002|      0|            | Self::Filter { inner, .. }
 1003|      0|            | Self::OrderBy { inner, .. }
 1004|      0|            | Self::Distinct { inner }
 1005|      0|            | Self::Reduced { inner }
 1006|      0|            | Self::Slice { inner, .. } => inner.lookup_in_scope_variables(callback),
 1007|       |        }
 1008|    477|    }
_RINvNtCskGc5T8eVihK_9spargebra7algebra14write_arg_listRNtB2_10ExpressionRINtNtCsjOdcKtOMjJI_5alloc3vec3VecBR_EEB4_:
  304|     90|fn write_arg_list(
  305|     90|    params: impl IntoIterator<Item = impl fmt::Display>,
  306|     90|    f: &mut fmt::Formatter<'_>,
  307|     90|) -> fmt::Result {
  308|     90|    f.write_str("(")?;
  309|     90|    let mut cont = false;
  310|    138|    for p in params {
  311|     48|        if cont {
  312|      2|            f.write_str(", ")?;
  313|     46|        }
  314|     48|        p.fmt(f)?;
  315|     48|        cont = true;
  316|       |    }
  317|     90|    f.write_str(")")
  318|     90|}
_RINvNtCskGc5T8eVihK_9spargebra7algebra31lookup_triple_pattern_variablesNCNCNvNtNtB4_6parser6parser28___parse_GroupGraphPatternSub00EB4_:
 1011|    129|fn lookup_triple_pattern_variables<'a>(
 1012|    129|    pattern: &'a TriplePattern,
 1013|    129|    callback: &mut impl FnMut(&'a Variable),
 1014|    129|) {
 1015|    129|    if let TermPattern::Variable(s) = &pattern.subject {
 1016|      0|        callback(s);
 1017|    129|    }
 1018|       |    #[cfg(feature = "rdf-star")]
 1019|    129|    if let TermPattern::Triple(s) = &pattern.subject {
 1020|      0|        lookup_triple_pattern_variables(s, callback)
 1021|    129|    }
 1022|    129|    if let NamedNodePattern::Variable(p) = &pattern.predicate {
 1023|     71|        callback(p);
 1024|     71|    }
 1025|    129|    if let TermPattern::Variable(o) = &pattern.object {
 1026|     40|        callback(o);
 1027|     89|    }
 1028|       |    #[cfg(feature = "rdf-star")]
 1029|    129|    if let TermPattern::Triple(o) = &pattern.object {
 1030|      0|        lookup_triple_pattern_variables(o, callback)
 1031|    129|    }
 1032|    129|}
_RINvMsb_NtCskGc5T8eVihK_9spargebra7algebraNtB6_12GraphPattern20on_in_scope_variableNCNCNvNtNtB8_6parser6parser28___parse_GroupGraphPatternSub00EB8_:
  930|    243|    pub fn on_in_scope_variable<'a>(&'a self, mut callback: impl FnMut(&'a Variable)) {
  931|    243|        self.lookup_in_scope_variables(&mut callback)
  932|    243|    }
_RINvMsb_NtCskGc5T8eVihK_9spargebra7algebraNtB6_12GraphPattern25lookup_in_scope_variablesNCNvNtB8_6parser12build_selects_0EB8_:
  934|  4.27k|    fn lookup_in_scope_variables<'a>(&'a self, callback: &mut impl FnMut(&'a Variable)) {
  935|  4.27k|        #[allow(clippy::match_same_arms)]
  936|  4.27k|        match self {
  937|    639|            Self::Bgp { patterns } => {
  938|  4.14k|                for pattern in patterns {
  939|  3.50k|                    lookup_triple_pattern_variables(pattern, callback)
  940|       |                }
  941|       |            }
  942|       |            Self::Path {
  943|  1.54k|                subject, object, ..
  944|       |            } => {
  945|  1.54k|                if let TermPattern::Variable(s) = subject {
  946|    307|                    callback(s);
  947|  1.24k|                }
  948|       |                #[cfg(feature = "rdf-star")]
  949|  1.54k|                if let TermPattern::Triple(s) = subject {
  950|      0|                    lookup_triple_pattern_variables(s, callback)
  951|  1.54k|                }
  952|  1.54k|                if let TermPattern::Variable(o) = object {
  953|    292|                    callback(o);
  954|  1.25k|                }
  955|       |                #[cfg(feature = "rdf-star")]
  956|  1.54k|                if let TermPattern::Triple(o) = object {
  957|      0|                    lookup_triple_pattern_variables(o, callback)
  958|  1.54k|                }
  959|       |            }
  960|  1.72k|            Self::Join { left, right }
  961|     39|            | Self::LeftJoin { left, right, .. }
  962|  1.76k|            | Self::Union { left, right } => {
  963|  1.76k|                left.lookup_in_scope_variables(callback);
  964|  1.76k|                right.lookup_in_scope_variables(callback);
  965|  1.76k|            }
  966|       |            #[cfg(feature = "sep-0006")]
  967|     17|            Self::Lateral { left, right } => {
  968|     17|                left.lookup_in_scope_variables(callback);
  969|     17|                right.lookup_in_scope_variables(callback);
  970|     17|            }
  971|      8|            Self::Graph { name, inner } => {
  972|      8|                if let NamedNodePattern::Variable(g) = &name {
  973|      8|                    callback(g);
  974|      8|                }
  975|      8|                inner.lookup_in_scope_variables(callback);
  976|       |            }
  977|       |            Self::Extend {
  978|      0|                inner, variable, ..
  979|      0|            } => {
  980|      0|                callback(variable);
  981|      0|                inner.lookup_in_scope_variables(callback);
  982|      0|            }
  983|      2|            Self::Minus { left, .. } => left.lookup_in_scope_variables(callback),
  984|       |            Self::Group {
  985|      0|                variables,
  986|      0|                aggregates,
  987|       |                ..
  988|       |            } => {
  989|      0|                for v in variables {
  990|      0|                    callback(v);
  991|      0|                }
  992|      0|                for (v, _) in aggregates {
  993|      0|                    callback(v);
  994|      0|                }
  995|       |            }
  996|    105|            Self::Values { variables, .. } | Self::Project { variables, .. } => {
  997|  2.19k|                for v in variables {
  998|  1.99k|                    callback(v);
  999|  1.99k|                }
 1000|       |            }
 1001|      0|            Self::Service { inner, .. }
 1002|     12|            | Self::Filter { inner, .. }
 1003|      0|            | Self::OrderBy { inner, .. }
 1004|     29|            | Self::Distinct { inner }
 1005|     65|            | Self::Reduced { inner }
 1006|    106|            | Self::Slice { inner, .. } => inner.lookup_in_scope_variables(callback),
 1007|       |        }
 1008|  4.27k|    }
_RINvNtCskGc5T8eVihK_9spargebra7algebra31lookup_triple_pattern_variablesNCNvNtB4_6parser12build_selects_0EB4_:
 1011|  3.50k|fn lookup_triple_pattern_variables<'a>(
 1012|  3.50k|    pattern: &'a TriplePattern,
 1013|  3.50k|    callback: &mut impl FnMut(&'a Variable),
 1014|  3.50k|) {
 1015|  3.50k|    if let TermPattern::Variable(s) = &pattern.subject {
 1016|    178|        callback(s);
 1017|  3.32k|    }
 1018|       |    #[cfg(feature = "rdf-star")]
 1019|  3.50k|    if let TermPattern::Triple(s) = &pattern.subject {
 1020|      0|        lookup_triple_pattern_variables(s, callback)
 1021|  3.50k|    }
 1022|  3.50k|    if let NamedNodePattern::Variable(p) = &pattern.predicate {
 1023|  2.15k|        callback(p);
 1024|  2.15k|    }
 1025|  3.50k|    if let TermPattern::Variable(o) = &pattern.object {
 1026|    774|        callback(o);
 1027|  2.72k|    }
 1028|       |    #[cfg(feature = "rdf-star")]
 1029|  3.50k|    if let TermPattern::Triple(o) = &pattern.object {
 1030|      0|        lookup_triple_pattern_variables(o, callback)
 1031|  3.50k|    }
 1032|  3.50k|}
_RINvMsb_NtCskGc5T8eVihK_9spargebra7algebraNtB6_12GraphPattern25lookup_in_scope_variablesNCNCNvNtNtB8_6parser6parser28___parse_GroupGraphPatternSub0s_0EB8_:
  934|      9|    fn lookup_in_scope_variables<'a>(&'a self, callback: &mut impl FnMut(&'a Variable)) {
  935|      9|        #[allow(clippy::match_same_arms)]
  936|      9|        match self {
  937|      3|            Self::Bgp { patterns } => {
  938|      3|                for pattern in patterns {
  939|      0|                    lookup_triple_pattern_variables(pattern, callback)
  940|       |                }
  941|       |            }
  942|       |            Self::Path {
  943|      0|                subject, object, ..
  944|       |            } => {
  945|      0|                if let TermPattern::Variable(s) = subject {
  946|      0|                    callback(s);
  947|      0|                }
  948|       |                #[cfg(feature = "rdf-star")]
  949|      0|                if let TermPattern::Triple(s) = subject {
  950|      0|                    lookup_triple_pattern_variables(s, callback)
  951|      0|                }
  952|      0|                if let TermPattern::Variable(o) = object {
  953|      0|                    callback(o);
  954|      0|                }
  955|       |                #[cfg(feature = "rdf-star")]
  956|      0|                if let TermPattern::Triple(o) = object {
  957|      0|                    lookup_triple_pattern_variables(o, callback)
  958|      0|                }
  959|       |            }
  960|      0|            Self::Join { left, right }
  961|      0|            | Self::LeftJoin { left, right, .. }
  962|      0|            | Self::Union { left, right } => {
  963|      0|                left.lookup_in_scope_variables(callback);
  964|      0|                right.lookup_in_scope_variables(callback);
  965|      0|            }
  966|       |            #[cfg(feature = "sep-0006")]
  967|      2|            Self::Lateral { left, right } => {
  968|      2|                left.lookup_in_scope_variables(callback);
  969|      2|                right.lookup_in_scope_variables(callback);
  970|      2|            }
  971|      0|            Self::Graph { name, inner } => {
  972|      0|                if let NamedNodePattern::Variable(g) = &name {
  973|      0|                    callback(g);
  974|      0|                }
  975|      0|                inner.lookup_in_scope_variables(callback);
  976|       |            }
  977|       |            Self::Extend {
  978|      0|                inner, variable, ..
  979|      0|            } => {
  980|      0|                callback(variable);
  981|      0|                inner.lookup_in_scope_variables(callback);
  982|      0|            }
  983|      0|            Self::Minus { left, .. } => left.lookup_in_scope_variables(callback),
  984|       |            Self::Group {
  985|      0|                variables,
  986|      0|                aggregates,
  987|       |                ..
  988|       |            } => {
  989|      0|                for v in variables {
  990|      0|                    callback(v);
  991|      0|                }
  992|      0|                for (v, _) in aggregates {
  993|      0|                    callback(v);
  994|      0|                }
  995|       |            }
  996|      2|            Self::Values { variables, .. } | Self::Project { variables, .. } => {
  997|      8|                for v in variables {
  998|      6|                    callback(v);
  999|      6|                }
 1000|       |            }
 1001|      0|            Self::Service { inner, .. }
 1002|      0|            | Self::Filter { inner, .. }
 1003|      0|            | Self::OrderBy { inner, .. }
 1004|      2|            | Self::Distinct { inner }
 1005|      0|            | Self::Reduced { inner }
 1006|      2|            | Self::Slice { inner, .. } => inner.lookup_in_scope_variables(callback),
 1007|       |        }
 1008|      9|    }
_RNvXs5_NtCskGc5T8eVihK_9spargebra7algebraNtB5_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableE4from:
  290|  3.84k|    fn from(v: Variable) -> Self {
  291|  3.84k|        Self::Variable(v)
  292|  3.84k|    }
_RNvXso_NtCskGc5T8eVihK_9spargebra7algebraNtB5_11GraphTargetINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_4term9GraphNameE4from:
 1392|    356|    fn from(graph_name: GraphName) -> Self {
 1393|    356|        match graph_name {
 1394|    245|            GraphName::NamedNode(node) => Self::NamedNode(node),
 1395|    111|            GraphName::DefaultGraph => Self::DefaultGraph,
 1396|       |        }
 1397|    356|    }
_RNvXs0_NtCskGc5T8eVihK_9spargebra7algebraNtB5_22PropertyPathExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeE4from:
   95|  8.71k|    fn from(p: NamedNode) -> Self {
   96|  8.71k|        Self::NamedNode(p)
   97|  8.71k|    }
_RNvXs3_NtCskGc5T8eVihK_9spargebra7algebraNtB5_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeE4from:
  278|    437|    fn from(p: NamedNode) -> Self {
  279|    437|        Self::NamedNode(p)
  280|    437|    }
_RNvXs4_NtCskGc5T8eVihK_9spargebra7algebraNtB5_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf7literal7LiteralE4from:
  284|  2.20k|    fn from(p: Literal) -> Self {
  285|  2.20k|        Self::Literal(p)
  286|  2.20k|    }
_RNvXsc_NtCskGc5T8eVihK_9spargebra7algebraNtB5_22SparqlGraphRootPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1040|     90|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1041|     90|        let mut distinct = false;
 1042|     90|        let mut reduced = false;
 1043|     90|        let mut order = None;
 1044|     90|        let mut start = 0;
 1045|     90|        let mut length = None;
 1046|     90|        let mut project: &[Variable] = &[];
 1047|     90|
 1048|     90|        let mut child = self.pattern;
 1049|       |        loop {
 1050|    104|            match child {
 1051|      0|                GraphPattern::OrderBy { inner, expression } => {
 1052|      0|                    order = Some(expression);
 1053|      0|                    child = inner;
 1054|      0|                }
 1055|    104|                GraphPattern::Project { inner, variables } if project.is_empty() => {
 1056|     92|                    project = variables;
 1057|     92|                    child = inner;
 1058|     92|                }
 1059|     72|                GraphPattern::Distinct { inner } => {
 1060|     72|                    distinct = true;
 1061|     72|                    child = inner;
 1062|     72|                }
 1063|      0|                GraphPattern::Reduced { inner } => {
 1064|      0|                    reduced = true;
 1065|      0|                    child = inner;
 1066|      0|                }
 1067|       |                GraphPattern::Slice {
 1068|      0|                    inner,
 1069|      0|                    start: s,
 1070|      0|                    length: l,
 1071|      0|                } => {
 1072|      0|                    start = *s;
 1073|      0|                    length = *l;
 1074|      0|                    child = inner;
 1075|      0|                }
 1076|     90|                p => {
 1077|     90|                    f.write_str("SELECT")?;
 1078|     90|                    if distinct {
 1079|     66|                        f.write_str(" DISTINCT")?;
 1080|     24|                    }
 1081|     90|                    if reduced {
 1082|      0|                        f.write_str(" REDUCED")?;
 1083|     90|                    }
 1084|     90|                    if project.is_empty() {
 1085|     20|                        f.write_str(" *")?;
 1086|       |                    } else {
 1087|    172|                        for v in project {
 1088|    102|                            write!(f, " {v}")?;
 1089|       |                        }
 1090|       |                    }
 1091|     90|                    if let Some(dataset) = self.dataset {
 1092|      0|                        write!(f, " {dataset}")?;
 1093|     90|                    }
 1094|     90|                    write!(f, " WHERE {{ {p} }}")?;
 1095|     90|                    if let Some(order) = order {
 1096|      0|                        f.write_str(" ORDER BY")?;
 1097|      0|                        for c in order {
 1098|      0|                            write!(f, " {c}")?;
 1099|       |                        }
 1100|     90|                    }
 1101|     90|                    if start > 0 {
 1102|      0|                        write!(f, " OFFSET {start}")?;
 1103|     90|                    }
 1104|     90|                    if let Some(length) = length {
 1105|      0|                        write!(f, " LIMIT {length}")?;
 1106|     90|                    }
 1107|     90|                    return Ok(());
 1108|       |                }
 1109|       |            }
 1110|       |        }
 1111|     90|    }
_RNvXs_NtCskGc5T8eVihK_9spargebra7algebraNtB4_22PropertyPathExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
   71|  72.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   72|  72.8k|        match self {
   73|  18.4k|            Self::NamedNode(p) => p.fmt(f),
   74|  23.5k|            Self::Reverse(p) => write!(f, "^({p})"),
   75|  8.22k|            Self::Sequence(a, b) => write!(f, "({a} / {b})"),
   76|  3.72k|            Self::Alternative(a, b) => write!(f, "({a} | {b})"),
   77|  1.83k|            Self::ZeroOrMore(p) => write!(f, "({p})*"),
   78|  4.13k|            Self::OneOrMore(p) => write!(f, "({p})+"),
   79|  9.76k|            Self::ZeroOrOne(p) => write!(f, "({p})?"),
   80|  3.24k|            Self::NegatedPropertySet(p) => {
   81|  3.24k|                f.write_str("!(")?;
   82|  13.0k|                for (i, c) in p.iter().enumerate() {
   83|  13.0k|                    if i > 0 {
   84|  9.84k|                        f.write_str(" | ")?;
   85|  3.24k|                    }
   86|  13.0k|                    write!(f, "{c}")?;
   87|       |                }
   88|  3.24k|                f.write_str(")")
   89|       |            }
   90|       |        }
   91|  72.8k|    }
_RNvXs2_NtCskGc5T8eVihK_9spargebra7algebraNtB5_10ExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  218|  16.1k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  219|  16.1k|        match self {
  220|    382|            Self::NamedNode(node) => node.fmt(f),
  221|  3.00k|            Self::Literal(l) => l.fmt(f),
  222|  3.38k|            Self::Variable(var) => var.fmt(f),
  223|     30|            Self::Or(a, b) => write!(f, "({a} || {b})"),
  224|    190|            Self::And(a, b) => write!(f, "({a} && {b})"),
  225|    609|            Self::Equal(a, b) => {
  226|    609|                write!(f, "({a} = {b})")
  227|       |            }
  228|      2|            Self::SameTerm(a, b) => {
  229|      2|                write!(f, "sameTerm({a}, {b})")
  230|       |            }
  231|     32|            Self::Greater(a, b) => {
  232|     32|                write!(f, "({a} > {b})")
  233|       |            }
  234|    122|            Self::GreaterOrEqual(a, b) => write!(f, "({a} >= {b})"),
  235|      8|            Self::Less(a, b) => {
  236|      8|                write!(f, "({a} < {b})")
  237|       |            }
  238|     16|            Self::LessOrEqual(a, b) => write!(f, "({a} <= {b})"),
  239|      0|            Self::In(a, b) => {
  240|      0|                write!(f, "({a} IN ")?;
  241|      0|                write_arg_list(b, f)?;
  242|      0|                f.write_str(")")
  243|       |            }
  244|    178|            Self::Add(a, b) => {
  245|    178|                write!(f, "{a} + {b}")
  246|       |            }
  247|  1.24k|            Self::Subtract(a, b) => {
  248|  1.24k|                write!(f, "{a} - {b}")
  249|       |            }
  250|    392|            Self::Multiply(a, b) => {
  251|    392|                write!(f, "{a} * {b}")
  252|       |            }
  253|  2.38k|            Self::Divide(a, b) => {
  254|  2.38k|                write!(f, "{a} / {b}")
  255|       |            }
  256|    212|            Self::UnaryPlus(e) => write!(f, "+{e}"),
  257|  1.61k|            Self::UnaryMinus(e) => write!(f, "-{e}"),
  258|  1.55k|            Self::Not(e) => match e.as_ref() {
  259|     37|                Self::Exists(p) => write!(f, "NOT EXISTS {{ {p} }}"),
  260|  1.51k|                e => write!(f, "!{e}"),
  261|       |            },
  262|     36|            Self::FunctionCall(function, parameters) => {
  263|     36|                write!(f, "{function}")?;
  264|     36|                write_arg_list(parameters, f)
  265|       |            }
  266|    130|            Self::Bound(v) => write!(f, "BOUND({v})"),
  267|     50|            Self::Exists(p) => write!(f, "EXISTS {{ {p} }}"),
  268|    518|            Self::If(a, b, c) => write!(f, "IF({a}, {b}, {c})"),
  269|     54|            Self::Coalesce(parameters) => {
  270|     54|                f.write_str("COALESCE")?;
  271|     54|                write_arg_list(parameters, f)
  272|       |            }
  273|       |        }
  274|  16.1k|    }
_RNvXsu_NtCskGc5T8eVihK_9spargebra7algebraNtB5_22PropertyPathExpressionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
    8|   176k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsa_NtCskGc5T8eVihK_9spargebra7algebraNtB5_12GraphPatternNtNtCs9nhK3FOW46N_4core7default7Default7default:
  719|  3.01k|    fn default() -> Self {
  720|  3.01k|        Self::Bgp {
  721|  3.01k|            patterns: Vec::default(),
  722|  3.01k|        }
  723|  3.01k|    }
_RNvXs8_NtCskGc5T8eVihK_9spargebra7algebraNtB5_8FunctionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  452|     36|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  453|     36|        match self {
  454|      8|            Self::Str => f.write_str("STR"),
  455|      4|            Self::Lang => f.write_str("LANG"),
  456|      0|            Self::LangMatches => f.write_str("LANGMATCHES"),
  457|      0|            Self::Datatype => f.write_str("DATATYPE"),
  458|      0|            Self::Iri => f.write_str("IRI"),
  459|      8|            Self::BNode => f.write_str("BNODE"),
  460|      0|            Self::Rand => f.write_str("RAND"),
  461|      0|            Self::Abs => f.write_str("ABS"),
  462|      0|            Self::Ceil => f.write_str("CEIL"),
  463|      0|            Self::Floor => f.write_str("FLOOR"),
  464|      0|            Self::Round => f.write_str("ROUND"),
  465|      0|            Self::Concat => f.write_str("CONCAT"),
  466|      0|            Self::SubStr => f.write_str("SUBSTR"),
  467|      0|            Self::StrLen => f.write_str("STRLEN"),
  468|      0|            Self::Replace => f.write_str("REPLACE"),
  469|      0|            Self::UCase => f.write_str("UCASE"),
  470|      0|            Self::LCase => f.write_str("LCASE"),
  471|      0|            Self::EncodeForUri => f.write_str("ENCODE_FOR_URI"),
  472|      0|            Self::Contains => f.write_str("CONTAINS"),
  473|      0|            Self::StrStarts => f.write_str("STRSTARTS"),
  474|      0|            Self::StrEnds => f.write_str("STRENDS"),
  475|      0|            Self::StrBefore => f.write_str("STRBEFORE"),
  476|      0|            Self::StrAfter => f.write_str("STRAFTER"),
  477|      0|            Self::Year => f.write_str("YEAR"),
  478|      0|            Self::Month => f.write_str("MONTH"),
  479|      0|            Self::Day => f.write_str("DAY"),
  480|      0|            Self::Hours => f.write_str("HOURS"),
  481|      0|            Self::Minutes => f.write_str("MINUTES"),
  482|      0|            Self::Seconds => f.write_str("SECONDS"),
  483|      0|            Self::Timezone => f.write_str("TIMEZONE"),
  484|      0|            Self::Tz => f.write_str("TZ"),
  485|      0|            Self::Now => f.write_str("NOW"),
  486|      0|            Self::Uuid => f.write_str("UUID"),
  487|      0|            Self::StrUuid => f.write_str("STRUUID"),
  488|      0|            Self::Md5 => f.write_str("MD5"),
  489|      0|            Self::Sha1 => f.write_str("SHA1"),
  490|      0|            Self::Sha256 => f.write_str("SHA256"),
  491|      0|            Self::Sha384 => f.write_str("SHA384"),
  492|      0|            Self::Sha512 => f.write_str("SHA512"),
  493|      0|            Self::StrLang => f.write_str("STRLANG"),
  494|      2|            Self::StrDt => f.write_str("STRDT"),
  495|      2|            Self::IsIri => f.write_str("isIRI"),
  496|      8|            Self::IsBlank => f.write_str("isBLANK"),
  497|      0|            Self::IsLiteral => f.write_str("isLITERAL"),
  498|      4|            Self::IsNumeric => f.write_str("isNUMERIC"),
  499|      0|            Self::Regex => f.write_str("REGEX"),
  500|       |            #[cfg(feature = "rdf-star")]
  501|      0|            Self::Triple => f.write_str("TRIPLE"),
  502|       |            #[cfg(feature = "rdf-star")]
  503|      0|            Self::Subject => f.write_str("SUBJECT"),
  504|       |            #[cfg(feature = "rdf-star")]
  505|      0|            Self::Predicate => f.write_str("PREDICATE"),
  506|       |            #[cfg(feature = "rdf-star")]
  507|      0|            Self::Object => f.write_str("OBJECT"),
  508|       |            #[cfg(feature = "rdf-star")]
  509|      0|            Self::IsTriple => f.write_str("isTRIPLE"),
  510|       |            #[cfg(feature = "sep-0002")]
  511|      0|            Self::Adjust => f.write_str("ADJUST"),
  512|      0|            Self::Custom(iri) => iri.fmt(f),
  513|       |        }
  514|     36|    }
_RNvXs9_NtCskGc5T8eVihK_9spargebra7algebraNtB5_12GraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  595|  1.08k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  596|  1.08k|        match self {
  597|     56|            Self::Bgp { patterns } => {
  598|    144|                for pattern in patterns {
  599|     88|                    write!(f, "{pattern} .")?
  600|       |                }
  601|     56|                Ok(())
  602|       |            }
  603|       |            Self::Path {
  604|    304|                subject,
  605|    304|                path,
  606|    304|                object,
  607|    304|            } => write!(f, "{subject} {path} {object} ."),
  608|    308|            Self::Join { left, right } => {
  609|    308|                #[allow(clippy::match_same_arms)]
  610|    308|                match right.as_ref() {
  611|       |                    Self::LeftJoin { .. }
  612|       |                    | Self::Minus { .. }
  613|       |                    | Self::Extend { .. }
  614|       |                    | Self::Filter { .. } => {
  615|       |                        // The second block might be considered as a modification of the first one.
  616|      0|                        write!(f, "{left} {{ {right} }}")
  617|       |                    }
  618|       |                    #[cfg(feature = "sep-0006")]
  619|       |                    Self::Lateral { .. } => {
  620|      0|                        write!(f, "{left} {{ {right} }}")
  621|       |                    }
  622|    308|                    _ => write!(f, "{left} {right}"),
  623|       |                }
  624|       |            }
  625|       |            Self::LeftJoin {
  626|     10|                left,
  627|     10|                right,
  628|     10|                expression,
  629|       |            } => {
  630|     10|                if let Some(expr) = expression {
  631|      0|                    write!(f, "{left} OPTIONAL {{ {right} FILTER({expr}) }}")
  632|       |                } else {
  633|     10|                    write!(f, "{left} OPTIONAL {{ {right} }}")
  634|       |                }
  635|       |            }
  636|       |            #[cfg(feature = "sep-0006")]
  637|      2|            Self::Lateral { left, right } => {
  638|      2|                write!(f, "{left} LATERAL {{ {right} }}")
  639|       |            }
  640|      0|            Self::Filter { expr, inner } => {
  641|      0|                write!(f, "{inner} FILTER({expr})")
  642|       |            }
  643|      0|            Self::Union { left, right } => write!(f, "{{ {left} }} UNION {{ {right} }}"),
  644|    242|            Self::Graph { name, inner } => {
  645|    242|                write!(f, "GRAPH {name} {{ {inner} }}")
  646|       |            }
  647|       |            Self::Extend {
  648|     22|                inner,
  649|     22|                variable,
  650|     22|                expression,
  651|     22|            } => write!(f, "{inner} BIND({expression} AS {variable})"),
  652|      0|            Self::Minus { left, right } => write!(f, "{left} MINUS {{ {right} }}"),
  653|       |            Self::Service {
  654|      0|                name,
  655|      0|                inner,
  656|      0|                silent,
  657|      0|            } => {
  658|      0|                if *silent {
  659|      0|                    write!(f, "SERVICE SILENT {name} {{ {inner} }}")
  660|       |                } else {
  661|      0|                    write!(f, "SERVICE {name} {{ {inner} }}")
  662|       |                }
  663|       |            }
  664|       |            Self::Values {
  665|     47|                variables,
  666|     47|                bindings,
  667|     47|            } => {
  668|     47|                f.write_str("VALUES ( ")?;
  669|     47|                for var in variables {
  670|      0|                    write!(f, "{var} ")?;
  671|       |                }
  672|     47|                f.write_str(") { ")?;
  673|     94|                for row in bindings {
  674|     47|                    f.write_str("( ")?;
  675|     47|                    for val in row {
  676|      0|                        match val {
  677|      0|                            Some(val) => write!(f, "{val} "),
  678|      0|                            None => f.write_str("UNDEF "),
  679|      0|                        }?;
  680|       |                    }
  681|     47|                    f.write_str(") ")?;
  682|       |                }
  683|     47|                f.write_str(" }")
  684|       |            }
  685|       |            Self::Group {
  686|      0|                inner,
  687|      0|                variables,
  688|      0|                aggregates,
  689|      0|            } => {
  690|      0|                f.write_str("{SELECT")?;
  691|      0|                for (a, v) in aggregates {
  692|      0|                    write!(f, " ({v} AS {a})")?;
  693|       |                }
  694|      0|                for b in variables {
  695|      0|                    write!(f, " {b}")?;
  696|       |                }
  697|      0|                write!(f, " WHERE {{ {inner} }}")?;
  698|      0|                if !variables.is_empty() {
  699|      0|                    f.write_str(" GROUP BY")?;
  700|      0|                    for v in variables {
  701|      0|                        write!(f, " {v}")?;
  702|       |                    }
  703|      0|                }
  704|      0|                f.write_str("}")
  705|       |            }
  706|     90|            p => write!(
  707|     90|                f,
  708|     90|                "{{ {} }}",
  709|     90|                SparqlGraphRootPattern {
  710|     90|                    pattern: p,
  711|     90|                    dataset: None
  712|     90|                }
  713|     90|            ),
  714|       |        }
  715|  1.08k|    }
_RNvXsn_NtCskGc5T8eVihK_9spargebra7algebraNtB5_11GraphTargetINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeE4from:
 1386|    852|    fn from(node: NamedNode) -> Self {
 1387|    852|        Self::NamedNode(node)
 1388|    852|    }

_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_PathElt_op0B7_:
 1527|    854|            "*" { '*' } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_GroupConditions0_0B7_:
  938|      1|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_PathAlternative_item0B7_:
 1508|  20.1k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_VarOrIri0B7_:
 1690|  4.94k|            v:Var() { v.into() } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser29___parse_InlineDataFull_values0B7_:
 1293|    204|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser32___parse_MultiplicativeExpression0B7_:
 1746|  7.29k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  3.28k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  2.90k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|      0|            Some(_) => unreachable!(),
 1750|  4.01k|            None => a
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_GraphRefAlls_0B7_:
 1142|    186|            / i("DEFAULT") { GraphTarget::DefaultGraph }
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_QuadsNotTriples00B9_:
 1164|  12.1k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_GroupClause00B9_:
  922|    283|            let clauses = c.into_iter().map(|(e, vo)| {
  923|    283|                if let Expression::Variable(v) = e {
  924|    248|                    v
  925|       |                } else {
  926|     35|                    let v = vo.unwrap_or_else(variable);
  927|     35|                    projections.push((e, v.clone()));
  928|     35|                    v
  929|       |                }
  930|    283|            }).collect();
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_BuiltInCallsH_0B7_:
 1837|      5|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser13___parse_Clear0B7_:
  983|  1.14k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  1.14k|            vec![GraphUpdateOperation::Clear { silent, graph }]
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser29___parse_Quads_TriplesTemplate0B7_:
 1158|  1.76k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  1.76k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_UnaryExpression0B7_:
 1756|  7.29k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  3.50k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  2.50k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  2.24k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|      0|            Some(_) => unreachable!(),
 1761|  3.79k|            None => e,
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_RDFLiteral0B7_:
 1917|    138|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_Modify_with0B7_:
 1108|  1.77k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_Modify_clear0B7_:
 1114|  4.09k|        rule Modify_clear() = {
 1115|  4.09k|            state.used_bnodes.clear();
 1116|  4.09k|            state.currently_used_bnodes.clear();
 1117|  4.09k|        }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser9___parse_i0B7_:
  778|   226k|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|       |            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|       |                Ok((vars, vals))
 1288|       |            } else {
 1289|       |                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|       |            }
 1291|       |        }
 1292|       |        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|       |        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|       |        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|       |
 1296|       |        rule DataBlockValue() -> Option<GroundTerm> =
 1297|       |            t:QuotedTripleData() {?
 1298|       |                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|       |            } /
 1301|       |            i:iri() { Some(i.into()) } /
 1302|       |            l:RDFLiteral() { Some(l.into()) } /
 1303|       |            l:NumericLiteral() { Some(l.into()) } /
 1304|       |            l:BooleanLiteral() { Some(l.into()) } /
 1305|       |            i("UNDEF") { None }
 1306|       |
 1307|       |        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|       |            PartialGraphPattern::Minus(p)
 1309|       |        }
 1310|       |
 1311|       |        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|       |            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|       |            }).map(PartialGraphPattern::Other)
 1315|       |        }
 1316|       |        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|       |
 1318|       |        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|       |            PartialGraphPattern::Filter(c)
 1320|       |        }
 1321|       |
 1322|       |        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|       |
 1324|       |        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|       |            Expression::FunctionCall(Function::Custom(f), a)
 1326|       |        }
 1327|       |
 1328|       |        rule ArgList() -> Vec<Expression> =
 1329|       |            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|       |            NIL() { Vec::new() }
 1331|       |        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|       |
 1333|       |        rule ExpressionList() -> Vec<Expression> =
 1334|       |            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|       |            NIL() { Vec::new() }
 1336|       |        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|       |
 1338|       |        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|       |
 1340|       |        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|       |            p.into_iter().flatten().collect()
 1342|       |        }
 1343|       |        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|       |
 1345|       |        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|       |            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|       |                let mut patterns = po.patterns;
 1348|       |                for (p, os) in po.focus {
 1349|       |                    for o in os {
 1350|       |                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|       |                    }
 1352|       |                }
 1353|       |                Ok(patterns)
 1354|       |            } /
 1355|       |            s:TriplesNode() _ po:PropertyList() {?
 1356|       |                let mut patterns = s.patterns;
 1357|       |                patterns.extend(po.patterns);
 1358|       |                for (p, os) in po.focus {
 1359|       |                    for o in os {
 1360|       |                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|       |                    }
 1362|       |                }
 1363|       |                Ok(patterns)
 1364|       |            }
 1365|       |
 1366|       |        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|       |            PropertyListNotEmpty() /
 1368|       |            { FocusedTriplePattern::default() }
 1369|       |
 1370|       |        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|       |            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|       |                a.focus.push(b.focus);
 1373|       |                a.patterns.extend(b.patterns);
 1374|       |                a
 1375|       |            })
 1376|       |        }
 1377|       |        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|       |            FocusedTriplePattern {
 1379|       |                focus: (p, o.focus),
 1380|       |                patterns: o.patterns
 1381|       |            }
 1382|       |        }
 1383|       |
 1384|       |        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|       |
 1386|       |        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|       |            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|       |                a.focus.push(b.focus);
 1389|       |                a.patterns.extend_from_slice(&b.patterns);
 1390|       |                a
 1391|       |            })
 1392|       |        }
 1393|       |        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|       |
 1395|       |        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|       |            if let Some(a) = a {
 1397|       |                let mut patterns = g.patterns;
 1398|       |                patterns.extend(a.patterns);
 1399|       |                FocusedTriplePattern {
 1400|       |                    focus: AnnotatedTerm {
 1401|       |                        term: g.focus,
 1402|       |                        annotations: a.focus
 1403|       |                    },
 1404|       |                    patterns
 1405|       |                }
 1406|       |            } else {
 1407|       |                FocusedTriplePattern {
 1408|       |                    focus: AnnotatedTerm {
 1409|       |                        term: g.focus,
 1410|       |                        annotations: Vec::new()
 1411|       |                    },
 1412|       |                    patterns: g.patterns
 1413|       |                }
 1414|       |            }
 1415|       |        }
 1416|       |
 1417|       |        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|       |            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|       |                let mut patterns = po.patterns;
 1420|       |                for (p, os) in po.focus {
 1421|       |                    for o in os {
 1422|       |                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|       |                    }
 1424|       |                }
 1425|       |                Ok(patterns)
 1426|       |            } /
 1427|       |            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|       |                let mut patterns = s.patterns;
 1429|       |                patterns.extend(po.patterns);
 1430|       |                for (p, os) in po.focus {
 1431|       |                    for o in os {
 1432|       |                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|       |                    }
 1434|       |                }
 1435|       |                Ok(patterns)
 1436|       |            }
 1437|       |
 1438|       |        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|       |            PropertyListPathNotEmpty() /
 1440|       |            { FocusedTripleOrPathPattern::default() }
 1441|       |
 1442|       |        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|       |                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|       |                    focus: vec![(hp, ho.focus)],
 1445|       |                    patterns: ho.patterns
 1446|       |                }, |mut a, b| {
 1447|       |                    a.focus.push(b.focus);
 1448|       |                    a.patterns.extend(b.patterns);
 1449|       |                    a
 1450|       |                })
 1451|       |        }
 1452|       |        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|       |            c
 1454|       |        }
 1455|       |        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|       |            FocusedTripleOrPathPattern {
 1457|       |                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|       |                patterns: o.patterns
 1459|       |            }
 1460|       |        }
 1461|       |
 1462|       |        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|       |            p.into()
 1464|       |        }
 1465|       |
 1466|       |        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|       |            v.into()
 1468|       |        }
 1469|       |
 1470|       |        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|       |            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|       |                a.focus.push(b.focus);
 1473|       |                a.patterns.extend(b.patterns);
 1474|       |                a
 1475|       |            })
 1476|       |        }
 1477|       |        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|       |
 1479|       |        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|       |             if let Some(a) = a {
 1481|       |                let mut patterns = g.patterns;
 1482|       |                patterns.extend(a.patterns);
 1483|       |                FocusedTripleOrPathPattern {
 1484|       |                    focus: AnnotatedTermPath {
 1485|       |                        term: g.focus,
 1486|       |                        annotations: a.focus
 1487|       |                    },
 1488|       |                    patterns
 1489|       |                }
 1490|       |            } else {
 1491|       |                FocusedTripleOrPathPattern {
 1492|       |                    focus: AnnotatedTermPath {
 1493|       |                        term: g.focus,
 1494|       |                        annotations: Vec::new()
 1495|       |                    },
 1496|       |                    patterns: g.patterns
 1497|       |                }
 1498|       |            }
 1499|       |        }
 1500|       |
 1501|       |        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|       |
 1503|       |        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|       |            not_empty_fold(p.into_iter(), |a, b| {
 1505|       |                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|       |            })
 1507|       |        }
 1508|       |        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|       |
 1510|       |        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|       |            not_empty_fold(p.into_iter(), |a, b| {
 1512|       |                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|       |            })
 1514|       |        }
 1515|       |        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|       |
 1517|       |        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|       |            match o {
 1519|       |                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|       |                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|       |                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|       |                Some(_) => unreachable!(),
 1523|       |                None => p
 1524|       |            }
 1525|       |        }
 1526|       |        rule PathElt_op() -> char =
 1527|       |            "*" { '*' } /
 1528|       |            "+" { '+' } /
 1529|       |            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|       |
 1531|       |        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|       |            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|       |            PathElt()
 1534|       |
 1535|       |        rule PathPrimary() -> PropertyPathExpression =
 1536|       |            v:iri() { v.into() } /
 1537|       |            "a" { rdf::TYPE.into_owned().into() } /
 1538|       |            "!" _ p:PathNegatedPropertySet() { p } /
 1539|       |            "(" _ p:Path() _ ")" { p }
 1540|       |
 1541|       |        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|       |            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|       |                let mut direct = Vec::new();
 1544|       |                let mut inverse = Vec::new();
 1545|       |                for e in p {
 1546|       |                    match e {
 1547|       |                        Either::Left(a) => direct.push(a),
 1548|       |                        Either::Right(b) => inverse.push(b)
 1549|       |                    }
 1550|       |                }
 1551|       |                if inverse.is_empty() {
 1552|       |                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|       |                } else if direct.is_empty() {
 1554|       |                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|       |                } else {
 1556|       |                    PropertyPathExpression::Alternative(
 1557|       |                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|       |                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|       |                    )
 1560|       |                }
 1561|       |            } /
 1562|       |            p:PathOneInPropertySet() {
 1563|       |                match p {
 1564|       |                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|       |                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|       |                }
 1567|       |            }
 1568|       |        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|       |
 1570|       |        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|       |            "^" _ v:iri() { Either::Right(v) } /
 1572|       |            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|       |            v:iri() { Either::Left(v) } /
 1574|       |            "a" { Either::Left(rdf::TYPE.into()) }
 1575|       |
 1576|       |        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|       |
 1578|       |        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|       |            let mut patterns = po.patterns;
 1580|       |            let mut bnode = TermPattern::from(BlankNode::default());
 1581|       |            for (p, os) in po.focus {
 1582|       |                for o in os {
 1583|       |                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|       |                }
 1585|       |            }
 1586|       |            Ok(FocusedTriplePattern {
 1587|       |                focus: bnode,
 1588|       |                patterns
 1589|       |            })
 1590|       |        }
 1591|       |
 1592|       |        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|       |
 1594|       |        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|       |            let mut patterns = po.patterns;
 1596|       |            let mut bnode = TermPattern::from(BlankNode::default());
 1597|       |            for (p, os) in po.focus {
 1598|       |                for o in os {
 1599|       |                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|       |                }
 1601|       |            }
 1602|       |            Ok(FocusedTripleOrPathPattern {
 1603|       |                focus: bnode,
 1604|       |                patterns
 1605|       |            })
 1606|       |        }
 1607|       |
 1608|       |        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|       |            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|       |            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|       |            for objWithPatterns in o.into_iter().rev() {
 1612|       |                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|       |                current_list_node = new_blank_node;
 1616|       |                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|       |            }
 1618|       |            FocusedTriplePattern {
 1619|       |                focus: current_list_node,
 1620|       |                patterns
 1621|       |            }
 1622|       |        }
 1623|       |        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|       |
 1625|       |        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|       |            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|       |            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|       |            for objWithPatterns in o.into_iter().rev() {
 1629|       |                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|       |                current_list_node = new_blank_node;
 1633|       |                patterns.extend(objWithPatterns.patterns);
 1634|       |            }
 1635|       |            FocusedTripleOrPathPattern {
 1636|       |                focus: current_list_node,
 1637|       |                patterns
 1638|       |            }
 1639|       |        }
 1640|       |        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|       |
 1642|       |
 1643|       |        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|       |
 1645|       |        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|       |
 1647|       |        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|       |            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|       |            TriplesNode()
 1650|       |
 1651|       |        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|       |            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|       |            TriplesNodePath()
 1654|       |
 1655|       |        rule VarOrTerm() -> TermPattern =
 1656|       |            v:Var() { v.into() } /
 1657|       |            t:QuotedTriple() {?
 1658|       |                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|       |            } /
 1661|       |            t:GraphTerm() { t.into() }
 1662|       |
 1663|       |        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|       |            Ok(TriplePattern {
 1665|       |                subject: s,
 1666|       |                predicate: p,
 1667|       |                object: o
 1668|       |            })
 1669|       |        }
 1670|       |
 1671|       |        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|       |            Ok(GroundTriple {
 1673|       |                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|       |                predicate: p,
 1675|       |                object: o
 1676|       |            })
 1677|       |        }
 1678|       |        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|       |
 1680|       |        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|       |            l:RDFLiteral() { l.into() } /
 1682|       |            l:NumericLiteral() { l.into() } /
 1683|       |            l:BooleanLiteral() { l.into() } /
 1684|       |            t:QuotedTripleData() {?
 1685|       |                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|       |            }
 1688|       |
 1689|       |        rule VarOrIri() -> NamedNodePattern =
 1690|       |            v:Var() { v.into() } /
 1691|       |            i:iri() { i.into() }
 1692|       |
 1693|       |        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|       |
 1695|       |        rule GraphTerm() -> Term =
 1696|       |            i:iri() { i.into() } /
 1697|       |            l:RDFLiteral() { l.into() } /
 1698|       |            l:NumericLiteral() { l.into() } /
 1699|       |            l:BooleanLiteral() { l.into() } /
 1700|       |            b:BlankNode() { b.into() } /
 1701|       |            NIL() { rdf::NIL.into_owned().into() }
 1702|       |
 1703|       |        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|       |
 1705|       |        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|       |            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|       |        }
 1708|       |        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|       |
 1710|       |        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|       |        }
 1713|       |        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|       |
 1715|       |        rule ValueLogical() -> Expression = RelationalExpression()
 1716|       |
 1717|       |        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|       |            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|       |            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|       |            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|       |            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|       |            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|       |            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|       |            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|       |            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|       |            Some(_) => unreachable!(),
 1727|       |            None => a
 1728|       |        } }
 1729|       |        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|       |            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|       |            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|       |            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|       |
 1734|       |        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|       |
 1736|       |        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|       |            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|       |            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|       |            Some(_) => unreachable!(),
 1740|       |            None => a,
 1741|       |        } }
 1742|       |        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|       |            (s, e)
 1744|       |        }
 1745|       |
 1746|       |        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|       |            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|       |            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|       |            Some(_) => unreachable!(),
 1750|       |            None => a
 1751|       |        } }
 1752|       |        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|       |            (s, e)
 1754|       |        }
 1755|       |
 1756|       |        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|       |            Some("!") => Expression::Not(Box::new(e)),
 1758|       |            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|       |            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|       |            Some(_) => unreachable!(),
 1761|       |            None => e,
 1762|       |        } }
 1763|       |
 1764|       |        rule PrimaryExpression() -> Expression =
 1765|       |            BrackettedExpression()  /
 1766|       |            ExprQuotedTriple() /
 1767|       |            iriOrFunction() /
 1768|       |            v:Var() { v.into() } /
 1769|       |            l:RDFLiteral() { l.into() } /
 1770|       |            l:NumericLiteral() { l.into() } /
 1771|       |            l:BooleanLiteral() { l.into() } /
 1772|       |            BuiltInCall()
 1773|       |
 1774|       |        rule ExprVarOrTerm() -> Expression =
 1775|       |            ExprQuotedTriple() /
 1776|       |            i:iri() { i.into() } /
 1777|       |            l:RDFLiteral() { l.into() } /
 1778|       |            l:NumericLiteral() { l.into() } /
 1779|       |            l:BooleanLiteral() { l.into() } /
 1780|       |            v:Var() { v.into() }
 1781|       |
 1782|       |        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|       |            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|       |            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|       |        }
 1786|       |
 1787|       |        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|       |
 1789|       |        rule BuiltInCall() -> Expression =
 1790|       |            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|       |            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|       |            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|       |            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|       |            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|       |            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|       |            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|       |            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|       |            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|       |            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|       |            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|       |            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|       |            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|       |            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|       |            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|       |            SubstringExpression() /
 1806|       |            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|       |            StrReplaceExpression() /
 1808|       |            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|       |            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|       |            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|       |            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|       |            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|       |            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|       |            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|       |            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|       |            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|       |            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|       |            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|       |            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|       |            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|       |            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|       |            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|       |            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|       |            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|       |            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|       |            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|       |            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|       |            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|       |            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|       |            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|       |            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|       |            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|       |            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|       |            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|       |            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|       |            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|       |            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|       |            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|       |            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|       |            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|       |            RegexExpression() /
 1842|       |            ExistsFunc() /
 1843|       |            NotExistsFunc() /
 1844|       |            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|       |                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|       |            } /
 1848|       |            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|       |                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|       |            } /
 1852|       |            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|       |                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|       |            } /
 1856|       |            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|       |                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|       |            } /
 1860|       |            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|       |                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|       |            } /
 1864|       |            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|       |                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|       |                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|       |            }
 1868|       |
 1869|       |        rule RegexExpression() -> Expression =
 1870|       |            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|       |            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|       |
 1873|       |
 1874|       |        rule SubstringExpression() -> Expression =
 1875|       |            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|       |            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|       |
 1878|       |
 1879|       |        rule StrReplaceExpression() -> Expression =
 1880|       |            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|       |            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|       |
 1883|       |        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|       |
 1885|       |        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|       |
 1887|       |        rule Aggregate() -> AggregateExpression =
 1888|       |            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|       |            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|       |            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|       |            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|       |            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|       |            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|       |            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|       |            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|       |            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|       |            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|       |            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|       |            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|       |            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|       |            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|       |            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|       |            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|       |            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|       |            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|       |            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|       |            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|       |
 1909|       |        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|       |            match a {
 1911|       |                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|       |                None => i.into()
 1913|       |            }
 1914|       |        }
 1915|       |
 1916|       |        rule RDFLiteral() -> Literal =
 1917|       |            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|       |            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|       |            value:String() { Literal::new_simple_literal(value) }
 1920|       |
 1921|       |        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|       |
 1923|       |        rule NumericLiteralUnsigned() -> Literal =
 1924|       |            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|       |            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|       |            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|       |
 1928|       |        rule NumericLiteralPositive() -> Literal =
 1929|       |            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|       |            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|       |            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|       |
 1933|       |
 1934|       |        rule NumericLiteralNegative() -> Literal =
 1935|       |            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|       |            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|       |            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|       |
 1939|       |        rule BooleanLiteral() -> Literal =
 1940|       |            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|       |            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|       |
 1943|       |        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|       |
 1945|       |        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|       |            NamedNode::from(i)
 1947|       |        }
 1948|       |
 1949|       |        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|       |            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|       |                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|       |            } else {
 1953|       |                Err("Prefix not found")
 1954|       |            } }
 1955|       |
 1956|       |        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|       |            let node = BlankNode::new_unchecked(id);
 1958|       |            if state.used_bnodes.contains(&node) {
 1959|       |                Err("Already used blank node id")
 1960|       |            } else {
 1961|       |                state.currently_used_bnodes.insert(node.clone());
 1962|       |                Ok(node)
 1963|       |            }
 1964|       |        } / ANON() { BlankNode::default() }
 1965|       |
 1966|       |        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|       |            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|       |        }
 1969|       |
 1970|       |        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|       |            ns
 1972|       |        }
 1973|       |
 1974|       |        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|       |            if let Some(base) = state.namespaces.get(ns) {
 1976|       |                let mut iri = String::with_capacity(base.len() + local.len());
 1977|       |                iri.push_str(base);
 1978|       |                for chunk in local.split('\\') { // We remove \
 1979|       |                    iri.push_str(chunk);
 1980|       |                }
 1981|       |                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|       |            } else {
 1983|       |                Err("Prefix not found")
 1984|       |            }
 1985|       |        }
 1986|       |
 1987|       |        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|       |            b
 1989|       |        }
 1990|       |
 1991|       |        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|       |
 1993|       |        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|       |
 1995|       |        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|       |            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|       |        }
 1998|       |
 1999|       |        rule INTEGER() = ['0'..='9']+
 2000|       |
 2001|       |        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|       |
 2003|       |        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|       |
 2005|       |        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|       |
 2007|       |        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|       |
 2009|       |        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|       |
 2011|       |        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|       |
 2013|       |        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|       |
 2015|       |        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|       |
 2017|       |        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|       |
 2019|       |        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|       |             unescape_string(l)
 2021|       |        }
 2022|       |        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|       |
 2024|       |
 2025|       |        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|       |             unescape_string(l)
 2027|       |        }
 2028|       |        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|       |
 2030|       |        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|       |             unescape_string(l)
 2032|       |        }
 2033|       |        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|       |        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|       |
 2036|       |        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|       |             unescape_string(l)
 2038|       |        }
 2039|       |        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|       |        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|       |
 2042|       |        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|       |
 2044|       |        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|       |
 2046|       |        rule NIL() = "(" WS()* ")"
 2047|       |
 2048|       |        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|       |
 2050|       |        rule ANON() = "[" WS()* "]"
 2051|       |
 2052|       |        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|       |
 2054|       |        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|       |
 2056|       |        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|       |
 2058|       |        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|       |
 2060|       |        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|       |
 2062|       |        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|       |
 2064|       |        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|       |
 2066|       |        rule PERCENT() = ['%'] HEX() HEX()
 2067|       |
 2068|       |        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|       |
 2070|       |        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|       |
 2072|       |        //space
 2073|       |        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|       |
 2075|       |        //comment
 2076|       |        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|       |
 2078|       |        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|   226k|            if input.eq_ignore_ascii_case(literal) {
 2080|  37.9k|                Ok(())
 2081|       |            } else {
 2082|   188k|                Err(literal)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_GraphRefAlls1_0B7_:
 1144|    244|            / i("ALL") { GraphTarget::AllGraphs }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_RelationalExpression0B7_:
 1717|  1.80k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  1.47k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  1.37k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  1.35k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  1.31k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  1.04k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  1.02k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|    991|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|    910|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|      0|            Some(_) => unreachable!(),
 1727|    334|            None => a
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser33___parse_GroupGraphPatternSub_item0B7_:
 1234|    699|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|    699|            let mut result = vec![a];
 1236|    699|            if let Some(v) = b {
 1237|    179|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|    520|            }
 1239|    699|            result
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser21___parse_GraphNodePath0B7_:
 1652|  5.31k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser29___parse_TriplesTemplate_inner0B7_:
 1170|  14.0k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser31___parse_ConditionalOrExpression00B9_:
 1706|     47|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_ExpressionLists_0B7_:
 1335|    643|            NIL() { Vec::new() }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_DataBlock0B7_:
 1276|    169|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|    169|            GraphPattern::Values { variables: l.0, bindings: l.1 }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_PrimaryExpressions1_0B7_:
 1771|     19|            l:BooleanLiteral() { l.into() } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_BuiltInCalls3_0B7_:
 1795|    493|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser11___parse_iri0B7_:
 1945|  44.1k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  44.1k|            NamedNode::from(i)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_SelectClause_member0B7_:
  828|    450|            v:Var() _ { SelectionMember::Variable(v) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_BuiltInCallsK_0B7_:
 1840|      2|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_Filter0B7_:
 1318|      1|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|      1|            PartialGraphPattern::Filter(c)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser37___parse_PropertyListPathNotEmpty_item0B7_:
 1452|    418|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|    418|            c
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_Modify00B9_:
 1076|  5.46k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|    833|                    GroundQuadPattern {
 1078|    833|                        subject: q.subject,
 1079|    833|                        predicate: q.predicate,
 1080|    833|                        object: q.object,
 1081|    833|                        graph_name: with.clone().into()
 1082|    833|                    }
 1083|       |                } else {
 1084|  4.62k|                    q
 1085|  5.46k|                }).collect();
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_PathOneInPropertySets_0B7_:
 1572|  2.50k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_LateralGraphPattern0B7_:
  778|    243|parser! {
  779|    243|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|    243|    grammar parser(state: &mut ParserState) for str {
  781|    243|        pub rule QueryUnit() -> Query = Query()
  782|    243|
  783|    243|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|    243|            q
  785|    243|        }
  786|    243|
  787|    243|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|    243|
  789|    243|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|    243|
  791|    243|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|    243|            state.base_iri = Some(i)
  793|    243|        }
  794|    243|
  795|    243|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|    243|            state.namespaces.insert(ns.into(), i.into_inner());
  797|    243|        }
  798|    243|
  799|    243|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|    243|            Ok(Query::Select {
  801|    243|                dataset: d,
  802|    243|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|    243|                base_iri: state.base_iri.clone()
  804|    243|            })
  805|    243|        }
  806|    243|
  807|    243|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|    243|            build_select(s, w, g, h, o, l, v, state)
  809|    243|        }
  810|    243|
  811|    243|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|    243|            Selection {
  813|    243|                option: o,
  814|    243|                variables: v
  815|    243|            }
  816|    243|        }
  817|    243|        rule Selection_init() = {
  818|    243|            state.aggregates.push(Vec::new())
  819|    243|        }
  820|    243|        rule SelectClause_option() -> SelectionOption =
  821|    243|            i("DISTINCT") { SelectionOption::Distinct } /
  822|    243|            i("REDUCED") { SelectionOption::Reduced } /
  823|    243|            { SelectionOption::Default }
  824|    243|        rule SelectClause_variables() -> SelectionVariables =
  825|    243|            "*" { SelectionVariables::Star } /
  826|    243|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|    243|        rule SelectClause_member() -> SelectionMember =
  828|    243|            v:Var() _ { SelectionMember::Variable(v) } /
  829|    243|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|    243|
  831|    243|        rule ConstructQuery() -> Query =
  832|    243|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|    243|                Ok(Query::Construct {
  834|    243|                    template: c,
  835|    243|                    dataset: d,
  836|    243|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|    243|                    base_iri: state.base_iri.clone()
  838|    243|                })
  839|    243|            } /
  840|    243|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|    243|                Ok(Query::Construct {
  842|    243|                    template: c.clone(),
  843|    243|                    dataset: d,
  844|    243|                    pattern: build_select(
  845|    243|                        Selection::no_op(),
  846|    243|                        GraphPattern::Bgp { patterns: c },
  847|    243|                        g, h, o, l, v, state
  848|    243|                    )?,
  849|    243|                    base_iri: state.base_iri.clone()
  850|    243|                })
  851|    243|            }
  852|    243|
  853|    243|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|    243|
  855|    243|        rule DescribeQuery() -> Query =
  856|    243|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|    243|                Ok(Query::Describe {
  858|    243|                    dataset: d,
  859|    243|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|    243|                    base_iri: state.base_iri.clone()
  861|    243|                })
  862|    243|            } /
  863|    243|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|    243|                Ok(Query::Describe {
  865|    243|                    dataset: d,
  866|    243|                    pattern: build_select(Selection {
  867|    243|                        option: SelectionOption::Default,
  868|    243|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|    243|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|    243|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|    243|                        }).collect())
  872|    243|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|    243|                    base_iri: state.base_iri.clone()
  874|    243|                })
  875|    243|            }
  876|    243|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|    243|
  878|    243|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|    243|            Ok(Query::Ask {
  880|    243|                dataset: d,
  881|    243|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|    243|                base_iri: state.base_iri.clone()
  883|    243|            })
  884|    243|        }
  885|    243|
  886|    243|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|    243|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|    243|            if d.is_empty() {
  889|    243|                return None;
  890|    243|            }
  891|    243|            let mut default = Vec::new();
  892|    243|            let mut named = Vec::new();
  893|    243|            for (d, n) in d {
  894|    243|                if let Some(d) = d {
  895|    243|                    default.push(d);
  896|    243|                }
  897|    243|                if let Some(n) = n {
  898|    243|                    named.push(n);
  899|    243|                }
  900|    243|            }
  901|    243|            Some(QueryDataset {
  902|    243|                default, named: Some(named)
  903|    243|            })
  904|    243|        }
  905|    243|
  906|    243|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|    243|            (Some(s), None)
  908|    243|        }
  909|    243|
  910|    243|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|    243|            (None, Some(s))
  912|    243|        }
  913|    243|
  914|    243|        rule SourceSelector() -> NamedNode = iri()
  915|    243|
  916|    243|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|    243|            p
  918|    243|        }
  919|    243|
  920|    243|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|    243|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|    243|            let clauses = c.into_iter().map(|(e, vo)| {
  923|    243|                if let Expression::Variable(v) = e {
  924|    243|                    v
  925|    243|                } else {
  926|    243|                    let v = vo.unwrap_or_else(variable);
  927|    243|                    projections.push((e, v.clone()));
  928|    243|                    v
  929|    243|                }
  930|    243|            }).collect();
  931|    243|            (clauses, projections)
  932|    243|        }
  933|    243|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|    243|
  935|    243|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|    243|            e:BuiltInCall() { (e, None) } /
  937|    243|            e:FunctionCall() { (e, None) } /
  938|    243|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|    243|            e:Var() { (e.into(), None) }
  940|    243|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|    243|
  942|    243|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|    243|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|    243|        }
  945|    243|
  946|    243|        rule HavingCondition() -> Expression = Constraint()
  947|    243|
  948|    243|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|    243|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|    243|
  951|    243|        rule OrderCondition() -> OrderExpression =
  952|    243|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|    243|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|    243|            e: Constraint() { OrderExpression::Asc(e) } /
  955|    243|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|    243|
  957|    243|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|    243|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|    243|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|    243|
  961|    243|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|    243|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|    243|        }
  964|    243|
  965|    243|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|    243|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|    243|        }
  968|    243|
  969|    243|        rule ValuesClause() -> Option<GraphPattern> =
  970|    243|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|    243|            { None }
  972|    243|
  973|    243|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|    243|
  975|    243|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|    243|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|    243|
  978|    243|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|    243|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|    243|        }
  981|    243|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|    243|
  983|    243|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|    243|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|    243|        }
  986|    243|
  987|    243|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|    243|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|    243|        }
  990|    243|
  991|    243|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|    243|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|    243|        }
  994|    243|
  995|    243|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|    243|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|    243|            if from == to {
  998|    243|                Vec::new() // identity case
  999|    243|            } else {
 1000|    243|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|    243|                vec![copy_graph(from, to)]
 1002|    243|            }
 1003|    243|        }
 1004|    243|
 1005|    243|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|    243|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|    243|            if from == to {
 1008|    243|                Vec::new() // identity case
 1009|    243|            } else {
 1010|    243|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|    243|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|    243|            }
 1013|    243|        }
 1014|    243|
 1015|    243|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|    243|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|    243|            if from == to {
 1018|    243|                Vec::new() // identity case
 1019|    243|            } else {
 1020|    243|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|    243|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|    243|            }
 1023|    243|        }
 1024|    243|
 1025|    243|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|    243|            vec![GraphUpdateOperation::InsertData { data }]
 1027|    243|        }
 1028|    243|
 1029|    243|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|    243|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|    243|        }
 1032|    243|
 1033|    243|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|    243|            let pattern = d.iter().map(|q| {
 1035|    243|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|    243|                match &q.graph_name {
 1037|    243|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|    243|                    GraphNamePattern::DefaultGraph => bgp,
 1039|    243|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|    243|                }
 1041|    243|            }).reduce(new_join).unwrap_or_default();
 1042|    243|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|    243|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|    243|                delete,
 1045|    243|                insert: Vec::new(),
 1046|    243|                using: None,
 1047|    243|                pattern: Box::new(pattern)
 1048|    243|            }])
 1049|    243|        }
 1050|    243|
 1051|    243|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|    243|            let (delete, insert) = c;
 1053|    243|            let mut delete = delete.unwrap_or_default();
 1054|    243|            let mut insert = insert.unwrap_or_default();
 1055|    243|            #[allow(clippy::shadow_same)]
 1056|    243|            let mut pattern = pattern;
 1057|    243|
 1058|    243|            let mut using = if u.is_empty() {
 1059|    243|                None
 1060|    243|            } else {
 1061|    243|                let mut default = Vec::new();
 1062|    243|                let mut named = Vec::new();
 1063|    243|                for (d, n) in u {
 1064|    243|                    if let Some(d) = d {
 1065|    243|                        default.push(d)
 1066|    243|                    }
 1067|    243|                    if let Some(n) = n {
 1068|    243|                        named.push(n)
 1069|    243|                    }
 1070|    243|                }
 1071|    243|                Some(QueryDataset { default, named: Some(named) })
 1072|    243|            };
 1073|    243|
 1074|    243|            if let Some(with) = with {
 1075|    243|                // We inject WITH everywhere
 1076|    243|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|    243|                    GroundQuadPattern {
 1078|    243|                        subject: q.subject,
 1079|    243|                        predicate: q.predicate,
 1080|    243|                        object: q.object,
 1081|    243|                        graph_name: with.clone().into()
 1082|    243|                    }
 1083|    243|                } else {
 1084|    243|                    q
 1085|    243|                }).collect();
 1086|    243|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|    243|                    QuadPattern {
 1088|    243|                        subject: q.subject,
 1089|    243|                        predicate: q.predicate,
 1090|    243|                        object: q.object,
 1091|    243|                        graph_name: with.clone().into()
 1092|    243|                    }
 1093|    243|                } else {
 1094|    243|                    q
 1095|    243|                }).collect();
 1096|    243|                if using.is_none() {
 1097|    243|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|    243|                }
 1099|    243|            }
 1100|    243|
 1101|    243|            vec![GraphUpdateOperation::DeleteInsert {
 1102|    243|                delete,
 1103|    243|                insert,
 1104|    243|                using,
 1105|    243|                pattern: Box::new(pattern)
 1106|    243|            }]
 1107|    243|        }
 1108|    243|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|    243|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|    243|            (Some(d), i)
 1111|    243|        } / i:InsertClause() {
 1112|    243|            (None, Some(i))
 1113|    243|        }
 1114|    243|        rule Modify_clear() = {
 1115|    243|            state.used_bnodes.clear();
 1116|    243|            state.currently_used_bnodes.clear();
 1117|    243|        }
 1118|    243|
 1119|    243|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|    243|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|    243|        }
 1122|    243|
 1123|    243|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|    243|
 1125|    243|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|    243|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|    243|            (Some(i), None)
 1128|    243|        }
 1129|    243|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|    243|            (None, Some(i))
 1131|    243|        }
 1132|    243|
 1133|    243|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|    243|            GraphName::DefaultGraph
 1135|    243|        } / (i("GRAPH") _)? g:iri() {
 1136|    243|            GraphName::NamedNode(g)
 1137|    243|        }
 1138|    243|
 1139|    243|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|    243|
 1141|    243|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|    243|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|    243|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|    243|            / i("ALL") { GraphTarget::AllGraphs }
 1145|    243|
 1146|    243|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|    243|
 1148|    243|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|    243|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|    243|        }
 1151|    243|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|    243|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|    243|        }
 1154|    243|
 1155|    243|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|    243|            q.into_iter().flatten().collect()
 1157|    243|        }
 1158|    243|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|    243|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|    243|        } //TODO: return iter?
 1161|    243|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|    243|
 1163|    243|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|    243|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|    243|        }
 1166|    243|
 1167|    243|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|    243|            ts.into_iter().flatten().collect()
 1169|    243|        }
 1170|    243|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|    243|
 1172|    243|        rule GroupGraphPattern() -> GraphPattern =
 1173|    243|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|    243|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|    243|        rule GroupGraphPattern_clear() = {
 1176|    243|             // We deal with blank nodes aliases rule
 1177|    243|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|    243|            state.currently_used_bnodes.clear();
 1179|    243|        }
 1180|    243|
 1181|    243|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|    243|            let mut filter: Option<Expression> = None;
 1183|    243|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|    243|            for e in b.into_iter().flatten() {
 1185|    243|                match e {
 1186|    243|                    PartialGraphPattern::Optional(p, f) => {
 1187|    243|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|    243|                    }
 1189|    243|                    #[cfg(feature = "sep-0006")]
 1190|    243|                    PartialGraphPattern::Lateral(p) => {
 1191|    243|                        let mut defined_variables = HashSet::default();
 1192|    243|                        add_defined_variables(&p, &mut defined_variables);
 1193|    243|                        let mut contains = false;
 1194|    243|                        g.on_in_scope_variable(|v| {
 1195|    243|                            if defined_variables.contains(v) {
 1196|    243|                                contains = true;
 1197|    243|                            }
 1198|    243|                        });
 1199|    243|                        if contains {
 1200|    243|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|    243|                        }
 1202|    243|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|    243|                    }
 1204|    243|                    PartialGraphPattern::Minus(p) => {
 1205|    243|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|    243|                    }
 1207|    243|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|    243|                        let mut contains = false;
 1209|    243|                        g.on_in_scope_variable(|v| {
 1210|    243|                            if *v == variable {
 1211|    243|                                contains = true;
 1212|    243|                            }
 1213|    243|                        });
 1214|    243|                        if contains {
 1215|    243|                            return Err("BIND is overriding an existing variable")
 1216|    243|                        }
 1217|    243|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|    243|                    }
 1219|    243|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|    243|                        Expression::And(Box::new(f), Box::new(expr))
 1221|    243|                    } else {
 1222|    243|                        expr
 1223|    243|                    }),
 1224|    243|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|    243|                }
 1226|    243|            }
 1227|    243|
 1228|    243|            Ok(if let Some(expr) = filter {
 1229|    243|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|    243|            } else {
 1231|    243|                g
 1232|    243|            })
 1233|    243|        }
 1234|    243|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|    243|            let mut result = vec![a];
 1236|    243|            if let Some(v) = b {
 1237|    243|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|    243|            }
 1239|    243|            result
 1240|    243|        }
 1241|    243|
 1242|    243|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|    243|            hs.into_iter().flatten().collect()
 1244|    243|        }
 1245|    243|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|    243|
 1247|    243|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|    243|
 1249|    243|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|    243|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|    243|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|    243|            } else {
 1253|    243|               PartialGraphPattern::Optional(p, None)
 1254|    243|            }
 1255|    243|        }
 1256|    243|
 1257|    243|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|    243|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|    243|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|    243|        }
 1261|    243|
 1262|    243|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|    243|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|    243|        }
 1265|    243|
 1266|    243|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|    243|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|    243|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|    243|
 1270|    243|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|    243|            PartialGraphPattern::Bind(e, v)
 1272|    243|        }
 1273|    243|
 1274|    243|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|    243|
 1276|    243|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|    243|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|    243|        }
 1279|    243|
 1280|    243|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|    243|            (vec![var], d)
 1282|    243|        }
 1283|    243|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|    243|
 1285|    243|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|    243|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|    243|                Ok((vars, vals))
 1288|    243|            } else {
 1289|    243|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|    243|            }
 1291|    243|        }
 1292|    243|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|    243|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|    243|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|    243|
 1296|    243|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|    243|            t:QuotedTripleData() {?
 1298|    243|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|    243|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|    243|            } /
 1301|    243|            i:iri() { Some(i.into()) } /
 1302|    243|            l:RDFLiteral() { Some(l.into()) } /
 1303|    243|            l:NumericLiteral() { Some(l.into()) } /
 1304|    243|            l:BooleanLiteral() { Some(l.into()) } /
 1305|    243|            i("UNDEF") { None }
 1306|    243|
 1307|    243|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|    243|            PartialGraphPattern::Minus(p)
 1309|    243|        }
 1310|    243|
 1311|    243|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|    243|            not_empty_fold(p.into_iter(), |a, b| {
 1313|    243|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|    243|            }).map(PartialGraphPattern::Other)
 1315|    243|        }
 1316|    243|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|    243|
 1318|    243|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|    243|            PartialGraphPattern::Filter(c)
 1320|    243|        }
 1321|    243|
 1322|    243|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|    243|
 1324|    243|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|    243|            Expression::FunctionCall(Function::Custom(f), a)
 1326|    243|        }
 1327|    243|
 1328|    243|        rule ArgList() -> Vec<Expression> =
 1329|    243|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|    243|            NIL() { Vec::new() }
 1331|    243|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|    243|
 1333|    243|        rule ExpressionList() -> Vec<Expression> =
 1334|    243|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|    243|            NIL() { Vec::new() }
 1336|    243|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|    243|
 1338|    243|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|    243|
 1340|    243|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|    243|            p.into_iter().flatten().collect()
 1342|    243|        }
 1343|    243|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|    243|
 1345|    243|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|    243|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|    243|                let mut patterns = po.patterns;
 1348|    243|                for (p, os) in po.focus {
 1349|    243|                    for o in os {
 1350|    243|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|    243|                    }
 1352|    243|                }
 1353|    243|                Ok(patterns)
 1354|    243|            } /
 1355|    243|            s:TriplesNode() _ po:PropertyList() {?
 1356|    243|                let mut patterns = s.patterns;
 1357|    243|                patterns.extend(po.patterns);
 1358|    243|                for (p, os) in po.focus {
 1359|    243|                    for o in os {
 1360|    243|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|    243|                    }
 1362|    243|                }
 1363|    243|                Ok(patterns)
 1364|    243|            }
 1365|    243|
 1366|    243|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|    243|            PropertyListNotEmpty() /
 1368|    243|            { FocusedTriplePattern::default() }
 1369|    243|
 1370|    243|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|    243|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|    243|                a.focus.push(b.focus);
 1373|    243|                a.patterns.extend(b.patterns);
 1374|    243|                a
 1375|    243|            })
 1376|    243|        }
 1377|    243|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|    243|            FocusedTriplePattern {
 1379|    243|                focus: (p, o.focus),
 1380|    243|                patterns: o.patterns
 1381|    243|            }
 1382|    243|        }
 1383|    243|
 1384|    243|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|    243|
 1386|    243|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|    243|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|    243|                a.focus.push(b.focus);
 1389|    243|                a.patterns.extend_from_slice(&b.patterns);
 1390|    243|                a
 1391|    243|            })
 1392|    243|        }
 1393|    243|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|    243|
 1395|    243|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|    243|            if let Some(a) = a {
 1397|    243|                let mut patterns = g.patterns;
 1398|    243|                patterns.extend(a.patterns);
 1399|    243|                FocusedTriplePattern {
 1400|    243|                    focus: AnnotatedTerm {
 1401|    243|                        term: g.focus,
 1402|    243|                        annotations: a.focus
 1403|    243|                    },
 1404|    243|                    patterns
 1405|    243|                }
 1406|    243|            } else {
 1407|    243|                FocusedTriplePattern {
 1408|    243|                    focus: AnnotatedTerm {
 1409|    243|                        term: g.focus,
 1410|    243|                        annotations: Vec::new()
 1411|    243|                    },
 1412|    243|                    patterns: g.patterns
 1413|    243|                }
 1414|    243|            }
 1415|    243|        }
 1416|    243|
 1417|    243|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|    243|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|    243|                let mut patterns = po.patterns;
 1420|    243|                for (p, os) in po.focus {
 1421|    243|                    for o in os {
 1422|    243|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|    243|                    }
 1424|    243|                }
 1425|    243|                Ok(patterns)
 1426|    243|            } /
 1427|    243|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|    243|                let mut patterns = s.patterns;
 1429|    243|                patterns.extend(po.patterns);
 1430|    243|                for (p, os) in po.focus {
 1431|    243|                    for o in os {
 1432|    243|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|    243|                    }
 1434|    243|                }
 1435|    243|                Ok(patterns)
 1436|    243|            }
 1437|    243|
 1438|    243|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|    243|            PropertyListPathNotEmpty() /
 1440|    243|            { FocusedTripleOrPathPattern::default() }
 1441|    243|
 1442|    243|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|    243|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|    243|                    focus: vec![(hp, ho.focus)],
 1445|    243|                    patterns: ho.patterns
 1446|    243|                }, |mut a, b| {
 1447|    243|                    a.focus.push(b.focus);
 1448|    243|                    a.patterns.extend(b.patterns);
 1449|    243|                    a
 1450|    243|                })
 1451|    243|        }
 1452|    243|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|    243|            c
 1454|    243|        }
 1455|    243|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|    243|            FocusedTripleOrPathPattern {
 1457|    243|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|    243|                patterns: o.patterns
 1459|    243|            }
 1460|    243|        }
 1461|    243|
 1462|    243|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|    243|            p.into()
 1464|    243|        }
 1465|    243|
 1466|    243|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|    243|            v.into()
 1468|    243|        }
 1469|    243|
 1470|    243|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|    243|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|    243|                a.focus.push(b.focus);
 1473|    243|                a.patterns.extend(b.patterns);
 1474|    243|                a
 1475|    243|            })
 1476|    243|        }
 1477|    243|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|    243|
 1479|    243|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|    243|             if let Some(a) = a {
 1481|    243|                let mut patterns = g.patterns;
 1482|    243|                patterns.extend(a.patterns);
 1483|    243|                FocusedTripleOrPathPattern {
 1484|    243|                    focus: AnnotatedTermPath {
 1485|    243|                        term: g.focus,
 1486|    243|                        annotations: a.focus
 1487|    243|                    },
 1488|    243|                    patterns
 1489|    243|                }
 1490|    243|            } else {
 1491|    243|                FocusedTripleOrPathPattern {
 1492|    243|                    focus: AnnotatedTermPath {
 1493|    243|                        term: g.focus,
 1494|    243|                        annotations: Vec::new()
 1495|    243|                    },
 1496|    243|                    patterns: g.patterns
 1497|    243|                }
 1498|    243|            }
 1499|    243|        }
 1500|    243|
 1501|    243|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|    243|
 1503|    243|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|    243|            not_empty_fold(p.into_iter(), |a, b| {
 1505|    243|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|    243|            })
 1507|    243|        }
 1508|    243|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|    243|
 1510|    243|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|    243|            not_empty_fold(p.into_iter(), |a, b| {
 1512|    243|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|    243|            })
 1514|    243|        }
 1515|    243|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|    243|
 1517|    243|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|    243|            match o {
 1519|    243|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|    243|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|    243|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|    243|                Some(_) => unreachable!(),
 1523|    243|                None => p
 1524|    243|            }
 1525|    243|        }
 1526|    243|        rule PathElt_op() -> char =
 1527|    243|            "*" { '*' } /
 1528|    243|            "+" { '+' } /
 1529|    243|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|    243|
 1531|    243|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|    243|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|    243|            PathElt()
 1534|    243|
 1535|    243|        rule PathPrimary() -> PropertyPathExpression =
 1536|    243|            v:iri() { v.into() } /
 1537|    243|            "a" { rdf::TYPE.into_owned().into() } /
 1538|    243|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|    243|            "(" _ p:Path() _ ")" { p }
 1540|    243|
 1541|    243|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|    243|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|    243|                let mut direct = Vec::new();
 1544|    243|                let mut inverse = Vec::new();
 1545|    243|                for e in p {
 1546|    243|                    match e {
 1547|    243|                        Either::Left(a) => direct.push(a),
 1548|    243|                        Either::Right(b) => inverse.push(b)
 1549|    243|                    }
 1550|    243|                }
 1551|    243|                if inverse.is_empty() {
 1552|    243|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|    243|                } else if direct.is_empty() {
 1554|    243|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|    243|                } else {
 1556|    243|                    PropertyPathExpression::Alternative(
 1557|    243|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|    243|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|    243|                    )
 1560|    243|                }
 1561|    243|            } /
 1562|    243|            p:PathOneInPropertySet() {
 1563|    243|                match p {
 1564|    243|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|    243|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|    243|                }
 1567|    243|            }
 1568|    243|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|    243|
 1570|    243|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|    243|            "^" _ v:iri() { Either::Right(v) } /
 1572|    243|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|    243|            v:iri() { Either::Left(v) } /
 1574|    243|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|    243|
 1576|    243|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|    243|
 1578|    243|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|    243|            let mut patterns = po.patterns;
 1580|    243|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|    243|            for (p, os) in po.focus {
 1582|    243|                for o in os {
 1583|    243|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|    243|                }
 1585|    243|            }
 1586|    243|            Ok(FocusedTriplePattern {
 1587|    243|                focus: bnode,
 1588|    243|                patterns
 1589|    243|            })
 1590|    243|        }
 1591|    243|
 1592|    243|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|    243|
 1594|    243|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|    243|            let mut patterns = po.patterns;
 1596|    243|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|    243|            for (p, os) in po.focus {
 1598|    243|                for o in os {
 1599|    243|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|    243|                }
 1601|    243|            }
 1602|    243|            Ok(FocusedTripleOrPathPattern {
 1603|    243|                focus: bnode,
 1604|    243|                patterns
 1605|    243|            })
 1606|    243|        }
 1607|    243|
 1608|    243|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|    243|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|    243|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|    243|            for objWithPatterns in o.into_iter().rev() {
 1612|    243|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|    243|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|    243|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|    243|                current_list_node = new_blank_node;
 1616|    243|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|    243|            }
 1618|    243|            FocusedTriplePattern {
 1619|    243|                focus: current_list_node,
 1620|    243|                patterns
 1621|    243|            }
 1622|    243|        }
 1623|    243|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|    243|
 1625|    243|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|    243|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|    243|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|    243|            for objWithPatterns in o.into_iter().rev() {
 1629|    243|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|    243|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|    243|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|    243|                current_list_node = new_blank_node;
 1633|    243|                patterns.extend(objWithPatterns.patterns);
 1634|    243|            }
 1635|    243|            FocusedTripleOrPathPattern {
 1636|    243|                focus: current_list_node,
 1637|    243|                patterns
 1638|    243|            }
 1639|    243|        }
 1640|    243|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|    243|
 1642|    243|
 1643|    243|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|    243|
 1645|    243|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|    243|
 1647|    243|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|    243|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|    243|            TriplesNode()
 1650|    243|
 1651|    243|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|    243|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|    243|            TriplesNodePath()
 1654|    243|
 1655|    243|        rule VarOrTerm() -> TermPattern =
 1656|    243|            v:Var() { v.into() } /
 1657|    243|            t:QuotedTriple() {?
 1658|    243|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|    243|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|    243|            } /
 1661|    243|            t:GraphTerm() { t.into() }
 1662|    243|
 1663|    243|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|    243|            Ok(TriplePattern {
 1665|    243|                subject: s,
 1666|    243|                predicate: p,
 1667|    243|                object: o
 1668|    243|            })
 1669|    243|        }
 1670|    243|
 1671|    243|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|    243|            Ok(GroundTriple {
 1673|    243|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|    243|                predicate: p,
 1675|    243|                object: o
 1676|    243|            })
 1677|    243|        }
 1678|    243|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|    243|
 1680|    243|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|    243|            l:RDFLiteral() { l.into() } /
 1682|    243|            l:NumericLiteral() { l.into() } /
 1683|    243|            l:BooleanLiteral() { l.into() } /
 1684|    243|            t:QuotedTripleData() {?
 1685|    243|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|    243|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|    243|            }
 1688|    243|
 1689|    243|        rule VarOrIri() -> NamedNodePattern =
 1690|    243|            v:Var() { v.into() } /
 1691|    243|            i:iri() { i.into() }
 1692|    243|
 1693|    243|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|    243|
 1695|    243|        rule GraphTerm() -> Term =
 1696|    243|            i:iri() { i.into() } /
 1697|    243|            l:RDFLiteral() { l.into() } /
 1698|    243|            l:NumericLiteral() { l.into() } /
 1699|    243|            l:BooleanLiteral() { l.into() } /
 1700|    243|            b:BlankNode() { b.into() } /
 1701|    243|            NIL() { rdf::NIL.into_owned().into() }
 1702|    243|
 1703|    243|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|    243|
 1705|    243|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|    243|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|    243|        }
 1708|    243|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|    243|
 1710|    243|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|    243|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|    243|        }
 1713|    243|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|    243|
 1715|    243|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|    243|
 1717|    243|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|    243|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|    243|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|    243|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|    243|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|    243|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|    243|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|    243|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|    243|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|    243|            Some(_) => unreachable!(),
 1727|    243|            None => a
 1728|    243|        } }
 1729|    243|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|    243|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|    243|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|    243|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|    243|
 1734|    243|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|    243|
 1736|    243|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|    243|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|    243|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|    243|            Some(_) => unreachable!(),
 1740|    243|            None => a,
 1741|    243|        } }
 1742|    243|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|    243|            (s, e)
 1744|    243|        }
 1745|    243|
 1746|    243|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|    243|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|    243|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|    243|            Some(_) => unreachable!(),
 1750|    243|            None => a
 1751|    243|        } }
 1752|    243|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|    243|            (s, e)
 1754|    243|        }
 1755|    243|
 1756|    243|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|    243|            Some("!") => Expression::Not(Box::new(e)),
 1758|    243|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|    243|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|    243|            Some(_) => unreachable!(),
 1761|    243|            None => e,
 1762|    243|        } }
 1763|    243|
 1764|    243|        rule PrimaryExpression() -> Expression =
 1765|    243|            BrackettedExpression()  /
 1766|    243|            ExprQuotedTriple() /
 1767|    243|            iriOrFunction() /
 1768|    243|            v:Var() { v.into() } /
 1769|    243|            l:RDFLiteral() { l.into() } /
 1770|    243|            l:NumericLiteral() { l.into() } /
 1771|    243|            l:BooleanLiteral() { l.into() } /
 1772|    243|            BuiltInCall()
 1773|    243|
 1774|    243|        rule ExprVarOrTerm() -> Expression =
 1775|    243|            ExprQuotedTriple() /
 1776|    243|            i:iri() { i.into() } /
 1777|    243|            l:RDFLiteral() { l.into() } /
 1778|    243|            l:NumericLiteral() { l.into() } /
 1779|    243|            l:BooleanLiteral() { l.into() } /
 1780|    243|            v:Var() { v.into() }
 1781|    243|
 1782|    243|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|    243|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|    243|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|    243|        }
 1786|    243|
 1787|    243|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|    243|
 1789|    243|        rule BuiltInCall() -> Expression =
 1790|    243|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|    243|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|    243|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|    243|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|    243|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|    243|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|    243|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|    243|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|    243|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|    243|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|    243|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|    243|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|    243|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|    243|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|    243|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|    243|            SubstringExpression() /
 1806|    243|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|    243|            StrReplaceExpression() /
 1808|    243|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|    243|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|    243|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|    243|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|    243|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|    243|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|    243|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|    243|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|    243|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|    243|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|    243|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|    243|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|    243|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|    243|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|    243|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|    243|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|    243|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|    243|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|    243|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|    243|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|    243|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|    243|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|    243|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|    243|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|    243|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|    243|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|    243|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|    243|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|    243|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|    243|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|    243|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|    243|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|    243|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|    243|            RegexExpression() /
 1842|    243|            ExistsFunc() /
 1843|    243|            NotExistsFunc() /
 1844|    243|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|    243|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|    243|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|    243|            } /
 1848|    243|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|    243|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|    243|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|    243|            } /
 1852|    243|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|    243|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|    243|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|    243|            } /
 1856|    243|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|    243|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|    243|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|    243|            } /
 1860|    243|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|    243|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|    243|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|    243|            } /
 1864|    243|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|    243|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|    243|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|    243|            }
 1868|    243|
 1869|    243|        rule RegexExpression() -> Expression =
 1870|    243|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|    243|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|    243|
 1873|    243|
 1874|    243|        rule SubstringExpression() -> Expression =
 1875|    243|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|    243|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|    243|
 1878|    243|
 1879|    243|        rule StrReplaceExpression() -> Expression =
 1880|    243|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|    243|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|    243|
 1883|    243|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|    243|
 1885|    243|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|    243|
 1887|    243|        rule Aggregate() -> AggregateExpression =
 1888|    243|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|    243|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|    243|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|    243|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|    243|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|    243|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|    243|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|    243|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|    243|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|    243|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|    243|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|    243|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|    243|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|    243|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|    243|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|    243|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|    243|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|    243|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|    243|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|    243|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|    243|
 1909|    243|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|    243|            match a {
 1911|    243|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|    243|                None => i.into()
 1913|    243|            }
 1914|    243|        }
 1915|    243|
 1916|    243|        rule RDFLiteral() -> Literal =
 1917|    243|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|    243|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|    243|            value:String() { Literal::new_simple_literal(value) }
 1920|    243|
 1921|    243|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|    243|
 1923|    243|        rule NumericLiteralUnsigned() -> Literal =
 1924|    243|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|    243|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|    243|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|    243|
 1928|    243|        rule NumericLiteralPositive() -> Literal =
 1929|    243|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|    243|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|    243|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|    243|
 1933|    243|
 1934|    243|        rule NumericLiteralNegative() -> Literal =
 1935|    243|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|    243|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|    243|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|    243|
 1939|    243|        rule BooleanLiteral() -> Literal =
 1940|    243|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|    243|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|    243|
 1943|    243|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|    243|
 1945|    243|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|    243|            NamedNode::from(i)
 1947|    243|        }
 1948|    243|
 1949|    243|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|    243|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|    243|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|    243|            } else {
 1953|    243|                Err("Prefix not found")
 1954|    243|            } }
 1955|    243|
 1956|    243|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|    243|            let node = BlankNode::new_unchecked(id);
 1958|    243|            if state.used_bnodes.contains(&node) {
 1959|    243|                Err("Already used blank node id")
 1960|    243|            } else {
 1961|    243|                state.currently_used_bnodes.insert(node.clone());
 1962|    243|                Ok(node)
 1963|    243|            }
 1964|    243|        } / ANON() { BlankNode::default() }
 1965|    243|
 1966|    243|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|    243|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|    243|        }
 1969|    243|
 1970|    243|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|    243|            ns
 1972|    243|        }
 1973|    243|
 1974|    243|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|    243|            if let Some(base) = state.namespaces.get(ns) {
 1976|    243|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|    243|                iri.push_str(base);
 1978|    243|                for chunk in local.split('\\') { // We remove \
 1979|    243|                    iri.push_str(chunk);
 1980|    243|                }
 1981|    243|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|    243|            } else {
 1983|    243|                Err("Prefix not found")
 1984|    243|            }
 1985|    243|        }
 1986|    243|
 1987|    243|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|    243|            b
 1989|    243|        }
 1990|    243|
 1991|    243|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|    243|
 1993|    243|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|    243|
 1995|    243|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|    243|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|    243|        }
 1998|    243|
 1999|    243|        rule INTEGER() = ['0'..='9']+
 2000|    243|
 2001|    243|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|    243|
 2003|    243|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|    243|
 2005|    243|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|    243|
 2007|    243|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|    243|
 2009|    243|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|    243|
 2011|    243|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|    243|
 2013|    243|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|    243|
 2015|    243|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|    243|
 2017|    243|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|    243|
 2019|    243|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|    243|             unescape_string(l)
 2021|    243|        }
 2022|    243|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|    243|
 2024|    243|
 2025|    243|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|    243|             unescape_string(l)
 2027|    243|        }
 2028|    243|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|    243|
 2030|    243|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|    243|             unescape_string(l)
 2032|    243|        }
 2033|    243|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|    243|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|    243|
 2036|    243|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|    243|             unescape_string(l)
 2038|    243|        }
 2039|    243|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|    243|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|    243|
 2042|    243|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|    243|
 2044|    243|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|    243|
 2046|    243|        rule NIL() = "(" WS()* ")"
 2047|    243|
 2048|    243|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|    243|
 2050|    243|        rule ANON() = "[" WS()* "]"
 2051|    243|
 2052|    243|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|    243|
 2054|    243|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|    243|
 2056|    243|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|    243|
 2058|    243|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|    243|
 2060|    243|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|    243|
 2062|    243|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|    243|
 2064|    243|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|    243|
 2066|    243|        rule PERCENT() = ['%'] HEX() HEX()
 2067|    243|
 2068|    243|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|    243|
 2070|    243|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|    243|
 2072|    243|        //space
 2073|    243|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|    243|
 2075|    243|        //comment
 2076|    243|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|    243|
 2078|    243|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|    243|            if input.eq_ignore_ascii_case(literal) {
 2080|    243|                Ok(())
 2081|    243|            } else {
 2082|    243|                Err(literal)
 2083|    243|            }
 2084|    243|        }
 2085|    243|    }
 2086|    243|}
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_GroupGraphPatterns_0B7_:
 1174|  1.03k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_IRIREF0B7_:
  778|  44.1k|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|       |            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|       |                Ok((vars, vals))
 1288|       |            } else {
 1289|       |                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|       |            }
 1291|       |        }
 1292|       |        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|       |        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|       |        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|       |
 1296|       |        rule DataBlockValue() -> Option<GroundTerm> =
 1297|       |            t:QuotedTripleData() {?
 1298|       |                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|       |            } /
 1301|       |            i:iri() { Some(i.into()) } /
 1302|       |            l:RDFLiteral() { Some(l.into()) } /
 1303|       |            l:NumericLiteral() { Some(l.into()) } /
 1304|       |            l:BooleanLiteral() { Some(l.into()) } /
 1305|       |            i("UNDEF") { None }
 1306|       |
 1307|       |        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|       |            PartialGraphPattern::Minus(p)
 1309|       |        }
 1310|       |
 1311|       |        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|       |            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|       |            }).map(PartialGraphPattern::Other)
 1315|       |        }
 1316|       |        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|       |
 1318|       |        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|       |            PartialGraphPattern::Filter(c)
 1320|       |        }
 1321|       |
 1322|       |        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|       |
 1324|       |        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|       |            Expression::FunctionCall(Function::Custom(f), a)
 1326|       |        }
 1327|       |
 1328|       |        rule ArgList() -> Vec<Expression> =
 1329|       |            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|       |            NIL() { Vec::new() }
 1331|       |        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|       |
 1333|       |        rule ExpressionList() -> Vec<Expression> =
 1334|       |            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|       |            NIL() { Vec::new() }
 1336|       |        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|       |
 1338|       |        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|       |
 1340|       |        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|       |            p.into_iter().flatten().collect()
 1342|       |        }
 1343|       |        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|       |
 1345|       |        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|       |            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|       |                let mut patterns = po.patterns;
 1348|       |                for (p, os) in po.focus {
 1349|       |                    for o in os {
 1350|       |                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|       |                    }
 1352|       |                }
 1353|       |                Ok(patterns)
 1354|       |            } /
 1355|       |            s:TriplesNode() _ po:PropertyList() {?
 1356|       |                let mut patterns = s.patterns;
 1357|       |                patterns.extend(po.patterns);
 1358|       |                for (p, os) in po.focus {
 1359|       |                    for o in os {
 1360|       |                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|       |                    }
 1362|       |                }
 1363|       |                Ok(patterns)
 1364|       |            }
 1365|       |
 1366|       |        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|       |            PropertyListNotEmpty() /
 1368|       |            { FocusedTriplePattern::default() }
 1369|       |
 1370|       |        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|       |            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|       |                a.focus.push(b.focus);
 1373|       |                a.patterns.extend(b.patterns);
 1374|       |                a
 1375|       |            })
 1376|       |        }
 1377|       |        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|       |            FocusedTriplePattern {
 1379|       |                focus: (p, o.focus),
 1380|       |                patterns: o.patterns
 1381|       |            }
 1382|       |        }
 1383|       |
 1384|       |        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|       |
 1386|       |        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|       |            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|       |                a.focus.push(b.focus);
 1389|       |                a.patterns.extend_from_slice(&b.patterns);
 1390|       |                a
 1391|       |            })
 1392|       |        }
 1393|       |        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|       |
 1395|       |        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|       |            if let Some(a) = a {
 1397|       |                let mut patterns = g.patterns;
 1398|       |                patterns.extend(a.patterns);
 1399|       |                FocusedTriplePattern {
 1400|       |                    focus: AnnotatedTerm {
 1401|       |                        term: g.focus,
 1402|       |                        annotations: a.focus
 1403|       |                    },
 1404|       |                    patterns
 1405|       |                }
 1406|       |            } else {
 1407|       |                FocusedTriplePattern {
 1408|       |                    focus: AnnotatedTerm {
 1409|       |                        term: g.focus,
 1410|       |                        annotations: Vec::new()
 1411|       |                    },
 1412|       |                    patterns: g.patterns
 1413|       |                }
 1414|       |            }
 1415|       |        }
 1416|       |
 1417|       |        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|       |            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|       |                let mut patterns = po.patterns;
 1420|       |                for (p, os) in po.focus {
 1421|       |                    for o in os {
 1422|       |                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|       |                    }
 1424|       |                }
 1425|       |                Ok(patterns)
 1426|       |            } /
 1427|       |            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|       |                let mut patterns = s.patterns;
 1429|       |                patterns.extend(po.patterns);
 1430|       |                for (p, os) in po.focus {
 1431|       |                    for o in os {
 1432|       |                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|       |                    }
 1434|       |                }
 1435|       |                Ok(patterns)
 1436|       |            }
 1437|       |
 1438|       |        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|       |            PropertyListPathNotEmpty() /
 1440|       |            { FocusedTripleOrPathPattern::default() }
 1441|       |
 1442|       |        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|       |                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|       |                    focus: vec![(hp, ho.focus)],
 1445|       |                    patterns: ho.patterns
 1446|       |                }, |mut a, b| {
 1447|       |                    a.focus.push(b.focus);
 1448|       |                    a.patterns.extend(b.patterns);
 1449|       |                    a
 1450|       |                })
 1451|       |        }
 1452|       |        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|       |            c
 1454|       |        }
 1455|       |        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|       |            FocusedTripleOrPathPattern {
 1457|       |                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|       |                patterns: o.patterns
 1459|       |            }
 1460|       |        }
 1461|       |
 1462|       |        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|       |            p.into()
 1464|       |        }
 1465|       |
 1466|       |        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|       |            v.into()
 1468|       |        }
 1469|       |
 1470|       |        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|       |            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|       |                a.focus.push(b.focus);
 1473|       |                a.patterns.extend(b.patterns);
 1474|       |                a
 1475|       |            })
 1476|       |        }
 1477|       |        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|       |
 1479|       |        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|       |             if let Some(a) = a {
 1481|       |                let mut patterns = g.patterns;
 1482|       |                patterns.extend(a.patterns);
 1483|       |                FocusedTripleOrPathPattern {
 1484|       |                    focus: AnnotatedTermPath {
 1485|       |                        term: g.focus,
 1486|       |                        annotations: a.focus
 1487|       |                    },
 1488|       |                    patterns
 1489|       |                }
 1490|       |            } else {
 1491|       |                FocusedTripleOrPathPattern {
 1492|       |                    focus: AnnotatedTermPath {
 1493|       |                        term: g.focus,
 1494|       |                        annotations: Vec::new()
 1495|       |                    },
 1496|       |                    patterns: g.patterns
 1497|       |                }
 1498|       |            }
 1499|       |        }
 1500|       |
 1501|       |        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|       |
 1503|       |        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|       |            not_empty_fold(p.into_iter(), |a, b| {
 1505|       |                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|       |            })
 1507|       |        }
 1508|       |        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|       |
 1510|       |        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|       |            not_empty_fold(p.into_iter(), |a, b| {
 1512|       |                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|       |            })
 1514|       |        }
 1515|       |        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|       |
 1517|       |        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|       |            match o {
 1519|       |                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|       |                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|       |                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|       |                Some(_) => unreachable!(),
 1523|       |                None => p
 1524|       |            }
 1525|       |        }
 1526|       |        rule PathElt_op() -> char =
 1527|       |            "*" { '*' } /
 1528|       |            "+" { '+' } /
 1529|       |            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|       |
 1531|       |        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|       |            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|       |            PathElt()
 1534|       |
 1535|       |        rule PathPrimary() -> PropertyPathExpression =
 1536|       |            v:iri() { v.into() } /
 1537|       |            "a" { rdf::TYPE.into_owned().into() } /
 1538|       |            "!" _ p:PathNegatedPropertySet() { p } /
 1539|       |            "(" _ p:Path() _ ")" { p }
 1540|       |
 1541|       |        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|       |            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|       |                let mut direct = Vec::new();
 1544|       |                let mut inverse = Vec::new();
 1545|       |                for e in p {
 1546|       |                    match e {
 1547|       |                        Either::Left(a) => direct.push(a),
 1548|       |                        Either::Right(b) => inverse.push(b)
 1549|       |                    }
 1550|       |                }
 1551|       |                if inverse.is_empty() {
 1552|       |                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|       |                } else if direct.is_empty() {
 1554|       |                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|       |                } else {
 1556|       |                    PropertyPathExpression::Alternative(
 1557|       |                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|       |                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|       |                    )
 1560|       |                }
 1561|       |            } /
 1562|       |            p:PathOneInPropertySet() {
 1563|       |                match p {
 1564|       |                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|       |                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|       |                }
 1567|       |            }
 1568|       |        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|       |
 1570|       |        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|       |            "^" _ v:iri() { Either::Right(v) } /
 1572|       |            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|       |            v:iri() { Either::Left(v) } /
 1574|       |            "a" { Either::Left(rdf::TYPE.into()) }
 1575|       |
 1576|       |        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|       |
 1578|       |        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|       |            let mut patterns = po.patterns;
 1580|       |            let mut bnode = TermPattern::from(BlankNode::default());
 1581|       |            for (p, os) in po.focus {
 1582|       |                for o in os {
 1583|       |                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|       |                }
 1585|       |            }
 1586|       |            Ok(FocusedTriplePattern {
 1587|       |                focus: bnode,
 1588|       |                patterns
 1589|       |            })
 1590|       |        }
 1591|       |
 1592|       |        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|       |
 1594|       |        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|       |            let mut patterns = po.patterns;
 1596|       |            let mut bnode = TermPattern::from(BlankNode::default());
 1597|       |            for (p, os) in po.focus {
 1598|       |                for o in os {
 1599|       |                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|       |                }
 1601|       |            }
 1602|       |            Ok(FocusedTripleOrPathPattern {
 1603|       |                focus: bnode,
 1604|       |                patterns
 1605|       |            })
 1606|       |        }
 1607|       |
 1608|       |        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|       |            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|       |            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|       |            for objWithPatterns in o.into_iter().rev() {
 1612|       |                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|       |                current_list_node = new_blank_node;
 1616|       |                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|       |            }
 1618|       |            FocusedTriplePattern {
 1619|       |                focus: current_list_node,
 1620|       |                patterns
 1621|       |            }
 1622|       |        }
 1623|       |        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|       |
 1625|       |        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|       |            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|       |            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|       |            for objWithPatterns in o.into_iter().rev() {
 1629|       |                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|       |                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|       |                current_list_node = new_blank_node;
 1633|       |                patterns.extend(objWithPatterns.patterns);
 1634|       |            }
 1635|       |            FocusedTripleOrPathPattern {
 1636|       |                focus: current_list_node,
 1637|       |                patterns
 1638|       |            }
 1639|       |        }
 1640|       |        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|       |
 1642|       |
 1643|       |        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|       |
 1645|       |        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|       |
 1647|       |        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|       |            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|       |            TriplesNode()
 1650|       |
 1651|       |        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|       |            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|       |            TriplesNodePath()
 1654|       |
 1655|       |        rule VarOrTerm() -> TermPattern =
 1656|       |            v:Var() { v.into() } /
 1657|       |            t:QuotedTriple() {?
 1658|       |                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|       |            } /
 1661|       |            t:GraphTerm() { t.into() }
 1662|       |
 1663|       |        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|       |            Ok(TriplePattern {
 1665|       |                subject: s,
 1666|       |                predicate: p,
 1667|       |                object: o
 1668|       |            })
 1669|       |        }
 1670|       |
 1671|       |        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|       |            Ok(GroundTriple {
 1673|       |                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|       |                predicate: p,
 1675|       |                object: o
 1676|       |            })
 1677|       |        }
 1678|       |        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|       |
 1680|       |        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|       |            l:RDFLiteral() { l.into() } /
 1682|       |            l:NumericLiteral() { l.into() } /
 1683|       |            l:BooleanLiteral() { l.into() } /
 1684|       |            t:QuotedTripleData() {?
 1685|       |                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|       |            }
 1688|       |
 1689|       |        rule VarOrIri() -> NamedNodePattern =
 1690|       |            v:Var() { v.into() } /
 1691|       |            i:iri() { i.into() }
 1692|       |
 1693|       |        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|       |
 1695|       |        rule GraphTerm() -> Term =
 1696|       |            i:iri() { i.into() } /
 1697|       |            l:RDFLiteral() { l.into() } /
 1698|       |            l:NumericLiteral() { l.into() } /
 1699|       |            l:BooleanLiteral() { l.into() } /
 1700|       |            b:BlankNode() { b.into() } /
 1701|       |            NIL() { rdf::NIL.into_owned().into() }
 1702|       |
 1703|       |        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|       |
 1705|       |        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|       |            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|       |        }
 1708|       |        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|       |
 1710|       |        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|       |        }
 1713|       |        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|       |
 1715|       |        rule ValueLogical() -> Expression = RelationalExpression()
 1716|       |
 1717|       |        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|       |            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|       |            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|       |            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|       |            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|       |            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|       |            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|       |            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|       |            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|       |            Some(_) => unreachable!(),
 1727|       |            None => a
 1728|       |        } }
 1729|       |        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|       |            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|       |            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|       |            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|       |
 1734|       |        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|       |
 1736|       |        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|       |            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|       |            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|       |            Some(_) => unreachable!(),
 1740|       |            None => a,
 1741|       |        } }
 1742|       |        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|       |            (s, e)
 1744|       |        }
 1745|       |
 1746|       |        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|       |            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|       |            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|       |            Some(_) => unreachable!(),
 1750|       |            None => a
 1751|       |        } }
 1752|       |        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|       |            (s, e)
 1754|       |        }
 1755|       |
 1756|       |        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|       |            Some("!") => Expression::Not(Box::new(e)),
 1758|       |            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|       |            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|       |            Some(_) => unreachable!(),
 1761|       |            None => e,
 1762|       |        } }
 1763|       |
 1764|       |        rule PrimaryExpression() -> Expression =
 1765|       |            BrackettedExpression()  /
 1766|       |            ExprQuotedTriple() /
 1767|       |            iriOrFunction() /
 1768|       |            v:Var() { v.into() } /
 1769|       |            l:RDFLiteral() { l.into() } /
 1770|       |            l:NumericLiteral() { l.into() } /
 1771|       |            l:BooleanLiteral() { l.into() } /
 1772|       |            BuiltInCall()
 1773|       |
 1774|       |        rule ExprVarOrTerm() -> Expression =
 1775|       |            ExprQuotedTriple() /
 1776|       |            i:iri() { i.into() } /
 1777|       |            l:RDFLiteral() { l.into() } /
 1778|       |            l:NumericLiteral() { l.into() } /
 1779|       |            l:BooleanLiteral() { l.into() } /
 1780|       |            v:Var() { v.into() }
 1781|       |
 1782|       |        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|       |            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|       |            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|       |        }
 1786|       |
 1787|       |        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|       |
 1789|       |        rule BuiltInCall() -> Expression =
 1790|       |            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|       |            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|       |            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|       |            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|       |            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|       |            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|       |            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|       |            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|       |            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|       |            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|       |            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|       |            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|       |            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|       |            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|       |            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|       |            SubstringExpression() /
 1806|       |            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|       |            StrReplaceExpression() /
 1808|       |            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|       |            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|       |            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|       |            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|       |            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|       |            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|       |            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|       |            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|       |            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|       |            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|       |            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|       |            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|       |            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|       |            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|       |            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|       |            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|       |            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|       |            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|       |            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|       |            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|       |            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|       |            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|       |            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|       |            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|       |            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|       |            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|       |            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|       |            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|       |            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|       |            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|       |            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|       |            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|       |            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|       |            RegexExpression() /
 1842|       |            ExistsFunc() /
 1843|       |            NotExistsFunc() /
 1844|       |            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|       |                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|       |            } /
 1848|       |            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|       |                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|       |            } /
 1852|       |            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|       |                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|       |            } /
 1856|       |            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|       |                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|       |            } /
 1860|       |            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|       |                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|       |                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|       |            } /
 1864|       |            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|       |                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|       |                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|       |            }
 1868|       |
 1869|       |        rule RegexExpression() -> Expression =
 1870|       |            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|       |            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|       |
 1873|       |
 1874|       |        rule SubstringExpression() -> Expression =
 1875|       |            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|       |            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|       |
 1878|       |
 1879|       |        rule StrReplaceExpression() -> Expression =
 1880|       |            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|       |            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|       |
 1883|       |        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|       |
 1885|       |        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|       |
 1887|       |        rule Aggregate() -> AggregateExpression =
 1888|       |            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|       |            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|       |            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|       |            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|       |            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|       |            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|       |            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|       |            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|       |            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|       |            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|       |            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|       |            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|       |            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|       |            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|       |            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|       |            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|       |            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|       |            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|       |            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|       |            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|       |
 1909|       |        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|       |            match a {
 1911|       |                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|       |                None => i.into()
 1913|       |            }
 1914|       |        }
 1915|       |
 1916|       |        rule RDFLiteral() -> Literal =
 1917|       |            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|       |            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|       |            value:String() { Literal::new_simple_literal(value) }
 1920|       |
 1921|       |        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|       |
 1923|       |        rule NumericLiteralUnsigned() -> Literal =
 1924|       |            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|       |            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|       |            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|       |
 1928|       |        rule NumericLiteralPositive() -> Literal =
 1929|       |            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|       |            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|       |            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|       |
 1933|       |
 1934|       |        rule NumericLiteralNegative() -> Literal =
 1935|       |            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|       |            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|       |            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|       |
 1939|       |        rule BooleanLiteral() -> Literal =
 1940|       |            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|       |            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|       |
 1943|       |        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|       |
 1945|       |        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|       |            NamedNode::from(i)
 1947|       |        }
 1948|       |
 1949|       |        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|       |            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|       |                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|       |            } else {
 1953|       |                Err("Prefix not found")
 1954|       |            } }
 1955|       |
 1956|       |        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|       |            let node = BlankNode::new_unchecked(id);
 1958|       |            if state.used_bnodes.contains(&node) {
 1959|       |                Err("Already used blank node id")
 1960|       |            } else {
 1961|       |                state.currently_used_bnodes.insert(node.clone());
 1962|       |                Ok(node)
 1963|       |            }
 1964|       |        } / ANON() { BlankNode::default() }
 1965|       |
 1966|       |        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  44.1k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_InsertClause0B7_:
 1123|  1.96k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_GroupGraphPattern0B7_:
 1173|  2.62k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_BuiltInCalls0_0B7_:
 1792|      6|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_SelectClause_option0B7_:
  821|    246|            i("DISTINCT") { SelectionOption::Distinct } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_GroupCondition0B7_:
  936|     34|            e:BuiltInCall() { (e, None) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_BooleanLiterals_0B7_:
 1941|    311|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_Object0B7_:
 1395|  14.0k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  14.0k|            if let Some(a) = a {
 1397|      0|                let mut patterns = g.patterns;
 1398|      0|                patterns.extend(a.patterns);
 1399|      0|                FocusedTriplePattern {
 1400|      0|                    focus: AnnotatedTerm {
 1401|      0|                        term: g.focus,
 1402|      0|                        annotations: a.focus
 1403|      0|                    },
 1404|      0|                    patterns
 1405|      0|                }
 1406|       |            } else {
 1407|  14.0k|                FocusedTriplePattern {
 1408|  14.0k|                    focus: AnnotatedTerm {
 1409|  14.0k|                        term: g.focus,
 1410|  14.0k|                        annotations: Vec::new()
 1411|  14.0k|                    },
 1412|  14.0k|                    patterns: g.patterns
 1413|  14.0k|                }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_DataBlockValues0_0B7_:
 1302|    123|            l:RDFLiteral() { Some(l.into()) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_PathOneInPropertySet0B7_:
 1571|  2.04k|            "^" _ v:iri() { Either::Right(v) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_CollectionPath_item0B7_:
 1640|  2.20k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_GraphOrDefaults_0B7_:
 1135|    960|        } / (i("GRAPH") _)? g:iri() {
 1136|    960|            GraphName::NamedNode(g)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_Selection_init0B7_:
  817|  1.48k|        rule Selection_init() = {
  818|  1.48k|            state.aggregates.push(Vec::new())
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser13___parse_Quads0B7_:
 1155|  4.47k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  4.47k|            q.into_iter().flatten().collect()
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_WhereClause0B7_:
  916|  1.35k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  1.35k|            p
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_GraphTerms1_0B7_:
 1699|    452|            l:BooleanLiteral() { l.into() } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser34___parse_RelationalExpression_inners_0B7_:
 1731|     81|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_GroundQuadData00B9_:
 1152|    938|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_BuiltInCalls4_0B7_:
 1796|      2|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_ExistsFunc0B7_:
 1883|     48|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_GraphTerms_0B7_:
 1697|    920|            l:RDFLiteral() { l.into() } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_InsertData0B7_:
 1025|    150|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|    150|            vec![GraphUpdateOperation::InsertData { data }]
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser21___parse_NotExistsFunc0B7_:
 1885|     28|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_Prologue0B7_:
  789|  2.45k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_Expression0B7_:
 1703|  1.53k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_PathAlternative0B7_:
  778|  18.9k|parser! {
  779|  18.9k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  18.9k|    grammar parser(state: &mut ParserState) for str {
  781|  18.9k|        pub rule QueryUnit() -> Query = Query()
  782|  18.9k|
  783|  18.9k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  18.9k|            q
  785|  18.9k|        }
  786|  18.9k|
  787|  18.9k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  18.9k|
  789|  18.9k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  18.9k|
  791|  18.9k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  18.9k|            state.base_iri = Some(i)
  793|  18.9k|        }
  794|  18.9k|
  795|  18.9k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  18.9k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  18.9k|        }
  798|  18.9k|
  799|  18.9k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  18.9k|            Ok(Query::Select {
  801|  18.9k|                dataset: d,
  802|  18.9k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  18.9k|                base_iri: state.base_iri.clone()
  804|  18.9k|            })
  805|  18.9k|        }
  806|  18.9k|
  807|  18.9k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  18.9k|            build_select(s, w, g, h, o, l, v, state)
  809|  18.9k|        }
  810|  18.9k|
  811|  18.9k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  18.9k|            Selection {
  813|  18.9k|                option: o,
  814|  18.9k|                variables: v
  815|  18.9k|            }
  816|  18.9k|        }
  817|  18.9k|        rule Selection_init() = {
  818|  18.9k|            state.aggregates.push(Vec::new())
  819|  18.9k|        }
  820|  18.9k|        rule SelectClause_option() -> SelectionOption =
  821|  18.9k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  18.9k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  18.9k|            { SelectionOption::Default }
  824|  18.9k|        rule SelectClause_variables() -> SelectionVariables =
  825|  18.9k|            "*" { SelectionVariables::Star } /
  826|  18.9k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  18.9k|        rule SelectClause_member() -> SelectionMember =
  828|  18.9k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  18.9k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  18.9k|
  831|  18.9k|        rule ConstructQuery() -> Query =
  832|  18.9k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  18.9k|                Ok(Query::Construct {
  834|  18.9k|                    template: c,
  835|  18.9k|                    dataset: d,
  836|  18.9k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  18.9k|                    base_iri: state.base_iri.clone()
  838|  18.9k|                })
  839|  18.9k|            } /
  840|  18.9k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  18.9k|                Ok(Query::Construct {
  842|  18.9k|                    template: c.clone(),
  843|  18.9k|                    dataset: d,
  844|  18.9k|                    pattern: build_select(
  845|  18.9k|                        Selection::no_op(),
  846|  18.9k|                        GraphPattern::Bgp { patterns: c },
  847|  18.9k|                        g, h, o, l, v, state
  848|  18.9k|                    )?,
  849|  18.9k|                    base_iri: state.base_iri.clone()
  850|  18.9k|                })
  851|  18.9k|            }
  852|  18.9k|
  853|  18.9k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  18.9k|
  855|  18.9k|        rule DescribeQuery() -> Query =
  856|  18.9k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  18.9k|                Ok(Query::Describe {
  858|  18.9k|                    dataset: d,
  859|  18.9k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  18.9k|                    base_iri: state.base_iri.clone()
  861|  18.9k|                })
  862|  18.9k|            } /
  863|  18.9k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  18.9k|                Ok(Query::Describe {
  865|  18.9k|                    dataset: d,
  866|  18.9k|                    pattern: build_select(Selection {
  867|  18.9k|                        option: SelectionOption::Default,
  868|  18.9k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  18.9k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  18.9k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  18.9k|                        }).collect())
  872|  18.9k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  18.9k|                    base_iri: state.base_iri.clone()
  874|  18.9k|                })
  875|  18.9k|            }
  876|  18.9k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  18.9k|
  878|  18.9k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  18.9k|            Ok(Query::Ask {
  880|  18.9k|                dataset: d,
  881|  18.9k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  18.9k|                base_iri: state.base_iri.clone()
  883|  18.9k|            })
  884|  18.9k|        }
  885|  18.9k|
  886|  18.9k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  18.9k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  18.9k|            if d.is_empty() {
  889|  18.9k|                return None;
  890|  18.9k|            }
  891|  18.9k|            let mut default = Vec::new();
  892|  18.9k|            let mut named = Vec::new();
  893|  18.9k|            for (d, n) in d {
  894|  18.9k|                if let Some(d) = d {
  895|  18.9k|                    default.push(d);
  896|  18.9k|                }
  897|  18.9k|                if let Some(n) = n {
  898|  18.9k|                    named.push(n);
  899|  18.9k|                }
  900|  18.9k|            }
  901|  18.9k|            Some(QueryDataset {
  902|  18.9k|                default, named: Some(named)
  903|  18.9k|            })
  904|  18.9k|        }
  905|  18.9k|
  906|  18.9k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  18.9k|            (Some(s), None)
  908|  18.9k|        }
  909|  18.9k|
  910|  18.9k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  18.9k|            (None, Some(s))
  912|  18.9k|        }
  913|  18.9k|
  914|  18.9k|        rule SourceSelector() -> NamedNode = iri()
  915|  18.9k|
  916|  18.9k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  18.9k|            p
  918|  18.9k|        }
  919|  18.9k|
  920|  18.9k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  18.9k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  18.9k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  18.9k|                if let Expression::Variable(v) = e {
  924|  18.9k|                    v
  925|  18.9k|                } else {
  926|  18.9k|                    let v = vo.unwrap_or_else(variable);
  927|  18.9k|                    projections.push((e, v.clone()));
  928|  18.9k|                    v
  929|  18.9k|                }
  930|  18.9k|            }).collect();
  931|  18.9k|            (clauses, projections)
  932|  18.9k|        }
  933|  18.9k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  18.9k|
  935|  18.9k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  18.9k|            e:BuiltInCall() { (e, None) } /
  937|  18.9k|            e:FunctionCall() { (e, None) } /
  938|  18.9k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  18.9k|            e:Var() { (e.into(), None) }
  940|  18.9k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  18.9k|
  942|  18.9k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  18.9k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  18.9k|        }
  945|  18.9k|
  946|  18.9k|        rule HavingCondition() -> Expression = Constraint()
  947|  18.9k|
  948|  18.9k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  18.9k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  18.9k|
  951|  18.9k|        rule OrderCondition() -> OrderExpression =
  952|  18.9k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  18.9k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  18.9k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  18.9k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  18.9k|
  957|  18.9k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  18.9k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  18.9k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  18.9k|
  961|  18.9k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  18.9k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  18.9k|        }
  964|  18.9k|
  965|  18.9k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  18.9k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  18.9k|        }
  968|  18.9k|
  969|  18.9k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  18.9k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  18.9k|            { None }
  972|  18.9k|
  973|  18.9k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  18.9k|
  975|  18.9k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  18.9k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  18.9k|
  978|  18.9k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  18.9k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  18.9k|        }
  981|  18.9k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  18.9k|
  983|  18.9k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  18.9k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  18.9k|        }
  986|  18.9k|
  987|  18.9k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  18.9k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  18.9k|        }
  990|  18.9k|
  991|  18.9k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  18.9k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  18.9k|        }
  994|  18.9k|
  995|  18.9k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  18.9k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  18.9k|            if from == to {
  998|  18.9k|                Vec::new() // identity case
  999|  18.9k|            } else {
 1000|  18.9k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  18.9k|                vec![copy_graph(from, to)]
 1002|  18.9k|            }
 1003|  18.9k|        }
 1004|  18.9k|
 1005|  18.9k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  18.9k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  18.9k|            if from == to {
 1008|  18.9k|                Vec::new() // identity case
 1009|  18.9k|            } else {
 1010|  18.9k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  18.9k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  18.9k|            }
 1013|  18.9k|        }
 1014|  18.9k|
 1015|  18.9k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  18.9k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  18.9k|            if from == to {
 1018|  18.9k|                Vec::new() // identity case
 1019|  18.9k|            } else {
 1020|  18.9k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  18.9k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  18.9k|            }
 1023|  18.9k|        }
 1024|  18.9k|
 1025|  18.9k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  18.9k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  18.9k|        }
 1028|  18.9k|
 1029|  18.9k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  18.9k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  18.9k|        }
 1032|  18.9k|
 1033|  18.9k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  18.9k|            let pattern = d.iter().map(|q| {
 1035|  18.9k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  18.9k|                match &q.graph_name {
 1037|  18.9k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  18.9k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  18.9k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  18.9k|                }
 1041|  18.9k|            }).reduce(new_join).unwrap_or_default();
 1042|  18.9k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  18.9k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  18.9k|                delete,
 1045|  18.9k|                insert: Vec::new(),
 1046|  18.9k|                using: None,
 1047|  18.9k|                pattern: Box::new(pattern)
 1048|  18.9k|            }])
 1049|  18.9k|        }
 1050|  18.9k|
 1051|  18.9k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  18.9k|            let (delete, insert) = c;
 1053|  18.9k|            let mut delete = delete.unwrap_or_default();
 1054|  18.9k|            let mut insert = insert.unwrap_or_default();
 1055|  18.9k|            #[allow(clippy::shadow_same)]
 1056|  18.9k|            let mut pattern = pattern;
 1057|  18.9k|
 1058|  18.9k|            let mut using = if u.is_empty() {
 1059|  18.9k|                None
 1060|  18.9k|            } else {
 1061|  18.9k|                let mut default = Vec::new();
 1062|  18.9k|                let mut named = Vec::new();
 1063|  18.9k|                for (d, n) in u {
 1064|  18.9k|                    if let Some(d) = d {
 1065|  18.9k|                        default.push(d)
 1066|  18.9k|                    }
 1067|  18.9k|                    if let Some(n) = n {
 1068|  18.9k|                        named.push(n)
 1069|  18.9k|                    }
 1070|  18.9k|                }
 1071|  18.9k|                Some(QueryDataset { default, named: Some(named) })
 1072|  18.9k|            };
 1073|  18.9k|
 1074|  18.9k|            if let Some(with) = with {
 1075|  18.9k|                // We inject WITH everywhere
 1076|  18.9k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  18.9k|                    GroundQuadPattern {
 1078|  18.9k|                        subject: q.subject,
 1079|  18.9k|                        predicate: q.predicate,
 1080|  18.9k|                        object: q.object,
 1081|  18.9k|                        graph_name: with.clone().into()
 1082|  18.9k|                    }
 1083|  18.9k|                } else {
 1084|  18.9k|                    q
 1085|  18.9k|                }).collect();
 1086|  18.9k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  18.9k|                    QuadPattern {
 1088|  18.9k|                        subject: q.subject,
 1089|  18.9k|                        predicate: q.predicate,
 1090|  18.9k|                        object: q.object,
 1091|  18.9k|                        graph_name: with.clone().into()
 1092|  18.9k|                    }
 1093|  18.9k|                } else {
 1094|  18.9k|                    q
 1095|  18.9k|                }).collect();
 1096|  18.9k|                if using.is_none() {
 1097|  18.9k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  18.9k|                }
 1099|  18.9k|            }
 1100|  18.9k|
 1101|  18.9k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  18.9k|                delete,
 1103|  18.9k|                insert,
 1104|  18.9k|                using,
 1105|  18.9k|                pattern: Box::new(pattern)
 1106|  18.9k|            }]
 1107|  18.9k|        }
 1108|  18.9k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  18.9k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  18.9k|            (Some(d), i)
 1111|  18.9k|        } / i:InsertClause() {
 1112|  18.9k|            (None, Some(i))
 1113|  18.9k|        }
 1114|  18.9k|        rule Modify_clear() = {
 1115|  18.9k|            state.used_bnodes.clear();
 1116|  18.9k|            state.currently_used_bnodes.clear();
 1117|  18.9k|        }
 1118|  18.9k|
 1119|  18.9k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  18.9k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  18.9k|        }
 1122|  18.9k|
 1123|  18.9k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  18.9k|
 1125|  18.9k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  18.9k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  18.9k|            (Some(i), None)
 1128|  18.9k|        }
 1129|  18.9k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  18.9k|            (None, Some(i))
 1131|  18.9k|        }
 1132|  18.9k|
 1133|  18.9k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  18.9k|            GraphName::DefaultGraph
 1135|  18.9k|        } / (i("GRAPH") _)? g:iri() {
 1136|  18.9k|            GraphName::NamedNode(g)
 1137|  18.9k|        }
 1138|  18.9k|
 1139|  18.9k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  18.9k|
 1141|  18.9k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  18.9k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  18.9k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  18.9k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  18.9k|
 1146|  18.9k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  18.9k|
 1148|  18.9k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  18.9k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  18.9k|        }
 1151|  18.9k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  18.9k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  18.9k|        }
 1154|  18.9k|
 1155|  18.9k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  18.9k|            q.into_iter().flatten().collect()
 1157|  18.9k|        }
 1158|  18.9k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  18.9k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  18.9k|        } //TODO: return iter?
 1161|  18.9k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  18.9k|
 1163|  18.9k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  18.9k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  18.9k|        }
 1166|  18.9k|
 1167|  18.9k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  18.9k|            ts.into_iter().flatten().collect()
 1169|  18.9k|        }
 1170|  18.9k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  18.9k|
 1172|  18.9k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  18.9k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  18.9k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  18.9k|        rule GroupGraphPattern_clear() = {
 1176|  18.9k|             // We deal with blank nodes aliases rule
 1177|  18.9k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  18.9k|            state.currently_used_bnodes.clear();
 1179|  18.9k|        }
 1180|  18.9k|
 1181|  18.9k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  18.9k|            let mut filter: Option<Expression> = None;
 1183|  18.9k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  18.9k|            for e in b.into_iter().flatten() {
 1185|  18.9k|                match e {
 1186|  18.9k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  18.9k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  18.9k|                    }
 1189|  18.9k|                    #[cfg(feature = "sep-0006")]
 1190|  18.9k|                    PartialGraphPattern::Lateral(p) => {
 1191|  18.9k|                        let mut defined_variables = HashSet::default();
 1192|  18.9k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  18.9k|                        let mut contains = false;
 1194|  18.9k|                        g.on_in_scope_variable(|v| {
 1195|  18.9k|                            if defined_variables.contains(v) {
 1196|  18.9k|                                contains = true;
 1197|  18.9k|                            }
 1198|  18.9k|                        });
 1199|  18.9k|                        if contains {
 1200|  18.9k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  18.9k|                        }
 1202|  18.9k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  18.9k|                    }
 1204|  18.9k|                    PartialGraphPattern::Minus(p) => {
 1205|  18.9k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  18.9k|                    }
 1207|  18.9k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  18.9k|                        let mut contains = false;
 1209|  18.9k|                        g.on_in_scope_variable(|v| {
 1210|  18.9k|                            if *v == variable {
 1211|  18.9k|                                contains = true;
 1212|  18.9k|                            }
 1213|  18.9k|                        });
 1214|  18.9k|                        if contains {
 1215|  18.9k|                            return Err("BIND is overriding an existing variable")
 1216|  18.9k|                        }
 1217|  18.9k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  18.9k|                    }
 1219|  18.9k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  18.9k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  18.9k|                    } else {
 1222|  18.9k|                        expr
 1223|  18.9k|                    }),
 1224|  18.9k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  18.9k|                }
 1226|  18.9k|            }
 1227|  18.9k|
 1228|  18.9k|            Ok(if let Some(expr) = filter {
 1229|  18.9k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  18.9k|            } else {
 1231|  18.9k|                g
 1232|  18.9k|            })
 1233|  18.9k|        }
 1234|  18.9k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  18.9k|            let mut result = vec![a];
 1236|  18.9k|            if let Some(v) = b {
 1237|  18.9k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  18.9k|            }
 1239|  18.9k|            result
 1240|  18.9k|        }
 1241|  18.9k|
 1242|  18.9k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  18.9k|            hs.into_iter().flatten().collect()
 1244|  18.9k|        }
 1245|  18.9k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  18.9k|
 1247|  18.9k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  18.9k|
 1249|  18.9k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  18.9k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  18.9k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  18.9k|            } else {
 1253|  18.9k|               PartialGraphPattern::Optional(p, None)
 1254|  18.9k|            }
 1255|  18.9k|        }
 1256|  18.9k|
 1257|  18.9k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  18.9k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  18.9k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  18.9k|        }
 1261|  18.9k|
 1262|  18.9k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  18.9k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  18.9k|        }
 1265|  18.9k|
 1266|  18.9k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  18.9k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  18.9k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  18.9k|
 1270|  18.9k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  18.9k|            PartialGraphPattern::Bind(e, v)
 1272|  18.9k|        }
 1273|  18.9k|
 1274|  18.9k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  18.9k|
 1276|  18.9k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  18.9k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  18.9k|        }
 1279|  18.9k|
 1280|  18.9k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  18.9k|            (vec![var], d)
 1282|  18.9k|        }
 1283|  18.9k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  18.9k|
 1285|  18.9k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  18.9k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  18.9k|                Ok((vars, vals))
 1288|  18.9k|            } else {
 1289|  18.9k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  18.9k|            }
 1291|  18.9k|        }
 1292|  18.9k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  18.9k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  18.9k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  18.9k|
 1296|  18.9k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  18.9k|            t:QuotedTripleData() {?
 1298|  18.9k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  18.9k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  18.9k|            } /
 1301|  18.9k|            i:iri() { Some(i.into()) } /
 1302|  18.9k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  18.9k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  18.9k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  18.9k|            i("UNDEF") { None }
 1306|  18.9k|
 1307|  18.9k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  18.9k|            PartialGraphPattern::Minus(p)
 1309|  18.9k|        }
 1310|  18.9k|
 1311|  18.9k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  18.9k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  18.9k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  18.9k|            }).map(PartialGraphPattern::Other)
 1315|  18.9k|        }
 1316|  18.9k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  18.9k|
 1318|  18.9k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  18.9k|            PartialGraphPattern::Filter(c)
 1320|  18.9k|        }
 1321|  18.9k|
 1322|  18.9k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  18.9k|
 1324|  18.9k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  18.9k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  18.9k|        }
 1327|  18.9k|
 1328|  18.9k|        rule ArgList() -> Vec<Expression> =
 1329|  18.9k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  18.9k|            NIL() { Vec::new() }
 1331|  18.9k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  18.9k|
 1333|  18.9k|        rule ExpressionList() -> Vec<Expression> =
 1334|  18.9k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  18.9k|            NIL() { Vec::new() }
 1336|  18.9k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  18.9k|
 1338|  18.9k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  18.9k|
 1340|  18.9k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  18.9k|            p.into_iter().flatten().collect()
 1342|  18.9k|        }
 1343|  18.9k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  18.9k|
 1345|  18.9k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  18.9k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  18.9k|                let mut patterns = po.patterns;
 1348|  18.9k|                for (p, os) in po.focus {
 1349|  18.9k|                    for o in os {
 1350|  18.9k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  18.9k|                    }
 1352|  18.9k|                }
 1353|  18.9k|                Ok(patterns)
 1354|  18.9k|            } /
 1355|  18.9k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  18.9k|                let mut patterns = s.patterns;
 1357|  18.9k|                patterns.extend(po.patterns);
 1358|  18.9k|                for (p, os) in po.focus {
 1359|  18.9k|                    for o in os {
 1360|  18.9k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  18.9k|                    }
 1362|  18.9k|                }
 1363|  18.9k|                Ok(patterns)
 1364|  18.9k|            }
 1365|  18.9k|
 1366|  18.9k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  18.9k|            PropertyListNotEmpty() /
 1368|  18.9k|            { FocusedTriplePattern::default() }
 1369|  18.9k|
 1370|  18.9k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  18.9k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  18.9k|                a.focus.push(b.focus);
 1373|  18.9k|                a.patterns.extend(b.patterns);
 1374|  18.9k|                a
 1375|  18.9k|            })
 1376|  18.9k|        }
 1377|  18.9k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  18.9k|            FocusedTriplePattern {
 1379|  18.9k|                focus: (p, o.focus),
 1380|  18.9k|                patterns: o.patterns
 1381|  18.9k|            }
 1382|  18.9k|        }
 1383|  18.9k|
 1384|  18.9k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  18.9k|
 1386|  18.9k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  18.9k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  18.9k|                a.focus.push(b.focus);
 1389|  18.9k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  18.9k|                a
 1391|  18.9k|            })
 1392|  18.9k|        }
 1393|  18.9k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  18.9k|
 1395|  18.9k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  18.9k|            if let Some(a) = a {
 1397|  18.9k|                let mut patterns = g.patterns;
 1398|  18.9k|                patterns.extend(a.patterns);
 1399|  18.9k|                FocusedTriplePattern {
 1400|  18.9k|                    focus: AnnotatedTerm {
 1401|  18.9k|                        term: g.focus,
 1402|  18.9k|                        annotations: a.focus
 1403|  18.9k|                    },
 1404|  18.9k|                    patterns
 1405|  18.9k|                }
 1406|  18.9k|            } else {
 1407|  18.9k|                FocusedTriplePattern {
 1408|  18.9k|                    focus: AnnotatedTerm {
 1409|  18.9k|                        term: g.focus,
 1410|  18.9k|                        annotations: Vec::new()
 1411|  18.9k|                    },
 1412|  18.9k|                    patterns: g.patterns
 1413|  18.9k|                }
 1414|  18.9k|            }
 1415|  18.9k|        }
 1416|  18.9k|
 1417|  18.9k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  18.9k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  18.9k|                let mut patterns = po.patterns;
 1420|  18.9k|                for (p, os) in po.focus {
 1421|  18.9k|                    for o in os {
 1422|  18.9k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  18.9k|                    }
 1424|  18.9k|                }
 1425|  18.9k|                Ok(patterns)
 1426|  18.9k|            } /
 1427|  18.9k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  18.9k|                let mut patterns = s.patterns;
 1429|  18.9k|                patterns.extend(po.patterns);
 1430|  18.9k|                for (p, os) in po.focus {
 1431|  18.9k|                    for o in os {
 1432|  18.9k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  18.9k|                    }
 1434|  18.9k|                }
 1435|  18.9k|                Ok(patterns)
 1436|  18.9k|            }
 1437|  18.9k|
 1438|  18.9k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  18.9k|            PropertyListPathNotEmpty() /
 1440|  18.9k|            { FocusedTripleOrPathPattern::default() }
 1441|  18.9k|
 1442|  18.9k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  18.9k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  18.9k|                    focus: vec![(hp, ho.focus)],
 1445|  18.9k|                    patterns: ho.patterns
 1446|  18.9k|                }, |mut a, b| {
 1447|  18.9k|                    a.focus.push(b.focus);
 1448|  18.9k|                    a.patterns.extend(b.patterns);
 1449|  18.9k|                    a
 1450|  18.9k|                })
 1451|  18.9k|        }
 1452|  18.9k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  18.9k|            c
 1454|  18.9k|        }
 1455|  18.9k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  18.9k|            FocusedTripleOrPathPattern {
 1457|  18.9k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  18.9k|                patterns: o.patterns
 1459|  18.9k|            }
 1460|  18.9k|        }
 1461|  18.9k|
 1462|  18.9k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  18.9k|            p.into()
 1464|  18.9k|        }
 1465|  18.9k|
 1466|  18.9k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  18.9k|            v.into()
 1468|  18.9k|        }
 1469|  18.9k|
 1470|  18.9k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  18.9k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  18.9k|                a.focus.push(b.focus);
 1473|  18.9k|                a.patterns.extend(b.patterns);
 1474|  18.9k|                a
 1475|  18.9k|            })
 1476|  18.9k|        }
 1477|  18.9k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  18.9k|
 1479|  18.9k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  18.9k|             if let Some(a) = a {
 1481|  18.9k|                let mut patterns = g.patterns;
 1482|  18.9k|                patterns.extend(a.patterns);
 1483|  18.9k|                FocusedTripleOrPathPattern {
 1484|  18.9k|                    focus: AnnotatedTermPath {
 1485|  18.9k|                        term: g.focus,
 1486|  18.9k|                        annotations: a.focus
 1487|  18.9k|                    },
 1488|  18.9k|                    patterns
 1489|  18.9k|                }
 1490|  18.9k|            } else {
 1491|  18.9k|                FocusedTripleOrPathPattern {
 1492|  18.9k|                    focus: AnnotatedTermPath {
 1493|  18.9k|                        term: g.focus,
 1494|  18.9k|                        annotations: Vec::new()
 1495|  18.9k|                    },
 1496|  18.9k|                    patterns: g.patterns
 1497|  18.9k|                }
 1498|  18.9k|            }
 1499|  18.9k|        }
 1500|  18.9k|
 1501|  18.9k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  18.9k|
 1503|  18.9k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  18.9k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|       |                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  18.9k|            })
 1507|  18.9k|        }
 1508|  18.9k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  18.9k|
 1510|  18.9k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  18.9k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  18.9k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  18.9k|            })
 1514|  18.9k|        }
 1515|  18.9k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  18.9k|
 1517|  18.9k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  18.9k|            match o {
 1519|  18.9k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  18.9k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  18.9k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  18.9k|                Some(_) => unreachable!(),
 1523|  18.9k|                None => p
 1524|  18.9k|            }
 1525|  18.9k|        }
 1526|  18.9k|        rule PathElt_op() -> char =
 1527|  18.9k|            "*" { '*' } /
 1528|  18.9k|            "+" { '+' } /
 1529|  18.9k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  18.9k|
 1531|  18.9k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  18.9k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  18.9k|            PathElt()
 1534|  18.9k|
 1535|  18.9k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  18.9k|            v:iri() { v.into() } /
 1537|  18.9k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  18.9k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  18.9k|            "(" _ p:Path() _ ")" { p }
 1540|  18.9k|
 1541|  18.9k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  18.9k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  18.9k|                let mut direct = Vec::new();
 1544|  18.9k|                let mut inverse = Vec::new();
 1545|  18.9k|                for e in p {
 1546|  18.9k|                    match e {
 1547|  18.9k|                        Either::Left(a) => direct.push(a),
 1548|  18.9k|                        Either::Right(b) => inverse.push(b)
 1549|  18.9k|                    }
 1550|  18.9k|                }
 1551|  18.9k|                if inverse.is_empty() {
 1552|  18.9k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  18.9k|                } else if direct.is_empty() {
 1554|  18.9k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  18.9k|                } else {
 1556|  18.9k|                    PropertyPathExpression::Alternative(
 1557|  18.9k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  18.9k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  18.9k|                    )
 1560|  18.9k|                }
 1561|  18.9k|            } /
 1562|  18.9k|            p:PathOneInPropertySet() {
 1563|  18.9k|                match p {
 1564|  18.9k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  18.9k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  18.9k|                }
 1567|  18.9k|            }
 1568|  18.9k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  18.9k|
 1570|  18.9k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  18.9k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  18.9k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  18.9k|            v:iri() { Either::Left(v) } /
 1574|  18.9k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  18.9k|
 1576|  18.9k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  18.9k|
 1578|  18.9k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  18.9k|            let mut patterns = po.patterns;
 1580|  18.9k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  18.9k|            for (p, os) in po.focus {
 1582|  18.9k|                for o in os {
 1583|  18.9k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  18.9k|                }
 1585|  18.9k|            }
 1586|  18.9k|            Ok(FocusedTriplePattern {
 1587|  18.9k|                focus: bnode,
 1588|  18.9k|                patterns
 1589|  18.9k|            })
 1590|  18.9k|        }
 1591|  18.9k|
 1592|  18.9k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  18.9k|
 1594|  18.9k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  18.9k|            let mut patterns = po.patterns;
 1596|  18.9k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  18.9k|            for (p, os) in po.focus {
 1598|  18.9k|                for o in os {
 1599|  18.9k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  18.9k|                }
 1601|  18.9k|            }
 1602|  18.9k|            Ok(FocusedTripleOrPathPattern {
 1603|  18.9k|                focus: bnode,
 1604|  18.9k|                patterns
 1605|  18.9k|            })
 1606|  18.9k|        }
 1607|  18.9k|
 1608|  18.9k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  18.9k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  18.9k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  18.9k|            for objWithPatterns in o.into_iter().rev() {
 1612|  18.9k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  18.9k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  18.9k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  18.9k|                current_list_node = new_blank_node;
 1616|  18.9k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  18.9k|            }
 1618|  18.9k|            FocusedTriplePattern {
 1619|  18.9k|                focus: current_list_node,
 1620|  18.9k|                patterns
 1621|  18.9k|            }
 1622|  18.9k|        }
 1623|  18.9k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  18.9k|
 1625|  18.9k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  18.9k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  18.9k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  18.9k|            for objWithPatterns in o.into_iter().rev() {
 1629|  18.9k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  18.9k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  18.9k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  18.9k|                current_list_node = new_blank_node;
 1633|  18.9k|                patterns.extend(objWithPatterns.patterns);
 1634|  18.9k|            }
 1635|  18.9k|            FocusedTripleOrPathPattern {
 1636|  18.9k|                focus: current_list_node,
 1637|  18.9k|                patterns
 1638|  18.9k|            }
 1639|  18.9k|        }
 1640|  18.9k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  18.9k|
 1642|  18.9k|
 1643|  18.9k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  18.9k|
 1645|  18.9k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  18.9k|
 1647|  18.9k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  18.9k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  18.9k|            TriplesNode()
 1650|  18.9k|
 1651|  18.9k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  18.9k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  18.9k|            TriplesNodePath()
 1654|  18.9k|
 1655|  18.9k|        rule VarOrTerm() -> TermPattern =
 1656|  18.9k|            v:Var() { v.into() } /
 1657|  18.9k|            t:QuotedTriple() {?
 1658|  18.9k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  18.9k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  18.9k|            } /
 1661|  18.9k|            t:GraphTerm() { t.into() }
 1662|  18.9k|
 1663|  18.9k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  18.9k|            Ok(TriplePattern {
 1665|  18.9k|                subject: s,
 1666|  18.9k|                predicate: p,
 1667|  18.9k|                object: o
 1668|  18.9k|            })
 1669|  18.9k|        }
 1670|  18.9k|
 1671|  18.9k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  18.9k|            Ok(GroundTriple {
 1673|  18.9k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  18.9k|                predicate: p,
 1675|  18.9k|                object: o
 1676|  18.9k|            })
 1677|  18.9k|        }
 1678|  18.9k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  18.9k|
 1680|  18.9k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  18.9k|            l:RDFLiteral() { l.into() } /
 1682|  18.9k|            l:NumericLiteral() { l.into() } /
 1683|  18.9k|            l:BooleanLiteral() { l.into() } /
 1684|  18.9k|            t:QuotedTripleData() {?
 1685|  18.9k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  18.9k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  18.9k|            }
 1688|  18.9k|
 1689|  18.9k|        rule VarOrIri() -> NamedNodePattern =
 1690|  18.9k|            v:Var() { v.into() } /
 1691|  18.9k|            i:iri() { i.into() }
 1692|  18.9k|
 1693|  18.9k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  18.9k|
 1695|  18.9k|        rule GraphTerm() -> Term =
 1696|  18.9k|            i:iri() { i.into() } /
 1697|  18.9k|            l:RDFLiteral() { l.into() } /
 1698|  18.9k|            l:NumericLiteral() { l.into() } /
 1699|  18.9k|            l:BooleanLiteral() { l.into() } /
 1700|  18.9k|            b:BlankNode() { b.into() } /
 1701|  18.9k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  18.9k|
 1703|  18.9k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  18.9k|
 1705|  18.9k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  18.9k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  18.9k|        }
 1708|  18.9k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  18.9k|
 1710|  18.9k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  18.9k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  18.9k|        }
 1713|  18.9k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  18.9k|
 1715|  18.9k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  18.9k|
 1717|  18.9k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  18.9k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  18.9k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  18.9k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  18.9k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  18.9k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  18.9k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  18.9k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  18.9k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  18.9k|            Some(_) => unreachable!(),
 1727|  18.9k|            None => a
 1728|  18.9k|        } }
 1729|  18.9k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  18.9k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  18.9k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  18.9k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  18.9k|
 1734|  18.9k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  18.9k|
 1736|  18.9k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  18.9k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  18.9k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  18.9k|            Some(_) => unreachable!(),
 1740|  18.9k|            None => a,
 1741|  18.9k|        } }
 1742|  18.9k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  18.9k|            (s, e)
 1744|  18.9k|        }
 1745|  18.9k|
 1746|  18.9k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  18.9k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  18.9k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  18.9k|            Some(_) => unreachable!(),
 1750|  18.9k|            None => a
 1751|  18.9k|        } }
 1752|  18.9k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  18.9k|            (s, e)
 1754|  18.9k|        }
 1755|  18.9k|
 1756|  18.9k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  18.9k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  18.9k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  18.9k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  18.9k|            Some(_) => unreachable!(),
 1761|  18.9k|            None => e,
 1762|  18.9k|        } }
 1763|  18.9k|
 1764|  18.9k|        rule PrimaryExpression() -> Expression =
 1765|  18.9k|            BrackettedExpression()  /
 1766|  18.9k|            ExprQuotedTriple() /
 1767|  18.9k|            iriOrFunction() /
 1768|  18.9k|            v:Var() { v.into() } /
 1769|  18.9k|            l:RDFLiteral() { l.into() } /
 1770|  18.9k|            l:NumericLiteral() { l.into() } /
 1771|  18.9k|            l:BooleanLiteral() { l.into() } /
 1772|  18.9k|            BuiltInCall()
 1773|  18.9k|
 1774|  18.9k|        rule ExprVarOrTerm() -> Expression =
 1775|  18.9k|            ExprQuotedTriple() /
 1776|  18.9k|            i:iri() { i.into() } /
 1777|  18.9k|            l:RDFLiteral() { l.into() } /
 1778|  18.9k|            l:NumericLiteral() { l.into() } /
 1779|  18.9k|            l:BooleanLiteral() { l.into() } /
 1780|  18.9k|            v:Var() { v.into() }
 1781|  18.9k|
 1782|  18.9k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  18.9k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  18.9k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  18.9k|        }
 1786|  18.9k|
 1787|  18.9k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  18.9k|
 1789|  18.9k|        rule BuiltInCall() -> Expression =
 1790|  18.9k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  18.9k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  18.9k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  18.9k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  18.9k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  18.9k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  18.9k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  18.9k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  18.9k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  18.9k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  18.9k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  18.9k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  18.9k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  18.9k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  18.9k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  18.9k|            SubstringExpression() /
 1806|  18.9k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  18.9k|            StrReplaceExpression() /
 1808|  18.9k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  18.9k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  18.9k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  18.9k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  18.9k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  18.9k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  18.9k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  18.9k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  18.9k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  18.9k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  18.9k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  18.9k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  18.9k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  18.9k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  18.9k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  18.9k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  18.9k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  18.9k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  18.9k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  18.9k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  18.9k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  18.9k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  18.9k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  18.9k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  18.9k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  18.9k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  18.9k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  18.9k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  18.9k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  18.9k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  18.9k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  18.9k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  18.9k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  18.9k|            RegexExpression() /
 1842|  18.9k|            ExistsFunc() /
 1843|  18.9k|            NotExistsFunc() /
 1844|  18.9k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  18.9k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  18.9k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  18.9k|            } /
 1848|  18.9k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  18.9k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  18.9k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  18.9k|            } /
 1852|  18.9k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  18.9k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  18.9k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  18.9k|            } /
 1856|  18.9k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  18.9k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  18.9k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  18.9k|            } /
 1860|  18.9k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  18.9k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  18.9k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  18.9k|            } /
 1864|  18.9k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  18.9k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  18.9k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  18.9k|            }
 1868|  18.9k|
 1869|  18.9k|        rule RegexExpression() -> Expression =
 1870|  18.9k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  18.9k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  18.9k|
 1873|  18.9k|
 1874|  18.9k|        rule SubstringExpression() -> Expression =
 1875|  18.9k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  18.9k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  18.9k|
 1878|  18.9k|
 1879|  18.9k|        rule StrReplaceExpression() -> Expression =
 1880|  18.9k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  18.9k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  18.9k|
 1883|  18.9k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  18.9k|
 1885|  18.9k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  18.9k|
 1887|  18.9k|        rule Aggregate() -> AggregateExpression =
 1888|  18.9k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  18.9k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  18.9k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  18.9k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  18.9k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  18.9k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  18.9k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  18.9k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  18.9k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  18.9k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  18.9k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  18.9k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  18.9k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  18.9k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  18.9k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  18.9k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  18.9k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  18.9k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  18.9k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  18.9k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  18.9k|
 1909|  18.9k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  18.9k|            match a {
 1911|  18.9k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  18.9k|                None => i.into()
 1913|  18.9k|            }
 1914|  18.9k|        }
 1915|  18.9k|
 1916|  18.9k|        rule RDFLiteral() -> Literal =
 1917|  18.9k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  18.9k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  18.9k|            value:String() { Literal::new_simple_literal(value) }
 1920|  18.9k|
 1921|  18.9k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  18.9k|
 1923|  18.9k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  18.9k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  18.9k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  18.9k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  18.9k|
 1928|  18.9k|        rule NumericLiteralPositive() -> Literal =
 1929|  18.9k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  18.9k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  18.9k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  18.9k|
 1933|  18.9k|
 1934|  18.9k|        rule NumericLiteralNegative() -> Literal =
 1935|  18.9k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  18.9k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  18.9k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  18.9k|
 1939|  18.9k|        rule BooleanLiteral() -> Literal =
 1940|  18.9k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  18.9k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  18.9k|
 1943|  18.9k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  18.9k|
 1945|  18.9k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  18.9k|            NamedNode::from(i)
 1947|  18.9k|        }
 1948|  18.9k|
 1949|  18.9k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  18.9k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  18.9k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  18.9k|            } else {
 1953|  18.9k|                Err("Prefix not found")
 1954|  18.9k|            } }
 1955|  18.9k|
 1956|  18.9k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  18.9k|            let node = BlankNode::new_unchecked(id);
 1958|  18.9k|            if state.used_bnodes.contains(&node) {
 1959|  18.9k|                Err("Already used blank node id")
 1960|  18.9k|            } else {
 1961|  18.9k|                state.currently_used_bnodes.insert(node.clone());
 1962|  18.9k|                Ok(node)
 1963|  18.9k|            }
 1964|  18.9k|        } / ANON() { BlankNode::default() }
 1965|  18.9k|
 1966|  18.9k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  18.9k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  18.9k|        }
 1969|  18.9k|
 1970|  18.9k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  18.9k|            ns
 1972|  18.9k|        }
 1973|  18.9k|
 1974|  18.9k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  18.9k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  18.9k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  18.9k|                iri.push_str(base);
 1978|  18.9k|                for chunk in local.split('\\') { // We remove \
 1979|  18.9k|                    iri.push_str(chunk);
 1980|  18.9k|                }
 1981|  18.9k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  18.9k|            } else {
 1983|  18.9k|                Err("Prefix not found")
 1984|  18.9k|            }
 1985|  18.9k|        }
 1986|  18.9k|
 1987|  18.9k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  18.9k|            b
 1989|  18.9k|        }
 1990|  18.9k|
 1991|  18.9k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  18.9k|
 1993|  18.9k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  18.9k|
 1995|  18.9k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  18.9k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  18.9k|        }
 1998|  18.9k|
 1999|  18.9k|        rule INTEGER() = ['0'..='9']+
 2000|  18.9k|
 2001|  18.9k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  18.9k|
 2003|  18.9k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  18.9k|
 2005|  18.9k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  18.9k|
 2007|  18.9k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  18.9k|
 2009|  18.9k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  18.9k|
 2011|  18.9k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  18.9k|
 2013|  18.9k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  18.9k|
 2015|  18.9k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  18.9k|
 2017|  18.9k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  18.9k|
 2019|  18.9k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  18.9k|             unescape_string(l)
 2021|  18.9k|        }
 2022|  18.9k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  18.9k|
 2024|  18.9k|
 2025|  18.9k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  18.9k|             unescape_string(l)
 2027|  18.9k|        }
 2028|  18.9k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  18.9k|
 2030|  18.9k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  18.9k|             unescape_string(l)
 2032|  18.9k|        }
 2033|  18.9k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  18.9k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  18.9k|
 2036|  18.9k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  18.9k|             unescape_string(l)
 2038|  18.9k|        }
 2039|  18.9k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  18.9k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  18.9k|
 2042|  18.9k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  18.9k|
 2044|  18.9k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  18.9k|
 2046|  18.9k|        rule NIL() = "(" WS()* ")"
 2047|  18.9k|
 2048|  18.9k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  18.9k|
 2050|  18.9k|        rule ANON() = "[" WS()* "]"
 2051|  18.9k|
 2052|  18.9k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  18.9k|
 2054|  18.9k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  18.9k|
 2056|  18.9k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  18.9k|
 2058|  18.9k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  18.9k|
 2060|  18.9k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  18.9k|
 2062|  18.9k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  18.9k|
 2064|  18.9k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  18.9k|
 2066|  18.9k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  18.9k|
 2068|  18.9k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  18.9k|
 2070|  18.9k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  18.9k|
 2072|  18.9k|        //space
 2073|  18.9k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  18.9k|
 2075|  18.9k|        //comment
 2076|  18.9k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  18.9k|
 2078|  18.9k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  18.9k|            if input.eq_ignore_ascii_case(literal) {
 2080|  18.9k|                Ok(())
 2081|  18.9k|            } else {
 2082|  18.9k|                Err(literal)
 2083|  18.9k|            }
 2084|  18.9k|        }
 2085|  18.9k|    }
 2086|  18.9k|}
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser11___parse_Var0B7_:
 1693|  36.7k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_Bind0B7_:
 1270|      3|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|      3|            PartialGraphPattern::Bind(e, v)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser34___parse_RelationalExpression_inner0B7_:
 1730|    483|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser21___parse_iriOrFunction0B7_:
 1909|    437|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|    437|            match a {
 1911|      0|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|    437|                None => i.into()
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_GraphRefAll0B7_:
 1141|    852|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_ExpressionList0B7_:
 1334|    426|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser32___parse_ConditionalAndExpression00B9_:
 1711|    226|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_NumericLiteralUnsigneds0_0B7_:
 1926|  1.77k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_VerbPath0B7_:
 1462|  1.64k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  1.64k|            p.into()
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_PathPrimarys1_0B7_:
 1539|  17.3k|            "(" _ p:Path() _ ")" { p }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_GraphOrDefault0B7_:
 1133|    736|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|    736|            GraphName::DefaultGraph
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_QuadsNotTriples0B7_:
 1163|  12.1k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  12.1k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser26___parse_TriplesSameSubject0B7_:
  778|  14.0k|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|       |            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|       |                Ok((vars, vals))
 1288|       |            } else {
 1289|       |                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|       |            }
 1291|       |        }
 1292|       |        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|       |        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|       |        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|       |
 1296|       |        rule DataBlockValue() -> Option<GroundTerm> =
 1297|       |            t:QuotedTripleData() {?
 1298|       |                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|       |            } /
 1301|       |            i:iri() { Some(i.into()) } /
 1302|       |            l:RDFLiteral() { Some(l.into()) } /
 1303|       |            l:NumericLiteral() { Some(l.into()) } /
 1304|       |            l:BooleanLiteral() { Some(l.into()) } /
 1305|       |            i("UNDEF") { None }
 1306|       |
 1307|       |        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|       |            PartialGraphPattern::Minus(p)
 1309|       |        }
 1310|       |
 1311|       |        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|       |            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|       |            }).map(PartialGraphPattern::Other)
 1315|       |        }
 1316|       |        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|       |
 1318|       |        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|       |            PartialGraphPattern::Filter(c)
 1320|       |        }
 1321|       |
 1322|       |        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|       |
 1324|       |        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|       |            Expression::FunctionCall(Function::Custom(f), a)
 1326|       |        }
 1327|       |
 1328|       |        rule ArgList() -> Vec<Expression> =
 1329|       |            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|       |            NIL() { Vec::new() }
 1331|       |        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|       |
 1333|       |        rule ExpressionList() -> Vec<Expression> =
 1334|       |            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|       |            NIL() { Vec::new() }
 1336|       |        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|       |
 1338|       |        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|       |
 1340|       |        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|       |            p.into_iter().flatten().collect()
 1342|       |        }
 1343|       |        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|       |
 1345|       |        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|       |            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  14.0k|                let mut patterns = po.patterns;
 1348|  28.0k|                for (p, os) in po.focus {
 1349|  28.0k|                    for o in os {
 1350|  14.0k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|       |                    }
 1352|       |                }
 1353|  14.0k|                Ok(patterns)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_GraphRefAlls0_0B7_:
 1143|     34|            / i("NAMED") { GraphTarget::NamedGraphs }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_TriplesBlock0B7_:
 1242|  1.31k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  1.31k|            hs.into_iter().flatten().collect()
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser29___parse_Quads_TriplesTemplate00B9_:
 1159|  1.86k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_NumericLiteralUnsigneds_0B7_:
 1925|    769|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_ValuesClauses_0B7_:
  971|  1.30k|            { None }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_Modify_clauses0B7_:
 1109|  1.96k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  1.96k|            (Some(d), i)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_SelectClause_options_0B7_:
  822|    673|            i("REDUCED") { SelectionOption::Reduced } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_BooleanLiteral0B7_:
 1940|    184|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_PathSequence0B7_:
  778|  20.1k|parser! {
  779|  20.1k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  20.1k|    grammar parser(state: &mut ParserState) for str {
  781|  20.1k|        pub rule QueryUnit() -> Query = Query()
  782|  20.1k|
  783|  20.1k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  20.1k|            q
  785|  20.1k|        }
  786|  20.1k|
  787|  20.1k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  20.1k|
  789|  20.1k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  20.1k|
  791|  20.1k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  20.1k|            state.base_iri = Some(i)
  793|  20.1k|        }
  794|  20.1k|
  795|  20.1k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  20.1k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  20.1k|        }
  798|  20.1k|
  799|  20.1k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  20.1k|            Ok(Query::Select {
  801|  20.1k|                dataset: d,
  802|  20.1k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  20.1k|                base_iri: state.base_iri.clone()
  804|  20.1k|            })
  805|  20.1k|        }
  806|  20.1k|
  807|  20.1k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  20.1k|            build_select(s, w, g, h, o, l, v, state)
  809|  20.1k|        }
  810|  20.1k|
  811|  20.1k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  20.1k|            Selection {
  813|  20.1k|                option: o,
  814|  20.1k|                variables: v
  815|  20.1k|            }
  816|  20.1k|        }
  817|  20.1k|        rule Selection_init() = {
  818|  20.1k|            state.aggregates.push(Vec::new())
  819|  20.1k|        }
  820|  20.1k|        rule SelectClause_option() -> SelectionOption =
  821|  20.1k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  20.1k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  20.1k|            { SelectionOption::Default }
  824|  20.1k|        rule SelectClause_variables() -> SelectionVariables =
  825|  20.1k|            "*" { SelectionVariables::Star } /
  826|  20.1k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  20.1k|        rule SelectClause_member() -> SelectionMember =
  828|  20.1k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  20.1k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  20.1k|
  831|  20.1k|        rule ConstructQuery() -> Query =
  832|  20.1k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  20.1k|                Ok(Query::Construct {
  834|  20.1k|                    template: c,
  835|  20.1k|                    dataset: d,
  836|  20.1k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  20.1k|                    base_iri: state.base_iri.clone()
  838|  20.1k|                })
  839|  20.1k|            } /
  840|  20.1k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  20.1k|                Ok(Query::Construct {
  842|  20.1k|                    template: c.clone(),
  843|  20.1k|                    dataset: d,
  844|  20.1k|                    pattern: build_select(
  845|  20.1k|                        Selection::no_op(),
  846|  20.1k|                        GraphPattern::Bgp { patterns: c },
  847|  20.1k|                        g, h, o, l, v, state
  848|  20.1k|                    )?,
  849|  20.1k|                    base_iri: state.base_iri.clone()
  850|  20.1k|                })
  851|  20.1k|            }
  852|  20.1k|
  853|  20.1k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  20.1k|
  855|  20.1k|        rule DescribeQuery() -> Query =
  856|  20.1k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  20.1k|                Ok(Query::Describe {
  858|  20.1k|                    dataset: d,
  859|  20.1k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  20.1k|                    base_iri: state.base_iri.clone()
  861|  20.1k|                })
  862|  20.1k|            } /
  863|  20.1k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  20.1k|                Ok(Query::Describe {
  865|  20.1k|                    dataset: d,
  866|  20.1k|                    pattern: build_select(Selection {
  867|  20.1k|                        option: SelectionOption::Default,
  868|  20.1k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  20.1k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  20.1k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  20.1k|                        }).collect())
  872|  20.1k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  20.1k|                    base_iri: state.base_iri.clone()
  874|  20.1k|                })
  875|  20.1k|            }
  876|  20.1k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  20.1k|
  878|  20.1k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  20.1k|            Ok(Query::Ask {
  880|  20.1k|                dataset: d,
  881|  20.1k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  20.1k|                base_iri: state.base_iri.clone()
  883|  20.1k|            })
  884|  20.1k|        }
  885|  20.1k|
  886|  20.1k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  20.1k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  20.1k|            if d.is_empty() {
  889|  20.1k|                return None;
  890|  20.1k|            }
  891|  20.1k|            let mut default = Vec::new();
  892|  20.1k|            let mut named = Vec::new();
  893|  20.1k|            for (d, n) in d {
  894|  20.1k|                if let Some(d) = d {
  895|  20.1k|                    default.push(d);
  896|  20.1k|                }
  897|  20.1k|                if let Some(n) = n {
  898|  20.1k|                    named.push(n);
  899|  20.1k|                }
  900|  20.1k|            }
  901|  20.1k|            Some(QueryDataset {
  902|  20.1k|                default, named: Some(named)
  903|  20.1k|            })
  904|  20.1k|        }
  905|  20.1k|
  906|  20.1k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  20.1k|            (Some(s), None)
  908|  20.1k|        }
  909|  20.1k|
  910|  20.1k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  20.1k|            (None, Some(s))
  912|  20.1k|        }
  913|  20.1k|
  914|  20.1k|        rule SourceSelector() -> NamedNode = iri()
  915|  20.1k|
  916|  20.1k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  20.1k|            p
  918|  20.1k|        }
  919|  20.1k|
  920|  20.1k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  20.1k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  20.1k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  20.1k|                if let Expression::Variable(v) = e {
  924|  20.1k|                    v
  925|  20.1k|                } else {
  926|  20.1k|                    let v = vo.unwrap_or_else(variable);
  927|  20.1k|                    projections.push((e, v.clone()));
  928|  20.1k|                    v
  929|  20.1k|                }
  930|  20.1k|            }).collect();
  931|  20.1k|            (clauses, projections)
  932|  20.1k|        }
  933|  20.1k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  20.1k|
  935|  20.1k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  20.1k|            e:BuiltInCall() { (e, None) } /
  937|  20.1k|            e:FunctionCall() { (e, None) } /
  938|  20.1k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  20.1k|            e:Var() { (e.into(), None) }
  940|  20.1k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  20.1k|
  942|  20.1k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  20.1k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  20.1k|        }
  945|  20.1k|
  946|  20.1k|        rule HavingCondition() -> Expression = Constraint()
  947|  20.1k|
  948|  20.1k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  20.1k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  20.1k|
  951|  20.1k|        rule OrderCondition() -> OrderExpression =
  952|  20.1k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  20.1k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  20.1k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  20.1k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  20.1k|
  957|  20.1k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  20.1k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  20.1k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  20.1k|
  961|  20.1k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  20.1k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  20.1k|        }
  964|  20.1k|
  965|  20.1k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  20.1k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  20.1k|        }
  968|  20.1k|
  969|  20.1k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  20.1k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  20.1k|            { None }
  972|  20.1k|
  973|  20.1k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  20.1k|
  975|  20.1k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  20.1k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  20.1k|
  978|  20.1k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  20.1k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  20.1k|        }
  981|  20.1k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  20.1k|
  983|  20.1k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  20.1k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  20.1k|        }
  986|  20.1k|
  987|  20.1k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  20.1k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  20.1k|        }
  990|  20.1k|
  991|  20.1k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  20.1k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  20.1k|        }
  994|  20.1k|
  995|  20.1k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  20.1k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  20.1k|            if from == to {
  998|  20.1k|                Vec::new() // identity case
  999|  20.1k|            } else {
 1000|  20.1k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  20.1k|                vec![copy_graph(from, to)]
 1002|  20.1k|            }
 1003|  20.1k|        }
 1004|  20.1k|
 1005|  20.1k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  20.1k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  20.1k|            if from == to {
 1008|  20.1k|                Vec::new() // identity case
 1009|  20.1k|            } else {
 1010|  20.1k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  20.1k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  20.1k|            }
 1013|  20.1k|        }
 1014|  20.1k|
 1015|  20.1k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  20.1k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  20.1k|            if from == to {
 1018|  20.1k|                Vec::new() // identity case
 1019|  20.1k|            } else {
 1020|  20.1k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  20.1k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  20.1k|            }
 1023|  20.1k|        }
 1024|  20.1k|
 1025|  20.1k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  20.1k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  20.1k|        }
 1028|  20.1k|
 1029|  20.1k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  20.1k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  20.1k|        }
 1032|  20.1k|
 1033|  20.1k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  20.1k|            let pattern = d.iter().map(|q| {
 1035|  20.1k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  20.1k|                match &q.graph_name {
 1037|  20.1k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  20.1k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  20.1k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  20.1k|                }
 1041|  20.1k|            }).reduce(new_join).unwrap_or_default();
 1042|  20.1k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  20.1k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  20.1k|                delete,
 1045|  20.1k|                insert: Vec::new(),
 1046|  20.1k|                using: None,
 1047|  20.1k|                pattern: Box::new(pattern)
 1048|  20.1k|            }])
 1049|  20.1k|        }
 1050|  20.1k|
 1051|  20.1k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  20.1k|            let (delete, insert) = c;
 1053|  20.1k|            let mut delete = delete.unwrap_or_default();
 1054|  20.1k|            let mut insert = insert.unwrap_or_default();
 1055|  20.1k|            #[allow(clippy::shadow_same)]
 1056|  20.1k|            let mut pattern = pattern;
 1057|  20.1k|
 1058|  20.1k|            let mut using = if u.is_empty() {
 1059|  20.1k|                None
 1060|  20.1k|            } else {
 1061|  20.1k|                let mut default = Vec::new();
 1062|  20.1k|                let mut named = Vec::new();
 1063|  20.1k|                for (d, n) in u {
 1064|  20.1k|                    if let Some(d) = d {
 1065|  20.1k|                        default.push(d)
 1066|  20.1k|                    }
 1067|  20.1k|                    if let Some(n) = n {
 1068|  20.1k|                        named.push(n)
 1069|  20.1k|                    }
 1070|  20.1k|                }
 1071|  20.1k|                Some(QueryDataset { default, named: Some(named) })
 1072|  20.1k|            };
 1073|  20.1k|
 1074|  20.1k|            if let Some(with) = with {
 1075|  20.1k|                // We inject WITH everywhere
 1076|  20.1k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  20.1k|                    GroundQuadPattern {
 1078|  20.1k|                        subject: q.subject,
 1079|  20.1k|                        predicate: q.predicate,
 1080|  20.1k|                        object: q.object,
 1081|  20.1k|                        graph_name: with.clone().into()
 1082|  20.1k|                    }
 1083|  20.1k|                } else {
 1084|  20.1k|                    q
 1085|  20.1k|                }).collect();
 1086|  20.1k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  20.1k|                    QuadPattern {
 1088|  20.1k|                        subject: q.subject,
 1089|  20.1k|                        predicate: q.predicate,
 1090|  20.1k|                        object: q.object,
 1091|  20.1k|                        graph_name: with.clone().into()
 1092|  20.1k|                    }
 1093|  20.1k|                } else {
 1094|  20.1k|                    q
 1095|  20.1k|                }).collect();
 1096|  20.1k|                if using.is_none() {
 1097|  20.1k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  20.1k|                }
 1099|  20.1k|            }
 1100|  20.1k|
 1101|  20.1k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  20.1k|                delete,
 1103|  20.1k|                insert,
 1104|  20.1k|                using,
 1105|  20.1k|                pattern: Box::new(pattern)
 1106|  20.1k|            }]
 1107|  20.1k|        }
 1108|  20.1k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  20.1k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  20.1k|            (Some(d), i)
 1111|  20.1k|        } / i:InsertClause() {
 1112|  20.1k|            (None, Some(i))
 1113|  20.1k|        }
 1114|  20.1k|        rule Modify_clear() = {
 1115|  20.1k|            state.used_bnodes.clear();
 1116|  20.1k|            state.currently_used_bnodes.clear();
 1117|  20.1k|        }
 1118|  20.1k|
 1119|  20.1k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  20.1k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  20.1k|        }
 1122|  20.1k|
 1123|  20.1k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  20.1k|
 1125|  20.1k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  20.1k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  20.1k|            (Some(i), None)
 1128|  20.1k|        }
 1129|  20.1k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  20.1k|            (None, Some(i))
 1131|  20.1k|        }
 1132|  20.1k|
 1133|  20.1k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  20.1k|            GraphName::DefaultGraph
 1135|  20.1k|        } / (i("GRAPH") _)? g:iri() {
 1136|  20.1k|            GraphName::NamedNode(g)
 1137|  20.1k|        }
 1138|  20.1k|
 1139|  20.1k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  20.1k|
 1141|  20.1k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  20.1k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  20.1k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  20.1k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  20.1k|
 1146|  20.1k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  20.1k|
 1148|  20.1k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  20.1k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  20.1k|        }
 1151|  20.1k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  20.1k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  20.1k|        }
 1154|  20.1k|
 1155|  20.1k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  20.1k|            q.into_iter().flatten().collect()
 1157|  20.1k|        }
 1158|  20.1k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  20.1k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  20.1k|        } //TODO: return iter?
 1161|  20.1k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  20.1k|
 1163|  20.1k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  20.1k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  20.1k|        }
 1166|  20.1k|
 1167|  20.1k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  20.1k|            ts.into_iter().flatten().collect()
 1169|  20.1k|        }
 1170|  20.1k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  20.1k|
 1172|  20.1k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  20.1k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  20.1k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  20.1k|        rule GroupGraphPattern_clear() = {
 1176|  20.1k|             // We deal with blank nodes aliases rule
 1177|  20.1k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  20.1k|            state.currently_used_bnodes.clear();
 1179|  20.1k|        }
 1180|  20.1k|
 1181|  20.1k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  20.1k|            let mut filter: Option<Expression> = None;
 1183|  20.1k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  20.1k|            for e in b.into_iter().flatten() {
 1185|  20.1k|                match e {
 1186|  20.1k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  20.1k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  20.1k|                    }
 1189|  20.1k|                    #[cfg(feature = "sep-0006")]
 1190|  20.1k|                    PartialGraphPattern::Lateral(p) => {
 1191|  20.1k|                        let mut defined_variables = HashSet::default();
 1192|  20.1k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  20.1k|                        let mut contains = false;
 1194|  20.1k|                        g.on_in_scope_variable(|v| {
 1195|  20.1k|                            if defined_variables.contains(v) {
 1196|  20.1k|                                contains = true;
 1197|  20.1k|                            }
 1198|  20.1k|                        });
 1199|  20.1k|                        if contains {
 1200|  20.1k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  20.1k|                        }
 1202|  20.1k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  20.1k|                    }
 1204|  20.1k|                    PartialGraphPattern::Minus(p) => {
 1205|  20.1k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  20.1k|                    }
 1207|  20.1k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  20.1k|                        let mut contains = false;
 1209|  20.1k|                        g.on_in_scope_variable(|v| {
 1210|  20.1k|                            if *v == variable {
 1211|  20.1k|                                contains = true;
 1212|  20.1k|                            }
 1213|  20.1k|                        });
 1214|  20.1k|                        if contains {
 1215|  20.1k|                            return Err("BIND is overriding an existing variable")
 1216|  20.1k|                        }
 1217|  20.1k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  20.1k|                    }
 1219|  20.1k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  20.1k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  20.1k|                    } else {
 1222|  20.1k|                        expr
 1223|  20.1k|                    }),
 1224|  20.1k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  20.1k|                }
 1226|  20.1k|            }
 1227|  20.1k|
 1228|  20.1k|            Ok(if let Some(expr) = filter {
 1229|  20.1k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  20.1k|            } else {
 1231|  20.1k|                g
 1232|  20.1k|            })
 1233|  20.1k|        }
 1234|  20.1k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  20.1k|            let mut result = vec![a];
 1236|  20.1k|            if let Some(v) = b {
 1237|  20.1k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  20.1k|            }
 1239|  20.1k|            result
 1240|  20.1k|        }
 1241|  20.1k|
 1242|  20.1k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  20.1k|            hs.into_iter().flatten().collect()
 1244|  20.1k|        }
 1245|  20.1k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  20.1k|
 1247|  20.1k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  20.1k|
 1249|  20.1k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  20.1k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  20.1k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  20.1k|            } else {
 1253|  20.1k|               PartialGraphPattern::Optional(p, None)
 1254|  20.1k|            }
 1255|  20.1k|        }
 1256|  20.1k|
 1257|  20.1k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  20.1k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  20.1k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  20.1k|        }
 1261|  20.1k|
 1262|  20.1k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  20.1k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  20.1k|        }
 1265|  20.1k|
 1266|  20.1k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  20.1k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  20.1k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  20.1k|
 1270|  20.1k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  20.1k|            PartialGraphPattern::Bind(e, v)
 1272|  20.1k|        }
 1273|  20.1k|
 1274|  20.1k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  20.1k|
 1276|  20.1k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  20.1k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  20.1k|        }
 1279|  20.1k|
 1280|  20.1k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  20.1k|            (vec![var], d)
 1282|  20.1k|        }
 1283|  20.1k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  20.1k|
 1285|  20.1k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  20.1k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  20.1k|                Ok((vars, vals))
 1288|  20.1k|            } else {
 1289|  20.1k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  20.1k|            }
 1291|  20.1k|        }
 1292|  20.1k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  20.1k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  20.1k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  20.1k|
 1296|  20.1k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  20.1k|            t:QuotedTripleData() {?
 1298|  20.1k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  20.1k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  20.1k|            } /
 1301|  20.1k|            i:iri() { Some(i.into()) } /
 1302|  20.1k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  20.1k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  20.1k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  20.1k|            i("UNDEF") { None }
 1306|  20.1k|
 1307|  20.1k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  20.1k|            PartialGraphPattern::Minus(p)
 1309|  20.1k|        }
 1310|  20.1k|
 1311|  20.1k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  20.1k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  20.1k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  20.1k|            }).map(PartialGraphPattern::Other)
 1315|  20.1k|        }
 1316|  20.1k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  20.1k|
 1318|  20.1k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  20.1k|            PartialGraphPattern::Filter(c)
 1320|  20.1k|        }
 1321|  20.1k|
 1322|  20.1k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  20.1k|
 1324|  20.1k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  20.1k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  20.1k|        }
 1327|  20.1k|
 1328|  20.1k|        rule ArgList() -> Vec<Expression> =
 1329|  20.1k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  20.1k|            NIL() { Vec::new() }
 1331|  20.1k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  20.1k|
 1333|  20.1k|        rule ExpressionList() -> Vec<Expression> =
 1334|  20.1k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  20.1k|            NIL() { Vec::new() }
 1336|  20.1k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  20.1k|
 1338|  20.1k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  20.1k|
 1340|  20.1k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  20.1k|            p.into_iter().flatten().collect()
 1342|  20.1k|        }
 1343|  20.1k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  20.1k|
 1345|  20.1k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  20.1k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  20.1k|                let mut patterns = po.patterns;
 1348|  20.1k|                for (p, os) in po.focus {
 1349|  20.1k|                    for o in os {
 1350|  20.1k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  20.1k|                    }
 1352|  20.1k|                }
 1353|  20.1k|                Ok(patterns)
 1354|  20.1k|            } /
 1355|  20.1k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  20.1k|                let mut patterns = s.patterns;
 1357|  20.1k|                patterns.extend(po.patterns);
 1358|  20.1k|                for (p, os) in po.focus {
 1359|  20.1k|                    for o in os {
 1360|  20.1k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  20.1k|                    }
 1362|  20.1k|                }
 1363|  20.1k|                Ok(patterns)
 1364|  20.1k|            }
 1365|  20.1k|
 1366|  20.1k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  20.1k|            PropertyListNotEmpty() /
 1368|  20.1k|            { FocusedTriplePattern::default() }
 1369|  20.1k|
 1370|  20.1k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  20.1k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  20.1k|                a.focus.push(b.focus);
 1373|  20.1k|                a.patterns.extend(b.patterns);
 1374|  20.1k|                a
 1375|  20.1k|            })
 1376|  20.1k|        }
 1377|  20.1k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  20.1k|            FocusedTriplePattern {
 1379|  20.1k|                focus: (p, o.focus),
 1380|  20.1k|                patterns: o.patterns
 1381|  20.1k|            }
 1382|  20.1k|        }
 1383|  20.1k|
 1384|  20.1k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  20.1k|
 1386|  20.1k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  20.1k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  20.1k|                a.focus.push(b.focus);
 1389|  20.1k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  20.1k|                a
 1391|  20.1k|            })
 1392|  20.1k|        }
 1393|  20.1k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  20.1k|
 1395|  20.1k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  20.1k|            if let Some(a) = a {
 1397|  20.1k|                let mut patterns = g.patterns;
 1398|  20.1k|                patterns.extend(a.patterns);
 1399|  20.1k|                FocusedTriplePattern {
 1400|  20.1k|                    focus: AnnotatedTerm {
 1401|  20.1k|                        term: g.focus,
 1402|  20.1k|                        annotations: a.focus
 1403|  20.1k|                    },
 1404|  20.1k|                    patterns
 1405|  20.1k|                }
 1406|  20.1k|            } else {
 1407|  20.1k|                FocusedTriplePattern {
 1408|  20.1k|                    focus: AnnotatedTerm {
 1409|  20.1k|                        term: g.focus,
 1410|  20.1k|                        annotations: Vec::new()
 1411|  20.1k|                    },
 1412|  20.1k|                    patterns: g.patterns
 1413|  20.1k|                }
 1414|  20.1k|            }
 1415|  20.1k|        }
 1416|  20.1k|
 1417|  20.1k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  20.1k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  20.1k|                let mut patterns = po.patterns;
 1420|  20.1k|                for (p, os) in po.focus {
 1421|  20.1k|                    for o in os {
 1422|  20.1k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  20.1k|                    }
 1424|  20.1k|                }
 1425|  20.1k|                Ok(patterns)
 1426|  20.1k|            } /
 1427|  20.1k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  20.1k|                let mut patterns = s.patterns;
 1429|  20.1k|                patterns.extend(po.patterns);
 1430|  20.1k|                for (p, os) in po.focus {
 1431|  20.1k|                    for o in os {
 1432|  20.1k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  20.1k|                    }
 1434|  20.1k|                }
 1435|  20.1k|                Ok(patterns)
 1436|  20.1k|            }
 1437|  20.1k|
 1438|  20.1k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  20.1k|            PropertyListPathNotEmpty() /
 1440|  20.1k|            { FocusedTripleOrPathPattern::default() }
 1441|  20.1k|
 1442|  20.1k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  20.1k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  20.1k|                    focus: vec![(hp, ho.focus)],
 1445|  20.1k|                    patterns: ho.patterns
 1446|  20.1k|                }, |mut a, b| {
 1447|  20.1k|                    a.focus.push(b.focus);
 1448|  20.1k|                    a.patterns.extend(b.patterns);
 1449|  20.1k|                    a
 1450|  20.1k|                })
 1451|  20.1k|        }
 1452|  20.1k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  20.1k|            c
 1454|  20.1k|        }
 1455|  20.1k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  20.1k|            FocusedTripleOrPathPattern {
 1457|  20.1k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  20.1k|                patterns: o.patterns
 1459|  20.1k|            }
 1460|  20.1k|        }
 1461|  20.1k|
 1462|  20.1k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  20.1k|            p.into()
 1464|  20.1k|        }
 1465|  20.1k|
 1466|  20.1k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  20.1k|            v.into()
 1468|  20.1k|        }
 1469|  20.1k|
 1470|  20.1k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  20.1k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  20.1k|                a.focus.push(b.focus);
 1473|  20.1k|                a.patterns.extend(b.patterns);
 1474|  20.1k|                a
 1475|  20.1k|            })
 1476|  20.1k|        }
 1477|  20.1k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  20.1k|
 1479|  20.1k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  20.1k|             if let Some(a) = a {
 1481|  20.1k|                let mut patterns = g.patterns;
 1482|  20.1k|                patterns.extend(a.patterns);
 1483|  20.1k|                FocusedTripleOrPathPattern {
 1484|  20.1k|                    focus: AnnotatedTermPath {
 1485|  20.1k|                        term: g.focus,
 1486|  20.1k|                        annotations: a.focus
 1487|  20.1k|                    },
 1488|  20.1k|                    patterns
 1489|  20.1k|                }
 1490|  20.1k|            } else {
 1491|  20.1k|                FocusedTripleOrPathPattern {
 1492|  20.1k|                    focus: AnnotatedTermPath {
 1493|  20.1k|                        term: g.focus,
 1494|  20.1k|                        annotations: Vec::new()
 1495|  20.1k|                    },
 1496|  20.1k|                    patterns: g.patterns
 1497|  20.1k|                }
 1498|  20.1k|            }
 1499|  20.1k|        }
 1500|  20.1k|
 1501|  20.1k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  20.1k|
 1503|  20.1k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  20.1k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  20.1k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  20.1k|            })
 1507|  20.1k|        }
 1508|  20.1k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  20.1k|
 1510|  20.1k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  20.1k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|       |                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  20.1k|            })
 1514|  20.1k|        }
 1515|  20.1k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  20.1k|
 1517|  20.1k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  20.1k|            match o {
 1519|  20.1k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  20.1k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  20.1k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  20.1k|                Some(_) => unreachable!(),
 1523|  20.1k|                None => p
 1524|  20.1k|            }
 1525|  20.1k|        }
 1526|  20.1k|        rule PathElt_op() -> char =
 1527|  20.1k|            "*" { '*' } /
 1528|  20.1k|            "+" { '+' } /
 1529|  20.1k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  20.1k|
 1531|  20.1k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  20.1k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  20.1k|            PathElt()
 1534|  20.1k|
 1535|  20.1k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  20.1k|            v:iri() { v.into() } /
 1537|  20.1k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  20.1k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  20.1k|            "(" _ p:Path() _ ")" { p }
 1540|  20.1k|
 1541|  20.1k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  20.1k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  20.1k|                let mut direct = Vec::new();
 1544|  20.1k|                let mut inverse = Vec::new();
 1545|  20.1k|                for e in p {
 1546|  20.1k|                    match e {
 1547|  20.1k|                        Either::Left(a) => direct.push(a),
 1548|  20.1k|                        Either::Right(b) => inverse.push(b)
 1549|  20.1k|                    }
 1550|  20.1k|                }
 1551|  20.1k|                if inverse.is_empty() {
 1552|  20.1k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  20.1k|                } else if direct.is_empty() {
 1554|  20.1k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  20.1k|                } else {
 1556|  20.1k|                    PropertyPathExpression::Alternative(
 1557|  20.1k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  20.1k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  20.1k|                    )
 1560|  20.1k|                }
 1561|  20.1k|            } /
 1562|  20.1k|            p:PathOneInPropertySet() {
 1563|  20.1k|                match p {
 1564|  20.1k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  20.1k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  20.1k|                }
 1567|  20.1k|            }
 1568|  20.1k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  20.1k|
 1570|  20.1k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  20.1k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  20.1k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  20.1k|            v:iri() { Either::Left(v) } /
 1574|  20.1k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  20.1k|
 1576|  20.1k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  20.1k|
 1578|  20.1k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  20.1k|            let mut patterns = po.patterns;
 1580|  20.1k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  20.1k|            for (p, os) in po.focus {
 1582|  20.1k|                for o in os {
 1583|  20.1k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  20.1k|                }
 1585|  20.1k|            }
 1586|  20.1k|            Ok(FocusedTriplePattern {
 1587|  20.1k|                focus: bnode,
 1588|  20.1k|                patterns
 1589|  20.1k|            })
 1590|  20.1k|        }
 1591|  20.1k|
 1592|  20.1k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  20.1k|
 1594|  20.1k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  20.1k|            let mut patterns = po.patterns;
 1596|  20.1k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  20.1k|            for (p, os) in po.focus {
 1598|  20.1k|                for o in os {
 1599|  20.1k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  20.1k|                }
 1601|  20.1k|            }
 1602|  20.1k|            Ok(FocusedTripleOrPathPattern {
 1603|  20.1k|                focus: bnode,
 1604|  20.1k|                patterns
 1605|  20.1k|            })
 1606|  20.1k|        }
 1607|  20.1k|
 1608|  20.1k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  20.1k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  20.1k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  20.1k|            for objWithPatterns in o.into_iter().rev() {
 1612|  20.1k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  20.1k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  20.1k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  20.1k|                current_list_node = new_blank_node;
 1616|  20.1k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  20.1k|            }
 1618|  20.1k|            FocusedTriplePattern {
 1619|  20.1k|                focus: current_list_node,
 1620|  20.1k|                patterns
 1621|  20.1k|            }
 1622|  20.1k|        }
 1623|  20.1k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  20.1k|
 1625|  20.1k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  20.1k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  20.1k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  20.1k|            for objWithPatterns in o.into_iter().rev() {
 1629|  20.1k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  20.1k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  20.1k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  20.1k|                current_list_node = new_blank_node;
 1633|  20.1k|                patterns.extend(objWithPatterns.patterns);
 1634|  20.1k|            }
 1635|  20.1k|            FocusedTripleOrPathPattern {
 1636|  20.1k|                focus: current_list_node,
 1637|  20.1k|                patterns
 1638|  20.1k|            }
 1639|  20.1k|        }
 1640|  20.1k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  20.1k|
 1642|  20.1k|
 1643|  20.1k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  20.1k|
 1645|  20.1k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  20.1k|
 1647|  20.1k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  20.1k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  20.1k|            TriplesNode()
 1650|  20.1k|
 1651|  20.1k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  20.1k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  20.1k|            TriplesNodePath()
 1654|  20.1k|
 1655|  20.1k|        rule VarOrTerm() -> TermPattern =
 1656|  20.1k|            v:Var() { v.into() } /
 1657|  20.1k|            t:QuotedTriple() {?
 1658|  20.1k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  20.1k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  20.1k|            } /
 1661|  20.1k|            t:GraphTerm() { t.into() }
 1662|  20.1k|
 1663|  20.1k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  20.1k|            Ok(TriplePattern {
 1665|  20.1k|                subject: s,
 1666|  20.1k|                predicate: p,
 1667|  20.1k|                object: o
 1668|  20.1k|            })
 1669|  20.1k|        }
 1670|  20.1k|
 1671|  20.1k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  20.1k|            Ok(GroundTriple {
 1673|  20.1k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  20.1k|                predicate: p,
 1675|  20.1k|                object: o
 1676|  20.1k|            })
 1677|  20.1k|        }
 1678|  20.1k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  20.1k|
 1680|  20.1k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  20.1k|            l:RDFLiteral() { l.into() } /
 1682|  20.1k|            l:NumericLiteral() { l.into() } /
 1683|  20.1k|            l:BooleanLiteral() { l.into() } /
 1684|  20.1k|            t:QuotedTripleData() {?
 1685|  20.1k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  20.1k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  20.1k|            }
 1688|  20.1k|
 1689|  20.1k|        rule VarOrIri() -> NamedNodePattern =
 1690|  20.1k|            v:Var() { v.into() } /
 1691|  20.1k|            i:iri() { i.into() }
 1692|  20.1k|
 1693|  20.1k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  20.1k|
 1695|  20.1k|        rule GraphTerm() -> Term =
 1696|  20.1k|            i:iri() { i.into() } /
 1697|  20.1k|            l:RDFLiteral() { l.into() } /
 1698|  20.1k|            l:NumericLiteral() { l.into() } /
 1699|  20.1k|            l:BooleanLiteral() { l.into() } /
 1700|  20.1k|            b:BlankNode() { b.into() } /
 1701|  20.1k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  20.1k|
 1703|  20.1k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  20.1k|
 1705|  20.1k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  20.1k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  20.1k|        }
 1708|  20.1k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  20.1k|
 1710|  20.1k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  20.1k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  20.1k|        }
 1713|  20.1k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  20.1k|
 1715|  20.1k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  20.1k|
 1717|  20.1k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  20.1k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  20.1k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  20.1k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  20.1k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  20.1k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  20.1k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  20.1k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  20.1k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  20.1k|            Some(_) => unreachable!(),
 1727|  20.1k|            None => a
 1728|  20.1k|        } }
 1729|  20.1k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  20.1k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  20.1k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  20.1k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  20.1k|
 1734|  20.1k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  20.1k|
 1736|  20.1k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  20.1k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  20.1k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  20.1k|            Some(_) => unreachable!(),
 1740|  20.1k|            None => a,
 1741|  20.1k|        } }
 1742|  20.1k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  20.1k|            (s, e)
 1744|  20.1k|        }
 1745|  20.1k|
 1746|  20.1k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  20.1k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  20.1k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  20.1k|            Some(_) => unreachable!(),
 1750|  20.1k|            None => a
 1751|  20.1k|        } }
 1752|  20.1k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  20.1k|            (s, e)
 1754|  20.1k|        }
 1755|  20.1k|
 1756|  20.1k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  20.1k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  20.1k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  20.1k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  20.1k|            Some(_) => unreachable!(),
 1761|  20.1k|            None => e,
 1762|  20.1k|        } }
 1763|  20.1k|
 1764|  20.1k|        rule PrimaryExpression() -> Expression =
 1765|  20.1k|            BrackettedExpression()  /
 1766|  20.1k|            ExprQuotedTriple() /
 1767|  20.1k|            iriOrFunction() /
 1768|  20.1k|            v:Var() { v.into() } /
 1769|  20.1k|            l:RDFLiteral() { l.into() } /
 1770|  20.1k|            l:NumericLiteral() { l.into() } /
 1771|  20.1k|            l:BooleanLiteral() { l.into() } /
 1772|  20.1k|            BuiltInCall()
 1773|  20.1k|
 1774|  20.1k|        rule ExprVarOrTerm() -> Expression =
 1775|  20.1k|            ExprQuotedTriple() /
 1776|  20.1k|            i:iri() { i.into() } /
 1777|  20.1k|            l:RDFLiteral() { l.into() } /
 1778|  20.1k|            l:NumericLiteral() { l.into() } /
 1779|  20.1k|            l:BooleanLiteral() { l.into() } /
 1780|  20.1k|            v:Var() { v.into() }
 1781|  20.1k|
 1782|  20.1k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  20.1k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  20.1k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  20.1k|        }
 1786|  20.1k|
 1787|  20.1k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  20.1k|
 1789|  20.1k|        rule BuiltInCall() -> Expression =
 1790|  20.1k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  20.1k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  20.1k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  20.1k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  20.1k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  20.1k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  20.1k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  20.1k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  20.1k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  20.1k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  20.1k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  20.1k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  20.1k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  20.1k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  20.1k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  20.1k|            SubstringExpression() /
 1806|  20.1k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  20.1k|            StrReplaceExpression() /
 1808|  20.1k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  20.1k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  20.1k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  20.1k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  20.1k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  20.1k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  20.1k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  20.1k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  20.1k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  20.1k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  20.1k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  20.1k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  20.1k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  20.1k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  20.1k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  20.1k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  20.1k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  20.1k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  20.1k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  20.1k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  20.1k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  20.1k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  20.1k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  20.1k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  20.1k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  20.1k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  20.1k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  20.1k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  20.1k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  20.1k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  20.1k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  20.1k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  20.1k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  20.1k|            RegexExpression() /
 1842|  20.1k|            ExistsFunc() /
 1843|  20.1k|            NotExistsFunc() /
 1844|  20.1k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  20.1k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  20.1k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  20.1k|            } /
 1848|  20.1k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  20.1k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  20.1k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  20.1k|            } /
 1852|  20.1k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  20.1k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  20.1k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  20.1k|            } /
 1856|  20.1k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  20.1k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  20.1k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  20.1k|            } /
 1860|  20.1k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  20.1k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  20.1k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  20.1k|            } /
 1864|  20.1k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  20.1k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  20.1k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  20.1k|            }
 1868|  20.1k|
 1869|  20.1k|        rule RegexExpression() -> Expression =
 1870|  20.1k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  20.1k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  20.1k|
 1873|  20.1k|
 1874|  20.1k|        rule SubstringExpression() -> Expression =
 1875|  20.1k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  20.1k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  20.1k|
 1878|  20.1k|
 1879|  20.1k|        rule StrReplaceExpression() -> Expression =
 1880|  20.1k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  20.1k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  20.1k|
 1883|  20.1k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  20.1k|
 1885|  20.1k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  20.1k|
 1887|  20.1k|        rule Aggregate() -> AggregateExpression =
 1888|  20.1k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  20.1k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  20.1k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  20.1k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  20.1k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  20.1k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  20.1k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  20.1k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  20.1k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  20.1k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  20.1k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  20.1k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  20.1k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  20.1k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  20.1k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  20.1k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  20.1k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  20.1k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  20.1k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  20.1k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  20.1k|
 1909|  20.1k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  20.1k|            match a {
 1911|  20.1k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  20.1k|                None => i.into()
 1913|  20.1k|            }
 1914|  20.1k|        }
 1915|  20.1k|
 1916|  20.1k|        rule RDFLiteral() -> Literal =
 1917|  20.1k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  20.1k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  20.1k|            value:String() { Literal::new_simple_literal(value) }
 1920|  20.1k|
 1921|  20.1k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  20.1k|
 1923|  20.1k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  20.1k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  20.1k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  20.1k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  20.1k|
 1928|  20.1k|        rule NumericLiteralPositive() -> Literal =
 1929|  20.1k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  20.1k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  20.1k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  20.1k|
 1933|  20.1k|
 1934|  20.1k|        rule NumericLiteralNegative() -> Literal =
 1935|  20.1k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  20.1k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  20.1k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  20.1k|
 1939|  20.1k|        rule BooleanLiteral() -> Literal =
 1940|  20.1k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  20.1k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  20.1k|
 1943|  20.1k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  20.1k|
 1945|  20.1k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  20.1k|            NamedNode::from(i)
 1947|  20.1k|        }
 1948|  20.1k|
 1949|  20.1k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  20.1k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  20.1k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  20.1k|            } else {
 1953|  20.1k|                Err("Prefix not found")
 1954|  20.1k|            } }
 1955|  20.1k|
 1956|  20.1k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  20.1k|            let node = BlankNode::new_unchecked(id);
 1958|  20.1k|            if state.used_bnodes.contains(&node) {
 1959|  20.1k|                Err("Already used blank node id")
 1960|  20.1k|            } else {
 1961|  20.1k|                state.currently_used_bnodes.insert(node.clone());
 1962|  20.1k|                Ok(node)
 1963|  20.1k|            }
 1964|  20.1k|        } / ANON() { BlankNode::default() }
 1965|  20.1k|
 1966|  20.1k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  20.1k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  20.1k|        }
 1969|  20.1k|
 1970|  20.1k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  20.1k|            ns
 1972|  20.1k|        }
 1973|  20.1k|
 1974|  20.1k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  20.1k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  20.1k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  20.1k|                iri.push_str(base);
 1978|  20.1k|                for chunk in local.split('\\') { // We remove \
 1979|  20.1k|                    iri.push_str(chunk);
 1980|  20.1k|                }
 1981|  20.1k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  20.1k|            } else {
 1983|  20.1k|                Err("Prefix not found")
 1984|  20.1k|            }
 1985|  20.1k|        }
 1986|  20.1k|
 1987|  20.1k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  20.1k|            b
 1989|  20.1k|        }
 1990|  20.1k|
 1991|  20.1k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  20.1k|
 1993|  20.1k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  20.1k|
 1995|  20.1k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  20.1k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  20.1k|        }
 1998|  20.1k|
 1999|  20.1k|        rule INTEGER() = ['0'..='9']+
 2000|  20.1k|
 2001|  20.1k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  20.1k|
 2003|  20.1k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  20.1k|
 2005|  20.1k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  20.1k|
 2007|  20.1k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  20.1k|
 2009|  20.1k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  20.1k|
 2011|  20.1k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  20.1k|
 2013|  20.1k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  20.1k|
 2015|  20.1k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  20.1k|
 2017|  20.1k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  20.1k|
 2019|  20.1k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  20.1k|             unescape_string(l)
 2021|  20.1k|        }
 2022|  20.1k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  20.1k|
 2024|  20.1k|
 2025|  20.1k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  20.1k|             unescape_string(l)
 2027|  20.1k|        }
 2028|  20.1k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  20.1k|
 2030|  20.1k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  20.1k|             unescape_string(l)
 2032|  20.1k|        }
 2033|  20.1k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  20.1k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  20.1k|
 2036|  20.1k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  20.1k|             unescape_string(l)
 2038|  20.1k|        }
 2039|  20.1k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  20.1k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  20.1k|
 2042|  20.1k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  20.1k|
 2044|  20.1k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  20.1k|
 2046|  20.1k|        rule NIL() = "(" WS()* ")"
 2047|  20.1k|
 2048|  20.1k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  20.1k|
 2050|  20.1k|        rule ANON() = "[" WS()* "]"
 2051|  20.1k|
 2052|  20.1k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  20.1k|
 2054|  20.1k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  20.1k|
 2056|  20.1k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  20.1k|
 2058|  20.1k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  20.1k|
 2060|  20.1k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  20.1k|
 2062|  20.1k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  20.1k|
 2064|  20.1k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  20.1k|
 2066|  20.1k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  20.1k|
 2068|  20.1k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  20.1k|
 2070|  20.1k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  20.1k|
 2072|  20.1k|        //space
 2073|  20.1k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  20.1k|
 2075|  20.1k|        //comment
 2076|  20.1k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  20.1k|
 2078|  20.1k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  20.1k|            if input.eq_ignore_ascii_case(literal) {
 2080|  20.1k|                Ok(())
 2081|  20.1k|            } else {
 2082|  20.1k|                Err(literal)
 2083|  20.1k|            }
 2084|  20.1k|        }
 2085|  20.1k|    }
 2086|  20.1k|}
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_BrackettedExpression0B7_:
 1787|    403|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_PathNegatedPropertySets_0B7_:
 1562|    229|            p:PathOneInPropertySet() {
 1563|    229|                match p {
 1564|    204|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|     25|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_ObjectListPath00B9_:
 1471|  11.4k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  11.4k|                a.focus.push(b.focus);
 1473|  11.4k|                a.patterns.extend(b.patterns);
 1474|  11.4k|                a
 1475|  11.4k|            })
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_PrimaryExpressions_0B7_:
 1769|    749|            l:RDFLiteral() { l.into() } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_NumericLiteralUnsigned0B7_:
 1924|    469|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_GroupConditions1_0B7_:
  939|    248|            e:Var() { (e.into(), None) }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser24___parse_PropertyListPath0B7_:
 1440|    497|            { FocusedTripleOrPathPattern::default() }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_SelectClause_variables0B7_:
  825|    662|            "*" { SelectionVariables::Star } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_Drop0B7_:
  987|    173|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|    173|            vec![GraphUpdateOperation::Drop { silent, graph }]
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_DataBlockValues3_0B7_:
 1305|  1.02k|            i("UNDEF") { None }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_BuiltInCallsI_0B7_:
 1838|     10|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_GroupGraphPatternSub0B7_:
  778|  4.13k|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  4.13k|            let mut filter: Option<Expression> = None;
 1183|  4.13k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  4.13k|            for e in b.into_iter().flatten() {
 1185|    878|                match e {
 1186|    175|                    PartialGraphPattern::Optional(p, f) => {
 1187|    175|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|    243|                    PartialGraphPattern::Lateral(p) => {
 1191|    243|                        let mut defined_variables = HashSet::default();
 1192|    243|                        add_defined_variables(&p, &mut defined_variables);
 1193|    243|                        let mut contains = false;
 1194|    243|                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|    243|                        });
 1199|    243|                        if contains {
 1200|      0|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|    243|                        }
 1202|    243|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|     14|                    PartialGraphPattern::Minus(p) => {
 1205|     14|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|      3|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|      3|                        let mut contains = false;
 1209|      3|                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|      3|                        });
 1214|      3|                        if contains {
 1215|      2|                            return Err("BIND is overriding an existing variable")
 1216|      1|                        }
 1217|      1|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|      1|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|      0|                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|      1|                        expr
 1223|       |                    }),
 1224|    442|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|  4.13k|            Ok(if let Some(expr) = filter {
 1229|      1|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|  4.13k|                g
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_PathSequence_item0B7_:
 1515|  27.2k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_ValuesClause0B7_:
  970|     53|            i("VALUES") _ p:DataBlock() { Some(p) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_PrimaryExpression0B7_:
 1768|  3.59k|            v:Var() { v.into() } /
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_Modify0s_0B9_:
 1086|  1.48k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|    215|                    QuadPattern {
 1088|    215|                        subject: q.subject,
 1089|    215|                        predicate: q.predicate,
 1090|    215|                        object: q.object,
 1091|    215|                        graph_name: with.clone().into()
 1092|    215|                    }
 1093|       |                } else {
 1094|  1.26k|                    q
 1095|  1.48k|                }).collect();
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_InlineDataOneVar_value0B7_:
 1283|    120|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_InlineDataFull0B7_:
  778|    134|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|    134|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|    134|                Ok((vars, vals))
 1288|       |            } else {
 1289|      0|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_InlineData0B7_:
 1274|    116|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser37___parse_ConditionalAndExpression_item0B7_:
 1713|  1.80k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_GraphTerm0B7_:
 1696|  14.2k|            i:iri() { i.into() } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_RDFLiterals_0B7_:
 1918|  1.37k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser26___parse_AdditiveExpression0B7_:
 1736|  4.01k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  1.71k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  1.52k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|      0|            Some(_) => unreachable!(),
 1740|  2.29k|            None => a,
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_SelectClause_variabless_0B7_:
  826|    815|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser38___parse_MultiplicativeExpression_inner0B7_:
 1752|  3.28k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  3.28k|            (s, e)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_ObjectListPath0B7_:
 1470|  8.89k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  8.89k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|       |                a.focus.push(b.focus);
 1473|       |                a.patterns.extend(b.patterns);
 1474|       |                a
 1475|  8.89k|            })
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_QuadData0B7_:
  778|    150|parser! {
  779|    150|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|    150|    grammar parser(state: &mut ParserState) for str {
  781|    150|        pub rule QueryUnit() -> Query = Query()
  782|    150|
  783|    150|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|    150|            q
  785|    150|        }
  786|    150|
  787|    150|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|    150|
  789|    150|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|    150|
  791|    150|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|    150|            state.base_iri = Some(i)
  793|    150|        }
  794|    150|
  795|    150|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|    150|            state.namespaces.insert(ns.into(), i.into_inner());
  797|    150|        }
  798|    150|
  799|    150|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|    150|            Ok(Query::Select {
  801|    150|                dataset: d,
  802|    150|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|    150|                base_iri: state.base_iri.clone()
  804|    150|            })
  805|    150|        }
  806|    150|
  807|    150|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|    150|            build_select(s, w, g, h, o, l, v, state)
  809|    150|        }
  810|    150|
  811|    150|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|    150|            Selection {
  813|    150|                option: o,
  814|    150|                variables: v
  815|    150|            }
  816|    150|        }
  817|    150|        rule Selection_init() = {
  818|    150|            state.aggregates.push(Vec::new())
  819|    150|        }
  820|    150|        rule SelectClause_option() -> SelectionOption =
  821|    150|            i("DISTINCT") { SelectionOption::Distinct } /
  822|    150|            i("REDUCED") { SelectionOption::Reduced } /
  823|    150|            { SelectionOption::Default }
  824|    150|        rule SelectClause_variables() -> SelectionVariables =
  825|    150|            "*" { SelectionVariables::Star } /
  826|    150|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|    150|        rule SelectClause_member() -> SelectionMember =
  828|    150|            v:Var() _ { SelectionMember::Variable(v) } /
  829|    150|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|    150|
  831|    150|        rule ConstructQuery() -> Query =
  832|    150|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|    150|                Ok(Query::Construct {
  834|    150|                    template: c,
  835|    150|                    dataset: d,
  836|    150|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|    150|                    base_iri: state.base_iri.clone()
  838|    150|                })
  839|    150|            } /
  840|    150|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|    150|                Ok(Query::Construct {
  842|    150|                    template: c.clone(),
  843|    150|                    dataset: d,
  844|    150|                    pattern: build_select(
  845|    150|                        Selection::no_op(),
  846|    150|                        GraphPattern::Bgp { patterns: c },
  847|    150|                        g, h, o, l, v, state
  848|    150|                    )?,
  849|    150|                    base_iri: state.base_iri.clone()
  850|    150|                })
  851|    150|            }
  852|    150|
  853|    150|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|    150|
  855|    150|        rule DescribeQuery() -> Query =
  856|    150|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|    150|                Ok(Query::Describe {
  858|    150|                    dataset: d,
  859|    150|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|    150|                    base_iri: state.base_iri.clone()
  861|    150|                })
  862|    150|            } /
  863|    150|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|    150|                Ok(Query::Describe {
  865|    150|                    dataset: d,
  866|    150|                    pattern: build_select(Selection {
  867|    150|                        option: SelectionOption::Default,
  868|    150|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|    150|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|    150|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|    150|                        }).collect())
  872|    150|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|    150|                    base_iri: state.base_iri.clone()
  874|    150|                })
  875|    150|            }
  876|    150|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|    150|
  878|    150|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|    150|            Ok(Query::Ask {
  880|    150|                dataset: d,
  881|    150|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|    150|                base_iri: state.base_iri.clone()
  883|    150|            })
  884|    150|        }
  885|    150|
  886|    150|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|    150|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|    150|            if d.is_empty() {
  889|    150|                return None;
  890|    150|            }
  891|    150|            let mut default = Vec::new();
  892|    150|            let mut named = Vec::new();
  893|    150|            for (d, n) in d {
  894|    150|                if let Some(d) = d {
  895|    150|                    default.push(d);
  896|    150|                }
  897|    150|                if let Some(n) = n {
  898|    150|                    named.push(n);
  899|    150|                }
  900|    150|            }
  901|    150|            Some(QueryDataset {
  902|    150|                default, named: Some(named)
  903|    150|            })
  904|    150|        }
  905|    150|
  906|    150|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|    150|            (Some(s), None)
  908|    150|        }
  909|    150|
  910|    150|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|    150|            (None, Some(s))
  912|    150|        }
  913|    150|
  914|    150|        rule SourceSelector() -> NamedNode = iri()
  915|    150|
  916|    150|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|    150|            p
  918|    150|        }
  919|    150|
  920|    150|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|    150|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|    150|            let clauses = c.into_iter().map(|(e, vo)| {
  923|    150|                if let Expression::Variable(v) = e {
  924|    150|                    v
  925|    150|                } else {
  926|    150|                    let v = vo.unwrap_or_else(variable);
  927|    150|                    projections.push((e, v.clone()));
  928|    150|                    v
  929|    150|                }
  930|    150|            }).collect();
  931|    150|            (clauses, projections)
  932|    150|        }
  933|    150|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|    150|
  935|    150|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|    150|            e:BuiltInCall() { (e, None) } /
  937|    150|            e:FunctionCall() { (e, None) } /
  938|    150|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|    150|            e:Var() { (e.into(), None) }
  940|    150|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|    150|
  942|    150|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|    150|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|    150|        }
  945|    150|
  946|    150|        rule HavingCondition() -> Expression = Constraint()
  947|    150|
  948|    150|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|    150|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|    150|
  951|    150|        rule OrderCondition() -> OrderExpression =
  952|    150|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|    150|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|    150|            e: Constraint() { OrderExpression::Asc(e) } /
  955|    150|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|    150|
  957|    150|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|    150|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|    150|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|    150|
  961|    150|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|    150|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|    150|        }
  964|    150|
  965|    150|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|    150|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|    150|        }
  968|    150|
  969|    150|        rule ValuesClause() -> Option<GraphPattern> =
  970|    150|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|    150|            { None }
  972|    150|
  973|    150|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|    150|
  975|    150|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|    150|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|    150|
  978|    150|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|    150|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|    150|        }
  981|    150|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|    150|
  983|    150|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|    150|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|    150|        }
  986|    150|
  987|    150|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|    150|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|    150|        }
  990|    150|
  991|    150|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|    150|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|    150|        }
  994|    150|
  995|    150|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|    150|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|    150|            if from == to {
  998|    150|                Vec::new() // identity case
  999|    150|            } else {
 1000|    150|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|    150|                vec![copy_graph(from, to)]
 1002|    150|            }
 1003|    150|        }
 1004|    150|
 1005|    150|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|    150|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|    150|            if from == to {
 1008|    150|                Vec::new() // identity case
 1009|    150|            } else {
 1010|    150|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|    150|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|    150|            }
 1013|    150|        }
 1014|    150|
 1015|    150|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|    150|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|    150|            if from == to {
 1018|    150|                Vec::new() // identity case
 1019|    150|            } else {
 1020|    150|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|    150|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|    150|            }
 1023|    150|        }
 1024|    150|
 1025|    150|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|    150|            vec![GraphUpdateOperation::InsertData { data }]
 1027|    150|        }
 1028|    150|
 1029|    150|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|    150|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|    150|        }
 1032|    150|
 1033|    150|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|    150|            let pattern = d.iter().map(|q| {
 1035|    150|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|    150|                match &q.graph_name {
 1037|    150|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|    150|                    GraphNamePattern::DefaultGraph => bgp,
 1039|    150|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|    150|                }
 1041|    150|            }).reduce(new_join).unwrap_or_default();
 1042|    150|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|    150|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|    150|                delete,
 1045|    150|                insert: Vec::new(),
 1046|    150|                using: None,
 1047|    150|                pattern: Box::new(pattern)
 1048|    150|            }])
 1049|    150|        }
 1050|    150|
 1051|    150|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|    150|            let (delete, insert) = c;
 1053|    150|            let mut delete = delete.unwrap_or_default();
 1054|    150|            let mut insert = insert.unwrap_or_default();
 1055|    150|            #[allow(clippy::shadow_same)]
 1056|    150|            let mut pattern = pattern;
 1057|    150|
 1058|    150|            let mut using = if u.is_empty() {
 1059|    150|                None
 1060|    150|            } else {
 1061|    150|                let mut default = Vec::new();
 1062|    150|                let mut named = Vec::new();
 1063|    150|                for (d, n) in u {
 1064|    150|                    if let Some(d) = d {
 1065|    150|                        default.push(d)
 1066|    150|                    }
 1067|    150|                    if let Some(n) = n {
 1068|    150|                        named.push(n)
 1069|    150|                    }
 1070|    150|                }
 1071|    150|                Some(QueryDataset { default, named: Some(named) })
 1072|    150|            };
 1073|    150|
 1074|    150|            if let Some(with) = with {
 1075|    150|                // We inject WITH everywhere
 1076|    150|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|    150|                    GroundQuadPattern {
 1078|    150|                        subject: q.subject,
 1079|    150|                        predicate: q.predicate,
 1080|    150|                        object: q.object,
 1081|    150|                        graph_name: with.clone().into()
 1082|    150|                    }
 1083|    150|                } else {
 1084|    150|                    q
 1085|    150|                }).collect();
 1086|    150|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|    150|                    QuadPattern {
 1088|    150|                        subject: q.subject,
 1089|    150|                        predicate: q.predicate,
 1090|    150|                        object: q.object,
 1091|    150|                        graph_name: with.clone().into()
 1092|    150|                    }
 1093|    150|                } else {
 1094|    150|                    q
 1095|    150|                }).collect();
 1096|    150|                if using.is_none() {
 1097|    150|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|    150|                }
 1099|    150|            }
 1100|    150|
 1101|    150|            vec![GraphUpdateOperation::DeleteInsert {
 1102|    150|                delete,
 1103|    150|                insert,
 1104|    150|                using,
 1105|    150|                pattern: Box::new(pattern)
 1106|    150|            }]
 1107|    150|        }
 1108|    150|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|    150|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|    150|            (Some(d), i)
 1111|    150|        } / i:InsertClause() {
 1112|    150|            (None, Some(i))
 1113|    150|        }
 1114|    150|        rule Modify_clear() = {
 1115|    150|            state.used_bnodes.clear();
 1116|    150|            state.currently_used_bnodes.clear();
 1117|    150|        }
 1118|    150|
 1119|    150|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|    150|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|    150|        }
 1122|    150|
 1123|    150|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|    150|
 1125|    150|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|    150|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|    150|            (Some(i), None)
 1128|    150|        }
 1129|    150|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|    150|            (None, Some(i))
 1131|    150|        }
 1132|    150|
 1133|    150|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|    150|            GraphName::DefaultGraph
 1135|    150|        } / (i("GRAPH") _)? g:iri() {
 1136|    150|            GraphName::NamedNode(g)
 1137|    150|        }
 1138|    150|
 1139|    150|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|    150|
 1141|    150|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|    150|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|    150|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|    150|            / i("ALL") { GraphTarget::AllGraphs }
 1145|    150|
 1146|    150|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|    150|
 1148|    150|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|    150|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|    150|        }
 1151|    150|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|    150|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|    150|        }
 1154|    150|
 1155|    150|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|    150|            q.into_iter().flatten().collect()
 1157|    150|        }
 1158|    150|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|    150|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|    150|        } //TODO: return iter?
 1161|    150|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|    150|
 1163|    150|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|    150|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|    150|        }
 1166|    150|
 1167|    150|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|    150|            ts.into_iter().flatten().collect()
 1169|    150|        }
 1170|    150|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|    150|
 1172|    150|        rule GroupGraphPattern() -> GraphPattern =
 1173|    150|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|    150|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|    150|        rule GroupGraphPattern_clear() = {
 1176|    150|             // We deal with blank nodes aliases rule
 1177|    150|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|    150|            state.currently_used_bnodes.clear();
 1179|    150|        }
 1180|    150|
 1181|    150|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|    150|            let mut filter: Option<Expression> = None;
 1183|    150|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|    150|            for e in b.into_iter().flatten() {
 1185|    150|                match e {
 1186|    150|                    PartialGraphPattern::Optional(p, f) => {
 1187|    150|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|    150|                    }
 1189|    150|                    #[cfg(feature = "sep-0006")]
 1190|    150|                    PartialGraphPattern::Lateral(p) => {
 1191|    150|                        let mut defined_variables = HashSet::default();
 1192|    150|                        add_defined_variables(&p, &mut defined_variables);
 1193|    150|                        let mut contains = false;
 1194|    150|                        g.on_in_scope_variable(|v| {
 1195|    150|                            if defined_variables.contains(v) {
 1196|    150|                                contains = true;
 1197|    150|                            }
 1198|    150|                        });
 1199|    150|                        if contains {
 1200|    150|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|    150|                        }
 1202|    150|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|    150|                    }
 1204|    150|                    PartialGraphPattern::Minus(p) => {
 1205|    150|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|    150|                    }
 1207|    150|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|    150|                        let mut contains = false;
 1209|    150|                        g.on_in_scope_variable(|v| {
 1210|    150|                            if *v == variable {
 1211|    150|                                contains = true;
 1212|    150|                            }
 1213|    150|                        });
 1214|    150|                        if contains {
 1215|    150|                            return Err("BIND is overriding an existing variable")
 1216|    150|                        }
 1217|    150|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|    150|                    }
 1219|    150|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|    150|                        Expression::And(Box::new(f), Box::new(expr))
 1221|    150|                    } else {
 1222|    150|                        expr
 1223|    150|                    }),
 1224|    150|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|    150|                }
 1226|    150|            }
 1227|    150|
 1228|    150|            Ok(if let Some(expr) = filter {
 1229|    150|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|    150|            } else {
 1231|    150|                g
 1232|    150|            })
 1233|    150|        }
 1234|    150|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|    150|            let mut result = vec![a];
 1236|    150|            if let Some(v) = b {
 1237|    150|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|    150|            }
 1239|    150|            result
 1240|    150|        }
 1241|    150|
 1242|    150|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|    150|            hs.into_iter().flatten().collect()
 1244|    150|        }
 1245|    150|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|    150|
 1247|    150|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|    150|
 1249|    150|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|    150|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|    150|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|    150|            } else {
 1253|    150|               PartialGraphPattern::Optional(p, None)
 1254|    150|            }
 1255|    150|        }
 1256|    150|
 1257|    150|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|    150|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|    150|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|    150|        }
 1261|    150|
 1262|    150|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|    150|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|    150|        }
 1265|    150|
 1266|    150|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|    150|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|    150|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|    150|
 1270|    150|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|    150|            PartialGraphPattern::Bind(e, v)
 1272|    150|        }
 1273|    150|
 1274|    150|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|    150|
 1276|    150|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|    150|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|    150|        }
 1279|    150|
 1280|    150|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|    150|            (vec![var], d)
 1282|    150|        }
 1283|    150|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|    150|
 1285|    150|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|    150|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|    150|                Ok((vars, vals))
 1288|    150|            } else {
 1289|    150|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|    150|            }
 1291|    150|        }
 1292|    150|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|    150|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|    150|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|    150|
 1296|    150|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|    150|            t:QuotedTripleData() {?
 1298|    150|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|    150|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|    150|            } /
 1301|    150|            i:iri() { Some(i.into()) } /
 1302|    150|            l:RDFLiteral() { Some(l.into()) } /
 1303|    150|            l:NumericLiteral() { Some(l.into()) } /
 1304|    150|            l:BooleanLiteral() { Some(l.into()) } /
 1305|    150|            i("UNDEF") { None }
 1306|    150|
 1307|    150|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|    150|            PartialGraphPattern::Minus(p)
 1309|    150|        }
 1310|    150|
 1311|    150|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|    150|            not_empty_fold(p.into_iter(), |a, b| {
 1313|    150|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|    150|            }).map(PartialGraphPattern::Other)
 1315|    150|        }
 1316|    150|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|    150|
 1318|    150|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|    150|            PartialGraphPattern::Filter(c)
 1320|    150|        }
 1321|    150|
 1322|    150|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|    150|
 1324|    150|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|    150|            Expression::FunctionCall(Function::Custom(f), a)
 1326|    150|        }
 1327|    150|
 1328|    150|        rule ArgList() -> Vec<Expression> =
 1329|    150|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|    150|            NIL() { Vec::new() }
 1331|    150|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|    150|
 1333|    150|        rule ExpressionList() -> Vec<Expression> =
 1334|    150|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|    150|            NIL() { Vec::new() }
 1336|    150|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|    150|
 1338|    150|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|    150|
 1340|    150|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|    150|            p.into_iter().flatten().collect()
 1342|    150|        }
 1343|    150|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|    150|
 1345|    150|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|    150|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|    150|                let mut patterns = po.patterns;
 1348|    150|                for (p, os) in po.focus {
 1349|    150|                    for o in os {
 1350|    150|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|    150|                    }
 1352|    150|                }
 1353|    150|                Ok(patterns)
 1354|    150|            } /
 1355|    150|            s:TriplesNode() _ po:PropertyList() {?
 1356|    150|                let mut patterns = s.patterns;
 1357|    150|                patterns.extend(po.patterns);
 1358|    150|                for (p, os) in po.focus {
 1359|    150|                    for o in os {
 1360|    150|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|    150|                    }
 1362|    150|                }
 1363|    150|                Ok(patterns)
 1364|    150|            }
 1365|    150|
 1366|    150|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|    150|            PropertyListNotEmpty() /
 1368|    150|            { FocusedTriplePattern::default() }
 1369|    150|
 1370|    150|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|    150|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|    150|                a.focus.push(b.focus);
 1373|    150|                a.patterns.extend(b.patterns);
 1374|    150|                a
 1375|    150|            })
 1376|    150|        }
 1377|    150|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|    150|            FocusedTriplePattern {
 1379|    150|                focus: (p, o.focus),
 1380|    150|                patterns: o.patterns
 1381|    150|            }
 1382|    150|        }
 1383|    150|
 1384|    150|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|    150|
 1386|    150|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|    150|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|    150|                a.focus.push(b.focus);
 1389|    150|                a.patterns.extend_from_slice(&b.patterns);
 1390|    150|                a
 1391|    150|            })
 1392|    150|        }
 1393|    150|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|    150|
 1395|    150|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|    150|            if let Some(a) = a {
 1397|    150|                let mut patterns = g.patterns;
 1398|    150|                patterns.extend(a.patterns);
 1399|    150|                FocusedTriplePattern {
 1400|    150|                    focus: AnnotatedTerm {
 1401|    150|                        term: g.focus,
 1402|    150|                        annotations: a.focus
 1403|    150|                    },
 1404|    150|                    patterns
 1405|    150|                }
 1406|    150|            } else {
 1407|    150|                FocusedTriplePattern {
 1408|    150|                    focus: AnnotatedTerm {
 1409|    150|                        term: g.focus,
 1410|    150|                        annotations: Vec::new()
 1411|    150|                    },
 1412|    150|                    patterns: g.patterns
 1413|    150|                }
 1414|    150|            }
 1415|    150|        }
 1416|    150|
 1417|    150|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|    150|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|    150|                let mut patterns = po.patterns;
 1420|    150|                for (p, os) in po.focus {
 1421|    150|                    for o in os {
 1422|    150|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|    150|                    }
 1424|    150|                }
 1425|    150|                Ok(patterns)
 1426|    150|            } /
 1427|    150|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|    150|                let mut patterns = s.patterns;
 1429|    150|                patterns.extend(po.patterns);
 1430|    150|                for (p, os) in po.focus {
 1431|    150|                    for o in os {
 1432|    150|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|    150|                    }
 1434|    150|                }
 1435|    150|                Ok(patterns)
 1436|    150|            }
 1437|    150|
 1438|    150|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|    150|            PropertyListPathNotEmpty() /
 1440|    150|            { FocusedTripleOrPathPattern::default() }
 1441|    150|
 1442|    150|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|    150|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|    150|                    focus: vec![(hp, ho.focus)],
 1445|    150|                    patterns: ho.patterns
 1446|    150|                }, |mut a, b| {
 1447|    150|                    a.focus.push(b.focus);
 1448|    150|                    a.patterns.extend(b.patterns);
 1449|    150|                    a
 1450|    150|                })
 1451|    150|        }
 1452|    150|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|    150|            c
 1454|    150|        }
 1455|    150|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|    150|            FocusedTripleOrPathPattern {
 1457|    150|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|    150|                patterns: o.patterns
 1459|    150|            }
 1460|    150|        }
 1461|    150|
 1462|    150|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|    150|            p.into()
 1464|    150|        }
 1465|    150|
 1466|    150|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|    150|            v.into()
 1468|    150|        }
 1469|    150|
 1470|    150|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|    150|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|    150|                a.focus.push(b.focus);
 1473|    150|                a.patterns.extend(b.patterns);
 1474|    150|                a
 1475|    150|            })
 1476|    150|        }
 1477|    150|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|    150|
 1479|    150|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|    150|             if let Some(a) = a {
 1481|    150|                let mut patterns = g.patterns;
 1482|    150|                patterns.extend(a.patterns);
 1483|    150|                FocusedTripleOrPathPattern {
 1484|    150|                    focus: AnnotatedTermPath {
 1485|    150|                        term: g.focus,
 1486|    150|                        annotations: a.focus
 1487|    150|                    },
 1488|    150|                    patterns
 1489|    150|                }
 1490|    150|            } else {
 1491|    150|                FocusedTripleOrPathPattern {
 1492|    150|                    focus: AnnotatedTermPath {
 1493|    150|                        term: g.focus,
 1494|    150|                        annotations: Vec::new()
 1495|    150|                    },
 1496|    150|                    patterns: g.patterns
 1497|    150|                }
 1498|    150|            }
 1499|    150|        }
 1500|    150|
 1501|    150|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|    150|
 1503|    150|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|    150|            not_empty_fold(p.into_iter(), |a, b| {
 1505|    150|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|    150|            })
 1507|    150|        }
 1508|    150|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|    150|
 1510|    150|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|    150|            not_empty_fold(p.into_iter(), |a, b| {
 1512|    150|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|    150|            })
 1514|    150|        }
 1515|    150|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|    150|
 1517|    150|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|    150|            match o {
 1519|    150|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|    150|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|    150|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|    150|                Some(_) => unreachable!(),
 1523|    150|                None => p
 1524|    150|            }
 1525|    150|        }
 1526|    150|        rule PathElt_op() -> char =
 1527|    150|            "*" { '*' } /
 1528|    150|            "+" { '+' } /
 1529|    150|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|    150|
 1531|    150|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|    150|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|    150|            PathElt()
 1534|    150|
 1535|    150|        rule PathPrimary() -> PropertyPathExpression =
 1536|    150|            v:iri() { v.into() } /
 1537|    150|            "a" { rdf::TYPE.into_owned().into() } /
 1538|    150|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|    150|            "(" _ p:Path() _ ")" { p }
 1540|    150|
 1541|    150|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|    150|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|    150|                let mut direct = Vec::new();
 1544|    150|                let mut inverse = Vec::new();
 1545|    150|                for e in p {
 1546|    150|                    match e {
 1547|    150|                        Either::Left(a) => direct.push(a),
 1548|    150|                        Either::Right(b) => inverse.push(b)
 1549|    150|                    }
 1550|    150|                }
 1551|    150|                if inverse.is_empty() {
 1552|    150|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|    150|                } else if direct.is_empty() {
 1554|    150|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|    150|                } else {
 1556|    150|                    PropertyPathExpression::Alternative(
 1557|    150|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|    150|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|    150|                    )
 1560|    150|                }
 1561|    150|            } /
 1562|    150|            p:PathOneInPropertySet() {
 1563|    150|                match p {
 1564|    150|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|    150|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|    150|                }
 1567|    150|            }
 1568|    150|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|    150|
 1570|    150|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|    150|            "^" _ v:iri() { Either::Right(v) } /
 1572|    150|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|    150|            v:iri() { Either::Left(v) } /
 1574|    150|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|    150|
 1576|    150|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|    150|
 1578|    150|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|    150|            let mut patterns = po.patterns;
 1580|    150|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|    150|            for (p, os) in po.focus {
 1582|    150|                for o in os {
 1583|    150|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|    150|                }
 1585|    150|            }
 1586|    150|            Ok(FocusedTriplePattern {
 1587|    150|                focus: bnode,
 1588|    150|                patterns
 1589|    150|            })
 1590|    150|        }
 1591|    150|
 1592|    150|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|    150|
 1594|    150|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|    150|            let mut patterns = po.patterns;
 1596|    150|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|    150|            for (p, os) in po.focus {
 1598|    150|                for o in os {
 1599|    150|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|    150|                }
 1601|    150|            }
 1602|    150|            Ok(FocusedTripleOrPathPattern {
 1603|    150|                focus: bnode,
 1604|    150|                patterns
 1605|    150|            })
 1606|    150|        }
 1607|    150|
 1608|    150|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|    150|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|    150|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|    150|            for objWithPatterns in o.into_iter().rev() {
 1612|    150|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|    150|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|    150|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|    150|                current_list_node = new_blank_node;
 1616|    150|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|    150|            }
 1618|    150|            FocusedTriplePattern {
 1619|    150|                focus: current_list_node,
 1620|    150|                patterns
 1621|    150|            }
 1622|    150|        }
 1623|    150|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|    150|
 1625|    150|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|    150|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|    150|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|    150|            for objWithPatterns in o.into_iter().rev() {
 1629|    150|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|    150|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|    150|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|    150|                current_list_node = new_blank_node;
 1633|    150|                patterns.extend(objWithPatterns.patterns);
 1634|    150|            }
 1635|    150|            FocusedTripleOrPathPattern {
 1636|    150|                focus: current_list_node,
 1637|    150|                patterns
 1638|    150|            }
 1639|    150|        }
 1640|    150|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|    150|
 1642|    150|
 1643|    150|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|    150|
 1645|    150|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|    150|
 1647|    150|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|    150|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|    150|            TriplesNode()
 1650|    150|
 1651|    150|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|    150|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|    150|            TriplesNodePath()
 1654|    150|
 1655|    150|        rule VarOrTerm() -> TermPattern =
 1656|    150|            v:Var() { v.into() } /
 1657|    150|            t:QuotedTriple() {?
 1658|    150|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|    150|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|    150|            } /
 1661|    150|            t:GraphTerm() { t.into() }
 1662|    150|
 1663|    150|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|    150|            Ok(TriplePattern {
 1665|    150|                subject: s,
 1666|    150|                predicate: p,
 1667|    150|                object: o
 1668|    150|            })
 1669|    150|        }
 1670|    150|
 1671|    150|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|    150|            Ok(GroundTriple {
 1673|    150|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|    150|                predicate: p,
 1675|    150|                object: o
 1676|    150|            })
 1677|    150|        }
 1678|    150|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|    150|
 1680|    150|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|    150|            l:RDFLiteral() { l.into() } /
 1682|    150|            l:NumericLiteral() { l.into() } /
 1683|    150|            l:BooleanLiteral() { l.into() } /
 1684|    150|            t:QuotedTripleData() {?
 1685|    150|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|    150|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|    150|            }
 1688|    150|
 1689|    150|        rule VarOrIri() -> NamedNodePattern =
 1690|    150|            v:Var() { v.into() } /
 1691|    150|            i:iri() { i.into() }
 1692|    150|
 1693|    150|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|    150|
 1695|    150|        rule GraphTerm() -> Term =
 1696|    150|            i:iri() { i.into() } /
 1697|    150|            l:RDFLiteral() { l.into() } /
 1698|    150|            l:NumericLiteral() { l.into() } /
 1699|    150|            l:BooleanLiteral() { l.into() } /
 1700|    150|            b:BlankNode() { b.into() } /
 1701|    150|            NIL() { rdf::NIL.into_owned().into() }
 1702|    150|
 1703|    150|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|    150|
 1705|    150|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|    150|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|    150|        }
 1708|    150|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|    150|
 1710|    150|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|    150|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|    150|        }
 1713|    150|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|    150|
 1715|    150|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|    150|
 1717|    150|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|    150|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|    150|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|    150|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|    150|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|    150|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|    150|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|    150|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|    150|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|    150|            Some(_) => unreachable!(),
 1727|    150|            None => a
 1728|    150|        } }
 1729|    150|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|    150|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|    150|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|    150|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|    150|
 1734|    150|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|    150|
 1736|    150|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|    150|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|    150|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|    150|            Some(_) => unreachable!(),
 1740|    150|            None => a,
 1741|    150|        } }
 1742|    150|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|    150|            (s, e)
 1744|    150|        }
 1745|    150|
 1746|    150|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|    150|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|    150|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|    150|            Some(_) => unreachable!(),
 1750|    150|            None => a
 1751|    150|        } }
 1752|    150|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|    150|            (s, e)
 1754|    150|        }
 1755|    150|
 1756|    150|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|    150|            Some("!") => Expression::Not(Box::new(e)),
 1758|    150|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|    150|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|    150|            Some(_) => unreachable!(),
 1761|    150|            None => e,
 1762|    150|        } }
 1763|    150|
 1764|    150|        rule PrimaryExpression() -> Expression =
 1765|    150|            BrackettedExpression()  /
 1766|    150|            ExprQuotedTriple() /
 1767|    150|            iriOrFunction() /
 1768|    150|            v:Var() { v.into() } /
 1769|    150|            l:RDFLiteral() { l.into() } /
 1770|    150|            l:NumericLiteral() { l.into() } /
 1771|    150|            l:BooleanLiteral() { l.into() } /
 1772|    150|            BuiltInCall()
 1773|    150|
 1774|    150|        rule ExprVarOrTerm() -> Expression =
 1775|    150|            ExprQuotedTriple() /
 1776|    150|            i:iri() { i.into() } /
 1777|    150|            l:RDFLiteral() { l.into() } /
 1778|    150|            l:NumericLiteral() { l.into() } /
 1779|    150|            l:BooleanLiteral() { l.into() } /
 1780|    150|            v:Var() { v.into() }
 1781|    150|
 1782|    150|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|    150|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|    150|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|    150|        }
 1786|    150|
 1787|    150|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|    150|
 1789|    150|        rule BuiltInCall() -> Expression =
 1790|    150|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|    150|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|    150|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|    150|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|    150|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|    150|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|    150|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|    150|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|    150|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|    150|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|    150|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|    150|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|    150|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|    150|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|    150|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|    150|            SubstringExpression() /
 1806|    150|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|    150|            StrReplaceExpression() /
 1808|    150|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|    150|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|    150|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|    150|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|    150|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|    150|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|    150|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|    150|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|    150|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|    150|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|    150|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|    150|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|    150|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|    150|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|    150|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|    150|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|    150|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|    150|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|    150|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|    150|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|    150|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|    150|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|    150|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|    150|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|    150|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|    150|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|    150|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|    150|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|    150|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|    150|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|    150|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|    150|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|    150|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|    150|            RegexExpression() /
 1842|    150|            ExistsFunc() /
 1843|    150|            NotExistsFunc() /
 1844|    150|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|    150|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|    150|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|    150|            } /
 1848|    150|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|    150|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|    150|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|    150|            } /
 1852|    150|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|    150|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|    150|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|    150|            } /
 1856|    150|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|    150|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|    150|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|    150|            } /
 1860|    150|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|    150|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|    150|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|    150|            } /
 1864|    150|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|    150|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|    150|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|    150|            }
 1868|    150|
 1869|    150|        rule RegexExpression() -> Expression =
 1870|    150|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|    150|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|    150|
 1873|    150|
 1874|    150|        rule SubstringExpression() -> Expression =
 1875|    150|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|    150|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|    150|
 1878|    150|
 1879|    150|        rule StrReplaceExpression() -> Expression =
 1880|    150|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|    150|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|    150|
 1883|    150|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|    150|
 1885|    150|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|    150|
 1887|    150|        rule Aggregate() -> AggregateExpression =
 1888|    150|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|    150|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|    150|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|    150|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|    150|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|    150|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|    150|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|    150|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|    150|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|    150|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|    150|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|    150|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|    150|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|    150|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|    150|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|    150|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|    150|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|    150|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|    150|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|    150|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|    150|
 1909|    150|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|    150|            match a {
 1911|    150|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|    150|                None => i.into()
 1913|    150|            }
 1914|    150|        }
 1915|    150|
 1916|    150|        rule RDFLiteral() -> Literal =
 1917|    150|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|    150|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|    150|            value:String() { Literal::new_simple_literal(value) }
 1920|    150|
 1921|    150|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|    150|
 1923|    150|        rule NumericLiteralUnsigned() -> Literal =
 1924|    150|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|    150|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|    150|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|    150|
 1928|    150|        rule NumericLiteralPositive() -> Literal =
 1929|    150|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|    150|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|    150|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|    150|
 1933|    150|
 1934|    150|        rule NumericLiteralNegative() -> Literal =
 1935|    150|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|    150|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|    150|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|    150|
 1939|    150|        rule BooleanLiteral() -> Literal =
 1940|    150|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|    150|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|    150|
 1943|    150|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|    150|
 1945|    150|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|    150|            NamedNode::from(i)
 1947|    150|        }
 1948|    150|
 1949|    150|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|    150|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|    150|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|    150|            } else {
 1953|    150|                Err("Prefix not found")
 1954|    150|            } }
 1955|    150|
 1956|    150|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|    150|            let node = BlankNode::new_unchecked(id);
 1958|    150|            if state.used_bnodes.contains(&node) {
 1959|    150|                Err("Already used blank node id")
 1960|    150|            } else {
 1961|    150|                state.currently_used_bnodes.insert(node.clone());
 1962|    150|                Ok(node)
 1963|    150|            }
 1964|    150|        } / ANON() { BlankNode::default() }
 1965|    150|
 1966|    150|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|    150|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|    150|        }
 1969|    150|
 1970|    150|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|    150|            ns
 1972|    150|        }
 1973|    150|
 1974|    150|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|    150|            if let Some(base) = state.namespaces.get(ns) {
 1976|    150|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|    150|                iri.push_str(base);
 1978|    150|                for chunk in local.split('\\') { // We remove \
 1979|    150|                    iri.push_str(chunk);
 1980|    150|                }
 1981|    150|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|    150|            } else {
 1983|    150|                Err("Prefix not found")
 1984|    150|            }
 1985|    150|        }
 1986|    150|
 1987|    150|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|    150|            b
 1989|    150|        }
 1990|    150|
 1991|    150|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|    150|
 1993|    150|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|    150|
 1995|    150|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|    150|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|    150|        }
 1998|    150|
 1999|    150|        rule INTEGER() = ['0'..='9']+
 2000|    150|
 2001|    150|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|    150|
 2003|    150|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|    150|
 2005|    150|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|    150|
 2007|    150|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|    150|
 2009|    150|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|    150|
 2011|    150|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|    150|
 2013|    150|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|    150|
 2015|    150|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|    150|
 2017|    150|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|    150|
 2019|    150|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|    150|             unescape_string(l)
 2021|    150|        }
 2022|    150|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|    150|
 2024|    150|
 2025|    150|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|    150|             unescape_string(l)
 2027|    150|        }
 2028|    150|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|    150|
 2030|    150|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|    150|             unescape_string(l)
 2032|    150|        }
 2033|    150|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|    150|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|    150|
 2036|    150|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|    150|             unescape_string(l)
 2038|    150|        }
 2039|    150|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|    150|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|    150|
 2042|    150|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|    150|
 2044|    150|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|    150|
 2046|    150|        rule NIL() = "(" WS()* ")"
 2047|    150|
 2048|    150|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|    150|
 2050|    150|        rule ANON() = "[" WS()* "]"
 2051|    150|
 2052|    150|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|    150|
 2054|    150|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|    150|
 2056|    150|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|    150|
 2058|    150|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|    150|
 2060|    150|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|    150|
 2062|    150|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|    150|
 2064|    150|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|    150|
 2066|    150|        rule PERCENT() = ['%'] HEX() HEX()
 2067|    150|
 2068|    150|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|    150|
 2070|    150|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|    150|
 2072|    150|        //space
 2073|    150|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|    150|
 2075|    150|        //comment
 2076|    150|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|    150|
 2078|    150|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|    150|            if input.eq_ignore_ascii_case(literal) {
 2080|    150|                Ok(())
 2081|    150|            } else {
 2082|    150|                Err(literal)
 2083|    150|            }
 2084|    150|        }
 2085|    150|    }
 2086|    150|}
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_PathAlternative00B9_:
 1504|  1.22k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  1.22k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  1.22k|            })
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_GraphTerms0_0B7_:
 1698|  1.40k|            l:NumericLiteral() { l.into() } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser37___parse_GroupOrUnionGraphPattern_item0B7_:
 1316|    101|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_BuiltInCalls5_0B7_:
 1797|     16|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser15___parse_PathElt0B7_:
 1517|  27.2k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  27.2k|            match o {
 1519|  3.83k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|    854|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  1.94k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|      0|                Some(_) => unreachable!(),
 1523|  20.5k|                None => p
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser33___parse_PropertyListNotEmpty_item0B7_:
 1377|  14.0k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  14.0k|            FocusedTriplePattern {
 1379|  14.0k|                focus: (p, o.focus),
 1380|  14.0k|                patterns: o.patterns
 1381|  14.0k|            }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_Modify0B7_:
 1051|  1.64k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  1.64k|            let (delete, insert) = c;
 1053|  1.64k|            let mut delete = delete.unwrap_or_default();
 1054|  1.64k|            let mut insert = insert.unwrap_or_default();
 1055|  1.64k|            #[allow(clippy::shadow_same)]
 1056|  1.64k|            let mut pattern = pattern;
 1057|       |
 1058|  1.64k|            let mut using = if u.is_empty() {
 1059|  1.64k|                None
 1060|       |            } else {
 1061|      0|                let mut default = Vec::new();
 1062|      0|                let mut named = Vec::new();
 1063|      0|                for (d, n) in u {
 1064|      0|                    if let Some(d) = d {
 1065|      0|                        default.push(d)
 1066|      0|                    }
 1067|      0|                    if let Some(n) = n {
 1068|      0|                        named.push(n)
 1069|      0|                    }
 1070|       |                }
 1071|      0|                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|  1.64k|            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|  1.49k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|  1.49k|                }).collect();
 1086|  1.49k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|  1.49k|                }).collect();
 1096|  1.49k|                if using.is_none() {
 1097|  1.49k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  1.49k|                }
 1099|    146|            }
 1100|       |
 1101|  1.64k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  1.64k|                delete,
 1103|  1.64k|                insert,
 1104|  1.64k|                using,
 1105|  1.64k|                pattern: Box::new(pattern)
 1106|  1.64k|            }]
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser15___parse_LANGTAG0B7_:
  778|  1.37k|parser! {
  779|  1.37k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  1.37k|    grammar parser(state: &mut ParserState) for str {
  781|  1.37k|        pub rule QueryUnit() -> Query = Query()
  782|  1.37k|
  783|  1.37k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  1.37k|            q
  785|  1.37k|        }
  786|  1.37k|
  787|  1.37k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  1.37k|
  789|  1.37k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  1.37k|
  791|  1.37k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  1.37k|            state.base_iri = Some(i)
  793|  1.37k|        }
  794|  1.37k|
  795|  1.37k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  1.37k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  1.37k|        }
  798|  1.37k|
  799|  1.37k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  1.37k|            Ok(Query::Select {
  801|  1.37k|                dataset: d,
  802|  1.37k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  1.37k|                base_iri: state.base_iri.clone()
  804|  1.37k|            })
  805|  1.37k|        }
  806|  1.37k|
  807|  1.37k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  1.37k|            build_select(s, w, g, h, o, l, v, state)
  809|  1.37k|        }
  810|  1.37k|
  811|  1.37k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  1.37k|            Selection {
  813|  1.37k|                option: o,
  814|  1.37k|                variables: v
  815|  1.37k|            }
  816|  1.37k|        }
  817|  1.37k|        rule Selection_init() = {
  818|  1.37k|            state.aggregates.push(Vec::new())
  819|  1.37k|        }
  820|  1.37k|        rule SelectClause_option() -> SelectionOption =
  821|  1.37k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  1.37k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  1.37k|            { SelectionOption::Default }
  824|  1.37k|        rule SelectClause_variables() -> SelectionVariables =
  825|  1.37k|            "*" { SelectionVariables::Star } /
  826|  1.37k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  1.37k|        rule SelectClause_member() -> SelectionMember =
  828|  1.37k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  1.37k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  1.37k|
  831|  1.37k|        rule ConstructQuery() -> Query =
  832|  1.37k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  1.37k|                Ok(Query::Construct {
  834|  1.37k|                    template: c,
  835|  1.37k|                    dataset: d,
  836|  1.37k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  1.37k|                    base_iri: state.base_iri.clone()
  838|  1.37k|                })
  839|  1.37k|            } /
  840|  1.37k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  1.37k|                Ok(Query::Construct {
  842|  1.37k|                    template: c.clone(),
  843|  1.37k|                    dataset: d,
  844|  1.37k|                    pattern: build_select(
  845|  1.37k|                        Selection::no_op(),
  846|  1.37k|                        GraphPattern::Bgp { patterns: c },
  847|  1.37k|                        g, h, o, l, v, state
  848|  1.37k|                    )?,
  849|  1.37k|                    base_iri: state.base_iri.clone()
  850|  1.37k|                })
  851|  1.37k|            }
  852|  1.37k|
  853|  1.37k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  1.37k|
  855|  1.37k|        rule DescribeQuery() -> Query =
  856|  1.37k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  1.37k|                Ok(Query::Describe {
  858|  1.37k|                    dataset: d,
  859|  1.37k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  1.37k|                    base_iri: state.base_iri.clone()
  861|  1.37k|                })
  862|  1.37k|            } /
  863|  1.37k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  1.37k|                Ok(Query::Describe {
  865|  1.37k|                    dataset: d,
  866|  1.37k|                    pattern: build_select(Selection {
  867|  1.37k|                        option: SelectionOption::Default,
  868|  1.37k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  1.37k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  1.37k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  1.37k|                        }).collect())
  872|  1.37k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  1.37k|                    base_iri: state.base_iri.clone()
  874|  1.37k|                })
  875|  1.37k|            }
  876|  1.37k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  1.37k|
  878|  1.37k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  1.37k|            Ok(Query::Ask {
  880|  1.37k|                dataset: d,
  881|  1.37k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  1.37k|                base_iri: state.base_iri.clone()
  883|  1.37k|            })
  884|  1.37k|        }
  885|  1.37k|
  886|  1.37k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  1.37k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  1.37k|            if d.is_empty() {
  889|  1.37k|                return None;
  890|  1.37k|            }
  891|  1.37k|            let mut default = Vec::new();
  892|  1.37k|            let mut named = Vec::new();
  893|  1.37k|            for (d, n) in d {
  894|  1.37k|                if let Some(d) = d {
  895|  1.37k|                    default.push(d);
  896|  1.37k|                }
  897|  1.37k|                if let Some(n) = n {
  898|  1.37k|                    named.push(n);
  899|  1.37k|                }
  900|  1.37k|            }
  901|  1.37k|            Some(QueryDataset {
  902|  1.37k|                default, named: Some(named)
  903|  1.37k|            })
  904|  1.37k|        }
  905|  1.37k|
  906|  1.37k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  1.37k|            (Some(s), None)
  908|  1.37k|        }
  909|  1.37k|
  910|  1.37k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  1.37k|            (None, Some(s))
  912|  1.37k|        }
  913|  1.37k|
  914|  1.37k|        rule SourceSelector() -> NamedNode = iri()
  915|  1.37k|
  916|  1.37k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  1.37k|            p
  918|  1.37k|        }
  919|  1.37k|
  920|  1.37k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  1.37k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  1.37k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  1.37k|                if let Expression::Variable(v) = e {
  924|  1.37k|                    v
  925|  1.37k|                } else {
  926|  1.37k|                    let v = vo.unwrap_or_else(variable);
  927|  1.37k|                    projections.push((e, v.clone()));
  928|  1.37k|                    v
  929|  1.37k|                }
  930|  1.37k|            }).collect();
  931|  1.37k|            (clauses, projections)
  932|  1.37k|        }
  933|  1.37k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  1.37k|
  935|  1.37k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  1.37k|            e:BuiltInCall() { (e, None) } /
  937|  1.37k|            e:FunctionCall() { (e, None) } /
  938|  1.37k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  1.37k|            e:Var() { (e.into(), None) }
  940|  1.37k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  1.37k|
  942|  1.37k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  1.37k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  1.37k|        }
  945|  1.37k|
  946|  1.37k|        rule HavingCondition() -> Expression = Constraint()
  947|  1.37k|
  948|  1.37k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  1.37k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  1.37k|
  951|  1.37k|        rule OrderCondition() -> OrderExpression =
  952|  1.37k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  1.37k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  1.37k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  1.37k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  1.37k|
  957|  1.37k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  1.37k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  1.37k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  1.37k|
  961|  1.37k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  1.37k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  1.37k|        }
  964|  1.37k|
  965|  1.37k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  1.37k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  1.37k|        }
  968|  1.37k|
  969|  1.37k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  1.37k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  1.37k|            { None }
  972|  1.37k|
  973|  1.37k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  1.37k|
  975|  1.37k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  1.37k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  1.37k|
  978|  1.37k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  1.37k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  1.37k|        }
  981|  1.37k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  1.37k|
  983|  1.37k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  1.37k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  1.37k|        }
  986|  1.37k|
  987|  1.37k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  1.37k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  1.37k|        }
  990|  1.37k|
  991|  1.37k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  1.37k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  1.37k|        }
  994|  1.37k|
  995|  1.37k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  1.37k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  1.37k|            if from == to {
  998|  1.37k|                Vec::new() // identity case
  999|  1.37k|            } else {
 1000|  1.37k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  1.37k|                vec![copy_graph(from, to)]
 1002|  1.37k|            }
 1003|  1.37k|        }
 1004|  1.37k|
 1005|  1.37k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  1.37k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  1.37k|            if from == to {
 1008|  1.37k|                Vec::new() // identity case
 1009|  1.37k|            } else {
 1010|  1.37k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  1.37k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  1.37k|            }
 1013|  1.37k|        }
 1014|  1.37k|
 1015|  1.37k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  1.37k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  1.37k|            if from == to {
 1018|  1.37k|                Vec::new() // identity case
 1019|  1.37k|            } else {
 1020|  1.37k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  1.37k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  1.37k|            }
 1023|  1.37k|        }
 1024|  1.37k|
 1025|  1.37k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  1.37k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  1.37k|        }
 1028|  1.37k|
 1029|  1.37k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  1.37k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  1.37k|        }
 1032|  1.37k|
 1033|  1.37k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  1.37k|            let pattern = d.iter().map(|q| {
 1035|  1.37k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  1.37k|                match &q.graph_name {
 1037|  1.37k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  1.37k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  1.37k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  1.37k|                }
 1041|  1.37k|            }).reduce(new_join).unwrap_or_default();
 1042|  1.37k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  1.37k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  1.37k|                delete,
 1045|  1.37k|                insert: Vec::new(),
 1046|  1.37k|                using: None,
 1047|  1.37k|                pattern: Box::new(pattern)
 1048|  1.37k|            }])
 1049|  1.37k|        }
 1050|  1.37k|
 1051|  1.37k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  1.37k|            let (delete, insert) = c;
 1053|  1.37k|            let mut delete = delete.unwrap_or_default();
 1054|  1.37k|            let mut insert = insert.unwrap_or_default();
 1055|  1.37k|            #[allow(clippy::shadow_same)]
 1056|  1.37k|            let mut pattern = pattern;
 1057|  1.37k|
 1058|  1.37k|            let mut using = if u.is_empty() {
 1059|  1.37k|                None
 1060|  1.37k|            } else {
 1061|  1.37k|                let mut default = Vec::new();
 1062|  1.37k|                let mut named = Vec::new();
 1063|  1.37k|                for (d, n) in u {
 1064|  1.37k|                    if let Some(d) = d {
 1065|  1.37k|                        default.push(d)
 1066|  1.37k|                    }
 1067|  1.37k|                    if let Some(n) = n {
 1068|  1.37k|                        named.push(n)
 1069|  1.37k|                    }
 1070|  1.37k|                }
 1071|  1.37k|                Some(QueryDataset { default, named: Some(named) })
 1072|  1.37k|            };
 1073|  1.37k|
 1074|  1.37k|            if let Some(with) = with {
 1075|  1.37k|                // We inject WITH everywhere
 1076|  1.37k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  1.37k|                    GroundQuadPattern {
 1078|  1.37k|                        subject: q.subject,
 1079|  1.37k|                        predicate: q.predicate,
 1080|  1.37k|                        object: q.object,
 1081|  1.37k|                        graph_name: with.clone().into()
 1082|  1.37k|                    }
 1083|  1.37k|                } else {
 1084|  1.37k|                    q
 1085|  1.37k|                }).collect();
 1086|  1.37k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  1.37k|                    QuadPattern {
 1088|  1.37k|                        subject: q.subject,
 1089|  1.37k|                        predicate: q.predicate,
 1090|  1.37k|                        object: q.object,
 1091|  1.37k|                        graph_name: with.clone().into()
 1092|  1.37k|                    }
 1093|  1.37k|                } else {
 1094|  1.37k|                    q
 1095|  1.37k|                }).collect();
 1096|  1.37k|                if using.is_none() {
 1097|  1.37k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  1.37k|                }
 1099|  1.37k|            }
 1100|  1.37k|
 1101|  1.37k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  1.37k|                delete,
 1103|  1.37k|                insert,
 1104|  1.37k|                using,
 1105|  1.37k|                pattern: Box::new(pattern)
 1106|  1.37k|            }]
 1107|  1.37k|        }
 1108|  1.37k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  1.37k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  1.37k|            (Some(d), i)
 1111|  1.37k|        } / i:InsertClause() {
 1112|  1.37k|            (None, Some(i))
 1113|  1.37k|        }
 1114|  1.37k|        rule Modify_clear() = {
 1115|  1.37k|            state.used_bnodes.clear();
 1116|  1.37k|            state.currently_used_bnodes.clear();
 1117|  1.37k|        }
 1118|  1.37k|
 1119|  1.37k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  1.37k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  1.37k|        }
 1122|  1.37k|
 1123|  1.37k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  1.37k|
 1125|  1.37k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  1.37k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  1.37k|            (Some(i), None)
 1128|  1.37k|        }
 1129|  1.37k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  1.37k|            (None, Some(i))
 1131|  1.37k|        }
 1132|  1.37k|
 1133|  1.37k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  1.37k|            GraphName::DefaultGraph
 1135|  1.37k|        } / (i("GRAPH") _)? g:iri() {
 1136|  1.37k|            GraphName::NamedNode(g)
 1137|  1.37k|        }
 1138|  1.37k|
 1139|  1.37k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  1.37k|
 1141|  1.37k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  1.37k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  1.37k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  1.37k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  1.37k|
 1146|  1.37k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  1.37k|
 1148|  1.37k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  1.37k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  1.37k|        }
 1151|  1.37k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  1.37k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  1.37k|        }
 1154|  1.37k|
 1155|  1.37k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  1.37k|            q.into_iter().flatten().collect()
 1157|  1.37k|        }
 1158|  1.37k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  1.37k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  1.37k|        } //TODO: return iter?
 1161|  1.37k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  1.37k|
 1163|  1.37k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  1.37k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  1.37k|        }
 1166|  1.37k|
 1167|  1.37k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  1.37k|            ts.into_iter().flatten().collect()
 1169|  1.37k|        }
 1170|  1.37k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  1.37k|
 1172|  1.37k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  1.37k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  1.37k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  1.37k|        rule GroupGraphPattern_clear() = {
 1176|  1.37k|             // We deal with blank nodes aliases rule
 1177|  1.37k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  1.37k|            state.currently_used_bnodes.clear();
 1179|  1.37k|        }
 1180|  1.37k|
 1181|  1.37k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  1.37k|            let mut filter: Option<Expression> = None;
 1183|  1.37k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  1.37k|            for e in b.into_iter().flatten() {
 1185|  1.37k|                match e {
 1186|  1.37k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  1.37k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  1.37k|                    }
 1189|  1.37k|                    #[cfg(feature = "sep-0006")]
 1190|  1.37k|                    PartialGraphPattern::Lateral(p) => {
 1191|  1.37k|                        let mut defined_variables = HashSet::default();
 1192|  1.37k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  1.37k|                        let mut contains = false;
 1194|  1.37k|                        g.on_in_scope_variable(|v| {
 1195|  1.37k|                            if defined_variables.contains(v) {
 1196|  1.37k|                                contains = true;
 1197|  1.37k|                            }
 1198|  1.37k|                        });
 1199|  1.37k|                        if contains {
 1200|  1.37k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  1.37k|                        }
 1202|  1.37k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  1.37k|                    }
 1204|  1.37k|                    PartialGraphPattern::Minus(p) => {
 1205|  1.37k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  1.37k|                    }
 1207|  1.37k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  1.37k|                        let mut contains = false;
 1209|  1.37k|                        g.on_in_scope_variable(|v| {
 1210|  1.37k|                            if *v == variable {
 1211|  1.37k|                                contains = true;
 1212|  1.37k|                            }
 1213|  1.37k|                        });
 1214|  1.37k|                        if contains {
 1215|  1.37k|                            return Err("BIND is overriding an existing variable")
 1216|  1.37k|                        }
 1217|  1.37k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  1.37k|                    }
 1219|  1.37k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  1.37k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  1.37k|                    } else {
 1222|  1.37k|                        expr
 1223|  1.37k|                    }),
 1224|  1.37k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  1.37k|                }
 1226|  1.37k|            }
 1227|  1.37k|
 1228|  1.37k|            Ok(if let Some(expr) = filter {
 1229|  1.37k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  1.37k|            } else {
 1231|  1.37k|                g
 1232|  1.37k|            })
 1233|  1.37k|        }
 1234|  1.37k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  1.37k|            let mut result = vec![a];
 1236|  1.37k|            if let Some(v) = b {
 1237|  1.37k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  1.37k|            }
 1239|  1.37k|            result
 1240|  1.37k|        }
 1241|  1.37k|
 1242|  1.37k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  1.37k|            hs.into_iter().flatten().collect()
 1244|  1.37k|        }
 1245|  1.37k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  1.37k|
 1247|  1.37k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  1.37k|
 1249|  1.37k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  1.37k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  1.37k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  1.37k|            } else {
 1253|  1.37k|               PartialGraphPattern::Optional(p, None)
 1254|  1.37k|            }
 1255|  1.37k|        }
 1256|  1.37k|
 1257|  1.37k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  1.37k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  1.37k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  1.37k|        }
 1261|  1.37k|
 1262|  1.37k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  1.37k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  1.37k|        }
 1265|  1.37k|
 1266|  1.37k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  1.37k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  1.37k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  1.37k|
 1270|  1.37k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  1.37k|            PartialGraphPattern::Bind(e, v)
 1272|  1.37k|        }
 1273|  1.37k|
 1274|  1.37k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  1.37k|
 1276|  1.37k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  1.37k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  1.37k|        }
 1279|  1.37k|
 1280|  1.37k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  1.37k|            (vec![var], d)
 1282|  1.37k|        }
 1283|  1.37k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  1.37k|
 1285|  1.37k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  1.37k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  1.37k|                Ok((vars, vals))
 1288|  1.37k|            } else {
 1289|  1.37k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  1.37k|            }
 1291|  1.37k|        }
 1292|  1.37k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  1.37k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  1.37k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  1.37k|
 1296|  1.37k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  1.37k|            t:QuotedTripleData() {?
 1298|  1.37k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  1.37k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  1.37k|            } /
 1301|  1.37k|            i:iri() { Some(i.into()) } /
 1302|  1.37k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  1.37k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  1.37k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  1.37k|            i("UNDEF") { None }
 1306|  1.37k|
 1307|  1.37k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  1.37k|            PartialGraphPattern::Minus(p)
 1309|  1.37k|        }
 1310|  1.37k|
 1311|  1.37k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  1.37k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  1.37k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  1.37k|            }).map(PartialGraphPattern::Other)
 1315|  1.37k|        }
 1316|  1.37k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  1.37k|
 1318|  1.37k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  1.37k|            PartialGraphPattern::Filter(c)
 1320|  1.37k|        }
 1321|  1.37k|
 1322|  1.37k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  1.37k|
 1324|  1.37k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  1.37k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  1.37k|        }
 1327|  1.37k|
 1328|  1.37k|        rule ArgList() -> Vec<Expression> =
 1329|  1.37k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  1.37k|            NIL() { Vec::new() }
 1331|  1.37k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  1.37k|
 1333|  1.37k|        rule ExpressionList() -> Vec<Expression> =
 1334|  1.37k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  1.37k|            NIL() { Vec::new() }
 1336|  1.37k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  1.37k|
 1338|  1.37k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  1.37k|
 1340|  1.37k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  1.37k|            p.into_iter().flatten().collect()
 1342|  1.37k|        }
 1343|  1.37k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  1.37k|
 1345|  1.37k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  1.37k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  1.37k|                let mut patterns = po.patterns;
 1348|  1.37k|                for (p, os) in po.focus {
 1349|  1.37k|                    for o in os {
 1350|  1.37k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  1.37k|                    }
 1352|  1.37k|                }
 1353|  1.37k|                Ok(patterns)
 1354|  1.37k|            } /
 1355|  1.37k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  1.37k|                let mut patterns = s.patterns;
 1357|  1.37k|                patterns.extend(po.patterns);
 1358|  1.37k|                for (p, os) in po.focus {
 1359|  1.37k|                    for o in os {
 1360|  1.37k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  1.37k|                    }
 1362|  1.37k|                }
 1363|  1.37k|                Ok(patterns)
 1364|  1.37k|            }
 1365|  1.37k|
 1366|  1.37k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  1.37k|            PropertyListNotEmpty() /
 1368|  1.37k|            { FocusedTriplePattern::default() }
 1369|  1.37k|
 1370|  1.37k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  1.37k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  1.37k|                a.focus.push(b.focus);
 1373|  1.37k|                a.patterns.extend(b.patterns);
 1374|  1.37k|                a
 1375|  1.37k|            })
 1376|  1.37k|        }
 1377|  1.37k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  1.37k|            FocusedTriplePattern {
 1379|  1.37k|                focus: (p, o.focus),
 1380|  1.37k|                patterns: o.patterns
 1381|  1.37k|            }
 1382|  1.37k|        }
 1383|  1.37k|
 1384|  1.37k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  1.37k|
 1386|  1.37k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  1.37k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  1.37k|                a.focus.push(b.focus);
 1389|  1.37k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  1.37k|                a
 1391|  1.37k|            })
 1392|  1.37k|        }
 1393|  1.37k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  1.37k|
 1395|  1.37k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  1.37k|            if let Some(a) = a {
 1397|  1.37k|                let mut patterns = g.patterns;
 1398|  1.37k|                patterns.extend(a.patterns);
 1399|  1.37k|                FocusedTriplePattern {
 1400|  1.37k|                    focus: AnnotatedTerm {
 1401|  1.37k|                        term: g.focus,
 1402|  1.37k|                        annotations: a.focus
 1403|  1.37k|                    },
 1404|  1.37k|                    patterns
 1405|  1.37k|                }
 1406|  1.37k|            } else {
 1407|  1.37k|                FocusedTriplePattern {
 1408|  1.37k|                    focus: AnnotatedTerm {
 1409|  1.37k|                        term: g.focus,
 1410|  1.37k|                        annotations: Vec::new()
 1411|  1.37k|                    },
 1412|  1.37k|                    patterns: g.patterns
 1413|  1.37k|                }
 1414|  1.37k|            }
 1415|  1.37k|        }
 1416|  1.37k|
 1417|  1.37k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  1.37k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  1.37k|                let mut patterns = po.patterns;
 1420|  1.37k|                for (p, os) in po.focus {
 1421|  1.37k|                    for o in os {
 1422|  1.37k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  1.37k|                    }
 1424|  1.37k|                }
 1425|  1.37k|                Ok(patterns)
 1426|  1.37k|            } /
 1427|  1.37k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  1.37k|                let mut patterns = s.patterns;
 1429|  1.37k|                patterns.extend(po.patterns);
 1430|  1.37k|                for (p, os) in po.focus {
 1431|  1.37k|                    for o in os {
 1432|  1.37k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  1.37k|                    }
 1434|  1.37k|                }
 1435|  1.37k|                Ok(patterns)
 1436|  1.37k|            }
 1437|  1.37k|
 1438|  1.37k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  1.37k|            PropertyListPathNotEmpty() /
 1440|  1.37k|            { FocusedTripleOrPathPattern::default() }
 1441|  1.37k|
 1442|  1.37k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  1.37k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  1.37k|                    focus: vec![(hp, ho.focus)],
 1445|  1.37k|                    patterns: ho.patterns
 1446|  1.37k|                }, |mut a, b| {
 1447|  1.37k|                    a.focus.push(b.focus);
 1448|  1.37k|                    a.patterns.extend(b.patterns);
 1449|  1.37k|                    a
 1450|  1.37k|                })
 1451|  1.37k|        }
 1452|  1.37k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  1.37k|            c
 1454|  1.37k|        }
 1455|  1.37k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  1.37k|            FocusedTripleOrPathPattern {
 1457|  1.37k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  1.37k|                patterns: o.patterns
 1459|  1.37k|            }
 1460|  1.37k|        }
 1461|  1.37k|
 1462|  1.37k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  1.37k|            p.into()
 1464|  1.37k|        }
 1465|  1.37k|
 1466|  1.37k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  1.37k|            v.into()
 1468|  1.37k|        }
 1469|  1.37k|
 1470|  1.37k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  1.37k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  1.37k|                a.focus.push(b.focus);
 1473|  1.37k|                a.patterns.extend(b.patterns);
 1474|  1.37k|                a
 1475|  1.37k|            })
 1476|  1.37k|        }
 1477|  1.37k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  1.37k|
 1479|  1.37k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  1.37k|             if let Some(a) = a {
 1481|  1.37k|                let mut patterns = g.patterns;
 1482|  1.37k|                patterns.extend(a.patterns);
 1483|  1.37k|                FocusedTripleOrPathPattern {
 1484|  1.37k|                    focus: AnnotatedTermPath {
 1485|  1.37k|                        term: g.focus,
 1486|  1.37k|                        annotations: a.focus
 1487|  1.37k|                    },
 1488|  1.37k|                    patterns
 1489|  1.37k|                }
 1490|  1.37k|            } else {
 1491|  1.37k|                FocusedTripleOrPathPattern {
 1492|  1.37k|                    focus: AnnotatedTermPath {
 1493|  1.37k|                        term: g.focus,
 1494|  1.37k|                        annotations: Vec::new()
 1495|  1.37k|                    },
 1496|  1.37k|                    patterns: g.patterns
 1497|  1.37k|                }
 1498|  1.37k|            }
 1499|  1.37k|        }
 1500|  1.37k|
 1501|  1.37k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  1.37k|
 1503|  1.37k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  1.37k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  1.37k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  1.37k|            })
 1507|  1.37k|        }
 1508|  1.37k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  1.37k|
 1510|  1.37k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  1.37k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  1.37k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  1.37k|            })
 1514|  1.37k|        }
 1515|  1.37k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  1.37k|
 1517|  1.37k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  1.37k|            match o {
 1519|  1.37k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  1.37k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  1.37k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  1.37k|                Some(_) => unreachable!(),
 1523|  1.37k|                None => p
 1524|  1.37k|            }
 1525|  1.37k|        }
 1526|  1.37k|        rule PathElt_op() -> char =
 1527|  1.37k|            "*" { '*' } /
 1528|  1.37k|            "+" { '+' } /
 1529|  1.37k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  1.37k|
 1531|  1.37k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  1.37k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  1.37k|            PathElt()
 1534|  1.37k|
 1535|  1.37k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  1.37k|            v:iri() { v.into() } /
 1537|  1.37k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  1.37k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  1.37k|            "(" _ p:Path() _ ")" { p }
 1540|  1.37k|
 1541|  1.37k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  1.37k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  1.37k|                let mut direct = Vec::new();
 1544|  1.37k|                let mut inverse = Vec::new();
 1545|  1.37k|                for e in p {
 1546|  1.37k|                    match e {
 1547|  1.37k|                        Either::Left(a) => direct.push(a),
 1548|  1.37k|                        Either::Right(b) => inverse.push(b)
 1549|  1.37k|                    }
 1550|  1.37k|                }
 1551|  1.37k|                if inverse.is_empty() {
 1552|  1.37k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  1.37k|                } else if direct.is_empty() {
 1554|  1.37k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  1.37k|                } else {
 1556|  1.37k|                    PropertyPathExpression::Alternative(
 1557|  1.37k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  1.37k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  1.37k|                    )
 1560|  1.37k|                }
 1561|  1.37k|            } /
 1562|  1.37k|            p:PathOneInPropertySet() {
 1563|  1.37k|                match p {
 1564|  1.37k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  1.37k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  1.37k|                }
 1567|  1.37k|            }
 1568|  1.37k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  1.37k|
 1570|  1.37k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  1.37k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  1.37k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  1.37k|            v:iri() { Either::Left(v) } /
 1574|  1.37k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  1.37k|
 1576|  1.37k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  1.37k|
 1578|  1.37k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  1.37k|            let mut patterns = po.patterns;
 1580|  1.37k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  1.37k|            for (p, os) in po.focus {
 1582|  1.37k|                for o in os {
 1583|  1.37k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  1.37k|                }
 1585|  1.37k|            }
 1586|  1.37k|            Ok(FocusedTriplePattern {
 1587|  1.37k|                focus: bnode,
 1588|  1.37k|                patterns
 1589|  1.37k|            })
 1590|  1.37k|        }
 1591|  1.37k|
 1592|  1.37k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  1.37k|
 1594|  1.37k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  1.37k|            let mut patterns = po.patterns;
 1596|  1.37k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  1.37k|            for (p, os) in po.focus {
 1598|  1.37k|                for o in os {
 1599|  1.37k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  1.37k|                }
 1601|  1.37k|            }
 1602|  1.37k|            Ok(FocusedTripleOrPathPattern {
 1603|  1.37k|                focus: bnode,
 1604|  1.37k|                patterns
 1605|  1.37k|            })
 1606|  1.37k|        }
 1607|  1.37k|
 1608|  1.37k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  1.37k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  1.37k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  1.37k|            for objWithPatterns in o.into_iter().rev() {
 1612|  1.37k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  1.37k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  1.37k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  1.37k|                current_list_node = new_blank_node;
 1616|  1.37k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  1.37k|            }
 1618|  1.37k|            FocusedTriplePattern {
 1619|  1.37k|                focus: current_list_node,
 1620|  1.37k|                patterns
 1621|  1.37k|            }
 1622|  1.37k|        }
 1623|  1.37k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  1.37k|
 1625|  1.37k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  1.37k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  1.37k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  1.37k|            for objWithPatterns in o.into_iter().rev() {
 1629|  1.37k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  1.37k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  1.37k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  1.37k|                current_list_node = new_blank_node;
 1633|  1.37k|                patterns.extend(objWithPatterns.patterns);
 1634|  1.37k|            }
 1635|  1.37k|            FocusedTripleOrPathPattern {
 1636|  1.37k|                focus: current_list_node,
 1637|  1.37k|                patterns
 1638|  1.37k|            }
 1639|  1.37k|        }
 1640|  1.37k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  1.37k|
 1642|  1.37k|
 1643|  1.37k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  1.37k|
 1645|  1.37k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  1.37k|
 1647|  1.37k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  1.37k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  1.37k|            TriplesNode()
 1650|  1.37k|
 1651|  1.37k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  1.37k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  1.37k|            TriplesNodePath()
 1654|  1.37k|
 1655|  1.37k|        rule VarOrTerm() -> TermPattern =
 1656|  1.37k|            v:Var() { v.into() } /
 1657|  1.37k|            t:QuotedTriple() {?
 1658|  1.37k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  1.37k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  1.37k|            } /
 1661|  1.37k|            t:GraphTerm() { t.into() }
 1662|  1.37k|
 1663|  1.37k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  1.37k|            Ok(TriplePattern {
 1665|  1.37k|                subject: s,
 1666|  1.37k|                predicate: p,
 1667|  1.37k|                object: o
 1668|  1.37k|            })
 1669|  1.37k|        }
 1670|  1.37k|
 1671|  1.37k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  1.37k|            Ok(GroundTriple {
 1673|  1.37k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  1.37k|                predicate: p,
 1675|  1.37k|                object: o
 1676|  1.37k|            })
 1677|  1.37k|        }
 1678|  1.37k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  1.37k|
 1680|  1.37k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  1.37k|            l:RDFLiteral() { l.into() } /
 1682|  1.37k|            l:NumericLiteral() { l.into() } /
 1683|  1.37k|            l:BooleanLiteral() { l.into() } /
 1684|  1.37k|            t:QuotedTripleData() {?
 1685|  1.37k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  1.37k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  1.37k|            }
 1688|  1.37k|
 1689|  1.37k|        rule VarOrIri() -> NamedNodePattern =
 1690|  1.37k|            v:Var() { v.into() } /
 1691|  1.37k|            i:iri() { i.into() }
 1692|  1.37k|
 1693|  1.37k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  1.37k|
 1695|  1.37k|        rule GraphTerm() -> Term =
 1696|  1.37k|            i:iri() { i.into() } /
 1697|  1.37k|            l:RDFLiteral() { l.into() } /
 1698|  1.37k|            l:NumericLiteral() { l.into() } /
 1699|  1.37k|            l:BooleanLiteral() { l.into() } /
 1700|  1.37k|            b:BlankNode() { b.into() } /
 1701|  1.37k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  1.37k|
 1703|  1.37k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  1.37k|
 1705|  1.37k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  1.37k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  1.37k|        }
 1708|  1.37k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  1.37k|
 1710|  1.37k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  1.37k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  1.37k|        }
 1713|  1.37k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  1.37k|
 1715|  1.37k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  1.37k|
 1717|  1.37k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  1.37k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  1.37k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  1.37k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  1.37k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  1.37k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  1.37k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  1.37k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  1.37k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  1.37k|            Some(_) => unreachable!(),
 1727|  1.37k|            None => a
 1728|  1.37k|        } }
 1729|  1.37k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  1.37k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  1.37k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  1.37k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  1.37k|
 1734|  1.37k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  1.37k|
 1736|  1.37k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  1.37k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  1.37k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  1.37k|            Some(_) => unreachable!(),
 1740|  1.37k|            None => a,
 1741|  1.37k|        } }
 1742|  1.37k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  1.37k|            (s, e)
 1744|  1.37k|        }
 1745|  1.37k|
 1746|  1.37k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  1.37k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  1.37k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  1.37k|            Some(_) => unreachable!(),
 1750|  1.37k|            None => a
 1751|  1.37k|        } }
 1752|  1.37k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  1.37k|            (s, e)
 1754|  1.37k|        }
 1755|  1.37k|
 1756|  1.37k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  1.37k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  1.37k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  1.37k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  1.37k|            Some(_) => unreachable!(),
 1761|  1.37k|            None => e,
 1762|  1.37k|        } }
 1763|  1.37k|
 1764|  1.37k|        rule PrimaryExpression() -> Expression =
 1765|  1.37k|            BrackettedExpression()  /
 1766|  1.37k|            ExprQuotedTriple() /
 1767|  1.37k|            iriOrFunction() /
 1768|  1.37k|            v:Var() { v.into() } /
 1769|  1.37k|            l:RDFLiteral() { l.into() } /
 1770|  1.37k|            l:NumericLiteral() { l.into() } /
 1771|  1.37k|            l:BooleanLiteral() { l.into() } /
 1772|  1.37k|            BuiltInCall()
 1773|  1.37k|
 1774|  1.37k|        rule ExprVarOrTerm() -> Expression =
 1775|  1.37k|            ExprQuotedTriple() /
 1776|  1.37k|            i:iri() { i.into() } /
 1777|  1.37k|            l:RDFLiteral() { l.into() } /
 1778|  1.37k|            l:NumericLiteral() { l.into() } /
 1779|  1.37k|            l:BooleanLiteral() { l.into() } /
 1780|  1.37k|            v:Var() { v.into() }
 1781|  1.37k|
 1782|  1.37k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  1.37k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  1.37k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  1.37k|        }
 1786|  1.37k|
 1787|  1.37k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  1.37k|
 1789|  1.37k|        rule BuiltInCall() -> Expression =
 1790|  1.37k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  1.37k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  1.37k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  1.37k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  1.37k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  1.37k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  1.37k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  1.37k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  1.37k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  1.37k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  1.37k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  1.37k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  1.37k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  1.37k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  1.37k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  1.37k|            SubstringExpression() /
 1806|  1.37k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  1.37k|            StrReplaceExpression() /
 1808|  1.37k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  1.37k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  1.37k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  1.37k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  1.37k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  1.37k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  1.37k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  1.37k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  1.37k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  1.37k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  1.37k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  1.37k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  1.37k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  1.37k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  1.37k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  1.37k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  1.37k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  1.37k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  1.37k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  1.37k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  1.37k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  1.37k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  1.37k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  1.37k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  1.37k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  1.37k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  1.37k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  1.37k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  1.37k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  1.37k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  1.37k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  1.37k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  1.37k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  1.37k|            RegexExpression() /
 1842|  1.37k|            ExistsFunc() /
 1843|  1.37k|            NotExistsFunc() /
 1844|  1.37k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  1.37k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  1.37k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  1.37k|            } /
 1848|  1.37k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  1.37k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  1.37k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  1.37k|            } /
 1852|  1.37k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  1.37k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  1.37k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  1.37k|            } /
 1856|  1.37k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  1.37k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  1.37k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  1.37k|            } /
 1860|  1.37k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  1.37k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  1.37k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  1.37k|            } /
 1864|  1.37k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  1.37k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  1.37k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  1.37k|            }
 1868|  1.37k|
 1869|  1.37k|        rule RegexExpression() -> Expression =
 1870|  1.37k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  1.37k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  1.37k|
 1873|  1.37k|
 1874|  1.37k|        rule SubstringExpression() -> Expression =
 1875|  1.37k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  1.37k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  1.37k|
 1878|  1.37k|
 1879|  1.37k|        rule StrReplaceExpression() -> Expression =
 1880|  1.37k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  1.37k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  1.37k|
 1883|  1.37k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  1.37k|
 1885|  1.37k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  1.37k|
 1887|  1.37k|        rule Aggregate() -> AggregateExpression =
 1888|  1.37k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  1.37k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  1.37k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  1.37k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  1.37k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  1.37k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  1.37k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  1.37k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  1.37k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  1.37k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  1.37k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  1.37k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  1.37k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  1.37k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  1.37k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  1.37k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  1.37k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  1.37k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  1.37k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  1.37k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  1.37k|
 1909|  1.37k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  1.37k|            match a {
 1911|  1.37k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  1.37k|                None => i.into()
 1913|  1.37k|            }
 1914|  1.37k|        }
 1915|  1.37k|
 1916|  1.37k|        rule RDFLiteral() -> Literal =
 1917|  1.37k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  1.37k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  1.37k|            value:String() { Literal::new_simple_literal(value) }
 1920|  1.37k|
 1921|  1.37k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  1.37k|
 1923|  1.37k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  1.37k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  1.37k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  1.37k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  1.37k|
 1928|  1.37k|        rule NumericLiteralPositive() -> Literal =
 1929|  1.37k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  1.37k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  1.37k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  1.37k|
 1933|  1.37k|
 1934|  1.37k|        rule NumericLiteralNegative() -> Literal =
 1935|  1.37k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  1.37k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  1.37k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  1.37k|
 1939|  1.37k|        rule BooleanLiteral() -> Literal =
 1940|  1.37k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  1.37k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  1.37k|
 1943|  1.37k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  1.37k|
 1945|  1.37k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  1.37k|            NamedNode::from(i)
 1947|  1.37k|        }
 1948|  1.37k|
 1949|  1.37k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  1.37k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  1.37k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  1.37k|            } else {
 1953|  1.37k|                Err("Prefix not found")
 1954|  1.37k|            } }
 1955|  1.37k|
 1956|  1.37k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  1.37k|            let node = BlankNode::new_unchecked(id);
 1958|  1.37k|            if state.used_bnodes.contains(&node) {
 1959|  1.37k|                Err("Already used blank node id")
 1960|  1.37k|            } else {
 1961|  1.37k|                state.currently_used_bnodes.insert(node.clone());
 1962|  1.37k|                Ok(node)
 1963|  1.37k|            }
 1964|  1.37k|        } / ANON() { BlankNode::default() }
 1965|  1.37k|
 1966|  1.37k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  1.37k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  1.37k|        }
 1969|  1.37k|
 1970|  1.37k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  1.37k|            ns
 1972|  1.37k|        }
 1973|  1.37k|
 1974|  1.37k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  1.37k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  1.37k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  1.37k|                iri.push_str(base);
 1978|  1.37k|                for chunk in local.split('\\') { // We remove \
 1979|  1.37k|                    iri.push_str(chunk);
 1980|  1.37k|                }
 1981|  1.37k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  1.37k|            } else {
 1983|  1.37k|                Err("Prefix not found")
 1984|  1.37k|            }
 1985|  1.37k|        }
 1986|  1.37k|
 1987|  1.37k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  1.37k|            b
 1989|  1.37k|        }
 1990|  1.37k|
 1991|  1.37k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  1.37k|
 1993|  1.37k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  1.37k|
 1995|  1.37k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  1.37k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  1.37k|        }
 1998|  1.37k|
 1999|  1.37k|        rule INTEGER() = ['0'..='9']+
 2000|  1.37k|
 2001|  1.37k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  1.37k|
 2003|  1.37k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  1.37k|
 2005|  1.37k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  1.37k|
 2007|  1.37k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  1.37k|
 2009|  1.37k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  1.37k|
 2011|  1.37k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  1.37k|
 2013|  1.37k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  1.37k|
 2015|  1.37k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  1.37k|
 2017|  1.37k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  1.37k|
 2019|  1.37k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  1.37k|             unescape_string(l)
 2021|  1.37k|        }
 2022|  1.37k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  1.37k|
 2024|  1.37k|
 2025|  1.37k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  1.37k|             unescape_string(l)
 2027|  1.37k|        }
 2028|  1.37k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  1.37k|
 2030|  1.37k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  1.37k|             unescape_string(l)
 2032|  1.37k|        }
 2033|  1.37k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  1.37k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  1.37k|
 2036|  1.37k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  1.37k|             unescape_string(l)
 2038|  1.37k|        }
 2039|  1.37k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  1.37k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  1.37k|
 2042|  1.37k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  1.37k|
 2044|  1.37k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  1.37k|
 2046|  1.37k|        rule NIL() = "(" WS()* ")"
 2047|  1.37k|
 2048|  1.37k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  1.37k|
 2050|  1.37k|        rule ANON() = "[" WS()* "]"
 2051|  1.37k|
 2052|  1.37k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  1.37k|
 2054|  1.37k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  1.37k|
 2056|  1.37k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  1.37k|
 2058|  1.37k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  1.37k|
 2060|  1.37k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  1.37k|
 2062|  1.37k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  1.37k|
 2064|  1.37k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  1.37k|
 2066|  1.37k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  1.37k|
 2068|  1.37k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  1.37k|
 2070|  1.37k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  1.37k|
 2072|  1.37k|        //space
 2073|  1.37k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  1.37k|
 2075|  1.37k|        //comment
 2076|  1.37k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  1.37k|
 2078|  1.37k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  1.37k|            if input.eq_ignore_ascii_case(literal) {
 2080|  1.37k|                Ok(())
 2081|  1.37k|            } else {
 2082|  1.37k|                Err(literal)
 2083|  1.37k|            }
 2084|  1.37k|        }
 2085|  1.37k|    }
 2086|  1.37k|}
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_InlineDataFull_value0B7_:
 1294|  3.84k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_VAR10B7_:
 1991|  36.7k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_GroupGraphPatternSub00B9_:
 1194|    145|                        g.on_in_scope_variable(|v| {
 1195|    145|                            if defined_variables.contains(v) {
 1196|      0|                                contains = true;
 1197|    145|                            }
 1198|    145|                        });
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_PathNegatedPropertySet0B7_:
 1542|    974|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|    974|                let mut direct = Vec::new();
 1544|    974|                let mut inverse = Vec::new();
 1545|  6.68k|                for e in p {
 1546|  5.71k|                    match e {
 1547|  1.18k|                        Either::Left(a) => direct.push(a),
 1548|  4.52k|                        Either::Right(b) => inverse.push(b)
 1549|       |                    }
 1550|       |                }
 1551|    974|                if inverse.is_empty() {
 1552|     77|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|    897|                } else if direct.is_empty() {
 1554|    559|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|       |                } else {
 1556|    338|                    PropertyPathExpression::Alternative(
 1557|    338|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|    338|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|    338|                    )
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_DataBlockValues2_0B7_:
 1304|     24|            l:BooleanLiteral() { Some(l.into()) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_GroundQuadData0B7_:
  778|     59|parser! {
  779|     59|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|     59|    grammar parser(state: &mut ParserState) for str {
  781|     59|        pub rule QueryUnit() -> Query = Query()
  782|     59|
  783|     59|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|     59|            q
  785|     59|        }
  786|     59|
  787|     59|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|     59|
  789|     59|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|     59|
  791|     59|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|     59|            state.base_iri = Some(i)
  793|     59|        }
  794|     59|
  795|     59|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|     59|            state.namespaces.insert(ns.into(), i.into_inner());
  797|     59|        }
  798|     59|
  799|     59|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|     59|            Ok(Query::Select {
  801|     59|                dataset: d,
  802|     59|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|     59|                base_iri: state.base_iri.clone()
  804|     59|            })
  805|     59|        }
  806|     59|
  807|     59|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|     59|            build_select(s, w, g, h, o, l, v, state)
  809|     59|        }
  810|     59|
  811|     59|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|     59|            Selection {
  813|     59|                option: o,
  814|     59|                variables: v
  815|     59|            }
  816|     59|        }
  817|     59|        rule Selection_init() = {
  818|     59|            state.aggregates.push(Vec::new())
  819|     59|        }
  820|     59|        rule SelectClause_option() -> SelectionOption =
  821|     59|            i("DISTINCT") { SelectionOption::Distinct } /
  822|     59|            i("REDUCED") { SelectionOption::Reduced } /
  823|     59|            { SelectionOption::Default }
  824|     59|        rule SelectClause_variables() -> SelectionVariables =
  825|     59|            "*" { SelectionVariables::Star } /
  826|     59|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|     59|        rule SelectClause_member() -> SelectionMember =
  828|     59|            v:Var() _ { SelectionMember::Variable(v) } /
  829|     59|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|     59|
  831|     59|        rule ConstructQuery() -> Query =
  832|     59|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|     59|                Ok(Query::Construct {
  834|     59|                    template: c,
  835|     59|                    dataset: d,
  836|     59|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|     59|                    base_iri: state.base_iri.clone()
  838|     59|                })
  839|     59|            } /
  840|     59|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|     59|                Ok(Query::Construct {
  842|     59|                    template: c.clone(),
  843|     59|                    dataset: d,
  844|     59|                    pattern: build_select(
  845|     59|                        Selection::no_op(),
  846|     59|                        GraphPattern::Bgp { patterns: c },
  847|     59|                        g, h, o, l, v, state
  848|     59|                    )?,
  849|     59|                    base_iri: state.base_iri.clone()
  850|     59|                })
  851|     59|            }
  852|     59|
  853|     59|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|     59|
  855|     59|        rule DescribeQuery() -> Query =
  856|     59|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|     59|                Ok(Query::Describe {
  858|     59|                    dataset: d,
  859|     59|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|     59|                    base_iri: state.base_iri.clone()
  861|     59|                })
  862|     59|            } /
  863|     59|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|     59|                Ok(Query::Describe {
  865|     59|                    dataset: d,
  866|     59|                    pattern: build_select(Selection {
  867|     59|                        option: SelectionOption::Default,
  868|     59|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|     59|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|     59|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|     59|                        }).collect())
  872|     59|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|     59|                    base_iri: state.base_iri.clone()
  874|     59|                })
  875|     59|            }
  876|     59|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|     59|
  878|     59|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|     59|            Ok(Query::Ask {
  880|     59|                dataset: d,
  881|     59|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|     59|                base_iri: state.base_iri.clone()
  883|     59|            })
  884|     59|        }
  885|     59|
  886|     59|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|     59|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|     59|            if d.is_empty() {
  889|     59|                return None;
  890|     59|            }
  891|     59|            let mut default = Vec::new();
  892|     59|            let mut named = Vec::new();
  893|     59|            for (d, n) in d {
  894|     59|                if let Some(d) = d {
  895|     59|                    default.push(d);
  896|     59|                }
  897|     59|                if let Some(n) = n {
  898|     59|                    named.push(n);
  899|     59|                }
  900|     59|            }
  901|     59|            Some(QueryDataset {
  902|     59|                default, named: Some(named)
  903|     59|            })
  904|     59|        }
  905|     59|
  906|     59|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|     59|            (Some(s), None)
  908|     59|        }
  909|     59|
  910|     59|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|     59|            (None, Some(s))
  912|     59|        }
  913|     59|
  914|     59|        rule SourceSelector() -> NamedNode = iri()
  915|     59|
  916|     59|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|     59|            p
  918|     59|        }
  919|     59|
  920|     59|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|     59|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|     59|            let clauses = c.into_iter().map(|(e, vo)| {
  923|     59|                if let Expression::Variable(v) = e {
  924|     59|                    v
  925|     59|                } else {
  926|     59|                    let v = vo.unwrap_or_else(variable);
  927|     59|                    projections.push((e, v.clone()));
  928|     59|                    v
  929|     59|                }
  930|     59|            }).collect();
  931|     59|            (clauses, projections)
  932|     59|        }
  933|     59|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|     59|
  935|     59|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|     59|            e:BuiltInCall() { (e, None) } /
  937|     59|            e:FunctionCall() { (e, None) } /
  938|     59|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|     59|            e:Var() { (e.into(), None) }
  940|     59|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|     59|
  942|     59|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|     59|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|     59|        }
  945|     59|
  946|     59|        rule HavingCondition() -> Expression = Constraint()
  947|     59|
  948|     59|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|     59|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|     59|
  951|     59|        rule OrderCondition() -> OrderExpression =
  952|     59|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|     59|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|     59|            e: Constraint() { OrderExpression::Asc(e) } /
  955|     59|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|     59|
  957|     59|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|     59|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|     59|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|     59|
  961|     59|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|     59|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|     59|        }
  964|     59|
  965|     59|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|     59|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|     59|        }
  968|     59|
  969|     59|        rule ValuesClause() -> Option<GraphPattern> =
  970|     59|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|     59|            { None }
  972|     59|
  973|     59|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|     59|
  975|     59|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|     59|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|     59|
  978|     59|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|     59|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|     59|        }
  981|     59|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|     59|
  983|     59|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|     59|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|     59|        }
  986|     59|
  987|     59|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|     59|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|     59|        }
  990|     59|
  991|     59|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|     59|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|     59|        }
  994|     59|
  995|     59|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|     59|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|     59|            if from == to {
  998|     59|                Vec::new() // identity case
  999|     59|            } else {
 1000|     59|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|     59|                vec![copy_graph(from, to)]
 1002|     59|            }
 1003|     59|        }
 1004|     59|
 1005|     59|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|     59|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|     59|            if from == to {
 1008|     59|                Vec::new() // identity case
 1009|     59|            } else {
 1010|     59|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|     59|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|     59|            }
 1013|     59|        }
 1014|     59|
 1015|     59|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|     59|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|     59|            if from == to {
 1018|     59|                Vec::new() // identity case
 1019|     59|            } else {
 1020|     59|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|     59|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|     59|            }
 1023|     59|        }
 1024|     59|
 1025|     59|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|     59|            vec![GraphUpdateOperation::InsertData { data }]
 1027|     59|        }
 1028|     59|
 1029|     59|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|     59|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|     59|        }
 1032|     59|
 1033|     59|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|     59|            let pattern = d.iter().map(|q| {
 1035|     59|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|     59|                match &q.graph_name {
 1037|     59|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|     59|                    GraphNamePattern::DefaultGraph => bgp,
 1039|     59|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|     59|                }
 1041|     59|            }).reduce(new_join).unwrap_or_default();
 1042|     59|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|     59|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|     59|                delete,
 1045|     59|                insert: Vec::new(),
 1046|     59|                using: None,
 1047|     59|                pattern: Box::new(pattern)
 1048|     59|            }])
 1049|     59|        }
 1050|     59|
 1051|     59|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|     59|            let (delete, insert) = c;
 1053|     59|            let mut delete = delete.unwrap_or_default();
 1054|     59|            let mut insert = insert.unwrap_or_default();
 1055|     59|            #[allow(clippy::shadow_same)]
 1056|     59|            let mut pattern = pattern;
 1057|     59|
 1058|     59|            let mut using = if u.is_empty() {
 1059|     59|                None
 1060|     59|            } else {
 1061|     59|                let mut default = Vec::new();
 1062|     59|                let mut named = Vec::new();
 1063|     59|                for (d, n) in u {
 1064|     59|                    if let Some(d) = d {
 1065|     59|                        default.push(d)
 1066|     59|                    }
 1067|     59|                    if let Some(n) = n {
 1068|     59|                        named.push(n)
 1069|     59|                    }
 1070|     59|                }
 1071|     59|                Some(QueryDataset { default, named: Some(named) })
 1072|     59|            };
 1073|     59|
 1074|     59|            if let Some(with) = with {
 1075|     59|                // We inject WITH everywhere
 1076|     59|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|     59|                    GroundQuadPattern {
 1078|     59|                        subject: q.subject,
 1079|     59|                        predicate: q.predicate,
 1080|     59|                        object: q.object,
 1081|     59|                        graph_name: with.clone().into()
 1082|     59|                    }
 1083|     59|                } else {
 1084|     59|                    q
 1085|     59|                }).collect();
 1086|     59|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|     59|                    QuadPattern {
 1088|     59|                        subject: q.subject,
 1089|     59|                        predicate: q.predicate,
 1090|     59|                        object: q.object,
 1091|     59|                        graph_name: with.clone().into()
 1092|     59|                    }
 1093|     59|                } else {
 1094|     59|                    q
 1095|     59|                }).collect();
 1096|     59|                if using.is_none() {
 1097|     59|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|     59|                }
 1099|     59|            }
 1100|     59|
 1101|     59|            vec![GraphUpdateOperation::DeleteInsert {
 1102|     59|                delete,
 1103|     59|                insert,
 1104|     59|                using,
 1105|     59|                pattern: Box::new(pattern)
 1106|     59|            }]
 1107|     59|        }
 1108|     59|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|     59|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|     59|            (Some(d), i)
 1111|     59|        } / i:InsertClause() {
 1112|     59|            (None, Some(i))
 1113|     59|        }
 1114|     59|        rule Modify_clear() = {
 1115|     59|            state.used_bnodes.clear();
 1116|     59|            state.currently_used_bnodes.clear();
 1117|     59|        }
 1118|     59|
 1119|     59|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|     59|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|     59|        }
 1122|     59|
 1123|     59|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|     59|
 1125|     59|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|     59|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|     59|            (Some(i), None)
 1128|     59|        }
 1129|     59|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|     59|            (None, Some(i))
 1131|     59|        }
 1132|     59|
 1133|     59|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|     59|            GraphName::DefaultGraph
 1135|     59|        } / (i("GRAPH") _)? g:iri() {
 1136|     59|            GraphName::NamedNode(g)
 1137|     59|        }
 1138|     59|
 1139|     59|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|     59|
 1141|     59|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|     59|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|     59|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|     59|            / i("ALL") { GraphTarget::AllGraphs }
 1145|     59|
 1146|     59|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|     59|
 1148|     59|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|     59|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|     59|        }
 1151|     59|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|     59|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|     59|        }
 1154|     59|
 1155|     59|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|     59|            q.into_iter().flatten().collect()
 1157|     59|        }
 1158|     59|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|     59|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|     59|        } //TODO: return iter?
 1161|     59|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|     59|
 1163|     59|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|     59|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|     59|        }
 1166|     59|
 1167|     59|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|     59|            ts.into_iter().flatten().collect()
 1169|     59|        }
 1170|     59|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|     59|
 1172|     59|        rule GroupGraphPattern() -> GraphPattern =
 1173|     59|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|     59|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|     59|        rule GroupGraphPattern_clear() = {
 1176|     59|             // We deal with blank nodes aliases rule
 1177|     59|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|     59|            state.currently_used_bnodes.clear();
 1179|     59|        }
 1180|     59|
 1181|     59|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|     59|            let mut filter: Option<Expression> = None;
 1183|     59|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|     59|            for e in b.into_iter().flatten() {
 1185|     59|                match e {
 1186|     59|                    PartialGraphPattern::Optional(p, f) => {
 1187|     59|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|     59|                    }
 1189|     59|                    #[cfg(feature = "sep-0006")]
 1190|     59|                    PartialGraphPattern::Lateral(p) => {
 1191|     59|                        let mut defined_variables = HashSet::default();
 1192|     59|                        add_defined_variables(&p, &mut defined_variables);
 1193|     59|                        let mut contains = false;
 1194|     59|                        g.on_in_scope_variable(|v| {
 1195|     59|                            if defined_variables.contains(v) {
 1196|     59|                                contains = true;
 1197|     59|                            }
 1198|     59|                        });
 1199|     59|                        if contains {
 1200|     59|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|     59|                        }
 1202|     59|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|     59|                    }
 1204|     59|                    PartialGraphPattern::Minus(p) => {
 1205|     59|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|     59|                    }
 1207|     59|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|     59|                        let mut contains = false;
 1209|     59|                        g.on_in_scope_variable(|v| {
 1210|     59|                            if *v == variable {
 1211|     59|                                contains = true;
 1212|     59|                            }
 1213|     59|                        });
 1214|     59|                        if contains {
 1215|     59|                            return Err("BIND is overriding an existing variable")
 1216|     59|                        }
 1217|     59|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|     59|                    }
 1219|     59|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|     59|                        Expression::And(Box::new(f), Box::new(expr))
 1221|     59|                    } else {
 1222|     59|                        expr
 1223|     59|                    }),
 1224|     59|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|     59|                }
 1226|     59|            }
 1227|     59|
 1228|     59|            Ok(if let Some(expr) = filter {
 1229|     59|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|     59|            } else {
 1231|     59|                g
 1232|     59|            })
 1233|     59|        }
 1234|     59|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|     59|            let mut result = vec![a];
 1236|     59|            if let Some(v) = b {
 1237|     59|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|     59|            }
 1239|     59|            result
 1240|     59|        }
 1241|     59|
 1242|     59|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|     59|            hs.into_iter().flatten().collect()
 1244|     59|        }
 1245|     59|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|     59|
 1247|     59|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|     59|
 1249|     59|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|     59|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|     59|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|     59|            } else {
 1253|     59|               PartialGraphPattern::Optional(p, None)
 1254|     59|            }
 1255|     59|        }
 1256|     59|
 1257|     59|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|     59|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|     59|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|     59|        }
 1261|     59|
 1262|     59|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|     59|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|     59|        }
 1265|     59|
 1266|     59|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|     59|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|     59|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|     59|
 1270|     59|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|     59|            PartialGraphPattern::Bind(e, v)
 1272|     59|        }
 1273|     59|
 1274|     59|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|     59|
 1276|     59|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|     59|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|     59|        }
 1279|     59|
 1280|     59|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|     59|            (vec![var], d)
 1282|     59|        }
 1283|     59|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|     59|
 1285|     59|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|     59|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|     59|                Ok((vars, vals))
 1288|     59|            } else {
 1289|     59|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|     59|            }
 1291|     59|        }
 1292|     59|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|     59|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|     59|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|     59|
 1296|     59|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|     59|            t:QuotedTripleData() {?
 1298|     59|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|     59|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|     59|            } /
 1301|     59|            i:iri() { Some(i.into()) } /
 1302|     59|            l:RDFLiteral() { Some(l.into()) } /
 1303|     59|            l:NumericLiteral() { Some(l.into()) } /
 1304|     59|            l:BooleanLiteral() { Some(l.into()) } /
 1305|     59|            i("UNDEF") { None }
 1306|     59|
 1307|     59|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|     59|            PartialGraphPattern::Minus(p)
 1309|     59|        }
 1310|     59|
 1311|     59|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|     59|            not_empty_fold(p.into_iter(), |a, b| {
 1313|     59|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|     59|            }).map(PartialGraphPattern::Other)
 1315|     59|        }
 1316|     59|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|     59|
 1318|     59|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|     59|            PartialGraphPattern::Filter(c)
 1320|     59|        }
 1321|     59|
 1322|     59|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|     59|
 1324|     59|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|     59|            Expression::FunctionCall(Function::Custom(f), a)
 1326|     59|        }
 1327|     59|
 1328|     59|        rule ArgList() -> Vec<Expression> =
 1329|     59|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|     59|            NIL() { Vec::new() }
 1331|     59|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|     59|
 1333|     59|        rule ExpressionList() -> Vec<Expression> =
 1334|     59|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|     59|            NIL() { Vec::new() }
 1336|     59|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|     59|
 1338|     59|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|     59|
 1340|     59|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|     59|            p.into_iter().flatten().collect()
 1342|     59|        }
 1343|     59|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|     59|
 1345|     59|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|     59|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|     59|                let mut patterns = po.patterns;
 1348|     59|                for (p, os) in po.focus {
 1349|     59|                    for o in os {
 1350|     59|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|     59|                    }
 1352|     59|                }
 1353|     59|                Ok(patterns)
 1354|     59|            } /
 1355|     59|            s:TriplesNode() _ po:PropertyList() {?
 1356|     59|                let mut patterns = s.patterns;
 1357|     59|                patterns.extend(po.patterns);
 1358|     59|                for (p, os) in po.focus {
 1359|     59|                    for o in os {
 1360|     59|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|     59|                    }
 1362|     59|                }
 1363|     59|                Ok(patterns)
 1364|     59|            }
 1365|     59|
 1366|     59|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|     59|            PropertyListNotEmpty() /
 1368|     59|            { FocusedTriplePattern::default() }
 1369|     59|
 1370|     59|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|     59|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|     59|                a.focus.push(b.focus);
 1373|     59|                a.patterns.extend(b.patterns);
 1374|     59|                a
 1375|     59|            })
 1376|     59|        }
 1377|     59|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|     59|            FocusedTriplePattern {
 1379|     59|                focus: (p, o.focus),
 1380|     59|                patterns: o.patterns
 1381|     59|            }
 1382|     59|        }
 1383|     59|
 1384|     59|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|     59|
 1386|     59|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|     59|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|     59|                a.focus.push(b.focus);
 1389|     59|                a.patterns.extend_from_slice(&b.patterns);
 1390|     59|                a
 1391|     59|            })
 1392|     59|        }
 1393|     59|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|     59|
 1395|     59|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|     59|            if let Some(a) = a {
 1397|     59|                let mut patterns = g.patterns;
 1398|     59|                patterns.extend(a.patterns);
 1399|     59|                FocusedTriplePattern {
 1400|     59|                    focus: AnnotatedTerm {
 1401|     59|                        term: g.focus,
 1402|     59|                        annotations: a.focus
 1403|     59|                    },
 1404|     59|                    patterns
 1405|     59|                }
 1406|     59|            } else {
 1407|     59|                FocusedTriplePattern {
 1408|     59|                    focus: AnnotatedTerm {
 1409|     59|                        term: g.focus,
 1410|     59|                        annotations: Vec::new()
 1411|     59|                    },
 1412|     59|                    patterns: g.patterns
 1413|     59|                }
 1414|     59|            }
 1415|     59|        }
 1416|     59|
 1417|     59|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|     59|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|     59|                let mut patterns = po.patterns;
 1420|     59|                for (p, os) in po.focus {
 1421|     59|                    for o in os {
 1422|     59|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|     59|                    }
 1424|     59|                }
 1425|     59|                Ok(patterns)
 1426|     59|            } /
 1427|     59|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|     59|                let mut patterns = s.patterns;
 1429|     59|                patterns.extend(po.patterns);
 1430|     59|                for (p, os) in po.focus {
 1431|     59|                    for o in os {
 1432|     59|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|     59|                    }
 1434|     59|                }
 1435|     59|                Ok(patterns)
 1436|     59|            }
 1437|     59|
 1438|     59|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|     59|            PropertyListPathNotEmpty() /
 1440|     59|            { FocusedTripleOrPathPattern::default() }
 1441|     59|
 1442|     59|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|     59|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|     59|                    focus: vec![(hp, ho.focus)],
 1445|     59|                    patterns: ho.patterns
 1446|     59|                }, |mut a, b| {
 1447|     59|                    a.focus.push(b.focus);
 1448|     59|                    a.patterns.extend(b.patterns);
 1449|     59|                    a
 1450|     59|                })
 1451|     59|        }
 1452|     59|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|     59|            c
 1454|     59|        }
 1455|     59|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|     59|            FocusedTripleOrPathPattern {
 1457|     59|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|     59|                patterns: o.patterns
 1459|     59|            }
 1460|     59|        }
 1461|     59|
 1462|     59|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|     59|            p.into()
 1464|     59|        }
 1465|     59|
 1466|     59|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|     59|            v.into()
 1468|     59|        }
 1469|     59|
 1470|     59|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|     59|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|     59|                a.focus.push(b.focus);
 1473|     59|                a.patterns.extend(b.patterns);
 1474|     59|                a
 1475|     59|            })
 1476|     59|        }
 1477|     59|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|     59|
 1479|     59|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|     59|             if let Some(a) = a {
 1481|     59|                let mut patterns = g.patterns;
 1482|     59|                patterns.extend(a.patterns);
 1483|     59|                FocusedTripleOrPathPattern {
 1484|     59|                    focus: AnnotatedTermPath {
 1485|     59|                        term: g.focus,
 1486|     59|                        annotations: a.focus
 1487|     59|                    },
 1488|     59|                    patterns
 1489|     59|                }
 1490|     59|            } else {
 1491|     59|                FocusedTripleOrPathPattern {
 1492|     59|                    focus: AnnotatedTermPath {
 1493|     59|                        term: g.focus,
 1494|     59|                        annotations: Vec::new()
 1495|     59|                    },
 1496|     59|                    patterns: g.patterns
 1497|     59|                }
 1498|     59|            }
 1499|     59|        }
 1500|     59|
 1501|     59|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|     59|
 1503|     59|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|     59|            not_empty_fold(p.into_iter(), |a, b| {
 1505|     59|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|     59|            })
 1507|     59|        }
 1508|     59|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|     59|
 1510|     59|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|     59|            not_empty_fold(p.into_iter(), |a, b| {
 1512|     59|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|     59|            })
 1514|     59|        }
 1515|     59|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|     59|
 1517|     59|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|     59|            match o {
 1519|     59|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|     59|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|     59|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|     59|                Some(_) => unreachable!(),
 1523|     59|                None => p
 1524|     59|            }
 1525|     59|        }
 1526|     59|        rule PathElt_op() -> char =
 1527|     59|            "*" { '*' } /
 1528|     59|            "+" { '+' } /
 1529|     59|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|     59|
 1531|     59|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|     59|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|     59|            PathElt()
 1534|     59|
 1535|     59|        rule PathPrimary() -> PropertyPathExpression =
 1536|     59|            v:iri() { v.into() } /
 1537|     59|            "a" { rdf::TYPE.into_owned().into() } /
 1538|     59|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|     59|            "(" _ p:Path() _ ")" { p }
 1540|     59|
 1541|     59|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|     59|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|     59|                let mut direct = Vec::new();
 1544|     59|                let mut inverse = Vec::new();
 1545|     59|                for e in p {
 1546|     59|                    match e {
 1547|     59|                        Either::Left(a) => direct.push(a),
 1548|     59|                        Either::Right(b) => inverse.push(b)
 1549|     59|                    }
 1550|     59|                }
 1551|     59|                if inverse.is_empty() {
 1552|     59|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|     59|                } else if direct.is_empty() {
 1554|     59|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|     59|                } else {
 1556|     59|                    PropertyPathExpression::Alternative(
 1557|     59|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|     59|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|     59|                    )
 1560|     59|                }
 1561|     59|            } /
 1562|     59|            p:PathOneInPropertySet() {
 1563|     59|                match p {
 1564|     59|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|     59|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|     59|                }
 1567|     59|            }
 1568|     59|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|     59|
 1570|     59|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|     59|            "^" _ v:iri() { Either::Right(v) } /
 1572|     59|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|     59|            v:iri() { Either::Left(v) } /
 1574|     59|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|     59|
 1576|     59|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|     59|
 1578|     59|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|     59|            let mut patterns = po.patterns;
 1580|     59|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|     59|            for (p, os) in po.focus {
 1582|     59|                for o in os {
 1583|     59|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|     59|                }
 1585|     59|            }
 1586|     59|            Ok(FocusedTriplePattern {
 1587|     59|                focus: bnode,
 1588|     59|                patterns
 1589|     59|            })
 1590|     59|        }
 1591|     59|
 1592|     59|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|     59|
 1594|     59|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|     59|            let mut patterns = po.patterns;
 1596|     59|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|     59|            for (p, os) in po.focus {
 1598|     59|                for o in os {
 1599|     59|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|     59|                }
 1601|     59|            }
 1602|     59|            Ok(FocusedTripleOrPathPattern {
 1603|     59|                focus: bnode,
 1604|     59|                patterns
 1605|     59|            })
 1606|     59|        }
 1607|     59|
 1608|     59|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|     59|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|     59|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|     59|            for objWithPatterns in o.into_iter().rev() {
 1612|     59|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|     59|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|     59|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|     59|                current_list_node = new_blank_node;
 1616|     59|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|     59|            }
 1618|     59|            FocusedTriplePattern {
 1619|     59|                focus: current_list_node,
 1620|     59|                patterns
 1621|     59|            }
 1622|     59|        }
 1623|     59|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|     59|
 1625|     59|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|     59|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|     59|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|     59|            for objWithPatterns in o.into_iter().rev() {
 1629|     59|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|     59|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|     59|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|     59|                current_list_node = new_blank_node;
 1633|     59|                patterns.extend(objWithPatterns.patterns);
 1634|     59|            }
 1635|     59|            FocusedTripleOrPathPattern {
 1636|     59|                focus: current_list_node,
 1637|     59|                patterns
 1638|     59|            }
 1639|     59|        }
 1640|     59|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|     59|
 1642|     59|
 1643|     59|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|     59|
 1645|     59|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|     59|
 1647|     59|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|     59|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|     59|            TriplesNode()
 1650|     59|
 1651|     59|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|     59|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|     59|            TriplesNodePath()
 1654|     59|
 1655|     59|        rule VarOrTerm() -> TermPattern =
 1656|     59|            v:Var() { v.into() } /
 1657|     59|            t:QuotedTriple() {?
 1658|     59|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|     59|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|     59|            } /
 1661|     59|            t:GraphTerm() { t.into() }
 1662|     59|
 1663|     59|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|     59|            Ok(TriplePattern {
 1665|     59|                subject: s,
 1666|     59|                predicate: p,
 1667|     59|                object: o
 1668|     59|            })
 1669|     59|        }
 1670|     59|
 1671|     59|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|     59|            Ok(GroundTriple {
 1673|     59|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|     59|                predicate: p,
 1675|     59|                object: o
 1676|     59|            })
 1677|     59|        }
 1678|     59|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|     59|
 1680|     59|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|     59|            l:RDFLiteral() { l.into() } /
 1682|     59|            l:NumericLiteral() { l.into() } /
 1683|     59|            l:BooleanLiteral() { l.into() } /
 1684|     59|            t:QuotedTripleData() {?
 1685|     59|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|     59|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|     59|            }
 1688|     59|
 1689|     59|        rule VarOrIri() -> NamedNodePattern =
 1690|     59|            v:Var() { v.into() } /
 1691|     59|            i:iri() { i.into() }
 1692|     59|
 1693|     59|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|     59|
 1695|     59|        rule GraphTerm() -> Term =
 1696|     59|            i:iri() { i.into() } /
 1697|     59|            l:RDFLiteral() { l.into() } /
 1698|     59|            l:NumericLiteral() { l.into() } /
 1699|     59|            l:BooleanLiteral() { l.into() } /
 1700|     59|            b:BlankNode() { b.into() } /
 1701|     59|            NIL() { rdf::NIL.into_owned().into() }
 1702|     59|
 1703|     59|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|     59|
 1705|     59|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|     59|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|     59|        }
 1708|     59|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|     59|
 1710|     59|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|     59|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|     59|        }
 1713|     59|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|     59|
 1715|     59|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|     59|
 1717|     59|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|     59|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|     59|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|     59|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|     59|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|     59|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|     59|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|     59|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|     59|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|     59|            Some(_) => unreachable!(),
 1727|     59|            None => a
 1728|     59|        } }
 1729|     59|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|     59|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|     59|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|     59|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|     59|
 1734|     59|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|     59|
 1736|     59|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|     59|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|     59|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|     59|            Some(_) => unreachable!(),
 1740|     59|            None => a,
 1741|     59|        } }
 1742|     59|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|     59|            (s, e)
 1744|     59|        }
 1745|     59|
 1746|     59|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|     59|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|     59|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|     59|            Some(_) => unreachable!(),
 1750|     59|            None => a
 1751|     59|        } }
 1752|     59|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|     59|            (s, e)
 1754|     59|        }
 1755|     59|
 1756|     59|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|     59|            Some("!") => Expression::Not(Box::new(e)),
 1758|     59|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|     59|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|     59|            Some(_) => unreachable!(),
 1761|     59|            None => e,
 1762|     59|        } }
 1763|     59|
 1764|     59|        rule PrimaryExpression() -> Expression =
 1765|     59|            BrackettedExpression()  /
 1766|     59|            ExprQuotedTriple() /
 1767|     59|            iriOrFunction() /
 1768|     59|            v:Var() { v.into() } /
 1769|     59|            l:RDFLiteral() { l.into() } /
 1770|     59|            l:NumericLiteral() { l.into() } /
 1771|     59|            l:BooleanLiteral() { l.into() } /
 1772|     59|            BuiltInCall()
 1773|     59|
 1774|     59|        rule ExprVarOrTerm() -> Expression =
 1775|     59|            ExprQuotedTriple() /
 1776|     59|            i:iri() { i.into() } /
 1777|     59|            l:RDFLiteral() { l.into() } /
 1778|     59|            l:NumericLiteral() { l.into() } /
 1779|     59|            l:BooleanLiteral() { l.into() } /
 1780|     59|            v:Var() { v.into() }
 1781|     59|
 1782|     59|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|     59|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|     59|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|     59|        }
 1786|     59|
 1787|     59|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|     59|
 1789|     59|        rule BuiltInCall() -> Expression =
 1790|     59|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|     59|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|     59|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|     59|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|     59|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|     59|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|     59|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|     59|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|     59|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|     59|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|     59|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|     59|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|     59|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|     59|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|     59|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|     59|            SubstringExpression() /
 1806|     59|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|     59|            StrReplaceExpression() /
 1808|     59|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|     59|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|     59|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|     59|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|     59|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|     59|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|     59|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|     59|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|     59|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|     59|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|     59|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|     59|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|     59|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|     59|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|     59|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|     59|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|     59|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|     59|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|     59|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|     59|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|     59|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|     59|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|     59|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|     59|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|     59|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|     59|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|     59|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|     59|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|     59|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|     59|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|     59|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|     59|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|     59|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|     59|            RegexExpression() /
 1842|     59|            ExistsFunc() /
 1843|     59|            NotExistsFunc() /
 1844|     59|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|     59|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|     59|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|     59|            } /
 1848|     59|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|     59|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|     59|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|     59|            } /
 1852|     59|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|     59|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|     59|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|     59|            } /
 1856|     59|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|     59|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|     59|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|     59|            } /
 1860|     59|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|     59|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|     59|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|     59|            } /
 1864|     59|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|     59|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|     59|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|     59|            }
 1868|     59|
 1869|     59|        rule RegexExpression() -> Expression =
 1870|     59|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|     59|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|     59|
 1873|     59|
 1874|     59|        rule SubstringExpression() -> Expression =
 1875|     59|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|     59|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|     59|
 1878|     59|
 1879|     59|        rule StrReplaceExpression() -> Expression =
 1880|     59|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|     59|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|     59|
 1883|     59|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|     59|
 1885|     59|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|     59|
 1887|     59|        rule Aggregate() -> AggregateExpression =
 1888|     59|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|     59|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|     59|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|     59|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|     59|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|     59|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|     59|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|     59|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|     59|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|     59|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|     59|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|     59|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|     59|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|     59|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|     59|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|     59|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|     59|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|     59|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|     59|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|     59|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|     59|
 1909|     59|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|     59|            match a {
 1911|     59|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|     59|                None => i.into()
 1913|     59|            }
 1914|     59|        }
 1915|     59|
 1916|     59|        rule RDFLiteral() -> Literal =
 1917|     59|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|     59|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|     59|            value:String() { Literal::new_simple_literal(value) }
 1920|     59|
 1921|     59|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|     59|
 1923|     59|        rule NumericLiteralUnsigned() -> Literal =
 1924|     59|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|     59|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|     59|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|     59|
 1928|     59|        rule NumericLiteralPositive() -> Literal =
 1929|     59|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|     59|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|     59|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|     59|
 1933|     59|
 1934|     59|        rule NumericLiteralNegative() -> Literal =
 1935|     59|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|     59|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|     59|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|     59|
 1939|     59|        rule BooleanLiteral() -> Literal =
 1940|     59|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|     59|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|     59|
 1943|     59|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|     59|
 1945|     59|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|     59|            NamedNode::from(i)
 1947|     59|        }
 1948|     59|
 1949|     59|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|     59|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|     59|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|     59|            } else {
 1953|     59|                Err("Prefix not found")
 1954|     59|            } }
 1955|     59|
 1956|     59|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|     59|            let node = BlankNode::new_unchecked(id);
 1958|     59|            if state.used_bnodes.contains(&node) {
 1959|     59|                Err("Already used blank node id")
 1960|     59|            } else {
 1961|     59|                state.currently_used_bnodes.insert(node.clone());
 1962|     59|                Ok(node)
 1963|     59|            }
 1964|     59|        } / ANON() { BlankNode::default() }
 1965|     59|
 1966|     59|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|     59|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|     59|        }
 1969|     59|
 1970|     59|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|     59|            ns
 1972|     59|        }
 1973|     59|
 1974|     59|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|     59|            if let Some(base) = state.namespaces.get(ns) {
 1976|     59|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|     59|                iri.push_str(base);
 1978|     59|                for chunk in local.split('\\') { // We remove \
 1979|     59|                    iri.push_str(chunk);
 1980|     59|                }
 1981|     59|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|     59|            } else {
 1983|     59|                Err("Prefix not found")
 1984|     59|            }
 1985|     59|        }
 1986|     59|
 1987|     59|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|     59|            b
 1989|     59|        }
 1990|     59|
 1991|     59|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|     59|
 1993|     59|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|     59|
 1995|     59|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|     59|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|     59|        }
 1998|     59|
 1999|     59|        rule INTEGER() = ['0'..='9']+
 2000|     59|
 2001|     59|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|     59|
 2003|     59|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|     59|
 2005|     59|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|     59|
 2007|     59|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|     59|
 2009|     59|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|     59|
 2011|     59|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|     59|
 2013|     59|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|     59|
 2015|     59|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|     59|
 2017|     59|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|     59|
 2019|     59|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|     59|             unescape_string(l)
 2021|     59|        }
 2022|     59|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|     59|
 2024|     59|
 2025|     59|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|     59|             unescape_string(l)
 2027|     59|        }
 2028|     59|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|     59|
 2030|     59|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|     59|             unescape_string(l)
 2032|     59|        }
 2033|     59|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|     59|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|     59|
 2036|     59|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|     59|             unescape_string(l)
 2038|     59|        }
 2039|     59|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|     59|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|     59|
 2042|     59|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|     59|
 2044|     59|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|     59|
 2046|     59|        rule NIL() = "(" WS()* ")"
 2047|     59|
 2048|     59|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|     59|
 2050|     59|        rule ANON() = "[" WS()* "]"
 2051|     59|
 2052|     59|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|     59|
 2054|     59|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|     59|
 2056|     59|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|     59|
 2058|     59|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|     59|
 2060|     59|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|     59|
 2062|     59|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|     59|
 2064|     59|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|     59|
 2066|     59|        rule PERCENT() = ['%'] HEX() HEX()
 2067|     59|
 2068|     59|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|     59|
 2070|     59|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|     59|
 2072|     59|        //space
 2073|     59|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|     59|
 2075|     59|        //comment
 2076|     59|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|     59|
 2078|     59|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|     59|            if input.eq_ignore_ascii_case(literal) {
 2080|     59|                Ok(())
 2081|     59|            } else {
 2082|     59|                Err(literal)
 2083|     59|            }
 2084|     59|        }
 2085|     59|    }
 2086|     59|}
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_InlineDataFull00B9_:
 1286|    204|            if vals.iter().all(|vs| vs.len() == vars.len()) {
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser24___parse_PathEltOrInverse0B7_:
 1532|  18.9k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_OptionalGraphPattern0B7_:
 1249|    175|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|    175|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|      0|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|    175|               PartialGraphPattern::Optional(p, None)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser24___parse_InlineDataOneVar0B7_:
 1280|     35|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|     35|            (vec![var], d)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_DataBlockValues_0B7_:
 1301|  2.63k|            i:iri() { Some(i.into()) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_BuiltInCallsF_0B7_:
 1835|      1|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_MinusGraphPattern0B7_:
 1307|     14|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|     14|            PartialGraphPattern::Minus(p)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_ObjectList0B7_:
 1386|  14.0k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  14.0k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|       |                a.focus.push(b.focus);
 1389|       |                a.patterns.extend_from_slice(&b.patterns);
 1390|       |                a
 1391|  14.0k|            })
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_RDFLiterals0_0B7_:
 1919|    276|            value:String() { Literal::new_simple_literal(value) }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser11___parse_Add0B7_:
  995|    238|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|    238|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|    238|            if from == to {
  998|    194|                Vec::new() // identity case
  999|       |            } else {
 1000|     44|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|     44|                vec![copy_graph(from, to)]
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_TriplesTemplate0B7_:
 1167|  13.9k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  13.9k|            ts.into_iter().flatten().collect()
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_SubSelect0B7_:
  778|  1.35k|parser! {
  779|  1.35k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  1.35k|    grammar parser(state: &mut ParserState) for str {
  781|  1.35k|        pub rule QueryUnit() -> Query = Query()
  782|  1.35k|
  783|  1.35k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  1.35k|            q
  785|  1.35k|        }
  786|  1.35k|
  787|  1.35k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  1.35k|
  789|  1.35k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  1.35k|
  791|  1.35k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  1.35k|            state.base_iri = Some(i)
  793|  1.35k|        }
  794|  1.35k|
  795|  1.35k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  1.35k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  1.35k|        }
  798|  1.35k|
  799|  1.35k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  1.35k|            Ok(Query::Select {
  801|  1.35k|                dataset: d,
  802|  1.35k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  1.35k|                base_iri: state.base_iri.clone()
  804|  1.35k|            })
  805|  1.35k|        }
  806|  1.35k|
  807|  1.35k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  1.35k|            build_select(s, w, g, h, o, l, v, state)
  809|  1.35k|        }
  810|  1.35k|
  811|  1.35k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  1.35k|            Selection {
  813|  1.35k|                option: o,
  814|  1.35k|                variables: v
  815|  1.35k|            }
  816|  1.35k|        }
  817|  1.35k|        rule Selection_init() = {
  818|  1.35k|            state.aggregates.push(Vec::new())
  819|  1.35k|        }
  820|  1.35k|        rule SelectClause_option() -> SelectionOption =
  821|  1.35k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  1.35k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  1.35k|            { SelectionOption::Default }
  824|  1.35k|        rule SelectClause_variables() -> SelectionVariables =
  825|  1.35k|            "*" { SelectionVariables::Star } /
  826|  1.35k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  1.35k|        rule SelectClause_member() -> SelectionMember =
  828|  1.35k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  1.35k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  1.35k|
  831|  1.35k|        rule ConstructQuery() -> Query =
  832|  1.35k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  1.35k|                Ok(Query::Construct {
  834|  1.35k|                    template: c,
  835|  1.35k|                    dataset: d,
  836|  1.35k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  1.35k|                    base_iri: state.base_iri.clone()
  838|  1.35k|                })
  839|  1.35k|            } /
  840|  1.35k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  1.35k|                Ok(Query::Construct {
  842|  1.35k|                    template: c.clone(),
  843|  1.35k|                    dataset: d,
  844|  1.35k|                    pattern: build_select(
  845|  1.35k|                        Selection::no_op(),
  846|  1.35k|                        GraphPattern::Bgp { patterns: c },
  847|  1.35k|                        g, h, o, l, v, state
  848|  1.35k|                    )?,
  849|  1.35k|                    base_iri: state.base_iri.clone()
  850|  1.35k|                })
  851|  1.35k|            }
  852|  1.35k|
  853|  1.35k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  1.35k|
  855|  1.35k|        rule DescribeQuery() -> Query =
  856|  1.35k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  1.35k|                Ok(Query::Describe {
  858|  1.35k|                    dataset: d,
  859|  1.35k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  1.35k|                    base_iri: state.base_iri.clone()
  861|  1.35k|                })
  862|  1.35k|            } /
  863|  1.35k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  1.35k|                Ok(Query::Describe {
  865|  1.35k|                    dataset: d,
  866|  1.35k|                    pattern: build_select(Selection {
  867|  1.35k|                        option: SelectionOption::Default,
  868|  1.35k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  1.35k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  1.35k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  1.35k|                        }).collect())
  872|  1.35k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  1.35k|                    base_iri: state.base_iri.clone()
  874|  1.35k|                })
  875|  1.35k|            }
  876|  1.35k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  1.35k|
  878|  1.35k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  1.35k|            Ok(Query::Ask {
  880|  1.35k|                dataset: d,
  881|  1.35k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  1.35k|                base_iri: state.base_iri.clone()
  883|  1.35k|            })
  884|  1.35k|        }
  885|  1.35k|
  886|  1.35k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  1.35k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  1.35k|            if d.is_empty() {
  889|  1.35k|                return None;
  890|  1.35k|            }
  891|  1.35k|            let mut default = Vec::new();
  892|  1.35k|            let mut named = Vec::new();
  893|  1.35k|            for (d, n) in d {
  894|  1.35k|                if let Some(d) = d {
  895|  1.35k|                    default.push(d);
  896|  1.35k|                }
  897|  1.35k|                if let Some(n) = n {
  898|  1.35k|                    named.push(n);
  899|  1.35k|                }
  900|  1.35k|            }
  901|  1.35k|            Some(QueryDataset {
  902|  1.35k|                default, named: Some(named)
  903|  1.35k|            })
  904|  1.35k|        }
  905|  1.35k|
  906|  1.35k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  1.35k|            (Some(s), None)
  908|  1.35k|        }
  909|  1.35k|
  910|  1.35k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  1.35k|            (None, Some(s))
  912|  1.35k|        }
  913|  1.35k|
  914|  1.35k|        rule SourceSelector() -> NamedNode = iri()
  915|  1.35k|
  916|  1.35k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  1.35k|            p
  918|  1.35k|        }
  919|  1.35k|
  920|  1.35k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  1.35k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  1.35k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  1.35k|                if let Expression::Variable(v) = e {
  924|  1.35k|                    v
  925|  1.35k|                } else {
  926|  1.35k|                    let v = vo.unwrap_or_else(variable);
  927|  1.35k|                    projections.push((e, v.clone()));
  928|  1.35k|                    v
  929|  1.35k|                }
  930|  1.35k|            }).collect();
  931|  1.35k|            (clauses, projections)
  932|  1.35k|        }
  933|  1.35k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  1.35k|
  935|  1.35k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  1.35k|            e:BuiltInCall() { (e, None) } /
  937|  1.35k|            e:FunctionCall() { (e, None) } /
  938|  1.35k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  1.35k|            e:Var() { (e.into(), None) }
  940|  1.35k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  1.35k|
  942|  1.35k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  1.35k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  1.35k|        }
  945|  1.35k|
  946|  1.35k|        rule HavingCondition() -> Expression = Constraint()
  947|  1.35k|
  948|  1.35k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  1.35k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  1.35k|
  951|  1.35k|        rule OrderCondition() -> OrderExpression =
  952|  1.35k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  1.35k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  1.35k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  1.35k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  1.35k|
  957|  1.35k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  1.35k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  1.35k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  1.35k|
  961|  1.35k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  1.35k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  1.35k|        }
  964|  1.35k|
  965|  1.35k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  1.35k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  1.35k|        }
  968|  1.35k|
  969|  1.35k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  1.35k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  1.35k|            { None }
  972|  1.35k|
  973|  1.35k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  1.35k|
  975|  1.35k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  1.35k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  1.35k|
  978|  1.35k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  1.35k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  1.35k|        }
  981|  1.35k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  1.35k|
  983|  1.35k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  1.35k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  1.35k|        }
  986|  1.35k|
  987|  1.35k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  1.35k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  1.35k|        }
  990|  1.35k|
  991|  1.35k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  1.35k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  1.35k|        }
  994|  1.35k|
  995|  1.35k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  1.35k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  1.35k|            if from == to {
  998|  1.35k|                Vec::new() // identity case
  999|  1.35k|            } else {
 1000|  1.35k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  1.35k|                vec![copy_graph(from, to)]
 1002|  1.35k|            }
 1003|  1.35k|        }
 1004|  1.35k|
 1005|  1.35k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  1.35k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  1.35k|            if from == to {
 1008|  1.35k|                Vec::new() // identity case
 1009|  1.35k|            } else {
 1010|  1.35k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  1.35k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  1.35k|            }
 1013|  1.35k|        }
 1014|  1.35k|
 1015|  1.35k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  1.35k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  1.35k|            if from == to {
 1018|  1.35k|                Vec::new() // identity case
 1019|  1.35k|            } else {
 1020|  1.35k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  1.35k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  1.35k|            }
 1023|  1.35k|        }
 1024|  1.35k|
 1025|  1.35k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  1.35k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  1.35k|        }
 1028|  1.35k|
 1029|  1.35k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  1.35k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  1.35k|        }
 1032|  1.35k|
 1033|  1.35k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  1.35k|            let pattern = d.iter().map(|q| {
 1035|  1.35k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  1.35k|                match &q.graph_name {
 1037|  1.35k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  1.35k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  1.35k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  1.35k|                }
 1041|  1.35k|            }).reduce(new_join).unwrap_or_default();
 1042|  1.35k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  1.35k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  1.35k|                delete,
 1045|  1.35k|                insert: Vec::new(),
 1046|  1.35k|                using: None,
 1047|  1.35k|                pattern: Box::new(pattern)
 1048|  1.35k|            }])
 1049|  1.35k|        }
 1050|  1.35k|
 1051|  1.35k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  1.35k|            let (delete, insert) = c;
 1053|  1.35k|            let mut delete = delete.unwrap_or_default();
 1054|  1.35k|            let mut insert = insert.unwrap_or_default();
 1055|  1.35k|            #[allow(clippy::shadow_same)]
 1056|  1.35k|            let mut pattern = pattern;
 1057|  1.35k|
 1058|  1.35k|            let mut using = if u.is_empty() {
 1059|  1.35k|                None
 1060|  1.35k|            } else {
 1061|  1.35k|                let mut default = Vec::new();
 1062|  1.35k|                let mut named = Vec::new();
 1063|  1.35k|                for (d, n) in u {
 1064|  1.35k|                    if let Some(d) = d {
 1065|  1.35k|                        default.push(d)
 1066|  1.35k|                    }
 1067|  1.35k|                    if let Some(n) = n {
 1068|  1.35k|                        named.push(n)
 1069|  1.35k|                    }
 1070|  1.35k|                }
 1071|  1.35k|                Some(QueryDataset { default, named: Some(named) })
 1072|  1.35k|            };
 1073|  1.35k|
 1074|  1.35k|            if let Some(with) = with {
 1075|  1.35k|                // We inject WITH everywhere
 1076|  1.35k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  1.35k|                    GroundQuadPattern {
 1078|  1.35k|                        subject: q.subject,
 1079|  1.35k|                        predicate: q.predicate,
 1080|  1.35k|                        object: q.object,
 1081|  1.35k|                        graph_name: with.clone().into()
 1082|  1.35k|                    }
 1083|  1.35k|                } else {
 1084|  1.35k|                    q
 1085|  1.35k|                }).collect();
 1086|  1.35k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  1.35k|                    QuadPattern {
 1088|  1.35k|                        subject: q.subject,
 1089|  1.35k|                        predicate: q.predicate,
 1090|  1.35k|                        object: q.object,
 1091|  1.35k|                        graph_name: with.clone().into()
 1092|  1.35k|                    }
 1093|  1.35k|                } else {
 1094|  1.35k|                    q
 1095|  1.35k|                }).collect();
 1096|  1.35k|                if using.is_none() {
 1097|  1.35k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  1.35k|                }
 1099|  1.35k|            }
 1100|  1.35k|
 1101|  1.35k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  1.35k|                delete,
 1103|  1.35k|                insert,
 1104|  1.35k|                using,
 1105|  1.35k|                pattern: Box::new(pattern)
 1106|  1.35k|            }]
 1107|  1.35k|        }
 1108|  1.35k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  1.35k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  1.35k|            (Some(d), i)
 1111|  1.35k|        } / i:InsertClause() {
 1112|  1.35k|            (None, Some(i))
 1113|  1.35k|        }
 1114|  1.35k|        rule Modify_clear() = {
 1115|  1.35k|            state.used_bnodes.clear();
 1116|  1.35k|            state.currently_used_bnodes.clear();
 1117|  1.35k|        }
 1118|  1.35k|
 1119|  1.35k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  1.35k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  1.35k|        }
 1122|  1.35k|
 1123|  1.35k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  1.35k|
 1125|  1.35k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  1.35k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  1.35k|            (Some(i), None)
 1128|  1.35k|        }
 1129|  1.35k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  1.35k|            (None, Some(i))
 1131|  1.35k|        }
 1132|  1.35k|
 1133|  1.35k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  1.35k|            GraphName::DefaultGraph
 1135|  1.35k|        } / (i("GRAPH") _)? g:iri() {
 1136|  1.35k|            GraphName::NamedNode(g)
 1137|  1.35k|        }
 1138|  1.35k|
 1139|  1.35k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  1.35k|
 1141|  1.35k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  1.35k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  1.35k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  1.35k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  1.35k|
 1146|  1.35k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  1.35k|
 1148|  1.35k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  1.35k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  1.35k|        }
 1151|  1.35k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  1.35k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  1.35k|        }
 1154|  1.35k|
 1155|  1.35k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  1.35k|            q.into_iter().flatten().collect()
 1157|  1.35k|        }
 1158|  1.35k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  1.35k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  1.35k|        } //TODO: return iter?
 1161|  1.35k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  1.35k|
 1163|  1.35k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  1.35k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  1.35k|        }
 1166|  1.35k|
 1167|  1.35k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  1.35k|            ts.into_iter().flatten().collect()
 1169|  1.35k|        }
 1170|  1.35k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  1.35k|
 1172|  1.35k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  1.35k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  1.35k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  1.35k|        rule GroupGraphPattern_clear() = {
 1176|  1.35k|             // We deal with blank nodes aliases rule
 1177|  1.35k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  1.35k|            state.currently_used_bnodes.clear();
 1179|  1.35k|        }
 1180|  1.35k|
 1181|  1.35k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  1.35k|            let mut filter: Option<Expression> = None;
 1183|  1.35k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  1.35k|            for e in b.into_iter().flatten() {
 1185|  1.35k|                match e {
 1186|  1.35k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  1.35k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  1.35k|                    }
 1189|  1.35k|                    #[cfg(feature = "sep-0006")]
 1190|  1.35k|                    PartialGraphPattern::Lateral(p) => {
 1191|  1.35k|                        let mut defined_variables = HashSet::default();
 1192|  1.35k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  1.35k|                        let mut contains = false;
 1194|  1.35k|                        g.on_in_scope_variable(|v| {
 1195|  1.35k|                            if defined_variables.contains(v) {
 1196|  1.35k|                                contains = true;
 1197|  1.35k|                            }
 1198|  1.35k|                        });
 1199|  1.35k|                        if contains {
 1200|  1.35k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  1.35k|                        }
 1202|  1.35k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  1.35k|                    }
 1204|  1.35k|                    PartialGraphPattern::Minus(p) => {
 1205|  1.35k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  1.35k|                    }
 1207|  1.35k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  1.35k|                        let mut contains = false;
 1209|  1.35k|                        g.on_in_scope_variable(|v| {
 1210|  1.35k|                            if *v == variable {
 1211|  1.35k|                                contains = true;
 1212|  1.35k|                            }
 1213|  1.35k|                        });
 1214|  1.35k|                        if contains {
 1215|  1.35k|                            return Err("BIND is overriding an existing variable")
 1216|  1.35k|                        }
 1217|  1.35k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  1.35k|                    }
 1219|  1.35k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  1.35k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  1.35k|                    } else {
 1222|  1.35k|                        expr
 1223|  1.35k|                    }),
 1224|  1.35k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  1.35k|                }
 1226|  1.35k|            }
 1227|  1.35k|
 1228|  1.35k|            Ok(if let Some(expr) = filter {
 1229|  1.35k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  1.35k|            } else {
 1231|  1.35k|                g
 1232|  1.35k|            })
 1233|  1.35k|        }
 1234|  1.35k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  1.35k|            let mut result = vec![a];
 1236|  1.35k|            if let Some(v) = b {
 1237|  1.35k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  1.35k|            }
 1239|  1.35k|            result
 1240|  1.35k|        }
 1241|  1.35k|
 1242|  1.35k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  1.35k|            hs.into_iter().flatten().collect()
 1244|  1.35k|        }
 1245|  1.35k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  1.35k|
 1247|  1.35k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  1.35k|
 1249|  1.35k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  1.35k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  1.35k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  1.35k|            } else {
 1253|  1.35k|               PartialGraphPattern::Optional(p, None)
 1254|  1.35k|            }
 1255|  1.35k|        }
 1256|  1.35k|
 1257|  1.35k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  1.35k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  1.35k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  1.35k|        }
 1261|  1.35k|
 1262|  1.35k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  1.35k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  1.35k|        }
 1265|  1.35k|
 1266|  1.35k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  1.35k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  1.35k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  1.35k|
 1270|  1.35k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  1.35k|            PartialGraphPattern::Bind(e, v)
 1272|  1.35k|        }
 1273|  1.35k|
 1274|  1.35k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  1.35k|
 1276|  1.35k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  1.35k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  1.35k|        }
 1279|  1.35k|
 1280|  1.35k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  1.35k|            (vec![var], d)
 1282|  1.35k|        }
 1283|  1.35k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  1.35k|
 1285|  1.35k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  1.35k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  1.35k|                Ok((vars, vals))
 1288|  1.35k|            } else {
 1289|  1.35k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  1.35k|            }
 1291|  1.35k|        }
 1292|  1.35k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  1.35k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  1.35k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  1.35k|
 1296|  1.35k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  1.35k|            t:QuotedTripleData() {?
 1298|  1.35k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  1.35k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  1.35k|            } /
 1301|  1.35k|            i:iri() { Some(i.into()) } /
 1302|  1.35k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  1.35k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  1.35k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  1.35k|            i("UNDEF") { None }
 1306|  1.35k|
 1307|  1.35k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  1.35k|            PartialGraphPattern::Minus(p)
 1309|  1.35k|        }
 1310|  1.35k|
 1311|  1.35k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  1.35k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  1.35k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  1.35k|            }).map(PartialGraphPattern::Other)
 1315|  1.35k|        }
 1316|  1.35k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  1.35k|
 1318|  1.35k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  1.35k|            PartialGraphPattern::Filter(c)
 1320|  1.35k|        }
 1321|  1.35k|
 1322|  1.35k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  1.35k|
 1324|  1.35k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  1.35k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  1.35k|        }
 1327|  1.35k|
 1328|  1.35k|        rule ArgList() -> Vec<Expression> =
 1329|  1.35k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  1.35k|            NIL() { Vec::new() }
 1331|  1.35k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  1.35k|
 1333|  1.35k|        rule ExpressionList() -> Vec<Expression> =
 1334|  1.35k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  1.35k|            NIL() { Vec::new() }
 1336|  1.35k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  1.35k|
 1338|  1.35k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  1.35k|
 1340|  1.35k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  1.35k|            p.into_iter().flatten().collect()
 1342|  1.35k|        }
 1343|  1.35k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  1.35k|
 1345|  1.35k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  1.35k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  1.35k|                let mut patterns = po.patterns;
 1348|  1.35k|                for (p, os) in po.focus {
 1349|  1.35k|                    for o in os {
 1350|  1.35k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  1.35k|                    }
 1352|  1.35k|                }
 1353|  1.35k|                Ok(patterns)
 1354|  1.35k|            } /
 1355|  1.35k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  1.35k|                let mut patterns = s.patterns;
 1357|  1.35k|                patterns.extend(po.patterns);
 1358|  1.35k|                for (p, os) in po.focus {
 1359|  1.35k|                    for o in os {
 1360|  1.35k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  1.35k|                    }
 1362|  1.35k|                }
 1363|  1.35k|                Ok(patterns)
 1364|  1.35k|            }
 1365|  1.35k|
 1366|  1.35k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  1.35k|            PropertyListNotEmpty() /
 1368|  1.35k|            { FocusedTriplePattern::default() }
 1369|  1.35k|
 1370|  1.35k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  1.35k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  1.35k|                a.focus.push(b.focus);
 1373|  1.35k|                a.patterns.extend(b.patterns);
 1374|  1.35k|                a
 1375|  1.35k|            })
 1376|  1.35k|        }
 1377|  1.35k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  1.35k|            FocusedTriplePattern {
 1379|  1.35k|                focus: (p, o.focus),
 1380|  1.35k|                patterns: o.patterns
 1381|  1.35k|            }
 1382|  1.35k|        }
 1383|  1.35k|
 1384|  1.35k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  1.35k|
 1386|  1.35k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  1.35k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  1.35k|                a.focus.push(b.focus);
 1389|  1.35k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  1.35k|                a
 1391|  1.35k|            })
 1392|  1.35k|        }
 1393|  1.35k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  1.35k|
 1395|  1.35k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  1.35k|            if let Some(a) = a {
 1397|  1.35k|                let mut patterns = g.patterns;
 1398|  1.35k|                patterns.extend(a.patterns);
 1399|  1.35k|                FocusedTriplePattern {
 1400|  1.35k|                    focus: AnnotatedTerm {
 1401|  1.35k|                        term: g.focus,
 1402|  1.35k|                        annotations: a.focus
 1403|  1.35k|                    },
 1404|  1.35k|                    patterns
 1405|  1.35k|                }
 1406|  1.35k|            } else {
 1407|  1.35k|                FocusedTriplePattern {
 1408|  1.35k|                    focus: AnnotatedTerm {
 1409|  1.35k|                        term: g.focus,
 1410|  1.35k|                        annotations: Vec::new()
 1411|  1.35k|                    },
 1412|  1.35k|                    patterns: g.patterns
 1413|  1.35k|                }
 1414|  1.35k|            }
 1415|  1.35k|        }
 1416|  1.35k|
 1417|  1.35k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  1.35k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  1.35k|                let mut patterns = po.patterns;
 1420|  1.35k|                for (p, os) in po.focus {
 1421|  1.35k|                    for o in os {
 1422|  1.35k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  1.35k|                    }
 1424|  1.35k|                }
 1425|  1.35k|                Ok(patterns)
 1426|  1.35k|            } /
 1427|  1.35k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  1.35k|                let mut patterns = s.patterns;
 1429|  1.35k|                patterns.extend(po.patterns);
 1430|  1.35k|                for (p, os) in po.focus {
 1431|  1.35k|                    for o in os {
 1432|  1.35k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  1.35k|                    }
 1434|  1.35k|                }
 1435|  1.35k|                Ok(patterns)
 1436|  1.35k|            }
 1437|  1.35k|
 1438|  1.35k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  1.35k|            PropertyListPathNotEmpty() /
 1440|  1.35k|            { FocusedTripleOrPathPattern::default() }
 1441|  1.35k|
 1442|  1.35k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  1.35k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  1.35k|                    focus: vec![(hp, ho.focus)],
 1445|  1.35k|                    patterns: ho.patterns
 1446|  1.35k|                }, |mut a, b| {
 1447|  1.35k|                    a.focus.push(b.focus);
 1448|  1.35k|                    a.patterns.extend(b.patterns);
 1449|  1.35k|                    a
 1450|  1.35k|                })
 1451|  1.35k|        }
 1452|  1.35k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  1.35k|            c
 1454|  1.35k|        }
 1455|  1.35k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  1.35k|            FocusedTripleOrPathPattern {
 1457|  1.35k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  1.35k|                patterns: o.patterns
 1459|  1.35k|            }
 1460|  1.35k|        }
 1461|  1.35k|
 1462|  1.35k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  1.35k|            p.into()
 1464|  1.35k|        }
 1465|  1.35k|
 1466|  1.35k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  1.35k|            v.into()
 1468|  1.35k|        }
 1469|  1.35k|
 1470|  1.35k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  1.35k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  1.35k|                a.focus.push(b.focus);
 1473|  1.35k|                a.patterns.extend(b.patterns);
 1474|  1.35k|                a
 1475|  1.35k|            })
 1476|  1.35k|        }
 1477|  1.35k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  1.35k|
 1479|  1.35k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  1.35k|             if let Some(a) = a {
 1481|  1.35k|                let mut patterns = g.patterns;
 1482|  1.35k|                patterns.extend(a.patterns);
 1483|  1.35k|                FocusedTripleOrPathPattern {
 1484|  1.35k|                    focus: AnnotatedTermPath {
 1485|  1.35k|                        term: g.focus,
 1486|  1.35k|                        annotations: a.focus
 1487|  1.35k|                    },
 1488|  1.35k|                    patterns
 1489|  1.35k|                }
 1490|  1.35k|            } else {
 1491|  1.35k|                FocusedTripleOrPathPattern {
 1492|  1.35k|                    focus: AnnotatedTermPath {
 1493|  1.35k|                        term: g.focus,
 1494|  1.35k|                        annotations: Vec::new()
 1495|  1.35k|                    },
 1496|  1.35k|                    patterns: g.patterns
 1497|  1.35k|                }
 1498|  1.35k|            }
 1499|  1.35k|        }
 1500|  1.35k|
 1501|  1.35k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  1.35k|
 1503|  1.35k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  1.35k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  1.35k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  1.35k|            })
 1507|  1.35k|        }
 1508|  1.35k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  1.35k|
 1510|  1.35k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  1.35k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  1.35k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  1.35k|            })
 1514|  1.35k|        }
 1515|  1.35k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  1.35k|
 1517|  1.35k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  1.35k|            match o {
 1519|  1.35k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  1.35k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  1.35k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  1.35k|                Some(_) => unreachable!(),
 1523|  1.35k|                None => p
 1524|  1.35k|            }
 1525|  1.35k|        }
 1526|  1.35k|        rule PathElt_op() -> char =
 1527|  1.35k|            "*" { '*' } /
 1528|  1.35k|            "+" { '+' } /
 1529|  1.35k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  1.35k|
 1531|  1.35k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  1.35k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  1.35k|            PathElt()
 1534|  1.35k|
 1535|  1.35k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  1.35k|            v:iri() { v.into() } /
 1537|  1.35k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  1.35k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  1.35k|            "(" _ p:Path() _ ")" { p }
 1540|  1.35k|
 1541|  1.35k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  1.35k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  1.35k|                let mut direct = Vec::new();
 1544|  1.35k|                let mut inverse = Vec::new();
 1545|  1.35k|                for e in p {
 1546|  1.35k|                    match e {
 1547|  1.35k|                        Either::Left(a) => direct.push(a),
 1548|  1.35k|                        Either::Right(b) => inverse.push(b)
 1549|  1.35k|                    }
 1550|  1.35k|                }
 1551|  1.35k|                if inverse.is_empty() {
 1552|  1.35k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  1.35k|                } else if direct.is_empty() {
 1554|  1.35k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  1.35k|                } else {
 1556|  1.35k|                    PropertyPathExpression::Alternative(
 1557|  1.35k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  1.35k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  1.35k|                    )
 1560|  1.35k|                }
 1561|  1.35k|            } /
 1562|  1.35k|            p:PathOneInPropertySet() {
 1563|  1.35k|                match p {
 1564|  1.35k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  1.35k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  1.35k|                }
 1567|  1.35k|            }
 1568|  1.35k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  1.35k|
 1570|  1.35k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  1.35k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  1.35k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  1.35k|            v:iri() { Either::Left(v) } /
 1574|  1.35k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  1.35k|
 1576|  1.35k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  1.35k|
 1578|  1.35k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  1.35k|            let mut patterns = po.patterns;
 1580|  1.35k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  1.35k|            for (p, os) in po.focus {
 1582|  1.35k|                for o in os {
 1583|  1.35k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  1.35k|                }
 1585|  1.35k|            }
 1586|  1.35k|            Ok(FocusedTriplePattern {
 1587|  1.35k|                focus: bnode,
 1588|  1.35k|                patterns
 1589|  1.35k|            })
 1590|  1.35k|        }
 1591|  1.35k|
 1592|  1.35k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  1.35k|
 1594|  1.35k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  1.35k|            let mut patterns = po.patterns;
 1596|  1.35k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  1.35k|            for (p, os) in po.focus {
 1598|  1.35k|                for o in os {
 1599|  1.35k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  1.35k|                }
 1601|  1.35k|            }
 1602|  1.35k|            Ok(FocusedTripleOrPathPattern {
 1603|  1.35k|                focus: bnode,
 1604|  1.35k|                patterns
 1605|  1.35k|            })
 1606|  1.35k|        }
 1607|  1.35k|
 1608|  1.35k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  1.35k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  1.35k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  1.35k|            for objWithPatterns in o.into_iter().rev() {
 1612|  1.35k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  1.35k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  1.35k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  1.35k|                current_list_node = new_blank_node;
 1616|  1.35k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  1.35k|            }
 1618|  1.35k|            FocusedTriplePattern {
 1619|  1.35k|                focus: current_list_node,
 1620|  1.35k|                patterns
 1621|  1.35k|            }
 1622|  1.35k|        }
 1623|  1.35k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  1.35k|
 1625|  1.35k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  1.35k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  1.35k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  1.35k|            for objWithPatterns in o.into_iter().rev() {
 1629|  1.35k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  1.35k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  1.35k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  1.35k|                current_list_node = new_blank_node;
 1633|  1.35k|                patterns.extend(objWithPatterns.patterns);
 1634|  1.35k|            }
 1635|  1.35k|            FocusedTripleOrPathPattern {
 1636|  1.35k|                focus: current_list_node,
 1637|  1.35k|                patterns
 1638|  1.35k|            }
 1639|  1.35k|        }
 1640|  1.35k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  1.35k|
 1642|  1.35k|
 1643|  1.35k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  1.35k|
 1645|  1.35k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  1.35k|
 1647|  1.35k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  1.35k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  1.35k|            TriplesNode()
 1650|  1.35k|
 1651|  1.35k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  1.35k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  1.35k|            TriplesNodePath()
 1654|  1.35k|
 1655|  1.35k|        rule VarOrTerm() -> TermPattern =
 1656|  1.35k|            v:Var() { v.into() } /
 1657|  1.35k|            t:QuotedTriple() {?
 1658|  1.35k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  1.35k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  1.35k|            } /
 1661|  1.35k|            t:GraphTerm() { t.into() }
 1662|  1.35k|
 1663|  1.35k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  1.35k|            Ok(TriplePattern {
 1665|  1.35k|                subject: s,
 1666|  1.35k|                predicate: p,
 1667|  1.35k|                object: o
 1668|  1.35k|            })
 1669|  1.35k|        }
 1670|  1.35k|
 1671|  1.35k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  1.35k|            Ok(GroundTriple {
 1673|  1.35k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  1.35k|                predicate: p,
 1675|  1.35k|                object: o
 1676|  1.35k|            })
 1677|  1.35k|        }
 1678|  1.35k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  1.35k|
 1680|  1.35k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  1.35k|            l:RDFLiteral() { l.into() } /
 1682|  1.35k|            l:NumericLiteral() { l.into() } /
 1683|  1.35k|            l:BooleanLiteral() { l.into() } /
 1684|  1.35k|            t:QuotedTripleData() {?
 1685|  1.35k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  1.35k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  1.35k|            }
 1688|  1.35k|
 1689|  1.35k|        rule VarOrIri() -> NamedNodePattern =
 1690|  1.35k|            v:Var() { v.into() } /
 1691|  1.35k|            i:iri() { i.into() }
 1692|  1.35k|
 1693|  1.35k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  1.35k|
 1695|  1.35k|        rule GraphTerm() -> Term =
 1696|  1.35k|            i:iri() { i.into() } /
 1697|  1.35k|            l:RDFLiteral() { l.into() } /
 1698|  1.35k|            l:NumericLiteral() { l.into() } /
 1699|  1.35k|            l:BooleanLiteral() { l.into() } /
 1700|  1.35k|            b:BlankNode() { b.into() } /
 1701|  1.35k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  1.35k|
 1703|  1.35k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  1.35k|
 1705|  1.35k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  1.35k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  1.35k|        }
 1708|  1.35k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  1.35k|
 1710|  1.35k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  1.35k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  1.35k|        }
 1713|  1.35k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  1.35k|
 1715|  1.35k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  1.35k|
 1717|  1.35k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  1.35k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  1.35k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  1.35k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  1.35k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  1.35k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  1.35k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  1.35k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  1.35k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  1.35k|            Some(_) => unreachable!(),
 1727|  1.35k|            None => a
 1728|  1.35k|        } }
 1729|  1.35k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  1.35k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  1.35k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  1.35k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  1.35k|
 1734|  1.35k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  1.35k|
 1736|  1.35k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  1.35k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  1.35k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  1.35k|            Some(_) => unreachable!(),
 1740|  1.35k|            None => a,
 1741|  1.35k|        } }
 1742|  1.35k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  1.35k|            (s, e)
 1744|  1.35k|        }
 1745|  1.35k|
 1746|  1.35k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  1.35k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  1.35k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  1.35k|            Some(_) => unreachable!(),
 1750|  1.35k|            None => a
 1751|  1.35k|        } }
 1752|  1.35k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  1.35k|            (s, e)
 1754|  1.35k|        }
 1755|  1.35k|
 1756|  1.35k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  1.35k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  1.35k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  1.35k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  1.35k|            Some(_) => unreachable!(),
 1761|  1.35k|            None => e,
 1762|  1.35k|        } }
 1763|  1.35k|
 1764|  1.35k|        rule PrimaryExpression() -> Expression =
 1765|  1.35k|            BrackettedExpression()  /
 1766|  1.35k|            ExprQuotedTriple() /
 1767|  1.35k|            iriOrFunction() /
 1768|  1.35k|            v:Var() { v.into() } /
 1769|  1.35k|            l:RDFLiteral() { l.into() } /
 1770|  1.35k|            l:NumericLiteral() { l.into() } /
 1771|  1.35k|            l:BooleanLiteral() { l.into() } /
 1772|  1.35k|            BuiltInCall()
 1773|  1.35k|
 1774|  1.35k|        rule ExprVarOrTerm() -> Expression =
 1775|  1.35k|            ExprQuotedTriple() /
 1776|  1.35k|            i:iri() { i.into() } /
 1777|  1.35k|            l:RDFLiteral() { l.into() } /
 1778|  1.35k|            l:NumericLiteral() { l.into() } /
 1779|  1.35k|            l:BooleanLiteral() { l.into() } /
 1780|  1.35k|            v:Var() { v.into() }
 1781|  1.35k|
 1782|  1.35k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  1.35k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  1.35k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  1.35k|        }
 1786|  1.35k|
 1787|  1.35k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  1.35k|
 1789|  1.35k|        rule BuiltInCall() -> Expression =
 1790|  1.35k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  1.35k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  1.35k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  1.35k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  1.35k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  1.35k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  1.35k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  1.35k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  1.35k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  1.35k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  1.35k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  1.35k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  1.35k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  1.35k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  1.35k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  1.35k|            SubstringExpression() /
 1806|  1.35k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  1.35k|            StrReplaceExpression() /
 1808|  1.35k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  1.35k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  1.35k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  1.35k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  1.35k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  1.35k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  1.35k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  1.35k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  1.35k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  1.35k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  1.35k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  1.35k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  1.35k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  1.35k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  1.35k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  1.35k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  1.35k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  1.35k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  1.35k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  1.35k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  1.35k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  1.35k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  1.35k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  1.35k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  1.35k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  1.35k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  1.35k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  1.35k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  1.35k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  1.35k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  1.35k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  1.35k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  1.35k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  1.35k|            RegexExpression() /
 1842|  1.35k|            ExistsFunc() /
 1843|  1.35k|            NotExistsFunc() /
 1844|  1.35k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  1.35k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  1.35k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  1.35k|            } /
 1848|  1.35k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  1.35k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  1.35k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  1.35k|            } /
 1852|  1.35k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  1.35k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  1.35k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  1.35k|            } /
 1856|  1.35k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  1.35k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  1.35k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  1.35k|            } /
 1860|  1.35k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  1.35k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  1.35k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  1.35k|            } /
 1864|  1.35k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  1.35k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  1.35k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  1.35k|            }
 1868|  1.35k|
 1869|  1.35k|        rule RegexExpression() -> Expression =
 1870|  1.35k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  1.35k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  1.35k|
 1873|  1.35k|
 1874|  1.35k|        rule SubstringExpression() -> Expression =
 1875|  1.35k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  1.35k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  1.35k|
 1878|  1.35k|
 1879|  1.35k|        rule StrReplaceExpression() -> Expression =
 1880|  1.35k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  1.35k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  1.35k|
 1883|  1.35k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  1.35k|
 1885|  1.35k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  1.35k|
 1887|  1.35k|        rule Aggregate() -> AggregateExpression =
 1888|  1.35k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  1.35k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  1.35k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  1.35k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  1.35k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  1.35k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  1.35k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  1.35k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  1.35k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  1.35k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  1.35k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  1.35k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  1.35k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  1.35k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  1.35k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  1.35k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  1.35k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  1.35k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  1.35k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  1.35k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  1.35k|
 1909|  1.35k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  1.35k|            match a {
 1911|  1.35k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  1.35k|                None => i.into()
 1913|  1.35k|            }
 1914|  1.35k|        }
 1915|  1.35k|
 1916|  1.35k|        rule RDFLiteral() -> Literal =
 1917|  1.35k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  1.35k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  1.35k|            value:String() { Literal::new_simple_literal(value) }
 1920|  1.35k|
 1921|  1.35k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  1.35k|
 1923|  1.35k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  1.35k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  1.35k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  1.35k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  1.35k|
 1928|  1.35k|        rule NumericLiteralPositive() -> Literal =
 1929|  1.35k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  1.35k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  1.35k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  1.35k|
 1933|  1.35k|
 1934|  1.35k|        rule NumericLiteralNegative() -> Literal =
 1935|  1.35k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  1.35k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  1.35k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  1.35k|
 1939|  1.35k|        rule BooleanLiteral() -> Literal =
 1940|  1.35k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  1.35k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  1.35k|
 1943|  1.35k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  1.35k|
 1945|  1.35k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  1.35k|            NamedNode::from(i)
 1947|  1.35k|        }
 1948|  1.35k|
 1949|  1.35k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  1.35k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  1.35k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  1.35k|            } else {
 1953|  1.35k|                Err("Prefix not found")
 1954|  1.35k|            } }
 1955|  1.35k|
 1956|  1.35k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  1.35k|            let node = BlankNode::new_unchecked(id);
 1958|  1.35k|            if state.used_bnodes.contains(&node) {
 1959|  1.35k|                Err("Already used blank node id")
 1960|  1.35k|            } else {
 1961|  1.35k|                state.currently_used_bnodes.insert(node.clone());
 1962|  1.35k|                Ok(node)
 1963|  1.35k|            }
 1964|  1.35k|        } / ANON() { BlankNode::default() }
 1965|  1.35k|
 1966|  1.35k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  1.35k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  1.35k|        }
 1969|  1.35k|
 1970|  1.35k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  1.35k|            ns
 1972|  1.35k|        }
 1973|  1.35k|
 1974|  1.35k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  1.35k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  1.35k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  1.35k|                iri.push_str(base);
 1978|  1.35k|                for chunk in local.split('\\') { // We remove \
 1979|  1.35k|                    iri.push_str(chunk);
 1980|  1.35k|                }
 1981|  1.35k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  1.35k|            } else {
 1983|  1.35k|                Err("Prefix not found")
 1984|  1.35k|            }
 1985|  1.35k|        }
 1986|  1.35k|
 1987|  1.35k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  1.35k|            b
 1989|  1.35k|        }
 1990|  1.35k|
 1991|  1.35k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  1.35k|
 1993|  1.35k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  1.35k|
 1995|  1.35k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  1.35k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  1.35k|        }
 1998|  1.35k|
 1999|  1.35k|        rule INTEGER() = ['0'..='9']+
 2000|  1.35k|
 2001|  1.35k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  1.35k|
 2003|  1.35k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  1.35k|
 2005|  1.35k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  1.35k|
 2007|  1.35k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  1.35k|
 2009|  1.35k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  1.35k|
 2011|  1.35k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  1.35k|
 2013|  1.35k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  1.35k|
 2015|  1.35k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  1.35k|
 2017|  1.35k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  1.35k|
 2019|  1.35k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  1.35k|             unescape_string(l)
 2021|  1.35k|        }
 2022|  1.35k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  1.35k|
 2024|  1.35k|
 2025|  1.35k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  1.35k|             unescape_string(l)
 2027|  1.35k|        }
 2028|  1.35k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  1.35k|
 2030|  1.35k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  1.35k|             unescape_string(l)
 2032|  1.35k|        }
 2033|  1.35k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  1.35k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  1.35k|
 2036|  1.35k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  1.35k|             unescape_string(l)
 2038|  1.35k|        }
 2039|  1.35k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  1.35k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  1.35k|
 2042|  1.35k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  1.35k|
 2044|  1.35k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  1.35k|
 2046|  1.35k|        rule NIL() = "(" WS()* ")"
 2047|  1.35k|
 2048|  1.35k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  1.35k|
 2050|  1.35k|        rule ANON() = "[" WS()* "]"
 2051|  1.35k|
 2052|  1.35k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  1.35k|
 2054|  1.35k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  1.35k|
 2056|  1.35k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  1.35k|
 2058|  1.35k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  1.35k|
 2060|  1.35k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  1.35k|
 2062|  1.35k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  1.35k|
 2064|  1.35k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  1.35k|
 2066|  1.35k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  1.35k|
 2068|  1.35k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  1.35k|
 2070|  1.35k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  1.35k|
 2072|  1.35k|        //space
 2073|  1.35k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  1.35k|
 2075|  1.35k|        //comment
 2076|  1.35k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  1.35k|
 2078|  1.35k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  1.35k|            if input.eq_ignore_ascii_case(literal) {
 2080|  1.35k|                Ok(())
 2081|  1.35k|            } else {
 2082|  1.35k|                Err(literal)
 2083|  1.35k|            }
 2084|  1.35k|        }
 2085|  1.35k|    }
 2086|  1.35k|}
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_GroupClause0B7_:
  920|     60|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|     60|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|     60|            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|     60|            }).collect();
  931|     60|            (clauses, projections)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_PathPrimarys0_0B7_:
 1538|  1.20k|            "!" _ p:PathNegatedPropertySet() { p } /
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_ObjectList00B9_:
 1387|  14.0k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  14.0k|                a.focus.push(b.focus);
 1389|  14.0k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  14.0k|                a
 1391|  14.0k|            })
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_CollectionPath0B7_:
 1625|  1.06k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  1.06k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  1.06k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  2.20k|            for objWithPatterns in o.into_iter().rev() {
 1629|  2.20k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  2.20k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  2.20k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  2.20k|                current_list_node = new_blank_node;
 1633|  2.20k|                patterns.extend(objWithPatterns.patterns);
 1634|  2.20k|            }
 1635|  1.06k|            FocusedTripleOrPathPattern {
 1636|  1.06k|                focus: current_list_node,
 1637|  1.06k|                patterns
 1638|  1.06k|            }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_Create0B7_:
  991|    252|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|    252|            vec![GraphUpdateOperation::Create { silent, graph }]
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser32___parse_AdditiveExpression_inner0B7_:
 1742|  1.71k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  1.71k|            (s, e)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser32___parse_PropertyListPathNotEmpty0B7_:
 1442|  8.61k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  8.61k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  8.61k|                    focus: vec![(hp, ho.focus)],
 1445|  8.61k|                    patterns: ho.patterns
 1446|  8.61k|                }, |mut a, b| {
 1447|       |                    a.focus.push(b.focus);
 1448|       |                    a.patterns.extend(b.patterns);
 1449|       |                    a
 1450|  8.61k|                })
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser33___parse_BlankNodePropertyListPath0B7_:
  778|  7.76k|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|       |            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|       |                Ok((vars, vals))
 1288|       |            } else {
 1289|       |                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|       |            }
 1291|       |        }
 1292|       |        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|       |        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|       |        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|       |
 1296|       |        rule DataBlockValue() -> Option<GroundTerm> =
 1297|       |            t:QuotedTripleData() {?
 1298|       |                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|       |            } /
 1301|       |            i:iri() { Some(i.into()) } /
 1302|       |            l:RDFLiteral() { Some(l.into()) } /
 1303|       |            l:NumericLiteral() { Some(l.into()) } /
 1304|       |            l:BooleanLiteral() { Some(l.into()) } /
 1305|       |            i("UNDEF") { None }
 1306|       |
 1307|       |        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|       |            PartialGraphPattern::Minus(p)
 1309|       |        }
 1310|       |
 1311|       |        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|       |            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|       |            }).map(PartialGraphPattern::Other)
 1315|       |        }
 1316|       |        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|       |
 1318|       |        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|       |            PartialGraphPattern::Filter(c)
 1320|       |        }
 1321|       |
 1322|       |        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|       |
 1324|       |        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|       |            Expression::FunctionCall(Function::Custom(f), a)
 1326|       |        }
 1327|       |
 1328|       |        rule ArgList() -> Vec<Expression> =
 1329|       |            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|       |            NIL() { Vec::new() }
 1331|       |        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|       |
 1333|       |        rule ExpressionList() -> Vec<Expression> =
 1334|       |            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|       |            NIL() { Vec::new() }
 1336|       |        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|       |
 1338|       |        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|       |
 1340|       |        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|       |            p.into_iter().flatten().collect()
 1342|       |        }
 1343|       |        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|       |
 1345|       |        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|       |            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|       |                let mut patterns = po.patterns;
 1348|       |                for (p, os) in po.focus {
 1349|       |                    for o in os {
 1350|       |                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|       |                    }
 1352|       |                }
 1353|       |                Ok(patterns)
 1354|       |            } /
 1355|       |            s:TriplesNode() _ po:PropertyList() {?
 1356|       |                let mut patterns = s.patterns;
 1357|       |                patterns.extend(po.patterns);
 1358|       |                for (p, os) in po.focus {
 1359|       |                    for o in os {
 1360|       |                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|       |                    }
 1362|       |                }
 1363|       |                Ok(patterns)
 1364|       |            }
 1365|       |
 1366|       |        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|       |            PropertyListNotEmpty() /
 1368|       |            { FocusedTriplePattern::default() }
 1369|       |
 1370|       |        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|       |            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|       |                a.focus.push(b.focus);
 1373|       |                a.patterns.extend(b.patterns);
 1374|       |                a
 1375|       |            })
 1376|       |        }
 1377|       |        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|       |            FocusedTriplePattern {
 1379|       |                focus: (p, o.focus),
 1380|       |                patterns: o.patterns
 1381|       |            }
 1382|       |        }
 1383|       |
 1384|       |        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|       |
 1386|       |        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|       |            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|       |                a.focus.push(b.focus);
 1389|       |                a.patterns.extend_from_slice(&b.patterns);
 1390|       |                a
 1391|       |            })
 1392|       |        }
 1393|       |        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|       |
 1395|       |        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|       |            if let Some(a) = a {
 1397|       |                let mut patterns = g.patterns;
 1398|       |                patterns.extend(a.patterns);
 1399|       |                FocusedTriplePattern {
 1400|       |                    focus: AnnotatedTerm {
 1401|       |                        term: g.focus,
 1402|       |                        annotations: a.focus
 1403|       |                    },
 1404|       |                    patterns
 1405|       |                }
 1406|       |            } else {
 1407|       |                FocusedTriplePattern {
 1408|       |                    focus: AnnotatedTerm {
 1409|       |                        term: g.focus,
 1410|       |                        annotations: Vec::new()
 1411|       |                    },
 1412|       |                    patterns: g.patterns
 1413|       |                }
 1414|       |            }
 1415|       |        }
 1416|       |
 1417|       |        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|       |            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|       |                let mut patterns = po.patterns;
 1420|       |                for (p, os) in po.focus {
 1421|       |                    for o in os {
 1422|       |                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|       |                    }
 1424|       |                }
 1425|       |                Ok(patterns)
 1426|       |            } /
 1427|       |            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|       |                let mut patterns = s.patterns;
 1429|       |                patterns.extend(po.patterns);
 1430|       |                for (p, os) in po.focus {
 1431|       |                    for o in os {
 1432|       |                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|       |                    }
 1434|       |                }
 1435|       |                Ok(patterns)
 1436|       |            }
 1437|       |
 1438|       |        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|       |            PropertyListPathNotEmpty() /
 1440|       |            { FocusedTripleOrPathPattern::default() }
 1441|       |
 1442|       |        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|       |                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|       |                    focus: vec![(hp, ho.focus)],
 1445|       |                    patterns: ho.patterns
 1446|       |                }, |mut a, b| {
 1447|       |                    a.focus.push(b.focus);
 1448|       |                    a.patterns.extend(b.patterns);
 1449|       |                    a
 1450|       |                })
 1451|       |        }
 1452|       |        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|       |            c
 1454|       |        }
 1455|       |        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|       |            FocusedTripleOrPathPattern {
 1457|       |                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|       |                patterns: o.patterns
 1459|       |            }
 1460|       |        }
 1461|       |
 1462|       |        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|       |            p.into()
 1464|       |        }
 1465|       |
 1466|       |        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|       |            v.into()
 1468|       |        }
 1469|       |
 1470|       |        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|       |            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|       |                a.focus.push(b.focus);
 1473|       |                a.patterns.extend(b.patterns);
 1474|       |                a
 1475|       |            })
 1476|       |        }
 1477|       |        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|       |
 1479|       |        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|       |             if let Some(a) = a {
 1481|       |                let mut patterns = g.patterns;
 1482|       |                patterns.extend(a.patterns);
 1483|       |                FocusedTripleOrPathPattern {
 1484|       |                    focus: AnnotatedTermPath {
 1485|       |                        term: g.focus,
 1486|       |                        annotations: a.focus
 1487|       |                    },
 1488|       |                    patterns
 1489|       |                }
 1490|       |            } else {
 1491|       |                FocusedTripleOrPathPattern {
 1492|       |                    focus: AnnotatedTermPath {
 1493|       |                        term: g.focus,
 1494|       |                        annotations: Vec::new()
 1495|       |                    },
 1496|       |                    patterns: g.patterns
 1497|       |                }
 1498|       |            }
 1499|       |        }
 1500|       |
 1501|       |        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|       |
 1503|       |        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|       |            not_empty_fold(p.into_iter(), |a, b| {
 1505|       |                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|       |            })
 1507|       |        }
 1508|       |        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|       |
 1510|       |        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|       |            not_empty_fold(p.into_iter(), |a, b| {
 1512|       |                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|       |            })
 1514|       |        }
 1515|       |        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|       |
 1517|       |        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|       |            match o {
 1519|       |                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|       |                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|       |                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|       |                Some(_) => unreachable!(),
 1523|       |                None => p
 1524|       |            }
 1525|       |        }
 1526|       |        rule PathElt_op() -> char =
 1527|       |            "*" { '*' } /
 1528|       |            "+" { '+' } /
 1529|       |            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|       |
 1531|       |        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|       |            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|       |            PathElt()
 1534|       |
 1535|       |        rule PathPrimary() -> PropertyPathExpression =
 1536|       |            v:iri() { v.into() } /
 1537|       |            "a" { rdf::TYPE.into_owned().into() } /
 1538|       |            "!" _ p:PathNegatedPropertySet() { p } /
 1539|       |            "(" _ p:Path() _ ")" { p }
 1540|       |
 1541|       |        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|       |            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|       |                let mut direct = Vec::new();
 1544|       |                let mut inverse = Vec::new();
 1545|       |                for e in p {
 1546|       |                    match e {
 1547|       |                        Either::Left(a) => direct.push(a),
 1548|       |                        Either::Right(b) => inverse.push(b)
 1549|       |                    }
 1550|       |                }
 1551|       |                if inverse.is_empty() {
 1552|       |                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|       |                } else if direct.is_empty() {
 1554|       |                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|       |                } else {
 1556|       |                    PropertyPathExpression::Alternative(
 1557|       |                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|       |                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|       |                    )
 1560|       |                }
 1561|       |            } /
 1562|       |            p:PathOneInPropertySet() {
 1563|       |                match p {
 1564|       |                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|       |                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|       |                }
 1567|       |            }
 1568|       |        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|       |
 1570|       |        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|       |            "^" _ v:iri() { Either::Right(v) } /
 1572|       |            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|       |            v:iri() { Either::Left(v) } /
 1574|       |            "a" { Either::Left(rdf::TYPE.into()) }
 1575|       |
 1576|       |        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|       |
 1578|       |        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|       |            let mut patterns = po.patterns;
 1580|       |            let mut bnode = TermPattern::from(BlankNode::default());
 1581|       |            for (p, os) in po.focus {
 1582|       |                for o in os {
 1583|       |                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|       |                }
 1585|       |            }
 1586|       |            Ok(FocusedTriplePattern {
 1587|       |                focus: bnode,
 1588|       |                patterns
 1589|       |            })
 1590|       |        }
 1591|       |
 1592|       |        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|       |
 1594|       |        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  7.76k|            let mut patterns = po.patterns;
 1596|  7.76k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  15.7k|            for (p, os) in po.focus {
 1598|  17.9k|                for o in os {
 1599|  9.92k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|       |                }
 1601|       |            }
 1602|  7.76k|            Ok(FocusedTripleOrPathPattern {
 1603|  7.76k|                focus: bnode,
 1604|  7.76k|                patterns
 1605|  7.76k|            })
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser32___parse_ConditionalAndExpression0B7_:
  778|  1.58k|parser! {
  779|  1.58k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  1.58k|    grammar parser(state: &mut ParserState) for str {
  781|  1.58k|        pub rule QueryUnit() -> Query = Query()
  782|  1.58k|
  783|  1.58k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  1.58k|            q
  785|  1.58k|        }
  786|  1.58k|
  787|  1.58k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  1.58k|
  789|  1.58k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  1.58k|
  791|  1.58k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  1.58k|            state.base_iri = Some(i)
  793|  1.58k|        }
  794|  1.58k|
  795|  1.58k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  1.58k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  1.58k|        }
  798|  1.58k|
  799|  1.58k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  1.58k|            Ok(Query::Select {
  801|  1.58k|                dataset: d,
  802|  1.58k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  1.58k|                base_iri: state.base_iri.clone()
  804|  1.58k|            })
  805|  1.58k|        }
  806|  1.58k|
  807|  1.58k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  1.58k|            build_select(s, w, g, h, o, l, v, state)
  809|  1.58k|        }
  810|  1.58k|
  811|  1.58k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  1.58k|            Selection {
  813|  1.58k|                option: o,
  814|  1.58k|                variables: v
  815|  1.58k|            }
  816|  1.58k|        }
  817|  1.58k|        rule Selection_init() = {
  818|  1.58k|            state.aggregates.push(Vec::new())
  819|  1.58k|        }
  820|  1.58k|        rule SelectClause_option() -> SelectionOption =
  821|  1.58k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  1.58k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  1.58k|            { SelectionOption::Default }
  824|  1.58k|        rule SelectClause_variables() -> SelectionVariables =
  825|  1.58k|            "*" { SelectionVariables::Star } /
  826|  1.58k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  1.58k|        rule SelectClause_member() -> SelectionMember =
  828|  1.58k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  1.58k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  1.58k|
  831|  1.58k|        rule ConstructQuery() -> Query =
  832|  1.58k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  1.58k|                Ok(Query::Construct {
  834|  1.58k|                    template: c,
  835|  1.58k|                    dataset: d,
  836|  1.58k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  1.58k|                    base_iri: state.base_iri.clone()
  838|  1.58k|                })
  839|  1.58k|            } /
  840|  1.58k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  1.58k|                Ok(Query::Construct {
  842|  1.58k|                    template: c.clone(),
  843|  1.58k|                    dataset: d,
  844|  1.58k|                    pattern: build_select(
  845|  1.58k|                        Selection::no_op(),
  846|  1.58k|                        GraphPattern::Bgp { patterns: c },
  847|  1.58k|                        g, h, o, l, v, state
  848|  1.58k|                    )?,
  849|  1.58k|                    base_iri: state.base_iri.clone()
  850|  1.58k|                })
  851|  1.58k|            }
  852|  1.58k|
  853|  1.58k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  1.58k|
  855|  1.58k|        rule DescribeQuery() -> Query =
  856|  1.58k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  1.58k|                Ok(Query::Describe {
  858|  1.58k|                    dataset: d,
  859|  1.58k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  1.58k|                    base_iri: state.base_iri.clone()
  861|  1.58k|                })
  862|  1.58k|            } /
  863|  1.58k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  1.58k|                Ok(Query::Describe {
  865|  1.58k|                    dataset: d,
  866|  1.58k|                    pattern: build_select(Selection {
  867|  1.58k|                        option: SelectionOption::Default,
  868|  1.58k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  1.58k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  1.58k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  1.58k|                        }).collect())
  872|  1.58k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  1.58k|                    base_iri: state.base_iri.clone()
  874|  1.58k|                })
  875|  1.58k|            }
  876|  1.58k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  1.58k|
  878|  1.58k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  1.58k|            Ok(Query::Ask {
  880|  1.58k|                dataset: d,
  881|  1.58k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  1.58k|                base_iri: state.base_iri.clone()
  883|  1.58k|            })
  884|  1.58k|        }
  885|  1.58k|
  886|  1.58k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  1.58k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  1.58k|            if d.is_empty() {
  889|  1.58k|                return None;
  890|  1.58k|            }
  891|  1.58k|            let mut default = Vec::new();
  892|  1.58k|            let mut named = Vec::new();
  893|  1.58k|            for (d, n) in d {
  894|  1.58k|                if let Some(d) = d {
  895|  1.58k|                    default.push(d);
  896|  1.58k|                }
  897|  1.58k|                if let Some(n) = n {
  898|  1.58k|                    named.push(n);
  899|  1.58k|                }
  900|  1.58k|            }
  901|  1.58k|            Some(QueryDataset {
  902|  1.58k|                default, named: Some(named)
  903|  1.58k|            })
  904|  1.58k|        }
  905|  1.58k|
  906|  1.58k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  1.58k|            (Some(s), None)
  908|  1.58k|        }
  909|  1.58k|
  910|  1.58k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  1.58k|            (None, Some(s))
  912|  1.58k|        }
  913|  1.58k|
  914|  1.58k|        rule SourceSelector() -> NamedNode = iri()
  915|  1.58k|
  916|  1.58k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  1.58k|            p
  918|  1.58k|        }
  919|  1.58k|
  920|  1.58k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  1.58k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  1.58k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  1.58k|                if let Expression::Variable(v) = e {
  924|  1.58k|                    v
  925|  1.58k|                } else {
  926|  1.58k|                    let v = vo.unwrap_or_else(variable);
  927|  1.58k|                    projections.push((e, v.clone()));
  928|  1.58k|                    v
  929|  1.58k|                }
  930|  1.58k|            }).collect();
  931|  1.58k|            (clauses, projections)
  932|  1.58k|        }
  933|  1.58k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  1.58k|
  935|  1.58k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  1.58k|            e:BuiltInCall() { (e, None) } /
  937|  1.58k|            e:FunctionCall() { (e, None) } /
  938|  1.58k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  1.58k|            e:Var() { (e.into(), None) }
  940|  1.58k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  1.58k|
  942|  1.58k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  1.58k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  1.58k|        }
  945|  1.58k|
  946|  1.58k|        rule HavingCondition() -> Expression = Constraint()
  947|  1.58k|
  948|  1.58k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  1.58k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  1.58k|
  951|  1.58k|        rule OrderCondition() -> OrderExpression =
  952|  1.58k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  1.58k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  1.58k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  1.58k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  1.58k|
  957|  1.58k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  1.58k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  1.58k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  1.58k|
  961|  1.58k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  1.58k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  1.58k|        }
  964|  1.58k|
  965|  1.58k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  1.58k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  1.58k|        }
  968|  1.58k|
  969|  1.58k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  1.58k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  1.58k|            { None }
  972|  1.58k|
  973|  1.58k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  1.58k|
  975|  1.58k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  1.58k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  1.58k|
  978|  1.58k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  1.58k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  1.58k|        }
  981|  1.58k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  1.58k|
  983|  1.58k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  1.58k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  1.58k|        }
  986|  1.58k|
  987|  1.58k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  1.58k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  1.58k|        }
  990|  1.58k|
  991|  1.58k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  1.58k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  1.58k|        }
  994|  1.58k|
  995|  1.58k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  1.58k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  1.58k|            if from == to {
  998|  1.58k|                Vec::new() // identity case
  999|  1.58k|            } else {
 1000|  1.58k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  1.58k|                vec![copy_graph(from, to)]
 1002|  1.58k|            }
 1003|  1.58k|        }
 1004|  1.58k|
 1005|  1.58k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  1.58k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  1.58k|            if from == to {
 1008|  1.58k|                Vec::new() // identity case
 1009|  1.58k|            } else {
 1010|  1.58k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  1.58k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  1.58k|            }
 1013|  1.58k|        }
 1014|  1.58k|
 1015|  1.58k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  1.58k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  1.58k|            if from == to {
 1018|  1.58k|                Vec::new() // identity case
 1019|  1.58k|            } else {
 1020|  1.58k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  1.58k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  1.58k|            }
 1023|  1.58k|        }
 1024|  1.58k|
 1025|  1.58k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  1.58k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  1.58k|        }
 1028|  1.58k|
 1029|  1.58k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  1.58k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  1.58k|        }
 1032|  1.58k|
 1033|  1.58k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  1.58k|            let pattern = d.iter().map(|q| {
 1035|  1.58k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  1.58k|                match &q.graph_name {
 1037|  1.58k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  1.58k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  1.58k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  1.58k|                }
 1041|  1.58k|            }).reduce(new_join).unwrap_or_default();
 1042|  1.58k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  1.58k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  1.58k|                delete,
 1045|  1.58k|                insert: Vec::new(),
 1046|  1.58k|                using: None,
 1047|  1.58k|                pattern: Box::new(pattern)
 1048|  1.58k|            }])
 1049|  1.58k|        }
 1050|  1.58k|
 1051|  1.58k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  1.58k|            let (delete, insert) = c;
 1053|  1.58k|            let mut delete = delete.unwrap_or_default();
 1054|  1.58k|            let mut insert = insert.unwrap_or_default();
 1055|  1.58k|            #[allow(clippy::shadow_same)]
 1056|  1.58k|            let mut pattern = pattern;
 1057|  1.58k|
 1058|  1.58k|            let mut using = if u.is_empty() {
 1059|  1.58k|                None
 1060|  1.58k|            } else {
 1061|  1.58k|                let mut default = Vec::new();
 1062|  1.58k|                let mut named = Vec::new();
 1063|  1.58k|                for (d, n) in u {
 1064|  1.58k|                    if let Some(d) = d {
 1065|  1.58k|                        default.push(d)
 1066|  1.58k|                    }
 1067|  1.58k|                    if let Some(n) = n {
 1068|  1.58k|                        named.push(n)
 1069|  1.58k|                    }
 1070|  1.58k|                }
 1071|  1.58k|                Some(QueryDataset { default, named: Some(named) })
 1072|  1.58k|            };
 1073|  1.58k|
 1074|  1.58k|            if let Some(with) = with {
 1075|  1.58k|                // We inject WITH everywhere
 1076|  1.58k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  1.58k|                    GroundQuadPattern {
 1078|  1.58k|                        subject: q.subject,
 1079|  1.58k|                        predicate: q.predicate,
 1080|  1.58k|                        object: q.object,
 1081|  1.58k|                        graph_name: with.clone().into()
 1082|  1.58k|                    }
 1083|  1.58k|                } else {
 1084|  1.58k|                    q
 1085|  1.58k|                }).collect();
 1086|  1.58k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  1.58k|                    QuadPattern {
 1088|  1.58k|                        subject: q.subject,
 1089|  1.58k|                        predicate: q.predicate,
 1090|  1.58k|                        object: q.object,
 1091|  1.58k|                        graph_name: with.clone().into()
 1092|  1.58k|                    }
 1093|  1.58k|                } else {
 1094|  1.58k|                    q
 1095|  1.58k|                }).collect();
 1096|  1.58k|                if using.is_none() {
 1097|  1.58k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  1.58k|                }
 1099|  1.58k|            }
 1100|  1.58k|
 1101|  1.58k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  1.58k|                delete,
 1103|  1.58k|                insert,
 1104|  1.58k|                using,
 1105|  1.58k|                pattern: Box::new(pattern)
 1106|  1.58k|            }]
 1107|  1.58k|        }
 1108|  1.58k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  1.58k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  1.58k|            (Some(d), i)
 1111|  1.58k|        } / i:InsertClause() {
 1112|  1.58k|            (None, Some(i))
 1113|  1.58k|        }
 1114|  1.58k|        rule Modify_clear() = {
 1115|  1.58k|            state.used_bnodes.clear();
 1116|  1.58k|            state.currently_used_bnodes.clear();
 1117|  1.58k|        }
 1118|  1.58k|
 1119|  1.58k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  1.58k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  1.58k|        }
 1122|  1.58k|
 1123|  1.58k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  1.58k|
 1125|  1.58k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  1.58k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  1.58k|            (Some(i), None)
 1128|  1.58k|        }
 1129|  1.58k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  1.58k|            (None, Some(i))
 1131|  1.58k|        }
 1132|  1.58k|
 1133|  1.58k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  1.58k|            GraphName::DefaultGraph
 1135|  1.58k|        } / (i("GRAPH") _)? g:iri() {
 1136|  1.58k|            GraphName::NamedNode(g)
 1137|  1.58k|        }
 1138|  1.58k|
 1139|  1.58k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  1.58k|
 1141|  1.58k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  1.58k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  1.58k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  1.58k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  1.58k|
 1146|  1.58k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  1.58k|
 1148|  1.58k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  1.58k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  1.58k|        }
 1151|  1.58k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  1.58k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  1.58k|        }
 1154|  1.58k|
 1155|  1.58k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  1.58k|            q.into_iter().flatten().collect()
 1157|  1.58k|        }
 1158|  1.58k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  1.58k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  1.58k|        } //TODO: return iter?
 1161|  1.58k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  1.58k|
 1163|  1.58k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  1.58k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  1.58k|        }
 1166|  1.58k|
 1167|  1.58k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  1.58k|            ts.into_iter().flatten().collect()
 1169|  1.58k|        }
 1170|  1.58k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  1.58k|
 1172|  1.58k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  1.58k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  1.58k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  1.58k|        rule GroupGraphPattern_clear() = {
 1176|  1.58k|             // We deal with blank nodes aliases rule
 1177|  1.58k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  1.58k|            state.currently_used_bnodes.clear();
 1179|  1.58k|        }
 1180|  1.58k|
 1181|  1.58k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  1.58k|            let mut filter: Option<Expression> = None;
 1183|  1.58k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  1.58k|            for e in b.into_iter().flatten() {
 1185|  1.58k|                match e {
 1186|  1.58k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  1.58k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  1.58k|                    }
 1189|  1.58k|                    #[cfg(feature = "sep-0006")]
 1190|  1.58k|                    PartialGraphPattern::Lateral(p) => {
 1191|  1.58k|                        let mut defined_variables = HashSet::default();
 1192|  1.58k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  1.58k|                        let mut contains = false;
 1194|  1.58k|                        g.on_in_scope_variable(|v| {
 1195|  1.58k|                            if defined_variables.contains(v) {
 1196|  1.58k|                                contains = true;
 1197|  1.58k|                            }
 1198|  1.58k|                        });
 1199|  1.58k|                        if contains {
 1200|  1.58k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  1.58k|                        }
 1202|  1.58k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  1.58k|                    }
 1204|  1.58k|                    PartialGraphPattern::Minus(p) => {
 1205|  1.58k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  1.58k|                    }
 1207|  1.58k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  1.58k|                        let mut contains = false;
 1209|  1.58k|                        g.on_in_scope_variable(|v| {
 1210|  1.58k|                            if *v == variable {
 1211|  1.58k|                                contains = true;
 1212|  1.58k|                            }
 1213|  1.58k|                        });
 1214|  1.58k|                        if contains {
 1215|  1.58k|                            return Err("BIND is overriding an existing variable")
 1216|  1.58k|                        }
 1217|  1.58k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  1.58k|                    }
 1219|  1.58k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  1.58k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  1.58k|                    } else {
 1222|  1.58k|                        expr
 1223|  1.58k|                    }),
 1224|  1.58k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  1.58k|                }
 1226|  1.58k|            }
 1227|  1.58k|
 1228|  1.58k|            Ok(if let Some(expr) = filter {
 1229|  1.58k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  1.58k|            } else {
 1231|  1.58k|                g
 1232|  1.58k|            })
 1233|  1.58k|        }
 1234|  1.58k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  1.58k|            let mut result = vec![a];
 1236|  1.58k|            if let Some(v) = b {
 1237|  1.58k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  1.58k|            }
 1239|  1.58k|            result
 1240|  1.58k|        }
 1241|  1.58k|
 1242|  1.58k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  1.58k|            hs.into_iter().flatten().collect()
 1244|  1.58k|        }
 1245|  1.58k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  1.58k|
 1247|  1.58k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  1.58k|
 1249|  1.58k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  1.58k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  1.58k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  1.58k|            } else {
 1253|  1.58k|               PartialGraphPattern::Optional(p, None)
 1254|  1.58k|            }
 1255|  1.58k|        }
 1256|  1.58k|
 1257|  1.58k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  1.58k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  1.58k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  1.58k|        }
 1261|  1.58k|
 1262|  1.58k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  1.58k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  1.58k|        }
 1265|  1.58k|
 1266|  1.58k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  1.58k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  1.58k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  1.58k|
 1270|  1.58k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  1.58k|            PartialGraphPattern::Bind(e, v)
 1272|  1.58k|        }
 1273|  1.58k|
 1274|  1.58k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  1.58k|
 1276|  1.58k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  1.58k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  1.58k|        }
 1279|  1.58k|
 1280|  1.58k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  1.58k|            (vec![var], d)
 1282|  1.58k|        }
 1283|  1.58k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  1.58k|
 1285|  1.58k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  1.58k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  1.58k|                Ok((vars, vals))
 1288|  1.58k|            } else {
 1289|  1.58k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  1.58k|            }
 1291|  1.58k|        }
 1292|  1.58k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  1.58k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  1.58k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  1.58k|
 1296|  1.58k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  1.58k|            t:QuotedTripleData() {?
 1298|  1.58k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  1.58k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  1.58k|            } /
 1301|  1.58k|            i:iri() { Some(i.into()) } /
 1302|  1.58k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  1.58k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  1.58k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  1.58k|            i("UNDEF") { None }
 1306|  1.58k|
 1307|  1.58k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  1.58k|            PartialGraphPattern::Minus(p)
 1309|  1.58k|        }
 1310|  1.58k|
 1311|  1.58k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  1.58k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  1.58k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  1.58k|            }).map(PartialGraphPattern::Other)
 1315|  1.58k|        }
 1316|  1.58k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  1.58k|
 1318|  1.58k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  1.58k|            PartialGraphPattern::Filter(c)
 1320|  1.58k|        }
 1321|  1.58k|
 1322|  1.58k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  1.58k|
 1324|  1.58k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  1.58k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  1.58k|        }
 1327|  1.58k|
 1328|  1.58k|        rule ArgList() -> Vec<Expression> =
 1329|  1.58k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  1.58k|            NIL() { Vec::new() }
 1331|  1.58k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  1.58k|
 1333|  1.58k|        rule ExpressionList() -> Vec<Expression> =
 1334|  1.58k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  1.58k|            NIL() { Vec::new() }
 1336|  1.58k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  1.58k|
 1338|  1.58k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  1.58k|
 1340|  1.58k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  1.58k|            p.into_iter().flatten().collect()
 1342|  1.58k|        }
 1343|  1.58k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  1.58k|
 1345|  1.58k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  1.58k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  1.58k|                let mut patterns = po.patterns;
 1348|  1.58k|                for (p, os) in po.focus {
 1349|  1.58k|                    for o in os {
 1350|  1.58k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  1.58k|                    }
 1352|  1.58k|                }
 1353|  1.58k|                Ok(patterns)
 1354|  1.58k|            } /
 1355|  1.58k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  1.58k|                let mut patterns = s.patterns;
 1357|  1.58k|                patterns.extend(po.patterns);
 1358|  1.58k|                for (p, os) in po.focus {
 1359|  1.58k|                    for o in os {
 1360|  1.58k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  1.58k|                    }
 1362|  1.58k|                }
 1363|  1.58k|                Ok(patterns)
 1364|  1.58k|            }
 1365|  1.58k|
 1366|  1.58k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  1.58k|            PropertyListNotEmpty() /
 1368|  1.58k|            { FocusedTriplePattern::default() }
 1369|  1.58k|
 1370|  1.58k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  1.58k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  1.58k|                a.focus.push(b.focus);
 1373|  1.58k|                a.patterns.extend(b.patterns);
 1374|  1.58k|                a
 1375|  1.58k|            })
 1376|  1.58k|        }
 1377|  1.58k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  1.58k|            FocusedTriplePattern {
 1379|  1.58k|                focus: (p, o.focus),
 1380|  1.58k|                patterns: o.patterns
 1381|  1.58k|            }
 1382|  1.58k|        }
 1383|  1.58k|
 1384|  1.58k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  1.58k|
 1386|  1.58k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  1.58k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  1.58k|                a.focus.push(b.focus);
 1389|  1.58k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  1.58k|                a
 1391|  1.58k|            })
 1392|  1.58k|        }
 1393|  1.58k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  1.58k|
 1395|  1.58k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  1.58k|            if let Some(a) = a {
 1397|  1.58k|                let mut patterns = g.patterns;
 1398|  1.58k|                patterns.extend(a.patterns);
 1399|  1.58k|                FocusedTriplePattern {
 1400|  1.58k|                    focus: AnnotatedTerm {
 1401|  1.58k|                        term: g.focus,
 1402|  1.58k|                        annotations: a.focus
 1403|  1.58k|                    },
 1404|  1.58k|                    patterns
 1405|  1.58k|                }
 1406|  1.58k|            } else {
 1407|  1.58k|                FocusedTriplePattern {
 1408|  1.58k|                    focus: AnnotatedTerm {
 1409|  1.58k|                        term: g.focus,
 1410|  1.58k|                        annotations: Vec::new()
 1411|  1.58k|                    },
 1412|  1.58k|                    patterns: g.patterns
 1413|  1.58k|                }
 1414|  1.58k|            }
 1415|  1.58k|        }
 1416|  1.58k|
 1417|  1.58k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  1.58k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  1.58k|                let mut patterns = po.patterns;
 1420|  1.58k|                for (p, os) in po.focus {
 1421|  1.58k|                    for o in os {
 1422|  1.58k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  1.58k|                    }
 1424|  1.58k|                }
 1425|  1.58k|                Ok(patterns)
 1426|  1.58k|            } /
 1427|  1.58k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  1.58k|                let mut patterns = s.patterns;
 1429|  1.58k|                patterns.extend(po.patterns);
 1430|  1.58k|                for (p, os) in po.focus {
 1431|  1.58k|                    for o in os {
 1432|  1.58k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  1.58k|                    }
 1434|  1.58k|                }
 1435|  1.58k|                Ok(patterns)
 1436|  1.58k|            }
 1437|  1.58k|
 1438|  1.58k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  1.58k|            PropertyListPathNotEmpty() /
 1440|  1.58k|            { FocusedTripleOrPathPattern::default() }
 1441|  1.58k|
 1442|  1.58k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  1.58k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  1.58k|                    focus: vec![(hp, ho.focus)],
 1445|  1.58k|                    patterns: ho.patterns
 1446|  1.58k|                }, |mut a, b| {
 1447|  1.58k|                    a.focus.push(b.focus);
 1448|  1.58k|                    a.patterns.extend(b.patterns);
 1449|  1.58k|                    a
 1450|  1.58k|                })
 1451|  1.58k|        }
 1452|  1.58k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  1.58k|            c
 1454|  1.58k|        }
 1455|  1.58k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  1.58k|            FocusedTripleOrPathPattern {
 1457|  1.58k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  1.58k|                patterns: o.patterns
 1459|  1.58k|            }
 1460|  1.58k|        }
 1461|  1.58k|
 1462|  1.58k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  1.58k|            p.into()
 1464|  1.58k|        }
 1465|  1.58k|
 1466|  1.58k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  1.58k|            v.into()
 1468|  1.58k|        }
 1469|  1.58k|
 1470|  1.58k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  1.58k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  1.58k|                a.focus.push(b.focus);
 1473|  1.58k|                a.patterns.extend(b.patterns);
 1474|  1.58k|                a
 1475|  1.58k|            })
 1476|  1.58k|        }
 1477|  1.58k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  1.58k|
 1479|  1.58k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  1.58k|             if let Some(a) = a {
 1481|  1.58k|                let mut patterns = g.patterns;
 1482|  1.58k|                patterns.extend(a.patterns);
 1483|  1.58k|                FocusedTripleOrPathPattern {
 1484|  1.58k|                    focus: AnnotatedTermPath {
 1485|  1.58k|                        term: g.focus,
 1486|  1.58k|                        annotations: a.focus
 1487|  1.58k|                    },
 1488|  1.58k|                    patterns
 1489|  1.58k|                }
 1490|  1.58k|            } else {
 1491|  1.58k|                FocusedTripleOrPathPattern {
 1492|  1.58k|                    focus: AnnotatedTermPath {
 1493|  1.58k|                        term: g.focus,
 1494|  1.58k|                        annotations: Vec::new()
 1495|  1.58k|                    },
 1496|  1.58k|                    patterns: g.patterns
 1497|  1.58k|                }
 1498|  1.58k|            }
 1499|  1.58k|        }
 1500|  1.58k|
 1501|  1.58k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  1.58k|
 1503|  1.58k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  1.58k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  1.58k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  1.58k|            })
 1507|  1.58k|        }
 1508|  1.58k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  1.58k|
 1510|  1.58k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  1.58k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  1.58k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  1.58k|            })
 1514|  1.58k|        }
 1515|  1.58k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  1.58k|
 1517|  1.58k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  1.58k|            match o {
 1519|  1.58k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  1.58k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  1.58k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  1.58k|                Some(_) => unreachable!(),
 1523|  1.58k|                None => p
 1524|  1.58k|            }
 1525|  1.58k|        }
 1526|  1.58k|        rule PathElt_op() -> char =
 1527|  1.58k|            "*" { '*' } /
 1528|  1.58k|            "+" { '+' } /
 1529|  1.58k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  1.58k|
 1531|  1.58k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  1.58k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  1.58k|            PathElt()
 1534|  1.58k|
 1535|  1.58k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  1.58k|            v:iri() { v.into() } /
 1537|  1.58k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  1.58k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  1.58k|            "(" _ p:Path() _ ")" { p }
 1540|  1.58k|
 1541|  1.58k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  1.58k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  1.58k|                let mut direct = Vec::new();
 1544|  1.58k|                let mut inverse = Vec::new();
 1545|  1.58k|                for e in p {
 1546|  1.58k|                    match e {
 1547|  1.58k|                        Either::Left(a) => direct.push(a),
 1548|  1.58k|                        Either::Right(b) => inverse.push(b)
 1549|  1.58k|                    }
 1550|  1.58k|                }
 1551|  1.58k|                if inverse.is_empty() {
 1552|  1.58k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  1.58k|                } else if direct.is_empty() {
 1554|  1.58k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  1.58k|                } else {
 1556|  1.58k|                    PropertyPathExpression::Alternative(
 1557|  1.58k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  1.58k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  1.58k|                    )
 1560|  1.58k|                }
 1561|  1.58k|            } /
 1562|  1.58k|            p:PathOneInPropertySet() {
 1563|  1.58k|                match p {
 1564|  1.58k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  1.58k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  1.58k|                }
 1567|  1.58k|            }
 1568|  1.58k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  1.58k|
 1570|  1.58k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  1.58k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  1.58k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  1.58k|            v:iri() { Either::Left(v) } /
 1574|  1.58k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  1.58k|
 1576|  1.58k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  1.58k|
 1578|  1.58k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  1.58k|            let mut patterns = po.patterns;
 1580|  1.58k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  1.58k|            for (p, os) in po.focus {
 1582|  1.58k|                for o in os {
 1583|  1.58k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  1.58k|                }
 1585|  1.58k|            }
 1586|  1.58k|            Ok(FocusedTriplePattern {
 1587|  1.58k|                focus: bnode,
 1588|  1.58k|                patterns
 1589|  1.58k|            })
 1590|  1.58k|        }
 1591|  1.58k|
 1592|  1.58k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  1.58k|
 1594|  1.58k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  1.58k|            let mut patterns = po.patterns;
 1596|  1.58k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  1.58k|            for (p, os) in po.focus {
 1598|  1.58k|                for o in os {
 1599|  1.58k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  1.58k|                }
 1601|  1.58k|            }
 1602|  1.58k|            Ok(FocusedTripleOrPathPattern {
 1603|  1.58k|                focus: bnode,
 1604|  1.58k|                patterns
 1605|  1.58k|            })
 1606|  1.58k|        }
 1607|  1.58k|
 1608|  1.58k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  1.58k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  1.58k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  1.58k|            for objWithPatterns in o.into_iter().rev() {
 1612|  1.58k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  1.58k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  1.58k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  1.58k|                current_list_node = new_blank_node;
 1616|  1.58k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  1.58k|            }
 1618|  1.58k|            FocusedTriplePattern {
 1619|  1.58k|                focus: current_list_node,
 1620|  1.58k|                patterns
 1621|  1.58k|            }
 1622|  1.58k|        }
 1623|  1.58k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  1.58k|
 1625|  1.58k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  1.58k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  1.58k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  1.58k|            for objWithPatterns in o.into_iter().rev() {
 1629|  1.58k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  1.58k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  1.58k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  1.58k|                current_list_node = new_blank_node;
 1633|  1.58k|                patterns.extend(objWithPatterns.patterns);
 1634|  1.58k|            }
 1635|  1.58k|            FocusedTripleOrPathPattern {
 1636|  1.58k|                focus: current_list_node,
 1637|  1.58k|                patterns
 1638|  1.58k|            }
 1639|  1.58k|        }
 1640|  1.58k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  1.58k|
 1642|  1.58k|
 1643|  1.58k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  1.58k|
 1645|  1.58k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  1.58k|
 1647|  1.58k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  1.58k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  1.58k|            TriplesNode()
 1650|  1.58k|
 1651|  1.58k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  1.58k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  1.58k|            TriplesNodePath()
 1654|  1.58k|
 1655|  1.58k|        rule VarOrTerm() -> TermPattern =
 1656|  1.58k|            v:Var() { v.into() } /
 1657|  1.58k|            t:QuotedTriple() {?
 1658|  1.58k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  1.58k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  1.58k|            } /
 1661|  1.58k|            t:GraphTerm() { t.into() }
 1662|  1.58k|
 1663|  1.58k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  1.58k|            Ok(TriplePattern {
 1665|  1.58k|                subject: s,
 1666|  1.58k|                predicate: p,
 1667|  1.58k|                object: o
 1668|  1.58k|            })
 1669|  1.58k|        }
 1670|  1.58k|
 1671|  1.58k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  1.58k|            Ok(GroundTriple {
 1673|  1.58k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  1.58k|                predicate: p,
 1675|  1.58k|                object: o
 1676|  1.58k|            })
 1677|  1.58k|        }
 1678|  1.58k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  1.58k|
 1680|  1.58k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  1.58k|            l:RDFLiteral() { l.into() } /
 1682|  1.58k|            l:NumericLiteral() { l.into() } /
 1683|  1.58k|            l:BooleanLiteral() { l.into() } /
 1684|  1.58k|            t:QuotedTripleData() {?
 1685|  1.58k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  1.58k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  1.58k|            }
 1688|  1.58k|
 1689|  1.58k|        rule VarOrIri() -> NamedNodePattern =
 1690|  1.58k|            v:Var() { v.into() } /
 1691|  1.58k|            i:iri() { i.into() }
 1692|  1.58k|
 1693|  1.58k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  1.58k|
 1695|  1.58k|        rule GraphTerm() -> Term =
 1696|  1.58k|            i:iri() { i.into() } /
 1697|  1.58k|            l:RDFLiteral() { l.into() } /
 1698|  1.58k|            l:NumericLiteral() { l.into() } /
 1699|  1.58k|            l:BooleanLiteral() { l.into() } /
 1700|  1.58k|            b:BlankNode() { b.into() } /
 1701|  1.58k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  1.58k|
 1703|  1.58k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  1.58k|
 1705|  1.58k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  1.58k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  1.58k|        }
 1708|  1.58k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  1.58k|
 1710|  1.58k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  1.58k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  1.58k|        }
 1713|  1.58k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  1.58k|
 1715|  1.58k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  1.58k|
 1717|  1.58k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  1.58k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  1.58k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  1.58k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  1.58k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  1.58k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  1.58k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  1.58k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  1.58k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  1.58k|            Some(_) => unreachable!(),
 1727|  1.58k|            None => a
 1728|  1.58k|        } }
 1729|  1.58k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  1.58k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  1.58k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  1.58k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  1.58k|
 1734|  1.58k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  1.58k|
 1736|  1.58k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  1.58k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  1.58k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  1.58k|            Some(_) => unreachable!(),
 1740|  1.58k|            None => a,
 1741|  1.58k|        } }
 1742|  1.58k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  1.58k|            (s, e)
 1744|  1.58k|        }
 1745|  1.58k|
 1746|  1.58k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  1.58k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  1.58k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  1.58k|            Some(_) => unreachable!(),
 1750|  1.58k|            None => a
 1751|  1.58k|        } }
 1752|  1.58k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  1.58k|            (s, e)
 1754|  1.58k|        }
 1755|  1.58k|
 1756|  1.58k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  1.58k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  1.58k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  1.58k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  1.58k|            Some(_) => unreachable!(),
 1761|  1.58k|            None => e,
 1762|  1.58k|        } }
 1763|  1.58k|
 1764|  1.58k|        rule PrimaryExpression() -> Expression =
 1765|  1.58k|            BrackettedExpression()  /
 1766|  1.58k|            ExprQuotedTriple() /
 1767|  1.58k|            iriOrFunction() /
 1768|  1.58k|            v:Var() { v.into() } /
 1769|  1.58k|            l:RDFLiteral() { l.into() } /
 1770|  1.58k|            l:NumericLiteral() { l.into() } /
 1771|  1.58k|            l:BooleanLiteral() { l.into() } /
 1772|  1.58k|            BuiltInCall()
 1773|  1.58k|
 1774|  1.58k|        rule ExprVarOrTerm() -> Expression =
 1775|  1.58k|            ExprQuotedTriple() /
 1776|  1.58k|            i:iri() { i.into() } /
 1777|  1.58k|            l:RDFLiteral() { l.into() } /
 1778|  1.58k|            l:NumericLiteral() { l.into() } /
 1779|  1.58k|            l:BooleanLiteral() { l.into() } /
 1780|  1.58k|            v:Var() { v.into() }
 1781|  1.58k|
 1782|  1.58k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  1.58k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  1.58k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  1.58k|        }
 1786|  1.58k|
 1787|  1.58k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  1.58k|
 1789|  1.58k|        rule BuiltInCall() -> Expression =
 1790|  1.58k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  1.58k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  1.58k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  1.58k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  1.58k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  1.58k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  1.58k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  1.58k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  1.58k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  1.58k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  1.58k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  1.58k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  1.58k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  1.58k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  1.58k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  1.58k|            SubstringExpression() /
 1806|  1.58k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  1.58k|            StrReplaceExpression() /
 1808|  1.58k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  1.58k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  1.58k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  1.58k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  1.58k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  1.58k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  1.58k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  1.58k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  1.58k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  1.58k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  1.58k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  1.58k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  1.58k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  1.58k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  1.58k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  1.58k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  1.58k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  1.58k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  1.58k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  1.58k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  1.58k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  1.58k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  1.58k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  1.58k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  1.58k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  1.58k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  1.58k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  1.58k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  1.58k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  1.58k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  1.58k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  1.58k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  1.58k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  1.58k|            RegexExpression() /
 1842|  1.58k|            ExistsFunc() /
 1843|  1.58k|            NotExistsFunc() /
 1844|  1.58k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  1.58k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  1.58k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  1.58k|            } /
 1848|  1.58k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  1.58k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  1.58k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  1.58k|            } /
 1852|  1.58k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  1.58k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  1.58k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  1.58k|            } /
 1856|  1.58k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  1.58k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  1.58k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  1.58k|            } /
 1860|  1.58k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  1.58k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  1.58k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  1.58k|            } /
 1864|  1.58k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  1.58k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  1.58k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  1.58k|            }
 1868|  1.58k|
 1869|  1.58k|        rule RegexExpression() -> Expression =
 1870|  1.58k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  1.58k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  1.58k|
 1873|  1.58k|
 1874|  1.58k|        rule SubstringExpression() -> Expression =
 1875|  1.58k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  1.58k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  1.58k|
 1878|  1.58k|
 1879|  1.58k|        rule StrReplaceExpression() -> Expression =
 1880|  1.58k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  1.58k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  1.58k|
 1883|  1.58k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  1.58k|
 1885|  1.58k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  1.58k|
 1887|  1.58k|        rule Aggregate() -> AggregateExpression =
 1888|  1.58k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  1.58k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  1.58k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  1.58k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  1.58k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  1.58k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  1.58k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  1.58k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  1.58k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  1.58k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  1.58k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  1.58k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  1.58k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  1.58k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  1.58k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  1.58k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  1.58k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  1.58k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  1.58k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  1.58k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  1.58k|
 1909|  1.58k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  1.58k|            match a {
 1911|  1.58k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  1.58k|                None => i.into()
 1913|  1.58k|            }
 1914|  1.58k|        }
 1915|  1.58k|
 1916|  1.58k|        rule RDFLiteral() -> Literal =
 1917|  1.58k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  1.58k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  1.58k|            value:String() { Literal::new_simple_literal(value) }
 1920|  1.58k|
 1921|  1.58k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  1.58k|
 1923|  1.58k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  1.58k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  1.58k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  1.58k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  1.58k|
 1928|  1.58k|        rule NumericLiteralPositive() -> Literal =
 1929|  1.58k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  1.58k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  1.58k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  1.58k|
 1933|  1.58k|
 1934|  1.58k|        rule NumericLiteralNegative() -> Literal =
 1935|  1.58k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  1.58k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  1.58k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  1.58k|
 1939|  1.58k|        rule BooleanLiteral() -> Literal =
 1940|  1.58k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  1.58k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  1.58k|
 1943|  1.58k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  1.58k|
 1945|  1.58k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  1.58k|            NamedNode::from(i)
 1947|  1.58k|        }
 1948|  1.58k|
 1949|  1.58k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  1.58k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  1.58k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  1.58k|            } else {
 1953|  1.58k|                Err("Prefix not found")
 1954|  1.58k|            } }
 1955|  1.58k|
 1956|  1.58k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  1.58k|            let node = BlankNode::new_unchecked(id);
 1958|  1.58k|            if state.used_bnodes.contains(&node) {
 1959|  1.58k|                Err("Already used blank node id")
 1960|  1.58k|            } else {
 1961|  1.58k|                state.currently_used_bnodes.insert(node.clone());
 1962|  1.58k|                Ok(node)
 1963|  1.58k|            }
 1964|  1.58k|        } / ANON() { BlankNode::default() }
 1965|  1.58k|
 1966|  1.58k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  1.58k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  1.58k|        }
 1969|  1.58k|
 1970|  1.58k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  1.58k|            ns
 1972|  1.58k|        }
 1973|  1.58k|
 1974|  1.58k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  1.58k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  1.58k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  1.58k|                iri.push_str(base);
 1978|  1.58k|                for chunk in local.split('\\') { // We remove \
 1979|  1.58k|                    iri.push_str(chunk);
 1980|  1.58k|                }
 1981|  1.58k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  1.58k|            } else {
 1983|  1.58k|                Err("Prefix not found")
 1984|  1.58k|            }
 1985|  1.58k|        }
 1986|  1.58k|
 1987|  1.58k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  1.58k|            b
 1989|  1.58k|        }
 1990|  1.58k|
 1991|  1.58k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  1.58k|
 1993|  1.58k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  1.58k|
 1995|  1.58k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  1.58k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  1.58k|        }
 1998|  1.58k|
 1999|  1.58k|        rule INTEGER() = ['0'..='9']+
 2000|  1.58k|
 2001|  1.58k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  1.58k|
 2003|  1.58k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  1.58k|
 2005|  1.58k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  1.58k|
 2007|  1.58k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  1.58k|
 2009|  1.58k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  1.58k|
 2011|  1.58k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  1.58k|
 2013|  1.58k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  1.58k|
 2015|  1.58k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  1.58k|
 2017|  1.58k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  1.58k|
 2019|  1.58k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  1.58k|             unescape_string(l)
 2021|  1.58k|        }
 2022|  1.58k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  1.58k|
 2024|  1.58k|
 2025|  1.58k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  1.58k|             unescape_string(l)
 2027|  1.58k|        }
 2028|  1.58k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  1.58k|
 2030|  1.58k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  1.58k|             unescape_string(l)
 2032|  1.58k|        }
 2033|  1.58k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  1.58k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  1.58k|
 2036|  1.58k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  1.58k|             unescape_string(l)
 2038|  1.58k|        }
 2039|  1.58k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  1.58k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  1.58k|
 2042|  1.58k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  1.58k|
 2044|  1.58k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  1.58k|
 2046|  1.58k|        rule NIL() = "(" WS()* ")"
 2047|  1.58k|
 2048|  1.58k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  1.58k|
 2050|  1.58k|        rule ANON() = "[" WS()* "]"
 2051|  1.58k|
 2052|  1.58k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  1.58k|
 2054|  1.58k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  1.58k|
 2056|  1.58k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  1.58k|
 2058|  1.58k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  1.58k|
 2060|  1.58k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  1.58k|
 2062|  1.58k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  1.58k|
 2064|  1.58k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  1.58k|
 2066|  1.58k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  1.58k|
 2068|  1.58k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  1.58k|
 2070|  1.58k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  1.58k|
 2072|  1.58k|        //space
 2073|  1.58k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  1.58k|
 2075|  1.58k|        //comment
 2076|  1.58k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  1.58k|
 2078|  1.58k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  1.58k|            if input.eq_ignore_ascii_case(literal) {
 2080|  1.58k|                Ok(())
 2081|  1.58k|            } else {
 2082|  1.58k|                Err(literal)
 2083|  1.58k|            }
 2084|  1.58k|        }
 2085|  1.58k|    }
 2086|  1.58k|}
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_DeleteClause0B7_:
  778|  1.96k|parser! {
  779|  1.96k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  1.96k|    grammar parser(state: &mut ParserState) for str {
  781|  1.96k|        pub rule QueryUnit() -> Query = Query()
  782|  1.96k|
  783|  1.96k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  1.96k|            q
  785|  1.96k|        }
  786|  1.96k|
  787|  1.96k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  1.96k|
  789|  1.96k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  1.96k|
  791|  1.96k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  1.96k|            state.base_iri = Some(i)
  793|  1.96k|        }
  794|  1.96k|
  795|  1.96k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  1.96k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  1.96k|        }
  798|  1.96k|
  799|  1.96k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  1.96k|            Ok(Query::Select {
  801|  1.96k|                dataset: d,
  802|  1.96k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  1.96k|                base_iri: state.base_iri.clone()
  804|  1.96k|            })
  805|  1.96k|        }
  806|  1.96k|
  807|  1.96k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  1.96k|            build_select(s, w, g, h, o, l, v, state)
  809|  1.96k|        }
  810|  1.96k|
  811|  1.96k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  1.96k|            Selection {
  813|  1.96k|                option: o,
  814|  1.96k|                variables: v
  815|  1.96k|            }
  816|  1.96k|        }
  817|  1.96k|        rule Selection_init() = {
  818|  1.96k|            state.aggregates.push(Vec::new())
  819|  1.96k|        }
  820|  1.96k|        rule SelectClause_option() -> SelectionOption =
  821|  1.96k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  1.96k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  1.96k|            { SelectionOption::Default }
  824|  1.96k|        rule SelectClause_variables() -> SelectionVariables =
  825|  1.96k|            "*" { SelectionVariables::Star } /
  826|  1.96k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  1.96k|        rule SelectClause_member() -> SelectionMember =
  828|  1.96k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  1.96k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  1.96k|
  831|  1.96k|        rule ConstructQuery() -> Query =
  832|  1.96k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  1.96k|                Ok(Query::Construct {
  834|  1.96k|                    template: c,
  835|  1.96k|                    dataset: d,
  836|  1.96k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  1.96k|                    base_iri: state.base_iri.clone()
  838|  1.96k|                })
  839|  1.96k|            } /
  840|  1.96k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  1.96k|                Ok(Query::Construct {
  842|  1.96k|                    template: c.clone(),
  843|  1.96k|                    dataset: d,
  844|  1.96k|                    pattern: build_select(
  845|  1.96k|                        Selection::no_op(),
  846|  1.96k|                        GraphPattern::Bgp { patterns: c },
  847|  1.96k|                        g, h, o, l, v, state
  848|  1.96k|                    )?,
  849|  1.96k|                    base_iri: state.base_iri.clone()
  850|  1.96k|                })
  851|  1.96k|            }
  852|  1.96k|
  853|  1.96k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  1.96k|
  855|  1.96k|        rule DescribeQuery() -> Query =
  856|  1.96k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  1.96k|                Ok(Query::Describe {
  858|  1.96k|                    dataset: d,
  859|  1.96k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  1.96k|                    base_iri: state.base_iri.clone()
  861|  1.96k|                })
  862|  1.96k|            } /
  863|  1.96k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  1.96k|                Ok(Query::Describe {
  865|  1.96k|                    dataset: d,
  866|  1.96k|                    pattern: build_select(Selection {
  867|  1.96k|                        option: SelectionOption::Default,
  868|  1.96k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  1.96k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  1.96k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  1.96k|                        }).collect())
  872|  1.96k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  1.96k|                    base_iri: state.base_iri.clone()
  874|  1.96k|                })
  875|  1.96k|            }
  876|  1.96k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  1.96k|
  878|  1.96k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  1.96k|            Ok(Query::Ask {
  880|  1.96k|                dataset: d,
  881|  1.96k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  1.96k|                base_iri: state.base_iri.clone()
  883|  1.96k|            })
  884|  1.96k|        }
  885|  1.96k|
  886|  1.96k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  1.96k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  1.96k|            if d.is_empty() {
  889|  1.96k|                return None;
  890|  1.96k|            }
  891|  1.96k|            let mut default = Vec::new();
  892|  1.96k|            let mut named = Vec::new();
  893|  1.96k|            for (d, n) in d {
  894|  1.96k|                if let Some(d) = d {
  895|  1.96k|                    default.push(d);
  896|  1.96k|                }
  897|  1.96k|                if let Some(n) = n {
  898|  1.96k|                    named.push(n);
  899|  1.96k|                }
  900|  1.96k|            }
  901|  1.96k|            Some(QueryDataset {
  902|  1.96k|                default, named: Some(named)
  903|  1.96k|            })
  904|  1.96k|        }
  905|  1.96k|
  906|  1.96k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  1.96k|            (Some(s), None)
  908|  1.96k|        }
  909|  1.96k|
  910|  1.96k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  1.96k|            (None, Some(s))
  912|  1.96k|        }
  913|  1.96k|
  914|  1.96k|        rule SourceSelector() -> NamedNode = iri()
  915|  1.96k|
  916|  1.96k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  1.96k|            p
  918|  1.96k|        }
  919|  1.96k|
  920|  1.96k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  1.96k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  1.96k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  1.96k|                if let Expression::Variable(v) = e {
  924|  1.96k|                    v
  925|  1.96k|                } else {
  926|  1.96k|                    let v = vo.unwrap_or_else(variable);
  927|  1.96k|                    projections.push((e, v.clone()));
  928|  1.96k|                    v
  929|  1.96k|                }
  930|  1.96k|            }).collect();
  931|  1.96k|            (clauses, projections)
  932|  1.96k|        }
  933|  1.96k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  1.96k|
  935|  1.96k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  1.96k|            e:BuiltInCall() { (e, None) } /
  937|  1.96k|            e:FunctionCall() { (e, None) } /
  938|  1.96k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  1.96k|            e:Var() { (e.into(), None) }
  940|  1.96k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  1.96k|
  942|  1.96k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  1.96k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  1.96k|        }
  945|  1.96k|
  946|  1.96k|        rule HavingCondition() -> Expression = Constraint()
  947|  1.96k|
  948|  1.96k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  1.96k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  1.96k|
  951|  1.96k|        rule OrderCondition() -> OrderExpression =
  952|  1.96k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  1.96k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  1.96k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  1.96k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  1.96k|
  957|  1.96k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  1.96k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  1.96k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  1.96k|
  961|  1.96k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  1.96k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  1.96k|        }
  964|  1.96k|
  965|  1.96k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  1.96k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  1.96k|        }
  968|  1.96k|
  969|  1.96k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  1.96k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  1.96k|            { None }
  972|  1.96k|
  973|  1.96k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  1.96k|
  975|  1.96k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  1.96k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  1.96k|
  978|  1.96k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  1.96k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  1.96k|        }
  981|  1.96k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  1.96k|
  983|  1.96k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  1.96k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  1.96k|        }
  986|  1.96k|
  987|  1.96k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  1.96k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  1.96k|        }
  990|  1.96k|
  991|  1.96k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  1.96k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  1.96k|        }
  994|  1.96k|
  995|  1.96k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  1.96k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  1.96k|            if from == to {
  998|  1.96k|                Vec::new() // identity case
  999|  1.96k|            } else {
 1000|  1.96k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  1.96k|                vec![copy_graph(from, to)]
 1002|  1.96k|            }
 1003|  1.96k|        }
 1004|  1.96k|
 1005|  1.96k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  1.96k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  1.96k|            if from == to {
 1008|  1.96k|                Vec::new() // identity case
 1009|  1.96k|            } else {
 1010|  1.96k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  1.96k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  1.96k|            }
 1013|  1.96k|        }
 1014|  1.96k|
 1015|  1.96k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  1.96k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  1.96k|            if from == to {
 1018|  1.96k|                Vec::new() // identity case
 1019|  1.96k|            } else {
 1020|  1.96k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  1.96k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  1.96k|            }
 1023|  1.96k|        }
 1024|  1.96k|
 1025|  1.96k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  1.96k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  1.96k|        }
 1028|  1.96k|
 1029|  1.96k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  1.96k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  1.96k|        }
 1032|  1.96k|
 1033|  1.96k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  1.96k|            let pattern = d.iter().map(|q| {
 1035|  1.96k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  1.96k|                match &q.graph_name {
 1037|  1.96k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  1.96k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  1.96k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  1.96k|                }
 1041|  1.96k|            }).reduce(new_join).unwrap_or_default();
 1042|  1.96k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  1.96k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  1.96k|                delete,
 1045|  1.96k|                insert: Vec::new(),
 1046|  1.96k|                using: None,
 1047|  1.96k|                pattern: Box::new(pattern)
 1048|  1.96k|            }])
 1049|  1.96k|        }
 1050|  1.96k|
 1051|  1.96k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  1.96k|            let (delete, insert) = c;
 1053|  1.96k|            let mut delete = delete.unwrap_or_default();
 1054|  1.96k|            let mut insert = insert.unwrap_or_default();
 1055|  1.96k|            #[allow(clippy::shadow_same)]
 1056|  1.96k|            let mut pattern = pattern;
 1057|  1.96k|
 1058|  1.96k|            let mut using = if u.is_empty() {
 1059|  1.96k|                None
 1060|  1.96k|            } else {
 1061|  1.96k|                let mut default = Vec::new();
 1062|  1.96k|                let mut named = Vec::new();
 1063|  1.96k|                for (d, n) in u {
 1064|  1.96k|                    if let Some(d) = d {
 1065|  1.96k|                        default.push(d)
 1066|  1.96k|                    }
 1067|  1.96k|                    if let Some(n) = n {
 1068|  1.96k|                        named.push(n)
 1069|  1.96k|                    }
 1070|  1.96k|                }
 1071|  1.96k|                Some(QueryDataset { default, named: Some(named) })
 1072|  1.96k|            };
 1073|  1.96k|
 1074|  1.96k|            if let Some(with) = with {
 1075|  1.96k|                // We inject WITH everywhere
 1076|  1.96k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  1.96k|                    GroundQuadPattern {
 1078|  1.96k|                        subject: q.subject,
 1079|  1.96k|                        predicate: q.predicate,
 1080|  1.96k|                        object: q.object,
 1081|  1.96k|                        graph_name: with.clone().into()
 1082|  1.96k|                    }
 1083|  1.96k|                } else {
 1084|  1.96k|                    q
 1085|  1.96k|                }).collect();
 1086|  1.96k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  1.96k|                    QuadPattern {
 1088|  1.96k|                        subject: q.subject,
 1089|  1.96k|                        predicate: q.predicate,
 1090|  1.96k|                        object: q.object,
 1091|  1.96k|                        graph_name: with.clone().into()
 1092|  1.96k|                    }
 1093|  1.96k|                } else {
 1094|  1.96k|                    q
 1095|  1.96k|                }).collect();
 1096|  1.96k|                if using.is_none() {
 1097|  1.96k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  1.96k|                }
 1099|  1.96k|            }
 1100|  1.96k|
 1101|  1.96k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  1.96k|                delete,
 1103|  1.96k|                insert,
 1104|  1.96k|                using,
 1105|  1.96k|                pattern: Box::new(pattern)
 1106|  1.96k|            }]
 1107|  1.96k|        }
 1108|  1.96k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  1.96k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  1.96k|            (Some(d), i)
 1111|  1.96k|        } / i:InsertClause() {
 1112|  1.96k|            (None, Some(i))
 1113|  1.96k|        }
 1114|  1.96k|        rule Modify_clear() = {
 1115|  1.96k|            state.used_bnodes.clear();
 1116|  1.96k|            state.currently_used_bnodes.clear();
 1117|  1.96k|        }
 1118|  1.96k|
 1119|  1.96k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  1.96k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  1.96k|        }
 1122|  1.96k|
 1123|  1.96k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  1.96k|
 1125|  1.96k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  1.96k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  1.96k|            (Some(i), None)
 1128|  1.96k|        }
 1129|  1.96k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  1.96k|            (None, Some(i))
 1131|  1.96k|        }
 1132|  1.96k|
 1133|  1.96k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  1.96k|            GraphName::DefaultGraph
 1135|  1.96k|        } / (i("GRAPH") _)? g:iri() {
 1136|  1.96k|            GraphName::NamedNode(g)
 1137|  1.96k|        }
 1138|  1.96k|
 1139|  1.96k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  1.96k|
 1141|  1.96k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  1.96k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  1.96k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  1.96k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  1.96k|
 1146|  1.96k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  1.96k|
 1148|  1.96k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  1.96k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  1.96k|        }
 1151|  1.96k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  1.96k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  1.96k|        }
 1154|  1.96k|
 1155|  1.96k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  1.96k|            q.into_iter().flatten().collect()
 1157|  1.96k|        }
 1158|  1.96k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  1.96k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  1.96k|        } //TODO: return iter?
 1161|  1.96k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  1.96k|
 1163|  1.96k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  1.96k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  1.96k|        }
 1166|  1.96k|
 1167|  1.96k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  1.96k|            ts.into_iter().flatten().collect()
 1169|  1.96k|        }
 1170|  1.96k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  1.96k|
 1172|  1.96k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  1.96k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  1.96k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  1.96k|        rule GroupGraphPattern_clear() = {
 1176|  1.96k|             // We deal with blank nodes aliases rule
 1177|  1.96k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  1.96k|            state.currently_used_bnodes.clear();
 1179|  1.96k|        }
 1180|  1.96k|
 1181|  1.96k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  1.96k|            let mut filter: Option<Expression> = None;
 1183|  1.96k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  1.96k|            for e in b.into_iter().flatten() {
 1185|  1.96k|                match e {
 1186|  1.96k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  1.96k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  1.96k|                    }
 1189|  1.96k|                    #[cfg(feature = "sep-0006")]
 1190|  1.96k|                    PartialGraphPattern::Lateral(p) => {
 1191|  1.96k|                        let mut defined_variables = HashSet::default();
 1192|  1.96k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  1.96k|                        let mut contains = false;
 1194|  1.96k|                        g.on_in_scope_variable(|v| {
 1195|  1.96k|                            if defined_variables.contains(v) {
 1196|  1.96k|                                contains = true;
 1197|  1.96k|                            }
 1198|  1.96k|                        });
 1199|  1.96k|                        if contains {
 1200|  1.96k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  1.96k|                        }
 1202|  1.96k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  1.96k|                    }
 1204|  1.96k|                    PartialGraphPattern::Minus(p) => {
 1205|  1.96k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  1.96k|                    }
 1207|  1.96k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  1.96k|                        let mut contains = false;
 1209|  1.96k|                        g.on_in_scope_variable(|v| {
 1210|  1.96k|                            if *v == variable {
 1211|  1.96k|                                contains = true;
 1212|  1.96k|                            }
 1213|  1.96k|                        });
 1214|  1.96k|                        if contains {
 1215|  1.96k|                            return Err("BIND is overriding an existing variable")
 1216|  1.96k|                        }
 1217|  1.96k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  1.96k|                    }
 1219|  1.96k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  1.96k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  1.96k|                    } else {
 1222|  1.96k|                        expr
 1223|  1.96k|                    }),
 1224|  1.96k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  1.96k|                }
 1226|  1.96k|            }
 1227|  1.96k|
 1228|  1.96k|            Ok(if let Some(expr) = filter {
 1229|  1.96k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  1.96k|            } else {
 1231|  1.96k|                g
 1232|  1.96k|            })
 1233|  1.96k|        }
 1234|  1.96k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  1.96k|            let mut result = vec![a];
 1236|  1.96k|            if let Some(v) = b {
 1237|  1.96k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  1.96k|            }
 1239|  1.96k|            result
 1240|  1.96k|        }
 1241|  1.96k|
 1242|  1.96k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  1.96k|            hs.into_iter().flatten().collect()
 1244|  1.96k|        }
 1245|  1.96k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  1.96k|
 1247|  1.96k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  1.96k|
 1249|  1.96k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  1.96k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  1.96k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  1.96k|            } else {
 1253|  1.96k|               PartialGraphPattern::Optional(p, None)
 1254|  1.96k|            }
 1255|  1.96k|        }
 1256|  1.96k|
 1257|  1.96k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  1.96k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  1.96k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  1.96k|        }
 1261|  1.96k|
 1262|  1.96k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  1.96k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  1.96k|        }
 1265|  1.96k|
 1266|  1.96k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  1.96k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  1.96k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  1.96k|
 1270|  1.96k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  1.96k|            PartialGraphPattern::Bind(e, v)
 1272|  1.96k|        }
 1273|  1.96k|
 1274|  1.96k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  1.96k|
 1276|  1.96k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  1.96k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  1.96k|        }
 1279|  1.96k|
 1280|  1.96k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  1.96k|            (vec![var], d)
 1282|  1.96k|        }
 1283|  1.96k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  1.96k|
 1285|  1.96k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  1.96k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  1.96k|                Ok((vars, vals))
 1288|  1.96k|            } else {
 1289|  1.96k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  1.96k|            }
 1291|  1.96k|        }
 1292|  1.96k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  1.96k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  1.96k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  1.96k|
 1296|  1.96k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  1.96k|            t:QuotedTripleData() {?
 1298|  1.96k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  1.96k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  1.96k|            } /
 1301|  1.96k|            i:iri() { Some(i.into()) } /
 1302|  1.96k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  1.96k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  1.96k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  1.96k|            i("UNDEF") { None }
 1306|  1.96k|
 1307|  1.96k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  1.96k|            PartialGraphPattern::Minus(p)
 1309|  1.96k|        }
 1310|  1.96k|
 1311|  1.96k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  1.96k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  1.96k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  1.96k|            }).map(PartialGraphPattern::Other)
 1315|  1.96k|        }
 1316|  1.96k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  1.96k|
 1318|  1.96k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  1.96k|            PartialGraphPattern::Filter(c)
 1320|  1.96k|        }
 1321|  1.96k|
 1322|  1.96k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  1.96k|
 1324|  1.96k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  1.96k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  1.96k|        }
 1327|  1.96k|
 1328|  1.96k|        rule ArgList() -> Vec<Expression> =
 1329|  1.96k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  1.96k|            NIL() { Vec::new() }
 1331|  1.96k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  1.96k|
 1333|  1.96k|        rule ExpressionList() -> Vec<Expression> =
 1334|  1.96k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  1.96k|            NIL() { Vec::new() }
 1336|  1.96k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  1.96k|
 1338|  1.96k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  1.96k|
 1340|  1.96k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  1.96k|            p.into_iter().flatten().collect()
 1342|  1.96k|        }
 1343|  1.96k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  1.96k|
 1345|  1.96k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  1.96k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  1.96k|                let mut patterns = po.patterns;
 1348|  1.96k|                for (p, os) in po.focus {
 1349|  1.96k|                    for o in os {
 1350|  1.96k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  1.96k|                    }
 1352|  1.96k|                }
 1353|  1.96k|                Ok(patterns)
 1354|  1.96k|            } /
 1355|  1.96k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  1.96k|                let mut patterns = s.patterns;
 1357|  1.96k|                patterns.extend(po.patterns);
 1358|  1.96k|                for (p, os) in po.focus {
 1359|  1.96k|                    for o in os {
 1360|  1.96k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  1.96k|                    }
 1362|  1.96k|                }
 1363|  1.96k|                Ok(patterns)
 1364|  1.96k|            }
 1365|  1.96k|
 1366|  1.96k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  1.96k|            PropertyListNotEmpty() /
 1368|  1.96k|            { FocusedTriplePattern::default() }
 1369|  1.96k|
 1370|  1.96k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  1.96k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  1.96k|                a.focus.push(b.focus);
 1373|  1.96k|                a.patterns.extend(b.patterns);
 1374|  1.96k|                a
 1375|  1.96k|            })
 1376|  1.96k|        }
 1377|  1.96k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  1.96k|            FocusedTriplePattern {
 1379|  1.96k|                focus: (p, o.focus),
 1380|  1.96k|                patterns: o.patterns
 1381|  1.96k|            }
 1382|  1.96k|        }
 1383|  1.96k|
 1384|  1.96k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  1.96k|
 1386|  1.96k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  1.96k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  1.96k|                a.focus.push(b.focus);
 1389|  1.96k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  1.96k|                a
 1391|  1.96k|            })
 1392|  1.96k|        }
 1393|  1.96k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  1.96k|
 1395|  1.96k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  1.96k|            if let Some(a) = a {
 1397|  1.96k|                let mut patterns = g.patterns;
 1398|  1.96k|                patterns.extend(a.patterns);
 1399|  1.96k|                FocusedTriplePattern {
 1400|  1.96k|                    focus: AnnotatedTerm {
 1401|  1.96k|                        term: g.focus,
 1402|  1.96k|                        annotations: a.focus
 1403|  1.96k|                    },
 1404|  1.96k|                    patterns
 1405|  1.96k|                }
 1406|  1.96k|            } else {
 1407|  1.96k|                FocusedTriplePattern {
 1408|  1.96k|                    focus: AnnotatedTerm {
 1409|  1.96k|                        term: g.focus,
 1410|  1.96k|                        annotations: Vec::new()
 1411|  1.96k|                    },
 1412|  1.96k|                    patterns: g.patterns
 1413|  1.96k|                }
 1414|  1.96k|            }
 1415|  1.96k|        }
 1416|  1.96k|
 1417|  1.96k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  1.96k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  1.96k|                let mut patterns = po.patterns;
 1420|  1.96k|                for (p, os) in po.focus {
 1421|  1.96k|                    for o in os {
 1422|  1.96k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  1.96k|                    }
 1424|  1.96k|                }
 1425|  1.96k|                Ok(patterns)
 1426|  1.96k|            } /
 1427|  1.96k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  1.96k|                let mut patterns = s.patterns;
 1429|  1.96k|                patterns.extend(po.patterns);
 1430|  1.96k|                for (p, os) in po.focus {
 1431|  1.96k|                    for o in os {
 1432|  1.96k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  1.96k|                    }
 1434|  1.96k|                }
 1435|  1.96k|                Ok(patterns)
 1436|  1.96k|            }
 1437|  1.96k|
 1438|  1.96k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  1.96k|            PropertyListPathNotEmpty() /
 1440|  1.96k|            { FocusedTripleOrPathPattern::default() }
 1441|  1.96k|
 1442|  1.96k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  1.96k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  1.96k|                    focus: vec![(hp, ho.focus)],
 1445|  1.96k|                    patterns: ho.patterns
 1446|  1.96k|                }, |mut a, b| {
 1447|  1.96k|                    a.focus.push(b.focus);
 1448|  1.96k|                    a.patterns.extend(b.patterns);
 1449|  1.96k|                    a
 1450|  1.96k|                })
 1451|  1.96k|        }
 1452|  1.96k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  1.96k|            c
 1454|  1.96k|        }
 1455|  1.96k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  1.96k|            FocusedTripleOrPathPattern {
 1457|  1.96k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  1.96k|                patterns: o.patterns
 1459|  1.96k|            }
 1460|  1.96k|        }
 1461|  1.96k|
 1462|  1.96k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  1.96k|            p.into()
 1464|  1.96k|        }
 1465|  1.96k|
 1466|  1.96k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  1.96k|            v.into()
 1468|  1.96k|        }
 1469|  1.96k|
 1470|  1.96k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  1.96k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  1.96k|                a.focus.push(b.focus);
 1473|  1.96k|                a.patterns.extend(b.patterns);
 1474|  1.96k|                a
 1475|  1.96k|            })
 1476|  1.96k|        }
 1477|  1.96k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  1.96k|
 1479|  1.96k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  1.96k|             if let Some(a) = a {
 1481|  1.96k|                let mut patterns = g.patterns;
 1482|  1.96k|                patterns.extend(a.patterns);
 1483|  1.96k|                FocusedTripleOrPathPattern {
 1484|  1.96k|                    focus: AnnotatedTermPath {
 1485|  1.96k|                        term: g.focus,
 1486|  1.96k|                        annotations: a.focus
 1487|  1.96k|                    },
 1488|  1.96k|                    patterns
 1489|  1.96k|                }
 1490|  1.96k|            } else {
 1491|  1.96k|                FocusedTripleOrPathPattern {
 1492|  1.96k|                    focus: AnnotatedTermPath {
 1493|  1.96k|                        term: g.focus,
 1494|  1.96k|                        annotations: Vec::new()
 1495|  1.96k|                    },
 1496|  1.96k|                    patterns: g.patterns
 1497|  1.96k|                }
 1498|  1.96k|            }
 1499|  1.96k|        }
 1500|  1.96k|
 1501|  1.96k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  1.96k|
 1503|  1.96k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  1.96k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  1.96k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  1.96k|            })
 1507|  1.96k|        }
 1508|  1.96k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  1.96k|
 1510|  1.96k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  1.96k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  1.96k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  1.96k|            })
 1514|  1.96k|        }
 1515|  1.96k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  1.96k|
 1517|  1.96k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  1.96k|            match o {
 1519|  1.96k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  1.96k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  1.96k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  1.96k|                Some(_) => unreachable!(),
 1523|  1.96k|                None => p
 1524|  1.96k|            }
 1525|  1.96k|        }
 1526|  1.96k|        rule PathElt_op() -> char =
 1527|  1.96k|            "*" { '*' } /
 1528|  1.96k|            "+" { '+' } /
 1529|  1.96k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  1.96k|
 1531|  1.96k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  1.96k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  1.96k|            PathElt()
 1534|  1.96k|
 1535|  1.96k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  1.96k|            v:iri() { v.into() } /
 1537|  1.96k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  1.96k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  1.96k|            "(" _ p:Path() _ ")" { p }
 1540|  1.96k|
 1541|  1.96k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  1.96k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  1.96k|                let mut direct = Vec::new();
 1544|  1.96k|                let mut inverse = Vec::new();
 1545|  1.96k|                for e in p {
 1546|  1.96k|                    match e {
 1547|  1.96k|                        Either::Left(a) => direct.push(a),
 1548|  1.96k|                        Either::Right(b) => inverse.push(b)
 1549|  1.96k|                    }
 1550|  1.96k|                }
 1551|  1.96k|                if inverse.is_empty() {
 1552|  1.96k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  1.96k|                } else if direct.is_empty() {
 1554|  1.96k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  1.96k|                } else {
 1556|  1.96k|                    PropertyPathExpression::Alternative(
 1557|  1.96k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  1.96k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  1.96k|                    )
 1560|  1.96k|                }
 1561|  1.96k|            } /
 1562|  1.96k|            p:PathOneInPropertySet() {
 1563|  1.96k|                match p {
 1564|  1.96k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  1.96k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  1.96k|                }
 1567|  1.96k|            }
 1568|  1.96k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  1.96k|
 1570|  1.96k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  1.96k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  1.96k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  1.96k|            v:iri() { Either::Left(v) } /
 1574|  1.96k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  1.96k|
 1576|  1.96k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  1.96k|
 1578|  1.96k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  1.96k|            let mut patterns = po.patterns;
 1580|  1.96k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  1.96k|            for (p, os) in po.focus {
 1582|  1.96k|                for o in os {
 1583|  1.96k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  1.96k|                }
 1585|  1.96k|            }
 1586|  1.96k|            Ok(FocusedTriplePattern {
 1587|  1.96k|                focus: bnode,
 1588|  1.96k|                patterns
 1589|  1.96k|            })
 1590|  1.96k|        }
 1591|  1.96k|
 1592|  1.96k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  1.96k|
 1594|  1.96k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  1.96k|            let mut patterns = po.patterns;
 1596|  1.96k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  1.96k|            for (p, os) in po.focus {
 1598|  1.96k|                for o in os {
 1599|  1.96k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  1.96k|                }
 1601|  1.96k|            }
 1602|  1.96k|            Ok(FocusedTripleOrPathPattern {
 1603|  1.96k|                focus: bnode,
 1604|  1.96k|                patterns
 1605|  1.96k|            })
 1606|  1.96k|        }
 1607|  1.96k|
 1608|  1.96k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  1.96k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  1.96k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  1.96k|            for objWithPatterns in o.into_iter().rev() {
 1612|  1.96k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  1.96k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  1.96k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  1.96k|                current_list_node = new_blank_node;
 1616|  1.96k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  1.96k|            }
 1618|  1.96k|            FocusedTriplePattern {
 1619|  1.96k|                focus: current_list_node,
 1620|  1.96k|                patterns
 1621|  1.96k|            }
 1622|  1.96k|        }
 1623|  1.96k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  1.96k|
 1625|  1.96k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  1.96k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  1.96k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  1.96k|            for objWithPatterns in o.into_iter().rev() {
 1629|  1.96k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  1.96k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  1.96k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  1.96k|                current_list_node = new_blank_node;
 1633|  1.96k|                patterns.extend(objWithPatterns.patterns);
 1634|  1.96k|            }
 1635|  1.96k|            FocusedTripleOrPathPattern {
 1636|  1.96k|                focus: current_list_node,
 1637|  1.96k|                patterns
 1638|  1.96k|            }
 1639|  1.96k|        }
 1640|  1.96k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  1.96k|
 1642|  1.96k|
 1643|  1.96k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  1.96k|
 1645|  1.96k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  1.96k|
 1647|  1.96k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  1.96k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  1.96k|            TriplesNode()
 1650|  1.96k|
 1651|  1.96k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  1.96k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  1.96k|            TriplesNodePath()
 1654|  1.96k|
 1655|  1.96k|        rule VarOrTerm() -> TermPattern =
 1656|  1.96k|            v:Var() { v.into() } /
 1657|  1.96k|            t:QuotedTriple() {?
 1658|  1.96k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  1.96k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  1.96k|            } /
 1661|  1.96k|            t:GraphTerm() { t.into() }
 1662|  1.96k|
 1663|  1.96k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  1.96k|            Ok(TriplePattern {
 1665|  1.96k|                subject: s,
 1666|  1.96k|                predicate: p,
 1667|  1.96k|                object: o
 1668|  1.96k|            })
 1669|  1.96k|        }
 1670|  1.96k|
 1671|  1.96k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  1.96k|            Ok(GroundTriple {
 1673|  1.96k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  1.96k|                predicate: p,
 1675|  1.96k|                object: o
 1676|  1.96k|            })
 1677|  1.96k|        }
 1678|  1.96k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  1.96k|
 1680|  1.96k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  1.96k|            l:RDFLiteral() { l.into() } /
 1682|  1.96k|            l:NumericLiteral() { l.into() } /
 1683|  1.96k|            l:BooleanLiteral() { l.into() } /
 1684|  1.96k|            t:QuotedTripleData() {?
 1685|  1.96k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  1.96k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  1.96k|            }
 1688|  1.96k|
 1689|  1.96k|        rule VarOrIri() -> NamedNodePattern =
 1690|  1.96k|            v:Var() { v.into() } /
 1691|  1.96k|            i:iri() { i.into() }
 1692|  1.96k|
 1693|  1.96k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  1.96k|
 1695|  1.96k|        rule GraphTerm() -> Term =
 1696|  1.96k|            i:iri() { i.into() } /
 1697|  1.96k|            l:RDFLiteral() { l.into() } /
 1698|  1.96k|            l:NumericLiteral() { l.into() } /
 1699|  1.96k|            l:BooleanLiteral() { l.into() } /
 1700|  1.96k|            b:BlankNode() { b.into() } /
 1701|  1.96k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  1.96k|
 1703|  1.96k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  1.96k|
 1705|  1.96k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  1.96k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  1.96k|        }
 1708|  1.96k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  1.96k|
 1710|  1.96k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  1.96k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  1.96k|        }
 1713|  1.96k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  1.96k|
 1715|  1.96k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  1.96k|
 1717|  1.96k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  1.96k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  1.96k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  1.96k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  1.96k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  1.96k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  1.96k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  1.96k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  1.96k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  1.96k|            Some(_) => unreachable!(),
 1727|  1.96k|            None => a
 1728|  1.96k|        } }
 1729|  1.96k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  1.96k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  1.96k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  1.96k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  1.96k|
 1734|  1.96k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  1.96k|
 1736|  1.96k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  1.96k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  1.96k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  1.96k|            Some(_) => unreachable!(),
 1740|  1.96k|            None => a,
 1741|  1.96k|        } }
 1742|  1.96k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  1.96k|            (s, e)
 1744|  1.96k|        }
 1745|  1.96k|
 1746|  1.96k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  1.96k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  1.96k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  1.96k|            Some(_) => unreachable!(),
 1750|  1.96k|            None => a
 1751|  1.96k|        } }
 1752|  1.96k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  1.96k|            (s, e)
 1754|  1.96k|        }
 1755|  1.96k|
 1756|  1.96k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  1.96k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  1.96k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  1.96k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  1.96k|            Some(_) => unreachable!(),
 1761|  1.96k|            None => e,
 1762|  1.96k|        } }
 1763|  1.96k|
 1764|  1.96k|        rule PrimaryExpression() -> Expression =
 1765|  1.96k|            BrackettedExpression()  /
 1766|  1.96k|            ExprQuotedTriple() /
 1767|  1.96k|            iriOrFunction() /
 1768|  1.96k|            v:Var() { v.into() } /
 1769|  1.96k|            l:RDFLiteral() { l.into() } /
 1770|  1.96k|            l:NumericLiteral() { l.into() } /
 1771|  1.96k|            l:BooleanLiteral() { l.into() } /
 1772|  1.96k|            BuiltInCall()
 1773|  1.96k|
 1774|  1.96k|        rule ExprVarOrTerm() -> Expression =
 1775|  1.96k|            ExprQuotedTriple() /
 1776|  1.96k|            i:iri() { i.into() } /
 1777|  1.96k|            l:RDFLiteral() { l.into() } /
 1778|  1.96k|            l:NumericLiteral() { l.into() } /
 1779|  1.96k|            l:BooleanLiteral() { l.into() } /
 1780|  1.96k|            v:Var() { v.into() }
 1781|  1.96k|
 1782|  1.96k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  1.96k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  1.96k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  1.96k|        }
 1786|  1.96k|
 1787|  1.96k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  1.96k|
 1789|  1.96k|        rule BuiltInCall() -> Expression =
 1790|  1.96k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  1.96k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  1.96k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  1.96k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  1.96k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  1.96k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  1.96k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  1.96k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  1.96k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  1.96k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  1.96k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  1.96k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  1.96k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  1.96k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  1.96k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  1.96k|            SubstringExpression() /
 1806|  1.96k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  1.96k|            StrReplaceExpression() /
 1808|  1.96k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  1.96k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  1.96k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  1.96k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  1.96k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  1.96k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  1.96k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  1.96k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  1.96k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  1.96k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  1.96k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  1.96k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  1.96k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  1.96k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  1.96k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  1.96k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  1.96k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  1.96k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  1.96k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  1.96k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  1.96k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  1.96k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  1.96k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  1.96k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  1.96k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  1.96k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  1.96k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  1.96k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  1.96k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  1.96k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  1.96k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  1.96k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  1.96k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  1.96k|            RegexExpression() /
 1842|  1.96k|            ExistsFunc() /
 1843|  1.96k|            NotExistsFunc() /
 1844|  1.96k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  1.96k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  1.96k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  1.96k|            } /
 1848|  1.96k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  1.96k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  1.96k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  1.96k|            } /
 1852|  1.96k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  1.96k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  1.96k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  1.96k|            } /
 1856|  1.96k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  1.96k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  1.96k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  1.96k|            } /
 1860|  1.96k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  1.96k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  1.96k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  1.96k|            } /
 1864|  1.96k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  1.96k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  1.96k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  1.96k|            }
 1868|  1.96k|
 1869|  1.96k|        rule RegexExpression() -> Expression =
 1870|  1.96k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  1.96k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  1.96k|
 1873|  1.96k|
 1874|  1.96k|        rule SubstringExpression() -> Expression =
 1875|  1.96k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  1.96k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  1.96k|
 1878|  1.96k|
 1879|  1.96k|        rule StrReplaceExpression() -> Expression =
 1880|  1.96k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  1.96k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  1.96k|
 1883|  1.96k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  1.96k|
 1885|  1.96k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  1.96k|
 1887|  1.96k|        rule Aggregate() -> AggregateExpression =
 1888|  1.96k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  1.96k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  1.96k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  1.96k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  1.96k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  1.96k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  1.96k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  1.96k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  1.96k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  1.96k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  1.96k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  1.96k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  1.96k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  1.96k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  1.96k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  1.96k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  1.96k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  1.96k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  1.96k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  1.96k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  1.96k|
 1909|  1.96k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  1.96k|            match a {
 1911|  1.96k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  1.96k|                None => i.into()
 1913|  1.96k|            }
 1914|  1.96k|        }
 1915|  1.96k|
 1916|  1.96k|        rule RDFLiteral() -> Literal =
 1917|  1.96k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  1.96k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  1.96k|            value:String() { Literal::new_simple_literal(value) }
 1920|  1.96k|
 1921|  1.96k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  1.96k|
 1923|  1.96k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  1.96k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  1.96k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  1.96k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  1.96k|
 1928|  1.96k|        rule NumericLiteralPositive() -> Literal =
 1929|  1.96k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  1.96k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  1.96k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  1.96k|
 1933|  1.96k|
 1934|  1.96k|        rule NumericLiteralNegative() -> Literal =
 1935|  1.96k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  1.96k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  1.96k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  1.96k|
 1939|  1.96k|        rule BooleanLiteral() -> Literal =
 1940|  1.96k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  1.96k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  1.96k|
 1943|  1.96k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  1.96k|
 1945|  1.96k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  1.96k|            NamedNode::from(i)
 1947|  1.96k|        }
 1948|  1.96k|
 1949|  1.96k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  1.96k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  1.96k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  1.96k|            } else {
 1953|  1.96k|                Err("Prefix not found")
 1954|  1.96k|            } }
 1955|  1.96k|
 1956|  1.96k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  1.96k|            let node = BlankNode::new_unchecked(id);
 1958|  1.96k|            if state.used_bnodes.contains(&node) {
 1959|  1.96k|                Err("Already used blank node id")
 1960|  1.96k|            } else {
 1961|  1.96k|                state.currently_used_bnodes.insert(node.clone());
 1962|  1.96k|                Ok(node)
 1963|  1.96k|            }
 1964|  1.96k|        } / ANON() { BlankNode::default() }
 1965|  1.96k|
 1966|  1.96k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  1.96k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  1.96k|        }
 1969|  1.96k|
 1970|  1.96k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  1.96k|            ns
 1972|  1.96k|        }
 1973|  1.96k|
 1974|  1.96k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  1.96k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  1.96k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  1.96k|                iri.push_str(base);
 1978|  1.96k|                for chunk in local.split('\\') { // We remove \
 1979|  1.96k|                    iri.push_str(chunk);
 1980|  1.96k|                }
 1981|  1.96k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  1.96k|            } else {
 1983|  1.96k|                Err("Prefix not found")
 1984|  1.96k|            }
 1985|  1.96k|        }
 1986|  1.96k|
 1987|  1.96k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  1.96k|            b
 1989|  1.96k|        }
 1990|  1.96k|
 1991|  1.96k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  1.96k|
 1993|  1.96k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  1.96k|
 1995|  1.96k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  1.96k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  1.96k|        }
 1998|  1.96k|
 1999|  1.96k|        rule INTEGER() = ['0'..='9']+
 2000|  1.96k|
 2001|  1.96k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  1.96k|
 2003|  1.96k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  1.96k|
 2005|  1.96k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  1.96k|
 2007|  1.96k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  1.96k|
 2009|  1.96k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  1.96k|
 2011|  1.96k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  1.96k|
 2013|  1.96k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  1.96k|
 2015|  1.96k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  1.96k|
 2017|  1.96k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  1.96k|
 2019|  1.96k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  1.96k|             unescape_string(l)
 2021|  1.96k|        }
 2022|  1.96k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  1.96k|
 2024|  1.96k|
 2025|  1.96k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  1.96k|             unescape_string(l)
 2027|  1.96k|        }
 2028|  1.96k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  1.96k|
 2030|  1.96k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  1.96k|             unescape_string(l)
 2032|  1.96k|        }
 2033|  1.96k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  1.96k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  1.96k|
 2036|  1.96k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  1.96k|             unescape_string(l)
 2038|  1.96k|        }
 2039|  1.96k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  1.96k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  1.96k|
 2042|  1.96k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  1.96k|
 2044|  1.96k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  1.96k|
 2046|  1.96k|        rule NIL() = "(" WS()* ")"
 2047|  1.96k|
 2048|  1.96k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  1.96k|
 2050|  1.96k|        rule ANON() = "[" WS()* "]"
 2051|  1.96k|
 2052|  1.96k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  1.96k|
 2054|  1.96k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  1.96k|
 2056|  1.96k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  1.96k|
 2058|  1.96k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  1.96k|
 2060|  1.96k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  1.96k|
 2062|  1.96k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  1.96k|
 2064|  1.96k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  1.96k|
 2066|  1.96k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  1.96k|
 2068|  1.96k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  1.96k|
 2070|  1.96k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  1.96k|
 2072|  1.96k|        //space
 2073|  1.96k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  1.96k|
 2075|  1.96k|        //comment
 2076|  1.96k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  1.96k|
 2078|  1.96k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  1.96k|            if input.eq_ignore_ascii_case(literal) {
 2080|  1.96k|                Ok(())
 2081|  1.96k|            } else {
 2082|  1.96k|                Err(literal)
 2083|  1.96k|            }
 2084|  1.96k|        }
 2085|  1.96k|    }
 2086|  1.96k|}
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_Update0B7_:
  973|  2.45k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser32___parse_PropertyListPathNotEmpty00B9_:
 1446|    277|                }, |mut a, b| {
 1447|    277|                    a.focus.push(b.focus);
 1448|    277|                    a.patterns.extend(b.patterns);
 1449|    277|                    a
 1450|    277|                })
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_VerbSimple0B7_:
 1466|  7.25k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  7.25k|            v.into()
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_GraphTerms3_0B7_:
 1701|    805|            NIL() { rdf::NIL.into_owned().into() }
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_DeleteWhere00B9_:
 1034|  2.14k|            let pattern = d.iter().map(|q| {
 1035|  2.14k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  2.14k|                match &q.graph_name {
 1037|  1.31k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|    253|                    GraphNamePattern::DefaultGraph => bgp,
 1039|    577|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|  2.14k|            }).reduce(new_join).unwrap_or_default();
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser36___parse_ConditionalOrExpression_item0B7_:
 1708|  1.58k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_PrimaryExpressions0_0B7_:
 1770|  1.43k|            l:NumericLiteral() { l.into() } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_GraphNode0B7_:
 1648|  14.0k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_BuiltInCalls_0B7_:
 1791|     12|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_GroupCondition_item0B7_:
  933|    283|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser31___parse_ConditionalOrExpression0B7_:
  778|  1.53k|parser! {
  779|  1.53k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  1.53k|    grammar parser(state: &mut ParserState) for str {
  781|  1.53k|        pub rule QueryUnit() -> Query = Query()
  782|  1.53k|
  783|  1.53k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  1.53k|            q
  785|  1.53k|        }
  786|  1.53k|
  787|  1.53k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  1.53k|
  789|  1.53k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  1.53k|
  791|  1.53k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  1.53k|            state.base_iri = Some(i)
  793|  1.53k|        }
  794|  1.53k|
  795|  1.53k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  1.53k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  1.53k|        }
  798|  1.53k|
  799|  1.53k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  1.53k|            Ok(Query::Select {
  801|  1.53k|                dataset: d,
  802|  1.53k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  1.53k|                base_iri: state.base_iri.clone()
  804|  1.53k|            })
  805|  1.53k|        }
  806|  1.53k|
  807|  1.53k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  1.53k|            build_select(s, w, g, h, o, l, v, state)
  809|  1.53k|        }
  810|  1.53k|
  811|  1.53k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  1.53k|            Selection {
  813|  1.53k|                option: o,
  814|  1.53k|                variables: v
  815|  1.53k|            }
  816|  1.53k|        }
  817|  1.53k|        rule Selection_init() = {
  818|  1.53k|            state.aggregates.push(Vec::new())
  819|  1.53k|        }
  820|  1.53k|        rule SelectClause_option() -> SelectionOption =
  821|  1.53k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  1.53k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  1.53k|            { SelectionOption::Default }
  824|  1.53k|        rule SelectClause_variables() -> SelectionVariables =
  825|  1.53k|            "*" { SelectionVariables::Star } /
  826|  1.53k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  1.53k|        rule SelectClause_member() -> SelectionMember =
  828|  1.53k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  1.53k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  1.53k|
  831|  1.53k|        rule ConstructQuery() -> Query =
  832|  1.53k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  1.53k|                Ok(Query::Construct {
  834|  1.53k|                    template: c,
  835|  1.53k|                    dataset: d,
  836|  1.53k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  1.53k|                    base_iri: state.base_iri.clone()
  838|  1.53k|                })
  839|  1.53k|            } /
  840|  1.53k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  1.53k|                Ok(Query::Construct {
  842|  1.53k|                    template: c.clone(),
  843|  1.53k|                    dataset: d,
  844|  1.53k|                    pattern: build_select(
  845|  1.53k|                        Selection::no_op(),
  846|  1.53k|                        GraphPattern::Bgp { patterns: c },
  847|  1.53k|                        g, h, o, l, v, state
  848|  1.53k|                    )?,
  849|  1.53k|                    base_iri: state.base_iri.clone()
  850|  1.53k|                })
  851|  1.53k|            }
  852|  1.53k|
  853|  1.53k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  1.53k|
  855|  1.53k|        rule DescribeQuery() -> Query =
  856|  1.53k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  1.53k|                Ok(Query::Describe {
  858|  1.53k|                    dataset: d,
  859|  1.53k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  1.53k|                    base_iri: state.base_iri.clone()
  861|  1.53k|                })
  862|  1.53k|            } /
  863|  1.53k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  1.53k|                Ok(Query::Describe {
  865|  1.53k|                    dataset: d,
  866|  1.53k|                    pattern: build_select(Selection {
  867|  1.53k|                        option: SelectionOption::Default,
  868|  1.53k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  1.53k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  1.53k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  1.53k|                        }).collect())
  872|  1.53k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  1.53k|                    base_iri: state.base_iri.clone()
  874|  1.53k|                })
  875|  1.53k|            }
  876|  1.53k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  1.53k|
  878|  1.53k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  1.53k|            Ok(Query::Ask {
  880|  1.53k|                dataset: d,
  881|  1.53k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  1.53k|                base_iri: state.base_iri.clone()
  883|  1.53k|            })
  884|  1.53k|        }
  885|  1.53k|
  886|  1.53k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  1.53k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  1.53k|            if d.is_empty() {
  889|  1.53k|                return None;
  890|  1.53k|            }
  891|  1.53k|            let mut default = Vec::new();
  892|  1.53k|            let mut named = Vec::new();
  893|  1.53k|            for (d, n) in d {
  894|  1.53k|                if let Some(d) = d {
  895|  1.53k|                    default.push(d);
  896|  1.53k|                }
  897|  1.53k|                if let Some(n) = n {
  898|  1.53k|                    named.push(n);
  899|  1.53k|                }
  900|  1.53k|            }
  901|  1.53k|            Some(QueryDataset {
  902|  1.53k|                default, named: Some(named)
  903|  1.53k|            })
  904|  1.53k|        }
  905|  1.53k|
  906|  1.53k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  1.53k|            (Some(s), None)
  908|  1.53k|        }
  909|  1.53k|
  910|  1.53k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  1.53k|            (None, Some(s))
  912|  1.53k|        }
  913|  1.53k|
  914|  1.53k|        rule SourceSelector() -> NamedNode = iri()
  915|  1.53k|
  916|  1.53k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  1.53k|            p
  918|  1.53k|        }
  919|  1.53k|
  920|  1.53k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  1.53k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  1.53k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  1.53k|                if let Expression::Variable(v) = e {
  924|  1.53k|                    v
  925|  1.53k|                } else {
  926|  1.53k|                    let v = vo.unwrap_or_else(variable);
  927|  1.53k|                    projections.push((e, v.clone()));
  928|  1.53k|                    v
  929|  1.53k|                }
  930|  1.53k|            }).collect();
  931|  1.53k|            (clauses, projections)
  932|  1.53k|        }
  933|  1.53k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  1.53k|
  935|  1.53k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  1.53k|            e:BuiltInCall() { (e, None) } /
  937|  1.53k|            e:FunctionCall() { (e, None) } /
  938|  1.53k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  1.53k|            e:Var() { (e.into(), None) }
  940|  1.53k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  1.53k|
  942|  1.53k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  1.53k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  1.53k|        }
  945|  1.53k|
  946|  1.53k|        rule HavingCondition() -> Expression = Constraint()
  947|  1.53k|
  948|  1.53k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  1.53k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  1.53k|
  951|  1.53k|        rule OrderCondition() -> OrderExpression =
  952|  1.53k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  1.53k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  1.53k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  1.53k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  1.53k|
  957|  1.53k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  1.53k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  1.53k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  1.53k|
  961|  1.53k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  1.53k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  1.53k|        }
  964|  1.53k|
  965|  1.53k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  1.53k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  1.53k|        }
  968|  1.53k|
  969|  1.53k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  1.53k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  1.53k|            { None }
  972|  1.53k|
  973|  1.53k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  1.53k|
  975|  1.53k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  1.53k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  1.53k|
  978|  1.53k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  1.53k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  1.53k|        }
  981|  1.53k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  1.53k|
  983|  1.53k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  1.53k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  1.53k|        }
  986|  1.53k|
  987|  1.53k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  1.53k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  1.53k|        }
  990|  1.53k|
  991|  1.53k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  1.53k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  1.53k|        }
  994|  1.53k|
  995|  1.53k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  1.53k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  1.53k|            if from == to {
  998|  1.53k|                Vec::new() // identity case
  999|  1.53k|            } else {
 1000|  1.53k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  1.53k|                vec![copy_graph(from, to)]
 1002|  1.53k|            }
 1003|  1.53k|        }
 1004|  1.53k|
 1005|  1.53k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  1.53k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  1.53k|            if from == to {
 1008|  1.53k|                Vec::new() // identity case
 1009|  1.53k|            } else {
 1010|  1.53k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  1.53k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  1.53k|            }
 1013|  1.53k|        }
 1014|  1.53k|
 1015|  1.53k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  1.53k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  1.53k|            if from == to {
 1018|  1.53k|                Vec::new() // identity case
 1019|  1.53k|            } else {
 1020|  1.53k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  1.53k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  1.53k|            }
 1023|  1.53k|        }
 1024|  1.53k|
 1025|  1.53k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  1.53k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  1.53k|        }
 1028|  1.53k|
 1029|  1.53k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  1.53k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  1.53k|        }
 1032|  1.53k|
 1033|  1.53k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  1.53k|            let pattern = d.iter().map(|q| {
 1035|  1.53k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  1.53k|                match &q.graph_name {
 1037|  1.53k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  1.53k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  1.53k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  1.53k|                }
 1041|  1.53k|            }).reduce(new_join).unwrap_or_default();
 1042|  1.53k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  1.53k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  1.53k|                delete,
 1045|  1.53k|                insert: Vec::new(),
 1046|  1.53k|                using: None,
 1047|  1.53k|                pattern: Box::new(pattern)
 1048|  1.53k|            }])
 1049|  1.53k|        }
 1050|  1.53k|
 1051|  1.53k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  1.53k|            let (delete, insert) = c;
 1053|  1.53k|            let mut delete = delete.unwrap_or_default();
 1054|  1.53k|            let mut insert = insert.unwrap_or_default();
 1055|  1.53k|            #[allow(clippy::shadow_same)]
 1056|  1.53k|            let mut pattern = pattern;
 1057|  1.53k|
 1058|  1.53k|            let mut using = if u.is_empty() {
 1059|  1.53k|                None
 1060|  1.53k|            } else {
 1061|  1.53k|                let mut default = Vec::new();
 1062|  1.53k|                let mut named = Vec::new();
 1063|  1.53k|                for (d, n) in u {
 1064|  1.53k|                    if let Some(d) = d {
 1065|  1.53k|                        default.push(d)
 1066|  1.53k|                    }
 1067|  1.53k|                    if let Some(n) = n {
 1068|  1.53k|                        named.push(n)
 1069|  1.53k|                    }
 1070|  1.53k|                }
 1071|  1.53k|                Some(QueryDataset { default, named: Some(named) })
 1072|  1.53k|            };
 1073|  1.53k|
 1074|  1.53k|            if let Some(with) = with {
 1075|  1.53k|                // We inject WITH everywhere
 1076|  1.53k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  1.53k|                    GroundQuadPattern {
 1078|  1.53k|                        subject: q.subject,
 1079|  1.53k|                        predicate: q.predicate,
 1080|  1.53k|                        object: q.object,
 1081|  1.53k|                        graph_name: with.clone().into()
 1082|  1.53k|                    }
 1083|  1.53k|                } else {
 1084|  1.53k|                    q
 1085|  1.53k|                }).collect();
 1086|  1.53k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  1.53k|                    QuadPattern {
 1088|  1.53k|                        subject: q.subject,
 1089|  1.53k|                        predicate: q.predicate,
 1090|  1.53k|                        object: q.object,
 1091|  1.53k|                        graph_name: with.clone().into()
 1092|  1.53k|                    }
 1093|  1.53k|                } else {
 1094|  1.53k|                    q
 1095|  1.53k|                }).collect();
 1096|  1.53k|                if using.is_none() {
 1097|  1.53k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  1.53k|                }
 1099|  1.53k|            }
 1100|  1.53k|
 1101|  1.53k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  1.53k|                delete,
 1103|  1.53k|                insert,
 1104|  1.53k|                using,
 1105|  1.53k|                pattern: Box::new(pattern)
 1106|  1.53k|            }]
 1107|  1.53k|        }
 1108|  1.53k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  1.53k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  1.53k|            (Some(d), i)
 1111|  1.53k|        } / i:InsertClause() {
 1112|  1.53k|            (None, Some(i))
 1113|  1.53k|        }
 1114|  1.53k|        rule Modify_clear() = {
 1115|  1.53k|            state.used_bnodes.clear();
 1116|  1.53k|            state.currently_used_bnodes.clear();
 1117|  1.53k|        }
 1118|  1.53k|
 1119|  1.53k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  1.53k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  1.53k|        }
 1122|  1.53k|
 1123|  1.53k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  1.53k|
 1125|  1.53k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  1.53k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  1.53k|            (Some(i), None)
 1128|  1.53k|        }
 1129|  1.53k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  1.53k|            (None, Some(i))
 1131|  1.53k|        }
 1132|  1.53k|
 1133|  1.53k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  1.53k|            GraphName::DefaultGraph
 1135|  1.53k|        } / (i("GRAPH") _)? g:iri() {
 1136|  1.53k|            GraphName::NamedNode(g)
 1137|  1.53k|        }
 1138|  1.53k|
 1139|  1.53k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  1.53k|
 1141|  1.53k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  1.53k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  1.53k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  1.53k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  1.53k|
 1146|  1.53k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  1.53k|
 1148|  1.53k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  1.53k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  1.53k|        }
 1151|  1.53k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  1.53k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  1.53k|        }
 1154|  1.53k|
 1155|  1.53k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  1.53k|            q.into_iter().flatten().collect()
 1157|  1.53k|        }
 1158|  1.53k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  1.53k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  1.53k|        } //TODO: return iter?
 1161|  1.53k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  1.53k|
 1163|  1.53k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  1.53k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  1.53k|        }
 1166|  1.53k|
 1167|  1.53k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  1.53k|            ts.into_iter().flatten().collect()
 1169|  1.53k|        }
 1170|  1.53k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  1.53k|
 1172|  1.53k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  1.53k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  1.53k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  1.53k|        rule GroupGraphPattern_clear() = {
 1176|  1.53k|             // We deal with blank nodes aliases rule
 1177|  1.53k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  1.53k|            state.currently_used_bnodes.clear();
 1179|  1.53k|        }
 1180|  1.53k|
 1181|  1.53k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  1.53k|            let mut filter: Option<Expression> = None;
 1183|  1.53k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  1.53k|            for e in b.into_iter().flatten() {
 1185|  1.53k|                match e {
 1186|  1.53k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  1.53k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  1.53k|                    }
 1189|  1.53k|                    #[cfg(feature = "sep-0006")]
 1190|  1.53k|                    PartialGraphPattern::Lateral(p) => {
 1191|  1.53k|                        let mut defined_variables = HashSet::default();
 1192|  1.53k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  1.53k|                        let mut contains = false;
 1194|  1.53k|                        g.on_in_scope_variable(|v| {
 1195|  1.53k|                            if defined_variables.contains(v) {
 1196|  1.53k|                                contains = true;
 1197|  1.53k|                            }
 1198|  1.53k|                        });
 1199|  1.53k|                        if contains {
 1200|  1.53k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  1.53k|                        }
 1202|  1.53k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  1.53k|                    }
 1204|  1.53k|                    PartialGraphPattern::Minus(p) => {
 1205|  1.53k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  1.53k|                    }
 1207|  1.53k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  1.53k|                        let mut contains = false;
 1209|  1.53k|                        g.on_in_scope_variable(|v| {
 1210|  1.53k|                            if *v == variable {
 1211|  1.53k|                                contains = true;
 1212|  1.53k|                            }
 1213|  1.53k|                        });
 1214|  1.53k|                        if contains {
 1215|  1.53k|                            return Err("BIND is overriding an existing variable")
 1216|  1.53k|                        }
 1217|  1.53k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  1.53k|                    }
 1219|  1.53k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  1.53k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  1.53k|                    } else {
 1222|  1.53k|                        expr
 1223|  1.53k|                    }),
 1224|  1.53k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  1.53k|                }
 1226|  1.53k|            }
 1227|  1.53k|
 1228|  1.53k|            Ok(if let Some(expr) = filter {
 1229|  1.53k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  1.53k|            } else {
 1231|  1.53k|                g
 1232|  1.53k|            })
 1233|  1.53k|        }
 1234|  1.53k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  1.53k|            let mut result = vec![a];
 1236|  1.53k|            if let Some(v) = b {
 1237|  1.53k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  1.53k|            }
 1239|  1.53k|            result
 1240|  1.53k|        }
 1241|  1.53k|
 1242|  1.53k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  1.53k|            hs.into_iter().flatten().collect()
 1244|  1.53k|        }
 1245|  1.53k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  1.53k|
 1247|  1.53k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  1.53k|
 1249|  1.53k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  1.53k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  1.53k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  1.53k|            } else {
 1253|  1.53k|               PartialGraphPattern::Optional(p, None)
 1254|  1.53k|            }
 1255|  1.53k|        }
 1256|  1.53k|
 1257|  1.53k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  1.53k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  1.53k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  1.53k|        }
 1261|  1.53k|
 1262|  1.53k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  1.53k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  1.53k|        }
 1265|  1.53k|
 1266|  1.53k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  1.53k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  1.53k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  1.53k|
 1270|  1.53k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  1.53k|            PartialGraphPattern::Bind(e, v)
 1272|  1.53k|        }
 1273|  1.53k|
 1274|  1.53k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  1.53k|
 1276|  1.53k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  1.53k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  1.53k|        }
 1279|  1.53k|
 1280|  1.53k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  1.53k|            (vec![var], d)
 1282|  1.53k|        }
 1283|  1.53k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  1.53k|
 1285|  1.53k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  1.53k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  1.53k|                Ok((vars, vals))
 1288|  1.53k|            } else {
 1289|  1.53k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  1.53k|            }
 1291|  1.53k|        }
 1292|  1.53k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  1.53k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  1.53k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  1.53k|
 1296|  1.53k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  1.53k|            t:QuotedTripleData() {?
 1298|  1.53k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  1.53k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  1.53k|            } /
 1301|  1.53k|            i:iri() { Some(i.into()) } /
 1302|  1.53k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  1.53k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  1.53k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  1.53k|            i("UNDEF") { None }
 1306|  1.53k|
 1307|  1.53k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  1.53k|            PartialGraphPattern::Minus(p)
 1309|  1.53k|        }
 1310|  1.53k|
 1311|  1.53k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  1.53k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  1.53k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  1.53k|            }).map(PartialGraphPattern::Other)
 1315|  1.53k|        }
 1316|  1.53k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  1.53k|
 1318|  1.53k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  1.53k|            PartialGraphPattern::Filter(c)
 1320|  1.53k|        }
 1321|  1.53k|
 1322|  1.53k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  1.53k|
 1324|  1.53k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  1.53k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  1.53k|        }
 1327|  1.53k|
 1328|  1.53k|        rule ArgList() -> Vec<Expression> =
 1329|  1.53k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  1.53k|            NIL() { Vec::new() }
 1331|  1.53k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  1.53k|
 1333|  1.53k|        rule ExpressionList() -> Vec<Expression> =
 1334|  1.53k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  1.53k|            NIL() { Vec::new() }
 1336|  1.53k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  1.53k|
 1338|  1.53k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  1.53k|
 1340|  1.53k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  1.53k|            p.into_iter().flatten().collect()
 1342|  1.53k|        }
 1343|  1.53k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  1.53k|
 1345|  1.53k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  1.53k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  1.53k|                let mut patterns = po.patterns;
 1348|  1.53k|                for (p, os) in po.focus {
 1349|  1.53k|                    for o in os {
 1350|  1.53k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  1.53k|                    }
 1352|  1.53k|                }
 1353|  1.53k|                Ok(patterns)
 1354|  1.53k|            } /
 1355|  1.53k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  1.53k|                let mut patterns = s.patterns;
 1357|  1.53k|                patterns.extend(po.patterns);
 1358|  1.53k|                for (p, os) in po.focus {
 1359|  1.53k|                    for o in os {
 1360|  1.53k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  1.53k|                    }
 1362|  1.53k|                }
 1363|  1.53k|                Ok(patterns)
 1364|  1.53k|            }
 1365|  1.53k|
 1366|  1.53k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  1.53k|            PropertyListNotEmpty() /
 1368|  1.53k|            { FocusedTriplePattern::default() }
 1369|  1.53k|
 1370|  1.53k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  1.53k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  1.53k|                a.focus.push(b.focus);
 1373|  1.53k|                a.patterns.extend(b.patterns);
 1374|  1.53k|                a
 1375|  1.53k|            })
 1376|  1.53k|        }
 1377|  1.53k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  1.53k|            FocusedTriplePattern {
 1379|  1.53k|                focus: (p, o.focus),
 1380|  1.53k|                patterns: o.patterns
 1381|  1.53k|            }
 1382|  1.53k|        }
 1383|  1.53k|
 1384|  1.53k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  1.53k|
 1386|  1.53k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  1.53k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  1.53k|                a.focus.push(b.focus);
 1389|  1.53k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  1.53k|                a
 1391|  1.53k|            })
 1392|  1.53k|        }
 1393|  1.53k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  1.53k|
 1395|  1.53k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  1.53k|            if let Some(a) = a {
 1397|  1.53k|                let mut patterns = g.patterns;
 1398|  1.53k|                patterns.extend(a.patterns);
 1399|  1.53k|                FocusedTriplePattern {
 1400|  1.53k|                    focus: AnnotatedTerm {
 1401|  1.53k|                        term: g.focus,
 1402|  1.53k|                        annotations: a.focus
 1403|  1.53k|                    },
 1404|  1.53k|                    patterns
 1405|  1.53k|                }
 1406|  1.53k|            } else {
 1407|  1.53k|                FocusedTriplePattern {
 1408|  1.53k|                    focus: AnnotatedTerm {
 1409|  1.53k|                        term: g.focus,
 1410|  1.53k|                        annotations: Vec::new()
 1411|  1.53k|                    },
 1412|  1.53k|                    patterns: g.patterns
 1413|  1.53k|                }
 1414|  1.53k|            }
 1415|  1.53k|        }
 1416|  1.53k|
 1417|  1.53k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  1.53k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  1.53k|                let mut patterns = po.patterns;
 1420|  1.53k|                for (p, os) in po.focus {
 1421|  1.53k|                    for o in os {
 1422|  1.53k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  1.53k|                    }
 1424|  1.53k|                }
 1425|  1.53k|                Ok(patterns)
 1426|  1.53k|            } /
 1427|  1.53k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  1.53k|                let mut patterns = s.patterns;
 1429|  1.53k|                patterns.extend(po.patterns);
 1430|  1.53k|                for (p, os) in po.focus {
 1431|  1.53k|                    for o in os {
 1432|  1.53k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  1.53k|                    }
 1434|  1.53k|                }
 1435|  1.53k|                Ok(patterns)
 1436|  1.53k|            }
 1437|  1.53k|
 1438|  1.53k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  1.53k|            PropertyListPathNotEmpty() /
 1440|  1.53k|            { FocusedTripleOrPathPattern::default() }
 1441|  1.53k|
 1442|  1.53k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  1.53k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  1.53k|                    focus: vec![(hp, ho.focus)],
 1445|  1.53k|                    patterns: ho.patterns
 1446|  1.53k|                }, |mut a, b| {
 1447|  1.53k|                    a.focus.push(b.focus);
 1448|  1.53k|                    a.patterns.extend(b.patterns);
 1449|  1.53k|                    a
 1450|  1.53k|                })
 1451|  1.53k|        }
 1452|  1.53k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  1.53k|            c
 1454|  1.53k|        }
 1455|  1.53k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  1.53k|            FocusedTripleOrPathPattern {
 1457|  1.53k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  1.53k|                patterns: o.patterns
 1459|  1.53k|            }
 1460|  1.53k|        }
 1461|  1.53k|
 1462|  1.53k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  1.53k|            p.into()
 1464|  1.53k|        }
 1465|  1.53k|
 1466|  1.53k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  1.53k|            v.into()
 1468|  1.53k|        }
 1469|  1.53k|
 1470|  1.53k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  1.53k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  1.53k|                a.focus.push(b.focus);
 1473|  1.53k|                a.patterns.extend(b.patterns);
 1474|  1.53k|                a
 1475|  1.53k|            })
 1476|  1.53k|        }
 1477|  1.53k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  1.53k|
 1479|  1.53k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  1.53k|             if let Some(a) = a {
 1481|  1.53k|                let mut patterns = g.patterns;
 1482|  1.53k|                patterns.extend(a.patterns);
 1483|  1.53k|                FocusedTripleOrPathPattern {
 1484|  1.53k|                    focus: AnnotatedTermPath {
 1485|  1.53k|                        term: g.focus,
 1486|  1.53k|                        annotations: a.focus
 1487|  1.53k|                    },
 1488|  1.53k|                    patterns
 1489|  1.53k|                }
 1490|  1.53k|            } else {
 1491|  1.53k|                FocusedTripleOrPathPattern {
 1492|  1.53k|                    focus: AnnotatedTermPath {
 1493|  1.53k|                        term: g.focus,
 1494|  1.53k|                        annotations: Vec::new()
 1495|  1.53k|                    },
 1496|  1.53k|                    patterns: g.patterns
 1497|  1.53k|                }
 1498|  1.53k|            }
 1499|  1.53k|        }
 1500|  1.53k|
 1501|  1.53k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  1.53k|
 1503|  1.53k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  1.53k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  1.53k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  1.53k|            })
 1507|  1.53k|        }
 1508|  1.53k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  1.53k|
 1510|  1.53k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  1.53k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  1.53k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  1.53k|            })
 1514|  1.53k|        }
 1515|  1.53k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  1.53k|
 1517|  1.53k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  1.53k|            match o {
 1519|  1.53k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  1.53k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  1.53k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  1.53k|                Some(_) => unreachable!(),
 1523|  1.53k|                None => p
 1524|  1.53k|            }
 1525|  1.53k|        }
 1526|  1.53k|        rule PathElt_op() -> char =
 1527|  1.53k|            "*" { '*' } /
 1528|  1.53k|            "+" { '+' } /
 1529|  1.53k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  1.53k|
 1531|  1.53k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  1.53k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  1.53k|            PathElt()
 1534|  1.53k|
 1535|  1.53k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  1.53k|            v:iri() { v.into() } /
 1537|  1.53k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  1.53k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  1.53k|            "(" _ p:Path() _ ")" { p }
 1540|  1.53k|
 1541|  1.53k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  1.53k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  1.53k|                let mut direct = Vec::new();
 1544|  1.53k|                let mut inverse = Vec::new();
 1545|  1.53k|                for e in p {
 1546|  1.53k|                    match e {
 1547|  1.53k|                        Either::Left(a) => direct.push(a),
 1548|  1.53k|                        Either::Right(b) => inverse.push(b)
 1549|  1.53k|                    }
 1550|  1.53k|                }
 1551|  1.53k|                if inverse.is_empty() {
 1552|  1.53k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  1.53k|                } else if direct.is_empty() {
 1554|  1.53k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  1.53k|                } else {
 1556|  1.53k|                    PropertyPathExpression::Alternative(
 1557|  1.53k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  1.53k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  1.53k|                    )
 1560|  1.53k|                }
 1561|  1.53k|            } /
 1562|  1.53k|            p:PathOneInPropertySet() {
 1563|  1.53k|                match p {
 1564|  1.53k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  1.53k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  1.53k|                }
 1567|  1.53k|            }
 1568|  1.53k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  1.53k|
 1570|  1.53k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  1.53k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  1.53k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  1.53k|            v:iri() { Either::Left(v) } /
 1574|  1.53k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  1.53k|
 1576|  1.53k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  1.53k|
 1578|  1.53k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  1.53k|            let mut patterns = po.patterns;
 1580|  1.53k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  1.53k|            for (p, os) in po.focus {
 1582|  1.53k|                for o in os {
 1583|  1.53k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  1.53k|                }
 1585|  1.53k|            }
 1586|  1.53k|            Ok(FocusedTriplePattern {
 1587|  1.53k|                focus: bnode,
 1588|  1.53k|                patterns
 1589|  1.53k|            })
 1590|  1.53k|        }
 1591|  1.53k|
 1592|  1.53k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  1.53k|
 1594|  1.53k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  1.53k|            let mut patterns = po.patterns;
 1596|  1.53k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  1.53k|            for (p, os) in po.focus {
 1598|  1.53k|                for o in os {
 1599|  1.53k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  1.53k|                }
 1601|  1.53k|            }
 1602|  1.53k|            Ok(FocusedTripleOrPathPattern {
 1603|  1.53k|                focus: bnode,
 1604|  1.53k|                patterns
 1605|  1.53k|            })
 1606|  1.53k|        }
 1607|  1.53k|
 1608|  1.53k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  1.53k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  1.53k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  1.53k|            for objWithPatterns in o.into_iter().rev() {
 1612|  1.53k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  1.53k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  1.53k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  1.53k|                current_list_node = new_blank_node;
 1616|  1.53k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  1.53k|            }
 1618|  1.53k|            FocusedTriplePattern {
 1619|  1.53k|                focus: current_list_node,
 1620|  1.53k|                patterns
 1621|  1.53k|            }
 1622|  1.53k|        }
 1623|  1.53k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  1.53k|
 1625|  1.53k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  1.53k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  1.53k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  1.53k|            for objWithPatterns in o.into_iter().rev() {
 1629|  1.53k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  1.53k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  1.53k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  1.53k|                current_list_node = new_blank_node;
 1633|  1.53k|                patterns.extend(objWithPatterns.patterns);
 1634|  1.53k|            }
 1635|  1.53k|            FocusedTripleOrPathPattern {
 1636|  1.53k|                focus: current_list_node,
 1637|  1.53k|                patterns
 1638|  1.53k|            }
 1639|  1.53k|        }
 1640|  1.53k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  1.53k|
 1642|  1.53k|
 1643|  1.53k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  1.53k|
 1645|  1.53k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  1.53k|
 1647|  1.53k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  1.53k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  1.53k|            TriplesNode()
 1650|  1.53k|
 1651|  1.53k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  1.53k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  1.53k|            TriplesNodePath()
 1654|  1.53k|
 1655|  1.53k|        rule VarOrTerm() -> TermPattern =
 1656|  1.53k|            v:Var() { v.into() } /
 1657|  1.53k|            t:QuotedTriple() {?
 1658|  1.53k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  1.53k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  1.53k|            } /
 1661|  1.53k|            t:GraphTerm() { t.into() }
 1662|  1.53k|
 1663|  1.53k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  1.53k|            Ok(TriplePattern {
 1665|  1.53k|                subject: s,
 1666|  1.53k|                predicate: p,
 1667|  1.53k|                object: o
 1668|  1.53k|            })
 1669|  1.53k|        }
 1670|  1.53k|
 1671|  1.53k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  1.53k|            Ok(GroundTriple {
 1673|  1.53k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  1.53k|                predicate: p,
 1675|  1.53k|                object: o
 1676|  1.53k|            })
 1677|  1.53k|        }
 1678|  1.53k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  1.53k|
 1680|  1.53k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  1.53k|            l:RDFLiteral() { l.into() } /
 1682|  1.53k|            l:NumericLiteral() { l.into() } /
 1683|  1.53k|            l:BooleanLiteral() { l.into() } /
 1684|  1.53k|            t:QuotedTripleData() {?
 1685|  1.53k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  1.53k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  1.53k|            }
 1688|  1.53k|
 1689|  1.53k|        rule VarOrIri() -> NamedNodePattern =
 1690|  1.53k|            v:Var() { v.into() } /
 1691|  1.53k|            i:iri() { i.into() }
 1692|  1.53k|
 1693|  1.53k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  1.53k|
 1695|  1.53k|        rule GraphTerm() -> Term =
 1696|  1.53k|            i:iri() { i.into() } /
 1697|  1.53k|            l:RDFLiteral() { l.into() } /
 1698|  1.53k|            l:NumericLiteral() { l.into() } /
 1699|  1.53k|            l:BooleanLiteral() { l.into() } /
 1700|  1.53k|            b:BlankNode() { b.into() } /
 1701|  1.53k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  1.53k|
 1703|  1.53k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  1.53k|
 1705|  1.53k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  1.53k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  1.53k|        }
 1708|  1.53k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  1.53k|
 1710|  1.53k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  1.53k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  1.53k|        }
 1713|  1.53k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  1.53k|
 1715|  1.53k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  1.53k|
 1717|  1.53k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  1.53k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  1.53k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  1.53k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  1.53k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  1.53k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  1.53k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  1.53k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  1.53k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  1.53k|            Some(_) => unreachable!(),
 1727|  1.53k|            None => a
 1728|  1.53k|        } }
 1729|  1.53k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  1.53k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  1.53k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  1.53k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  1.53k|
 1734|  1.53k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  1.53k|
 1736|  1.53k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  1.53k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  1.53k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  1.53k|            Some(_) => unreachable!(),
 1740|  1.53k|            None => a,
 1741|  1.53k|        } }
 1742|  1.53k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  1.53k|            (s, e)
 1744|  1.53k|        }
 1745|  1.53k|
 1746|  1.53k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  1.53k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  1.53k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  1.53k|            Some(_) => unreachable!(),
 1750|  1.53k|            None => a
 1751|  1.53k|        } }
 1752|  1.53k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  1.53k|            (s, e)
 1754|  1.53k|        }
 1755|  1.53k|
 1756|  1.53k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  1.53k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  1.53k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  1.53k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  1.53k|            Some(_) => unreachable!(),
 1761|  1.53k|            None => e,
 1762|  1.53k|        } }
 1763|  1.53k|
 1764|  1.53k|        rule PrimaryExpression() -> Expression =
 1765|  1.53k|            BrackettedExpression()  /
 1766|  1.53k|            ExprQuotedTriple() /
 1767|  1.53k|            iriOrFunction() /
 1768|  1.53k|            v:Var() { v.into() } /
 1769|  1.53k|            l:RDFLiteral() { l.into() } /
 1770|  1.53k|            l:NumericLiteral() { l.into() } /
 1771|  1.53k|            l:BooleanLiteral() { l.into() } /
 1772|  1.53k|            BuiltInCall()
 1773|  1.53k|
 1774|  1.53k|        rule ExprVarOrTerm() -> Expression =
 1775|  1.53k|            ExprQuotedTriple() /
 1776|  1.53k|            i:iri() { i.into() } /
 1777|  1.53k|            l:RDFLiteral() { l.into() } /
 1778|  1.53k|            l:NumericLiteral() { l.into() } /
 1779|  1.53k|            l:BooleanLiteral() { l.into() } /
 1780|  1.53k|            v:Var() { v.into() }
 1781|  1.53k|
 1782|  1.53k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  1.53k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  1.53k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  1.53k|        }
 1786|  1.53k|
 1787|  1.53k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  1.53k|
 1789|  1.53k|        rule BuiltInCall() -> Expression =
 1790|  1.53k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  1.53k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  1.53k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  1.53k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  1.53k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  1.53k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  1.53k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  1.53k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  1.53k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  1.53k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  1.53k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  1.53k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  1.53k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  1.53k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  1.53k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  1.53k|            SubstringExpression() /
 1806|  1.53k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  1.53k|            StrReplaceExpression() /
 1808|  1.53k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  1.53k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  1.53k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  1.53k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  1.53k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  1.53k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  1.53k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  1.53k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  1.53k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  1.53k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  1.53k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  1.53k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  1.53k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  1.53k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  1.53k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  1.53k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  1.53k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  1.53k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  1.53k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  1.53k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  1.53k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  1.53k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  1.53k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  1.53k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  1.53k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  1.53k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  1.53k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  1.53k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  1.53k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  1.53k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  1.53k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  1.53k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  1.53k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  1.53k|            RegexExpression() /
 1842|  1.53k|            ExistsFunc() /
 1843|  1.53k|            NotExistsFunc() /
 1844|  1.53k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  1.53k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  1.53k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  1.53k|            } /
 1848|  1.53k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  1.53k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  1.53k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  1.53k|            } /
 1852|  1.53k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  1.53k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  1.53k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  1.53k|            } /
 1856|  1.53k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  1.53k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  1.53k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  1.53k|            } /
 1860|  1.53k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  1.53k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  1.53k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  1.53k|            } /
 1864|  1.53k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  1.53k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  1.53k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  1.53k|            }
 1868|  1.53k|
 1869|  1.53k|        rule RegexExpression() -> Expression =
 1870|  1.53k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  1.53k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  1.53k|
 1873|  1.53k|
 1874|  1.53k|        rule SubstringExpression() -> Expression =
 1875|  1.53k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  1.53k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  1.53k|
 1878|  1.53k|
 1879|  1.53k|        rule StrReplaceExpression() -> Expression =
 1880|  1.53k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  1.53k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  1.53k|
 1883|  1.53k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  1.53k|
 1885|  1.53k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  1.53k|
 1887|  1.53k|        rule Aggregate() -> AggregateExpression =
 1888|  1.53k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  1.53k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  1.53k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  1.53k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  1.53k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  1.53k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  1.53k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  1.53k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  1.53k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  1.53k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  1.53k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  1.53k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  1.53k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  1.53k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  1.53k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  1.53k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  1.53k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  1.53k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  1.53k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  1.53k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  1.53k|
 1909|  1.53k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  1.53k|            match a {
 1911|  1.53k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  1.53k|                None => i.into()
 1913|  1.53k|            }
 1914|  1.53k|        }
 1915|  1.53k|
 1916|  1.53k|        rule RDFLiteral() -> Literal =
 1917|  1.53k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  1.53k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  1.53k|            value:String() { Literal::new_simple_literal(value) }
 1920|  1.53k|
 1921|  1.53k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  1.53k|
 1923|  1.53k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  1.53k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  1.53k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  1.53k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  1.53k|
 1928|  1.53k|        rule NumericLiteralPositive() -> Literal =
 1929|  1.53k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  1.53k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  1.53k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  1.53k|
 1933|  1.53k|
 1934|  1.53k|        rule NumericLiteralNegative() -> Literal =
 1935|  1.53k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  1.53k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  1.53k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  1.53k|
 1939|  1.53k|        rule BooleanLiteral() -> Literal =
 1940|  1.53k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  1.53k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  1.53k|
 1943|  1.53k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  1.53k|
 1945|  1.53k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  1.53k|            NamedNode::from(i)
 1947|  1.53k|        }
 1948|  1.53k|
 1949|  1.53k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  1.53k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  1.53k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  1.53k|            } else {
 1953|  1.53k|                Err("Prefix not found")
 1954|  1.53k|            } }
 1955|  1.53k|
 1956|  1.53k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  1.53k|            let node = BlankNode::new_unchecked(id);
 1958|  1.53k|            if state.used_bnodes.contains(&node) {
 1959|  1.53k|                Err("Already used blank node id")
 1960|  1.53k|            } else {
 1961|  1.53k|                state.currently_used_bnodes.insert(node.clone());
 1962|  1.53k|                Ok(node)
 1963|  1.53k|            }
 1964|  1.53k|        } / ANON() { BlankNode::default() }
 1965|  1.53k|
 1966|  1.53k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  1.53k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  1.53k|        }
 1969|  1.53k|
 1970|  1.53k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  1.53k|            ns
 1972|  1.53k|        }
 1973|  1.53k|
 1974|  1.53k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  1.53k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  1.53k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  1.53k|                iri.push_str(base);
 1978|  1.53k|                for chunk in local.split('\\') { // We remove \
 1979|  1.53k|                    iri.push_str(chunk);
 1980|  1.53k|                }
 1981|  1.53k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  1.53k|            } else {
 1983|  1.53k|                Err("Prefix not found")
 1984|  1.53k|            }
 1985|  1.53k|        }
 1986|  1.53k|
 1987|  1.53k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  1.53k|            b
 1989|  1.53k|        }
 1990|  1.53k|
 1991|  1.53k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  1.53k|
 1993|  1.53k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  1.53k|
 1995|  1.53k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  1.53k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  1.53k|        }
 1998|  1.53k|
 1999|  1.53k|        rule INTEGER() = ['0'..='9']+
 2000|  1.53k|
 2001|  1.53k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  1.53k|
 2003|  1.53k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  1.53k|
 2005|  1.53k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  1.53k|
 2007|  1.53k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  1.53k|
 2009|  1.53k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  1.53k|
 2011|  1.53k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  1.53k|
 2013|  1.53k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  1.53k|
 2015|  1.53k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  1.53k|
 2017|  1.53k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  1.53k|
 2019|  1.53k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  1.53k|             unescape_string(l)
 2021|  1.53k|        }
 2022|  1.53k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  1.53k|
 2024|  1.53k|
 2025|  1.53k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  1.53k|             unescape_string(l)
 2027|  1.53k|        }
 2028|  1.53k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  1.53k|
 2030|  1.53k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  1.53k|             unescape_string(l)
 2032|  1.53k|        }
 2033|  1.53k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  1.53k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  1.53k|
 2036|  1.53k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  1.53k|             unescape_string(l)
 2038|  1.53k|        }
 2039|  1.53k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  1.53k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  1.53k|
 2042|  1.53k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  1.53k|
 2044|  1.53k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  1.53k|
 2046|  1.53k|        rule NIL() = "(" WS()* ")"
 2047|  1.53k|
 2048|  1.53k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  1.53k|
 2050|  1.53k|        rule ANON() = "[" WS()* "]"
 2051|  1.53k|
 2052|  1.53k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  1.53k|
 2054|  1.53k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  1.53k|
 2056|  1.53k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  1.53k|
 2058|  1.53k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  1.53k|
 2060|  1.53k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  1.53k|
 2062|  1.53k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  1.53k|
 2064|  1.53k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  1.53k|
 2066|  1.53k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  1.53k|
 2068|  1.53k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  1.53k|
 2070|  1.53k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  1.53k|
 2072|  1.53k|        //space
 2073|  1.53k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  1.53k|
 2075|  1.53k|        //comment
 2076|  1.53k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  1.53k|
 2078|  1.53k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  1.53k|            if input.eq_ignore_ascii_case(literal) {
 2080|  1.53k|                Ok(())
 2081|  1.53k|            } else {
 2082|  1.53k|                Err(literal)
 2083|  1.53k|            }
 2084|  1.53k|        }
 2085|  1.53k|    }
 2086|  1.53k|}
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_ObjectList_item0B7_:
 1393|  14.0k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_GroupGraphPatternSub0s_0B9_:
 1209|      6|                        g.on_in_scope_variable(|v| {
 1210|      6|                            if *v == variable {
 1211|      2|                                contains = true;
 1212|      4|                            }
 1213|      6|                        });
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_DeleteData0B7_:
 1029|     59|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|     59|            vec![GraphUpdateOperation::DeleteData { data }]
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_GraphGraphPattern0B7_:
 1262|     56|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|     56|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_Update1_silent0B7_:
  976|  1.95k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_TriplesSameSubjectPaths_0B7_:
  778|    516|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|       |            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|       |                Ok((vars, vals))
 1288|       |            } else {
 1289|       |                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|       |            }
 1291|       |        }
 1292|       |        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|       |        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|       |        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|       |
 1296|       |        rule DataBlockValue() -> Option<GroundTerm> =
 1297|       |            t:QuotedTripleData() {?
 1298|       |                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|       |            } /
 1301|       |            i:iri() { Some(i.into()) } /
 1302|       |            l:RDFLiteral() { Some(l.into()) } /
 1303|       |            l:NumericLiteral() { Some(l.into()) } /
 1304|       |            l:BooleanLiteral() { Some(l.into()) } /
 1305|       |            i("UNDEF") { None }
 1306|       |
 1307|       |        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|       |            PartialGraphPattern::Minus(p)
 1309|       |        }
 1310|       |
 1311|       |        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|       |            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|       |            }).map(PartialGraphPattern::Other)
 1315|       |        }
 1316|       |        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|       |
 1318|       |        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|       |            PartialGraphPattern::Filter(c)
 1320|       |        }
 1321|       |
 1322|       |        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|       |
 1324|       |        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|       |            Expression::FunctionCall(Function::Custom(f), a)
 1326|       |        }
 1327|       |
 1328|       |        rule ArgList() -> Vec<Expression> =
 1329|       |            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|       |            NIL() { Vec::new() }
 1331|       |        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|       |
 1333|       |        rule ExpressionList() -> Vec<Expression> =
 1334|       |            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|       |            NIL() { Vec::new() }
 1336|       |        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|       |
 1338|       |        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|       |
 1340|       |        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|       |            p.into_iter().flatten().collect()
 1342|       |        }
 1343|       |        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|       |
 1345|       |        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|       |            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|       |                let mut patterns = po.patterns;
 1348|       |                for (p, os) in po.focus {
 1349|       |                    for o in os {
 1350|       |                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|       |                    }
 1352|       |                }
 1353|       |                Ok(patterns)
 1354|       |            } /
 1355|       |            s:TriplesNode() _ po:PropertyList() {?
 1356|       |                let mut patterns = s.patterns;
 1357|       |                patterns.extend(po.patterns);
 1358|       |                for (p, os) in po.focus {
 1359|       |                    for o in os {
 1360|       |                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|       |                    }
 1362|       |                }
 1363|       |                Ok(patterns)
 1364|       |            }
 1365|       |
 1366|       |        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|       |            PropertyListNotEmpty() /
 1368|       |            { FocusedTriplePattern::default() }
 1369|       |
 1370|       |        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|       |            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|       |                a.focus.push(b.focus);
 1373|       |                a.patterns.extend(b.patterns);
 1374|       |                a
 1375|       |            })
 1376|       |        }
 1377|       |        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|       |            FocusedTriplePattern {
 1379|       |                focus: (p, o.focus),
 1380|       |                patterns: o.patterns
 1381|       |            }
 1382|       |        }
 1383|       |
 1384|       |        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|       |
 1386|       |        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|       |            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|       |                a.focus.push(b.focus);
 1389|       |                a.patterns.extend_from_slice(&b.patterns);
 1390|       |                a
 1391|       |            })
 1392|       |        }
 1393|       |        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|       |
 1395|       |        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|       |            if let Some(a) = a {
 1397|       |                let mut patterns = g.patterns;
 1398|       |                patterns.extend(a.patterns);
 1399|       |                FocusedTriplePattern {
 1400|       |                    focus: AnnotatedTerm {
 1401|       |                        term: g.focus,
 1402|       |                        annotations: a.focus
 1403|       |                    },
 1404|       |                    patterns
 1405|       |                }
 1406|       |            } else {
 1407|       |                FocusedTriplePattern {
 1408|       |                    focus: AnnotatedTerm {
 1409|       |                        term: g.focus,
 1410|       |                        annotations: Vec::new()
 1411|       |                    },
 1412|       |                    patterns: g.patterns
 1413|       |                }
 1414|       |            }
 1415|       |        }
 1416|       |
 1417|       |        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|       |            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|       |                let mut patterns = po.patterns;
 1420|       |                for (p, os) in po.focus {
 1421|       |                    for o in os {
 1422|       |                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|       |                    }
 1424|       |                }
 1425|       |                Ok(patterns)
 1426|       |            } /
 1427|       |            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|    516|                let mut patterns = s.patterns;
 1429|    516|                patterns.extend(po.patterns);
 1430|    537|                for (p, os) in po.focus {
 1431|     59|                    for o in os {
 1432|     38|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|       |                    }
 1434|       |                }
 1435|    516|                Ok(patterns)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_Verb0B7_:
 1384|  8.56k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_PathPrimary0B7_:
 1536|  6.99k|            v:iri() { v.into() } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_ExpressionList_item0B7_:
 1336|    429|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_PathOneInPropertySets1_0B7_:
 1574|    311|            "a" { Either::Left(rdf::TYPE.into()) }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_QuadPattern0B7_:
 1146|  4.26k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_SelectClause_options0_0B7_:
  823|    562|            { SelectionOption::Default }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_ObjectListPath_item0B7_:
 1477|  11.4k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_SelectClause0B7_:
  811|  1.47k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  1.47k|            Selection {
  813|  1.47k|                option: o,
  814|  1.47k|                variables: v
  815|  1.47k|            }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_DeleteWhere0B7_:
  778|    332|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|    332|            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|    332|            }).reduce(new_join).unwrap_or_default();
 1042|    332|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|    332|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|    332|                delete,
 1045|    332|                insert: Vec::new(),
 1046|    332|                using: None,
 1047|    332|                pattern: Box::new(pattern)
 1048|    332|            }])
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_PropertyListNotEmpty00B9_:
 1371|  14.0k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  14.0k|                a.focus.push(b.focus);
 1373|  14.0k|                a.patterns.extend(b.patterns);
 1374|  14.0k|                a
 1375|  14.0k|            })
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_ObjectPath0B7_:
 1479|  11.4k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  11.4k|             if let Some(a) = a {
 1481|      0|                let mut patterns = g.patterns;
 1482|      0|                patterns.extend(a.patterns);
 1483|      0|                FocusedTripleOrPathPattern {
 1484|      0|                    focus: AnnotatedTermPath {
 1485|      0|                        term: g.focus,
 1486|      0|                        annotations: a.focus
 1487|      0|                    },
 1488|      0|                    patterns
 1489|      0|                }
 1490|       |            } else {
 1491|  11.4k|                FocusedTripleOrPathPattern {
 1492|  11.4k|                    focus: AnnotatedTermPath {
 1493|  11.4k|                        term: g.focus,
 1494|  11.4k|                        annotations: Vec::new()
 1495|  11.4k|                    },
 1496|  11.4k|                    patterns: g.patterns
 1497|  11.4k|                }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_PathElt_ops_0B7_:
 1528|  1.94k|            "+" { '+' } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_GraphRef0B7_:
 1139|  1.10k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser35___parse_PathNegatedPropertySet_item0B7_:
 1568|  5.71k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser45___parse_PropertyListPathNotEmpty_item_content0B7_:
 1455|    277|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|    277|            FocusedTripleOrPathPattern {
 1457|    277|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|    277|                patterns: o.patterns
 1459|    277|            }
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_PathSequence00B9_:
 1511|  7.05k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  7.05k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  7.05k|            })
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser26___parse_TriplesBlock_inner0B7_:
 1245|  1.34k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_SelectClause_members_0B7_:
  829|    640|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_DataBlockValues1_0B7_:
 1303|    161|            l:NumericLiteral() { Some(l.into()) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_PropertyListNotEmpty0B7_:
 1370|  14.0k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  14.0k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|       |                a.focus.push(b.focus);
 1373|       |                a.patterns.extend(b.patterns);
 1374|       |                a
 1375|  14.0k|            })
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_PathPrimarys_0B7_:
 1537|  1.72k|            "a" { rdf::TYPE.into_owned().into() } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_Update1_silents_0B7_:
  976|    464|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser26___parse_InlineDataFull_var0B7_:
 1292|  2.68k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_HavingClause0B7_:
  778|     14|parser! {
  779|     14|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|     14|    grammar parser(state: &mut ParserState) for str {
  781|     14|        pub rule QueryUnit() -> Query = Query()
  782|     14|
  783|     14|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|     14|            q
  785|     14|        }
  786|     14|
  787|     14|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|     14|
  789|     14|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|     14|
  791|     14|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|     14|            state.base_iri = Some(i)
  793|     14|        }
  794|     14|
  795|     14|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|     14|            state.namespaces.insert(ns.into(), i.into_inner());
  797|     14|        }
  798|     14|
  799|     14|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|     14|            Ok(Query::Select {
  801|     14|                dataset: d,
  802|     14|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|     14|                base_iri: state.base_iri.clone()
  804|     14|            })
  805|     14|        }
  806|     14|
  807|     14|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|     14|            build_select(s, w, g, h, o, l, v, state)
  809|     14|        }
  810|     14|
  811|     14|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|     14|            Selection {
  813|     14|                option: o,
  814|     14|                variables: v
  815|     14|            }
  816|     14|        }
  817|     14|        rule Selection_init() = {
  818|     14|            state.aggregates.push(Vec::new())
  819|     14|        }
  820|     14|        rule SelectClause_option() -> SelectionOption =
  821|     14|            i("DISTINCT") { SelectionOption::Distinct } /
  822|     14|            i("REDUCED") { SelectionOption::Reduced } /
  823|     14|            { SelectionOption::Default }
  824|     14|        rule SelectClause_variables() -> SelectionVariables =
  825|     14|            "*" { SelectionVariables::Star } /
  826|     14|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|     14|        rule SelectClause_member() -> SelectionMember =
  828|     14|            v:Var() _ { SelectionMember::Variable(v) } /
  829|     14|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|     14|
  831|     14|        rule ConstructQuery() -> Query =
  832|     14|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|     14|                Ok(Query::Construct {
  834|     14|                    template: c,
  835|     14|                    dataset: d,
  836|     14|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|     14|                    base_iri: state.base_iri.clone()
  838|     14|                })
  839|     14|            } /
  840|     14|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|     14|                Ok(Query::Construct {
  842|     14|                    template: c.clone(),
  843|     14|                    dataset: d,
  844|     14|                    pattern: build_select(
  845|     14|                        Selection::no_op(),
  846|     14|                        GraphPattern::Bgp { patterns: c },
  847|     14|                        g, h, o, l, v, state
  848|     14|                    )?,
  849|     14|                    base_iri: state.base_iri.clone()
  850|     14|                })
  851|     14|            }
  852|     14|
  853|     14|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|     14|
  855|     14|        rule DescribeQuery() -> Query =
  856|     14|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|     14|                Ok(Query::Describe {
  858|     14|                    dataset: d,
  859|     14|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|     14|                    base_iri: state.base_iri.clone()
  861|     14|                })
  862|     14|            } /
  863|     14|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|     14|                Ok(Query::Describe {
  865|     14|                    dataset: d,
  866|     14|                    pattern: build_select(Selection {
  867|     14|                        option: SelectionOption::Default,
  868|     14|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|     14|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|     14|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|     14|                        }).collect())
  872|     14|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|     14|                    base_iri: state.base_iri.clone()
  874|     14|                })
  875|     14|            }
  876|     14|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|     14|
  878|     14|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|     14|            Ok(Query::Ask {
  880|     14|                dataset: d,
  881|     14|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|     14|                base_iri: state.base_iri.clone()
  883|     14|            })
  884|     14|        }
  885|     14|
  886|     14|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|     14|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|     14|            if d.is_empty() {
  889|     14|                return None;
  890|     14|            }
  891|     14|            let mut default = Vec::new();
  892|     14|            let mut named = Vec::new();
  893|     14|            for (d, n) in d {
  894|     14|                if let Some(d) = d {
  895|     14|                    default.push(d);
  896|     14|                }
  897|     14|                if let Some(n) = n {
  898|     14|                    named.push(n);
  899|     14|                }
  900|     14|            }
  901|     14|            Some(QueryDataset {
  902|     14|                default, named: Some(named)
  903|     14|            })
  904|     14|        }
  905|     14|
  906|     14|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|     14|            (Some(s), None)
  908|     14|        }
  909|     14|
  910|     14|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|     14|            (None, Some(s))
  912|     14|        }
  913|     14|
  914|     14|        rule SourceSelector() -> NamedNode = iri()
  915|     14|
  916|     14|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|     14|            p
  918|     14|        }
  919|     14|
  920|     14|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|     14|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|     14|            let clauses = c.into_iter().map(|(e, vo)| {
  923|     14|                if let Expression::Variable(v) = e {
  924|     14|                    v
  925|     14|                } else {
  926|     14|                    let v = vo.unwrap_or_else(variable);
  927|     14|                    projections.push((e, v.clone()));
  928|     14|                    v
  929|     14|                }
  930|     14|            }).collect();
  931|     14|            (clauses, projections)
  932|     14|        }
  933|     14|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|     14|
  935|     14|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|     14|            e:BuiltInCall() { (e, None) } /
  937|     14|            e:FunctionCall() { (e, None) } /
  938|     14|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|     14|            e:Var() { (e.into(), None) }
  940|     14|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|     14|
  942|     14|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|     14|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|     14|        }
  945|     14|
  946|     14|        rule HavingCondition() -> Expression = Constraint()
  947|     14|
  948|     14|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|     14|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|     14|
  951|     14|        rule OrderCondition() -> OrderExpression =
  952|     14|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|     14|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|     14|            e: Constraint() { OrderExpression::Asc(e) } /
  955|     14|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|     14|
  957|     14|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|     14|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|     14|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|     14|
  961|     14|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|     14|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|     14|        }
  964|     14|
  965|     14|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|     14|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|     14|        }
  968|     14|
  969|     14|        rule ValuesClause() -> Option<GraphPattern> =
  970|     14|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|     14|            { None }
  972|     14|
  973|     14|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|     14|
  975|     14|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|     14|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|     14|
  978|     14|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|     14|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|     14|        }
  981|     14|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|     14|
  983|     14|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|     14|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|     14|        }
  986|     14|
  987|     14|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|     14|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|     14|        }
  990|     14|
  991|     14|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|     14|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|     14|        }
  994|     14|
  995|     14|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|     14|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|     14|            if from == to {
  998|     14|                Vec::new() // identity case
  999|     14|            } else {
 1000|     14|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|     14|                vec![copy_graph(from, to)]
 1002|     14|            }
 1003|     14|        }
 1004|     14|
 1005|     14|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|     14|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|     14|            if from == to {
 1008|     14|                Vec::new() // identity case
 1009|     14|            } else {
 1010|     14|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|     14|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|     14|            }
 1013|     14|        }
 1014|     14|
 1015|     14|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|     14|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|     14|            if from == to {
 1018|     14|                Vec::new() // identity case
 1019|     14|            } else {
 1020|     14|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|     14|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|     14|            }
 1023|     14|        }
 1024|     14|
 1025|     14|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|     14|            vec![GraphUpdateOperation::InsertData { data }]
 1027|     14|        }
 1028|     14|
 1029|     14|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|     14|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|     14|        }
 1032|     14|
 1033|     14|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|     14|            let pattern = d.iter().map(|q| {
 1035|     14|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|     14|                match &q.graph_name {
 1037|     14|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|     14|                    GraphNamePattern::DefaultGraph => bgp,
 1039|     14|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|     14|                }
 1041|     14|            }).reduce(new_join).unwrap_or_default();
 1042|     14|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|     14|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|     14|                delete,
 1045|     14|                insert: Vec::new(),
 1046|     14|                using: None,
 1047|     14|                pattern: Box::new(pattern)
 1048|     14|            }])
 1049|     14|        }
 1050|     14|
 1051|     14|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|     14|            let (delete, insert) = c;
 1053|     14|            let mut delete = delete.unwrap_or_default();
 1054|     14|            let mut insert = insert.unwrap_or_default();
 1055|     14|            #[allow(clippy::shadow_same)]
 1056|     14|            let mut pattern = pattern;
 1057|     14|
 1058|     14|            let mut using = if u.is_empty() {
 1059|     14|                None
 1060|     14|            } else {
 1061|     14|                let mut default = Vec::new();
 1062|     14|                let mut named = Vec::new();
 1063|     14|                for (d, n) in u {
 1064|     14|                    if let Some(d) = d {
 1065|     14|                        default.push(d)
 1066|     14|                    }
 1067|     14|                    if let Some(n) = n {
 1068|     14|                        named.push(n)
 1069|     14|                    }
 1070|     14|                }
 1071|     14|                Some(QueryDataset { default, named: Some(named) })
 1072|     14|            };
 1073|     14|
 1074|     14|            if let Some(with) = with {
 1075|     14|                // We inject WITH everywhere
 1076|     14|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|     14|                    GroundQuadPattern {
 1078|     14|                        subject: q.subject,
 1079|     14|                        predicate: q.predicate,
 1080|     14|                        object: q.object,
 1081|     14|                        graph_name: with.clone().into()
 1082|     14|                    }
 1083|     14|                } else {
 1084|     14|                    q
 1085|     14|                }).collect();
 1086|     14|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|     14|                    QuadPattern {
 1088|     14|                        subject: q.subject,
 1089|     14|                        predicate: q.predicate,
 1090|     14|                        object: q.object,
 1091|     14|                        graph_name: with.clone().into()
 1092|     14|                    }
 1093|     14|                } else {
 1094|     14|                    q
 1095|     14|                }).collect();
 1096|     14|                if using.is_none() {
 1097|     14|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|     14|                }
 1099|     14|            }
 1100|     14|
 1101|     14|            vec![GraphUpdateOperation::DeleteInsert {
 1102|     14|                delete,
 1103|     14|                insert,
 1104|     14|                using,
 1105|     14|                pattern: Box::new(pattern)
 1106|     14|            }]
 1107|     14|        }
 1108|     14|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|     14|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|     14|            (Some(d), i)
 1111|     14|        } / i:InsertClause() {
 1112|     14|            (None, Some(i))
 1113|     14|        }
 1114|     14|        rule Modify_clear() = {
 1115|     14|            state.used_bnodes.clear();
 1116|     14|            state.currently_used_bnodes.clear();
 1117|     14|        }
 1118|     14|
 1119|     14|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|     14|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|     14|        }
 1122|     14|
 1123|     14|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|     14|
 1125|     14|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|     14|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|     14|            (Some(i), None)
 1128|     14|        }
 1129|     14|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|     14|            (None, Some(i))
 1131|     14|        }
 1132|     14|
 1133|     14|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|     14|            GraphName::DefaultGraph
 1135|     14|        } / (i("GRAPH") _)? g:iri() {
 1136|     14|            GraphName::NamedNode(g)
 1137|     14|        }
 1138|     14|
 1139|     14|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|     14|
 1141|     14|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|     14|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|     14|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|     14|            / i("ALL") { GraphTarget::AllGraphs }
 1145|     14|
 1146|     14|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|     14|
 1148|     14|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|     14|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|     14|        }
 1151|     14|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|     14|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|     14|        }
 1154|     14|
 1155|     14|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|     14|            q.into_iter().flatten().collect()
 1157|     14|        }
 1158|     14|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|     14|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|     14|        } //TODO: return iter?
 1161|     14|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|     14|
 1163|     14|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|     14|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|     14|        }
 1166|     14|
 1167|     14|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|     14|            ts.into_iter().flatten().collect()
 1169|     14|        }
 1170|     14|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|     14|
 1172|     14|        rule GroupGraphPattern() -> GraphPattern =
 1173|     14|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|     14|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|     14|        rule GroupGraphPattern_clear() = {
 1176|     14|             // We deal with blank nodes aliases rule
 1177|     14|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|     14|            state.currently_used_bnodes.clear();
 1179|     14|        }
 1180|     14|
 1181|     14|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|     14|            let mut filter: Option<Expression> = None;
 1183|     14|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|     14|            for e in b.into_iter().flatten() {
 1185|     14|                match e {
 1186|     14|                    PartialGraphPattern::Optional(p, f) => {
 1187|     14|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|     14|                    }
 1189|     14|                    #[cfg(feature = "sep-0006")]
 1190|     14|                    PartialGraphPattern::Lateral(p) => {
 1191|     14|                        let mut defined_variables = HashSet::default();
 1192|     14|                        add_defined_variables(&p, &mut defined_variables);
 1193|     14|                        let mut contains = false;
 1194|     14|                        g.on_in_scope_variable(|v| {
 1195|     14|                            if defined_variables.contains(v) {
 1196|     14|                                contains = true;
 1197|     14|                            }
 1198|     14|                        });
 1199|     14|                        if contains {
 1200|     14|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|     14|                        }
 1202|     14|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|     14|                    }
 1204|     14|                    PartialGraphPattern::Minus(p) => {
 1205|     14|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|     14|                    }
 1207|     14|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|     14|                        let mut contains = false;
 1209|     14|                        g.on_in_scope_variable(|v| {
 1210|     14|                            if *v == variable {
 1211|     14|                                contains = true;
 1212|     14|                            }
 1213|     14|                        });
 1214|     14|                        if contains {
 1215|     14|                            return Err("BIND is overriding an existing variable")
 1216|     14|                        }
 1217|     14|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|     14|                    }
 1219|     14|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|     14|                        Expression::And(Box::new(f), Box::new(expr))
 1221|     14|                    } else {
 1222|     14|                        expr
 1223|     14|                    }),
 1224|     14|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|     14|                }
 1226|     14|            }
 1227|     14|
 1228|     14|            Ok(if let Some(expr) = filter {
 1229|     14|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|     14|            } else {
 1231|     14|                g
 1232|     14|            })
 1233|     14|        }
 1234|     14|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|     14|            let mut result = vec![a];
 1236|     14|            if let Some(v) = b {
 1237|     14|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|     14|            }
 1239|     14|            result
 1240|     14|        }
 1241|     14|
 1242|     14|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|     14|            hs.into_iter().flatten().collect()
 1244|     14|        }
 1245|     14|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|     14|
 1247|     14|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|     14|
 1249|     14|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|     14|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|     14|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|     14|            } else {
 1253|     14|               PartialGraphPattern::Optional(p, None)
 1254|     14|            }
 1255|     14|        }
 1256|     14|
 1257|     14|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|     14|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|     14|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|     14|        }
 1261|     14|
 1262|     14|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|     14|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|     14|        }
 1265|     14|
 1266|     14|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|     14|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|     14|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|     14|
 1270|     14|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|     14|            PartialGraphPattern::Bind(e, v)
 1272|     14|        }
 1273|     14|
 1274|     14|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|     14|
 1276|     14|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|     14|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|     14|        }
 1279|     14|
 1280|     14|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|     14|            (vec![var], d)
 1282|     14|        }
 1283|     14|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|     14|
 1285|     14|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|     14|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|     14|                Ok((vars, vals))
 1288|     14|            } else {
 1289|     14|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|     14|            }
 1291|     14|        }
 1292|     14|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|     14|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|     14|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|     14|
 1296|     14|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|     14|            t:QuotedTripleData() {?
 1298|     14|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|     14|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|     14|            } /
 1301|     14|            i:iri() { Some(i.into()) } /
 1302|     14|            l:RDFLiteral() { Some(l.into()) } /
 1303|     14|            l:NumericLiteral() { Some(l.into()) } /
 1304|     14|            l:BooleanLiteral() { Some(l.into()) } /
 1305|     14|            i("UNDEF") { None }
 1306|     14|
 1307|     14|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|     14|            PartialGraphPattern::Minus(p)
 1309|     14|        }
 1310|     14|
 1311|     14|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|     14|            not_empty_fold(p.into_iter(), |a, b| {
 1313|     14|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|     14|            }).map(PartialGraphPattern::Other)
 1315|     14|        }
 1316|     14|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|     14|
 1318|     14|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|     14|            PartialGraphPattern::Filter(c)
 1320|     14|        }
 1321|     14|
 1322|     14|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|     14|
 1324|     14|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|     14|            Expression::FunctionCall(Function::Custom(f), a)
 1326|     14|        }
 1327|     14|
 1328|     14|        rule ArgList() -> Vec<Expression> =
 1329|     14|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|     14|            NIL() { Vec::new() }
 1331|     14|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|     14|
 1333|     14|        rule ExpressionList() -> Vec<Expression> =
 1334|     14|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|     14|            NIL() { Vec::new() }
 1336|     14|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|     14|
 1338|     14|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|     14|
 1340|     14|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|     14|            p.into_iter().flatten().collect()
 1342|     14|        }
 1343|     14|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|     14|
 1345|     14|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|     14|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|     14|                let mut patterns = po.patterns;
 1348|     14|                for (p, os) in po.focus {
 1349|     14|                    for o in os {
 1350|     14|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|     14|                    }
 1352|     14|                }
 1353|     14|                Ok(patterns)
 1354|     14|            } /
 1355|     14|            s:TriplesNode() _ po:PropertyList() {?
 1356|     14|                let mut patterns = s.patterns;
 1357|     14|                patterns.extend(po.patterns);
 1358|     14|                for (p, os) in po.focus {
 1359|     14|                    for o in os {
 1360|     14|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|     14|                    }
 1362|     14|                }
 1363|     14|                Ok(patterns)
 1364|     14|            }
 1365|     14|
 1366|     14|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|     14|            PropertyListNotEmpty() /
 1368|     14|            { FocusedTriplePattern::default() }
 1369|     14|
 1370|     14|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|     14|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|     14|                a.focus.push(b.focus);
 1373|     14|                a.patterns.extend(b.patterns);
 1374|     14|                a
 1375|     14|            })
 1376|     14|        }
 1377|     14|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|     14|            FocusedTriplePattern {
 1379|     14|                focus: (p, o.focus),
 1380|     14|                patterns: o.patterns
 1381|     14|            }
 1382|     14|        }
 1383|     14|
 1384|     14|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|     14|
 1386|     14|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|     14|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|     14|                a.focus.push(b.focus);
 1389|     14|                a.patterns.extend_from_slice(&b.patterns);
 1390|     14|                a
 1391|     14|            })
 1392|     14|        }
 1393|     14|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|     14|
 1395|     14|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|     14|            if let Some(a) = a {
 1397|     14|                let mut patterns = g.patterns;
 1398|     14|                patterns.extend(a.patterns);
 1399|     14|                FocusedTriplePattern {
 1400|     14|                    focus: AnnotatedTerm {
 1401|     14|                        term: g.focus,
 1402|     14|                        annotations: a.focus
 1403|     14|                    },
 1404|     14|                    patterns
 1405|     14|                }
 1406|     14|            } else {
 1407|     14|                FocusedTriplePattern {
 1408|     14|                    focus: AnnotatedTerm {
 1409|     14|                        term: g.focus,
 1410|     14|                        annotations: Vec::new()
 1411|     14|                    },
 1412|     14|                    patterns: g.patterns
 1413|     14|                }
 1414|     14|            }
 1415|     14|        }
 1416|     14|
 1417|     14|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|     14|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|     14|                let mut patterns = po.patterns;
 1420|     14|                for (p, os) in po.focus {
 1421|     14|                    for o in os {
 1422|     14|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|     14|                    }
 1424|     14|                }
 1425|     14|                Ok(patterns)
 1426|     14|            } /
 1427|     14|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|     14|                let mut patterns = s.patterns;
 1429|     14|                patterns.extend(po.patterns);
 1430|     14|                for (p, os) in po.focus {
 1431|     14|                    for o in os {
 1432|     14|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|     14|                    }
 1434|     14|                }
 1435|     14|                Ok(patterns)
 1436|     14|            }
 1437|     14|
 1438|     14|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|     14|            PropertyListPathNotEmpty() /
 1440|     14|            { FocusedTripleOrPathPattern::default() }
 1441|     14|
 1442|     14|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|     14|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|     14|                    focus: vec![(hp, ho.focus)],
 1445|     14|                    patterns: ho.patterns
 1446|     14|                }, |mut a, b| {
 1447|     14|                    a.focus.push(b.focus);
 1448|     14|                    a.patterns.extend(b.patterns);
 1449|     14|                    a
 1450|     14|                })
 1451|     14|        }
 1452|     14|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|     14|            c
 1454|     14|        }
 1455|     14|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|     14|            FocusedTripleOrPathPattern {
 1457|     14|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|     14|                patterns: o.patterns
 1459|     14|            }
 1460|     14|        }
 1461|     14|
 1462|     14|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|     14|            p.into()
 1464|     14|        }
 1465|     14|
 1466|     14|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|     14|            v.into()
 1468|     14|        }
 1469|     14|
 1470|     14|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|     14|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|     14|                a.focus.push(b.focus);
 1473|     14|                a.patterns.extend(b.patterns);
 1474|     14|                a
 1475|     14|            })
 1476|     14|        }
 1477|     14|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|     14|
 1479|     14|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|     14|             if let Some(a) = a {
 1481|     14|                let mut patterns = g.patterns;
 1482|     14|                patterns.extend(a.patterns);
 1483|     14|                FocusedTripleOrPathPattern {
 1484|     14|                    focus: AnnotatedTermPath {
 1485|     14|                        term: g.focus,
 1486|     14|                        annotations: a.focus
 1487|     14|                    },
 1488|     14|                    patterns
 1489|     14|                }
 1490|     14|            } else {
 1491|     14|                FocusedTripleOrPathPattern {
 1492|     14|                    focus: AnnotatedTermPath {
 1493|     14|                        term: g.focus,
 1494|     14|                        annotations: Vec::new()
 1495|     14|                    },
 1496|     14|                    patterns: g.patterns
 1497|     14|                }
 1498|     14|            }
 1499|     14|        }
 1500|     14|
 1501|     14|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|     14|
 1503|     14|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|     14|            not_empty_fold(p.into_iter(), |a, b| {
 1505|     14|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|     14|            })
 1507|     14|        }
 1508|     14|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|     14|
 1510|     14|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|     14|            not_empty_fold(p.into_iter(), |a, b| {
 1512|     14|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|     14|            })
 1514|     14|        }
 1515|     14|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|     14|
 1517|     14|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|     14|            match o {
 1519|     14|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|     14|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|     14|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|     14|                Some(_) => unreachable!(),
 1523|     14|                None => p
 1524|     14|            }
 1525|     14|        }
 1526|     14|        rule PathElt_op() -> char =
 1527|     14|            "*" { '*' } /
 1528|     14|            "+" { '+' } /
 1529|     14|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|     14|
 1531|     14|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|     14|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|     14|            PathElt()
 1534|     14|
 1535|     14|        rule PathPrimary() -> PropertyPathExpression =
 1536|     14|            v:iri() { v.into() } /
 1537|     14|            "a" { rdf::TYPE.into_owned().into() } /
 1538|     14|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|     14|            "(" _ p:Path() _ ")" { p }
 1540|     14|
 1541|     14|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|     14|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|     14|                let mut direct = Vec::new();
 1544|     14|                let mut inverse = Vec::new();
 1545|     14|                for e in p {
 1546|     14|                    match e {
 1547|     14|                        Either::Left(a) => direct.push(a),
 1548|     14|                        Either::Right(b) => inverse.push(b)
 1549|     14|                    }
 1550|     14|                }
 1551|     14|                if inverse.is_empty() {
 1552|     14|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|     14|                } else if direct.is_empty() {
 1554|     14|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|     14|                } else {
 1556|     14|                    PropertyPathExpression::Alternative(
 1557|     14|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|     14|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|     14|                    )
 1560|     14|                }
 1561|     14|            } /
 1562|     14|            p:PathOneInPropertySet() {
 1563|     14|                match p {
 1564|     14|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|     14|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|     14|                }
 1567|     14|            }
 1568|     14|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|     14|
 1570|     14|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|     14|            "^" _ v:iri() { Either::Right(v) } /
 1572|     14|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|     14|            v:iri() { Either::Left(v) } /
 1574|     14|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|     14|
 1576|     14|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|     14|
 1578|     14|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|     14|            let mut patterns = po.patterns;
 1580|     14|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|     14|            for (p, os) in po.focus {
 1582|     14|                for o in os {
 1583|     14|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|     14|                }
 1585|     14|            }
 1586|     14|            Ok(FocusedTriplePattern {
 1587|     14|                focus: bnode,
 1588|     14|                patterns
 1589|     14|            })
 1590|     14|        }
 1591|     14|
 1592|     14|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|     14|
 1594|     14|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|     14|            let mut patterns = po.patterns;
 1596|     14|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|     14|            for (p, os) in po.focus {
 1598|     14|                for o in os {
 1599|     14|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|     14|                }
 1601|     14|            }
 1602|     14|            Ok(FocusedTripleOrPathPattern {
 1603|     14|                focus: bnode,
 1604|     14|                patterns
 1605|     14|            })
 1606|     14|        }
 1607|     14|
 1608|     14|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|     14|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|     14|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|     14|            for objWithPatterns in o.into_iter().rev() {
 1612|     14|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|     14|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|     14|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|     14|                current_list_node = new_blank_node;
 1616|     14|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|     14|            }
 1618|     14|            FocusedTriplePattern {
 1619|     14|                focus: current_list_node,
 1620|     14|                patterns
 1621|     14|            }
 1622|     14|        }
 1623|     14|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|     14|
 1625|     14|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|     14|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|     14|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|     14|            for objWithPatterns in o.into_iter().rev() {
 1629|     14|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|     14|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|     14|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|     14|                current_list_node = new_blank_node;
 1633|     14|                patterns.extend(objWithPatterns.patterns);
 1634|     14|            }
 1635|     14|            FocusedTripleOrPathPattern {
 1636|     14|                focus: current_list_node,
 1637|     14|                patterns
 1638|     14|            }
 1639|     14|        }
 1640|     14|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|     14|
 1642|     14|
 1643|     14|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|     14|
 1645|     14|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|     14|
 1647|     14|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|     14|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|     14|            TriplesNode()
 1650|     14|
 1651|     14|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|     14|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|     14|            TriplesNodePath()
 1654|     14|
 1655|     14|        rule VarOrTerm() -> TermPattern =
 1656|     14|            v:Var() { v.into() } /
 1657|     14|            t:QuotedTriple() {?
 1658|     14|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|     14|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|     14|            } /
 1661|     14|            t:GraphTerm() { t.into() }
 1662|     14|
 1663|     14|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|     14|            Ok(TriplePattern {
 1665|     14|                subject: s,
 1666|     14|                predicate: p,
 1667|     14|                object: o
 1668|     14|            })
 1669|     14|        }
 1670|     14|
 1671|     14|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|     14|            Ok(GroundTriple {
 1673|     14|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|     14|                predicate: p,
 1675|     14|                object: o
 1676|     14|            })
 1677|     14|        }
 1678|     14|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|     14|
 1680|     14|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|     14|            l:RDFLiteral() { l.into() } /
 1682|     14|            l:NumericLiteral() { l.into() } /
 1683|     14|            l:BooleanLiteral() { l.into() } /
 1684|     14|            t:QuotedTripleData() {?
 1685|     14|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|     14|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|     14|            }
 1688|     14|
 1689|     14|        rule VarOrIri() -> NamedNodePattern =
 1690|     14|            v:Var() { v.into() } /
 1691|     14|            i:iri() { i.into() }
 1692|     14|
 1693|     14|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|     14|
 1695|     14|        rule GraphTerm() -> Term =
 1696|     14|            i:iri() { i.into() } /
 1697|     14|            l:RDFLiteral() { l.into() } /
 1698|     14|            l:NumericLiteral() { l.into() } /
 1699|     14|            l:BooleanLiteral() { l.into() } /
 1700|     14|            b:BlankNode() { b.into() } /
 1701|     14|            NIL() { rdf::NIL.into_owned().into() }
 1702|     14|
 1703|     14|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|     14|
 1705|     14|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|     14|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|     14|        }
 1708|     14|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|     14|
 1710|     14|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|     14|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|     14|        }
 1713|     14|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|     14|
 1715|     14|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|     14|
 1717|     14|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|     14|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|     14|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|     14|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|     14|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|     14|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|     14|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|     14|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|     14|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|     14|            Some(_) => unreachable!(),
 1727|     14|            None => a
 1728|     14|        } }
 1729|     14|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|     14|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|     14|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|     14|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|     14|
 1734|     14|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|     14|
 1736|     14|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|     14|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|     14|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|     14|            Some(_) => unreachable!(),
 1740|     14|            None => a,
 1741|     14|        } }
 1742|     14|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|     14|            (s, e)
 1744|     14|        }
 1745|     14|
 1746|     14|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|     14|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|     14|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|     14|            Some(_) => unreachable!(),
 1750|     14|            None => a
 1751|     14|        } }
 1752|     14|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|     14|            (s, e)
 1754|     14|        }
 1755|     14|
 1756|     14|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|     14|            Some("!") => Expression::Not(Box::new(e)),
 1758|     14|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|     14|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|     14|            Some(_) => unreachable!(),
 1761|     14|            None => e,
 1762|     14|        } }
 1763|     14|
 1764|     14|        rule PrimaryExpression() -> Expression =
 1765|     14|            BrackettedExpression()  /
 1766|     14|            ExprQuotedTriple() /
 1767|     14|            iriOrFunction() /
 1768|     14|            v:Var() { v.into() } /
 1769|     14|            l:RDFLiteral() { l.into() } /
 1770|     14|            l:NumericLiteral() { l.into() } /
 1771|     14|            l:BooleanLiteral() { l.into() } /
 1772|     14|            BuiltInCall()
 1773|     14|
 1774|     14|        rule ExprVarOrTerm() -> Expression =
 1775|     14|            ExprQuotedTriple() /
 1776|     14|            i:iri() { i.into() } /
 1777|     14|            l:RDFLiteral() { l.into() } /
 1778|     14|            l:NumericLiteral() { l.into() } /
 1779|     14|            l:BooleanLiteral() { l.into() } /
 1780|     14|            v:Var() { v.into() }
 1781|     14|
 1782|     14|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|     14|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|     14|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|     14|        }
 1786|     14|
 1787|     14|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|     14|
 1789|     14|        rule BuiltInCall() -> Expression =
 1790|     14|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|     14|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|     14|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|     14|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|     14|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|     14|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|     14|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|     14|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|     14|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|     14|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|     14|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|     14|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|     14|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|     14|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|     14|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|     14|            SubstringExpression() /
 1806|     14|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|     14|            StrReplaceExpression() /
 1808|     14|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|     14|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|     14|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|     14|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|     14|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|     14|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|     14|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|     14|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|     14|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|     14|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|     14|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|     14|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|     14|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|     14|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|     14|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|     14|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|     14|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|     14|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|     14|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|     14|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|     14|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|     14|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|     14|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|     14|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|     14|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|     14|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|     14|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|     14|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|     14|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|     14|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|     14|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|     14|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|     14|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|     14|            RegexExpression() /
 1842|     14|            ExistsFunc() /
 1843|     14|            NotExistsFunc() /
 1844|     14|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|     14|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|     14|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|     14|            } /
 1848|     14|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|     14|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|     14|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|     14|            } /
 1852|     14|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|     14|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|     14|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|     14|            } /
 1856|     14|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|     14|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|     14|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|     14|            } /
 1860|     14|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|     14|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|     14|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|     14|            } /
 1864|     14|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|     14|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|     14|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|     14|            }
 1868|     14|
 1869|     14|        rule RegexExpression() -> Expression =
 1870|     14|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|     14|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|     14|
 1873|     14|
 1874|     14|        rule SubstringExpression() -> Expression =
 1875|     14|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|     14|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|     14|
 1878|     14|
 1879|     14|        rule StrReplaceExpression() -> Expression =
 1880|     14|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|     14|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|     14|
 1883|     14|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|     14|
 1885|     14|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|     14|
 1887|     14|        rule Aggregate() -> AggregateExpression =
 1888|     14|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|     14|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|     14|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|     14|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|     14|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|     14|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|     14|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|     14|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|     14|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|     14|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|     14|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|     14|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|     14|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|     14|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|     14|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|     14|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|     14|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|     14|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|     14|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|     14|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|     14|
 1909|     14|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|     14|            match a {
 1911|     14|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|     14|                None => i.into()
 1913|     14|            }
 1914|     14|        }
 1915|     14|
 1916|     14|        rule RDFLiteral() -> Literal =
 1917|     14|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|     14|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|     14|            value:String() { Literal::new_simple_literal(value) }
 1920|     14|
 1921|     14|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|     14|
 1923|     14|        rule NumericLiteralUnsigned() -> Literal =
 1924|     14|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|     14|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|     14|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|     14|
 1928|     14|        rule NumericLiteralPositive() -> Literal =
 1929|     14|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|     14|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|     14|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|     14|
 1933|     14|
 1934|     14|        rule NumericLiteralNegative() -> Literal =
 1935|     14|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|     14|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|     14|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|     14|
 1939|     14|        rule BooleanLiteral() -> Literal =
 1940|     14|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|     14|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|     14|
 1943|     14|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|     14|
 1945|     14|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|     14|            NamedNode::from(i)
 1947|     14|        }
 1948|     14|
 1949|     14|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|     14|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|     14|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|     14|            } else {
 1953|     14|                Err("Prefix not found")
 1954|     14|            } }
 1955|     14|
 1956|     14|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|     14|            let node = BlankNode::new_unchecked(id);
 1958|     14|            if state.used_bnodes.contains(&node) {
 1959|     14|                Err("Already used blank node id")
 1960|     14|            } else {
 1961|     14|                state.currently_used_bnodes.insert(node.clone());
 1962|     14|                Ok(node)
 1963|     14|            }
 1964|     14|        } / ANON() { BlankNode::default() }
 1965|     14|
 1966|     14|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|     14|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|     14|        }
 1969|     14|
 1970|     14|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|     14|            ns
 1972|     14|        }
 1973|     14|
 1974|     14|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|     14|            if let Some(base) = state.namespaces.get(ns) {
 1976|     14|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|     14|                iri.push_str(base);
 1978|     14|                for chunk in local.split('\\') { // We remove \
 1979|     14|                    iri.push_str(chunk);
 1980|     14|                }
 1981|     14|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|     14|            } else {
 1983|     14|                Err("Prefix not found")
 1984|     14|            }
 1985|     14|        }
 1986|     14|
 1987|     14|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|     14|            b
 1989|     14|        }
 1990|     14|
 1991|     14|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|     14|
 1993|     14|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|     14|
 1995|     14|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|     14|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|     14|        }
 1998|     14|
 1999|     14|        rule INTEGER() = ['0'..='9']+
 2000|     14|
 2001|     14|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|     14|
 2003|     14|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|     14|
 2005|     14|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|     14|
 2007|     14|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|     14|
 2009|     14|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|     14|
 2011|     14|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|     14|
 2013|     14|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|     14|
 2015|     14|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|     14|
 2017|     14|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|     14|
 2019|     14|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|     14|             unescape_string(l)
 2021|     14|        }
 2022|     14|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|     14|
 2024|     14|
 2025|     14|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|     14|             unescape_string(l)
 2027|     14|        }
 2028|     14|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|     14|
 2030|     14|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|     14|             unescape_string(l)
 2032|     14|        }
 2033|     14|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|     14|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|     14|
 2036|     14|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|     14|             unescape_string(l)
 2038|     14|        }
 2039|     14|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|     14|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|     14|
 2042|     14|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|     14|
 2044|     14|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|     14|
 2046|     14|        rule NIL() = "(" WS()* ")"
 2047|     14|
 2048|     14|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|     14|
 2050|     14|        rule ANON() = "[" WS()* "]"
 2051|     14|
 2052|     14|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|     14|
 2054|     14|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|     14|
 2056|     14|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|     14|
 2058|     14|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|     14|
 2060|     14|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|     14|
 2062|     14|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|     14|
 2064|     14|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|     14|
 2066|     14|        rule PERCENT() = ['%'] HEX() HEX()
 2067|     14|
 2068|     14|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|     14|
 2070|     14|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|     14|
 2072|     14|        //space
 2073|     14|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|     14|
 2075|     14|        //comment
 2076|     14|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|     14|
 2078|     14|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|     14|            if input.eq_ignore_ascii_case(literal) {
 2080|     14|                Ok(())
 2081|     14|            } else {
 2082|     14|                Err(literal)
 2083|     14|            }
 2084|     14|        }
 2085|     14|    }
 2086|     14|}
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_Move0B7_:
 1005|    610|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|    610|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|    610|            if from == to {
 1008|    432|                Vec::new() // identity case
 1009|       |            } else {
 1010|    178|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|    178|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_PathElt_ops0_0B7_:
 1529|  3.83k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_PathOneInPropertySets0_0B7_:
 1573|  1.07k|            v:iri() { Either::Left(v) } /
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_TriplesSameSubjectPath0B7_:
  778|    830|parser! {
  779|       |    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|       |    grammar parser(state: &mut ParserState) for str {
  781|       |        pub rule QueryUnit() -> Query = Query()
  782|       |
  783|       |        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|       |            q
  785|       |        }
  786|       |
  787|       |        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|       |
  789|       |        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|       |
  791|       |        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|       |            state.base_iri = Some(i)
  793|       |        }
  794|       |
  795|       |        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|       |            state.namespaces.insert(ns.into(), i.into_inner());
  797|       |        }
  798|       |
  799|       |        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|       |            Ok(Query::Select {
  801|       |                dataset: d,
  802|       |                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|       |                base_iri: state.base_iri.clone()
  804|       |            })
  805|       |        }
  806|       |
  807|       |        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|       |            build_select(s, w, g, h, o, l, v, state)
  809|       |        }
  810|       |
  811|       |        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|       |            Selection {
  813|       |                option: o,
  814|       |                variables: v
  815|       |            }
  816|       |        }
  817|       |        rule Selection_init() = {
  818|       |            state.aggregates.push(Vec::new())
  819|       |        }
  820|       |        rule SelectClause_option() -> SelectionOption =
  821|       |            i("DISTINCT") { SelectionOption::Distinct } /
  822|       |            i("REDUCED") { SelectionOption::Reduced } /
  823|       |            { SelectionOption::Default }
  824|       |        rule SelectClause_variables() -> SelectionVariables =
  825|       |            "*" { SelectionVariables::Star } /
  826|       |            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|       |        rule SelectClause_member() -> SelectionMember =
  828|       |            v:Var() _ { SelectionMember::Variable(v) } /
  829|       |            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|       |
  831|       |        rule ConstructQuery() -> Query =
  832|       |            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|       |                Ok(Query::Construct {
  834|       |                    template: c,
  835|       |                    dataset: d,
  836|       |                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|       |                    base_iri: state.base_iri.clone()
  838|       |                })
  839|       |            } /
  840|       |            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|       |                Ok(Query::Construct {
  842|       |                    template: c.clone(),
  843|       |                    dataset: d,
  844|       |                    pattern: build_select(
  845|       |                        Selection::no_op(),
  846|       |                        GraphPattern::Bgp { patterns: c },
  847|       |                        g, h, o, l, v, state
  848|       |                    )?,
  849|       |                    base_iri: state.base_iri.clone()
  850|       |                })
  851|       |            }
  852|       |
  853|       |        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|       |
  855|       |        rule DescribeQuery() -> Query =
  856|       |            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|       |                Ok(Query::Describe {
  858|       |                    dataset: d,
  859|       |                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|       |                    base_iri: state.base_iri.clone()
  861|       |                })
  862|       |            } /
  863|       |            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|       |                Ok(Query::Describe {
  865|       |                    dataset: d,
  866|       |                    pattern: build_select(Selection {
  867|       |                        option: SelectionOption::Default,
  868|       |                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|       |                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|       |                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|       |                        }).collect())
  872|       |                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|       |                    base_iri: state.base_iri.clone()
  874|       |                })
  875|       |            }
  876|       |        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|       |
  878|       |        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|       |            Ok(Query::Ask {
  880|       |                dataset: d,
  881|       |                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|       |                base_iri: state.base_iri.clone()
  883|       |            })
  884|       |        }
  885|       |
  886|       |        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|       |        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|       |            if d.is_empty() {
  889|       |                return None;
  890|       |            }
  891|       |            let mut default = Vec::new();
  892|       |            let mut named = Vec::new();
  893|       |            for (d, n) in d {
  894|       |                if let Some(d) = d {
  895|       |                    default.push(d);
  896|       |                }
  897|       |                if let Some(n) = n {
  898|       |                    named.push(n);
  899|       |                }
  900|       |            }
  901|       |            Some(QueryDataset {
  902|       |                default, named: Some(named)
  903|       |            })
  904|       |        }
  905|       |
  906|       |        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|       |            (Some(s), None)
  908|       |        }
  909|       |
  910|       |        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|       |            (None, Some(s))
  912|       |        }
  913|       |
  914|       |        rule SourceSelector() -> NamedNode = iri()
  915|       |
  916|       |        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|       |            p
  918|       |        }
  919|       |
  920|       |        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|       |            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|       |            let clauses = c.into_iter().map(|(e, vo)| {
  923|       |                if let Expression::Variable(v) = e {
  924|       |                    v
  925|       |                } else {
  926|       |                    let v = vo.unwrap_or_else(variable);
  927|       |                    projections.push((e, v.clone()));
  928|       |                    v
  929|       |                }
  930|       |            }).collect();
  931|       |            (clauses, projections)
  932|       |        }
  933|       |        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|       |
  935|       |        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|       |            e:BuiltInCall() { (e, None) } /
  937|       |            e:FunctionCall() { (e, None) } /
  938|       |            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|       |            e:Var() { (e.into(), None) }
  940|       |        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|       |
  942|       |        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|       |            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|       |        }
  945|       |
  946|       |        rule HavingCondition() -> Expression = Constraint()
  947|       |
  948|       |        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|       |        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|       |
  951|       |        rule OrderCondition() -> OrderExpression =
  952|       |            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|       |            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|       |            e: Constraint() { OrderExpression::Asc(e) } /
  955|       |            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|       |
  957|       |        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|       |            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|       |            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|       |
  961|       |        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|       |            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|       |        }
  964|       |
  965|       |        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|       |            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|       |        }
  968|       |
  969|       |        rule ValuesClause() -> Option<GraphPattern> =
  970|       |            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|       |            { None }
  972|       |
  973|       |        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|       |
  975|       |        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|       |        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|       |
  978|       |        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|       |            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|       |        }
  981|       |        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|       |
  983|       |        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|       |            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|       |        }
  986|       |
  987|       |        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|       |            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|       |        }
  990|       |
  991|       |        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|       |            vec![GraphUpdateOperation::Create { silent, graph }]
  993|       |        }
  994|       |
  995|       |        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|       |            if from == to {
  998|       |                Vec::new() // identity case
  999|       |            } else {
 1000|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|       |                vec![copy_graph(from, to)]
 1002|       |            }
 1003|       |        }
 1004|       |
 1005|       |        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|       |            if from == to {
 1008|       |                Vec::new() // identity case
 1009|       |            } else {
 1010|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|       |            }
 1013|       |        }
 1014|       |
 1015|       |        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|       |            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|       |            if from == to {
 1018|       |                Vec::new() // identity case
 1019|       |            } else {
 1020|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|       |                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|       |            }
 1023|       |        }
 1024|       |
 1025|       |        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|       |            vec![GraphUpdateOperation::InsertData { data }]
 1027|       |        }
 1028|       |
 1029|       |        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|       |            vec![GraphUpdateOperation::DeleteData { data }]
 1031|       |        }
 1032|       |
 1033|       |        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|       |            let pattern = d.iter().map(|q| {
 1035|       |                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|       |                match &q.graph_name {
 1037|       |                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|       |                    GraphNamePattern::DefaultGraph => bgp,
 1039|       |                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|       |                }
 1041|       |            }).reduce(new_join).unwrap_or_default();
 1042|       |            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|       |            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|       |                delete,
 1045|       |                insert: Vec::new(),
 1046|       |                using: None,
 1047|       |                pattern: Box::new(pattern)
 1048|       |            }])
 1049|       |        }
 1050|       |
 1051|       |        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|       |            let (delete, insert) = c;
 1053|       |            let mut delete = delete.unwrap_or_default();
 1054|       |            let mut insert = insert.unwrap_or_default();
 1055|       |            #[allow(clippy::shadow_same)]
 1056|       |            let mut pattern = pattern;
 1057|       |
 1058|       |            let mut using = if u.is_empty() {
 1059|       |                None
 1060|       |            } else {
 1061|       |                let mut default = Vec::new();
 1062|       |                let mut named = Vec::new();
 1063|       |                for (d, n) in u {
 1064|       |                    if let Some(d) = d {
 1065|       |                        default.push(d)
 1066|       |                    }
 1067|       |                    if let Some(n) = n {
 1068|       |                        named.push(n)
 1069|       |                    }
 1070|       |                }
 1071|       |                Some(QueryDataset { default, named: Some(named) })
 1072|       |            };
 1073|       |
 1074|       |            if let Some(with) = with {
 1075|       |                // We inject WITH everywhere
 1076|       |                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|       |                    GroundQuadPattern {
 1078|       |                        subject: q.subject,
 1079|       |                        predicate: q.predicate,
 1080|       |                        object: q.object,
 1081|       |                        graph_name: with.clone().into()
 1082|       |                    }
 1083|       |                } else {
 1084|       |                    q
 1085|       |                }).collect();
 1086|       |                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|       |                    QuadPattern {
 1088|       |                        subject: q.subject,
 1089|       |                        predicate: q.predicate,
 1090|       |                        object: q.object,
 1091|       |                        graph_name: with.clone().into()
 1092|       |                    }
 1093|       |                } else {
 1094|       |                    q
 1095|       |                }).collect();
 1096|       |                if using.is_none() {
 1097|       |                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|       |                }
 1099|       |            }
 1100|       |
 1101|       |            vec![GraphUpdateOperation::DeleteInsert {
 1102|       |                delete,
 1103|       |                insert,
 1104|       |                using,
 1105|       |                pattern: Box::new(pattern)
 1106|       |            }]
 1107|       |        }
 1108|       |        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|       |        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|       |            (Some(d), i)
 1111|       |        } / i:InsertClause() {
 1112|       |            (None, Some(i))
 1113|       |        }
 1114|       |        rule Modify_clear() = {
 1115|       |            state.used_bnodes.clear();
 1116|       |            state.currently_used_bnodes.clear();
 1117|       |        }
 1118|       |
 1119|       |        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|       |            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|       |        }
 1122|       |
 1123|       |        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|       |
 1125|       |        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|       |        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|       |            (Some(i), None)
 1128|       |        }
 1129|       |        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|       |            (None, Some(i))
 1131|       |        }
 1132|       |
 1133|       |        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|       |            GraphName::DefaultGraph
 1135|       |        } / (i("GRAPH") _)? g:iri() {
 1136|       |            GraphName::NamedNode(g)
 1137|       |        }
 1138|       |
 1139|       |        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|       |
 1141|       |        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|       |            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|       |            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|       |            / i("ALL") { GraphTarget::AllGraphs }
 1145|       |
 1146|       |        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|       |
 1148|       |        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|       |            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|       |        }
 1151|       |        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|       |            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|       |        }
 1154|       |
 1155|       |        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|       |            q.into_iter().flatten().collect()
 1157|       |        }
 1158|       |        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|       |            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|       |        } //TODO: return iter?
 1161|       |        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|       |
 1163|       |        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|       |            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|       |        }
 1166|       |
 1167|       |        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|       |            ts.into_iter().flatten().collect()
 1169|       |        }
 1170|       |        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|       |
 1172|       |        rule GroupGraphPattern() -> GraphPattern =
 1173|       |            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|       |            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|       |        rule GroupGraphPattern_clear() = {
 1176|       |             // We deal with blank nodes aliases rule
 1177|       |            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|       |            state.currently_used_bnodes.clear();
 1179|       |        }
 1180|       |
 1181|       |        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|       |            let mut filter: Option<Expression> = None;
 1183|       |            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|       |            for e in b.into_iter().flatten() {
 1185|       |                match e {
 1186|       |                    PartialGraphPattern::Optional(p, f) => {
 1187|       |                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|       |                    }
 1189|       |                    #[cfg(feature = "sep-0006")]
 1190|       |                    PartialGraphPattern::Lateral(p) => {
 1191|       |                        let mut defined_variables = HashSet::default();
 1192|       |                        add_defined_variables(&p, &mut defined_variables);
 1193|       |                        let mut contains = false;
 1194|       |                        g.on_in_scope_variable(|v| {
 1195|       |                            if defined_variables.contains(v) {
 1196|       |                                contains = true;
 1197|       |                            }
 1198|       |                        });
 1199|       |                        if contains {
 1200|       |                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|       |                        }
 1202|       |                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|       |                    }
 1204|       |                    PartialGraphPattern::Minus(p) => {
 1205|       |                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|       |                    }
 1207|       |                    PartialGraphPattern::Bind(expression, variable) => {
 1208|       |                        let mut contains = false;
 1209|       |                        g.on_in_scope_variable(|v| {
 1210|       |                            if *v == variable {
 1211|       |                                contains = true;
 1212|       |                            }
 1213|       |                        });
 1214|       |                        if contains {
 1215|       |                            return Err("BIND is overriding an existing variable")
 1216|       |                        }
 1217|       |                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|       |                    }
 1219|       |                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|       |                        Expression::And(Box::new(f), Box::new(expr))
 1221|       |                    } else {
 1222|       |                        expr
 1223|       |                    }),
 1224|       |                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|       |                }
 1226|       |            }
 1227|       |
 1228|       |            Ok(if let Some(expr) = filter {
 1229|       |                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|       |            } else {
 1231|       |                g
 1232|       |            })
 1233|       |        }
 1234|       |        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|       |            let mut result = vec![a];
 1236|       |            if let Some(v) = b {
 1237|       |                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|       |            }
 1239|       |            result
 1240|       |        }
 1241|       |
 1242|       |        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|       |            hs.into_iter().flatten().collect()
 1244|       |        }
 1245|       |        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|       |
 1247|       |        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|       |
 1249|       |        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|       |            if let GraphPattern::Filter { expr, inner } =  p {
 1251|       |               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|       |            } else {
 1253|       |               PartialGraphPattern::Optional(p, None)
 1254|       |            }
 1255|       |        }
 1256|       |
 1257|       |        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|       |                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|       |                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|       |        }
 1261|       |
 1262|       |        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|       |            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|       |        }
 1265|       |
 1266|       |        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|       |            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|       |            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|       |
 1270|       |        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|       |            PartialGraphPattern::Bind(e, v)
 1272|       |        }
 1273|       |
 1274|       |        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|       |
 1276|       |        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|       |            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|       |        }
 1279|       |
 1280|       |        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|       |            (vec![var], d)
 1282|       |        }
 1283|       |        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|       |
 1285|       |        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|       |            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|       |                Ok((vars, vals))
 1288|       |            } else {
 1289|       |                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|       |            }
 1291|       |        }
 1292|       |        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|       |        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|       |        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|       |
 1296|       |        rule DataBlockValue() -> Option<GroundTerm> =
 1297|       |            t:QuotedTripleData() {?
 1298|       |                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|       |                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|       |            } /
 1301|       |            i:iri() { Some(i.into()) } /
 1302|       |            l:RDFLiteral() { Some(l.into()) } /
 1303|       |            l:NumericLiteral() { Some(l.into()) } /
 1304|       |            l:BooleanLiteral() { Some(l.into()) } /
 1305|       |            i("UNDEF") { None }
 1306|       |
 1307|       |        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|       |            PartialGraphPattern::Minus(p)
 1309|       |        }
 1310|       |
 1311|       |        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|       |            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|       |            }).map(PartialGraphPattern::Other)
 1315|       |        }
 1316|       |        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|       |
 1318|       |        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|       |            PartialGraphPattern::Filter(c)
 1320|       |        }
 1321|       |
 1322|       |        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|       |
 1324|       |        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|       |            Expression::FunctionCall(Function::Custom(f), a)
 1326|       |        }
 1327|       |
 1328|       |        rule ArgList() -> Vec<Expression> =
 1329|       |            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|       |            NIL() { Vec::new() }
 1331|       |        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|       |
 1333|       |        rule ExpressionList() -> Vec<Expression> =
 1334|       |            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|       |            NIL() { Vec::new() }
 1336|       |        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|       |
 1338|       |        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|       |
 1340|       |        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|       |            p.into_iter().flatten().collect()
 1342|       |        }
 1343|       |        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|       |
 1345|       |        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|       |            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|       |                let mut patterns = po.patterns;
 1348|       |                for (p, os) in po.focus {
 1349|       |                    for o in os {
 1350|       |                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|       |                    }
 1352|       |                }
 1353|       |                Ok(patterns)
 1354|       |            } /
 1355|       |            s:TriplesNode() _ po:PropertyList() {?
 1356|       |                let mut patterns = s.patterns;
 1357|       |                patterns.extend(po.patterns);
 1358|       |                for (p, os) in po.focus {
 1359|       |                    for o in os {
 1360|       |                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|       |                    }
 1362|       |                }
 1363|       |                Ok(patterns)
 1364|       |            }
 1365|       |
 1366|       |        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|       |            PropertyListNotEmpty() /
 1368|       |            { FocusedTriplePattern::default() }
 1369|       |
 1370|       |        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|       |            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|       |                a.focus.push(b.focus);
 1373|       |                a.patterns.extend(b.patterns);
 1374|       |                a
 1375|       |            })
 1376|       |        }
 1377|       |        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|       |            FocusedTriplePattern {
 1379|       |                focus: (p, o.focus),
 1380|       |                patterns: o.patterns
 1381|       |            }
 1382|       |        }
 1383|       |
 1384|       |        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|       |
 1386|       |        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|       |            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|       |                a.focus.push(b.focus);
 1389|       |                a.patterns.extend_from_slice(&b.patterns);
 1390|       |                a
 1391|       |            })
 1392|       |        }
 1393|       |        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|       |
 1395|       |        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|       |            if let Some(a) = a {
 1397|       |                let mut patterns = g.patterns;
 1398|       |                patterns.extend(a.patterns);
 1399|       |                FocusedTriplePattern {
 1400|       |                    focus: AnnotatedTerm {
 1401|       |                        term: g.focus,
 1402|       |                        annotations: a.focus
 1403|       |                    },
 1404|       |                    patterns
 1405|       |                }
 1406|       |            } else {
 1407|       |                FocusedTriplePattern {
 1408|       |                    focus: AnnotatedTerm {
 1409|       |                        term: g.focus,
 1410|       |                        annotations: Vec::new()
 1411|       |                    },
 1412|       |                    patterns: g.patterns
 1413|       |                }
 1414|       |            }
 1415|       |        }
 1416|       |
 1417|       |        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|       |            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|    830|                let mut patterns = po.patterns;
 1420|  1.71k|                for (p, os) in po.focus {
 1421|  2.35k|                    for o in os {
 1422|  1.46k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|       |                    }
 1424|       |                }
 1425|    830|                Ok(patterns)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_VarOrTerms0_0B7_:
 1661|  17.8k|            t:GraphTerm() { t.into() }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_VarOrIris_0B7_:
 1691|  12.7k|            i:iri() { i.into() }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser34___parse_RelationalExpression_inners0_0B7_:
 1732|    910|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser29___parse_Quads_QuadsNotTriples0B7_:
 1161|  12.1k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_STRING_LITERAL20B7_:
  778|  3.72k|parser! {
  779|  3.72k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  3.72k|    grammar parser(state: &mut ParserState) for str {
  781|  3.72k|        pub rule QueryUnit() -> Query = Query()
  782|  3.72k|
  783|  3.72k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  3.72k|            q
  785|  3.72k|        }
  786|  3.72k|
  787|  3.72k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  3.72k|
  789|  3.72k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  3.72k|
  791|  3.72k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  3.72k|            state.base_iri = Some(i)
  793|  3.72k|        }
  794|  3.72k|
  795|  3.72k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  3.72k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  3.72k|        }
  798|  3.72k|
  799|  3.72k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  3.72k|            Ok(Query::Select {
  801|  3.72k|                dataset: d,
  802|  3.72k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  3.72k|                base_iri: state.base_iri.clone()
  804|  3.72k|            })
  805|  3.72k|        }
  806|  3.72k|
  807|  3.72k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  3.72k|            build_select(s, w, g, h, o, l, v, state)
  809|  3.72k|        }
  810|  3.72k|
  811|  3.72k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  3.72k|            Selection {
  813|  3.72k|                option: o,
  814|  3.72k|                variables: v
  815|  3.72k|            }
  816|  3.72k|        }
  817|  3.72k|        rule Selection_init() = {
  818|  3.72k|            state.aggregates.push(Vec::new())
  819|  3.72k|        }
  820|  3.72k|        rule SelectClause_option() -> SelectionOption =
  821|  3.72k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  3.72k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  3.72k|            { SelectionOption::Default }
  824|  3.72k|        rule SelectClause_variables() -> SelectionVariables =
  825|  3.72k|            "*" { SelectionVariables::Star } /
  826|  3.72k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  3.72k|        rule SelectClause_member() -> SelectionMember =
  828|  3.72k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  3.72k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  3.72k|
  831|  3.72k|        rule ConstructQuery() -> Query =
  832|  3.72k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  3.72k|                Ok(Query::Construct {
  834|  3.72k|                    template: c,
  835|  3.72k|                    dataset: d,
  836|  3.72k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  3.72k|                    base_iri: state.base_iri.clone()
  838|  3.72k|                })
  839|  3.72k|            } /
  840|  3.72k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  3.72k|                Ok(Query::Construct {
  842|  3.72k|                    template: c.clone(),
  843|  3.72k|                    dataset: d,
  844|  3.72k|                    pattern: build_select(
  845|  3.72k|                        Selection::no_op(),
  846|  3.72k|                        GraphPattern::Bgp { patterns: c },
  847|  3.72k|                        g, h, o, l, v, state
  848|  3.72k|                    )?,
  849|  3.72k|                    base_iri: state.base_iri.clone()
  850|  3.72k|                })
  851|  3.72k|            }
  852|  3.72k|
  853|  3.72k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  3.72k|
  855|  3.72k|        rule DescribeQuery() -> Query =
  856|  3.72k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  3.72k|                Ok(Query::Describe {
  858|  3.72k|                    dataset: d,
  859|  3.72k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  3.72k|                    base_iri: state.base_iri.clone()
  861|  3.72k|                })
  862|  3.72k|            } /
  863|  3.72k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  3.72k|                Ok(Query::Describe {
  865|  3.72k|                    dataset: d,
  866|  3.72k|                    pattern: build_select(Selection {
  867|  3.72k|                        option: SelectionOption::Default,
  868|  3.72k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  3.72k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  3.72k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  3.72k|                        }).collect())
  872|  3.72k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  3.72k|                    base_iri: state.base_iri.clone()
  874|  3.72k|                })
  875|  3.72k|            }
  876|  3.72k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  3.72k|
  878|  3.72k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  3.72k|            Ok(Query::Ask {
  880|  3.72k|                dataset: d,
  881|  3.72k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  3.72k|                base_iri: state.base_iri.clone()
  883|  3.72k|            })
  884|  3.72k|        }
  885|  3.72k|
  886|  3.72k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  3.72k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  3.72k|            if d.is_empty() {
  889|  3.72k|                return None;
  890|  3.72k|            }
  891|  3.72k|            let mut default = Vec::new();
  892|  3.72k|            let mut named = Vec::new();
  893|  3.72k|            for (d, n) in d {
  894|  3.72k|                if let Some(d) = d {
  895|  3.72k|                    default.push(d);
  896|  3.72k|                }
  897|  3.72k|                if let Some(n) = n {
  898|  3.72k|                    named.push(n);
  899|  3.72k|                }
  900|  3.72k|            }
  901|  3.72k|            Some(QueryDataset {
  902|  3.72k|                default, named: Some(named)
  903|  3.72k|            })
  904|  3.72k|        }
  905|  3.72k|
  906|  3.72k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  3.72k|            (Some(s), None)
  908|  3.72k|        }
  909|  3.72k|
  910|  3.72k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  3.72k|            (None, Some(s))
  912|  3.72k|        }
  913|  3.72k|
  914|  3.72k|        rule SourceSelector() -> NamedNode = iri()
  915|  3.72k|
  916|  3.72k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  3.72k|            p
  918|  3.72k|        }
  919|  3.72k|
  920|  3.72k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  3.72k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  3.72k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  3.72k|                if let Expression::Variable(v) = e {
  924|  3.72k|                    v
  925|  3.72k|                } else {
  926|  3.72k|                    let v = vo.unwrap_or_else(variable);
  927|  3.72k|                    projections.push((e, v.clone()));
  928|  3.72k|                    v
  929|  3.72k|                }
  930|  3.72k|            }).collect();
  931|  3.72k|            (clauses, projections)
  932|  3.72k|        }
  933|  3.72k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  3.72k|
  935|  3.72k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  3.72k|            e:BuiltInCall() { (e, None) } /
  937|  3.72k|            e:FunctionCall() { (e, None) } /
  938|  3.72k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  3.72k|            e:Var() { (e.into(), None) }
  940|  3.72k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  3.72k|
  942|  3.72k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  3.72k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  3.72k|        }
  945|  3.72k|
  946|  3.72k|        rule HavingCondition() -> Expression = Constraint()
  947|  3.72k|
  948|  3.72k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  3.72k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  3.72k|
  951|  3.72k|        rule OrderCondition() -> OrderExpression =
  952|  3.72k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  3.72k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  3.72k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  3.72k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  3.72k|
  957|  3.72k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  3.72k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  3.72k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  3.72k|
  961|  3.72k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  3.72k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  3.72k|        }
  964|  3.72k|
  965|  3.72k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  3.72k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  3.72k|        }
  968|  3.72k|
  969|  3.72k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  3.72k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  3.72k|            { None }
  972|  3.72k|
  973|  3.72k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  3.72k|
  975|  3.72k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  3.72k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  3.72k|
  978|  3.72k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  3.72k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  3.72k|        }
  981|  3.72k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  3.72k|
  983|  3.72k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  3.72k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  3.72k|        }
  986|  3.72k|
  987|  3.72k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  3.72k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  3.72k|        }
  990|  3.72k|
  991|  3.72k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  3.72k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  3.72k|        }
  994|  3.72k|
  995|  3.72k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  3.72k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  3.72k|            if from == to {
  998|  3.72k|                Vec::new() // identity case
  999|  3.72k|            } else {
 1000|  3.72k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  3.72k|                vec![copy_graph(from, to)]
 1002|  3.72k|            }
 1003|  3.72k|        }
 1004|  3.72k|
 1005|  3.72k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  3.72k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  3.72k|            if from == to {
 1008|  3.72k|                Vec::new() // identity case
 1009|  3.72k|            } else {
 1010|  3.72k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  3.72k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  3.72k|            }
 1013|  3.72k|        }
 1014|  3.72k|
 1015|  3.72k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  3.72k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  3.72k|            if from == to {
 1018|  3.72k|                Vec::new() // identity case
 1019|  3.72k|            } else {
 1020|  3.72k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  3.72k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  3.72k|            }
 1023|  3.72k|        }
 1024|  3.72k|
 1025|  3.72k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  3.72k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  3.72k|        }
 1028|  3.72k|
 1029|  3.72k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  3.72k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  3.72k|        }
 1032|  3.72k|
 1033|  3.72k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  3.72k|            let pattern = d.iter().map(|q| {
 1035|  3.72k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  3.72k|                match &q.graph_name {
 1037|  3.72k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  3.72k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  3.72k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  3.72k|                }
 1041|  3.72k|            }).reduce(new_join).unwrap_or_default();
 1042|  3.72k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  3.72k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  3.72k|                delete,
 1045|  3.72k|                insert: Vec::new(),
 1046|  3.72k|                using: None,
 1047|  3.72k|                pattern: Box::new(pattern)
 1048|  3.72k|            }])
 1049|  3.72k|        }
 1050|  3.72k|
 1051|  3.72k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  3.72k|            let (delete, insert) = c;
 1053|  3.72k|            let mut delete = delete.unwrap_or_default();
 1054|  3.72k|            let mut insert = insert.unwrap_or_default();
 1055|  3.72k|            #[allow(clippy::shadow_same)]
 1056|  3.72k|            let mut pattern = pattern;
 1057|  3.72k|
 1058|  3.72k|            let mut using = if u.is_empty() {
 1059|  3.72k|                None
 1060|  3.72k|            } else {
 1061|  3.72k|                let mut default = Vec::new();
 1062|  3.72k|                let mut named = Vec::new();
 1063|  3.72k|                for (d, n) in u {
 1064|  3.72k|                    if let Some(d) = d {
 1065|  3.72k|                        default.push(d)
 1066|  3.72k|                    }
 1067|  3.72k|                    if let Some(n) = n {
 1068|  3.72k|                        named.push(n)
 1069|  3.72k|                    }
 1070|  3.72k|                }
 1071|  3.72k|                Some(QueryDataset { default, named: Some(named) })
 1072|  3.72k|            };
 1073|  3.72k|
 1074|  3.72k|            if let Some(with) = with {
 1075|  3.72k|                // We inject WITH everywhere
 1076|  3.72k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  3.72k|                    GroundQuadPattern {
 1078|  3.72k|                        subject: q.subject,
 1079|  3.72k|                        predicate: q.predicate,
 1080|  3.72k|                        object: q.object,
 1081|  3.72k|                        graph_name: with.clone().into()
 1082|  3.72k|                    }
 1083|  3.72k|                } else {
 1084|  3.72k|                    q
 1085|  3.72k|                }).collect();
 1086|  3.72k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  3.72k|                    QuadPattern {
 1088|  3.72k|                        subject: q.subject,
 1089|  3.72k|                        predicate: q.predicate,
 1090|  3.72k|                        object: q.object,
 1091|  3.72k|                        graph_name: with.clone().into()
 1092|  3.72k|                    }
 1093|  3.72k|                } else {
 1094|  3.72k|                    q
 1095|  3.72k|                }).collect();
 1096|  3.72k|                if using.is_none() {
 1097|  3.72k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  3.72k|                }
 1099|  3.72k|            }
 1100|  3.72k|
 1101|  3.72k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  3.72k|                delete,
 1103|  3.72k|                insert,
 1104|  3.72k|                using,
 1105|  3.72k|                pattern: Box::new(pattern)
 1106|  3.72k|            }]
 1107|  3.72k|        }
 1108|  3.72k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  3.72k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  3.72k|            (Some(d), i)
 1111|  3.72k|        } / i:InsertClause() {
 1112|  3.72k|            (None, Some(i))
 1113|  3.72k|        }
 1114|  3.72k|        rule Modify_clear() = {
 1115|  3.72k|            state.used_bnodes.clear();
 1116|  3.72k|            state.currently_used_bnodes.clear();
 1117|  3.72k|        }
 1118|  3.72k|
 1119|  3.72k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  3.72k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  3.72k|        }
 1122|  3.72k|
 1123|  3.72k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  3.72k|
 1125|  3.72k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  3.72k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  3.72k|            (Some(i), None)
 1128|  3.72k|        }
 1129|  3.72k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  3.72k|            (None, Some(i))
 1131|  3.72k|        }
 1132|  3.72k|
 1133|  3.72k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  3.72k|            GraphName::DefaultGraph
 1135|  3.72k|        } / (i("GRAPH") _)? g:iri() {
 1136|  3.72k|            GraphName::NamedNode(g)
 1137|  3.72k|        }
 1138|  3.72k|
 1139|  3.72k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  3.72k|
 1141|  3.72k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  3.72k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  3.72k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  3.72k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  3.72k|
 1146|  3.72k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  3.72k|
 1148|  3.72k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  3.72k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  3.72k|        }
 1151|  3.72k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  3.72k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  3.72k|        }
 1154|  3.72k|
 1155|  3.72k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  3.72k|            q.into_iter().flatten().collect()
 1157|  3.72k|        }
 1158|  3.72k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  3.72k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  3.72k|        } //TODO: return iter?
 1161|  3.72k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  3.72k|
 1163|  3.72k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  3.72k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  3.72k|        }
 1166|  3.72k|
 1167|  3.72k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  3.72k|            ts.into_iter().flatten().collect()
 1169|  3.72k|        }
 1170|  3.72k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  3.72k|
 1172|  3.72k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  3.72k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  3.72k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  3.72k|        rule GroupGraphPattern_clear() = {
 1176|  3.72k|             // We deal with blank nodes aliases rule
 1177|  3.72k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  3.72k|            state.currently_used_bnodes.clear();
 1179|  3.72k|        }
 1180|  3.72k|
 1181|  3.72k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  3.72k|            let mut filter: Option<Expression> = None;
 1183|  3.72k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  3.72k|            for e in b.into_iter().flatten() {
 1185|  3.72k|                match e {
 1186|  3.72k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  3.72k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  3.72k|                    }
 1189|  3.72k|                    #[cfg(feature = "sep-0006")]
 1190|  3.72k|                    PartialGraphPattern::Lateral(p) => {
 1191|  3.72k|                        let mut defined_variables = HashSet::default();
 1192|  3.72k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  3.72k|                        let mut contains = false;
 1194|  3.72k|                        g.on_in_scope_variable(|v| {
 1195|  3.72k|                            if defined_variables.contains(v) {
 1196|  3.72k|                                contains = true;
 1197|  3.72k|                            }
 1198|  3.72k|                        });
 1199|  3.72k|                        if contains {
 1200|  3.72k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  3.72k|                        }
 1202|  3.72k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  3.72k|                    }
 1204|  3.72k|                    PartialGraphPattern::Minus(p) => {
 1205|  3.72k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  3.72k|                    }
 1207|  3.72k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  3.72k|                        let mut contains = false;
 1209|  3.72k|                        g.on_in_scope_variable(|v| {
 1210|  3.72k|                            if *v == variable {
 1211|  3.72k|                                contains = true;
 1212|  3.72k|                            }
 1213|  3.72k|                        });
 1214|  3.72k|                        if contains {
 1215|  3.72k|                            return Err("BIND is overriding an existing variable")
 1216|  3.72k|                        }
 1217|  3.72k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  3.72k|                    }
 1219|  3.72k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  3.72k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  3.72k|                    } else {
 1222|  3.72k|                        expr
 1223|  3.72k|                    }),
 1224|  3.72k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  3.72k|                }
 1226|  3.72k|            }
 1227|  3.72k|
 1228|  3.72k|            Ok(if let Some(expr) = filter {
 1229|  3.72k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  3.72k|            } else {
 1231|  3.72k|                g
 1232|  3.72k|            })
 1233|  3.72k|        }
 1234|  3.72k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  3.72k|            let mut result = vec![a];
 1236|  3.72k|            if let Some(v) = b {
 1237|  3.72k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  3.72k|            }
 1239|  3.72k|            result
 1240|  3.72k|        }
 1241|  3.72k|
 1242|  3.72k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  3.72k|            hs.into_iter().flatten().collect()
 1244|  3.72k|        }
 1245|  3.72k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  3.72k|
 1247|  3.72k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  3.72k|
 1249|  3.72k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  3.72k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  3.72k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  3.72k|            } else {
 1253|  3.72k|               PartialGraphPattern::Optional(p, None)
 1254|  3.72k|            }
 1255|  3.72k|        }
 1256|  3.72k|
 1257|  3.72k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  3.72k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  3.72k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  3.72k|        }
 1261|  3.72k|
 1262|  3.72k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  3.72k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  3.72k|        }
 1265|  3.72k|
 1266|  3.72k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  3.72k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  3.72k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  3.72k|
 1270|  3.72k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  3.72k|            PartialGraphPattern::Bind(e, v)
 1272|  3.72k|        }
 1273|  3.72k|
 1274|  3.72k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  3.72k|
 1276|  3.72k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  3.72k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  3.72k|        }
 1279|  3.72k|
 1280|  3.72k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  3.72k|            (vec![var], d)
 1282|  3.72k|        }
 1283|  3.72k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  3.72k|
 1285|  3.72k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  3.72k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  3.72k|                Ok((vars, vals))
 1288|  3.72k|            } else {
 1289|  3.72k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  3.72k|            }
 1291|  3.72k|        }
 1292|  3.72k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  3.72k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  3.72k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  3.72k|
 1296|  3.72k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  3.72k|            t:QuotedTripleData() {?
 1298|  3.72k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  3.72k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  3.72k|            } /
 1301|  3.72k|            i:iri() { Some(i.into()) } /
 1302|  3.72k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  3.72k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  3.72k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  3.72k|            i("UNDEF") { None }
 1306|  3.72k|
 1307|  3.72k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  3.72k|            PartialGraphPattern::Minus(p)
 1309|  3.72k|        }
 1310|  3.72k|
 1311|  3.72k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  3.72k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  3.72k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  3.72k|            }).map(PartialGraphPattern::Other)
 1315|  3.72k|        }
 1316|  3.72k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  3.72k|
 1318|  3.72k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  3.72k|            PartialGraphPattern::Filter(c)
 1320|  3.72k|        }
 1321|  3.72k|
 1322|  3.72k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  3.72k|
 1324|  3.72k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  3.72k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  3.72k|        }
 1327|  3.72k|
 1328|  3.72k|        rule ArgList() -> Vec<Expression> =
 1329|  3.72k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  3.72k|            NIL() { Vec::new() }
 1331|  3.72k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  3.72k|
 1333|  3.72k|        rule ExpressionList() -> Vec<Expression> =
 1334|  3.72k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  3.72k|            NIL() { Vec::new() }
 1336|  3.72k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  3.72k|
 1338|  3.72k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  3.72k|
 1340|  3.72k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  3.72k|            p.into_iter().flatten().collect()
 1342|  3.72k|        }
 1343|  3.72k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  3.72k|
 1345|  3.72k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  3.72k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  3.72k|                let mut patterns = po.patterns;
 1348|  3.72k|                for (p, os) in po.focus {
 1349|  3.72k|                    for o in os {
 1350|  3.72k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  3.72k|                    }
 1352|  3.72k|                }
 1353|  3.72k|                Ok(patterns)
 1354|  3.72k|            } /
 1355|  3.72k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  3.72k|                let mut patterns = s.patterns;
 1357|  3.72k|                patterns.extend(po.patterns);
 1358|  3.72k|                for (p, os) in po.focus {
 1359|  3.72k|                    for o in os {
 1360|  3.72k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  3.72k|                    }
 1362|  3.72k|                }
 1363|  3.72k|                Ok(patterns)
 1364|  3.72k|            }
 1365|  3.72k|
 1366|  3.72k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  3.72k|            PropertyListNotEmpty() /
 1368|  3.72k|            { FocusedTriplePattern::default() }
 1369|  3.72k|
 1370|  3.72k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  3.72k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  3.72k|                a.focus.push(b.focus);
 1373|  3.72k|                a.patterns.extend(b.patterns);
 1374|  3.72k|                a
 1375|  3.72k|            })
 1376|  3.72k|        }
 1377|  3.72k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  3.72k|            FocusedTriplePattern {
 1379|  3.72k|                focus: (p, o.focus),
 1380|  3.72k|                patterns: o.patterns
 1381|  3.72k|            }
 1382|  3.72k|        }
 1383|  3.72k|
 1384|  3.72k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  3.72k|
 1386|  3.72k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  3.72k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  3.72k|                a.focus.push(b.focus);
 1389|  3.72k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  3.72k|                a
 1391|  3.72k|            })
 1392|  3.72k|        }
 1393|  3.72k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  3.72k|
 1395|  3.72k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  3.72k|            if let Some(a) = a {
 1397|  3.72k|                let mut patterns = g.patterns;
 1398|  3.72k|                patterns.extend(a.patterns);
 1399|  3.72k|                FocusedTriplePattern {
 1400|  3.72k|                    focus: AnnotatedTerm {
 1401|  3.72k|                        term: g.focus,
 1402|  3.72k|                        annotations: a.focus
 1403|  3.72k|                    },
 1404|  3.72k|                    patterns
 1405|  3.72k|                }
 1406|  3.72k|            } else {
 1407|  3.72k|                FocusedTriplePattern {
 1408|  3.72k|                    focus: AnnotatedTerm {
 1409|  3.72k|                        term: g.focus,
 1410|  3.72k|                        annotations: Vec::new()
 1411|  3.72k|                    },
 1412|  3.72k|                    patterns: g.patterns
 1413|  3.72k|                }
 1414|  3.72k|            }
 1415|  3.72k|        }
 1416|  3.72k|
 1417|  3.72k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  3.72k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  3.72k|                let mut patterns = po.patterns;
 1420|  3.72k|                for (p, os) in po.focus {
 1421|  3.72k|                    for o in os {
 1422|  3.72k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  3.72k|                    }
 1424|  3.72k|                }
 1425|  3.72k|                Ok(patterns)
 1426|  3.72k|            } /
 1427|  3.72k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  3.72k|                let mut patterns = s.patterns;
 1429|  3.72k|                patterns.extend(po.patterns);
 1430|  3.72k|                for (p, os) in po.focus {
 1431|  3.72k|                    for o in os {
 1432|  3.72k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  3.72k|                    }
 1434|  3.72k|                }
 1435|  3.72k|                Ok(patterns)
 1436|  3.72k|            }
 1437|  3.72k|
 1438|  3.72k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  3.72k|            PropertyListPathNotEmpty() /
 1440|  3.72k|            { FocusedTripleOrPathPattern::default() }
 1441|  3.72k|
 1442|  3.72k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  3.72k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  3.72k|                    focus: vec![(hp, ho.focus)],
 1445|  3.72k|                    patterns: ho.patterns
 1446|  3.72k|                }, |mut a, b| {
 1447|  3.72k|                    a.focus.push(b.focus);
 1448|  3.72k|                    a.patterns.extend(b.patterns);
 1449|  3.72k|                    a
 1450|  3.72k|                })
 1451|  3.72k|        }
 1452|  3.72k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  3.72k|            c
 1454|  3.72k|        }
 1455|  3.72k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  3.72k|            FocusedTripleOrPathPattern {
 1457|  3.72k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  3.72k|                patterns: o.patterns
 1459|  3.72k|            }
 1460|  3.72k|        }
 1461|  3.72k|
 1462|  3.72k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  3.72k|            p.into()
 1464|  3.72k|        }
 1465|  3.72k|
 1466|  3.72k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  3.72k|            v.into()
 1468|  3.72k|        }
 1469|  3.72k|
 1470|  3.72k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  3.72k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  3.72k|                a.focus.push(b.focus);
 1473|  3.72k|                a.patterns.extend(b.patterns);
 1474|  3.72k|                a
 1475|  3.72k|            })
 1476|  3.72k|        }
 1477|  3.72k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  3.72k|
 1479|  3.72k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  3.72k|             if let Some(a) = a {
 1481|  3.72k|                let mut patterns = g.patterns;
 1482|  3.72k|                patterns.extend(a.patterns);
 1483|  3.72k|                FocusedTripleOrPathPattern {
 1484|  3.72k|                    focus: AnnotatedTermPath {
 1485|  3.72k|                        term: g.focus,
 1486|  3.72k|                        annotations: a.focus
 1487|  3.72k|                    },
 1488|  3.72k|                    patterns
 1489|  3.72k|                }
 1490|  3.72k|            } else {
 1491|  3.72k|                FocusedTripleOrPathPattern {
 1492|  3.72k|                    focus: AnnotatedTermPath {
 1493|  3.72k|                        term: g.focus,
 1494|  3.72k|                        annotations: Vec::new()
 1495|  3.72k|                    },
 1496|  3.72k|                    patterns: g.patterns
 1497|  3.72k|                }
 1498|  3.72k|            }
 1499|  3.72k|        }
 1500|  3.72k|
 1501|  3.72k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  3.72k|
 1503|  3.72k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  3.72k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  3.72k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  3.72k|            })
 1507|  3.72k|        }
 1508|  3.72k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  3.72k|
 1510|  3.72k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  3.72k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  3.72k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  3.72k|            })
 1514|  3.72k|        }
 1515|  3.72k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  3.72k|
 1517|  3.72k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  3.72k|            match o {
 1519|  3.72k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  3.72k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  3.72k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  3.72k|                Some(_) => unreachable!(),
 1523|  3.72k|                None => p
 1524|  3.72k|            }
 1525|  3.72k|        }
 1526|  3.72k|        rule PathElt_op() -> char =
 1527|  3.72k|            "*" { '*' } /
 1528|  3.72k|            "+" { '+' } /
 1529|  3.72k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  3.72k|
 1531|  3.72k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  3.72k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  3.72k|            PathElt()
 1534|  3.72k|
 1535|  3.72k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  3.72k|            v:iri() { v.into() } /
 1537|  3.72k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  3.72k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  3.72k|            "(" _ p:Path() _ ")" { p }
 1540|  3.72k|
 1541|  3.72k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  3.72k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  3.72k|                let mut direct = Vec::new();
 1544|  3.72k|                let mut inverse = Vec::new();
 1545|  3.72k|                for e in p {
 1546|  3.72k|                    match e {
 1547|  3.72k|                        Either::Left(a) => direct.push(a),
 1548|  3.72k|                        Either::Right(b) => inverse.push(b)
 1549|  3.72k|                    }
 1550|  3.72k|                }
 1551|  3.72k|                if inverse.is_empty() {
 1552|  3.72k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  3.72k|                } else if direct.is_empty() {
 1554|  3.72k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  3.72k|                } else {
 1556|  3.72k|                    PropertyPathExpression::Alternative(
 1557|  3.72k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  3.72k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  3.72k|                    )
 1560|  3.72k|                }
 1561|  3.72k|            } /
 1562|  3.72k|            p:PathOneInPropertySet() {
 1563|  3.72k|                match p {
 1564|  3.72k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  3.72k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  3.72k|                }
 1567|  3.72k|            }
 1568|  3.72k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  3.72k|
 1570|  3.72k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  3.72k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  3.72k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  3.72k|            v:iri() { Either::Left(v) } /
 1574|  3.72k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  3.72k|
 1576|  3.72k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  3.72k|
 1578|  3.72k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  3.72k|            let mut patterns = po.patterns;
 1580|  3.72k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  3.72k|            for (p, os) in po.focus {
 1582|  3.72k|                for o in os {
 1583|  3.72k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  3.72k|                }
 1585|  3.72k|            }
 1586|  3.72k|            Ok(FocusedTriplePattern {
 1587|  3.72k|                focus: bnode,
 1588|  3.72k|                patterns
 1589|  3.72k|            })
 1590|  3.72k|        }
 1591|  3.72k|
 1592|  3.72k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  3.72k|
 1594|  3.72k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  3.72k|            let mut patterns = po.patterns;
 1596|  3.72k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  3.72k|            for (p, os) in po.focus {
 1598|  3.72k|                for o in os {
 1599|  3.72k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  3.72k|                }
 1601|  3.72k|            }
 1602|  3.72k|            Ok(FocusedTripleOrPathPattern {
 1603|  3.72k|                focus: bnode,
 1604|  3.72k|                patterns
 1605|  3.72k|            })
 1606|  3.72k|        }
 1607|  3.72k|
 1608|  3.72k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  3.72k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  3.72k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  3.72k|            for objWithPatterns in o.into_iter().rev() {
 1612|  3.72k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  3.72k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  3.72k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  3.72k|                current_list_node = new_blank_node;
 1616|  3.72k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  3.72k|            }
 1618|  3.72k|            FocusedTriplePattern {
 1619|  3.72k|                focus: current_list_node,
 1620|  3.72k|                patterns
 1621|  3.72k|            }
 1622|  3.72k|        }
 1623|  3.72k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  3.72k|
 1625|  3.72k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  3.72k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  3.72k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  3.72k|            for objWithPatterns in o.into_iter().rev() {
 1629|  3.72k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  3.72k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  3.72k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  3.72k|                current_list_node = new_blank_node;
 1633|  3.72k|                patterns.extend(objWithPatterns.patterns);
 1634|  3.72k|            }
 1635|  3.72k|            FocusedTripleOrPathPattern {
 1636|  3.72k|                focus: current_list_node,
 1637|  3.72k|                patterns
 1638|  3.72k|            }
 1639|  3.72k|        }
 1640|  3.72k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  3.72k|
 1642|  3.72k|
 1643|  3.72k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  3.72k|
 1645|  3.72k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  3.72k|
 1647|  3.72k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  3.72k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  3.72k|            TriplesNode()
 1650|  3.72k|
 1651|  3.72k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  3.72k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  3.72k|            TriplesNodePath()
 1654|  3.72k|
 1655|  3.72k|        rule VarOrTerm() -> TermPattern =
 1656|  3.72k|            v:Var() { v.into() } /
 1657|  3.72k|            t:QuotedTriple() {?
 1658|  3.72k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  3.72k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  3.72k|            } /
 1661|  3.72k|            t:GraphTerm() { t.into() }
 1662|  3.72k|
 1663|  3.72k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  3.72k|            Ok(TriplePattern {
 1665|  3.72k|                subject: s,
 1666|  3.72k|                predicate: p,
 1667|  3.72k|                object: o
 1668|  3.72k|            })
 1669|  3.72k|        }
 1670|  3.72k|
 1671|  3.72k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  3.72k|            Ok(GroundTriple {
 1673|  3.72k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  3.72k|                predicate: p,
 1675|  3.72k|                object: o
 1676|  3.72k|            })
 1677|  3.72k|        }
 1678|  3.72k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  3.72k|
 1680|  3.72k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  3.72k|            l:RDFLiteral() { l.into() } /
 1682|  3.72k|            l:NumericLiteral() { l.into() } /
 1683|  3.72k|            l:BooleanLiteral() { l.into() } /
 1684|  3.72k|            t:QuotedTripleData() {?
 1685|  3.72k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  3.72k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  3.72k|            }
 1688|  3.72k|
 1689|  3.72k|        rule VarOrIri() -> NamedNodePattern =
 1690|  3.72k|            v:Var() { v.into() } /
 1691|  3.72k|            i:iri() { i.into() }
 1692|  3.72k|
 1693|  3.72k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  3.72k|
 1695|  3.72k|        rule GraphTerm() -> Term =
 1696|  3.72k|            i:iri() { i.into() } /
 1697|  3.72k|            l:RDFLiteral() { l.into() } /
 1698|  3.72k|            l:NumericLiteral() { l.into() } /
 1699|  3.72k|            l:BooleanLiteral() { l.into() } /
 1700|  3.72k|            b:BlankNode() { b.into() } /
 1701|  3.72k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  3.72k|
 1703|  3.72k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  3.72k|
 1705|  3.72k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  3.72k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  3.72k|        }
 1708|  3.72k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  3.72k|
 1710|  3.72k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  3.72k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  3.72k|        }
 1713|  3.72k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  3.72k|
 1715|  3.72k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  3.72k|
 1717|  3.72k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  3.72k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  3.72k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  3.72k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  3.72k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  3.72k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  3.72k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  3.72k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  3.72k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  3.72k|            Some(_) => unreachable!(),
 1727|  3.72k|            None => a
 1728|  3.72k|        } }
 1729|  3.72k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  3.72k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  3.72k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  3.72k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  3.72k|
 1734|  3.72k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  3.72k|
 1736|  3.72k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  3.72k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  3.72k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  3.72k|            Some(_) => unreachable!(),
 1740|  3.72k|            None => a,
 1741|  3.72k|        } }
 1742|  3.72k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  3.72k|            (s, e)
 1744|  3.72k|        }
 1745|  3.72k|
 1746|  3.72k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  3.72k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  3.72k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  3.72k|            Some(_) => unreachable!(),
 1750|  3.72k|            None => a
 1751|  3.72k|        } }
 1752|  3.72k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  3.72k|            (s, e)
 1754|  3.72k|        }
 1755|  3.72k|
 1756|  3.72k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  3.72k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  3.72k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  3.72k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  3.72k|            Some(_) => unreachable!(),
 1761|  3.72k|            None => e,
 1762|  3.72k|        } }
 1763|  3.72k|
 1764|  3.72k|        rule PrimaryExpression() -> Expression =
 1765|  3.72k|            BrackettedExpression()  /
 1766|  3.72k|            ExprQuotedTriple() /
 1767|  3.72k|            iriOrFunction() /
 1768|  3.72k|            v:Var() { v.into() } /
 1769|  3.72k|            l:RDFLiteral() { l.into() } /
 1770|  3.72k|            l:NumericLiteral() { l.into() } /
 1771|  3.72k|            l:BooleanLiteral() { l.into() } /
 1772|  3.72k|            BuiltInCall()
 1773|  3.72k|
 1774|  3.72k|        rule ExprVarOrTerm() -> Expression =
 1775|  3.72k|            ExprQuotedTriple() /
 1776|  3.72k|            i:iri() { i.into() } /
 1777|  3.72k|            l:RDFLiteral() { l.into() } /
 1778|  3.72k|            l:NumericLiteral() { l.into() } /
 1779|  3.72k|            l:BooleanLiteral() { l.into() } /
 1780|  3.72k|            v:Var() { v.into() }
 1781|  3.72k|
 1782|  3.72k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  3.72k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  3.72k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  3.72k|        }
 1786|  3.72k|
 1787|  3.72k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  3.72k|
 1789|  3.72k|        rule BuiltInCall() -> Expression =
 1790|  3.72k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  3.72k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  3.72k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  3.72k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  3.72k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  3.72k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  3.72k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  3.72k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  3.72k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  3.72k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  3.72k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  3.72k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  3.72k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  3.72k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  3.72k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  3.72k|            SubstringExpression() /
 1806|  3.72k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  3.72k|            StrReplaceExpression() /
 1808|  3.72k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  3.72k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  3.72k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  3.72k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  3.72k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  3.72k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  3.72k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  3.72k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  3.72k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  3.72k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  3.72k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  3.72k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  3.72k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  3.72k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  3.72k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  3.72k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  3.72k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  3.72k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  3.72k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  3.72k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  3.72k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  3.72k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  3.72k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  3.72k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  3.72k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  3.72k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  3.72k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  3.72k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  3.72k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  3.72k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  3.72k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  3.72k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  3.72k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  3.72k|            RegexExpression() /
 1842|  3.72k|            ExistsFunc() /
 1843|  3.72k|            NotExistsFunc() /
 1844|  3.72k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  3.72k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  3.72k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  3.72k|            } /
 1848|  3.72k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  3.72k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  3.72k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  3.72k|            } /
 1852|  3.72k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  3.72k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  3.72k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  3.72k|            } /
 1856|  3.72k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  3.72k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  3.72k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  3.72k|            } /
 1860|  3.72k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  3.72k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  3.72k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  3.72k|            } /
 1864|  3.72k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  3.72k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  3.72k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  3.72k|            }
 1868|  3.72k|
 1869|  3.72k|        rule RegexExpression() -> Expression =
 1870|  3.72k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  3.72k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  3.72k|
 1873|  3.72k|
 1874|  3.72k|        rule SubstringExpression() -> Expression =
 1875|  3.72k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  3.72k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  3.72k|
 1878|  3.72k|
 1879|  3.72k|        rule StrReplaceExpression() -> Expression =
 1880|  3.72k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  3.72k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  3.72k|
 1883|  3.72k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  3.72k|
 1885|  3.72k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  3.72k|
 1887|  3.72k|        rule Aggregate() -> AggregateExpression =
 1888|  3.72k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  3.72k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  3.72k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  3.72k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  3.72k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  3.72k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  3.72k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  3.72k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  3.72k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  3.72k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  3.72k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  3.72k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  3.72k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  3.72k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  3.72k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  3.72k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  3.72k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  3.72k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  3.72k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  3.72k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  3.72k|
 1909|  3.72k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  3.72k|            match a {
 1911|  3.72k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  3.72k|                None => i.into()
 1913|  3.72k|            }
 1914|  3.72k|        }
 1915|  3.72k|
 1916|  3.72k|        rule RDFLiteral() -> Literal =
 1917|  3.72k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  3.72k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  3.72k|            value:String() { Literal::new_simple_literal(value) }
 1920|  3.72k|
 1921|  3.72k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  3.72k|
 1923|  3.72k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  3.72k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  3.72k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  3.72k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  3.72k|
 1928|  3.72k|        rule NumericLiteralPositive() -> Literal =
 1929|  3.72k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  3.72k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  3.72k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  3.72k|
 1933|  3.72k|
 1934|  3.72k|        rule NumericLiteralNegative() -> Literal =
 1935|  3.72k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  3.72k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  3.72k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  3.72k|
 1939|  3.72k|        rule BooleanLiteral() -> Literal =
 1940|  3.72k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  3.72k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  3.72k|
 1943|  3.72k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  3.72k|
 1945|  3.72k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  3.72k|            NamedNode::from(i)
 1947|  3.72k|        }
 1948|  3.72k|
 1949|  3.72k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  3.72k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  3.72k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  3.72k|            } else {
 1953|  3.72k|                Err("Prefix not found")
 1954|  3.72k|            } }
 1955|  3.72k|
 1956|  3.72k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  3.72k|            let node = BlankNode::new_unchecked(id);
 1958|  3.72k|            if state.used_bnodes.contains(&node) {
 1959|  3.72k|                Err("Already used blank node id")
 1960|  3.72k|            } else {
 1961|  3.72k|                state.currently_used_bnodes.insert(node.clone());
 1962|  3.72k|                Ok(node)
 1963|  3.72k|            }
 1964|  3.72k|        } / ANON() { BlankNode::default() }
 1965|  3.72k|
 1966|  3.72k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  3.72k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  3.72k|        }
 1969|  3.72k|
 1970|  3.72k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  3.72k|            ns
 1972|  3.72k|        }
 1973|  3.72k|
 1974|  3.72k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  3.72k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  3.72k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  3.72k|                iri.push_str(base);
 1978|  3.72k|                for chunk in local.split('\\') { // We remove \
 1979|  3.72k|                    iri.push_str(chunk);
 1980|  3.72k|                }
 1981|  3.72k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  3.72k|            } else {
 1983|  3.72k|                Err("Prefix not found")
 1984|  3.72k|            }
 1985|  3.72k|        }
 1986|  3.72k|
 1987|  3.72k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  3.72k|            b
 1989|  3.72k|        }
 1990|  3.72k|
 1991|  3.72k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  3.72k|
 1993|  3.72k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  3.72k|
 1995|  3.72k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  3.72k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  3.72k|        }
 1998|  3.72k|
 1999|  3.72k|        rule INTEGER() = ['0'..='9']+
 2000|  3.72k|
 2001|  3.72k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  3.72k|
 2003|  3.72k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  3.72k|
 2005|  3.72k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  3.72k|
 2007|  3.72k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  3.72k|
 2009|  3.72k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  3.72k|
 2011|  3.72k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  3.72k|
 2013|  3.72k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  3.72k|
 2015|  3.72k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  3.72k|
 2017|  3.72k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  3.72k|
 2019|  3.72k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  3.72k|             unescape_string(l)
 2021|  3.72k|        }
 2022|  3.72k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  3.72k|
 2024|  3.72k|
 2025|  3.72k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  3.72k|             unescape_string(l)
 2027|  3.72k|        }
 2028|  3.72k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  3.72k|
 2030|  3.72k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  3.72k|             unescape_string(l)
 2032|  3.72k|        }
 2033|  3.72k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  3.72k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  3.72k|
 2036|  3.72k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  3.72k|             unescape_string(l)
 2038|  3.72k|        }
 2039|  3.72k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  3.72k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  3.72k|
 2042|  3.72k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  3.72k|
 2044|  3.72k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  3.72k|
 2046|  3.72k|        rule NIL() = "(" WS()* ")"
 2047|  3.72k|
 2048|  3.72k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  3.72k|
 2050|  3.72k|        rule ANON() = "[" WS()* "]"
 2051|  3.72k|
 2052|  3.72k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  3.72k|
 2054|  3.72k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  3.72k|
 2056|  3.72k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  3.72k|
 2058|  3.72k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  3.72k|
 2060|  3.72k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  3.72k|
 2062|  3.72k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  3.72k|
 2064|  3.72k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  3.72k|
 2066|  3.72k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  3.72k|
 2068|  3.72k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  3.72k|
 2070|  3.72k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  3.72k|
 2072|  3.72k|        //space
 2073|  3.72k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  3.72k|
 2075|  3.72k|        //comment
 2076|  3.72k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  3.72k|
 2078|  3.72k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  3.72k|            if input.eq_ignore_ascii_case(literal) {
 2080|  3.72k|                Ok(())
 2081|  3.72k|            } else {
 2082|  3.72k|                Err(literal)
 2083|  3.72k|            }
 2084|  3.72k|        }
 2085|  3.72k|    }
 2086|  3.72k|}
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser32___parse_GroupOrUnionGraphPattern0B7_:
  778|     91|parser! {
  779|     91|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|     91|    grammar parser(state: &mut ParserState) for str {
  781|     91|        pub rule QueryUnit() -> Query = Query()
  782|     91|
  783|     91|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|     91|            q
  785|     91|        }
  786|     91|
  787|     91|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|     91|
  789|     91|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|     91|
  791|     91|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|     91|            state.base_iri = Some(i)
  793|     91|        }
  794|     91|
  795|     91|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|     91|            state.namespaces.insert(ns.into(), i.into_inner());
  797|     91|        }
  798|     91|
  799|     91|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|     91|            Ok(Query::Select {
  801|     91|                dataset: d,
  802|     91|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|     91|                base_iri: state.base_iri.clone()
  804|     91|            })
  805|     91|        }
  806|     91|
  807|     91|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|     91|            build_select(s, w, g, h, o, l, v, state)
  809|     91|        }
  810|     91|
  811|     91|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|     91|            Selection {
  813|     91|                option: o,
  814|     91|                variables: v
  815|     91|            }
  816|     91|        }
  817|     91|        rule Selection_init() = {
  818|     91|            state.aggregates.push(Vec::new())
  819|     91|        }
  820|     91|        rule SelectClause_option() -> SelectionOption =
  821|     91|            i("DISTINCT") { SelectionOption::Distinct } /
  822|     91|            i("REDUCED") { SelectionOption::Reduced } /
  823|     91|            { SelectionOption::Default }
  824|     91|        rule SelectClause_variables() -> SelectionVariables =
  825|     91|            "*" { SelectionVariables::Star } /
  826|     91|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|     91|        rule SelectClause_member() -> SelectionMember =
  828|     91|            v:Var() _ { SelectionMember::Variable(v) } /
  829|     91|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|     91|
  831|     91|        rule ConstructQuery() -> Query =
  832|     91|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|     91|                Ok(Query::Construct {
  834|     91|                    template: c,
  835|     91|                    dataset: d,
  836|     91|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|     91|                    base_iri: state.base_iri.clone()
  838|     91|                })
  839|     91|            } /
  840|     91|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|     91|                Ok(Query::Construct {
  842|     91|                    template: c.clone(),
  843|     91|                    dataset: d,
  844|     91|                    pattern: build_select(
  845|     91|                        Selection::no_op(),
  846|     91|                        GraphPattern::Bgp { patterns: c },
  847|     91|                        g, h, o, l, v, state
  848|     91|                    )?,
  849|     91|                    base_iri: state.base_iri.clone()
  850|     91|                })
  851|     91|            }
  852|     91|
  853|     91|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|     91|
  855|     91|        rule DescribeQuery() -> Query =
  856|     91|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|     91|                Ok(Query::Describe {
  858|     91|                    dataset: d,
  859|     91|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|     91|                    base_iri: state.base_iri.clone()
  861|     91|                })
  862|     91|            } /
  863|     91|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|     91|                Ok(Query::Describe {
  865|     91|                    dataset: d,
  866|     91|                    pattern: build_select(Selection {
  867|     91|                        option: SelectionOption::Default,
  868|     91|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|     91|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|     91|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|     91|                        }).collect())
  872|     91|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|     91|                    base_iri: state.base_iri.clone()
  874|     91|                })
  875|     91|            }
  876|     91|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|     91|
  878|     91|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|     91|            Ok(Query::Ask {
  880|     91|                dataset: d,
  881|     91|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|     91|                base_iri: state.base_iri.clone()
  883|     91|            })
  884|     91|        }
  885|     91|
  886|     91|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|     91|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|     91|            if d.is_empty() {
  889|     91|                return None;
  890|     91|            }
  891|     91|            let mut default = Vec::new();
  892|     91|            let mut named = Vec::new();
  893|     91|            for (d, n) in d {
  894|     91|                if let Some(d) = d {
  895|     91|                    default.push(d);
  896|     91|                }
  897|     91|                if let Some(n) = n {
  898|     91|                    named.push(n);
  899|     91|                }
  900|     91|            }
  901|     91|            Some(QueryDataset {
  902|     91|                default, named: Some(named)
  903|     91|            })
  904|     91|        }
  905|     91|
  906|     91|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|     91|            (Some(s), None)
  908|     91|        }
  909|     91|
  910|     91|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|     91|            (None, Some(s))
  912|     91|        }
  913|     91|
  914|     91|        rule SourceSelector() -> NamedNode = iri()
  915|     91|
  916|     91|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|     91|            p
  918|     91|        }
  919|     91|
  920|     91|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|     91|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|     91|            let clauses = c.into_iter().map(|(e, vo)| {
  923|     91|                if let Expression::Variable(v) = e {
  924|     91|                    v
  925|     91|                } else {
  926|     91|                    let v = vo.unwrap_or_else(variable);
  927|     91|                    projections.push((e, v.clone()));
  928|     91|                    v
  929|     91|                }
  930|     91|            }).collect();
  931|     91|            (clauses, projections)
  932|     91|        }
  933|     91|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|     91|
  935|     91|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|     91|            e:BuiltInCall() { (e, None) } /
  937|     91|            e:FunctionCall() { (e, None) } /
  938|     91|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|     91|            e:Var() { (e.into(), None) }
  940|     91|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|     91|
  942|     91|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|     91|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|     91|        }
  945|     91|
  946|     91|        rule HavingCondition() -> Expression = Constraint()
  947|     91|
  948|     91|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|     91|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|     91|
  951|     91|        rule OrderCondition() -> OrderExpression =
  952|     91|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|     91|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|     91|            e: Constraint() { OrderExpression::Asc(e) } /
  955|     91|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|     91|
  957|     91|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|     91|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|     91|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|     91|
  961|     91|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|     91|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|     91|        }
  964|     91|
  965|     91|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|     91|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|     91|        }
  968|     91|
  969|     91|        rule ValuesClause() -> Option<GraphPattern> =
  970|     91|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|     91|            { None }
  972|     91|
  973|     91|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|     91|
  975|     91|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|     91|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|     91|
  978|     91|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|     91|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|     91|        }
  981|     91|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|     91|
  983|     91|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|     91|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|     91|        }
  986|     91|
  987|     91|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|     91|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|     91|        }
  990|     91|
  991|     91|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|     91|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|     91|        }
  994|     91|
  995|     91|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|     91|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|     91|            if from == to {
  998|     91|                Vec::new() // identity case
  999|     91|            } else {
 1000|     91|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|     91|                vec![copy_graph(from, to)]
 1002|     91|            }
 1003|     91|        }
 1004|     91|
 1005|     91|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|     91|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|     91|            if from == to {
 1008|     91|                Vec::new() // identity case
 1009|     91|            } else {
 1010|     91|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|     91|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|     91|            }
 1013|     91|        }
 1014|     91|
 1015|     91|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|     91|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|     91|            if from == to {
 1018|     91|                Vec::new() // identity case
 1019|     91|            } else {
 1020|     91|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|     91|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|     91|            }
 1023|     91|        }
 1024|     91|
 1025|     91|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|     91|            vec![GraphUpdateOperation::InsertData { data }]
 1027|     91|        }
 1028|     91|
 1029|     91|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|     91|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|     91|        }
 1032|     91|
 1033|     91|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|     91|            let pattern = d.iter().map(|q| {
 1035|     91|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|     91|                match &q.graph_name {
 1037|     91|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|     91|                    GraphNamePattern::DefaultGraph => bgp,
 1039|     91|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|     91|                }
 1041|     91|            }).reduce(new_join).unwrap_or_default();
 1042|     91|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|     91|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|     91|                delete,
 1045|     91|                insert: Vec::new(),
 1046|     91|                using: None,
 1047|     91|                pattern: Box::new(pattern)
 1048|     91|            }])
 1049|     91|        }
 1050|     91|
 1051|     91|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|     91|            let (delete, insert) = c;
 1053|     91|            let mut delete = delete.unwrap_or_default();
 1054|     91|            let mut insert = insert.unwrap_or_default();
 1055|     91|            #[allow(clippy::shadow_same)]
 1056|     91|            let mut pattern = pattern;
 1057|     91|
 1058|     91|            let mut using = if u.is_empty() {
 1059|     91|                None
 1060|     91|            } else {
 1061|     91|                let mut default = Vec::new();
 1062|     91|                let mut named = Vec::new();
 1063|     91|                for (d, n) in u {
 1064|     91|                    if let Some(d) = d {
 1065|     91|                        default.push(d)
 1066|     91|                    }
 1067|     91|                    if let Some(n) = n {
 1068|     91|                        named.push(n)
 1069|     91|                    }
 1070|     91|                }
 1071|     91|                Some(QueryDataset { default, named: Some(named) })
 1072|     91|            };
 1073|     91|
 1074|     91|            if let Some(with) = with {
 1075|     91|                // We inject WITH everywhere
 1076|     91|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|     91|                    GroundQuadPattern {
 1078|     91|                        subject: q.subject,
 1079|     91|                        predicate: q.predicate,
 1080|     91|                        object: q.object,
 1081|     91|                        graph_name: with.clone().into()
 1082|     91|                    }
 1083|     91|                } else {
 1084|     91|                    q
 1085|     91|                }).collect();
 1086|     91|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|     91|                    QuadPattern {
 1088|     91|                        subject: q.subject,
 1089|     91|                        predicate: q.predicate,
 1090|     91|                        object: q.object,
 1091|     91|                        graph_name: with.clone().into()
 1092|     91|                    }
 1093|     91|                } else {
 1094|     91|                    q
 1095|     91|                }).collect();
 1096|     91|                if using.is_none() {
 1097|     91|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|     91|                }
 1099|     91|            }
 1100|     91|
 1101|     91|            vec![GraphUpdateOperation::DeleteInsert {
 1102|     91|                delete,
 1103|     91|                insert,
 1104|     91|                using,
 1105|     91|                pattern: Box::new(pattern)
 1106|     91|            }]
 1107|     91|        }
 1108|     91|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|     91|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|     91|            (Some(d), i)
 1111|     91|        } / i:InsertClause() {
 1112|     91|            (None, Some(i))
 1113|     91|        }
 1114|     91|        rule Modify_clear() = {
 1115|     91|            state.used_bnodes.clear();
 1116|     91|            state.currently_used_bnodes.clear();
 1117|     91|        }
 1118|     91|
 1119|     91|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|     91|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|     91|        }
 1122|     91|
 1123|     91|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|     91|
 1125|     91|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|     91|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|     91|            (Some(i), None)
 1128|     91|        }
 1129|     91|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|     91|            (None, Some(i))
 1131|     91|        }
 1132|     91|
 1133|     91|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|     91|            GraphName::DefaultGraph
 1135|     91|        } / (i("GRAPH") _)? g:iri() {
 1136|     91|            GraphName::NamedNode(g)
 1137|     91|        }
 1138|     91|
 1139|     91|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|     91|
 1141|     91|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|     91|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|     91|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|     91|            / i("ALL") { GraphTarget::AllGraphs }
 1145|     91|
 1146|     91|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|     91|
 1148|     91|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|     91|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|     91|        }
 1151|     91|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|     91|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|     91|        }
 1154|     91|
 1155|     91|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|     91|            q.into_iter().flatten().collect()
 1157|     91|        }
 1158|     91|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|     91|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|     91|        } //TODO: return iter?
 1161|     91|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|     91|
 1163|     91|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|     91|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|     91|        }
 1166|     91|
 1167|     91|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|     91|            ts.into_iter().flatten().collect()
 1169|     91|        }
 1170|     91|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|     91|
 1172|     91|        rule GroupGraphPattern() -> GraphPattern =
 1173|     91|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|     91|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|     91|        rule GroupGraphPattern_clear() = {
 1176|     91|             // We deal with blank nodes aliases rule
 1177|     91|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|     91|            state.currently_used_bnodes.clear();
 1179|     91|        }
 1180|     91|
 1181|     91|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|     91|            let mut filter: Option<Expression> = None;
 1183|     91|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|     91|            for e in b.into_iter().flatten() {
 1185|     91|                match e {
 1186|     91|                    PartialGraphPattern::Optional(p, f) => {
 1187|     91|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|     91|                    }
 1189|     91|                    #[cfg(feature = "sep-0006")]
 1190|     91|                    PartialGraphPattern::Lateral(p) => {
 1191|     91|                        let mut defined_variables = HashSet::default();
 1192|     91|                        add_defined_variables(&p, &mut defined_variables);
 1193|     91|                        let mut contains = false;
 1194|     91|                        g.on_in_scope_variable(|v| {
 1195|     91|                            if defined_variables.contains(v) {
 1196|     91|                                contains = true;
 1197|     91|                            }
 1198|     91|                        });
 1199|     91|                        if contains {
 1200|     91|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|     91|                        }
 1202|     91|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|     91|                    }
 1204|     91|                    PartialGraphPattern::Minus(p) => {
 1205|     91|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|     91|                    }
 1207|     91|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|     91|                        let mut contains = false;
 1209|     91|                        g.on_in_scope_variable(|v| {
 1210|     91|                            if *v == variable {
 1211|     91|                                contains = true;
 1212|     91|                            }
 1213|     91|                        });
 1214|     91|                        if contains {
 1215|     91|                            return Err("BIND is overriding an existing variable")
 1216|     91|                        }
 1217|     91|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|     91|                    }
 1219|     91|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|     91|                        Expression::And(Box::new(f), Box::new(expr))
 1221|     91|                    } else {
 1222|     91|                        expr
 1223|     91|                    }),
 1224|     91|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|     91|                }
 1226|     91|            }
 1227|     91|
 1228|     91|            Ok(if let Some(expr) = filter {
 1229|     91|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|     91|            } else {
 1231|     91|                g
 1232|     91|            })
 1233|     91|        }
 1234|     91|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|     91|            let mut result = vec![a];
 1236|     91|            if let Some(v) = b {
 1237|     91|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|     91|            }
 1239|     91|            result
 1240|     91|        }
 1241|     91|
 1242|     91|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|     91|            hs.into_iter().flatten().collect()
 1244|     91|        }
 1245|     91|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|     91|
 1247|     91|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|     91|
 1249|     91|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|     91|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|     91|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|     91|            } else {
 1253|     91|               PartialGraphPattern::Optional(p, None)
 1254|     91|            }
 1255|     91|        }
 1256|     91|
 1257|     91|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|     91|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|     91|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|     91|        }
 1261|     91|
 1262|     91|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|     91|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|     91|        }
 1265|     91|
 1266|     91|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|     91|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|     91|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|     91|
 1270|     91|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|     91|            PartialGraphPattern::Bind(e, v)
 1272|     91|        }
 1273|     91|
 1274|     91|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|     91|
 1276|     91|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|     91|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|     91|        }
 1279|     91|
 1280|     91|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|     91|            (vec![var], d)
 1282|     91|        }
 1283|     91|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|     91|
 1285|     91|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|     91|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|     91|                Ok((vars, vals))
 1288|     91|            } else {
 1289|     91|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|     91|            }
 1291|     91|        }
 1292|     91|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|     91|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|     91|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|     91|
 1296|     91|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|     91|            t:QuotedTripleData() {?
 1298|     91|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|     91|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|     91|            } /
 1301|     91|            i:iri() { Some(i.into()) } /
 1302|     91|            l:RDFLiteral() { Some(l.into()) } /
 1303|     91|            l:NumericLiteral() { Some(l.into()) } /
 1304|     91|            l:BooleanLiteral() { Some(l.into()) } /
 1305|     91|            i("UNDEF") { None }
 1306|     91|
 1307|     91|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|     91|            PartialGraphPattern::Minus(p)
 1309|     91|        }
 1310|     91|
 1311|     91|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|     91|            not_empty_fold(p.into_iter(), |a, b| {
 1313|       |                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|     91|            }).map(PartialGraphPattern::Other)
 1315|     91|        }
 1316|     91|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|     91|
 1318|     91|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|     91|            PartialGraphPattern::Filter(c)
 1320|     91|        }
 1321|     91|
 1322|     91|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|     91|
 1324|     91|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|     91|            Expression::FunctionCall(Function::Custom(f), a)
 1326|     91|        }
 1327|     91|
 1328|     91|        rule ArgList() -> Vec<Expression> =
 1329|     91|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|     91|            NIL() { Vec::new() }
 1331|     91|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|     91|
 1333|     91|        rule ExpressionList() -> Vec<Expression> =
 1334|     91|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|     91|            NIL() { Vec::new() }
 1336|     91|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|     91|
 1338|     91|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|     91|
 1340|     91|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|     91|            p.into_iter().flatten().collect()
 1342|     91|        }
 1343|     91|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|     91|
 1345|     91|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|     91|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|     91|                let mut patterns = po.patterns;
 1348|     91|                for (p, os) in po.focus {
 1349|     91|                    for o in os {
 1350|     91|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|     91|                    }
 1352|     91|                }
 1353|     91|                Ok(patterns)
 1354|     91|            } /
 1355|     91|            s:TriplesNode() _ po:PropertyList() {?
 1356|     91|                let mut patterns = s.patterns;
 1357|     91|                patterns.extend(po.patterns);
 1358|     91|                for (p, os) in po.focus {
 1359|     91|                    for o in os {
 1360|     91|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|     91|                    }
 1362|     91|                }
 1363|     91|                Ok(patterns)
 1364|     91|            }
 1365|     91|
 1366|     91|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|     91|            PropertyListNotEmpty() /
 1368|     91|            { FocusedTriplePattern::default() }
 1369|     91|
 1370|     91|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|     91|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|     91|                a.focus.push(b.focus);
 1373|     91|                a.patterns.extend(b.patterns);
 1374|     91|                a
 1375|     91|            })
 1376|     91|        }
 1377|     91|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|     91|            FocusedTriplePattern {
 1379|     91|                focus: (p, o.focus),
 1380|     91|                patterns: o.patterns
 1381|     91|            }
 1382|     91|        }
 1383|     91|
 1384|     91|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|     91|
 1386|     91|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|     91|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|     91|                a.focus.push(b.focus);
 1389|     91|                a.patterns.extend_from_slice(&b.patterns);
 1390|     91|                a
 1391|     91|            })
 1392|     91|        }
 1393|     91|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|     91|
 1395|     91|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|     91|            if let Some(a) = a {
 1397|     91|                let mut patterns = g.patterns;
 1398|     91|                patterns.extend(a.patterns);
 1399|     91|                FocusedTriplePattern {
 1400|     91|                    focus: AnnotatedTerm {
 1401|     91|                        term: g.focus,
 1402|     91|                        annotations: a.focus
 1403|     91|                    },
 1404|     91|                    patterns
 1405|     91|                }
 1406|     91|            } else {
 1407|     91|                FocusedTriplePattern {
 1408|     91|                    focus: AnnotatedTerm {
 1409|     91|                        term: g.focus,
 1410|     91|                        annotations: Vec::new()
 1411|     91|                    },
 1412|     91|                    patterns: g.patterns
 1413|     91|                }
 1414|     91|            }
 1415|     91|        }
 1416|     91|
 1417|     91|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|     91|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|     91|                let mut patterns = po.patterns;
 1420|     91|                for (p, os) in po.focus {
 1421|     91|                    for o in os {
 1422|     91|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|     91|                    }
 1424|     91|                }
 1425|     91|                Ok(patterns)
 1426|     91|            } /
 1427|     91|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|     91|                let mut patterns = s.patterns;
 1429|     91|                patterns.extend(po.patterns);
 1430|     91|                for (p, os) in po.focus {
 1431|     91|                    for o in os {
 1432|     91|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|     91|                    }
 1434|     91|                }
 1435|     91|                Ok(patterns)
 1436|     91|            }
 1437|     91|
 1438|     91|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|     91|            PropertyListPathNotEmpty() /
 1440|     91|            { FocusedTripleOrPathPattern::default() }
 1441|     91|
 1442|     91|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|     91|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|     91|                    focus: vec![(hp, ho.focus)],
 1445|     91|                    patterns: ho.patterns
 1446|     91|                }, |mut a, b| {
 1447|     91|                    a.focus.push(b.focus);
 1448|     91|                    a.patterns.extend(b.patterns);
 1449|     91|                    a
 1450|     91|                })
 1451|     91|        }
 1452|     91|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|     91|            c
 1454|     91|        }
 1455|     91|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|     91|            FocusedTripleOrPathPattern {
 1457|     91|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|     91|                patterns: o.patterns
 1459|     91|            }
 1460|     91|        }
 1461|     91|
 1462|     91|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|     91|            p.into()
 1464|     91|        }
 1465|     91|
 1466|     91|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|     91|            v.into()
 1468|     91|        }
 1469|     91|
 1470|     91|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|     91|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|     91|                a.focus.push(b.focus);
 1473|     91|                a.patterns.extend(b.patterns);
 1474|     91|                a
 1475|     91|            })
 1476|     91|        }
 1477|     91|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|     91|
 1479|     91|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|     91|             if let Some(a) = a {
 1481|     91|                let mut patterns = g.patterns;
 1482|     91|                patterns.extend(a.patterns);
 1483|     91|                FocusedTripleOrPathPattern {
 1484|     91|                    focus: AnnotatedTermPath {
 1485|     91|                        term: g.focus,
 1486|     91|                        annotations: a.focus
 1487|     91|                    },
 1488|     91|                    patterns
 1489|     91|                }
 1490|     91|            } else {
 1491|     91|                FocusedTripleOrPathPattern {
 1492|     91|                    focus: AnnotatedTermPath {
 1493|     91|                        term: g.focus,
 1494|     91|                        annotations: Vec::new()
 1495|     91|                    },
 1496|     91|                    patterns: g.patterns
 1497|     91|                }
 1498|     91|            }
 1499|     91|        }
 1500|     91|
 1501|     91|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|     91|
 1503|     91|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|     91|            not_empty_fold(p.into_iter(), |a, b| {
 1505|     91|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|     91|            })
 1507|     91|        }
 1508|     91|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|     91|
 1510|     91|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|     91|            not_empty_fold(p.into_iter(), |a, b| {
 1512|     91|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|     91|            })
 1514|     91|        }
 1515|     91|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|     91|
 1517|     91|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|     91|            match o {
 1519|     91|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|     91|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|     91|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|     91|                Some(_) => unreachable!(),
 1523|     91|                None => p
 1524|     91|            }
 1525|     91|        }
 1526|     91|        rule PathElt_op() -> char =
 1527|     91|            "*" { '*' } /
 1528|     91|            "+" { '+' } /
 1529|     91|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|     91|
 1531|     91|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|     91|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|     91|            PathElt()
 1534|     91|
 1535|     91|        rule PathPrimary() -> PropertyPathExpression =
 1536|     91|            v:iri() { v.into() } /
 1537|     91|            "a" { rdf::TYPE.into_owned().into() } /
 1538|     91|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|     91|            "(" _ p:Path() _ ")" { p }
 1540|     91|
 1541|     91|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|     91|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|     91|                let mut direct = Vec::new();
 1544|     91|                let mut inverse = Vec::new();
 1545|     91|                for e in p {
 1546|     91|                    match e {
 1547|     91|                        Either::Left(a) => direct.push(a),
 1548|     91|                        Either::Right(b) => inverse.push(b)
 1549|     91|                    }
 1550|     91|                }
 1551|     91|                if inverse.is_empty() {
 1552|     91|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|     91|                } else if direct.is_empty() {
 1554|     91|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|     91|                } else {
 1556|     91|                    PropertyPathExpression::Alternative(
 1557|     91|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|     91|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|     91|                    )
 1560|     91|                }
 1561|     91|            } /
 1562|     91|            p:PathOneInPropertySet() {
 1563|     91|                match p {
 1564|     91|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|     91|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|     91|                }
 1567|     91|            }
 1568|     91|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|     91|
 1570|     91|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|     91|            "^" _ v:iri() { Either::Right(v) } /
 1572|     91|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|     91|            v:iri() { Either::Left(v) } /
 1574|     91|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|     91|
 1576|     91|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|     91|
 1578|     91|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|     91|            let mut patterns = po.patterns;
 1580|     91|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|     91|            for (p, os) in po.focus {
 1582|     91|                for o in os {
 1583|     91|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|     91|                }
 1585|     91|            }
 1586|     91|            Ok(FocusedTriplePattern {
 1587|     91|                focus: bnode,
 1588|     91|                patterns
 1589|     91|            })
 1590|     91|        }
 1591|     91|
 1592|     91|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|     91|
 1594|     91|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|     91|            let mut patterns = po.patterns;
 1596|     91|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|     91|            for (p, os) in po.focus {
 1598|     91|                for o in os {
 1599|     91|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|     91|                }
 1601|     91|            }
 1602|     91|            Ok(FocusedTripleOrPathPattern {
 1603|     91|                focus: bnode,
 1604|     91|                patterns
 1605|     91|            })
 1606|     91|        }
 1607|     91|
 1608|     91|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|     91|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|     91|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|     91|            for objWithPatterns in o.into_iter().rev() {
 1612|     91|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|     91|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|     91|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|     91|                current_list_node = new_blank_node;
 1616|     91|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|     91|            }
 1618|     91|            FocusedTriplePattern {
 1619|     91|                focus: current_list_node,
 1620|     91|                patterns
 1621|     91|            }
 1622|     91|        }
 1623|     91|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|     91|
 1625|     91|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|     91|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|     91|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|     91|            for objWithPatterns in o.into_iter().rev() {
 1629|     91|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|     91|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|     91|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|     91|                current_list_node = new_blank_node;
 1633|     91|                patterns.extend(objWithPatterns.patterns);
 1634|     91|            }
 1635|     91|            FocusedTripleOrPathPattern {
 1636|     91|                focus: current_list_node,
 1637|     91|                patterns
 1638|     91|            }
 1639|     91|        }
 1640|     91|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|     91|
 1642|     91|
 1643|     91|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|     91|
 1645|     91|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|     91|
 1647|     91|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|     91|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|     91|            TriplesNode()
 1650|     91|
 1651|     91|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|     91|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|     91|            TriplesNodePath()
 1654|     91|
 1655|     91|        rule VarOrTerm() -> TermPattern =
 1656|     91|            v:Var() { v.into() } /
 1657|     91|            t:QuotedTriple() {?
 1658|     91|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|     91|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|     91|            } /
 1661|     91|            t:GraphTerm() { t.into() }
 1662|     91|
 1663|     91|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|     91|            Ok(TriplePattern {
 1665|     91|                subject: s,
 1666|     91|                predicate: p,
 1667|     91|                object: o
 1668|     91|            })
 1669|     91|        }
 1670|     91|
 1671|     91|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|     91|            Ok(GroundTriple {
 1673|     91|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|     91|                predicate: p,
 1675|     91|                object: o
 1676|     91|            })
 1677|     91|        }
 1678|     91|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|     91|
 1680|     91|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|     91|            l:RDFLiteral() { l.into() } /
 1682|     91|            l:NumericLiteral() { l.into() } /
 1683|     91|            l:BooleanLiteral() { l.into() } /
 1684|     91|            t:QuotedTripleData() {?
 1685|     91|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|     91|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|     91|            }
 1688|     91|
 1689|     91|        rule VarOrIri() -> NamedNodePattern =
 1690|     91|            v:Var() { v.into() } /
 1691|     91|            i:iri() { i.into() }
 1692|     91|
 1693|     91|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|     91|
 1695|     91|        rule GraphTerm() -> Term =
 1696|     91|            i:iri() { i.into() } /
 1697|     91|            l:RDFLiteral() { l.into() } /
 1698|     91|            l:NumericLiteral() { l.into() } /
 1699|     91|            l:BooleanLiteral() { l.into() } /
 1700|     91|            b:BlankNode() { b.into() } /
 1701|     91|            NIL() { rdf::NIL.into_owned().into() }
 1702|     91|
 1703|     91|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|     91|
 1705|     91|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|     91|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|     91|        }
 1708|     91|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|     91|
 1710|     91|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|     91|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|     91|        }
 1713|     91|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|     91|
 1715|     91|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|     91|
 1717|     91|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|     91|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|     91|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|     91|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|     91|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|     91|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|     91|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|     91|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|     91|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|     91|            Some(_) => unreachable!(),
 1727|     91|            None => a
 1728|     91|        } }
 1729|     91|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|     91|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|     91|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|     91|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|     91|
 1734|     91|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|     91|
 1736|     91|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|     91|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|     91|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|     91|            Some(_) => unreachable!(),
 1740|     91|            None => a,
 1741|     91|        } }
 1742|     91|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|     91|            (s, e)
 1744|     91|        }
 1745|     91|
 1746|     91|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|     91|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|     91|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|     91|            Some(_) => unreachable!(),
 1750|     91|            None => a
 1751|     91|        } }
 1752|     91|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|     91|            (s, e)
 1754|     91|        }
 1755|     91|
 1756|     91|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|     91|            Some("!") => Expression::Not(Box::new(e)),
 1758|     91|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|     91|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|     91|            Some(_) => unreachable!(),
 1761|     91|            None => e,
 1762|     91|        } }
 1763|     91|
 1764|     91|        rule PrimaryExpression() -> Expression =
 1765|     91|            BrackettedExpression()  /
 1766|     91|            ExprQuotedTriple() /
 1767|     91|            iriOrFunction() /
 1768|     91|            v:Var() { v.into() } /
 1769|     91|            l:RDFLiteral() { l.into() } /
 1770|     91|            l:NumericLiteral() { l.into() } /
 1771|     91|            l:BooleanLiteral() { l.into() } /
 1772|     91|            BuiltInCall()
 1773|     91|
 1774|     91|        rule ExprVarOrTerm() -> Expression =
 1775|     91|            ExprQuotedTriple() /
 1776|     91|            i:iri() { i.into() } /
 1777|     91|            l:RDFLiteral() { l.into() } /
 1778|     91|            l:NumericLiteral() { l.into() } /
 1779|     91|            l:BooleanLiteral() { l.into() } /
 1780|     91|            v:Var() { v.into() }
 1781|     91|
 1782|     91|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|     91|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|     91|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|     91|        }
 1786|     91|
 1787|     91|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|     91|
 1789|     91|        rule BuiltInCall() -> Expression =
 1790|     91|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|     91|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|     91|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|     91|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|     91|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|     91|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|     91|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|     91|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|     91|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|     91|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|     91|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|     91|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|     91|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|     91|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|     91|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|     91|            SubstringExpression() /
 1806|     91|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|     91|            StrReplaceExpression() /
 1808|     91|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|     91|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|     91|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|     91|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|     91|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|     91|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|     91|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|     91|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|     91|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|     91|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|     91|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|     91|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|     91|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|     91|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|     91|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|     91|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|     91|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|     91|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|     91|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|     91|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|     91|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|     91|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|     91|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|     91|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|     91|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|     91|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|     91|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|     91|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|     91|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|     91|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|     91|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|     91|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|     91|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|     91|            RegexExpression() /
 1842|     91|            ExistsFunc() /
 1843|     91|            NotExistsFunc() /
 1844|     91|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|     91|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|     91|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|     91|            } /
 1848|     91|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|     91|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|     91|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|     91|            } /
 1852|     91|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|     91|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|     91|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|     91|            } /
 1856|     91|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|     91|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|     91|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|     91|            } /
 1860|     91|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|     91|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|     91|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|     91|            } /
 1864|     91|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|     91|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|     91|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|     91|            }
 1868|     91|
 1869|     91|        rule RegexExpression() -> Expression =
 1870|     91|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|     91|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|     91|
 1873|     91|
 1874|     91|        rule SubstringExpression() -> Expression =
 1875|     91|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|     91|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|     91|
 1878|     91|
 1879|     91|        rule StrReplaceExpression() -> Expression =
 1880|     91|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|     91|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|     91|
 1883|     91|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|     91|
 1885|     91|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|     91|
 1887|     91|        rule Aggregate() -> AggregateExpression =
 1888|     91|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|     91|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|     91|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|     91|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|     91|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|     91|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|     91|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|     91|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|     91|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|     91|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|     91|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|     91|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|     91|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|     91|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|     91|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|     91|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|     91|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|     91|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|     91|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|     91|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|     91|
 1909|     91|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|     91|            match a {
 1911|     91|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|     91|                None => i.into()
 1913|     91|            }
 1914|     91|        }
 1915|     91|
 1916|     91|        rule RDFLiteral() -> Literal =
 1917|     91|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|     91|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|     91|            value:String() { Literal::new_simple_literal(value) }
 1920|     91|
 1921|     91|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|     91|
 1923|     91|        rule NumericLiteralUnsigned() -> Literal =
 1924|     91|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|     91|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|     91|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|     91|
 1928|     91|        rule NumericLiteralPositive() -> Literal =
 1929|     91|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|     91|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|     91|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|     91|
 1933|     91|
 1934|     91|        rule NumericLiteralNegative() -> Literal =
 1935|     91|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|     91|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|     91|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|     91|
 1939|     91|        rule BooleanLiteral() -> Literal =
 1940|     91|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|     91|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|     91|
 1943|     91|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|     91|
 1945|     91|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|     91|            NamedNode::from(i)
 1947|     91|        }
 1948|     91|
 1949|     91|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|     91|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|     91|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|     91|            } else {
 1953|     91|                Err("Prefix not found")
 1954|     91|            } }
 1955|     91|
 1956|     91|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|     91|            let node = BlankNode::new_unchecked(id);
 1958|     91|            if state.used_bnodes.contains(&node) {
 1959|     91|                Err("Already used blank node id")
 1960|     91|            } else {
 1961|     91|                state.currently_used_bnodes.insert(node.clone());
 1962|     91|                Ok(node)
 1963|     91|            }
 1964|     91|        } / ANON() { BlankNode::default() }
 1965|     91|
 1966|     91|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|     91|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|     91|        }
 1969|     91|
 1970|     91|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|     91|            ns
 1972|     91|        }
 1973|     91|
 1974|     91|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|     91|            if let Some(base) = state.namespaces.get(ns) {
 1976|     91|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|     91|                iri.push_str(base);
 1978|     91|                for chunk in local.split('\\') { // We remove \
 1979|     91|                    iri.push_str(chunk);
 1980|     91|                }
 1981|     91|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|     91|            } else {
 1983|     91|                Err("Prefix not found")
 1984|     91|            }
 1985|     91|        }
 1986|     91|
 1987|     91|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|     91|            b
 1989|     91|        }
 1990|     91|
 1991|     91|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|     91|
 1993|     91|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|     91|
 1995|     91|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|     91|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|     91|        }
 1998|     91|
 1999|     91|        rule INTEGER() = ['0'..='9']+
 2000|     91|
 2001|     91|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|     91|
 2003|     91|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|     91|
 2005|     91|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|     91|
 2007|     91|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|     91|
 2009|     91|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|     91|
 2011|     91|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|     91|
 2013|     91|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|     91|
 2015|     91|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|     91|
 2017|     91|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|     91|
 2019|     91|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|     91|             unescape_string(l)
 2021|     91|        }
 2022|     91|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|     91|
 2024|     91|
 2025|     91|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|     91|             unescape_string(l)
 2027|     91|        }
 2028|     91|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|     91|
 2030|     91|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|     91|             unescape_string(l)
 2032|     91|        }
 2033|     91|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|     91|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|     91|
 2036|     91|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|     91|             unescape_string(l)
 2038|     91|        }
 2039|     91|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|     91|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|     91|
 2042|     91|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|     91|
 2044|     91|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|     91|
 2046|     91|        rule NIL() = "(" WS()* ")"
 2047|     91|
 2048|     91|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|     91|
 2050|     91|        rule ANON() = "[" WS()* "]"
 2051|     91|
 2052|     91|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|     91|
 2054|     91|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|     91|
 2056|     91|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|     91|
 2058|     91|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|     91|
 2060|     91|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|     91|
 2062|     91|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|     91|
 2064|     91|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|     91|
 2066|     91|        rule PERCENT() = ['%'] HEX() HEX()
 2067|     91|
 2068|     91|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|     91|
 2070|     91|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|     91|
 2072|     91|        //space
 2073|     91|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|     91|
 2075|     91|        //comment
 2076|     91|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|     91|
 2078|     91|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|     91|            if input.eq_ignore_ascii_case(literal) {
 2080|     91|                Ok(())
 2081|     91|            } else {
 2082|     91|                Err(literal)
 2083|     91|            }
 2084|     91|        }
 2085|     91|    }
 2086|     91|}
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_VarOrTerm0B7_:
 1656|  16.4k|            v:Var() { v.into() } /
_RNCNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser32___parse_GroupOrUnionGraphPattern00B9_:
 1312|     10|            not_empty_fold(p.into_iter(), |a, b| {
 1313|     10|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|     10|            }).map(PartialGraphPattern::Other)
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser31___parse_GroupGraphPattern_clear0B7_:
 1175|  10.8k|        rule GroupGraphPattern_clear() = {
 1176|  10.8k|             // We deal with blank nodes aliases rule
 1177|  10.8k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  10.8k|            state.currently_used_bnodes.clear();
 1179|  10.8k|        }
_RNCNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_BuiltInCallsC_0B7_:
 1832|     78|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
_RNvXs0_NtCskGc5T8eVihK_9spargebra6parserNtB5_22VariableOrPropertyPathINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableE4from:
   83|  7.25k|    fn from(var: Variable) -> Self {
   84|  7.25k|        Self::Variable(var)
   85|  7.25k|    }
_RNvNtCskGc5T8eVihK_9spargebra6parser12parse_update:
   24|  2.28k|pub fn parse_update(update: &str, base_iri: Option<&str>) -> Result<Update, SparqlSyntaxError> {
   25|  2.28k|    let mut state = ParserState::from_base_iri(base_iri)?;
   26|  2.28k|    let operations = parser::UpdateInit(update, &mut state)
   27|  2.28k|        .map_err(|e| SparqlSyntaxError(ParseErrorKind::Syntax(e)))?;
   28|  2.12k|    Ok(Update {
   29|  2.12k|        operations,
   30|  2.12k|        base_iri: state.base_iri,
   31|  2.12k|    })
   32|  2.28k|}
_RNvXsk_NtCskGc5T8eVihK_9spargebra6parserNtB5_22VariableOrPropertyPathNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   76|  11.4k|#[derive(Clone, Debug)]
_RNvNtCskGc5T8eVihK_9spargebra6parser8variable:
  774|     35|fn variable() -> Variable {
  775|     35|    Variable::new_unchecked(format!("{:x}", random::<u128>()))
  776|     35|}
_RNvNtCskGc5T8eVihK_9spargebra6parser12build_select:
  388|  1.35k|fn build_select(
  389|  1.35k|    select: Selection,
  390|  1.35k|    r#where: GraphPattern,
  391|  1.35k|    mut group: Option<(Vec<Variable>, Vec<(Expression, Variable)>)>,
  392|  1.35k|    having: Option<Expression>,
  393|  1.35k|    order_by: Option<Vec<OrderExpression>>,
  394|  1.35k|    offset_limit: Option<(usize, Option<usize>)>,
  395|  1.35k|    values: Option<GraphPattern>,
  396|  1.35k|    state: &mut ParserState,
  397|  1.35k|) -> Result<GraphPattern, &'static str> {
  398|  1.35k|    let mut p = r#where;
  399|  1.35k|    let mut with_aggregate = false;
  400|  1.35k|
  401|  1.35k|    // GROUP BY
  402|  1.35k|    let aggregates = state.aggregates.pop().unwrap_or_default();
  403|  1.35k|    if group.is_none() && !aggregates.is_empty() {
  404|      0|        group = Some((vec![], vec![]));
  405|  1.35k|    }
  406|       |
  407|  1.35k|    if let Some((clauses, binds)) = group {
  408|     95|        for (expression, variable) in binds {
  409|     35|            p = GraphPattern::Extend {
  410|     35|                inner: Box::new(p),
  411|     35|                variable,
  412|     35|                expression,
  413|     35|            };
  414|     35|        }
  415|     60|        p = GraphPattern::Group {
  416|     60|            inner: Box::new(p),
  417|     60|            variables: clauses,
  418|     60|            aggregates,
  419|     60|        };
  420|     60|        with_aggregate = true;
  421|  1.29k|    }
  422|       |
  423|       |    // HAVING
  424|  1.35k|    if let Some(expr) = having {
  425|     14|        p = GraphPattern::Filter {
  426|     14|            expr,
  427|     14|            inner: Box::new(p),
  428|     14|        };
  429|  1.34k|    }
  430|       |
  431|       |    // VALUES
  432|  1.35k|    if let Some(data) = values {
  433|     53|        p = new_join(p, data);
  434|  1.30k|    }
  435|       |
  436|       |    // SELECT
  437|  1.35k|    let mut pv = Vec::new();
  438|  1.35k|    let with_project = match select.variables {
  439|    721|        SelectionVariables::Explicit(sel_items) => {
  440|    721|            let mut visible = HashSet::default();
  441|    721|            p.on_in_scope_variable(|v| {
  442|       |                visible.insert(v.clone());
  443|    721|            });
  444|  1.27k|            for sel_item in sel_items {
  445|    840|                let v = match sel_item {
  446|    298|                    SelectionMember::Variable(v) => {
  447|    298|                        if with_aggregate && !visible.contains(&v) {
  448|       |                            // We validate projection variables if there is an aggregate
  449|     12|                            return Err("The SELECT contains a variable that is unbound");
  450|    286|                        }
  451|    286|                        v
  452|       |                    }
  453|    542|                    SelectionMember::Expression(expression, variable) => {
  454|    542|                        if visible.contains(&variable) {
  455|       |                            // We disallow to override an existing variable with an expression
  456|    204|                            return Err(
  457|    204|                                "The SELECT overrides an existing variable using an expression",
  458|    204|                            );
  459|    338|                        }
  460|    338|                        if with_aggregate && !are_variables_bound(&expression, &visible) {
  461|       |                            // We validate projection variables if there is an aggregate
  462|      4|                            return Err(
  463|      4|                                "The SELECT contains an expression with a variable that is unbound",
  464|      4|                            );
  465|    334|                        }
  466|    334|                        p = GraphPattern::Extend {
  467|    334|                            inner: Box::new(p),
  468|    334|                            variable: variable.clone(),
  469|    334|                            expression,
  470|    334|                        };
  471|    334|                        variable
  472|       |                    }
  473|       |                };
  474|    620|                if pv.contains(&v) {
  475|     68|                    return Err("Duplicated variable name in SELECT");
  476|    552|                }
  477|    552|                pv.push(v)
  478|       |            }
  479|    433|            true
  480|       |        }
  481|       |        SelectionVariables::Star => {
  482|    636|            if with_aggregate {
  483|     36|                return Err("SELECT * is not authorized with GROUP BY");
  484|    600|            }
  485|    600|            // TODO: is it really useful to do a projection?
  486|    600|            p.on_in_scope_variable(|v| {
  487|       |                if !pv.contains(v) {
  488|       |                    pv.push(v.clone());
  489|       |                }
  490|    600|            });
  491|    600|            pv.sort();
  492|    600|            true
  493|       |        }
  494|      0|        SelectionVariables::Everything => false,
  495|       |    };
  496|       |
  497|  1.03k|    let mut m = p;
  498|       |
  499|       |    // ORDER BY
  500|  1.03k|    if let Some(expression) = order_by {
  501|      0|        m = GraphPattern::OrderBy {
  502|      0|            inner: Box::new(m),
  503|      0|            expression,
  504|      0|        };
  505|  1.03k|    }
  506|       |
  507|       |    // PROJECT
  508|  1.03k|    if with_project {
  509|  1.03k|        m = GraphPattern::Project {
  510|  1.03k|            inner: Box::new(m),
  511|  1.03k|            variables: pv,
  512|  1.03k|        };
  513|  1.03k|    }
  514|  1.03k|    match select.option {
  515|    218|        SelectionOption::Distinct => m = GraphPattern::Distinct { inner: Box::new(m) },
  516|    459|        SelectionOption::Reduced => m = GraphPattern::Reduced { inner: Box::new(m) },
  517|    356|        SelectionOption::Default => (),
  518|       |    }
  519|       |
  520|       |    // OFFSET LIMIT
  521|  1.03k|    if let Some((start, length)) = offset_limit {
  522|      0|        m = GraphPattern::Slice {
  523|      0|            inner: Box::new(m),
  524|      0|            start,
  525|      0|            length,
  526|      0|        }
  527|  1.03k|    }
  528|  1.03k|    Ok(m)
  529|  1.35k|}
_RNvNtCskGc5T8eVihK_9spargebra6parser9build_bgp:
  207|  1.31k|fn build_bgp(patterns: Vec<TripleOrPathPattern>) -> GraphPattern {
  208|  1.31k|    let mut bgp = Vec::new();
  209|  1.31k|    let mut elements = Vec::with_capacity(patterns.len());
  210|  21.6k|    for pattern in patterns {
  211|  20.3k|        match pattern {
  212|  14.7k|            TripleOrPathPattern::Triple(t) => bgp.push(t),
  213|       |            TripleOrPathPattern::Path {
  214|  5.56k|                subject,
  215|  5.56k|                path,
  216|  5.56k|                object,
  217|  5.56k|            } => {
  218|  5.56k|                if !bgp.is_empty() {
  219|  1.18k|                    elements.push(GraphPattern::Bgp {
  220|  1.18k|                        patterns: take(&mut bgp),
  221|  1.18k|                    });
  222|  4.37k|                }
  223|  5.56k|                elements.push(GraphPattern::Path {
  224|  5.56k|                    subject,
  225|  5.56k|                    path,
  226|  5.56k|                    object,
  227|  5.56k|                })
  228|       |            }
  229|       |        }
  230|       |    }
  231|  1.31k|    if !bgp.is_empty() {
  232|    906|        elements.push(GraphPattern::Bgp { patterns: bgp });
  233|    906|    }
  234|  1.31k|    elements.into_iter().reduce(new_join).unwrap_or_default()
  235|  1.31k|}
_RNvNtCskGc5T8eVihK_9spargebra6parser8new_join:
  316|  8.65k|fn new_join(l: GraphPattern, r: GraphPattern) -> GraphPattern {
  317|       |    // Avoid to output empty BGPs
  318|  8.65k|    if let GraphPattern::Bgp { patterns: pl } = &l {
  319|    742|        if pl.is_empty() {
  320|    248|            return r;
  321|    494|        }
  322|  7.91k|    }
  323|  8.40k|    if let GraphPattern::Bgp { patterns: pr } = &r {
  324|  1.55k|        if pr.is_empty() {
  325|      2|            return l;
  326|  1.55k|        }
  327|  6.85k|    }
  328|       |
  329|  8.40k|    match (l, r) {
  330|      7|        (GraphPattern::Bgp { patterns: mut pl }, GraphPattern::Bgp { patterns: pr }) => {
  331|      7|            pl.extend(pr);
  332|      7|            GraphPattern::Bgp { patterns: pl }
  333|       |        }
  334|      0|        (GraphPattern::Bgp { patterns }, other) | (other, GraphPattern::Bgp { patterns })
  335|  2.03k|            if patterns.is_empty() =>
  336|       |        {
  337|      0|            other
  338|       |        }
  339|  8.39k|        (l, r) => GraphPattern::Join {
  340|  8.39k|            left: Box::new(l),
  341|  8.39k|            right: Box::new(r),
  342|  8.39k|        },
  343|       |    }
  344|  8.65k|}
_RNvNtCskGc5T8eVihK_9spargebra6parser21add_defined_variables:
  572|  2.30k|fn add_defined_variables<'a>(pattern: &'a GraphPattern, set: &mut HashSet<&'a Variable>) {
  573|  2.30k|    match pattern {
  574|  1.21k|        GraphPattern::Bgp { .. } | GraphPattern::Path { .. } => {}
  575|    950|        GraphPattern::Join { left, right }
  576|      7|        | GraphPattern::LeftJoin { left, right, .. }
  577|     11|        | GraphPattern::Lateral { left, right }
  578|      4|        | GraphPattern::Union { left, right }
  579|    972|        | GraphPattern::Minus { left, right } => {
  580|    972|            add_defined_variables(left, set);
  581|    972|            add_defined_variables(right, set);
  582|    972|        }
  583|      1|        GraphPattern::Graph { inner, .. } => {
  584|      1|            add_defined_variables(inner, set);
  585|      1|        }
  586|       |        GraphPattern::Extend {
  587|     12|            inner, variable, ..
  588|     12|        } => {
  589|     12|            set.insert(variable);
  590|     12|            add_defined_variables(inner, set);
  591|     12|        }
  592|       |        GraphPattern::Group {
  593|      0|            variables,
  594|      0|            aggregates,
  595|      0|            inner,
  596|       |        } => {
  597|      0|            for (v, _) in aggregates {
  598|      0|                set.insert(v);
  599|      0|            }
  600|      0|            let mut inner_variables = HashSet::new();
  601|      0|            add_defined_variables(inner, &mut inner_variables);
  602|      0|            for v in inner_variables {
  603|      0|                if variables.contains(v) {
  604|      0|                    set.insert(v);
  605|      0|                }
  606|       |            }
  607|       |        }
  608|      4|        GraphPattern::Values { variables, .. } => {
  609|     36|            for v in variables {
  610|     32|                set.insert(v);
  611|     32|            }
  612|       |        }
  613|     54|        GraphPattern::Project { variables, inner } => {
  614|     54|            let mut inner_variables = HashSet::new();
  615|     54|            add_defined_variables(inner, &mut inner_variables);
  616|     68|            for v in inner_variables {
  617|     14|                if variables.contains(v) {
  618|     12|                    set.insert(v);
  619|     12|                }
  620|       |            }
  621|       |        }
  622|      0|        GraphPattern::Service { inner, .. }
  623|      0|        | GraphPattern::Filter { inner, .. }
  624|      0|        | GraphPattern::OrderBy { inner, .. }
  625|     20|        | GraphPattern::Distinct { inner }
  626|     27|        | GraphPattern::Reduced { inner }
  627|     47|        | GraphPattern::Slice { inner, .. } => add_defined_variables(inner, set),
  628|       |    }
  629|  2.30k|}
_RNvNtCskGc5T8eVihK_9spargebra6parser19are_variables_bound:
  531|    176|fn are_variables_bound(expression: &Expression, variables: &HashSet<Variable>) -> bool {
  532|    176|    match expression {
  533|       |        Expression::NamedNode(_)
  534|       |        | Expression::Literal(_)
  535|       |        | Expression::Bound(_)
  536|       |        | Expression::Coalesce(_)
  537|     40|        | Expression::Exists(_) => true,
  538|     20|        Expression::Variable(var) => variables.contains(var),
  539|     29|        Expression::UnaryPlus(e) | Expression::UnaryMinus(e) | Expression::Not(e) => {
  540|     48|            are_variables_bound(e, variables)
  541|       |        }
  542|      0|        Expression::Or(a, b)
  543|      6|        | Expression::And(a, b)
  544|      0|        | Expression::Equal(a, b)
  545|      0|        | Expression::SameTerm(a, b)
  546|      0|        | Expression::Greater(a, b)
  547|      6|        | Expression::GreaterOrEqual(a, b)
  548|      0|        | Expression::Less(a, b)
  549|      0|        | Expression::LessOrEqual(a, b)
  550|      2|        | Expression::Add(a, b)
  551|     18|        | Expression::Subtract(a, b)
  552|      3|        | Expression::Multiply(a, b)
  553|     25|        | Expression::Divide(a, b) => {
  554|     60|            are_variables_bound(a, variables) && are_variables_bound(b, variables)
  555|       |        }
  556|      6|        Expression::In(a, b) => {
  557|      6|            are_variables_bound(a, variables) && b.iter().all(|b| are_variables_bound(b, variables))
  558|       |        }
  559|      2|        Expression::FunctionCall(_, parameters) => {
  560|      2|            parameters.iter().all(|p| are_variables_bound(p, variables))
  561|       |        }
  562|      0|        Expression::If(a, b, c) => {
  563|      0|            are_variables_bound(a, variables)
  564|      0|                && are_variables_bound(b, variables)
  565|      0|                && are_variables_bound(c, variables)
  566|       |        }
  567|       |    }
  568|    176|}
_RNvMs9_NtCskGc5T8eVihK_9spargebra6parserNtB5_11ParserState13from_base_iri:
  672|  2.28k|    pub(crate) fn from_base_iri(base_iri: Option<&str>) -> Result<Self, SparqlSyntaxError> {
  673|       |        Ok(Self {
  674|  2.28k|            base_iri: if let Some(base_iri) = base_iri {
  675|       |                Some(
  676|      0|                    Iri::parse(base_iri.to_owned())
  677|      0|                        .map_err(|e| SparqlSyntaxError(ParseErrorKind::InvalidBaseIri(e)))?,
  678|       |                )
  679|       |            } else {
  680|  2.28k|                None
  681|       |            },
  682|  2.28k|            namespaces: HashMap::default(),
  683|  2.28k|            used_bnodes: HashSet::default(),
  684|  2.28k|            currently_used_bnodes: HashSet::default(),
  685|  2.28k|            aggregates: Vec::new(),
  686|       |        })
  687|  2.28k|    }
_RNvNtCskGc5T8eVihK_9spargebra6parser22add_to_triple_patterns:
  103|  14.0k|fn add_to_triple_patterns(
  104|  14.0k|    subject: TermPattern,
  105|  14.0k|    predicate: NamedNodePattern,
  106|  14.0k|    object: AnnotatedTerm,
  107|  14.0k|    patterns: &mut Vec<TriplePattern>,
  108|  14.0k|) -> Result<(), &'static str> {
  109|  14.0k|    let triple = TriplePattern::new(subject, predicate, object.term);
  110|       |    #[cfg(feature = "rdf-star")]
  111|  14.0k|    for (p, os) in object.annotations {
  112|      0|        for o in os {
  113|      0|            add_to_triple_patterns(triple.clone().into(), p.clone(), o, patterns)?
  114|       |        }
  115|       |    }
  116|       |    #[cfg(not(feature = "rdf-star"))]
  117|       |    if !object.annotations.is_empty() {
  118|       |        return Err("Embedded triples are only available in SPARQL-star");
  119|       |    }
  120|  14.0k|    patterns.push(triple);
  121|  14.0k|    Ok(())
  122|  14.0k|}
_RNvMs9_NtCskGc5T8eVihK_9spargebra6parserNtB5_11ParserState9parse_iri:
  689|  44.1k|    fn parse_iri(&self, iri: String) -> Result<Iri<String>, IriParseError> {
  690|  44.1k|        if let Some(base_iri) = &self.base_iri {
  691|      0|            base_iri.resolve(&iri)
  692|       |        } else {
  693|  44.1k|            Iri::parse(iri)
  694|       |        }
  695|  44.1k|    }
_RNvNtCskGc5T8eVihK_9spargebra6parser15unescape_iriref:
  711|  44.1k|fn unescape_iriref(mut input: &str) -> Result<String, &'static str> {
  712|  44.1k|    let mut output = String::with_capacity(input.len());
  713|  44.1k|    while let Some((before, after)) = input.split_once('\\') {
  714|      0|        output.push_str(before);
  715|      0|        let mut after = after.chars();
  716|      0|        let (escape, after) = match after.next() {
  717|      0|            Some('u') => read_hex_char::<4>(after.as_str())?,
  718|      0|            Some('U') => read_hex_char::<8>(after.as_str())?,
  719|       |            Some(_) => {
  720|      0|                return Err(
  721|      0|                    "IRIs are only allowed to contain escape sequences \\uXXXX and \\UXXXXXXXX",
  722|      0|                )
  723|       |            }
  724|      0|            None => return Err("IRIs are not allowed to end with a '\'"),
  725|       |        };
  726|      0|        output.push(escape);
  727|      0|        input = after;
  728|       |    }
  729|  44.1k|    output.push_str(input);
  730|  44.1k|    Ok(output)
  731|  44.1k|}
_RNvNtCskGc5T8eVihK_9spargebra6parser15unescape_string:
  733|  3.72k|fn unescape_string(mut input: &str) -> Result<String, &'static str> {
  734|  3.72k|    let mut output = String::with_capacity(input.len());
  735|  3.72k|    while let Some((before, after)) = input.split_once('\\') {
  736|      0|        output.push_str(before);
  737|      0|        let mut after = after.chars();
  738|      0|        let (escape, after) = match after.next() {
  739|      0|            Some('t') => ('\u{0009}', after.as_str()),
  740|      0|            Some('b') => ('\u{0008}', after.as_str()),
  741|      0|            Some('n') => ('\u{000A}', after.as_str()),
  742|      0|            Some('r') => ('\u{000D}', after.as_str()),
  743|      0|            Some('f') => ('\u{000C}', after.as_str()),
  744|      0|            Some('"') => ('\u{0022}', after.as_str()),
  745|      0|            Some('\'') => ('\u{0027}', after.as_str()),
  746|      0|            Some('\\') => ('\u{005C}', after.as_str()),
  747|      0|            Some('u') => read_hex_char::<4>(after.as_str())?,
  748|      0|            Some('U') => read_hex_char::<8>(after.as_str())?,
  749|      0|            Some(_) => return Err("The character that can be escaped in strings are tbnrf\"'\\"),
  750|      0|            None => return Err("strings are not allowed to end with a '\'"),
  751|       |        };
  752|      0|        output.push(escape);
  753|      0|        input = after;
  754|       |    }
  755|  3.72k|    output.push_str(input);
  756|  3.72k|    Ok(output)
  757|  3.72k|}
_RNvXs2_NtCskGc5T8eVihK_9spargebra6parserNtB5_22VariableOrPropertyPathINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_7algebra22PropertyPathExpressionE4from:
   98|  19.6k|    fn from(path: PropertyPathExpression) -> Self {
   99|  19.6k|        Self::PropertyPath(path)
  100|  19.6k|    }
_RNvXs3_NtCskGc5T8eVihK_9spargebra6parserNtB5_19TripleOrPathPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtB7_4term13TriplePatternE4from:
  248|  14.7k|    fn from(tp: TriplePattern) -> Self {
  249|  14.7k|        Self::Triple(tp)
  250|  14.7k|    }
_RINvNtCskGc5T8eVihK_9spargebra6parser14not_empty_foldNtNtB4_7algebra10ExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBP_ENCNCNvNtB2_6parser31___parse_ConditionalOrExpression00EB4_:
  346|  1.53k|fn not_empty_fold<T>(
  347|  1.53k|    iter: impl Iterator<Item = T>,
  348|  1.53k|    combine: impl Fn(T, T) -> T,
  349|  1.53k|) -> Result<T, &'static str> {
  350|  1.53k|    iter.fold(None, |a, b| match a {
  351|       |        Some(av) => Some(combine(av, b)),
  352|       |        None => Some(b),
  353|  1.53k|    })
  354|  1.53k|    .ok_or("The iterator should not be empty")
  355|  1.53k|}
_RNvXsp_NtCskGc5T8eVihK_9spargebra6parserINtB5_26FocusedTripleOrPathPatternINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtB5_17AnnotatedTermPathEENtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
  272|  8.89k|#[derive(Debug, Default)]
_RNCNvNtCskGc5T8eVihK_9spargebra6parser12parse_update0B5_:
   27|    163|        .map_err(|e| SparqlSyntaxError(ParseErrorKind::Syntax(e)))?;
_RINvNtCskGc5T8eVihK_9spargebra6parser37add_triple_to_triple_or_path_patternsNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeEB4_:
  186|  1.44k|fn add_triple_to_triple_or_path_patterns(
  187|  1.44k|    subject: TermPattern,
  188|  1.44k|    predicate: impl Into<NamedNodePattern>,
  189|  1.44k|    object: AnnotatedTermPath,
  190|  1.44k|    patterns: &mut Vec<TripleOrPathPattern>,
  191|  1.44k|) -> Result<(), &'static str> {
  192|  1.44k|    let triple = TriplePattern::new(subject, predicate, object.term);
  193|       |    #[cfg(feature = "rdf-star")]
  194|  1.44k|    for (p, os) in object.annotations {
  195|      0|        for o in os {
  196|      0|            add_to_triple_or_path_patterns(triple.clone().into(), p.clone(), o, patterns)?
  197|       |        }
  198|       |    }
  199|       |    #[cfg(not(feature = "rdf-star"))]
  200|       |    if !object.annotations.is_empty() {
  201|       |        return Err("Embedded triples are only available in SPARQL-star");
  202|       |    }
  203|  1.44k|    patterns.push(triple.into());
  204|  1.44k|    Ok(())
  205|  1.44k|}
_RNCNvNtCskGc5T8eVihK_9spargebra6parser12build_selects_0B5_:
  486|  5.70k|            p.on_in_scope_variable(|v| {
  487|  5.70k|                if !pv.contains(v) {
  488|  1.15k|                    pv.push(v.clone());
  489|  4.55k|                }
  490|  5.70k|            });
_RINvNtCskGc5T8eVihK_9spargebra6parser37add_triple_to_triple_or_path_patternsNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableEB4_:
  186|  8.92k|fn add_triple_to_triple_or_path_patterns(
  187|  8.92k|    subject: TermPattern,
  188|  8.92k|    predicate: impl Into<NamedNodePattern>,
  189|  8.92k|    object: AnnotatedTermPath,
  190|  8.92k|    patterns: &mut Vec<TripleOrPathPattern>,
  191|  8.92k|) -> Result<(), &'static str> {
  192|  8.92k|    let triple = TriplePattern::new(subject, predicate, object.term);
  193|       |    #[cfg(feature = "rdf-star")]
  194|  8.92k|    for (p, os) in object.annotations {
  195|      0|        for o in os {
  196|      0|            add_to_triple_or_path_patterns(triple.clone().into(), p.clone(), o, patterns)?
  197|       |        }
  198|       |    }
  199|       |    #[cfg(not(feature = "rdf-star"))]
  200|       |    if !object.annotations.is_empty() {
  201|       |        return Err("Embedded triples are only available in SPARQL-star");
  202|       |    }
  203|  8.92k|    patterns.push(triple.into());
  204|  8.92k|    Ok(())
  205|  8.92k|}
_RINvNtCskGc5T8eVihK_9spargebra6parser14not_empty_foldNtNtB4_7algebra10ExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBP_ENCNCNvNtB2_6parser32___parse_ConditionalAndExpression00EB4_:
  346|  1.58k|fn not_empty_fold<T>(
  347|  1.58k|    iter: impl Iterator<Item = T>,
  348|  1.58k|    combine: impl Fn(T, T) -> T,
  349|  1.58k|) -> Result<T, &'static str> {
  350|  1.58k|    iter.fold(None, |a, b| match a {
  351|       |        Some(av) => Some(combine(av, b)),
  352|       |        None => Some(b),
  353|  1.58k|    })
  354|  1.58k|    .ok_or("The iterator should not be empty")
  355|  1.58k|}
_RNCNvNtCskGc5T8eVihK_9spargebra6parser19are_variables_bound0B5_:
  557|      2|            are_variables_bound(a, variables) && b.iter().all(|b| are_variables_bound(b, variables))
_RINvNtCskGc5T8eVihK_9spargebra6parser14not_empty_foldNtNtB4_7algebra12GraphPatternINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBP_ENCNCNvNtB2_6parser32___parse_GroupOrUnionGraphPattern00EB4_:
  346|     91|fn not_empty_fold<T>(
  347|     91|    iter: impl Iterator<Item = T>,
  348|     91|    combine: impl Fn(T, T) -> T,
  349|     91|) -> Result<T, &'static str> {
  350|     91|    iter.fold(None, |a, b| match a {
  351|       |        Some(av) => Some(combine(av, b)),
  352|       |        None => Some(b),
  353|     91|    })
  354|     91|    .ok_or("The iterator should not be empty")
  355|     91|}
_RINvNtCskGc5T8eVihK_9spargebra6parser30add_to_triple_or_path_patternsNtNtB4_7algebra22PropertyPathExpressionEB4_:
  124|  18.0k|fn add_to_triple_or_path_patterns(
  125|  18.0k|    subject: TermPattern,
  126|  18.0k|    predicate: impl Into<VariableOrPropertyPath>,
  127|  18.0k|    object: AnnotatedTermPath,
  128|  18.0k|    patterns: &mut Vec<TripleOrPathPattern>,
  129|  18.0k|) -> Result<(), &'static str> {
  130|  18.0k|    match predicate.into() {
  131|      0|        VariableOrPropertyPath::Variable(p) => {
  132|      0|            add_triple_to_triple_or_path_patterns(subject, p, object, patterns)?;
  133|       |        }
  134|  18.0k|        VariableOrPropertyPath::PropertyPath(p) => match p {
  135|  1.10k|            PropertyPathExpression::NamedNode(p) => {
  136|  1.10k|                add_triple_to_triple_or_path_patterns(subject, p, object, patterns)?;
  137|       |            }
  138|  8.43k|            PropertyPathExpression::Reverse(p) => add_to_triple_or_path_patterns(
  139|  8.43k|                object.term,
  140|  8.43k|                *p,
  141|  8.43k|                AnnotatedTermPath {
  142|  8.43k|                    term: subject,
  143|  8.43k|                    annotations: object.annotations,
  144|  8.43k|                },
  145|  8.43k|                patterns,
  146|  8.43k|            )?,
  147|  3.48k|            PropertyPathExpression::Sequence(a, b) => {
  148|  3.48k|                if !object.annotations.is_empty() {
  149|      0|                    return Err("Annotations are not allowed on property paths");
  150|  3.48k|                }
  151|  3.48k|                let middle = BlankNode::default();
  152|  3.48k|                add_to_triple_or_path_patterns(
  153|  3.48k|                    subject,
  154|  3.48k|                    *a,
  155|  3.48k|                    AnnotatedTermPath {
  156|  3.48k|                        term: middle.clone().into(),
  157|  3.48k|                        annotations: Vec::new(),
  158|  3.48k|                    },
  159|  3.48k|                    patterns,
  160|  3.48k|                )?;
  161|  3.48k|                add_to_triple_or_path_patterns(
  162|  3.48k|                    middle.into(),
  163|  3.48k|                    *b,
  164|  3.48k|                    AnnotatedTermPath {
  165|  3.48k|                        term: object.term,
  166|  3.48k|                        annotations: Vec::new(),
  167|  3.48k|                    },
  168|  3.48k|                    patterns,
  169|  3.48k|                )?;
  170|       |            }
  171|  5.01k|            path => {
  172|  5.01k|                if !object.annotations.is_empty() {
  173|      0|                    return Err("Annotations are not allowed on property paths");
  174|  5.01k|                }
  175|  5.01k|                patterns.push(TripleOrPathPattern::Path {
  176|  5.01k|                    subject,
  177|  5.01k|                    path,
  178|  5.01k|                    object: object.term,
  179|  5.01k|                })
  180|       |            }
  181|       |        },
  182|       |    }
  183|  18.0k|    Ok(())
  184|  18.0k|}
_RINvNtCskGc5T8eVihK_9spargebra6parser14not_empty_foldNtNtB4_7algebra10ExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBP_ENCNCNvNtB2_6parser20___parse_HavingClause00EB4_:
  346|     14|fn not_empty_fold<T>(
  347|     14|    iter: impl Iterator<Item = T>,
  348|     14|    combine: impl Fn(T, T) -> T,
  349|     14|) -> Result<T, &'static str> {
  350|     14|    iter.fold(None, |a, b| match a {
  351|       |        Some(av) => Some(combine(av, b)),
  352|       |        None => Some(b),
  353|     14|    })
  354|     14|    .ok_or("The iterator should not be empty")
  355|     14|}
_RNCINvNtCskGc5T8eVihK_9spargebra6parser14not_empty_foldNtNtB6_7algebra10ExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBR_ENCNCNvNtB4_6parser31___parse_ConditionalOrExpression00E0B6_:
  350|  1.58k|    iter.fold(None, |a, b| match a {
  351|     47|        Some(av) => Some(combine(av, b)),
  352|  1.53k|        None => Some(b),
  353|  1.58k|    })
_RNvXsj_NtCskGc5T8eVihK_9spargebra6parserINtB5_20FocusedTriplePatternINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtB5_13AnnotatedTermEENtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
   52|  14.0k|#[derive(Default)]
_RNvMNtCskGc5T8eVihK_9spargebra6parserINtB2_20FocusedTriplePatternNtNtB4_4term11TermPatternE3newB4_:
   59|  14.0k|    fn new(focus: F) -> Self {
   60|  14.0k|        Self {
   61|  14.0k|            focus,
   62|  14.0k|            patterns: Vec::new(),
   63|  14.0k|        }
   64|  14.0k|    }
_RNCINvNtCskGc5T8eVihK_9spargebra6parser14not_empty_foldNtNtB6_7algebra10ExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBR_ENCNCNvNtB4_6parser32___parse_ConditionalAndExpression00E0B6_:
  350|  1.80k|    iter.fold(None, |a, b| match a {
  351|    226|        Some(av) => Some(combine(av, b)),
  352|  1.58k|        None => Some(b),
  353|  1.80k|    })
_RNCINvNtCskGc5T8eVihK_9spargebra6parser14not_empty_foldNtNtB6_7algebra22PropertyPathExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBR_ENCNCNvNtB4_6parser20___parse_PathSequence00E0B6_:
  350|  27.2k|    iter.fold(None, |a, b| match a {
  351|  7.05k|        Some(av) => Some(combine(av, b)),
  352|  20.1k|        None => Some(b),
  353|  27.2k|    })
_RINvNtCskGc5T8eVihK_9spargebra6parser30add_to_triple_or_path_patternsNtB2_22VariableOrPropertyPathEB4_:
  124|  11.4k|fn add_to_triple_or_path_patterns(
  125|  11.4k|    subject: TermPattern,
  126|  11.4k|    predicate: impl Into<VariableOrPropertyPath>,
  127|  11.4k|    object: AnnotatedTermPath,
  128|  11.4k|    patterns: &mut Vec<TripleOrPathPattern>,
  129|  11.4k|) -> Result<(), &'static str> {
  130|  11.4k|    match predicate.into() {
  131|  8.92k|        VariableOrPropertyPath::Variable(p) => {
  132|  8.92k|            add_triple_to_triple_or_path_patterns(subject, p, object, patterns)?;
  133|       |        }
  134|  2.50k|        VariableOrPropertyPath::PropertyPath(p) => match p {
  135|    343|            PropertyPathExpression::NamedNode(p) => {
  136|    343|                add_triple_to_triple_or_path_patterns(subject, p, object, patterns)?;
  137|       |            }
  138|    601|            PropertyPathExpression::Reverse(p) => add_to_triple_or_path_patterns(
  139|    601|                object.term,
  140|    601|                *p,
  141|    601|                AnnotatedTermPath {
  142|    601|                    term: subject,
  143|    601|                    annotations: object.annotations,
  144|    601|                },
  145|    601|                patterns,
  146|    601|            )?,
  147|  1.01k|            PropertyPathExpression::Sequence(a, b) => {
  148|  1.01k|                if !object.annotations.is_empty() {
  149|      0|                    return Err("Annotations are not allowed on property paths");
  150|  1.01k|                }
  151|  1.01k|                let middle = BlankNode::default();
  152|  1.01k|                add_to_triple_or_path_patterns(
  153|  1.01k|                    subject,
  154|  1.01k|                    *a,
  155|  1.01k|                    AnnotatedTermPath {
  156|  1.01k|                        term: middle.clone().into(),
  157|  1.01k|                        annotations: Vec::new(),
  158|  1.01k|                    },
  159|  1.01k|                    patterns,
  160|  1.01k|                )?;
  161|  1.01k|                add_to_triple_or_path_patterns(
  162|  1.01k|                    middle.into(),
  163|  1.01k|                    *b,
  164|  1.01k|                    AnnotatedTermPath {
  165|  1.01k|                        term: object.term,
  166|  1.01k|                        annotations: Vec::new(),
  167|  1.01k|                    },
  168|  1.01k|                    patterns,
  169|  1.01k|                )?;
  170|       |            }
  171|    546|            path => {
  172|    546|                if !object.annotations.is_empty() {
  173|      0|                    return Err("Annotations are not allowed on property paths");
  174|    546|                }
  175|    546|                patterns.push(TripleOrPathPattern::Path {
  176|    546|                    subject,
  177|    546|                    path,
  178|    546|                    object: object.term,
  179|    546|                })
  180|       |            }
  181|       |        },
  182|       |    }
  183|  11.4k|    Ok(())
  184|  11.4k|}
_RNCINvNtCskGc5T8eVihK_9spargebra6parser14not_empty_foldNtNtB6_7algebra22PropertyPathExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBR_ENCNCNvNtB4_6parser23___parse_PathAlternative00E0B6_:
  350|  20.1k|    iter.fold(None, |a, b| match a {
  351|  1.22k|        Some(av) => Some(combine(av, b)),
  352|  18.9k|        None => Some(b),
  353|  20.1k|    })
_RINvNtCskGc5T8eVihK_9spargebra6parser14not_empty_foldNtNtB4_7algebra22PropertyPathExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBP_ENCNCNvNtB2_6parser20___parse_PathSequence00EB4_:
  346|  20.1k|fn not_empty_fold<T>(
  347|  20.1k|    iter: impl Iterator<Item = T>,
  348|  20.1k|    combine: impl Fn(T, T) -> T,
  349|  20.1k|) -> Result<T, &'static str> {
  350|  20.1k|    iter.fold(None, |a, b| match a {
  351|       |        Some(av) => Some(combine(av, b)),
  352|       |        None => Some(b),
  353|  20.1k|    })
  354|  20.1k|    .ok_or("The iterator should not be empty")
  355|  20.1k|}
_RINvNtCskGc5T8eVihK_9spargebra6parser10copy_graphNtNtB4_4term9GraphNameBL_EB4_:
  631|    222|fn copy_graph(from: impl Into<GraphName>, to: impl Into<GraphNamePattern>) -> GraphUpdateOperation {
  632|    222|    let bgp = GraphPattern::Bgp {
  633|    222|        patterns: vec![TriplePattern::new(
  634|    222|            Variable::new_unchecked("s"),
  635|    222|            Variable::new_unchecked("p"),
  636|    222|            Variable::new_unchecked("o"),
  637|    222|        )],
  638|    222|    };
  639|    222|    GraphUpdateOperation::DeleteInsert {
  640|    222|        delete: Vec::new(),
  641|    222|        insert: vec![QuadPattern::new(
  642|    222|            Variable::new_unchecked("s"),
  643|    222|            Variable::new_unchecked("p"),
  644|    222|            Variable::new_unchecked("o"),
  645|    222|            to,
  646|    222|        )],
  647|    222|        using: None,
  648|    222|        pattern: Box::new(match from.into() {
  649|    137|            GraphName::NamedNode(from) => GraphPattern::Graph {
  650|    137|                name: from.into(),
  651|    137|                inner: Box::new(bgp),
  652|    137|            },
  653|     85|            GraphName::DefaultGraph => bgp,
  654|       |        }),
  655|       |    }
  656|    222|}
_RNvMs5_NtCskGc5T8eVihK_9spargebra6parserINtB5_26FocusedTripleOrPathPatternNtNtB7_4term11TermPatternE3newB7_:
  279|  5.31k|    fn new(focus: F) -> Self {
  280|  5.31k|        Self {
  281|  5.31k|            focus,
  282|  5.31k|            patterns: Vec::new(),
  283|  5.31k|        }
  284|  5.31k|    }
_RINvNtCskGc5T8eVihK_9spargebra6parser14not_empty_foldNtNtB4_7algebra22PropertyPathExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBP_ENCNCNvNtB2_6parser23___parse_PathAlternative00EB4_:
  346|  18.9k|fn not_empty_fold<T>(
  347|  18.9k|    iter: impl Iterator<Item = T>,
  348|  18.9k|    combine: impl Fn(T, T) -> T,
  349|  18.9k|) -> Result<T, &'static str> {
  350|  18.9k|    iter.fold(None, |a, b| match a {
  351|       |        Some(av) => Some(combine(av, b)),
  352|       |        None => Some(b),
  353|  18.9k|    })
  354|  18.9k|    .ok_or("The iterator should not be empty")
  355|  18.9k|}
_RNCINvNtCskGc5T8eVihK_9spargebra6parser14not_empty_foldNtNtB6_7algebra12GraphPatternINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBR_ENCNCNvNtB4_6parser32___parse_GroupOrUnionGraphPattern00E0B6_:
  350|    101|    iter.fold(None, |a, b| match a {
  351|     10|        Some(av) => Some(combine(av, b)),
  352|     91|        None => Some(b),
  353|    101|    })
_RNCNvNtCskGc5T8eVihK_9spargebra6parser19are_variables_bounds_0B5_:
  560|      2|            parameters.iter().all(|p| are_variables_bound(p, variables))
_RNCNvNtCskGc5T8eVihK_9spargebra6parser12build_select0B5_:
  441|  2.21k|            p.on_in_scope_variable(|v| {
  442|  2.21k|                visible.insert(v.clone());
  443|  2.21k|            });
_RNvXsj_NtCskGc5T8eVihK_9spargebra6parserINtB5_20FocusedTriplePatternINtNtCsjOdcKtOMjJI_5alloc3vec3VecTNtNtB7_4term16NamedNodePatternIB15_NtB5_13AnnotatedTermEEEENtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
   52|  14.0k|#[derive(Default)]
_RNvXsp_NtCskGc5T8eVihK_9spargebra6parserINtB5_26FocusedTripleOrPathPatternINtNtCsjOdcKtOMjJI_5alloc3vec3VecTNtB5_22VariableOrPropertyPathIB1b_NtB5_17AnnotatedTermPathEEEENtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
  272|    497|#[derive(Debug, Default)]
_RNCINvNtCskGc5T8eVihK_9spargebra6parser14not_empty_foldNtNtB6_7algebra10ExpressionINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBR_ENCNCNvNtB4_6parser20___parse_HavingClause00E0B6_:
  350|     14|    iter.fold(None, |a, b| match a {
  351|      0|        Some(av) => Some(combine(av, b)),
  352|     14|        None => Some(b),
  353|     14|    })
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_PN_PREFIX:
 2060|   174k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_PNAME_NS:
 1970|   174k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser9___parse__:
 2073|   560k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_DOUBLE:
 2003|  38.7k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_DOUBLE_NEGATIVE:
 2015|  35.7k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser21___parse_iriOrFunction:
 1909|  7.55k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser35___parse_STRING_LITERAL2_simple_char:
 2028|  14.8k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_ObjectList:
 1386|  14.0k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_InlineDataOneVar_value:
 1283|    155|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_QuadsNotTriples:
 1163|  16.6k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_GraphGraphPattern:
 1262|  4.31k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_GraphRef:
 1139|  1.56k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_QuadData:
 1148|    150|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_Load:
  978|  7.04k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser29___parse_Quads_TriplesTemplate:
 1158|  18.4k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_Create:
  991|  4.88k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser32___parse_PropertyListPathNotEmpty:
 1442|  9.11k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_PathSequence_item:
 1515|  35.1k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser11___parse_Var:
 1693|   113k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser35___parse_PathNegatedPropertySet_item:
 1568|  5.71k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_TriplesSameSubjectPath:
 1417|  4.88k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser29___parse_InlineDataFull_values:
 1293|    338|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_VAR1:
 1991|   113k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser24___parse_QuotedTripleData:
 1671|  4.20k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_PNAME_LN:
 1974|  87.3k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser24___parse_ExprQuotedTriple:
 1782|  7.55k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser13___parse_ECHAR:
 2044|  3.72k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser15___parse_VARNAME:
 2056|  36.7k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_IRIREF:
 1966|   131k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_RegexExpression:
 1869|  1.04k|        rule RegexExpression() -> Expression =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_ExistsFunc:
 1883|  1.04k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser15___parse_INTEGER:
 1999|  37.5k|        rule INTEGER() = ['0'..='9']+
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_ServiceGraphPattern:
 1266|  4.25k|        rule ServiceGraphPattern() -> PartialGraphPattern =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_LimitClause:
  961|  1.35k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_GraphRefAll:
 1141|  1.31k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_Update:
  973|  2.45k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser11___parse_Add:
  995|  5.73k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser15___parse_PathElt:
 1517|  35.1k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_InsertClause:
 1123|  4.09k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_GraphOrDefault:
 1133|  1.69k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_Update1_silent:
  976|  2.41k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_InlineDataFull_value:
 1294|  4.05k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_PN_CHARS_U:
 2054|   255k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_ObjectPath:
 1479|  11.4k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_PathSequence:
 1510|  28.0k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_VarOrIri:
 1689|  26.2k|        rule VarOrIri() -> NamedNodePattern =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_PathNegatedPropertySet:
 1541|  1.20k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser33___parse_PropertyListNotEmpty_item:
 1377|  14.0k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_PathAlternative:
 1503|  26.8k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_BrackettedExpression:
 1787|  7.97k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_STRING_LITERAL_LONG2:
 2036|   119k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser26___parse_AdditiveExpression:
 1736|  4.65k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_UnaryExpression:
 1756|  7.94k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser21___parse_GraphNodePath:
 1651|  14.7k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser21___parse_NotExistsFunc:
 1885|    998|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_OptionalGraphPattern:
 1249|  4.74k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_EXPONENT:
 2017|  3.00k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_STRING_LITERAL_LONG1:
 2030|   119k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser15___parse_Update1:
  975|  7.04k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_BlankNode:
 1956|  32.6k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser21___parse_PN_CHARS_BASE:
 2052|   430k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser31___parse_GroupGraphPattern_clear:
 1175|  10.8k|        rule GroupGraphPattern_clear() = {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_OrderClause:
  948|  1.35k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_UsingClause:
 1125|  1.96k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser26___parse_LimitOffsetClauses:
  957|  1.35k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_SelectClause_option:
  820|  1.48k|        rule SelectClause_option() -> SelectionOption =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_ValuesClause:
  969|  1.35k|        rule ValuesClause() -> Option<GraphPattern> =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser11___parse_iri:
 1945|   131k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser37___parse_GroupOrUnionGraphPattern_item:
 1316|  4.84k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser29___parse_TriplesTemplate_inner:
 1170|  32.4k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_Path:
 1501|  26.8k|        rule Path() -> PropertyPathExpression = PathAlternative()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_GraphPatternNotTriples:
 1247|  4.83k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_DeleteClause:
 1119|  4.09k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_TriplesNodePath:
 1592|  13.4k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_NumericExpression:
 1734|  2.93k|        rule NumericExpression() -> Expression = AdditiveExpression()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser45___parse_PropertyListPathNotEmpty_item_content:
 1455|    418|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_MinusGraphPattern:
 1307|  4.32k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_Collection:
 1608|  18.4k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser32___parse_AdditiveExpression_inner:
 1742|  4.01k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_Annotation:
 1643|  14.0k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_PrimaryExpression:
 1764|  7.94k|        rule PrimaryExpression() -> Expression =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_VarOrTerm:
 1655|  66.1k|        rule VarOrTerm() -> TermPattern =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_HavingCondition:
  946|     28|        rule HavingCondition() -> Expression = Constraint()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_String:
 1943|   119k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_InsertData:
 1025|  4.63k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_GroupGraphPatternSub:
 1181|  4.13k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser15___parse_DECIMAL:
 2001|  38.2k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser24___parse_DECIMAL_NEGATIVE:
 2013|  35.7k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_GroupCondition_as:
  940|      1|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_Prologue:
  789|  2.45k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_SubSelect:
  807|  1.50k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_NumericLiteralUnsigned:
 1923|  38.7k|        rule NumericLiteralUnsigned() -> Literal =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_Filter:
 1318|  4.25k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser25___parse_GroupGraphPattern:
 1172|  8.87k|        rule GroupGraphPattern() -> GraphPattern =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser33___parse_GroupGraphPatternSub_item:
 1234|  4.83k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_RDFLiteral:
 1916|  40.5k|        rule RDFLiteral() -> Literal =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_InlineDataFull:
 1285|    134|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_VerbPath:
 1462|  9.53k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser32___parse_GroupOrUnionGraphPattern:
 1311|  4.83k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_FunctionCall:
 1324|    326|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser24___parse_INTEGER_NEGATIVE:
 2011|  35.7k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_UpdateInit:
  787|  2.45k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_GraphTerm:
 1695|  49.6k|        rule GraphTerm() -> Term =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_NumericLiteral:
 1921|  38.7k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_PathOneInPropertySet:
 1570|  5.93k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_VAR2:
 1993|  76.9k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_GroupCondition_item:
  933|    343|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_BaseDecl:
  791|  2.45k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_WhereClause:
  916|  1.47k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_DOUBLE_POSITIVE:
 2009|  35.7k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser10UpdateInit:
  787|  2.28k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_DataBlock:
 1276|    169|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser13___parse_Clear:
  983|  7.04k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_Move:
 1005|  5.49k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser9___parse_i:
 2078|   264k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_PathElt_op:
 1526|  27.2k|        rule PathElt_op() -> char =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_ObjectList_item:
 1393|  14.0k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_StrReplaceExpression:
 1879|  1.14k|        rule StrReplaceExpression() -> Expression =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser24___parse_PathEltOrInverse:
 1531|  35.1k|        rule PathEltOrInverse() -> PropertyPathExpression =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_Expression:
 1703|  2.17k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_Verb:
 1384|  14.0k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_BuiltInCall:
 1789|  1.67k|        rule BuiltInCall() -> Expression =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_SelectClause_variables:
  824|  1.48k|        rule SelectClause_variables() -> SelectionVariables =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_ANON:
 2050|  32.6k|        rule ANON() = "[" WS()* "]"
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser15___parse_comment:
 2076|   560k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_Aggregate:
 1887|  1.67k|        rule Aggregate() -> AggregateExpression =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser24___parse_INTEGER_POSITIVE:
 2005|  35.7k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_Modify_clauses:
 1109|  4.09k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_LateralGraphPattern:
 1257|  4.56k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_PropertyListNotEmpty:
 1370|  14.0k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_QuadPattern:
 1146|  4.26k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser13___parse_Quads:
 1155|  4.47k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_Drop:
  987|  5.90k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser24___parse_BLANK_NODE_LABEL:
 1987|  32.6k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_ExpressionList_item:
 1336|  1.07k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser26___parse_TriplesSameSubject:
 1345|  32.4k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser26___parse_InlineDataFull_var:
 1292|  2.81k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser10___parse_WS:
 2048|  27.4k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_QuotedTriple:
 1663|  49.6k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_PathPrimary:
 1535|  35.1k|        rule PathPrimary() -> PropertyPathExpression =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_Bind:
 1270|  4.25k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_PrefixedName:
 1949|  87.3k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_SubstringExpression:
 1874|  1.14k|        rule SubstringExpression() -> Expression =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_NumericLiteralPositive:
 1928|  35.7k|        rule NumericLiteralPositive() -> Literal =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_OffsetClause:
  965|  1.35k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser32___parse_MultiplicativeExpression:
 1746|  7.94k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_AnnotationPath:
 1645|  11.4k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser30___parse_NumericLiteralNegative:
 1934|  35.7k|        rule NumericLiteralNegative() -> Literal =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser11___parse_NIL:
 2046|  33.7k|        rule NIL() = "(" WS()* ")"
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser16___parse_PN_CHARS:
 2058|   214k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_DeleteData:
 1029|  4.48k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
_RNvMNtNtCskGc5T8eVihK_9spargebra6parser6parserNtB2_10ParseState3new:
  778|  2.45k|parser! {
  779|  2.45k|    //See https://www.w3.org/TR/turtle/#sec-grammar
  780|  2.45k|    grammar parser(state: &mut ParserState) for str {
  781|  2.45k|        pub rule QueryUnit() -> Query = Query()
  782|  2.45k|
  783|  2.45k|        rule Query() -> Query = _ Prologue() _ q:(SelectQuery() / ConstructQuery() / DescribeQuery() / AskQuery()) _ {
  784|  2.45k|            q
  785|  2.45k|        }
  786|  2.45k|
  787|  2.45k|        pub rule UpdateInit() -> Vec<GraphUpdateOperation> = Update()
  788|  2.45k|
  789|  2.45k|        rule Prologue() = (BaseDecl() _ / PrefixDecl() _)* {}
  790|  2.45k|
  791|  2.45k|        rule BaseDecl() = i("BASE") _ i:IRIREF() {
  792|  2.45k|            state.base_iri = Some(i)
  793|  2.45k|        }
  794|  2.45k|
  795|  2.45k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
  796|  2.45k|            state.namespaces.insert(ns.into(), i.into_inner());
  797|  2.45k|        }
  798|  2.45k|
  799|  2.45k|        rule SelectQuery() -> Query = s:SelectClause() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  800|  2.45k|            Ok(Query::Select {
  801|  2.45k|                dataset: d,
  802|  2.45k|                pattern: build_select(s, w, g, h, o, l, v, state)?,
  803|  2.45k|                base_iri: state.base_iri.clone()
  804|  2.45k|            })
  805|  2.45k|        }
  806|  2.45k|
  807|  2.45k|        rule SubSelect() -> GraphPattern = s:SelectClause() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  808|  2.45k|            build_select(s, w, g, h, o, l, v, state)
  809|  2.45k|        }
  810|  2.45k|
  811|  2.45k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
  812|  2.45k|            Selection {
  813|  2.45k|                option: o,
  814|  2.45k|                variables: v
  815|  2.45k|            }
  816|  2.45k|        }
  817|  2.45k|        rule Selection_init() = {
  818|  2.45k|            state.aggregates.push(Vec::new())
  819|  2.45k|        }
  820|  2.45k|        rule SelectClause_option() -> SelectionOption =
  821|  2.45k|            i("DISTINCT") { SelectionOption::Distinct } /
  822|  2.45k|            i("REDUCED") { SelectionOption::Reduced } /
  823|  2.45k|            { SelectionOption::Default }
  824|  2.45k|        rule SelectClause_variables() -> SelectionVariables =
  825|  2.45k|            "*" { SelectionVariables::Star } /
  826|  2.45k|            p:SelectClause_member()+ { SelectionVariables::Explicit(p) }
  827|  2.45k|        rule SelectClause_member() -> SelectionMember =
  828|  2.45k|            v:Var() _ { SelectionMember::Variable(v) } /
  829|  2.45k|            "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" _ { SelectionMember::Expression(e, v) }
  830|  2.45k|
  831|  2.45k|        rule ConstructQuery() -> Query =
  832|  2.45k|            i("CONSTRUCT") _ c:ConstructTemplate() _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  833|  2.45k|                Ok(Query::Construct {
  834|  2.45k|                    template: c,
  835|  2.45k|                    dataset: d,
  836|  2.45k|                    pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  837|  2.45k|                    base_iri: state.base_iri.clone()
  838|  2.45k|                })
  839|  2.45k|            } /
  840|  2.45k|            i("CONSTRUCT") _ d:DatasetClauses() _ i("WHERE") _ "{" _ c:ConstructQuery_optional_triple_template() _ "}" _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  841|  2.45k|                Ok(Query::Construct {
  842|  2.45k|                    template: c.clone(),
  843|  2.45k|                    dataset: d,
  844|  2.45k|                    pattern: build_select(
  845|  2.45k|                        Selection::no_op(),
  846|  2.45k|                        GraphPattern::Bgp { patterns: c },
  847|  2.45k|                        g, h, o, l, v, state
  848|  2.45k|                    )?,
  849|  2.45k|                    base_iri: state.base_iri.clone()
  850|  2.45k|                })
  851|  2.45k|            }
  852|  2.45k|
  853|  2.45k|        rule ConstructQuery_optional_triple_template() -> Vec<TriplePattern> = TriplesTemplate() / { Vec::new() }
  854|  2.45k|
  855|  2.45k|        rule DescribeQuery() -> Query =
  856|  2.45k|            i("DESCRIBE") _ "*" _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  857|  2.45k|                Ok(Query::Describe {
  858|  2.45k|                    dataset: d,
  859|  2.45k|                    pattern: build_select(Selection::no_op(), w.unwrap_or_default(), g, h, o, l, v, state)?,
  860|  2.45k|                    base_iri: state.base_iri.clone()
  861|  2.45k|                })
  862|  2.45k|            } /
  863|  2.45k|            i("DESCRIBE") _ p:DescribeQuery_item()+ _ d:DatasetClauses() w:WhereClause()? _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  864|  2.45k|                Ok(Query::Describe {
  865|  2.45k|                    dataset: d,
  866|  2.45k|                    pattern: build_select(Selection {
  867|  2.45k|                        option: SelectionOption::Default,
  868|  2.45k|                        variables: SelectionVariables::Explicit(p.into_iter().map(|var_or_iri| match var_or_iri {
  869|  2.45k|                            NamedNodePattern::NamedNode(n) => SelectionMember::Expression(n.into(), variable()),
  870|  2.45k|                            NamedNodePattern::Variable(v) => SelectionMember::Variable(v)
  871|  2.45k|                        }).collect())
  872|  2.45k|                    }, w.unwrap_or_default(), g, h, o, l, v, state)?,
  873|  2.45k|                    base_iri: state.base_iri.clone()
  874|  2.45k|                })
  875|  2.45k|            }
  876|  2.45k|        rule DescribeQuery_item() -> NamedNodePattern = i:VarOrIri() _ { i }
  877|  2.45k|
  878|  2.45k|        rule AskQuery() -> Query = i("ASK") _ d:DatasetClauses() _ w:WhereClause() _ g:GroupClause()? _ h:HavingClause()? _ o:OrderClause()? _ l:LimitOffsetClauses()? _ v:ValuesClause() {?
  879|  2.45k|            Ok(Query::Ask {
  880|  2.45k|                dataset: d,
  881|  2.45k|                pattern: build_select(Selection::no_op(), w, g, h, o, l, v, state)?,
  882|  2.45k|                base_iri: state.base_iri.clone()
  883|  2.45k|            })
  884|  2.45k|        }
  885|  2.45k|
  886|  2.45k|        rule DatasetClause() -> (Option<NamedNode>, Option<NamedNode>) = i("FROM") _ d:(DefaultGraphClause() / NamedGraphClause()) { d }
  887|  2.45k|        rule DatasetClauses() -> Option<QueryDataset> = d:DatasetClause() ** (_) {
  888|  2.45k|            if d.is_empty() {
  889|  2.45k|                return None;
  890|  2.45k|            }
  891|  2.45k|            let mut default = Vec::new();
  892|  2.45k|            let mut named = Vec::new();
  893|  2.45k|            for (d, n) in d {
  894|  2.45k|                if let Some(d) = d {
  895|  2.45k|                    default.push(d);
  896|  2.45k|                }
  897|  2.45k|                if let Some(n) = n {
  898|  2.45k|                    named.push(n);
  899|  2.45k|                }
  900|  2.45k|            }
  901|  2.45k|            Some(QueryDataset {
  902|  2.45k|                default, named: Some(named)
  903|  2.45k|            })
  904|  2.45k|        }
  905|  2.45k|
  906|  2.45k|        rule DefaultGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = s:SourceSelector() {
  907|  2.45k|            (Some(s), None)
  908|  2.45k|        }
  909|  2.45k|
  910|  2.45k|        rule NamedGraphClause() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ s:SourceSelector() {
  911|  2.45k|            (None, Some(s))
  912|  2.45k|        }
  913|  2.45k|
  914|  2.45k|        rule SourceSelector() -> NamedNode = iri()
  915|  2.45k|
  916|  2.45k|        rule WhereClause() -> GraphPattern = i("WHERE")? _ p:GroupGraphPattern() {
  917|  2.45k|            p
  918|  2.45k|        }
  919|  2.45k|
  920|  2.45k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
  921|  2.45k|            let mut projections: Vec<(Expression,Variable)> = Vec::new();
  922|  2.45k|            let clauses = c.into_iter().map(|(e, vo)| {
  923|  2.45k|                if let Expression::Variable(v) = e {
  924|  2.45k|                    v
  925|  2.45k|                } else {
  926|  2.45k|                    let v = vo.unwrap_or_else(variable);
  927|  2.45k|                    projections.push((e, v.clone()));
  928|  2.45k|                    v
  929|  2.45k|                }
  930|  2.45k|            }).collect();
  931|  2.45k|            (clauses, projections)
  932|  2.45k|        }
  933|  2.45k|        rule GroupCondition_item() -> (Expression, Option<Variable>) = c:GroupCondition() _ { c }
  934|  2.45k|
  935|  2.45k|        rule GroupCondition() -> (Expression, Option<Variable>) =
  936|  2.45k|            e:BuiltInCall() { (e, None) } /
  937|  2.45k|            e:FunctionCall() { (e, None) } /
  938|  2.45k|            "(" _ e:Expression() _ v:GroupCondition_as()? ")" { (e, v) } /
  939|  2.45k|            e:Var() { (e.into(), None) }
  940|  2.45k|        rule GroupCondition_as() -> Variable = i("AS") _ v:Var() _ { v }
  941|  2.45k|
  942|  2.45k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
  943|  2.45k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
  944|  2.45k|        }
  945|  2.45k|
  946|  2.45k|        rule HavingCondition() -> Expression = Constraint()
  947|  2.45k|
  948|  2.45k|        rule OrderClause() -> Vec<OrderExpression> = i("ORDER") _ i("BY") _ c:OrderClause_item()+ { c }
  949|  2.45k|        rule OrderClause_item() -> OrderExpression = c:OrderCondition() _ { c }
  950|  2.45k|
  951|  2.45k|        rule OrderCondition() -> OrderExpression =
  952|  2.45k|            i("ASC") _ e: BrackettedExpression() { OrderExpression::Asc(e) } /
  953|  2.45k|            i("DESC") _ e: BrackettedExpression() { OrderExpression::Desc(e) } /
  954|  2.45k|            e: Constraint() { OrderExpression::Asc(e) } /
  955|  2.45k|            v: Var() { OrderExpression::Asc(Expression::from(v)) }
  956|  2.45k|
  957|  2.45k|        rule LimitOffsetClauses() -> (usize, Option<usize>) =
  958|  2.45k|            l:LimitClause() _ o:OffsetClause()? { (o.unwrap_or(0), Some(l)) } /
  959|  2.45k|            o:OffsetClause() _ l:LimitClause()? { (o, l) }
  960|  2.45k|
  961|  2.45k|        rule LimitClause() -> usize = i("LIMIT") _ l:$(INTEGER()) {?
  962|  2.45k|            usize::from_str(l).map_err(|_| "The query limit should be a non negative integer")
  963|  2.45k|        }
  964|  2.45k|
  965|  2.45k|        rule OffsetClause() -> usize = i("OFFSET") _ o:$(INTEGER()) {?
  966|  2.45k|            usize::from_str(o).map_err(|_| "The query offset should be a non negative integer")
  967|  2.45k|        }
  968|  2.45k|
  969|  2.45k|        rule ValuesClause() -> Option<GraphPattern> =
  970|  2.45k|            i("VALUES") _ p:DataBlock() { Some(p) } /
  971|  2.45k|            { None }
  972|  2.45k|
  973|  2.45k|        rule Update() -> Vec<GraphUpdateOperation> = _ Prologue() _ u:(Update1() ** (_ ";" _))  _ ( ";" _)? { u.into_iter().flatten().collect() }
  974|  2.45k|
  975|  2.45k|        rule Update1() -> Vec<GraphUpdateOperation> = Load() / Clear() / Drop() / Add() / Move() / Copy() / Create() / InsertData() / DeleteData() / DeleteWhere() / Modify()
  976|  2.45k|        rule Update1_silent() -> bool = i("SILENT") { true } / { false }
  977|  2.45k|
  978|  2.45k|        rule Load() -> Vec<GraphUpdateOperation> = i("LOAD") _ silent:Update1_silent() _ source:iri() _ destination:Load_to()? {
  979|  2.45k|            vec![GraphUpdateOperation::Load { silent, source, destination: destination.map_or(GraphName::DefaultGraph, GraphName::NamedNode) }]
  980|  2.45k|        }
  981|  2.45k|        rule Load_to() -> NamedNode = i("INTO") _ g: GraphRef() { g }
  982|  2.45k|
  983|  2.45k|        rule Clear() -> Vec<GraphUpdateOperation> = i("CLEAR") _ silent:Update1_silent() _ graph:GraphRefAll() {
  984|  2.45k|            vec![GraphUpdateOperation::Clear { silent, graph }]
  985|  2.45k|        }
  986|  2.45k|
  987|  2.45k|        rule Drop() -> Vec<GraphUpdateOperation> = i("DROP") _ silent:Update1_silent() _ graph:GraphRefAll() {
  988|  2.45k|            vec![GraphUpdateOperation::Drop { silent, graph }]
  989|  2.45k|        }
  990|  2.45k|
  991|  2.45k|        rule Create() -> Vec<GraphUpdateOperation> = i("CREATE") _ silent:Update1_silent() _ graph:GraphRef() {
  992|  2.45k|            vec![GraphUpdateOperation::Create { silent, graph }]
  993|  2.45k|        }
  994|  2.45k|
  995|  2.45k|        rule Add() -> Vec<GraphUpdateOperation> = i("ADD") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
  996|  2.45k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#add
  997|  2.45k|            if from == to {
  998|  2.45k|                Vec::new() // identity case
  999|  2.45k|            } else {
 1000|  2.45k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1001|  2.45k|                vec![copy_graph(from, to)]
 1002|  2.45k|            }
 1003|  2.45k|        }
 1004|  2.45k|
 1005|  2.45k|        rule Move() -> Vec<GraphUpdateOperation> = i("MOVE") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1006|  2.45k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#move
 1007|  2.45k|            if from == to {
 1008|  2.45k|                Vec::new() // identity case
 1009|  2.45k|            } else {
 1010|  2.45k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1011|  2.45k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from.clone(), to), GraphUpdateOperation::Drop { silent, graph: from.into() }]
 1012|  2.45k|            }
 1013|  2.45k|        }
 1014|  2.45k|
 1015|  2.45k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
 1016|  2.45k|            // Rewriting defined by https://www.w3.org/TR/sparql11-update/#copy
 1017|  2.45k|            if from == to {
 1018|  2.45k|                Vec::new() // identity case
 1019|  2.45k|            } else {
 1020|  2.45k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(Variable::new_unchecked("s"), Variable::new_unchecked("p"), Variable::new_unchecked("o"))] };
 1021|  2.45k|                vec![GraphUpdateOperation::Drop { silent: true, graph: to.clone().into() }, copy_graph(from, to)]
 1022|  2.45k|            }
 1023|  2.45k|        }
 1024|  2.45k|
 1025|  2.45k|        rule InsertData() -> Vec<GraphUpdateOperation> = i("INSERT") _ i("DATA") _ data:QuadData() {
 1026|  2.45k|            vec![GraphUpdateOperation::InsertData { data }]
 1027|  2.45k|        }
 1028|  2.45k|
 1029|  2.45k|        rule DeleteData() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("DATA") _ data:GroundQuadData() {
 1030|  2.45k|            vec![GraphUpdateOperation::DeleteData { data }]
 1031|  2.45k|        }
 1032|  2.45k|
 1033|  2.45k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
 1034|  2.45k|            let pattern = d.iter().map(|q| {
 1035|  2.45k|                let bgp = GraphPattern::Bgp { patterns: vec![TriplePattern::new(q.subject.clone(), q.predicate.clone(), q.object.clone())] };
 1036|  2.45k|                match &q.graph_name {
 1037|  2.45k|                    GraphNamePattern::NamedNode(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1038|  2.45k|                    GraphNamePattern::DefaultGraph => bgp,
 1039|  2.45k|                    GraphNamePattern::Variable(graph_name) => GraphPattern::Graph { name: graph_name.clone().into(), inner: Box::new(bgp) },
 1040|  2.45k|                }
 1041|  2.45k|            }).reduce(new_join).unwrap_or_default();
 1042|  2.45k|            let delete = d.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")?;
 1043|  2.45k|            Ok(vec![GraphUpdateOperation::DeleteInsert {
 1044|  2.45k|                delete,
 1045|  2.45k|                insert: Vec::new(),
 1046|  2.45k|                using: None,
 1047|  2.45k|                pattern: Box::new(pattern)
 1048|  2.45k|            }])
 1049|  2.45k|        }
 1050|  2.45k|
 1051|  2.45k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
 1052|  2.45k|            let (delete, insert) = c;
 1053|  2.45k|            let mut delete = delete.unwrap_or_default();
 1054|  2.45k|            let mut insert = insert.unwrap_or_default();
 1055|  2.45k|            #[allow(clippy::shadow_same)]
 1056|  2.45k|            let mut pattern = pattern;
 1057|  2.45k|
 1058|  2.45k|            let mut using = if u.is_empty() {
 1059|  2.45k|                None
 1060|  2.45k|            } else {
 1061|  2.45k|                let mut default = Vec::new();
 1062|  2.45k|                let mut named = Vec::new();
 1063|  2.45k|                for (d, n) in u {
 1064|  2.45k|                    if let Some(d) = d {
 1065|  2.45k|                        default.push(d)
 1066|  2.45k|                    }
 1067|  2.45k|                    if let Some(n) = n {
 1068|  2.45k|                        named.push(n)
 1069|  2.45k|                    }
 1070|  2.45k|                }
 1071|  2.45k|                Some(QueryDataset { default, named: Some(named) })
 1072|  2.45k|            };
 1073|  2.45k|
 1074|  2.45k|            if let Some(with) = with {
 1075|  2.45k|                // We inject WITH everywhere
 1076|  2.45k|                delete = delete.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1077|  2.45k|                    GroundQuadPattern {
 1078|  2.45k|                        subject: q.subject,
 1079|  2.45k|                        predicate: q.predicate,
 1080|  2.45k|                        object: q.object,
 1081|  2.45k|                        graph_name: with.clone().into()
 1082|  2.45k|                    }
 1083|  2.45k|                } else {
 1084|  2.45k|                    q
 1085|  2.45k|                }).collect();
 1086|  2.45k|                insert = insert.into_iter().map(|q| if q.graph_name == GraphNamePattern::DefaultGraph {
 1087|  2.45k|                    QuadPattern {
 1088|  2.45k|                        subject: q.subject,
 1089|  2.45k|                        predicate: q.predicate,
 1090|  2.45k|                        object: q.object,
 1091|  2.45k|                        graph_name: with.clone().into()
 1092|  2.45k|                    }
 1093|  2.45k|                } else {
 1094|  2.45k|                    q
 1095|  2.45k|                }).collect();
 1096|  2.45k|                if using.is_none() {
 1097|  2.45k|                    using = Some(QueryDataset { default: vec![with], named: None });
 1098|  2.45k|                }
 1099|  2.45k|            }
 1100|  2.45k|
 1101|  2.45k|            vec![GraphUpdateOperation::DeleteInsert {
 1102|  2.45k|                delete,
 1103|  2.45k|                insert,
 1104|  2.45k|                using,
 1105|  2.45k|                pattern: Box::new(pattern)
 1106|  2.45k|            }]
 1107|  2.45k|        }
 1108|  2.45k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
 1109|  2.45k|        rule Modify_clauses() -> (Option<Vec<GroundQuadPattern>>, Option<Vec<QuadPattern>>) = d:DeleteClause() _ i:InsertClause()? {
 1110|  2.45k|            (Some(d), i)
 1111|  2.45k|        } / i:InsertClause() {
 1112|  2.45k|            (None, Some(i))
 1113|  2.45k|        }
 1114|  2.45k|        rule Modify_clear() = {
 1115|  2.45k|            state.used_bnodes.clear();
 1116|  2.45k|            state.currently_used_bnodes.clear();
 1117|  2.45k|        }
 1118|  2.45k|
 1119|  2.45k|        rule DeleteClause() -> Vec<GroundQuadPattern> = i("DELETE") _ q:QuadPattern() {?
 1120|  2.45k|            q.into_iter().map(GroundQuadPattern::try_from).collect::<Result<Vec<_>,_>>().map_err(|()| "Blank nodes are not allowed in DELETE WHERE")
 1121|  2.45k|        }
 1122|  2.45k|
 1123|  2.45k|        rule InsertClause() -> Vec<QuadPattern> = i("INSERT") _ q:QuadPattern() { q }
 1124|  2.45k|
 1125|  2.45k|        rule UsingClause() -> (Option<NamedNode>, Option<NamedNode>) = i("USING") _ d:(UsingClause_default() / UsingClause_named()) { d }
 1126|  2.45k|        rule UsingClause_default() -> (Option<NamedNode>, Option<NamedNode>) = i:iri() {
 1127|  2.45k|            (Some(i), None)
 1128|  2.45k|        }
 1129|  2.45k|        rule UsingClause_named() -> (Option<NamedNode>, Option<NamedNode>) = i("NAMED") _ i:iri() {
 1130|  2.45k|            (None, Some(i))
 1131|  2.45k|        }
 1132|  2.45k|
 1133|  2.45k|        rule GraphOrDefault() -> GraphName = i("DEFAULT") {
 1134|  2.45k|            GraphName::DefaultGraph
 1135|  2.45k|        } / (i("GRAPH") _)? g:iri() {
 1136|  2.45k|            GraphName::NamedNode(g)
 1137|  2.45k|        }
 1138|  2.45k|
 1139|  2.45k|        rule GraphRef() -> NamedNode = i("GRAPH") _ g:iri() { g }
 1140|  2.45k|
 1141|  2.45k|        rule GraphRefAll() -> GraphTarget  = i: GraphRef() { i.into() }
 1142|  2.45k|            / i("DEFAULT") { GraphTarget::DefaultGraph }
 1143|  2.45k|            / i("NAMED") { GraphTarget::NamedGraphs }
 1144|  2.45k|            / i("ALL") { GraphTarget::AllGraphs }
 1145|  2.45k|
 1146|  2.45k|        rule QuadPattern() -> Vec<QuadPattern> = "{" _ q:Quads() _ "}" { q }
 1147|  2.45k|
 1148|  2.45k|        rule QuadData() -> Vec<Quad> = "{" _ q:Quads() _ "}" {?
 1149|  2.45k|            q.into_iter().map(Quad::try_from).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables are not allowed in INSERT DATA")
 1150|  2.45k|        }
 1151|  2.45k|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
 1152|  2.45k|            q.into_iter().map(|q| GroundQuad::try_from(Quad::try_from(q)?)).collect::<Result<Vec<_>, ()>>().map_err(|()| "Variables and blank nodes are not allowed in DELETE DATA")
 1153|  2.45k|        }
 1154|  2.45k|
 1155|  2.45k|        rule Quads() -> Vec<QuadPattern> = q:(Quads_TriplesTemplate() / Quads_QuadsNotTriples()) ** (_) {
 1156|  2.45k|            q.into_iter().flatten().collect()
 1157|  2.45k|        }
 1158|  2.45k|        rule Quads_TriplesTemplate() -> Vec<QuadPattern> = t:TriplesTemplate() {
 1159|  2.45k|            t.into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, GraphNamePattern::DefaultGraph)).collect()
 1160|  2.45k|        } //TODO: return iter?
 1161|  2.45k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
 1162|  2.45k|
 1163|  2.45k|        rule QuadsNotTriples() -> Vec<QuadPattern> = i("GRAPH") _ g:VarOrIri() _ "{" _ t:TriplesTemplate()? _ "}" {
 1164|  2.45k|            t.unwrap_or_default().into_iter().map(|t| QuadPattern::new(t.subject, t.predicate, t.object, g.clone())).collect()
 1165|  2.45k|        }
 1166|  2.45k|
 1167|  2.45k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
 1168|  2.45k|            ts.into_iter().flatten().collect()
 1169|  2.45k|        }
 1170|  2.45k|        rule TriplesTemplate_inner() -> Vec<TriplePattern> = _ t:TriplesSameSubject() _ { t }
 1171|  2.45k|
 1172|  2.45k|        rule GroupGraphPattern() -> GraphPattern =
 1173|  2.45k|            "{" _ GroupGraphPattern_clear() p:GroupGraphPatternSub() GroupGraphPattern_clear() _ "}" { p } /
 1174|  2.45k|            "{" _ GroupGraphPattern_clear() p:SubSelect() GroupGraphPattern_clear() _ "}" { p }
 1175|  2.45k|        rule GroupGraphPattern_clear() = {
 1176|  2.45k|             // We deal with blank nodes aliases rule
 1177|  2.45k|            state.used_bnodes.extend(state.currently_used_bnodes.iter().cloned());
 1178|  2.45k|            state.currently_used_bnodes.clear();
 1179|  2.45k|        }
 1180|  2.45k|
 1181|  2.45k|        rule GroupGraphPatternSub() -> GraphPattern = a:TriplesBlock()? _ b:GroupGraphPatternSub_item()* {?
 1182|  2.45k|            let mut filter: Option<Expression> = None;
 1183|  2.45k|            let mut g = a.map_or_else(GraphPattern::default, build_bgp);
 1184|  2.45k|            for e in b.into_iter().flatten() {
 1185|  2.45k|                match e {
 1186|  2.45k|                    PartialGraphPattern::Optional(p, f) => {
 1187|  2.45k|                        g = GraphPattern::LeftJoin { left: Box::new(g), right: Box::new(p), expression: f }
 1188|  2.45k|                    }
 1189|  2.45k|                    #[cfg(feature = "sep-0006")]
 1190|  2.45k|                    PartialGraphPattern::Lateral(p) => {
 1191|  2.45k|                        let mut defined_variables = HashSet::default();
 1192|  2.45k|                        add_defined_variables(&p, &mut defined_variables);
 1193|  2.45k|                        let mut contains = false;
 1194|  2.45k|                        g.on_in_scope_variable(|v| {
 1195|  2.45k|                            if defined_variables.contains(v) {
 1196|  2.45k|                                contains = true;
 1197|  2.45k|                            }
 1198|  2.45k|                        });
 1199|  2.45k|                        if contains {
 1200|  2.45k|                            return Err("An existing variable is overridden in the right side of LATERAL");
 1201|  2.45k|                        }
 1202|  2.45k|                        g = GraphPattern::Lateral { left: Box::new(g), right: Box::new(p) }
 1203|  2.45k|                    }
 1204|  2.45k|                    PartialGraphPattern::Minus(p) => {
 1205|  2.45k|                        g = GraphPattern::Minus { left: Box::new(g), right: Box::new(p) }
 1206|  2.45k|                    }
 1207|  2.45k|                    PartialGraphPattern::Bind(expression, variable) => {
 1208|  2.45k|                        let mut contains = false;
 1209|  2.45k|                        g.on_in_scope_variable(|v| {
 1210|  2.45k|                            if *v == variable {
 1211|  2.45k|                                contains = true;
 1212|  2.45k|                            }
 1213|  2.45k|                        });
 1214|  2.45k|                        if contains {
 1215|  2.45k|                            return Err("BIND is overriding an existing variable")
 1216|  2.45k|                        }
 1217|  2.45k|                        g = GraphPattern::Extend { inner: Box::new(g), variable, expression }
 1218|  2.45k|                    }
 1219|  2.45k|                    PartialGraphPattern::Filter(expr) => filter = Some(if let Some(f) = filter {
 1220|  2.45k|                        Expression::And(Box::new(f), Box::new(expr))
 1221|  2.45k|                    } else {
 1222|  2.45k|                        expr
 1223|  2.45k|                    }),
 1224|  2.45k|                    PartialGraphPattern::Other(e) => g = new_join(g, e),
 1225|  2.45k|                }
 1226|  2.45k|            }
 1227|  2.45k|
 1228|  2.45k|            Ok(if let Some(expr) = filter {
 1229|  2.45k|                GraphPattern::Filter { expr, inner: Box::new(g) }
 1230|  2.45k|            } else {
 1231|  2.45k|                g
 1232|  2.45k|            })
 1233|  2.45k|        }
 1234|  2.45k|        rule GroupGraphPatternSub_item() -> Vec<PartialGraphPattern> = a:GraphPatternNotTriples() _ ("." _)? b:TriplesBlock()? _ {
 1235|  2.45k|            let mut result = vec![a];
 1236|  2.45k|            if let Some(v) = b {
 1237|  2.45k|                result.push(PartialGraphPattern::Other(build_bgp(v)));
 1238|  2.45k|            }
 1239|  2.45k|            result
 1240|  2.45k|        }
 1241|  2.45k|
 1242|  2.45k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
 1243|  2.45k|            hs.into_iter().flatten().collect()
 1244|  2.45k|        }
 1245|  2.45k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
 1246|  2.45k|
 1247|  2.45k|        rule GraphPatternNotTriples() -> PartialGraphPattern = GroupOrUnionGraphPattern() / OptionalGraphPattern() / LateralGraphPattern() / MinusGraphPattern() / GraphGraphPattern() / ServiceGraphPattern() / Filter() / Bind() / InlineData()
 1248|  2.45k|
 1249|  2.45k|        rule OptionalGraphPattern() -> PartialGraphPattern = i("OPTIONAL") _ p:GroupGraphPattern() {
 1250|  2.45k|            if let GraphPattern::Filter { expr, inner } =  p {
 1251|  2.45k|               PartialGraphPattern::Optional(*inner, Some(expr))
 1252|  2.45k|            } else {
 1253|  2.45k|               PartialGraphPattern::Optional(p, None)
 1254|  2.45k|            }
 1255|  2.45k|        }
 1256|  2.45k|
 1257|  2.45k|        rule LateralGraphPattern() -> PartialGraphPattern = i("LATERAL") _ p:GroupGraphPattern() {?
 1258|  2.45k|                #[cfg(feature = "sep-0006")]{Ok(PartialGraphPattern::Lateral(p))}
 1259|  2.45k|                #[cfg(not(feature = "sep-0006"))]{Err("The LATERAL modifier is not supported")}
 1260|  2.45k|        }
 1261|  2.45k|
 1262|  2.45k|        rule GraphGraphPattern() -> PartialGraphPattern = i("GRAPH") _ name:VarOrIri() _ p:GroupGraphPattern() {
 1263|  2.45k|            PartialGraphPattern::Other(GraphPattern::Graph { name, inner: Box::new(p) })
 1264|  2.45k|        }
 1265|  2.45k|
 1266|  2.45k|        rule ServiceGraphPattern() -> PartialGraphPattern =
 1267|  2.45k|            i("SERVICE") _ i("SILENT") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service { name, inner: Box::new(p), silent: true }) } /
 1268|  2.45k|            i("SERVICE") _ name:VarOrIri() _ p:GroupGraphPattern() { PartialGraphPattern::Other(GraphPattern::Service{ name, inner: Box::new(p), silent: false }) }
 1269|  2.45k|
 1270|  2.45k|        rule Bind() -> PartialGraphPattern = i("BIND") _ "(" _ e:Expression() _ i("AS") _ v:Var() _ ")" {
 1271|  2.45k|            PartialGraphPattern::Bind(e, v)
 1272|  2.45k|        }
 1273|  2.45k|
 1274|  2.45k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
 1275|  2.45k|
 1276|  2.45k|        rule DataBlock() -> GraphPattern = l:(InlineDataOneVar() / InlineDataFull()) {
 1277|  2.45k|            GraphPattern::Values { variables: l.0, bindings: l.1 }
 1278|  2.45k|        }
 1279|  2.45k|
 1280|  2.45k|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
 1281|  2.45k|            (vec![var], d)
 1282|  2.45k|        }
 1283|  2.45k|        rule InlineDataOneVar_value() -> Vec<Option<GroundTerm>> = t:DataBlockValue() _ { vec![t] }
 1284|  2.45k|
 1285|  2.45k|        rule InlineDataFull() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = "(" _ vars:InlineDataFull_var()* _ ")" _ "{" _ vals:InlineDataFull_values()* "}" {?
 1286|  2.45k|            if vals.iter().all(|vs| vs.len() == vars.len()) {
 1287|  2.45k|                Ok((vars, vals))
 1288|  2.45k|            } else {
 1289|  2.45k|                Err("The VALUES clause rows should have exactly the same number of values as there are variables. To set a value to undefined use UNDEF.")
 1290|  2.45k|            }
 1291|  2.45k|        }
 1292|  2.45k|        rule InlineDataFull_var() -> Variable = v:Var() _ { v }
 1293|  2.45k|        rule InlineDataFull_values() -> Vec<Option<GroundTerm>> = "(" _ v:InlineDataFull_value()* _ ")" _ { v }
 1294|  2.45k|        rule InlineDataFull_value() -> Option<GroundTerm> = v:DataBlockValue() _ { v }
 1295|  2.45k|
 1296|  2.45k|        rule DataBlockValue() -> Option<GroundTerm> =
 1297|  2.45k|            t:QuotedTripleData() {?
 1298|  2.45k|                #[cfg(feature = "rdf-star")]{Ok(Some(t.into()))}
 1299|  2.45k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1300|  2.45k|            } /
 1301|  2.45k|            i:iri() { Some(i.into()) } /
 1302|  2.45k|            l:RDFLiteral() { Some(l.into()) } /
 1303|  2.45k|            l:NumericLiteral() { Some(l.into()) } /
 1304|  2.45k|            l:BooleanLiteral() { Some(l.into()) } /
 1305|  2.45k|            i("UNDEF") { None }
 1306|  2.45k|
 1307|  2.45k|        rule MinusGraphPattern() -> PartialGraphPattern = i("MINUS") _ p: GroupGraphPattern() {
 1308|  2.45k|            PartialGraphPattern::Minus(p)
 1309|  2.45k|        }
 1310|  2.45k|
 1311|  2.45k|        rule GroupOrUnionGraphPattern() -> PartialGraphPattern = p:GroupOrUnionGraphPattern_item() **<1,> (i("UNION") _) {?
 1312|  2.45k|            not_empty_fold(p.into_iter(), |a, b| {
 1313|  2.45k|                GraphPattern::Union { left: Box::new(a), right: Box::new(b) }
 1314|  2.45k|            }).map(PartialGraphPattern::Other)
 1315|  2.45k|        }
 1316|  2.45k|        rule GroupOrUnionGraphPattern_item() -> GraphPattern = p:GroupGraphPattern() _ { p }
 1317|  2.45k|
 1318|  2.45k|        rule Filter() -> PartialGraphPattern = i("FILTER") _ c:Constraint() {
 1319|  2.45k|            PartialGraphPattern::Filter(c)
 1320|  2.45k|        }
 1321|  2.45k|
 1322|  2.45k|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
 1323|  2.45k|
 1324|  2.45k|        rule FunctionCall() -> Expression = f: iri() _ a: ArgList() {
 1325|  2.45k|            Expression::FunctionCall(Function::Custom(f), a)
 1326|  2.45k|        }
 1327|  2.45k|
 1328|  2.45k|        rule ArgList() -> Vec<Expression> =
 1329|  2.45k|            "(" _ e:ArgList_item() **<1,> ("," _) _ ")" { e } /
 1330|  2.45k|            NIL() { Vec::new() }
 1331|  2.45k|        rule ArgList_item() -> Expression = e:Expression() _ { e }
 1332|  2.45k|
 1333|  2.45k|        rule ExpressionList() -> Vec<Expression> =
 1334|  2.45k|            "(" _ e:ExpressionList_item() **<1,> ("," _) ")" { e } /
 1335|  2.45k|            NIL() { Vec::new() }
 1336|  2.45k|        rule ExpressionList_item() -> Expression = e:Expression() _ { e }
 1337|  2.45k|
 1338|  2.45k|        rule ConstructTemplate() -> Vec<TriplePattern> = "{" _ t:ConstructTriples() _ "}" { t }
 1339|  2.45k|
 1340|  2.45k|        rule ConstructTriples() -> Vec<TriplePattern> = p:ConstructTriples_item() ** ("." _) "."? {
 1341|  2.45k|            p.into_iter().flatten().collect()
 1342|  2.45k|        }
 1343|  2.45k|        rule ConstructTriples_item() -> Vec<TriplePattern> = t:TriplesSameSubject() _ { t }
 1344|  2.45k|
 1345|  2.45k|        rule TriplesSameSubject() -> Vec<TriplePattern> =
 1346|  2.45k|            s:VarOrTerm() _ po:PropertyListNotEmpty() {?
 1347|  2.45k|                let mut patterns = po.patterns;
 1348|  2.45k|                for (p, os) in po.focus {
 1349|  2.45k|                    for o in os {
 1350|  2.45k|                        add_to_triple_patterns(s.clone(), p.clone(), o, &mut patterns)?
 1351|  2.45k|                    }
 1352|  2.45k|                }
 1353|  2.45k|                Ok(patterns)
 1354|  2.45k|            } /
 1355|  2.45k|            s:TriplesNode() _ po:PropertyList() {?
 1356|  2.45k|                let mut patterns = s.patterns;
 1357|  2.45k|                patterns.extend(po.patterns);
 1358|  2.45k|                for (p, os) in po.focus {
 1359|  2.45k|                    for o in os {
 1360|  2.45k|                        add_to_triple_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?
 1361|  2.45k|                    }
 1362|  2.45k|                }
 1363|  2.45k|                Ok(patterns)
 1364|  2.45k|            }
 1365|  2.45k|
 1366|  2.45k|        rule PropertyList() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> =
 1367|  2.45k|            PropertyListNotEmpty() /
 1368|  2.45k|            { FocusedTriplePattern::default() }
 1369|  2.45k|
 1370|  2.45k|        rule PropertyListNotEmpty() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = l:PropertyListNotEmpty_item() **<1,> (";" _) {
 1371|  2.45k|            l.into_iter().fold(FocusedTriplePattern::<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>>::default(), |mut a, b| {
 1372|  2.45k|                a.focus.push(b.focus);
 1373|  2.45k|                a.patterns.extend(b.patterns);
 1374|  2.45k|                a
 1375|  2.45k|            })
 1376|  2.45k|        }
 1377|  2.45k|        rule PropertyListNotEmpty_item() -> FocusedTriplePattern<(NamedNodePattern,Vec<AnnotatedTerm>)> = p:Verb() _ o:ObjectList() _ {
 1378|  2.45k|            FocusedTriplePattern {
 1379|  2.45k|                focus: (p, o.focus),
 1380|  2.45k|                patterns: o.patterns
 1381|  2.45k|            }
 1382|  2.45k|        }
 1383|  2.45k|
 1384|  2.45k|        rule Verb() -> NamedNodePattern = VarOrIri() / "a" { rdf::TYPE.into_owned().into() }
 1385|  2.45k|
 1386|  2.45k|        rule ObjectList() -> FocusedTriplePattern<Vec<AnnotatedTerm>> = o:ObjectList_item() **<1,> ("," _) {
 1387|  2.45k|            o.into_iter().fold(FocusedTriplePattern::<Vec<AnnotatedTerm>>::default(), |mut a, b| {
 1388|  2.45k|                a.focus.push(b.focus);
 1389|  2.45k|                a.patterns.extend_from_slice(&b.patterns);
 1390|  2.45k|                a
 1391|  2.45k|            })
 1392|  2.45k|        }
 1393|  2.45k|        rule ObjectList_item() -> FocusedTriplePattern<AnnotatedTerm> = o:Object() _ { o }
 1394|  2.45k|
 1395|  2.45k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
 1396|  2.45k|            if let Some(a) = a {
 1397|  2.45k|                let mut patterns = g.patterns;
 1398|  2.45k|                patterns.extend(a.patterns);
 1399|  2.45k|                FocusedTriplePattern {
 1400|  2.45k|                    focus: AnnotatedTerm {
 1401|  2.45k|                        term: g.focus,
 1402|  2.45k|                        annotations: a.focus
 1403|  2.45k|                    },
 1404|  2.45k|                    patterns
 1405|  2.45k|                }
 1406|  2.45k|            } else {
 1407|  2.45k|                FocusedTriplePattern {
 1408|  2.45k|                    focus: AnnotatedTerm {
 1409|  2.45k|                        term: g.focus,
 1410|  2.45k|                        annotations: Vec::new()
 1411|  2.45k|                    },
 1412|  2.45k|                    patterns: g.patterns
 1413|  2.45k|                }
 1414|  2.45k|            }
 1415|  2.45k|        }
 1416|  2.45k|
 1417|  2.45k|        rule TriplesSameSubjectPath() -> Vec<TripleOrPathPattern> =
 1418|  2.45k|            s:VarOrTerm() _ po:PropertyListPathNotEmpty() {?
 1419|  2.45k|                let mut patterns = po.patterns;
 1420|  2.45k|                for (p, os) in po.focus {
 1421|  2.45k|                    for o in os {
 1422|  2.45k|                        add_to_triple_or_path_patterns(s.clone(), p.clone(), o, &mut patterns)?;
 1423|  2.45k|                    }
 1424|  2.45k|                }
 1425|  2.45k|                Ok(patterns)
 1426|  2.45k|            } /
 1427|  2.45k|            s:TriplesNodePath() _ po:PropertyListPath() {?
 1428|  2.45k|                let mut patterns = s.patterns;
 1429|  2.45k|                patterns.extend(po.patterns);
 1430|  2.45k|                for (p, os) in po.focus {
 1431|  2.45k|                    for o in os {
 1432|  2.45k|                        add_to_triple_or_path_patterns(s.focus.clone(), p.clone(), o, &mut patterns)?;
 1433|  2.45k|                    }
 1434|  2.45k|                }
 1435|  2.45k|                Ok(patterns)
 1436|  2.45k|            }
 1437|  2.45k|
 1438|  2.45k|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
 1439|  2.45k|            PropertyListPathNotEmpty() /
 1440|  2.45k|            { FocusedTripleOrPathPattern::default() }
 1441|  2.45k|
 1442|  2.45k|        rule PropertyListPathNotEmpty() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = hp:(VerbPath() / VerbSimple()) _ ho:ObjectListPath() _ t:PropertyListPathNotEmpty_item()* {
 1443|  2.45k|                t.into_iter().flatten().fold(FocusedTripleOrPathPattern {
 1444|  2.45k|                    focus: vec![(hp, ho.focus)],
 1445|  2.45k|                    patterns: ho.patterns
 1446|  2.45k|                }, |mut a, b| {
 1447|  2.45k|                    a.focus.push(b.focus);
 1448|  2.45k|                    a.patterns.extend(b.patterns);
 1449|  2.45k|                    a
 1450|  2.45k|                })
 1451|  2.45k|        }
 1452|  2.45k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
 1453|  2.45k|            c
 1454|  2.45k|        }
 1455|  2.45k|        rule PropertyListPathNotEmpty_item_content() -> FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)> = p:(VerbPath() / VerbSimple()) _ o:ObjectListPath() _ {
 1456|  2.45k|            FocusedTripleOrPathPattern {
 1457|  2.45k|                focus: (p, o.focus.into_iter().map(AnnotatedTermPath::from).collect()),
 1458|  2.45k|                patterns: o.patterns
 1459|  2.45k|            }
 1460|  2.45k|        }
 1461|  2.45k|
 1462|  2.45k|        rule VerbPath() -> VariableOrPropertyPath = p:Path() {
 1463|  2.45k|            p.into()
 1464|  2.45k|        }
 1465|  2.45k|
 1466|  2.45k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
 1467|  2.45k|            v.into()
 1468|  2.45k|        }
 1469|  2.45k|
 1470|  2.45k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
 1471|  2.45k|            o.into_iter().fold(FocusedTripleOrPathPattern::<Vec<AnnotatedTermPath>>::default(), |mut a, b| {
 1472|  2.45k|                a.focus.push(b.focus);
 1473|  2.45k|                a.patterns.extend(b.patterns);
 1474|  2.45k|                a
 1475|  2.45k|            })
 1476|  2.45k|        }
 1477|  2.45k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
 1478|  2.45k|
 1479|  2.45k|        rule ObjectPath() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = g:GraphNodePath() _ a:AnnotationPath()? {
 1480|  2.45k|             if let Some(a) = a {
 1481|  2.45k|                let mut patterns = g.patterns;
 1482|  2.45k|                patterns.extend(a.patterns);
 1483|  2.45k|                FocusedTripleOrPathPattern {
 1484|  2.45k|                    focus: AnnotatedTermPath {
 1485|  2.45k|                        term: g.focus,
 1486|  2.45k|                        annotations: a.focus
 1487|  2.45k|                    },
 1488|  2.45k|                    patterns
 1489|  2.45k|                }
 1490|  2.45k|            } else {
 1491|  2.45k|                FocusedTripleOrPathPattern {
 1492|  2.45k|                    focus: AnnotatedTermPath {
 1493|  2.45k|                        term: g.focus,
 1494|  2.45k|                        annotations: Vec::new()
 1495|  2.45k|                    },
 1496|  2.45k|                    patterns: g.patterns
 1497|  2.45k|                }
 1498|  2.45k|            }
 1499|  2.45k|        }
 1500|  2.45k|
 1501|  2.45k|        rule Path() -> PropertyPathExpression = PathAlternative()
 1502|  2.45k|
 1503|  2.45k|        rule PathAlternative() -> PropertyPathExpression = p:PathAlternative_item() **<1,> ("|" _) {?
 1504|  2.45k|            not_empty_fold(p.into_iter(), |a, b| {
 1505|  2.45k|                PropertyPathExpression::Alternative(Box::new(a), Box::new(b))
 1506|  2.45k|            })
 1507|  2.45k|        }
 1508|  2.45k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
 1509|  2.45k|
 1510|  2.45k|        rule PathSequence() -> PropertyPathExpression = p:PathSequence_item() **<1,> ("/" _) {?
 1511|  2.45k|            not_empty_fold(p.into_iter(), |a, b| {
 1512|  2.45k|                PropertyPathExpression::Sequence(Box::new(a), Box::new(b))
 1513|  2.45k|            })
 1514|  2.45k|        }
 1515|  2.45k|        rule PathSequence_item() -> PropertyPathExpression = p:PathEltOrInverse() _ { p }
 1516|  2.45k|
 1517|  2.45k|        rule PathElt() -> PropertyPathExpression = p:PathPrimary() _ o:PathElt_op()? {
 1518|  2.45k|            match o {
 1519|  2.45k|                Some('?') => PropertyPathExpression::ZeroOrOne(Box::new(p)),
 1520|  2.45k|                Some('*') => PropertyPathExpression::ZeroOrMore(Box::new(p)),
 1521|  2.45k|                Some('+') => PropertyPathExpression::OneOrMore(Box::new(p)),
 1522|  2.45k|                Some(_) => unreachable!(),
 1523|  2.45k|                None => p
 1524|  2.45k|            }
 1525|  2.45k|        }
 1526|  2.45k|        rule PathElt_op() -> char =
 1527|  2.45k|            "*" { '*' } /
 1528|  2.45k|            "+" { '+' } /
 1529|  2.45k|            "?" !(['0'..='9'] / PN_CHARS_U()) { '?' } // We mandate that this is not a variable
 1530|  2.45k|
 1531|  2.45k|        rule PathEltOrInverse() -> PropertyPathExpression =
 1532|  2.45k|            "^" _ p:PathElt() { PropertyPathExpression::Reverse(Box::new(p)) } /
 1533|  2.45k|            PathElt()
 1534|  2.45k|
 1535|  2.45k|        rule PathPrimary() -> PropertyPathExpression =
 1536|  2.45k|            v:iri() { v.into() } /
 1537|  2.45k|            "a" { rdf::TYPE.into_owned().into() } /
 1538|  2.45k|            "!" _ p:PathNegatedPropertySet() { p } /
 1539|  2.45k|            "(" _ p:Path() _ ")" { p }
 1540|  2.45k|
 1541|  2.45k|        rule PathNegatedPropertySet() -> PropertyPathExpression =
 1542|  2.45k|            "(" _ p:PathNegatedPropertySet_item() **<1,> ("|" _) ")" {
 1543|  2.45k|                let mut direct = Vec::new();
 1544|  2.45k|                let mut inverse = Vec::new();
 1545|  2.45k|                for e in p {
 1546|  2.45k|                    match e {
 1547|  2.45k|                        Either::Left(a) => direct.push(a),
 1548|  2.45k|                        Either::Right(b) => inverse.push(b)
 1549|  2.45k|                    }
 1550|  2.45k|                }
 1551|  2.45k|                if inverse.is_empty() {
 1552|  2.45k|                    PropertyPathExpression::NegatedPropertySet(direct)
 1553|  2.45k|                } else if direct.is_empty() {
 1554|  2.45k|                   PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse)))
 1555|  2.45k|                } else {
 1556|  2.45k|                    PropertyPathExpression::Alternative(
 1557|  2.45k|                        Box::new(PropertyPathExpression::NegatedPropertySet(direct)),
 1558|  2.45k|                        Box::new(PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(inverse))))
 1559|  2.45k|                    )
 1560|  2.45k|                }
 1561|  2.45k|            } /
 1562|  2.45k|            p:PathOneInPropertySet() {
 1563|  2.45k|                match p {
 1564|  2.45k|                    Either::Left(a) => PropertyPathExpression::NegatedPropertySet(vec![a]),
 1565|  2.45k|                    Either::Right(b) => PropertyPathExpression::Reverse(Box::new(PropertyPathExpression::NegatedPropertySet(vec![b]))),
 1566|  2.45k|                }
 1567|  2.45k|            }
 1568|  2.45k|        rule PathNegatedPropertySet_item() -> Either<NamedNode,NamedNode> = p:PathOneInPropertySet() _ { p }
 1569|  2.45k|
 1570|  2.45k|        rule PathOneInPropertySet() -> Either<NamedNode,NamedNode> =
 1571|  2.45k|            "^" _ v:iri() { Either::Right(v) } /
 1572|  2.45k|            "^" _ "a" { Either::Right(rdf::TYPE.into()) } /
 1573|  2.45k|            v:iri() { Either::Left(v) } /
 1574|  2.45k|            "a" { Either::Left(rdf::TYPE.into()) }
 1575|  2.45k|
 1576|  2.45k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
 1577|  2.45k|
 1578|  2.45k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
 1579|  2.45k|            let mut patterns = po.patterns;
 1580|  2.45k|            let mut bnode = TermPattern::from(BlankNode::default());
 1581|  2.45k|            for (p, os) in po.focus {
 1582|  2.45k|                for o in os {
 1583|  2.45k|                    add_to_triple_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1584|  2.45k|                }
 1585|  2.45k|            }
 1586|  2.45k|            Ok(FocusedTriplePattern {
 1587|  2.45k|                focus: bnode,
 1588|  2.45k|                patterns
 1589|  2.45k|            })
 1590|  2.45k|        }
 1591|  2.45k|
 1592|  2.45k|        rule TriplesNodePath() -> FocusedTripleOrPathPattern<TermPattern> = CollectionPath() / BlankNodePropertyListPath()
 1593|  2.45k|
 1594|  2.45k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
 1595|  2.45k|            let mut patterns = po.patterns;
 1596|  2.45k|            let mut bnode = TermPattern::from(BlankNode::default());
 1597|  2.45k|            for (p, os) in po.focus {
 1598|  2.45k|                for o in os {
 1599|  2.45k|                    add_to_triple_or_path_patterns(bnode.clone(), p.clone(), o, &mut patterns)?;
 1600|  2.45k|                }
 1601|  2.45k|            }
 1602|  2.45k|            Ok(FocusedTripleOrPathPattern {
 1603|  2.45k|                focus: bnode,
 1604|  2.45k|                patterns
 1605|  2.45k|            })
 1606|  2.45k|        }
 1607|  2.45k|
 1608|  2.45k|        rule Collection() -> FocusedTriplePattern<TermPattern> = "(" _ o:Collection_item()+ ")" {
 1609|  2.45k|            let mut patterns: Vec<TriplePattern> = Vec::new();
 1610|  2.45k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1611|  2.45k|            for objWithPatterns in o.into_iter().rev() {
 1612|  2.45k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1613|  2.45k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()));
 1614|  2.45k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node));
 1615|  2.45k|                current_list_node = new_blank_node;
 1616|  2.45k|                patterns.extend_from_slice(&objWithPatterns.patterns);
 1617|  2.45k|            }
 1618|  2.45k|            FocusedTriplePattern {
 1619|  2.45k|                focus: current_list_node,
 1620|  2.45k|                patterns
 1621|  2.45k|            }
 1622|  2.45k|        }
 1623|  2.45k|        rule Collection_item() -> FocusedTriplePattern<TermPattern> = o:GraphNode() _ { o }
 1624|  2.45k|
 1625|  2.45k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
 1626|  2.45k|            let mut patterns: Vec<TripleOrPathPattern> = Vec::new();
 1627|  2.45k|            let mut current_list_node = TermPattern::from(rdf::NIL.into_owned());
 1628|  2.45k|            for objWithPatterns in o.into_iter().rev() {
 1629|  2.45k|                let new_blank_node = TermPattern::from(BlankNode::default());
 1630|  2.45k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::FIRST.into_owned(), objWithPatterns.focus.clone()).into());
 1631|  2.45k|                patterns.push(TriplePattern::new(new_blank_node.clone(), rdf::REST.into_owned(), current_list_node).into());
 1632|  2.45k|                current_list_node = new_blank_node;
 1633|  2.45k|                patterns.extend(objWithPatterns.patterns);
 1634|  2.45k|            }
 1635|  2.45k|            FocusedTripleOrPathPattern {
 1636|  2.45k|                focus: current_list_node,
 1637|  2.45k|                patterns
 1638|  2.45k|            }
 1639|  2.45k|        }
 1640|  2.45k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
 1641|  2.45k|
 1642|  2.45k|
 1643|  2.45k|        rule Annotation() -> FocusedTriplePattern<Vec<(NamedNodePattern,Vec<AnnotatedTerm>)>> = "{|" _ a:PropertyListNotEmpty() _ "|}" { a }
 1644|  2.45k|
 1645|  2.45k|        rule AnnotationPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = "{|" _ a: PropertyListPathNotEmpty() _ "|}" { a }
 1646|  2.45k|
 1647|  2.45k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
 1648|  2.45k|            t:VarOrTerm() { FocusedTriplePattern::new(t) } /
 1649|  2.45k|            TriplesNode()
 1650|  2.45k|
 1651|  2.45k|        rule GraphNodePath() -> FocusedTripleOrPathPattern<TermPattern> =
 1652|  2.45k|            t:VarOrTerm() { FocusedTripleOrPathPattern::new(t) } /
 1653|  2.45k|            TriplesNodePath()
 1654|  2.45k|
 1655|  2.45k|        rule VarOrTerm() -> TermPattern =
 1656|  2.45k|            v:Var() { v.into() } /
 1657|  2.45k|            t:QuotedTriple() {?
 1658|  2.45k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1659|  2.45k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1660|  2.45k|            } /
 1661|  2.45k|            t:GraphTerm() { t.into() }
 1662|  2.45k|
 1663|  2.45k|        rule QuotedTriple() -> TriplePattern = "<<" _ s:VarOrTerm() _ p:Verb() _ o:VarOrTerm() _ ">>" {?
 1664|  2.45k|            Ok(TriplePattern {
 1665|  2.45k|                subject: s,
 1666|  2.45k|                predicate: p,
 1667|  2.45k|                object: o
 1668|  2.45k|            })
 1669|  2.45k|        }
 1670|  2.45k|
 1671|  2.45k|        rule QuotedTripleData() -> GroundTriple = "<<" _ s:DataValueTerm() _ p:QuotedTripleData_p() _ o:DataValueTerm() _ ">>" {?
 1672|  2.45k|            Ok(GroundTriple {
 1673|  2.45k|                subject: s.try_into().map_err(|()| "Literals are not allowed in subject position of nested patterns")?,
 1674|  2.45k|                predicate: p,
 1675|  2.45k|                object: o
 1676|  2.45k|            })
 1677|  2.45k|        }
 1678|  2.45k|        rule QuotedTripleData_p() -> NamedNode = i: iri() { i } / "a" { rdf::TYPE.into() }
 1679|  2.45k|
 1680|  2.45k|        rule DataValueTerm() -> GroundTerm = i:iri() { i.into() } /
 1681|  2.45k|            l:RDFLiteral() { l.into() } /
 1682|  2.45k|            l:NumericLiteral() { l.into() } /
 1683|  2.45k|            l:BooleanLiteral() { l.into() } /
 1684|  2.45k|            t:QuotedTripleData() {?
 1685|  2.45k|                #[cfg(feature = "rdf-star")]{Ok(t.into())}
 1686|  2.45k|                #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1687|  2.45k|            }
 1688|  2.45k|
 1689|  2.45k|        rule VarOrIri() -> NamedNodePattern =
 1690|  2.45k|            v:Var() { v.into() } /
 1691|  2.45k|            i:iri() { i.into() }
 1692|  2.45k|
 1693|  2.45k|        rule Var() -> Variable = name:(VAR1() / VAR2()) { Variable::new_unchecked(name) }
 1694|  2.45k|
 1695|  2.45k|        rule GraphTerm() -> Term =
 1696|  2.45k|            i:iri() { i.into() } /
 1697|  2.45k|            l:RDFLiteral() { l.into() } /
 1698|  2.45k|            l:NumericLiteral() { l.into() } /
 1699|  2.45k|            l:BooleanLiteral() { l.into() } /
 1700|  2.45k|            b:BlankNode() { b.into() } /
 1701|  2.45k|            NIL() { rdf::NIL.into_owned().into() }
 1702|  2.45k|
 1703|  2.45k|        rule Expression() -> Expression = e:ConditionalOrExpression() {e}
 1704|  2.45k|
 1705|  2.45k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?
 1706|  2.45k|            not_empty_fold(e.into_iter(), |a, b| Expression::Or(Box::new(a), Box::new(b)))
 1707|  2.45k|        }
 1708|  2.45k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
 1709|  2.45k|
 1710|  2.45k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
 1711|  2.45k|            not_empty_fold(e.into_iter(), |a, b| Expression::And(Box::new(a), Box::new(b)))
 1712|  2.45k|        }
 1713|  2.45k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
 1714|  2.45k|
 1715|  2.45k|        rule ValueLogical() -> Expression = RelationalExpression()
 1716|  2.45k|
 1717|  2.45k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
 1718|  2.45k|            Some(("=", Some(b), None)) => Expression::Equal(Box::new(a), Box::new(b)),
 1719|  2.45k|            Some(("!=", Some(b), None)) => Expression::Not(Box::new(Expression::Equal(Box::new(a), Box::new(b)))),
 1720|  2.45k|            Some((">", Some(b), None)) => Expression::Greater(Box::new(a), Box::new(b)),
 1721|  2.45k|            Some((">=", Some(b), None)) => Expression::GreaterOrEqual(Box::new(a), Box::new(b)),
 1722|  2.45k|            Some(("<", Some(b), None)) => Expression::Less(Box::new(a), Box::new(b)),
 1723|  2.45k|            Some(("<=", Some(b), None)) => Expression::LessOrEqual(Box::new(a), Box::new(b)),
 1724|  2.45k|            Some(("IN", None, Some(l))) => Expression::In(Box::new(a), l),
 1725|  2.45k|            Some(("NOT IN", None, Some(l))) => Expression::Not(Box::new(Expression::In(Box::new(a), l))),
 1726|  2.45k|            Some(_) => unreachable!(),
 1727|  2.45k|            None => a
 1728|  2.45k|        } }
 1729|  2.45k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
 1730|  2.45k|            s: $("="  / "!=" / ">=" / ">" / "<=" / "<") _ e:NumericExpression() { (s, Some(e), None) } /
 1731|  2.45k|            i("IN") _ l:ExpressionList() { ("IN", None, Some(l)) } /
 1732|  2.45k|            i("NOT") _ i("IN") _ l:ExpressionList() { ("NOT IN", None, Some(l)) }
 1733|  2.45k|
 1734|  2.45k|        rule NumericExpression() -> Expression = AdditiveExpression()
 1735|  2.45k|
 1736|  2.45k|        rule AdditiveExpression() -> Expression = a:MultiplicativeExpression() _ o:AdditiveExpression_inner()? { match o {
 1737|  2.45k|            Some(("+", b)) => Expression::Add(Box::new(a), Box::new(b)),
 1738|  2.45k|            Some(("-", b)) => Expression::Subtract(Box::new(a), Box::new(b)),
 1739|  2.45k|            Some(_) => unreachable!(),
 1740|  2.45k|            None => a,
 1741|  2.45k|        } }
 1742|  2.45k|        rule AdditiveExpression_inner() -> (&'input str, Expression) = s: $("+" / "-") _ e:AdditiveExpression() {
 1743|  2.45k|            (s, e)
 1744|  2.45k|        }
 1745|  2.45k|
 1746|  2.45k|        rule MultiplicativeExpression() -> Expression = a:UnaryExpression() _ o: MultiplicativeExpression_inner()? { match o {
 1747|  2.45k|            Some(("*", b)) => Expression::Multiply(Box::new(a), Box::new(b)),
 1748|  2.45k|            Some(("/", b)) => Expression::Divide(Box::new(a), Box::new(b)),
 1749|  2.45k|            Some(_) => unreachable!(),
 1750|  2.45k|            None => a
 1751|  2.45k|        } }
 1752|  2.45k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
 1753|  2.45k|            (s, e)
 1754|  2.45k|        }
 1755|  2.45k|
 1756|  2.45k|        rule UnaryExpression() -> Expression = s: $("!" / "+" / "-")? _ e:PrimaryExpression() { match s {
 1757|  2.45k|            Some("!") => Expression::Not(Box::new(e)),
 1758|  2.45k|            Some("+") => Expression::UnaryPlus(Box::new(e)),
 1759|  2.45k|            Some("-") => Expression::UnaryMinus(Box::new(e)),
 1760|  2.45k|            Some(_) => unreachable!(),
 1761|  2.45k|            None => e,
 1762|  2.45k|        } }
 1763|  2.45k|
 1764|  2.45k|        rule PrimaryExpression() -> Expression =
 1765|  2.45k|            BrackettedExpression()  /
 1766|  2.45k|            ExprQuotedTriple() /
 1767|  2.45k|            iriOrFunction() /
 1768|  2.45k|            v:Var() { v.into() } /
 1769|  2.45k|            l:RDFLiteral() { l.into() } /
 1770|  2.45k|            l:NumericLiteral() { l.into() } /
 1771|  2.45k|            l:BooleanLiteral() { l.into() } /
 1772|  2.45k|            BuiltInCall()
 1773|  2.45k|
 1774|  2.45k|        rule ExprVarOrTerm() -> Expression =
 1775|  2.45k|            ExprQuotedTriple() /
 1776|  2.45k|            i:iri() { i.into() } /
 1777|  2.45k|            l:RDFLiteral() { l.into() } /
 1778|  2.45k|            l:NumericLiteral() { l.into() } /
 1779|  2.45k|            l:BooleanLiteral() { l.into() } /
 1780|  2.45k|            v:Var() { v.into() }
 1781|  2.45k|
 1782|  2.45k|        rule ExprQuotedTriple() -> Expression = "<<" _ s:ExprVarOrTerm() _ p:Verb() _ o:ExprVarOrTerm() _ ">>" {?
 1783|  2.45k|            #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p.into(), o]))}
 1784|  2.45k|            #[cfg(not(feature = "rdf-star"))]{Err("Embedded triples are only available in SPARQL-star")}
 1785|  2.45k|        }
 1786|  2.45k|
 1787|  2.45k|        rule BrackettedExpression() -> Expression = "(" _ e:Expression() _ ")" { e }
 1788|  2.45k|
 1789|  2.45k|        rule BuiltInCall() -> Expression =
 1790|  2.45k|            a:Aggregate() {? state.new_aggregation(a).map(Into::into) } /
 1791|  2.45k|            i("STR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Str, vec![e]) } /
 1792|  2.45k|            i("LANG") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Lang, vec![e]) } /
 1793|  2.45k|            i("LANGMATCHES") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::LangMatches, vec![a, b]) } /
 1794|  2.45k|            i("DATATYPE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Datatype, vec![e]) } /
 1795|  2.45k|            i("BOUND") _ "(" _ v:Var() _ ")" { Expression::Bound(v) } /
 1796|  2.45k|            (i("IRI") / i("URI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Iri, vec![e]) } /
 1797|  2.45k|            i("BNODE") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::BNode, vec![e]) } /
 1798|  2.45k|            i("BNODE") NIL() { Expression::FunctionCall(Function::BNode, vec![]) }  /
 1799|  2.45k|            i("RAND") _ NIL() { Expression::FunctionCall(Function::Rand, vec![]) } /
 1800|  2.45k|            i("ABS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Abs, vec![e]) } /
 1801|  2.45k|            i("CEIL") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Ceil, vec![e]) } /
 1802|  2.45k|            i("FLOOR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Floor, vec![e]) } /
 1803|  2.45k|            i("ROUND") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Round, vec![e]) } /
 1804|  2.45k|            i("CONCAT") e:ExpressionList() { Expression::FunctionCall(Function::Concat, e) } /
 1805|  2.45k|            SubstringExpression() /
 1806|  2.45k|            i("STRLEN") _ "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::StrLen, vec![e]) } /
 1807|  2.45k|            StrReplaceExpression() /
 1808|  2.45k|            i("UCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::UCase, vec![e]) } /
 1809|  2.45k|            i("LCASE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::LCase, vec![e]) } /
 1810|  2.45k|            i("ENCODE_FOR_URI") "(" _ e: Expression() _ ")" { Expression::FunctionCall(Function::EncodeForUri, vec![e]) } /
 1811|  2.45k|            i("CONTAINS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Contains, vec![a, b]) } /
 1812|  2.45k|            i("STRSTARTS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrStarts, vec![a, b]) } /
 1813|  2.45k|            i("STRENDS") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrEnds, vec![a, b]) } /
 1814|  2.45k|            i("STRBEFORE") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrBefore, vec![a, b]) } /
 1815|  2.45k|            i("STRAFTER") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrAfter, vec![a, b]) } /
 1816|  2.45k|            i("YEAR") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Year, vec![e]) } /
 1817|  2.45k|            i("MONTH") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Month, vec![e]) } /
 1818|  2.45k|            i("DAY") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Day, vec![e]) } /
 1819|  2.45k|            i("HOURS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Hours, vec![e]) } /
 1820|  2.45k|            i("MINUTES") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Minutes, vec![e]) } /
 1821|  2.45k|            i("SECONDS") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Seconds, vec![e]) } /
 1822|  2.45k|            i("TIMEZONE") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Timezone, vec![e]) } /
 1823|  2.45k|            i("TZ") _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Tz, vec![e]) } /
 1824|  2.45k|            i("NOW") _ NIL() { Expression::FunctionCall(Function::Now, vec![]) } /
 1825|  2.45k|            i("UUID") _ NIL() { Expression::FunctionCall(Function::Uuid, vec![]) }/
 1826|  2.45k|            i("STRUUID") _ NIL() { Expression::FunctionCall(Function::StrUuid, vec![]) } /
 1827|  2.45k|            i("MD5") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Md5, vec![e]) } /
 1828|  2.45k|            i("SHA1") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha1, vec![e]) } /
 1829|  2.45k|            i("SHA256") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha256, vec![e]) } /
 1830|  2.45k|            i("SHA384") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha384, vec![e]) } /
 1831|  2.45k|            i("SHA512") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::Sha512, vec![e]) } /
 1832|  2.45k|            i("COALESCE") e:ExpressionList() { Expression::Coalesce(e) } /
 1833|  2.45k|            i("IF") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::If(Box::new(a), Box::new(b), Box::new(c)) } /
 1834|  2.45k|            i("STRLANG") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrLang, vec![a, b]) }  /
 1835|  2.45k|            i("STRDT") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::StrDt, vec![a, b]) } /
 1836|  2.45k|            i("sameTerm") "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::SameTerm(Box::new(a), Box::new(b)) } /
 1837|  2.45k|            (i("isIRI") / i("isURI")) _ "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsIri, vec![e]) } /
 1838|  2.45k|            i("isBLANK") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsBlank, vec![e]) } /
 1839|  2.45k|            i("isLITERAL") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsLiteral, vec![e]) } /
 1840|  2.45k|            i("isNUMERIC") "(" _ e:Expression() _ ")" { Expression::FunctionCall(Function::IsNumeric, vec![e]) } /
 1841|  2.45k|            RegexExpression() /
 1842|  2.45k|            ExistsFunc() /
 1843|  2.45k|            NotExistsFunc() /
 1844|  2.45k|            i("TRIPLE") "(" _ s:Expression() _ "," _ p:Expression() "," _ o:Expression() ")" {?
 1845|  2.45k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Triple, vec![s, p, o]))}
 1846|  2.45k|                #[cfg(not(feature = "rdf-star"))]{Err("The TRIPLE function is only available in SPARQL-star")}
 1847|  2.45k|            } /
 1848|  2.45k|            i("SUBJECT") "(" _ e:Expression() _ ")" {?
 1849|  2.45k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Subject, vec![e]))}
 1850|  2.45k|                #[cfg(not(feature = "rdf-star"))]{Err("The SUBJECT function is only available in SPARQL-star")}
 1851|  2.45k|            } /
 1852|  2.45k|            i("PREDICATE") "(" _ e:Expression() _ ")" {?
 1853|  2.45k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Predicate, vec![e]))}
 1854|  2.45k|                #[cfg(not(feature = "rdf-star"))]{Err("The PREDICATE function is only available in SPARQL-star")}
 1855|  2.45k|            } /
 1856|  2.45k|            i("OBJECT") "(" _ e:Expression() _ ")" {?
 1857|  2.45k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::Object, vec![e]))}
 1858|  2.45k|                #[cfg(not(feature = "rdf-star"))]{Err("The OBJECT function is only available in SPARQL-star")}
 1859|  2.45k|            } /
 1860|  2.45k|            i("isTriple") "(" _ e:Expression() _ ")" {?
 1861|  2.45k|                #[cfg(feature = "rdf-star")]{Ok(Expression::FunctionCall(Function::IsTriple, vec![e]))}
 1862|  2.45k|                #[cfg(not(feature = "rdf-star"))]{Err("The isTriple function is only available in SPARQL-star")}
 1863|  2.45k|            } /
 1864|  2.45k|            i("ADJUST") "("  _ a:Expression() _ "," _ b:Expression() _ ")" {?
 1865|  2.45k|                #[cfg(feature = "sep-0002")]{Ok(Expression::FunctionCall(Function::Adjust, vec![a, b]))}
 1866|  2.45k|                #[cfg(not(feature = "sep-0002"))]{Err("The ADJUST function is only available in SPARQL 1.2 SEP 0002")}
 1867|  2.45k|            }
 1868|  2.45k|
 1869|  2.45k|        rule RegexExpression() -> Expression =
 1870|  2.45k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b, c]) } /
 1871|  2.45k|            i("REGEX") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::Regex, vec![a, b]) }
 1872|  2.45k|
 1873|  2.45k|
 1874|  2.45k|        rule SubstringExpression() -> Expression =
 1875|  2.45k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b, c]) } /
 1876|  2.45k|            i("SUBSTR") _ "(" _ a:Expression() _ "," _ b:Expression() _ ")" { Expression::FunctionCall(Function::SubStr, vec![a, b]) }
 1877|  2.45k|
 1878|  2.45k|
 1879|  2.45k|        rule StrReplaceExpression() -> Expression =
 1880|  2.45k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ "," _ d:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c, d]) } /
 1881|  2.45k|            i("REPLACE") _ "(" _ a:Expression() _ "," _ b:Expression() _ "," _ c:Expression() _ ")" { Expression::FunctionCall(Function::Replace, vec![a, b, c]) }
 1882|  2.45k|
 1883|  2.45k|        rule ExistsFunc() -> Expression = i("EXISTS") _ p:GroupGraphPattern() { Expression::Exists(Box::new(p)) }
 1884|  2.45k|
 1885|  2.45k|        rule NotExistsFunc() -> Expression = i("NOT") _ i("EXISTS") _ p:GroupGraphPattern() { Expression::Not(Box::new(Expression::Exists(Box::new(p)))) }
 1886|  2.45k|
 1887|  2.45k|        rule Aggregate() -> AggregateExpression =
 1888|  2.45k|            i("COUNT") _ "(" _ i("DISTINCT") _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: true } } /
 1889|  2.45k|            i("COUNT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: true } } /
 1890|  2.45k|            i("COUNT") _ "(" _ "*" _ ")" { AggregateExpression::CountSolutions { distinct: false } } /
 1891|  2.45k|            i("COUNT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Count, expr, distinct: false } } /
 1892|  2.45k|            i("SUM") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: true } } /
 1893|  2.45k|            i("SUM") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sum, expr, distinct: false } } /
 1894|  2.45k|            i("MIN") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: true } } /
 1895|  2.45k|            i("MIN") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Min, expr, distinct: false } } /
 1896|  2.45k|            i("MAX") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: true } } /
 1897|  2.45k|            i("MAX") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Max, expr, distinct: false } } /
 1898|  2.45k|            i("AVG") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: true } } /
 1899|  2.45k|            i("AVG") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Avg, expr, distinct: false } } /
 1900|  2.45k|            i("SAMPLE") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: true } } /
 1901|  2.45k|            i("SAMPLE") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Sample, expr, distinct: false } } /
 1902|  2.45k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1903|  2.45k|            i("GROUP_CONCAT") _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: true } } /
 1904|  2.45k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ";" _ i("SEPARATOR") _ "=" _ s:String() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: Some(s) }, expr, distinct: true } } /
 1905|  2.45k|            i("GROUP_CONCAT") _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::GroupConcat { separator: None }, expr, distinct: false } } /
 1906|  2.45k|            name:iri() _ "(" _ i("DISTINCT") _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: true } } /
 1907|  2.45k|            name:iri() _ "(" _ expr:Expression() _ ")" { AggregateExpression::FunctionCall { name: AggregateFunction::Custom(name), expr, distinct: false } }
 1908|  2.45k|
 1909|  2.45k|        rule iriOrFunction() -> Expression = i: iri() _ a: ArgList()? {
 1910|  2.45k|            match a {
 1911|  2.45k|                Some(a) => Expression::FunctionCall(Function::Custom(i), a),
 1912|  2.45k|                None => i.into()
 1913|  2.45k|            }
 1914|  2.45k|        }
 1915|  2.45k|
 1916|  2.45k|        rule RDFLiteral() -> Literal =
 1917|  2.45k|            value:String() _ "^^" _ datatype:iri() { Literal::new_typed_literal(value, datatype) } /
 1918|  2.45k|            value:String() _ language:LANGTAG() { Literal::new_language_tagged_literal_unchecked(value, language.into_inner()) } /
 1919|  2.45k|            value:String() { Literal::new_simple_literal(value) }
 1920|  2.45k|
 1921|  2.45k|        rule NumericLiteral() -> Literal  = NumericLiteralUnsigned() / NumericLiteralPositive() / NumericLiteralNegative()
 1922|  2.45k|
 1923|  2.45k|        rule NumericLiteralUnsigned() -> Literal =
 1924|  2.45k|            d:$(DOUBLE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1925|  2.45k|            d:$(DECIMAL()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1926|  2.45k|            i:$(INTEGER()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1927|  2.45k|
 1928|  2.45k|        rule NumericLiteralPositive() -> Literal =
 1929|  2.45k|            d:$(DOUBLE_POSITIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1930|  2.45k|            d:$(DECIMAL_POSITIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1931|  2.45k|            i:$(INTEGER_POSITIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1932|  2.45k|
 1933|  2.45k|
 1934|  2.45k|        rule NumericLiteralNegative() -> Literal =
 1935|  2.45k|            d:$(DOUBLE_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DOUBLE) } /
 1936|  2.45k|            d:$(DECIMAL_NEGATIVE()) { Literal::new_typed_literal(d, xsd::DECIMAL) } /
 1937|  2.45k|            i:$(INTEGER_NEGATIVE()) { Literal::new_typed_literal(i, xsd::INTEGER) }
 1938|  2.45k|
 1939|  2.45k|        rule BooleanLiteral() -> Literal =
 1940|  2.45k|            "true" { Literal::new_typed_literal("true", xsd::BOOLEAN) } /
 1941|  2.45k|            "false" { Literal::new_typed_literal("false", xsd::BOOLEAN) }
 1942|  2.45k|
 1943|  2.45k|        rule String() -> String = STRING_LITERAL_LONG1() / STRING_LITERAL_LONG2() / STRING_LITERAL1() / STRING_LITERAL2()
 1944|  2.45k|
 1945|  2.45k|        rule iri() -> NamedNode = i:(IRIREF() / PrefixedName()) {
 1946|  2.45k|            NamedNode::from(i)
 1947|  2.45k|        }
 1948|  2.45k|
 1949|  2.45k|        rule PrefixedName() -> Iri<String> = PNAME_LN() /
 1950|  2.45k|            ns:PNAME_NS() {? if let Some(iri) = state.namespaces.get(ns).cloned() {
 1951|  2.45k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1952|  2.45k|            } else {
 1953|  2.45k|                Err("Prefix not found")
 1954|  2.45k|            } }
 1955|  2.45k|
 1956|  2.45k|        rule BlankNode() -> BlankNode = id:BLANK_NODE_LABEL() {?
 1957|  2.45k|            let node = BlankNode::new_unchecked(id);
 1958|  2.45k|            if state.used_bnodes.contains(&node) {
 1959|  2.45k|                Err("Already used blank node id")
 1960|  2.45k|            } else {
 1961|  2.45k|                state.currently_used_bnodes.insert(node.clone());
 1962|  2.45k|                Ok(node)
 1963|  2.45k|            }
 1964|  2.45k|        } / ANON() { BlankNode::default() }
 1965|  2.45k|
 1966|  2.45k|        rule IRIREF() -> Iri<String> = "<" i:$((!['>'] [_])*) ">" {?
 1967|  2.45k|            state.parse_iri(unescape_iriref(i)?).map_err(|_| "IRI parsing failed")
 1968|  2.45k|        }
 1969|  2.45k|
 1970|  2.45k|        rule PNAME_NS() -> &'input str = ns:$(PN_PREFIX()?) ":" {
 1971|  2.45k|            ns
 1972|  2.45k|        }
 1973|  2.45k|
 1974|  2.45k|        rule PNAME_LN() -> Iri<String> = ns:PNAME_NS() local:$(PN_LOCAL()) {?
 1975|  2.45k|            if let Some(base) = state.namespaces.get(ns) {
 1976|  2.45k|                let mut iri = String::with_capacity(base.len() + local.len());
 1977|  2.45k|                iri.push_str(base);
 1978|  2.45k|                for chunk in local.split('\\') { // We remove \
 1979|  2.45k|                    iri.push_str(chunk);
 1980|  2.45k|                }
 1981|  2.45k|                Iri::parse(iri).map_err(|_| "IRI parsing failed")
 1982|  2.45k|            } else {
 1983|  2.45k|                Err("Prefix not found")
 1984|  2.45k|            }
 1985|  2.45k|        }
 1986|  2.45k|
 1987|  2.45k|        rule BLANK_NODE_LABEL() -> &'input str = "_:" b:$((['0'..='9'] / PN_CHARS_U()) PN_CHARS()* ("."+ PN_CHARS()+)*) {
 1988|  2.45k|            b
 1989|  2.45k|        }
 1990|  2.45k|
 1991|  2.45k|        rule VAR1() -> &'input str = "?" v:$(VARNAME()) { v }
 1992|  2.45k|
 1993|  2.45k|        rule VAR2() -> &'input str = "$" v:$(VARNAME()) { v }
 1994|  2.45k|
 1995|  2.45k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
 1996|  2.45k|            LanguageTag::parse(l.to_ascii_lowercase()).map_err(|_| "language tag parsing failed")
 1997|  2.45k|        }
 1998|  2.45k|
 1999|  2.45k|        rule INTEGER() = ['0'..='9']+
 2000|  2.45k|
 2001|  2.45k|        rule DECIMAL() = ['0'..='9']* "." ['0'..='9']+
 2002|  2.45k|
 2003|  2.45k|        rule DOUBLE() = (['0'..='9']+ "." ['0'..='9']* / "." ['0'..='9']+ / ['0'..='9']+) EXPONENT()
 2004|  2.45k|
 2005|  2.45k|        rule INTEGER_POSITIVE() = "+" _ INTEGER()
 2006|  2.45k|
 2007|  2.45k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
 2008|  2.45k|
 2009|  2.45k|        rule DOUBLE_POSITIVE() = "+" _ DOUBLE()
 2010|  2.45k|
 2011|  2.45k|        rule INTEGER_NEGATIVE() = "-" _ INTEGER()
 2012|  2.45k|
 2013|  2.45k|        rule DECIMAL_NEGATIVE() = "-" _ DECIMAL()
 2014|  2.45k|
 2015|  2.45k|        rule DOUBLE_NEGATIVE() = "-" _ DOUBLE()
 2016|  2.45k|
 2017|  2.45k|        rule EXPONENT() = ['e' | 'E'] ['+' | '-']? ['0'..='9']+
 2018|  2.45k|
 2019|  2.45k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
 2020|  2.45k|             unescape_string(l)
 2021|  2.45k|        }
 2022|  2.45k|        rule STRING_LITERAL1_simple_char() = !['\u{27}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2023|  2.45k|
 2024|  2.45k|
 2025|  2.45k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
 2026|  2.45k|             unescape_string(l)
 2027|  2.45k|        }
 2028|  2.45k|        rule STRING_LITERAL2_simple_char() = !['\u{22}' | '\u{5C}' | '\u{0A}' | '\u{0D}'] [_]
 2029|  2.45k|
 2030|  2.45k|        rule STRING_LITERAL_LONG1() -> String = "'''" l:$(STRING_LITERAL_LONG1_inner()*) "'''" {?
 2031|  2.45k|             unescape_string(l)
 2032|  2.45k|        }
 2033|  2.45k|        rule STRING_LITERAL_LONG1_inner() = ("''" / "'")? (STRING_LITERAL_LONG1_simple_char() / ECHAR() / UCHAR())
 2034|  2.45k|        rule STRING_LITERAL_LONG1_simple_char() = !['\'' | '\\'] [_]
 2035|  2.45k|
 2036|  2.45k|        rule STRING_LITERAL_LONG2() -> String = "\"\"\"" l:$(STRING_LITERAL_LONG2_inner()*) "\"\"\"" {?
 2037|  2.45k|             unescape_string(l)
 2038|  2.45k|        }
 2039|  2.45k|        rule STRING_LITERAL_LONG2_inner() = ("\"\"" / "\"")? (STRING_LITERAL_LONG2_simple_char() / ECHAR() / UCHAR())
 2040|  2.45k|        rule STRING_LITERAL_LONG2_simple_char() = !['"' | '\\'] [_]
 2041|  2.45k|
 2042|  2.45k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
 2043|  2.45k|
 2044|  2.45k|        rule ECHAR() = "\\" ['t' | 'b' | 'n' | 'r' | 'f' | '"' |'\'' | '\\']
 2045|  2.45k|
 2046|  2.45k|        rule NIL() = "(" WS()* ")"
 2047|  2.45k|
 2048|  2.45k|        rule WS() = quiet! { ['\u{20}' | '\u{09}' | '\u{0D}' | '\u{0A}'] }
 2049|  2.45k|
 2050|  2.45k|        rule ANON() = "[" WS()* "]"
 2051|  2.45k|
 2052|  2.45k|        rule PN_CHARS_BASE() = ['A' ..= 'Z' | 'a' ..= 'z' | '\u{00C0}'..='\u{00D6}' | '\u{00D8}'..='\u{00F6}' | '\u{00F8}'..='\u{02FF}' | '\u{0370}'..='\u{037D}' | '\u{037F}'..='\u{1FFF}' | '\u{200C}'..='\u{200D}' | '\u{2070}'..='\u{218F}' | '\u{2C00}'..='\u{2FEF}' | '\u{3001}'..='\u{D7FF}' | '\u{F900}'..='\u{FDCF}' | '\u{FDF0}'..='\u{FFFD}']
 2053|  2.45k|
 2054|  2.45k|        rule PN_CHARS_U() = ['_'] / PN_CHARS_BASE()
 2055|  2.45k|
 2056|  2.45k|        rule VARNAME() = (['0'..='9'] / PN_CHARS_U()) (['0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U())*
 2057|  2.45k|
 2058|  2.45k|        rule PN_CHARS() = ['-' | '0' ..= '9' | '\u{00B7}' | '\u{0300}'..='\u{036F}' | '\u{203F}'..='\u{2040}'] / PN_CHARS_U()
 2059|  2.45k|
 2060|  2.45k|        rule PN_PREFIX() = PN_CHARS_BASE() PN_CHARS()* ("."+ PN_CHARS()+)*
 2061|  2.45k|
 2062|  2.45k|        rule PN_LOCAL() = (PN_CHARS_U() / [':' | '0'..='9'] / PLX()) (PN_CHARS() / [':'] / PLX())* (['.']+ (PN_CHARS() / [':'] / PLX())+)?
 2063|  2.45k|
 2064|  2.45k|        rule PLX() = PERCENT() / PN_LOCAL_ESC()
 2065|  2.45k|
 2066|  2.45k|        rule PERCENT() = ['%'] HEX() HEX()
 2067|  2.45k|
 2068|  2.45k|        rule HEX() = ['0' ..= '9' | 'A' ..= 'F' | 'a' ..= 'f']
 2069|  2.45k|
 2070|  2.45k|        rule PN_LOCAL_ESC() = ['\\'] ['_' | '~' | '.' | '-' | '!' | '$' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%'] //TODO: added '/' to make tests pass but is it valid?
 2071|  2.45k|
 2072|  2.45k|        //space
 2073|  2.45k|        rule _() = quiet! { ([' ' | '\t' | '\n' | '\r'] / comment())* }
 2074|  2.45k|
 2075|  2.45k|        //comment
 2076|  2.45k|        rule comment() = quiet! { ['#'] (!['\r' | '\n'] [_])* }
 2077|  2.45k|
 2078|  2.45k|        rule i(literal: &'static str) = input: $([_]*<{literal.len()}>) {?
 2079|  2.45k|            if input.eq_ignore_ascii_case(literal) {
 2080|  2.45k|                Ok(())
 2081|  2.45k|            } else {
 2082|  2.45k|                Err(literal)
 2083|  2.45k|            }
 2084|  2.45k|        }
 2085|  2.45k|    }
 2086|  2.45k|}
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_HavingClause:
  942|  1.35k|        rule HavingClause() -> Expression = i("HAVING") _ e:HavingCondition()+ {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_SelectClause:
  811|  1.50k|        rule SelectClause() -> Selection = i("SELECT") _ Selection_init() o:SelectClause_option() _ v:SelectClause_variables() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_BooleanLiteral:
 1939|  35.7k|        rule BooleanLiteral() -> Literal =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_ObjectListPath_item:
 1477|  11.4k|        rule ObjectListPath_item() -> FocusedTripleOrPathPattern<AnnotatedTermPath> = o:ObjectPath() _ { o }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_Constraint:
 1322|     29|        rule Constraint() -> Expression = BrackettedExpression() / FunctionCall() / BuiltInCall()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_PathAlternative_item:
 1508|  28.0k|        rule PathAlternative_item() -> PropertyPathExpression = p:PathSequence() _ { p }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_ExpressionList:
 1333|  1.06k|        rule ExpressionList() -> Vec<Expression> =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_TriplesBlock:
 1242|  4.83k|        rule TriplesBlock() -> Vec<TripleOrPathPattern> = hs:TriplesBlock_inner() ++ (".") ("." _)? {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_InlineData:
 1274|  4.25k|        rule InlineData() -> PartialGraphPattern = i("VALUES") _ p:DataBlock() { PartialGraphPattern::Other(p) }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_VerbSimple:
 1466|  7.88k|        rule VerbSimple() -> VariableOrPropertyPath = v:Var() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser15___parse_ArgList:
 1328|    437|        rule ArgList() -> Vec<Expression> =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser37___parse_ConditionalAndExpression_item:
 1713|  2.45k|        rule ConditionalAndExpression_item() -> Expression = e:ValueLogical() _ { e }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_CollectionPath:
 1625|  13.4k|        rule CollectionPath() -> FocusedTripleOrPathPattern<TermPattern> = "(" _ o:CollectionPath_item()+ _ ")" {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser38___parse_MultiplicativeExpression_inner:
 1752|  7.29k|        rule MultiplicativeExpression_inner() -> (&'input str, Expression) = s: $("*" / "/") _ e:MultiplicativeExpression() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser17___parse_GraphNode:
 1647|  14.0k|        rule GraphNode() -> FocusedTriplePattern<TermPattern> =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser36___parse_ConditionalOrExpression_item:
 1708|  2.22k|        rule ConditionalOrExpression_item() -> Expression = e:ConditionalAndExpression() _ { e }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser28___parse_RelationalExpression:
 1717|  2.45k|        rule RelationalExpression() -> Expression = a:NumericExpression() _ o: RelationalExpression_inner()? { match o {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_DeleteWhere:
 1033|  4.42k|        rule DeleteWhere() -> Vec<GraphUpdateOperation> = i("DELETE") _ i("WHERE") _ d:QuadPattern() {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser24___parse_DECIMAL_POSITIVE:
 2007|  35.7k|        rule DECIMAL_POSITIVE() = "+" _ DECIMAL()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_GroupCondition:
  935|    343|        rule GroupCondition() -> (Expression, Option<Variable>) =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_STRING_LITERAL1:
 2019|   119k|        rule STRING_LITERAL1() -> String = "'" l:$((STRING_LITERAL1_simple_char() / ECHAR() / UCHAR())*) "'" {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser18___parse_PrefixDecl:
  795|  2.45k|        rule PrefixDecl() = i("PREFIX") _ ns:PNAME_NS() _ i:IRIREF() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser15___parse_LANGTAG:
 1995|  1.65k|        rule LANGTAG() -> LanguageTag<String> = "@" l:$(['a' ..= 'z' | 'A' ..= 'Z']+ ("-" ['a' ..= 'z' | 'A' ..= 'Z' | '0' ..= '9']+)*) {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_Selection_init:
  817|  1.48k|        rule Selection_init() = {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser13___parse_UCHAR:
 2042|  3.72k|        rule UCHAR() = "\\u" HEX() HEX() HEX() HEX() / "\\U" HEX() HEX() HEX() HEX() HEX() HEX() HEX() HEX()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_SelectClause_member:
  827|  1.90k|        rule SelectClause_member() -> SelectionMember =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_DataBlockValue:
 1296|  4.20k|        rule DataBlockValue() -> Option<GroundTerm> =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_TriplesTemplate:
 1167|  30.6k|        rule TriplesTemplate() -> Vec<TriplePattern> = ts:TriplesTemplate_inner() ++ (".") ("." _)? {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_GroupClause:
  920|  1.35k|        rule GroupClause() -> (Vec<Variable>, Vec<(Expression,Variable)>) = i("GROUP") _ i("BY") _ c:GroupCondition_item()+ {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_Modify:
 1051|  4.09k|        rule Modify() -> Vec<GraphUpdateOperation> = with:Modify_with()? _ Modify_clear() c:Modify_clauses() _ u:(UsingClause() ** (_)) _ i("WHERE") _ pattern:GroupGraphPattern() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser26___parse_TriplesBlock_inner:
 1245|  4.88k|        rule TriplesBlock_inner() -> Vec<TripleOrPathPattern> = _ h:TriplesSameSubjectPath() _ { h }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_Modify_clear:
 1114|  4.09k|        rule Modify_clear() = {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser23___parse_STRING_LITERAL2:
 2025|   119k|        rule STRING_LITERAL2() -> String = "\"" l:$((STRING_LITERAL2_simple_char() / ECHAR() / UCHAR())*) "\"" {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser24___parse_InlineDataOneVar:
 1280|    169|        rule InlineDataOneVar() -> (Vec<Variable>, Vec<Vec<Option<GroundTerm>>>) = var:Var() _ "{" _ d:InlineDataOneVar_value()* "}" {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser29___parse_BlankNodePropertyList:
 1578|  18.4k|        rule BlankNodePropertyList() -> FocusedTriplePattern<TermPattern> = "[" _ po:PropertyListNotEmpty() _ "]" {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_GroundQuadData:
 1151|     59|        rule GroundQuadData() -> Vec<GroundQuad> = "{" _ q:Quads() _ "}" {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser37___parse_PropertyListPathNotEmpty_item:
 1452|  9.03k|        rule PropertyListPathNotEmpty_item() -> Option<FocusedTripleOrPathPattern<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> = ";" _ c:PropertyListPathNotEmpty_item_content()? {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser29___parse_Quads_QuadsNotTriples:
 1161|  16.6k|        rule Quads_QuadsNotTriples() -> Vec<QuadPattern> = q:QuadsNotTriples() _ "."? { q }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser22___parse_ObjectListPath:
 1470|  8.89k|        rule ObjectListPath() -> FocusedTripleOrPathPattern<Vec<AnnotatedTermPath>> = o:ObjectListPath_item() **<1,> ("," _) {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_Modify_with:
 1108|  4.09k|        rule Modify_with() -> NamedNode = i("WITH") _ i:iri() _ { i }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser20___parse_ValueLogical:
 1715|  2.45k|        rule ValueLogical() -> Expression = RelationalExpression()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser33___parse_BlankNodePropertyListPath:
 1594|  12.3k|        rule BlankNodePropertyListPath() -> FocusedTripleOrPathPattern<TermPattern> = "[" _ po:PropertyListPathNotEmpty() _ "]" {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser24___parse_PropertyListPath:
 1438|    516|        rule PropertyListPath() -> FocusedTripleOrPathPattern<Vec<(VariableOrPropertyPath,Vec<AnnotatedTermPath>)>> =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser27___parse_CollectionPath_item:
 1640|  3.27k|        rule CollectionPath_item() -> FocusedTripleOrPathPattern<TermPattern> = p:GraphNodePath() _ { p }
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser32___parse_ConditionalAndExpression:
 1710|  2.22k|        rule ConditionalAndExpression() -> Expression = e:ConditionalAndExpression_item() **<1,> ("&&" _) {?
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser19___parse_TriplesNode:
 1576|  18.4k|        rule TriplesNode() -> FocusedTriplePattern<TermPattern> = Collection() / BlankNodePropertyList()
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser14___parse_Object:
 1395|  14.0k|        rule Object() -> FocusedTriplePattern<AnnotatedTerm> = g:GraphNode() _ a:Annotation()? {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser34___parse_RelationalExpression_inner:
 1729|  1.80k|        rule RelationalExpression_inner() -> (&'input str, Option<Expression>, Option<Vec<Expression>>) =
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser12___parse_Copy:
 1015|  4.88k|        rule Copy() -> Vec<GraphUpdateOperation> = i("COPY") _ silent:Update1_silent() _ from:GraphOrDefault() _ i("TO") _ to:GraphOrDefault() {
_RNvNtNtCskGc5T8eVihK_9spargebra6parser6parser31___parse_ConditionalOrExpression:
 1705|  2.17k|        rule ConditionalOrExpression() -> Expression = e:ConditionalOrExpression_item() **<1,> ("||" _) {?

_RNvXs1L_NtCskGc5T8eVihK_9spargebra4termNtB6_10GroundQuadNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  327|    926|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs26_NtCskGc5T8eVihK_9spargebra4termNtB6_17GroundTermPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  590|  17.4k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2d_NtCskGc5T8eVihK_9spargebra4termNtB6_16GraphNamePatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  703|  10.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1b_NtCskGc5T8eVihK_9spargebra4termNtB6_13GroundSubjectNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
   10|    926|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2y_NtCskGc5T8eVihK_9spargebra4termNtB6_11QuadPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  895|  1.85k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2F_NtCskGc5T8eVihK_9spargebra4termNtB6_17GroundQuadPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  955|  8.70k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1i_NtCskGc5T8eVihK_9spargebra4termNtB6_10GroundTermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
   78|    926|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1S_NtCskGc5T8eVihK_9spargebra4termNtB6_16NamedNodePatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  385|  10.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1w_NtCskGc5T8eVihK_9spargebra4termNtB6_9GraphNameNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  187|  2.21k|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXs1E_NtCskGc5T8eVihK_9spargebra4termNtB6_4QuadNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  252|  1.29k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1Z_NtCskGc5T8eVihK_9spargebra4termNtB6_11TermPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
  438|  3.70k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsD_NtCskGc5T8eVihK_9spargebra4termNtB5_17GroundTermPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtCsd92XLxb96zi_8oxigraph:
  614|  78.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  615|  78.7k|        match self {
  616|  7.42k|            Self::NamedNode(term) => term.fmt(f),
  617|  1.09k|            Self::Literal(term) => term.fmt(f),
  618|  70.2k|            Self::Variable(var) => var.fmt(f),
  619|       |            #[cfg(feature = "rdf-star")]
  620|      0|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  621|       |        }
  622|  78.7k|    }
_RNvXs1S_NtCskGc5T8eVihK_9spargebra4termNtB6_16NamedNodePatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
  385|  2.06k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs26_NtCskGc5T8eVihK_9spargebra4termNtB6_17GroundTermPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
  590|      2|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1Z_NtCskGc5T8eVihK_9spargebra4termNtB6_11TermPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
  438|  9.57k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvXs1T_NtCskGc5T8eVihK_9spargebra4termNtB7_16NamedNodePatternNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsj4YExd6TrWR_7sparopt:
  385|    452|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvXs27_NtCskGc5T8eVihK_9spargebra4termNtB7_17GroundTermPatternNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherECsj4YExd6TrWR_7sparopt:
  590|  1.04k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1i_NtCskGc5T8eVihK_9spargebra4termNtB6_10GroundTermNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsj4YExd6TrWR_7sparopt:
   78|  8.42k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1S_NtCskGc5T8eVihK_9spargebra4termNtB6_16NamedNodePatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsj4YExd6TrWR_7sparopt:
  385|  52.5k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs26_NtCskGc5T8eVihK_9spargebra4termNtB6_17GroundTermPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsj4YExd6TrWR_7sparopt:
  590|  39.4k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsz_NtCskGc5T8eVihK_9spargebra4termNtB5_11TermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_17GroundTermPatternE4fromCsj4YExd6TrWR_7sparopt:
  548|    784|    fn from(element: GroundTermPattern) -> Self {
  549|    784|        match element {
  550|      8|            GroundTermPattern::NamedNode(node) => node.into(),
  551|      0|            GroundTermPattern::Literal(literal) => literal.into(),
  552|       |            #[cfg(feature = "rdf-star")]
  553|      0|            GroundTermPattern::Triple(t) => TriplePattern::from(*t).into(),
  554|    776|            GroundTermPattern::Variable(variable) => variable.into(),
  555|       |        }
  556|    784|    }
_RNvXsP_NtCskGc5T8eVihK_9spargebra4termNtB5_16GraphNamePatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableE4fromB7_:
  741|  2.41k|    fn from(var: Variable) -> Self {
  742|  2.41k|        Self::Variable(var)
  743|  2.41k|    }
_RNvXs4_NtCskGc5T8eVihK_9spargebra4termNtB5_10GroundTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeE4fromB7_:
  104|  3.07k|    fn from(node: NamedNode) -> Self {
  105|  3.07k|        Self::NamedNode(node)
  106|  3.07k|    }
_RNvXsl_NtCskGc5T8eVihK_9spargebra4termNtB5_16NamedNodePatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB7_:
  403|  35.4k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  404|  35.4k|        match self {
  405|  16.3k|            Self::NamedNode(node) => node.fmt(f),
  406|  19.1k|            Self::Variable(var) => var.fmt(f),
  407|       |        }
  408|  35.4k|    }
_RNvXs7_NtCskGc5T8eVihK_9spargebra4termNtB5_10GroundTermINtNtCs9nhK3FOW46N_4core7convert7TryFromNtNtCshJ9d6mhVUZV_5oxrdf6triple4TermE8try_fromB7_:
  128|    938|    fn try_from(term: Term) -> Result<Self, Self::Error> {
  129|    938|        match term {
  130|    447|            Term::NamedNode(t) => Ok(t.into()),
  131|      0|            Term::BlankNode(_) => Err(()),
  132|    491|            Term::Literal(t) => Ok(t.into()),
  133|       |            #[cfg(feature = "rdf-star")]
  134|      0|            Term::Triple(t) => Ok(GroundTriple::try_from(*t)?.into()),
  135|       |        }
  136|    938|    }
_RNvXsL_NtCskGc5T8eVihK_9spargebra4termNtB5_17GroundTermPatternINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_11TermPatternE8try_fromB7_:
  690|  19.8k|    fn try_from(pattern: TermPattern) -> Result<Self, Self::Error> {
  691|  19.8k|        Ok(match pattern {
  692|  9.23k|            TermPattern::NamedNode(named_node) => named_node.into(),
  693|      0|            TermPattern::BlankNode(_) => return Err(()),
  694|  1.01k|            TermPattern::Literal(literal) => literal.into(),
  695|       |            #[cfg(feature = "rdf-star")]
  696|      0|            TermPattern::Triple(triple) => GroundTriplePattern::try_from(*triple)?.into(),
  697|  9.61k|            TermPattern::Variable(variable) => variable.into(),
  698|       |        })
  699|  19.8k|    }
_RNvXsO_NtCskGc5T8eVihK_9spargebra4termNtB5_16GraphNamePatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeE4fromB7_:
  734|  10.9k|    fn from(node: NamedNode) -> Self {
  735|  10.9k|        Self::NamedNode(node)
  736|  10.9k|    }
_RNvXsR_NtCskGc5T8eVihK_9spargebra4termNtB5_16GraphNamePatternINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_16NamedNodePatternE4fromB7_:
  758|  12.1k|    fn from(graph_name: NamedNodePattern) -> Self {
  759|  12.1k|        match graph_name {
  760|  9.77k|            NamedNodePattern::NamedNode(node) => node.into(),
  761|  2.41k|            NamedNodePattern::Variable(var) => var.into(),
  762|       |        }
  763|  12.1k|    }
_RNvXs1u_NtCskGc5T8eVihK_9spargebra4termNtB6_9GraphNameNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB8_:
  187|    848|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXsF_NtCskGc5T8eVihK_9spargebra4termNtB5_17GroundTermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf7literal7LiteralE4fromB7_:
  634|  2.10k|    fn from(literal: Literal) -> Self {
  635|  2.10k|        Self::Literal(literal)
  636|  2.10k|    }
_RNvXsq_NtCskGc5T8eVihK_9spargebra4termNtB5_11TermPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB7_:
  464|    784|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  465|    784|        match self {
  466|      8|            Self::NamedNode(term) => term.fmt(f),
  467|      0|            Self::BlankNode(term) => term.fmt(f),
  468|      0|            Self::Literal(term) => term.fmt(f),
  469|       |            #[cfg(feature = "rdf-star")]
  470|      0|            Self::Triple(triple) => write!(f, "<<{triple}>>"),
  471|    776|            Self::Variable(var) => var.fmt(f),
  472|       |        }
  473|    784|    }
_RNvXs1Z_NtCskGc5T8eVihK_9spargebra4termNtB6_11TermPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  438|  67.1k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2b_NtCskGc5T8eVihK_9spargebra4termNtB6_16GraphNamePatternNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB8_:
  703|  6.94k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs1w_NtCskGc5T8eVihK_9spargebra4termNtB6_9GraphNameNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  187|    356|#[derive(Eq, PartialEq, Debug, Clone, Hash, Default)]
_RNvXs1_NtCskGc5T8eVihK_9spargebra4termNtB5_13GroundSubjectINtNtCs9nhK3FOW46N_4core7convert7TryFromNtNtCshJ9d6mhVUZV_5oxrdf6triple7SubjectE8try_fromB7_:
   51|    938|    fn try_from(subject: Subject) -> Result<Self, Self::Error> {
   52|    938|        match subject {
   53|    938|            Subject::NamedNode(t) => Ok(t.into()),
   54|      0|            Subject::BlankNode(_) => Err(()),
   55|       |            #[cfg(feature = "rdf-star")]
   56|      0|            Subject::Triple(t) => Ok(GroundTriple::try_from(*t)?.into()),
   57|       |        }
   58|    938|    }
_RNvXsn_NtCskGc5T8eVihK_9spargebra4termNtB5_16NamedNodePatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableE4fromB7_:
  420|  15.1k|    fn from(var: Variable) -> Self {
  421|  15.1k|        Self::Variable(var)
  422|  15.1k|    }
_RNvXst_NtCskGc5T8eVihK_9spargebra4termNtB5_11TermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf7literal7LiteralE4fromB7_:
  492|  2.78k|    fn from(literal: Literal) -> Self {
  493|  2.78k|        Self::Literal(literal)
  494|  2.78k|    }
_RNvXsT_NtCskGc5T8eVihK_9spargebra4termNtB5_13TriplePatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB7_:
  801|     88|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  802|     88|        write!(f, "{} {} {}", self.subject, self.predicate, self.object)
  803|     88|    }
_RNvXsE_NtCskGc5T8eVihK_9spargebra4termNtB5_17GroundTermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeE4fromB7_:
  627|  16.6k|    fn from(node: NamedNode) -> Self {
  628|  16.6k|        Self::NamedNode(node)
  629|  16.6k|    }
_RNvXsH_NtCskGc5T8eVihK_9spargebra4termNtB5_17GroundTermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableE4fromB7_:
  649|  79.9k|    fn from(var: Variable) -> Self {
  650|  79.9k|        Self::Variable(var)
  651|  79.9k|    }
_RNvXsc_NtCskGc5T8eVihK_9spargebra4termNtB5_9GraphNameINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeE4fromB7_:
  216|  2.04k|    fn from(node: NamedNode) -> Self {
  217|  2.04k|        Self::NamedNode(node)
  218|  2.04k|    }
_RNvXsQ_NtCskGc5T8eVihK_9spargebra4termNtB5_16GraphNamePatternINtNtCs9nhK3FOW46N_4core7convert4FromNtB5_9GraphNameE4fromB7_:
  748|    222|    fn from(graph_name: GraphName) -> Self {
  749|    222|        match graph_name {
  750|    165|            GraphName::NamedNode(node) => node.into(),
  751|     57|            GraphName::DefaultGraph => Self::DefaultGraph,
  752|       |        }
  753|    222|    }
_RNvXsj_NtCskGc5T8eVihK_9spargebra4termNtB5_10GroundQuadINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_4QuadE8try_fromB7_:
  374|    938|    fn try_from(quad: Quad) -> Result<Self, Self::Error> {
  375|    938|        Ok(Self {
  376|    938|            subject: quad.subject.try_into()?,
  377|    938|            predicate: quad.predicate,
  378|    938|            object: quad.object.try_into()?,
  379|    938|            graph_name: quad.graph_name,
  380|       |        })
  381|    938|    }
_RNvXsm_NtCskGc5T8eVihK_9spargebra4termNtB5_16NamedNodePatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeE4fromB7_:
  413|  28.6k|    fn from(node: NamedNode) -> Self {
  414|  28.6k|        Self::NamedNode(node)
  415|  28.6k|    }
_RNvXss_NtCskGc5T8eVihK_9spargebra4termNtB5_11TermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf10blank_node9BlankNodeE4fromB7_:
  485|  18.9k|    fn from(node: BlankNode) -> Self {
  486|  18.9k|        Self::BlankNode(node)
  487|  18.9k|    }
_RNvXsv_NtCskGc5T8eVihK_9spargebra4termNtB5_11TermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableE4from:
  506|  18.5k|    fn from(var: Variable) -> Self {
  507|  18.5k|        Self::Variable(var)
  508|  18.5k|    }
_RNvXsg_NtCskGc5T8eVihK_9spargebra4termNtB5_4QuadINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_11QuadPatternE8try_fromB7_:
  299|  2.23k|    fn try_from(quad: QuadPattern) -> Result<Self, Self::Error> {
  300|  2.23k|        Ok(Self {
  301|  2.23k|            subject: quad.subject.try_into()?,
  302|  2.23k|            predicate: quad.predicate.try_into()?,
  303|  2.23k|            object: quad.object.try_into()?,
  304|  2.23k|            graph_name: quad.graph_name.try_into()?,
  305|       |        })
  306|  2.23k|    }
_RNvXs1S_NtCskGc5T8eVihK_9spargebra4termNtB6_16NamedNodePatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  385|  43.7k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXs2k_NtCskGc5T8eVihK_9spargebra4termNtB6_13TriplePatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB8_:
  767|  15.3k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsd_NtCskGc5T8eVihK_9spargebra4termNtB5_9GraphNameINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_16GraphNamePatternE8try_fromB7_:
  225|  2.23k|    fn try_from(pattern: GraphNamePattern) -> Result<Self, Self::Error> {
  226|  2.23k|        match pattern {
  227|  2.04k|            GraphNamePattern::NamedNode(t) => Ok(t.into()),
  228|    189|            GraphNamePattern::DefaultGraph => Ok(Self::DefaultGraph),
  229|      0|            GraphNamePattern::Variable(_) => Err(()),
  230|       |        }
  231|  2.23k|    }
_RNvXs5_NtCskGc5T8eVihK_9spargebra4termNtB5_10GroundTermINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf7literal7LiteralE4fromB7_:
  111|    799|    fn from(literal: Literal) -> Self {
  112|    799|        Self::Literal(literal)
  113|    799|    }
_RNvXs15_NtCskGc5T8eVihK_9spargebra4termNtB6_17GroundQuadPatternINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB6_11QuadPatternE8try_fromB8_:
 1004|  9.92k|    fn try_from(pattern: QuadPattern) -> Result<Self, Self::Error> {
 1005|  9.92k|        Ok(Self {
 1006|  9.92k|            subject: pattern.subject.try_into()?,
 1007|  9.92k|            predicate: pattern.predicate,
 1008|  9.92k|            object: pattern.object.try_into()?,
 1009|  9.92k|            graph_name: pattern.graph_name,
 1010|       |        })
 1011|  9.92k|    }
_RNvXsr_NtCskGc5T8eVihK_9spargebra4termNtB5_11TermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeE4fromB7_:
  478|  16.0k|    fn from(node: NamedNode) -> Self {
  479|  16.0k|        Self::NamedNode(node)
  480|  16.0k|    }
_RNvXs_NtCskGc5T8eVihK_9spargebra4termNtB4_13GroundSubjectINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeE4fromB6_:
   34|    938|    fn from(node: NamedNode) -> Self {
   35|    938|        Self::NamedNode(node)
   36|    938|    }
_RNvXsx_NtCskGc5T8eVihK_9spargebra4termNtB5_11TermPatternINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf6triple4TermE4fromB7_:
  525|  17.8k|    fn from(term: Term) -> Self {
  526|  17.8k|        match term {
  527|  15.0k|            Term::NamedNode(node) => node.into(),
  528|      0|            Term::BlankNode(node) => node.into(),
  529|  2.78k|            Term::Literal(literal) => literal.into(),
  530|       |            #[cfg(feature = "rdf-star")]
  531|      0|            Term::Triple(t) => TriplePattern::from(*t).into(),
  532|       |        }
  533|  17.8k|    }
_RINvMs11_NtCskGc5T8eVihK_9spargebra4termNtB7_11QuadPattern3newNtB7_11TermPatternNtB7_16NamedNodePatternBY_B1g_EB9_:
  904|  12.1k|    pub(crate) fn new(
  905|  12.1k|        subject: impl Into<TermPattern>,
  906|  12.1k|        predicate: impl Into<NamedNodePattern>,
  907|  12.1k|        object: impl Into<TermPattern>,
  908|  12.1k|        graph_name: impl Into<GraphNamePattern>,
  909|  12.1k|    ) -> Self {
  910|  12.1k|        Self {
  911|  12.1k|            subject: subject.into(),
  912|  12.1k|            predicate: predicate.into(),
  913|  12.1k|            object: object.into(),
  914|  12.1k|            graph_name: graph_name.into(),
  915|  12.1k|        }
  916|  12.1k|    }
_RINvMsS_NtCskGc5T8eVihK_9spargebra4termNtB6_13TriplePattern3newNtB6_11TermPatternNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeBZ_EB8_:
  775|  5.85k|    pub(crate) fn new(
  776|  5.85k|        subject: impl Into<TermPattern>,
  777|  5.85k|        predicate: impl Into<NamedNodePattern>,
  778|  5.85k|        object: impl Into<TermPattern>,
  779|  5.85k|    ) -> Self {
  780|  5.85k|        Self {
  781|  5.85k|            subject: subject.into(),
  782|  5.85k|            predicate: predicate.into(),
  783|  5.85k|            object: object.into(),
  784|  5.85k|        }
  785|  5.85k|    }
_RINvMs11_NtCskGc5T8eVihK_9spargebra4termNtB7_11QuadPattern3newNtB7_11TermPatternNtB7_16NamedNodePatternBY_NtB7_16GraphNamePatternEB9_:
  904|  1.86k|    pub(crate) fn new(
  905|  1.86k|        subject: impl Into<TermPattern>,
  906|  1.86k|        predicate: impl Into<NamedNodePattern>,
  907|  1.86k|        object: impl Into<TermPattern>,
  908|  1.86k|        graph_name: impl Into<GraphNamePattern>,
  909|  1.86k|    ) -> Self {
  910|  1.86k|        Self {
  911|  1.86k|            subject: subject.into(),
  912|  1.86k|            predicate: predicate.into(),
  913|  1.86k|            object: object.into(),
  914|  1.86k|            graph_name: graph_name.into(),
  915|  1.86k|        }
  916|  1.86k|    }
_RINvMsS_NtCskGc5T8eVihK_9spargebra4termNtB6_13TriplePattern3newNtB6_11TermPatternNtB6_16NamedNodePatternBZ_EB8_:
  775|  16.1k|    pub(crate) fn new(
  776|  16.1k|        subject: impl Into<TermPattern>,
  777|  16.1k|        predicate: impl Into<NamedNodePattern>,
  778|  16.1k|        object: impl Into<TermPattern>,
  779|  16.1k|    ) -> Self {
  780|  16.1k|        Self {
  781|  16.1k|            subject: subject.into(),
  782|  16.1k|            predicate: predicate.into(),
  783|  16.1k|            object: object.into(),
  784|  16.1k|        }
  785|  16.1k|    }
_RINvMs11_NtCskGc5T8eVihK_9spargebra4termNtB7_11QuadPattern3newNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableBY_BY_NtB7_9GraphNameEB9_:
  904|    222|    pub(crate) fn new(
  905|    222|        subject: impl Into<TermPattern>,
  906|    222|        predicate: impl Into<NamedNodePattern>,
  907|    222|        object: impl Into<TermPattern>,
  908|    222|        graph_name: impl Into<GraphNamePattern>,
  909|    222|    ) -> Self {
  910|    222|        Self {
  911|    222|            subject: subject.into(),
  912|    222|            predicate: predicate.into(),
  913|    222|            object: object.into(),
  914|    222|            graph_name: graph_name.into(),
  915|    222|        }
  916|    222|    }
_RINvMsS_NtCskGc5T8eVihK_9spargebra4termNtB6_13TriplePattern3newNtB6_11TermPatternNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableBZ_EB8_:
  775|  8.92k|    pub(crate) fn new(
  776|  8.92k|        subject: impl Into<TermPattern>,
  777|  8.92k|        predicate: impl Into<NamedNodePattern>,
  778|  8.92k|        object: impl Into<TermPattern>,
  779|  8.92k|    ) -> Self {
  780|  8.92k|        Self {
  781|  8.92k|            subject: subject.into(),
  782|  8.92k|            predicate: predicate.into(),
  783|  8.92k|            object: object.into(),
  784|  8.92k|        }
  785|  8.92k|    }
_RINvMsS_NtCskGc5T8eVihK_9spargebra4termNtB6_13TriplePattern3newNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableBZ_BZ_EB8_:
  775|    444|    pub(crate) fn new(
  776|    444|        subject: impl Into<TermPattern>,
  777|    444|        predicate: impl Into<NamedNodePattern>,
  778|    444|        object: impl Into<TermPattern>,
  779|    444|    ) -> Self {
  780|    444|        Self {
  781|    444|            subject: subject.into(),
  782|    444|            predicate: predicate.into(),
  783|    444|            object: object.into(),
  784|    444|        }
  785|    444|    }
_RNvXso_NtCskGc5T8eVihK_9spargebra4termNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_16NamedNodePatternE8try_fromB7_:
  429|  2.23k|    fn try_from(pattern: NamedNodePattern) -> Result<Self, Self::Error> {
  430|  2.23k|        match pattern {
  431|  2.23k|            NamedNodePattern::NamedNode(t) => Ok(t),
  432|      0|            NamedNodePattern::Variable(_) => Err(()),
  433|       |        }
  434|  2.23k|    }
_RNvXsA_NtCskGc5T8eVihK_9spargebra4termNtNtCshJ9d6mhVUZV_5oxrdf6triple7SubjectINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_11TermPatternE8try_fromB7_:
  563|  2.23k|    fn try_from(term: TermPattern) -> Result<Self, Self::Error> {
  564|  2.23k|        match term {
  565|  2.23k|            TermPattern::NamedNode(t) => Ok(t.into()),
  566|      0|            TermPattern::BlankNode(t) => Ok(t.into()),
  567|       |            #[cfg(feature = "rdf-star")]
  568|      0|            TermPattern::Triple(t) => Ok(Triple::try_from(*t)?.into()),
  569|      0|            TermPattern::Literal(_) | TermPattern::Variable(_) => Err(()),
  570|       |        }
  571|  2.23k|    }
_RNvXsB_NtCskGc5T8eVihK_9spargebra4termNtNtCshJ9d6mhVUZV_5oxrdf6triple4TermINtNtCs9nhK3FOW46N_4core7convert7TryFromNtB5_11TermPatternE8try_fromB7_:
  578|  2.23k|    fn try_from(pattern: TermPattern) -> Result<Self, Self::Error> {
  579|  2.23k|        match pattern {
  580|    796|            TermPattern::NamedNode(t) => Ok(t.into()),
  581|      0|            TermPattern::BlankNode(t) => Ok(t.into()),
  582|  1.43k|            TermPattern::Literal(t) => Ok(t.into()),
  583|       |            #[cfg(feature = "rdf-star")]
  584|      0|            TermPattern::Triple(t) => Ok(Triple::try_from(*t)?.into()),
  585|      0|            TermPattern::Variable(_) => Err(()),
  586|       |        }
  587|  2.23k|    }

_RNvXsa_NtCskGc5T8eVihK_9spargebra6updateNtB5_6UpdateNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
   19|  2.12k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsh_NtCskGc5T8eVihK_9spargebra6updateNtB5_20GraphUpdateOperationNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsh41WZG82U3t_18sparql_update_eval:
   95|  4.20k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtCskGc5T8eVihK_9spargebra6updateNtB2_6Update5parse:
   29|  2.28k|    pub fn parse(update: &str, base_iri: Option<&str>) -> Result<Self, SparqlSyntaxError> {
   30|  2.28k|        parse_update(update, base_iri)
   31|  2.28k|    }

_RNvXsE_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
  636|     28|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsx_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_10ExpressionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCsd92XLxb96zi_8oxigraph:
   22|     28|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNCNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB7_12GraphPattern19from_sparql_algebra0B9_:
 1122|  29.9k|                .map(|p| {
 1123|  29.9k|                    let (subject, predicate, object) =
 1124|  29.9k|                        Self::triple_pattern_from_algebra(p, blank_nodes);
 1125|  29.9k|                    Self::QuadPattern {
 1126|  29.9k|                        subject,
 1127|  29.9k|                        predicate,
 1128|  29.9k|                        object,
 1129|  29.9k|                        graph_name: graph_name.cloned(),
 1130|  29.9k|                    }
 1131|  29.9k|                })
_RINvNtCsj4YExd6TrWR_7sparopt7algebra4hashRNtB2_10ExpressionEB4_:
 1641|  1.39k|fn hash(v: impl Hash) -> u64 {
 1642|  1.39k|    let mut hasher = DefaultHasher::new();
 1643|  1.39k|    v.hash(&mut hasher);
 1644|  1.39k|    hasher.finish()
 1645|  1.39k|}
_RNCNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB7_12GraphPattern18is_empty_singleton0B9_:
  752|    458|            bindings.len() == 1 && bindings.iter().all(|b| b.iter().all(Option::is_none))
_RINvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB6_12GraphPattern9union_allINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBC_ENCNvMNtB8_9optimizerNtB2Q_9Optimizer12push_filterss_0EEB8_:
  836|     10|    pub fn union_all(args: impl IntoIterator<Item = Self>) -> Self {
  837|     10|        let args = args.into_iter();
  838|     10|        let mut all = Vec::with_capacity(args.size_hint().0);
  839|     30|        for arg in args {
  840|     20|            if arg.is_empty() {
  841|      0|                continue;
  842|     20|            }
  843|     20|            if let Self::Union { inner } = arg {
  844|      0|                all.extend(inner);
  845|     20|            } else {
  846|     20|                all.push(arg);
  847|     20|            }
  848|       |        }
  849|     10|        if all.is_empty() {
  850|      0|            Self::empty()
  851|       |        } else {
  852|     10|            Self::Union {
  853|     10|                inner: order_vec(all),
  854|     10|            }
  855|       |        }
  856|     10|    }
_RINvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB6_12GraphPattern9union_allINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBC_ENCNvMNtB8_9optimizerNtB2Q_9Optimizer13reorder_joinss7_0EEB8_:
  836|      5|    pub fn union_all(args: impl IntoIterator<Item = Self>) -> Self {
  837|      5|        let args = args.into_iter();
  838|      5|        let mut all = Vec::with_capacity(args.size_hint().0);
  839|     15|        for arg in args {
  840|     10|            if arg.is_empty() {
  841|      0|                continue;
  842|     10|            }
  843|     10|            if let Self::Union { inner } = arg {
  844|      0|                all.extend(inner);
  845|     10|            } else {
  846|     10|                all.push(arg);
  847|     10|            }
  848|       |        }
  849|      5|        if all.is_empty() {
  850|      0|            Self::empty()
  851|       |        } else {
  852|      5|            Self::Union {
  853|      5|                inner: order_vec(all),
  854|      5|            }
  855|       |        }
  856|      5|    }
_RNCNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB4_10Expression19from_sparql_algebras_0B6_:
  353|     10|                    .map(|e| Self::from_sparql_algebra(e, graph_name))
_RNCINvNtCsj4YExd6TrWR_7sparopt7algebra9order_vecNtB4_12GraphPatternE0B6_:
 1637|     50|    vec.sort_unstable_by_key(|a| hash(a));
_RINvMNtCsj4YExd6TrWR_7sparopt7algebraNtB3_10Expression7and_allINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBz_ENCNvMNtB5_9optimizerNtB2J_9Optimizer20normalize_expressions_0EEB5_:
   97|     92|    pub fn and_all(args: impl IntoIterator<Item = Self>) -> Self {
   98|     92|        let args = args.into_iter();
   99|     92|        let mut all = Vec::with_capacity(args.size_hint().0);
  100|    276|        for arg in args {
  101|    184|            if let Some(ebv) = arg.effective_boolean_value() {
  102|      0|                if !ebv {
  103|      0|                    return false.into();
  104|      0|                }
  105|       |                // We ignore true values
  106|    184|            } else if let Self::And(args) = arg {
  107|     13|                all.extend(args);
  108|    171|            } else {
  109|    171|                all.push(arg);
  110|    171|            }
  111|       |        }
  112|     92|        match all.len() {
  113|      0|            0 => true.into(),
  114|       |            1 => {
  115|      0|                let result = all.pop().unwrap();
  116|      0|                if result.returns_boolean() {
  117|      0|                    result
  118|       |                } else {
  119|      0|                    Self::And(vec![result])
  120|       |                }
  121|       |            }
  122|     92|            _ => Self::And(order_vec(all)),
  123|       |        }
  124|     92|    }
_RINvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB6_12GraphPattern9union_allINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBC_ENCNvMNtB8_9optimizerNtB2Q_9Optimizer17normalize_pattern0EEB8_:
  836|     10|    pub fn union_all(args: impl IntoIterator<Item = Self>) -> Self {
  837|     10|        let args = args.into_iter();
  838|     10|        let mut all = Vec::with_capacity(args.size_hint().0);
  839|     30|        for arg in args {
  840|     20|            if arg.is_empty() {
  841|      0|                continue;
  842|     20|            }
  843|     20|            if let Self::Union { inner } = arg {
  844|      0|                all.extend(inner);
  845|     20|            } else {
  846|     20|                all.push(arg);
  847|     20|            }
  848|       |        }
  849|     10|        if all.is_empty() {
  850|      0|            Self::empty()
  851|       |        } else {
  852|     10|            Self::Union {
  853|     10|                inner: order_vec(all),
  854|     10|            }
  855|       |        }
  856|     10|    }
_RNCNCNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB9_12GraphPattern6values00Bb_:
  902|  1.94k|            .filter(|row| !bindings.iter().any(|binding| binding.get(*row).is_some()))
_RINvNtCsj4YExd6TrWR_7sparopt7algebra9order_vecNtB2_10ExpressionEB4_:
 1636|    107|fn order_vec<T: Hash>(mut vec: Vec<T>) -> Vec<T> {
 1637|    107|    vec.sort_unstable_by_key(|a| hash(a));
 1638|    107|    vec
 1639|    107|}
_RINvNtCsj4YExd6TrWR_7sparopt7algebra9order_vecNtB2_12GraphPatternEB4_:
 1636|     25|fn order_vec<T: Hash>(mut vec: Vec<T>) -> Vec<T> {
 1637|     25|    vec.sort_unstable_by_key(|a| hash(a));
 1638|     25|    vec
 1639|     25|}
_RINvXsM_NtCsj4YExd6TrWR_7sparopt7algebraNtB6_13JoinAlgorithmNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
 1497|    431|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvMNtCsj4YExd6TrWR_7sparopt7algebraNtB3_10Expression7and_allINtNtCsjOdcKtOMjJI_5alloc3vec3VecBz_EEB5_:
   97|  21.1k|    pub fn and_all(args: impl IntoIterator<Item = Self>) -> Self {
   98|  21.1k|        let args = args.into_iter();
   99|  21.1k|        let mut all = Vec::with_capacity(args.size_hint().0);
  100|  21.1k|        for arg in args {
  101|     19|            if let Some(ebv) = arg.effective_boolean_value() {
  102|      0|                if !ebv {
  103|      0|                    return false.into();
  104|      0|                }
  105|       |                // We ignore true values
  106|     19|            } else if let Self::And(args) = arg {
  107|      0|                all.extend(args);
  108|     19|            } else {
  109|     19|                all.push(arg);
  110|     19|            }
  111|       |        }
  112|  21.1k|        match all.len() {
  113|  21.1k|            0 => true.into(),
  114|       |            1 => {
  115|     12|                let result = all.pop().unwrap();
  116|     12|                if result.returns_boolean() {
  117|     11|                    result
  118|       |                } else {
  119|      1|                    Self::And(vec![result])
  120|       |                }
  121|       |            }
  122|      3|            _ => Self::And(order_vec(all)),
  123|       |        }
  124|  21.1k|    }
_RNCNvXs9_NtCsj4YExd6TrWR_7sparopt7algebraNtNtCskGc5T8eVihK_9spargebra7algebra10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromRNtB7_10ExpressionE4from0B9_:
  494|     30|                .reduce(|a, b| Self::Or(Box::new(a), Box::new(b)))
_RNCNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB7_12GraphPattern6valuess_0B9_:
  909|    585|                .filter_map(|(i, v)| {
  910|    585|                    if empty_rows.contains(&i) {
  911|    585|                        None
  912|       |                    } else {
  913|      0|                        Some(v)
  914|       |                    }
  915|    585|                })
_RNCNvXs9_NtCsj4YExd6TrWR_7sparopt7algebraNtNtCskGc5T8eVihK_9spargebra7algebra10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromRNtB7_10ExpressionE4froms0_0B9_:
  499|    190|                .reduce(|a, b| Self::And(Box::new(a), Box::new(b)))
_RNCNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB4_10Expression14used_variables0B6_:
  212|     47|        self.lookup_used_variables(&mut |v| {
  213|     47|            variables.insert(v);
  214|     47|        });
_RNCNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB7_12GraphPattern6values0B9_:
  902|  2.52k|            .filter(|row| !bindings.iter().any(|binding| binding.get(*row).is_some()))
_RINvXsy_NtCsj4YExd6TrWR_7sparopt7algebraNtB6_10ExpressionNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
   22|  16.1k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RINvXsF_NtCsj4YExd6TrWR_7sparopt7algebraNtB6_12GraphPatternNtNtCs9nhK3FOW46N_4core4hash4Hash4hashNtNtNtCsc4CYCHgsNRQ_3std4hash6random13DefaultHasherEB8_:
  636|  1.15k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNCNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB7_12GraphPattern19from_sparql_algebras_0B9_:
 1132|  21.7k|                .reduce(|a, b| Self::Join {
 1133|  21.7k|                    left: Box::new(a),
 1134|  21.7k|                    right: Box::new(b),
 1135|  21.7k|                    algorithm: JoinAlgorithm::default(),
 1136|  21.7k|                })
_RNCINvNtCsj4YExd6TrWR_7sparopt7algebra9order_vecNtB4_10ExpressionE0B6_:
 1637|    250|    vec.sort_unstable_by_key(|a| hash(a));
_RINvNtCsj4YExd6TrWR_7sparopt7algebra4hashRNtB2_12GraphPatternEB4_:
 1641|     50|fn hash(v: impl Hash) -> u64 {
 1642|     50|    let mut hasher = DefaultHasher::new();
 1643|     50|    v.hash(&mut hasher);
 1644|     50|    hasher.finish()
 1645|     50|}
_RINvNtCsj4YExd6TrWR_7sparopt7algebra10order_pairNtB2_10ExpressionEB4_:
 1628|    572|fn order_pair<T: Hash>(a: T, b: T) -> (T, T) {
 1629|    572|    if hash(&a) <= hash(&b) {
 1630|    407|        (a, b)
 1631|       |    } else {
 1632|    165|        (b, a)
 1633|       |    }
 1634|    572|}
_RNCNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB4_10Expression19from_sparql_algebra0B6_:
  306|     12|                            .map(|e| {
  307|     12|                                Self::Equal(
  308|     12|                                    Box::new(left.clone()),
  309|     12|                                    Box::new(Self::from_sparql_algebra(e, graph_name)),
  310|     12|                                )
  311|     12|                            })
_RNCNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB4_10Expression19from_sparql_algebras0_0B6_:
  359|     38|                    .map(|e| Self::from_sparql_algebra(e, graph_name))
_RINvMNtCsj4YExd6TrWR_7sparopt7algebraNtB3_10Expression21lookup_used_variablesNCNvB2_14used_variables0EB5_:
  218|  1.06k|    pub fn lookup_used_variables<'a>(&'a self, callback: &mut impl FnMut(&'a Variable)) {
  219|  1.06k|        match self {
  220|    350|            Self::NamedNode(_) | Self::Literal(_) => {}
  221|     47|            Self::Variable(v) | Self::Bound(v) => callback(v),
  222|      0|            Self::Or(inner)
  223|      1|            | Self::And(inner)
  224|      2|            | Self::Coalesce(inner)
  225|      0|            | Self::FunctionCall(_, inner) => {
  226|      5|                for i in inner {
  227|      2|                    i.lookup_used_variables(callback);
  228|      2|                }
  229|       |            }
  230|     73|            Self::Equal(a, b)
  231|      0|            | Self::SameTerm(a, b)
  232|      0|            | Self::Greater(a, b)
  233|      0|            | Self::GreaterOrEqual(a, b)
  234|      0|            | Self::Less(a, b)
  235|      0|            | Self::LessOrEqual(a, b)
  236|     40|            | Self::Add(a, b)
  237|     45|            | Self::Subtract(a, b)
  238|    119|            | Self::Multiply(a, b)
  239|    332|            | Self::Divide(a, b) => {
  240|    332|                a.lookup_used_variables(callback);
  241|    332|                b.lookup_used_variables(callback);
  242|    332|            }
  243|    294|            Self::UnaryPlus(i) | Self::UnaryMinus(i) | Self::Not(i) => {
  244|    333|                i.lookup_used_variables(callback)
  245|       |            }
  246|      0|            Self::Exists(e) => e.lookup_used_variables(callback),
  247|      1|            Self::If(a, b, c) => {
  248|      1|                a.lookup_used_variables(callback);
  249|      1|                b.lookup_used_variables(callback);
  250|      1|                c.lookup_used_variables(callback);
  251|      1|            }
  252|       |        }
  253|  1.06k|    }
_RINvMNtCsj4YExd6TrWR_7sparopt7algebraNtB3_10Expression6or_allINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtNtCsjOdcKtOMjJI_5alloc3vec9into_iter8IntoIterBz_ENCNvMNtB5_9optimizerNtB2I_9Optimizer20normalize_expression0EEB5_:
   68|     12|    pub fn or_all(args: impl IntoIterator<Item = Self>) -> Self {
   69|     12|        let args = args.into_iter();
   70|     12|        let mut all = Vec::with_capacity(args.size_hint().0);
   71|     36|        for arg in args {
   72|     24|            if let Some(ebv) = arg.effective_boolean_value() {
   73|      0|                if ebv {
   74|      0|                    return true.into();
   75|      0|                }
   76|       |                // We ignore false values
   77|     24|            } else if let Self::Or(args) = arg {
   78|      0|                all.extend(args);
   79|     24|            } else {
   80|     24|                all.push(arg);
   81|     24|            }
   82|       |        }
   83|     12|        match all.len() {
   84|      0|            0 => false.into(),
   85|       |            1 => {
   86|      0|                let result = all.pop().unwrap();
   87|      0|                if result.returns_boolean() {
   88|      0|                    result // It's already casted to boolean
   89|       |                } else {
   90|      0|                    Self::And(vec![result])
   91|       |                }
   92|       |            }
   93|     12|            _ => Self::Or(order_vec(all)),
   94|       |        }
   95|     12|    }
_RNCNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB7_12GraphPattern19from_sparql_algebras0_0B9_:
 1161|    314|                    || true.into(),
_RNvXs9_NtCsj4YExd6TrWR_7sparopt7algebraNtNtCskGc5T8eVihK_9spargebra7algebra10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromRNtB5_10ExpressionE4from:
  486|  16.1k|    fn from(expression: &Expression) -> Self {
  487|  16.1k|        match expression {
  488|    382|            Expression::NamedNode(node) => Self::NamedNode(node.clone()),
  489|  3.00k|            Expression::Literal(literal) => Self::Literal(literal.clone()),
  490|  3.38k|            Expression::Variable(variable) => Self::Variable(variable.clone()),
  491|     30|            Expression::Or(inner) => inner
  492|     30|                .iter()
  493|     30|                .map(Into::into)
  494|     30|                .reduce(|a, b| Self::Or(Box::new(a), Box::new(b)))
  495|     30|                .unwrap_or_else(|| Literal::from(false).into()),
  496|    187|            Expression::And(inner) => inner
  497|    187|                .iter()
  498|    187|                .map(Into::into)
  499|    187|                .reduce(|a, b| Self::And(Box::new(a), Box::new(b)))
  500|    187|                .unwrap_or_else(|| Literal::from(true).into()),
  501|    609|            Expression::Equal(left, right) => Self::Equal(
  502|    609|                Box::new(left.as_ref().into()),
  503|    609|                Box::new(right.as_ref().into()),
  504|    609|            ),
  505|      2|            Expression::SameTerm(left, right) => Self::SameTerm(
  506|      2|                Box::new(left.as_ref().into()),
  507|      2|                Box::new(right.as_ref().into()),
  508|      2|            ),
  509|     32|            Expression::Greater(left, right) => Self::Greater(
  510|     32|                Box::new(left.as_ref().into()),
  511|     32|                Box::new(right.as_ref().into()),
  512|     32|            ),
  513|    122|            Expression::GreaterOrEqual(left, right) => Self::GreaterOrEqual(
  514|    122|                Box::new(left.as_ref().into()),
  515|    122|                Box::new(right.as_ref().into()),
  516|    122|            ),
  517|      8|            Expression::Less(left, right) => Self::Less(
  518|      8|                Box::new(left.as_ref().into()),
  519|      8|                Box::new(right.as_ref().into()),
  520|      8|            ),
  521|     16|            Expression::LessOrEqual(left, right) => Self::LessOrEqual(
  522|     16|                Box::new(left.as_ref().into()),
  523|     16|                Box::new(right.as_ref().into()),
  524|     16|            ),
  525|    178|            Expression::Add(left, right) => Self::Add(
  526|    178|                Box::new(left.as_ref().into()),
  527|    178|                Box::new(right.as_ref().into()),
  528|    178|            ),
  529|  1.24k|            Expression::Subtract(left, right) => Self::Subtract(
  530|  1.24k|                Box::new(left.as_ref().into()),
  531|  1.24k|                Box::new(right.as_ref().into()),
  532|  1.24k|            ),
  533|    392|            Expression::Multiply(left, right) => Self::Multiply(
  534|    392|                Box::new(left.as_ref().into()),
  535|    392|                Box::new(right.as_ref().into()),
  536|    392|            ),
  537|  2.38k|            Expression::Divide(left, right) => Self::Divide(
  538|  2.38k|                Box::new(left.as_ref().into()),
  539|  2.38k|                Box::new(right.as_ref().into()),
  540|  2.38k|            ),
  541|    212|            Expression::UnaryPlus(inner) => Self::UnaryPlus(Box::new(inner.as_ref().into())),
  542|  1.61k|            Expression::UnaryMinus(inner) => Self::UnaryMinus(Box::new(inner.as_ref().into())),
  543|  1.55k|            Expression::Not(inner) => Self::Not(Box::new(inner.as_ref().into())),
  544|     87|            Expression::Exists(inner) => Self::Exists(Box::new(inner.as_ref().into())),
  545|    130|            Expression::Bound(variable) => Self::Bound(variable.clone()),
  546|    518|            Expression::If(cond, yes, no) => Self::If(
  547|    518|                Box::new(cond.as_ref().into()),
  548|    518|                Box::new(yes.as_ref().into()),
  549|    518|                Box::new(no.as_ref().into()),
  550|    518|            ),
  551|     54|            Expression::Coalesce(inner) => Self::Coalesce(inner.iter().map(Into::into).collect()),
  552|     36|            Expression::FunctionCall(name, args) => {
  553|     36|                Self::FunctionCall(name.clone(), args.iter().map(Into::into).collect())
  554|       |            }
  555|       |        }
  556|  16.1k|    }
_RNvXsk_NtCsj4YExd6TrWR_7sparopt7algebraNtNtCskGc5T8eVihK_9spargebra7algebra12GraphPatternINtNtCs9nhK3FOW46N_4core7convert4FromRNtB5_12GraphPatternE4from:
 1323|    977|    fn from(pattern: &GraphPattern) -> Self {
 1324|    977|        match pattern {
 1325|       |            GraphPattern::QuadPattern {
 1326|     88|                subject,
 1327|     88|                predicate,
 1328|     88|                object,
 1329|     88|                graph_name,
 1330|     88|            } => {
 1331|     88|                let pattern = Self::Bgp {
 1332|     88|                    patterns: vec![TriplePattern {
 1333|     88|                        subject: subject.clone().into(),
 1334|     88|                        predicate: predicate.clone(),
 1335|     88|                        object: object.clone().into(),
 1336|     88|                    }],
 1337|     88|                };
 1338|     88|                if let Some(graph_name) = graph_name {
 1339|     26|                    Self::Graph {
 1340|     26|                        inner: Box::new(pattern),
 1341|     26|                        name: graph_name.clone(),
 1342|     26|                    }
 1343|       |                } else {
 1344|     62|                    pattern
 1345|       |                }
 1346|       |            }
 1347|       |            GraphPattern::Path {
 1348|    304|                subject,
 1349|    304|                path,
 1350|    304|                object,
 1351|    304|                graph_name,
 1352|    304|            } => {
 1353|    304|                let pattern = Self::Path {
 1354|    304|                    subject: subject.clone().into(),
 1355|    304|                    path: path.clone(),
 1356|    304|                    object: object.clone().into(),
 1357|    304|                };
 1358|    304|                if let Some(graph_name) = graph_name {
 1359|    216|                    Self::Graph {
 1360|    216|                        inner: Box::new(pattern),
 1361|    216|                        name: graph_name.clone(),
 1362|    216|                    }
 1363|       |                } else {
 1364|     88|                    pattern
 1365|       |                }
 1366|       |            }
 1367|    340|            GraphPattern::Join { left, right, .. } => {
 1368|    340|                match (left.as_ref().into(), right.as_ref().into()) {
 1369|     32|                    (Self::Bgp { patterns: mut left }, Self::Bgp { patterns: right }) => {
 1370|     32|                        left.extend(right);
 1371|     32|                        Self::Bgp { patterns: left }
 1372|       |                    }
 1373|    308|                    (left, right) => Self::Join {
 1374|    308|                        left: Box::new(left),
 1375|    308|                        right: Box::new(right),
 1376|    308|                    },
 1377|       |                }
 1378|       |            }
 1379|       |            GraphPattern::LeftJoin {
 1380|     10|                left,
 1381|     10|                right,
 1382|     10|                expression,
 1383|       |                ..
 1384|       |            } => {
 1385|     10|                let empty_expr = if let Expression::Literal(l) = expression {
 1386|     10|                    l.datatype() == xsd::BOOLEAN && l.value() == "true"
 1387|       |                } else {
 1388|      0|                    false
 1389|       |                };
 1390|       |                Self::LeftJoin {
 1391|     10|                    left: Box::new(left.as_ref().into()),
 1392|     10|                    right: Box::new(right.as_ref().into()),
 1393|     10|                    expression: if empty_expr {
 1394|     10|                        None
 1395|       |                    } else {
 1396|      0|                        Some(expression.into())
 1397|       |                    },
 1398|       |                }
 1399|       |            }
 1400|       |            #[cfg(feature = "sep-0006")]
 1401|      2|            GraphPattern::Lateral { left, right } => {
 1402|      2|                match (left.as_ref().into(), right.as_ref().into()) {
 1403|      0|                    (Self::Bgp { patterns: mut left }, Self::Bgp { patterns: right }) => {
 1404|      0|                        left.extend(right);
 1405|      0|                        Self::Bgp { patterns: left }
 1406|       |                    }
 1407|      2|                    (left, right) => Self::Lateral {
 1408|      2|                        left: Box::new(left),
 1409|      2|                        right: Box::new(right),
 1410|      2|                    },
 1411|       |                }
 1412|       |            }
 1413|      0|            GraphPattern::Filter { inner, expression } => Self::Filter {
 1414|      0|                inner: Box::new(inner.as_ref().into()),
 1415|      0|                expr: expression.into(),
 1416|      0|            },
 1417|      0|            GraphPattern::Union { inner } => inner
 1418|      0|                .iter()
 1419|      0|                .map(Into::into)
 1420|      0|                .reduce(|a, b| Self::Union {
 1421|       |                    left: Box::new(a),
 1422|       |                    right: Box::new(b),
 1423|      0|                })
 1424|      0|                .unwrap_or_else(|| Self::Values {
 1425|       |                    variables: Vec::new(),
 1426|       |                    bindings: Vec::new(),
 1427|      0|                }),
 1428|       |            GraphPattern::Extend {
 1429|     22|                inner,
 1430|     22|                expression,
 1431|     22|                variable,
 1432|     22|            } => Self::Extend {
 1433|     22|                inner: Box::new(inner.as_ref().into()),
 1434|     22|                expression: expression.into(),
 1435|     22|                variable: variable.clone(),
 1436|     22|            },
 1437|      0|            GraphPattern::Minus { left, right, .. } => Self::Minus {
 1438|      0|                left: Box::new(left.as_ref().into()),
 1439|      0|                right: Box::new(right.as_ref().into()),
 1440|      0|            },
 1441|       |            GraphPattern::Values {
 1442|     47|                variables,
 1443|     47|                bindings,
 1444|     47|            } => Self::Values {
 1445|     47|                variables: variables.clone(),
 1446|     47|                bindings: bindings.clone(),
 1447|     47|            },
 1448|      0|            GraphPattern::OrderBy { inner, expression } => Self::OrderBy {
 1449|      0|                inner: Box::new(inner.as_ref().into()),
 1450|      0|                expression: expression.iter().map(Into::into).collect(),
 1451|      0|            },
 1452|     92|            GraphPattern::Project { inner, variables } => Self::Project {
 1453|     92|                inner: Box::new(inner.as_ref().into()),
 1454|     92|                variables: variables.clone(),
 1455|     92|            },
 1456|     72|            GraphPattern::Distinct { inner } => Self::Distinct {
 1457|     72|                inner: Box::new(inner.as_ref().into()),
 1458|     72|            },
 1459|      0|            GraphPattern::Reduced { inner } => Self::Distinct {
 1460|      0|                inner: Box::new(inner.as_ref().into()),
 1461|      0|            },
 1462|       |            GraphPattern::Slice {
 1463|      0|                inner,
 1464|      0|                start,
 1465|      0|                length,
 1466|      0|            } => Self::Slice {
 1467|      0|                inner: Box::new(inner.as_ref().into()),
 1468|      0|                start: *start,
 1469|      0|                length: *length,
 1470|      0|            },
 1471|       |            GraphPattern::Group {
 1472|      0|                inner,
 1473|      0|                variables,
 1474|      0|                aggregates,
 1475|      0|            } => Self::Group {
 1476|      0|                inner: Box::new(inner.as_ref().into()),
 1477|      0|                variables: variables.clone(),
 1478|      0|                aggregates: aggregates
 1479|      0|                    .iter()
 1480|      0|                    .map(|(var, expr)| (var.clone(), expr.into()))
 1481|      0|                    .collect(),
 1482|      0|            },
 1483|       |            GraphPattern::Service {
 1484|      0|                inner,
 1485|      0|                name,
 1486|      0|                silent,
 1487|      0|            } => Self::Service {
 1488|      0|                inner: Box::new(inner.as_ref().into()),
 1489|      0|                name: name.clone(),
 1490|      0|                silent: *silent,
 1491|      0|            },
 1492|       |        }
 1493|    977|    }
_RNvXs7_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf8variable8VariableE4from:
  474|  1.60k|    fn from(value: Variable) -> Self {
  475|  1.60k|        Self::Variable(value)
  476|  1.60k|    }
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression15returns_boolean:
  365|     83|    fn returns_boolean(&self) -> bool {
  366|      2|        match self {
  367|       |            Self::Or(_)
  368|       |            | Self::And(_)
  369|       |            | Self::Equal(_, _)
  370|       |            | Self::SameTerm(_, _)
  371|       |            | Self::Greater(_, _)
  372|       |            | Self::GreaterOrEqual(_, _)
  373|       |            | Self::Less(_, _)
  374|       |            | Self::LessOrEqual(_, _)
  375|       |            | Self::Not(_)
  376|       |            | Self::Exists(_)
  377|       |            | Self::Bound(_)
  378|       |            | Self::FunctionCall(
  379|       |                Function::IsBlank | Function::IsIri | Function::IsLiteral | Function::IsNumeric,
  380|       |                _,
  381|     36|            ) => true,
  382|       |            #[cfg(feature = "rdf-star")]
  383|      0|            Self::FunctionCall(Function::IsTriple, _) => true,
  384|     25|            Self::Literal(literal) => literal.datatype() == xsd::BOOLEAN,
  385|     12|            Self::If(_, a, b) => a.returns_boolean() && b.returns_boolean(),
  386|     10|            _ => false,
  387|       |        }
  388|     83|    }
_RNvXsE_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPatternNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  636|  19.7k|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsZ_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_14MinusAlgorithmNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
 1525|      3|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsL_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_13JoinAlgorithmNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
 1497|     85|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression5equal:
  126|    286|    pub fn equal(left: Self, right: Self) -> Self {
  127|    286|        match (left, right) {
  128|      0|            (Self::NamedNode(left), Self::NamedNode(right)) => (left == right).into(),
  129|      2|            (Self::Literal(left), Self::Literal(right)) if left == right => true.into(),
  130|    285|            (left, right) => {
  131|    285|                let (left, right) = order_pair(left, right);
  132|    285|                Self::Equal(Box::new(left), Box::new(right))
  133|       |            }
  134|       |        }
  135|    286|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern7reduced:
  969|  6.23k|    pub fn reduced(inner: Self) -> Self {
  970|  6.23k|        if inner.is_empty() {
  971|     15|            return Self::empty();
  972|  6.22k|        }
  973|  6.22k|        Self::Reduced {
  974|  6.22k|            inner: Box::new(inner),
  975|  6.22k|        }
  976|  6.23k|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern19from_sparql_algebra:
 1114|  43.0k|    fn from_sparql_algebra(
 1115|  43.0k|        pattern: &AlGraphPattern,
 1116|  43.0k|        graph_name: Option<&NamedNodePattern>,
 1117|  43.0k|        blank_nodes: &mut HashMap<BlankNode, Variable>,
 1118|  43.0k|    ) -> Self {
 1119|  43.0k|        match pattern {
 1120|  10.2k|            AlGraphPattern::Bgp { patterns } => patterns
 1121|  10.2k|                .iter()
 1122|  10.2k|                .map(|p| {
 1123|       |                    let (subject, predicate, object) =
 1124|       |                        Self::triple_pattern_from_algebra(p, blank_nodes);
 1125|       |                    Self::QuadPattern {
 1126|       |                        subject,
 1127|       |                        predicate,
 1128|       |                        object,
 1129|       |                        graph_name: graph_name.cloned(),
 1130|       |                    }
 1131|  10.2k|                })
 1132|  10.2k|                .reduce(|a, b| Self::Join {
 1133|       |                    left: Box::new(a),
 1134|       |                    right: Box::new(b),
 1135|       |                    algorithm: JoinAlgorithm::default(),
 1136|  10.2k|                })
 1137|  10.2k|                .unwrap_or_else(Self::empty_singleton),
 1138|       |            AlGraphPattern::Path {
 1139|  9.46k|                subject,
 1140|  9.46k|                path,
 1141|  9.46k|                object,
 1142|  9.46k|            } => Self::Path {
 1143|  9.46k|                subject: Self::term_pattern_from_algebra(subject, blank_nodes),
 1144|  9.46k|                path: path.clone(),
 1145|  9.46k|                object: Self::term_pattern_from_algebra(object, blank_nodes),
 1146|  9.46k|                graph_name: graph_name.cloned(),
 1147|  9.46k|            },
 1148|  14.9k|            AlGraphPattern::Join { left, right } => Self::Join {
 1149|  14.9k|                left: Box::new(Self::from_sparql_algebra(left, graph_name, blank_nodes)),
 1150|  14.9k|                right: Box::new(Self::from_sparql_algebra(right, graph_name, blank_nodes)),
 1151|  14.9k|                algorithm: JoinAlgorithm::default(),
 1152|  14.9k|            },
 1153|       |            AlGraphPattern::LeftJoin {
 1154|    314|                left,
 1155|    314|                right,
 1156|    314|                expression,
 1157|    314|            } => Self::LeftJoin {
 1158|    314|                left: Box::new(Self::from_sparql_algebra(left, graph_name, blank_nodes)),
 1159|    314|                right: Box::new(Self::from_sparql_algebra(right, graph_name, blank_nodes)),
 1160|    314|                expression: expression.as_ref().map_or_else(
 1161|    314|                    || true.into(),
 1162|    314|                    |e| Expression::from_sparql_algebra(e, graph_name),
 1163|    314|                ),
 1164|    314|                algorithm: LeftJoinAlgorithm::default(),
 1165|    314|            },
 1166|       |            #[cfg(feature = "sep-0006")]
 1167|    468|            AlGraphPattern::Lateral { left, right } => Self::Lateral {
 1168|    468|                left: Box::new(Self::from_sparql_algebra(left, graph_name, blank_nodes)),
 1169|    468|                right: Box::new(Self::from_sparql_algebra(right, graph_name, blank_nodes)),
 1170|    468|            },
 1171|     30|            AlGraphPattern::Filter { inner, expr } => Self::Filter {
 1172|     30|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1173|     30|                expression: Expression::from_sparql_algebra(expr, graph_name),
 1174|     30|            },
 1175|     20|            AlGraphPattern::Union { left, right } => Self::Union {
 1176|     20|                inner: vec![
 1177|     20|                    Self::from_sparql_algebra(left, graph_name, blank_nodes),
 1178|     20|                    Self::from_sparql_algebra(right, graph_name, blank_nodes),
 1179|     20|                ],
 1180|     20|            },
 1181|  4.08k|            AlGraphPattern::Graph { inner, name } => {
 1182|  4.08k|                Self::from_sparql_algebra(inner, Some(name), blank_nodes)
 1183|       |            }
 1184|       |            AlGraphPattern::Extend {
 1185|    454|                inner,
 1186|    454|                expression,
 1187|    454|                variable,
 1188|    454|            } => Self::Extend {
 1189|    454|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1190|    454|                expression: Expression::from_sparql_algebra(expression, graph_name),
 1191|    454|                variable: variable.clone(),
 1192|    454|            },
 1193|     28|            AlGraphPattern::Minus { left, right } => Self::Minus {
 1194|     28|                left: Box::new(Self::from_sparql_algebra(left, graph_name, blank_nodes)),
 1195|     28|                right: Box::new(Self::from_sparql_algebra(right, graph_name, blank_nodes)),
 1196|     28|                algorithm: MinusAlgorithm::default(),
 1197|     28|            },
 1198|       |            AlGraphPattern::Values {
 1199|    268|                variables,
 1200|    268|                bindings,
 1201|    268|            } => Self::Values {
 1202|    268|                variables: variables.clone(),
 1203|    268|                bindings: bindings.clone(),
 1204|    268|            },
 1205|      0|            AlGraphPattern::OrderBy { inner, expression } => Self::OrderBy {
 1206|      0|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1207|      0|                expression: expression
 1208|      0|                    .iter()
 1209|      0|                    .map(|e| OrderExpression::from_sparql_algebra(e, graph_name))
 1210|      0|                    .collect(),
 1211|      0|            },
 1212|  1.57k|            AlGraphPattern::Project { inner, variables } => {
 1213|  1.57k|                let graph_name = if let Some(NamedNodePattern::Variable(graph_name)) = graph_name {
 1214|       |                    Some(NamedNodePattern::Variable(
 1215|      4|                        if variables.contains(graph_name) {
 1216|      0|                            graph_name.clone()
 1217|       |                        } else {
 1218|      4|                            new_var()
 1219|       |                        },
 1220|       |                    ))
 1221|       |                } else {
 1222|  1.56k|                    graph_name.cloned()
 1223|       |                };
 1224|  1.57k|                Self::Project {
 1225|  1.57k|                    inner: Box::new(Self::from_sparql_algebra(
 1226|  1.57k|                        inner,
 1227|  1.57k|                        graph_name.as_ref(),
 1228|  1.57k|                        &mut HashMap::new(),
 1229|  1.57k|                    )),
 1230|  1.57k|                    variables: variables.clone(),
 1231|  1.57k|                }
 1232|       |            }
 1233|    366|            AlGraphPattern::Distinct { inner } => Self::Distinct {
 1234|    366|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1235|    366|            },
 1236|    822|            AlGraphPattern::Reduced { inner } => Self::Distinct {
 1237|    822|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1238|    822|            },
 1239|       |            AlGraphPattern::Slice {
 1240|      0|                inner,
 1241|      0|                start,
 1242|      0|                length,
 1243|      0|            } => Self::Slice {
 1244|      0|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1245|      0|                start: *start,
 1246|      0|                length: *length,
 1247|      0|            },
 1248|       |            AlGraphPattern::Group {
 1249|      8|                inner,
 1250|      8|                variables,
 1251|      8|                aggregates,
 1252|      8|            } => Self::Group {
 1253|      8|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1254|      8|                variables: variables.clone(),
 1255|      8|                aggregates: aggregates
 1256|      8|                    .iter()
 1257|      8|                    .map(|(var, expr)| {
 1258|       |                        (
 1259|       |                            var.clone(),
 1260|       |                            AggregateExpression::from_sparql_algebra(expr, graph_name),
 1261|       |                        )
 1262|      8|                    })
 1263|      8|                    .collect(),
 1264|      8|            },
 1265|       |            AlGraphPattern::Service {
 1266|      0|                inner,
 1267|      0|                name,
 1268|      0|                silent,
 1269|      0|            } => Self::Service {
 1270|      0|                inner: Box::new(Self::from_sparql_algebra(inner, graph_name, blank_nodes)),
 1271|      0|                name: name.clone(),
 1272|      0|                silent: *silent,
 1273|      0|            },
 1274|       |        }
 1275|  43.0k|    }
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression10unary_plus:
  164|    105|    pub fn unary_plus(inner: Self) -> Self {
  165|    105|        Self::UnaryPlus(Box::new(inner))
  166|    105|    }
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression14used_variables:
  210|     64|    pub fn used_variables(&self) -> HashSet<&Variable> {
  211|     64|        let mut variables = HashSet::new();
  212|     64|        self.lookup_used_variables(&mut |v| {
  213|       |            variables.insert(v);
  214|     64|        });
  215|     64|        variables
  216|     64|    }
_RNvXs0_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf7literal7LiteralE4from:
  398|  24.4k|    fn from(value: Literal) -> Self {
  399|  24.4k|        Self::Literal(value)
  400|  24.4k|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern27triple_pattern_from_algebra:
 1277|  29.9k|    fn triple_pattern_from_algebra(
 1278|  29.9k|        pattern: &TriplePattern,
 1279|  29.9k|        blank_nodes: &mut HashMap<BlankNode, Variable>,
 1280|  29.9k|    ) -> (GroundTermPattern, NamedNodePattern, GroundTermPattern) {
 1281|  29.9k|        (
 1282|  29.9k|            Self::term_pattern_from_algebra(&pattern.subject, blank_nodes),
 1283|  29.9k|            pattern.predicate.clone(),
 1284|  29.9k|            Self::term_pattern_from_algebra(&pattern.object, blank_nodes),
 1285|  29.9k|        )
 1286|  29.9k|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern18is_empty_singleton:
  750|   109k|    pub fn is_empty_singleton(&self) -> bool {
  751|   109k|        if let Self::Values { bindings, .. } = self {
  752|    534|            bindings.len() == 1 && bindings.iter().all(|b| b.iter().all(Option::is_none))
  753|       |        } else {
  754|   108k|            false
  755|       |        }
  756|   109k|    }
_RNvXsm_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_17LeftJoinAlgorithmNtNtCs9nhK3FOW46N_4core7default7Default7default:
 1517|    314|    fn default() -> Self {
 1518|    314|        Self::HashBuildRightProbeLeft {
 1519|    314|            keys: Vec::default(),
 1520|    314|        }
 1521|    314|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern8distinct:
  960|  1.68k|    pub fn distinct(inner: Self) -> Self {
  961|  1.68k|        if inner.is_empty() {
  962|      0|            return Self::empty();
  963|  1.68k|        }
  964|  1.68k|        Self::Distinct {
  965|  1.68k|            inner: Box::new(inner),
  966|  1.68k|        }
  967|  1.68k|    }
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression13less_or_equal:
  160|      8|    pub fn less_or_equal(left: Self, right: Self) -> Self {
  161|      8|        Self::LessOrEqual(Box::new(left), Box::new(right))
  162|      8|    }
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression23effective_boolean_value:
  194|  23.5k|    pub fn effective_boolean_value(&self) -> Option<bool> {
  195|  23.5k|        if let Self::Literal(literal) = self {
  196|  21.8k|            match literal.datatype() {
  197|  21.8k|                xsd::BOOLEAN => match literal.value() {
  198|  21.7k|                    "true" | "1" => Some(true),
  199|     88|                    "false" | "0" => Some(false),
  200|      0|                    _ => None, // TODO
  201|       |                },
  202|     34|                xsd::STRING => Some(!literal.value().is_empty()),
  203|     31|                _ => None, // TODO
  204|       |            }
  205|       |        } else {
  206|  1.71k|            None
  207|       |        }
  208|  23.5k|    }
_RNvXsc_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_10ExpressionNtNtNtCs9nhK3FOW46N_4core3ops3bit3Not3not:
  578|    827|    fn not(self) -> Self {
  579|    827|        if let Some(v) = self.effective_boolean_value() {
  580|     95|            (!v).into()
  581|    732|        } else if let Self::Not(v) = self {
  582|     47|            if v.returns_boolean() {
  583|     37|                *v
  584|       |            } else {
  585|     10|                Self::And(vec![*v])
  586|       |            }
  587|       |        } else {
  588|    685|            Self::Not(Box::new(self))
  589|       |        }
  590|    827|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern9left_join:
  792|    393|    pub fn left_join(
  793|    393|        left: Self,
  794|    393|        right: Self,
  795|    393|        expression: Expression,
  796|    393|        algorithm: LeftJoinAlgorithm,
  797|    393|    ) -> Self {
  798|    393|        let expression_ebv = expression.effective_boolean_value();
  799|    393|        if left.is_empty()
  800|    393|            || right.is_empty()
  801|    392|            || right.is_empty_singleton()
  802|    362|            || expression_ebv == Some(false)
  803|       |        {
  804|     31|            return left;
  805|    362|        }
  806|    362|        Self::LeftJoin {
  807|    362|            left: Box::new(left),
  808|    362|            right: Box::new(right),
  809|    362|            expression: if expression_ebv == Some(true) {
  810|    362|                true.into()
  811|       |            } else {
  812|      0|                expression
  813|       |            },
  814|    362|            algorithm,
  815|       |        }
  816|    393|    }
_RNvXse_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_10ExpressionNtNtNtCs9nhK3FOW46N_4core3ops5arith3Sub3sub:
  605|    593|    fn sub(self, rhs: Self) -> Self {
  606|    593|        Self::Subtract(Box::new(self), Box::new(rhs))
  607|    593|    }
_RNvXsg_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_10ExpressionNtNtNtCs9nhK3FOW46N_4core3ops5arith3Div3div:
  622|  1.13k|    fn div(self, rhs: Self) -> Self {
  623|  1.13k|        Self::Divide(Box::new(self), Box::new(rhs))
  624|  1.13k|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern8is_empty:
  735|   139k|    fn is_empty(&self) -> bool {
  736|   139k|        if let Self::Values { bindings, .. } = self {
  737|  3.14k|            bindings.is_empty()
  738|       |        } else {
  739|   136k|            false
  740|       |        }
  741|   139k|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern15empty_singleton:
  743|  2.07k|    pub fn empty_singleton() -> Self {
  744|  2.07k|        Self::Values {
  745|  2.07k|            variables: Vec::new(),
  746|  2.07k|            bindings: vec![Vec::new()],
  747|  2.07k|        }
  748|  2.07k|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern5minus:
  818|     39|    pub fn minus(left: Self, right: Self, algorithm: MinusAlgorithm) -> Self {
  819|     39|        if left.is_empty() {
  820|      0|            return Self::empty();
  821|     39|        }
  822|     39|        if right.is_empty() {
  823|      0|            return left;
  824|     39|        }
  825|     39|        Self::Minus {
  826|     39|            left: Box::new(left),
  827|     39|            right: Box::new(right),
  828|     39|            algorithm,
  829|     39|        }
  830|     39|    }
_RNvNtCsj4YExd6TrWR_7sparopt7algebra7new_var:
 1624|  24.8k|fn new_var() -> Variable {
 1625|  24.8k|    Variable::new_unchecked(format!("{:x}", random::<u128>()))
 1626|  24.8k|}
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression4less:
  156|      4|    pub fn less(left: Self, right: Self) -> Self {
  157|      4|        Self::Less(Box::new(left), Box::new(right))
  158|      4|    }
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression4call:
  190|     18|    pub fn call(name: Function, args: Vec<Self>) -> Self {
  191|     18|        Self::FunctionCall(name, args)
  192|     18|    }
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression19from_sparql_algebra:
  255|  14.3k|    fn from_sparql_algebra(
  256|  14.3k|        expression: &AlExpression,
  257|  14.3k|        graph_name: Option<&NamedNodePattern>,
  258|  14.3k|    ) -> Self {
  259|  14.3k|        match expression {
  260|    378|            AlExpression::NamedNode(node) => Self::NamedNode(node.clone()),
  261|  1.49k|            AlExpression::Literal(literal) => Self::Literal(literal.clone()),
  262|  3.18k|            AlExpression::Variable(variable) => Self::Variable(variable.clone()),
  263|     18|            AlExpression::Or(left, right) => Self::Or(vec![
  264|     18|                Self::from_sparql_algebra(left, graph_name),
  265|     18|                Self::from_sparql_algebra(right, graph_name),
  266|     18|            ]),
  267|    184|            AlExpression::And(left, right) => Self::And(vec![
  268|    184|                Self::from_sparql_algebra(left, graph_name),
  269|    184|                Self::from_sparql_algebra(right, graph_name),
  270|    184|            ]),
  271|    108|            AlExpression::Equal(left, right) => Self::Equal(
  272|    108|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  273|    108|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  274|    108|            ),
  275|      0|            AlExpression::SameTerm(left, right) => Self::SameTerm(
  276|      0|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  277|      0|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  278|      0|            ),
  279|     32|            AlExpression::Greater(left, right) => Self::Greater(
  280|     32|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  281|     32|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  282|     32|            ),
  283|    120|            AlExpression::GreaterOrEqual(left, right) => Self::GreaterOrEqual(
  284|    120|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  285|    120|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  286|    120|            ),
  287|      8|            AlExpression::Less(left, right) => Self::Less(
  288|      8|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  289|      8|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  290|      8|            ),
  291|     16|            AlExpression::LessOrEqual(left, right) => Self::LessOrEqual(
  292|     16|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  293|     16|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  294|     16|            ),
  295|    952|            AlExpression::In(left, right) => {
  296|    952|                let left = Self::from_sparql_algebra(left, graph_name);
  297|    952|                match right.len() {
  298|    490|                    0 => Self::if_cond(left, false.into(), false.into()),
  299|    456|                    1 => Self::Equal(
  300|    456|                        Box::new(left),
  301|    456|                        Box::new(Self::from_sparql_algebra(&right[0], graph_name)),
  302|    456|                    ),
  303|      6|                    _ => Self::Or(
  304|      6|                        right
  305|      6|                            .iter()
  306|      6|                            .map(|e| {
  307|       |                                Self::Equal(
  308|       |                                    Box::new(left.clone()),
  309|       |                                    Box::new(Self::from_sparql_algebra(e, graph_name)),
  310|       |                                )
  311|      6|                            })
  312|      6|                            .collect(),
  313|      6|                    ),
  314|       |                }
  315|       |            }
  316|    178|            AlExpression::Add(left, right) => Self::Add(
  317|    178|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  318|    178|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  319|    178|            ),
  320|  1.18k|            AlExpression::Subtract(left, right) => Self::Subtract(
  321|  1.18k|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  322|  1.18k|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  323|  1.18k|            ),
  324|    392|            AlExpression::Multiply(left, right) => Self::Multiply(
  325|    392|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  326|    392|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  327|    392|            ),
  328|  2.25k|            AlExpression::Divide(left, right) => Self::Divide(
  329|  2.25k|                Box::new(Self::from_sparql_algebra(left, graph_name)),
  330|  2.25k|                Box::new(Self::from_sparql_algebra(right, graph_name)),
  331|  2.25k|            ),
  332|    210|            AlExpression::UnaryPlus(inner) => {
  333|    210|                Self::UnaryPlus(Box::new(Self::from_sparql_algebra(inner, graph_name)))
  334|       |            }
  335|  1.55k|            AlExpression::UnaryMinus(inner) => {
  336|  1.55k|                Self::UnaryMinus(Box::new(Self::from_sparql_algebra(inner, graph_name)))
  337|       |            }
  338|  1.65k|            AlExpression::Not(inner) => {
  339|  1.65k|                Self::Not(Box::new(Self::from_sparql_algebra(inner, graph_name)))
  340|       |            }
  341|     88|            AlExpression::Exists(inner) => Self::Exists(Box::new(
  342|     88|                GraphPattern::from_sparql_algebra(inner, graph_name, &mut HashMap::new()),
  343|     88|            )),
  344|    254|            AlExpression::Bound(variable) => Self::Bound(variable.clone()),
  345|      0|            AlExpression::If(cond, yes, no) => Self::If(
  346|      0|                Box::new(Self::from_sparql_algebra(cond, graph_name)),
  347|      0|                Box::new(Self::from_sparql_algebra(yes, graph_name)),
  348|      0|                Box::new(Self::from_sparql_algebra(no, graph_name)),
  349|      0|            ),
  350|     54|            AlExpression::Coalesce(inner) => Self::Coalesce(
  351|     54|                inner
  352|     54|                    .iter()
  353|     54|                    .map(|e| Self::from_sparql_algebra(e, graph_name))
  354|     54|                    .collect(),
  355|     54|            ),
  356|     36|            AlExpression::FunctionCall(name, args) => Self::FunctionCall(
  357|     36|                name.clone(),
  358|     36|                args.iter()
  359|     36|                    .map(|e| Self::from_sparql_algebra(e, graph_name))
  360|     36|                    .collect(),
  361|     36|            ),
  362|       |        }
  363|  14.3k|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern7project:
  953|  2.23k|    pub fn project(inner: Self, variables: Vec<Variable>) -> Self {
  954|  2.23k|        Self::Project {
  955|  2.23k|            inner: Box::new(inner),
  956|  2.23k|            variables,
  957|  2.23k|        }
  958|  2.23k|    }
_RNvXsj_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPatternINtNtCs9nhK3FOW46N_4core7convert4FromRNtNtCskGc5T8eVihK_9spargebra7algebra12GraphPatternE4from:
 1317|  4.17k|    fn from(pattern: &AlGraphPattern) -> Self {
 1318|  4.17k|        Self::from_sparql_algebra(pattern, None, &mut HashMap::new())
 1319|  4.17k|    }
_RNvXsl_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_13JoinAlgorithmNtNtCs9nhK3FOW46N_4core7default7Default7default:
 1503|  36.6k|    fn default() -> Self {
 1504|  36.6k|        Self::HashBuildLeftProbeRight {
 1505|  36.6k|            keys: Vec::default(),
 1506|  36.6k|        }
 1507|  36.6k|    }
_RNvXsx_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_10ExpressionNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
   22|    115|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvXsS_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_17LeftJoinAlgorithmNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
 1511|      6|#[derive(Eq, PartialEq, Debug, Clone, Hash)]
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression16greater_or_equal:
  152|     60|    pub fn greater_or_equal(left: Self, right: Self) -> Self {
  153|     60|        Self::GreaterOrEqual(Box::new(left), Box::new(right))
  154|     60|    }
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression8coalesce:
  186|     27|    pub fn coalesce(args: Vec<Self>) -> Self {
  187|     27|        Self::Coalesce(args)
  188|     27|    }
_RNvXs_NtCsj4YExd6TrWR_7sparopt7algebraNtB4_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FromNtNtCshJ9d6mhVUZV_5oxrdf10named_node9NamedNodeE4from:
  392|    189|    fn from(value: NamedNode) -> Self {
  393|    189|        Self::NamedNode(value)
  394|    189|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern6extend:
  886|    654|    pub fn extend(inner: Self, variable: Variable, expression: Expression) -> Self {
  887|    654|        if inner.is_empty() {
  888|      0|            return Self::empty();
  889|    654|        }
  890|    654|        Self::Extend {
  891|    654|            inner: Box::new(inner),
  892|    654|            variable,
  893|    654|            expression,
  894|    654|        }
  895|    654|    }
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression7greater:
  148|     16|    pub fn greater(left: Self, right: Self) -> Self {
  149|     16|        Self::Greater(Box::new(left), Box::new(right))
  150|     16|    }
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression7if_cond:
  178|    735|    pub fn if_cond(cond: Self, then: Self, els: Self) -> Self {
  179|    735|        match cond.effective_boolean_value() {
  180|      0|            Some(true) => then,
  181|      0|            Some(false) => els,
  182|    735|            None => Self::If(Box::new(cond), Box::new(then), Box::new(els)),
  183|       |        }
  184|    735|    }
_RNvXs8_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_10ExpressionINtNtCs9nhK3FOW46N_4core7convert4FrombE4from:
  480|  23.0k|    fn from(value: bool) -> Self {
  481|  23.0k|        Literal::from(value).into()
  482|  23.0k|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern5empty:
  727|     61|    pub fn empty() -> Self {
  728|     61|        Self::Values {
  729|     61|            variables: Vec::new(),
  730|     61|            bindings: Vec::new(),
  731|     61|        }
  732|     61|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern7lateral:
  776|  35.1k|    pub fn lateral(left: Self, right: Self) -> Self {
  777|  35.1k|        if left.is_empty() || right.is_empty() {
  778|      1|            return Self::empty();
  779|  35.1k|        }
  780|  35.1k|        if left.is_empty_singleton() {
  781|    215|            return right;
  782|  34.9k|        }
  783|  34.9k|        if right.is_empty_singleton() {
  784|      4|            return left;
  785|  34.9k|        }
  786|  34.9k|        Self::Lateral {
  787|  34.9k|            left: Box::new(left),
  788|  34.9k|            right: Box::new(right),
  789|  34.9k|        }
  790|  35.1k|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern6values:
  897|  1.15k|    pub fn values(
  898|  1.15k|        mut variables: Vec<Variable>,
  899|  1.15k|        mut bindings: Vec<Vec<Option<GroundTerm>>>,
  900|  1.15k|    ) -> Self {
  901|  1.15k|        let empty_rows = (0..variables.len())
  902|  1.15k|            .filter(|row| !bindings.iter().any(|binding| binding.get(*row).is_some()))
  903|  1.15k|            .collect::<Vec<_>>();
  904|  1.15k|        if !empty_rows.is_empty() {
  905|     31|            // We remove empty rows
  906|     31|            variables = variables
  907|     31|                .into_iter()
  908|     31|                .enumerate()
  909|     31|                .filter_map(|(i, v)| {
  910|       |                    if empty_rows.contains(&i) {
  911|       |                        None
  912|       |                    } else {
  913|       |                        Some(v)
  914|       |                    }
  915|     31|                })
  916|     31|                .collect();
  917|     31|            bindings = bindings
  918|     31|                .into_iter()
  919|     31|                .map(|binding| {
  920|       |                    binding
  921|       |                        .into_iter()
  922|       |                        .enumerate()
  923|       |                        .filter_map(|(i, v)| {
  924|       |                            if empty_rows.contains(&i) {
  925|       |                                None
  926|       |                            } else {
  927|       |                                Some(v)
  928|       |                            }
  929|       |                        })
  930|       |                        .collect()
  931|     31|                })
  932|     31|                .collect();
  933|  1.12k|        }
  934|  1.15k|        Self::Values {
  935|  1.15k|            variables,
  936|  1.15k|            bindings,
  937|  1.15k|        }
  938|  1.15k|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern4join:
  758|  19.4k|    pub fn join(left: Self, right: Self, algorithm: JoinAlgorithm) -> Self {
  759|  19.4k|        if left.is_empty() || right.is_empty() {
  760|     15|            return Self::empty();
  761|  19.3k|        }
  762|  19.3k|        if left.is_empty_singleton() {
  763|    118|            return right;
  764|  19.2k|        }
  765|  19.2k|        if right.is_empty_singleton() {
  766|      1|            return left;
  767|  19.2k|        }
  768|  19.2k|        Self::Join {
  769|  19.2k|            left: Box::new(left),
  770|  19.2k|            right: Box::new(right),
  771|  19.2k|            algorithm,
  772|  19.2k|        }
  773|  19.4k|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern6filter:
  858|  21.2k|    pub fn filter(inner: Self, expression: Expression) -> Self {
  859|  21.2k|        if inner.is_empty() {
  860|     30|            return Self::empty();
  861|  21.2k|        }
  862|       |        // We unwrap singleton And
  863|  21.2k|        let expression = match expression {
  864|     11|            Expression::And(mut l) if l.len() == 1 => l.pop().unwrap(),
  865|  21.2k|            e => e,
  866|       |        };
  867|  21.2k|        match expression.effective_boolean_value() {
  868|  21.1k|            Some(true) => inner,
  869|      0|            Some(false) => Self::empty(),
  870|     53|            None => match inner {
  871|       |                Self::Filter {
  872|      0|                    inner,
  873|      0|                    expression: e2,
  874|      0|                } => Self::Filter {
  875|      0|                    inner,
  876|      0|                    expression: expression & e2,
  877|      0|                },
  878|     53|                _ => Self::Filter {
  879|     53|                    inner: Box::new(inner),
  880|     53|                    expression,
  881|     53|                },
  882|       |            },
  883|       |        }
  884|  21.2k|    }
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression9same_term:
  137|      2|    pub fn same_term(left: Self, right: Self) -> Self {
  138|      2|        match (left, right) {
  139|      0|            (Self::NamedNode(left), Self::NamedNode(right)) => (left == right).into(),
  140|      0|            (Self::Literal(left), Self::Literal(right)) if left == right => true.into(),
  141|      2|            (left, right) => {
  142|      2|                let (left, right) = order_pair(left, right);
  143|      2|                Self::SameTerm(Box::new(left), Box::new(right))
  144|       |            }
  145|       |        }
  146|      2|    }
_RNvMNtCsj4YExd6TrWR_7sparopt7algebraNtB2_10Expression6exists:
  168|     44|    pub fn exists(inner: GraphPattern) -> Self {
  169|     44|        if inner.is_empty() {
  170|      0|            return false.into();
  171|     44|        }
  172|     44|        if inner.is_empty_singleton() {
  173|      1|            return true.into();
  174|     43|        }
  175|     43|        Self::Exists(Box::new(inner))
  176|     44|    }
_RNvXsn_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_14MinusAlgorithmNtNtCs9nhK3FOW46N_4core7default7Default7default:
 1531|     28|    fn default() -> Self {
 1532|     28|        Self::HashBuildRightProbeLeft {
 1533|     28|            keys: Vec::default(),
 1534|     28|        }
 1535|     28|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern5group:
  992|     12|    pub fn group(
  993|     12|        inner: Self,
  994|     12|        variables: Vec<Variable>,
  995|     12|        aggregates: Vec<(Variable, AggregateExpression)>,
  996|     12|    ) -> Self {
  997|     12|        if inner.is_empty() {
  998|      0|            return Self::empty();
  999|     12|        }
 1000|     12|        Self::Group {
 1001|     12|            inner: Box::new(inner),
 1002|     12|            variables,
 1003|     12|            aggregates,
 1004|     12|        }
 1005|     12|    }
_RNvXsd_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_10ExpressionNtNtNtCs9nhK3FOW46N_4core3ops5arith3Add3add:
  596|     89|    fn add(self, rhs: Self) -> Self {
  597|     89|        let (left, right) = order_pair(self, rhs);
  598|     89|        Self::Add(Box::new(left), Box::new(right))
  599|     89|    }
_RNvXsf_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_10ExpressionNtNtNtCs9nhK3FOW46N_4core3ops5arith3Mul3mul:
  613|    196|    fn mul(self, rhs: Self) -> Self {
  614|    196|        let (left, right) = order_pair(self, rhs);
  615|    196|        Self::Multiply(Box::new(left), Box::new(right))
  616|    196|    }
_RNvXsh_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_10ExpressionNtNtNtCs9nhK3FOW46N_4core3ops5arith3Neg3neg:
  630|    777|    fn neg(self) -> Self {
  631|    777|        Self::UnaryMinus(Box::new(self))
  632|    777|    }
_RNvMsi_NtCsj4YExd6TrWR_7sparopt7algebraNtB5_12GraphPattern25term_pattern_from_algebra:
 1288|  78.8k|    fn term_pattern_from_algebra(
 1289|  78.8k|        pattern: &TermPattern,
 1290|  78.8k|        blank_nodes: &mut HashMap<BlankNode, Variable>,
 1291|  78.8k|    ) -> GroundTermPattern {
 1292|  78.8k|        match pattern {
 1293|  7.43k|            TermPattern::NamedNode(node) => node.clone().into(),
 1294|  56.4k|            TermPattern::BlankNode(node) => blank_nodes
 1295|  56.4k|                .entry(node.clone())
 1296|  56.4k|                .or_insert_with(new_var)
 1297|  56.4k|                .clone()
 1298|  56.4k|                .into(),
 1299|  1.09k|            TermPattern::Literal(literal) => literal.clone().into(),
 1300|       |            #[cfg(feature = "rdf-star")]
 1301|      0|            TermPattern::Triple(pattern) => {
 1302|      0|                let (subject, predicate, object) =
 1303|      0|                    Self::triple_pattern_from_algebra(pattern, blank_nodes);
 1304|      0|                GroundTriplePattern {
 1305|      0|                    subject,
 1306|      0|                    predicate,
 1307|      0|                    object,
 1308|      0|                }
 1309|      0|                .into()
 1310|       |            }
 1311|  13.8k|            TermPattern::Variable(variable) => variable.clone().into(),
 1312|       |        }
 1313|  78.8k|    }

_RNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB2_9Optimizer17normalize_pattern:
   22|  43.3k|    fn normalize_pattern(pattern: GraphPattern, input_types: &VariableTypes) -> GraphPattern {
   23|  43.3k|        match pattern {
   24|       |            GraphPattern::QuadPattern {
   25|  14.9k|                subject,
   26|  14.9k|                predicate,
   27|  14.9k|                object,
   28|  14.9k|                graph_name,
   29|  14.9k|            } => GraphPattern::QuadPattern {
   30|  14.9k|                subject,
   31|  14.9k|                predicate,
   32|  14.9k|                object,
   33|  14.9k|                graph_name,
   34|  14.9k|            },
   35|       |            GraphPattern::Path {
   36|  4.73k|                subject,
   37|  4.73k|                path,
   38|  4.73k|                object,
   39|  4.73k|                graph_name,
   40|  4.73k|            } => GraphPattern::Path {
   41|  4.73k|                subject,
   42|  4.73k|                path,
   43|  4.73k|                object,
   44|  4.73k|                graph_name,
   45|  4.73k|            },
   46|       |            GraphPattern::Join {
   47|  18.3k|                left,
   48|  18.3k|                right,
   49|  18.3k|                algorithm,
   50|  18.3k|            } => GraphPattern::join(
   51|  18.3k|                Self::normalize_pattern(*left, input_types),
   52|  18.3k|                Self::normalize_pattern(*right, input_types),
   53|  18.3k|                algorithm,
   54|  18.3k|            ),
   55|       |            GraphPattern::LeftJoin {
   56|    157|                left,
   57|    157|                right,
   58|    157|                expression,
   59|    157|                algorithm,
   60|    157|            } => {
   61|    157|                let left = Self::normalize_pattern(*left, input_types);
   62|    157|                let right = Self::normalize_pattern(*right, input_types);
   63|    157|                let mut inner_types = infer_graph_pattern_types(&left, input_types.clone());
   64|    157|                inner_types.intersect_with(infer_graph_pattern_types(&right, input_types.clone()));
   65|    157|                GraphPattern::left_join(
   66|    157|                    left,
   67|    157|                    right,
   68|    157|                    Self::normalize_expression(expression, &inner_types),
   69|    157|                    algorithm,
   70|    157|                )
   71|       |            }
   72|       |            #[cfg(feature = "sep-0006")]
   73|    234|            GraphPattern::Lateral { left, right } => {
   74|    234|                let left = Self::normalize_pattern(*left, input_types);
   75|    234|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
   76|    234|                let right = Self::normalize_pattern(*right, &left_types);
   77|    234|                GraphPattern::lateral(left, right)
   78|       |            }
   79|     15|            GraphPattern::Filter { inner, expression } => {
   80|     15|                let inner = Self::normalize_pattern(*inner, input_types);
   81|     15|                let inner_types = infer_graph_pattern_types(&inner, input_types.clone());
   82|     15|                let expression = Self::normalize_expression(expression, &inner_types);
   83|     15|                let expression_type = infer_expression_type(&expression, &inner_types);
   84|     15|                if expression_type == VariableType::UNDEF {
   85|      0|                    GraphPattern::empty()
   86|       |                } else {
   87|     15|                    GraphPattern::filter(inner, expression)
   88|       |                }
   89|       |            }
   90|     10|            GraphPattern::Union { inner } => GraphPattern::union_all(
   91|     10|                inner
   92|     10|                    .into_iter()
   93|     10|                    .map(|e| Self::normalize_pattern(e, input_types)),
   94|     10|            ),
   95|       |            GraphPattern::Extend {
   96|    227|                inner,
   97|    227|                variable,
   98|    227|                expression,
   99|    227|            } => {
  100|    227|                let inner = Self::normalize_pattern(*inner, input_types);
  101|    227|                let inner_types = infer_graph_pattern_types(&inner, input_types.clone());
  102|    227|                let expression = Self::normalize_expression(expression, &inner_types);
  103|    227|                let expression_type = infer_expression_type(&expression, &inner_types);
  104|    227|                if expression_type == VariableType::UNDEF {
  105|       |                    // TODO: valid?
  106|      1|                    inner
  107|       |                } else {
  108|    226|                    GraphPattern::extend(inner, variable, expression)
  109|       |                }
  110|       |            }
  111|       |            GraphPattern::Minus {
  112|     14|                left,
  113|     14|                right,
  114|     14|                algorithm,
  115|     14|            } => GraphPattern::minus(
  116|     14|                Self::normalize_pattern(*left, input_types),
  117|     14|                Self::normalize_pattern(*right, input_types),
  118|     14|                algorithm,
  119|     14|            ),
  120|       |            GraphPattern::Values {
  121|  1.15k|                variables,
  122|  1.15k|                bindings,
  123|  1.15k|            } => GraphPattern::values(variables, bindings),
  124|      0|            GraphPattern::OrderBy { inner, expression } => {
  125|      0|                let inner = Self::normalize_pattern(*inner, input_types);
  126|      0|                let inner_types = infer_graph_pattern_types(&inner, input_types.clone());
  127|      0|                GraphPattern::order_by(
  128|      0|                    inner,
  129|      0|                    expression
  130|      0|                        .into_iter()
  131|      0|                        .map(|e| match e {
  132|       |                            OrderExpression::Asc(e) => {
  133|       |                                OrderExpression::Asc(Self::normalize_expression(e, &inner_types))
  134|       |                            }
  135|       |                            OrderExpression::Desc(e) => {
  136|       |                                OrderExpression::Desc(Self::normalize_expression(e, &inner_types))
  137|       |                            }
  138|      0|                        })
  139|      0|                        .collect(),
  140|      0|                )
  141|       |            }
  142|    786|            GraphPattern::Project { inner, variables } => {
  143|    786|                GraphPattern::project(Self::normalize_pattern(*inner, input_types), variables)
  144|       |            }
  145|    594|            GraphPattern::Distinct { inner } => {
  146|    594|                GraphPattern::distinct(Self::normalize_pattern(*inner, input_types))
  147|       |            }
  148|  2.08k|            GraphPattern::Reduced { inner } => {
  149|  2.08k|                GraphPattern::reduced(Self::normalize_pattern(*inner, input_types))
  150|       |            }
  151|       |            GraphPattern::Slice {
  152|      0|                inner,
  153|      0|                start,
  154|      0|                length,
  155|      0|            } => GraphPattern::slice(Self::normalize_pattern(*inner, input_types), start, length),
  156|       |            GraphPattern::Group {
  157|      4|                inner,
  158|      4|                variables,
  159|      4|                aggregates,
  160|      4|            } => {
  161|      4|                // TODO: min, max and sample don't care about DISTINCT
  162|      4|                GraphPattern::group(
  163|      4|                    Self::normalize_pattern(*inner, input_types),
  164|      4|                    variables,
  165|      4|                    aggregates,
  166|      4|                )
  167|       |            }
  168|       |            GraphPattern::Service {
  169|      0|                name,
  170|      0|                inner,
  171|      0|                silent,
  172|      0|            } => GraphPattern::service(Self::normalize_pattern(*inner, input_types), name, silent),
  173|       |        }
  174|  43.3k|    }
_RNvNtCsj4YExd6TrWR_7sparopt9optimizer21estimate_lateral_cost:
  989|  4.62M|fn estimate_lateral_cost(
  990|  4.62M|    left: &GraphPattern,
  991|  4.62M|    left_types: &VariableTypes,
  992|  4.62M|    right: &GraphPattern,
  993|  4.62M|    input_types: &VariableTypes,
  994|  4.62M|) -> usize {
  995|  4.62M|    estimate_graph_pattern_size(left, input_types)
  996|  4.62M|        .saturating_mul(estimate_graph_pattern_size(right, left_types))
  997|  4.62M|}
_RNvNtCsj4YExd6TrWR_7sparopt9optimizer35is_expression_fit_for_for_loop_join:
  828|     10|fn is_expression_fit_for_for_loop_join(
  829|     10|    expression: &Expression,
  830|     10|    input_types: &VariableTypes,
  831|     10|    entry_types: &VariableTypes,
  832|     10|) -> bool {
  833|     10|    match expression {
  834|     10|        Expression::NamedNode(_) | Expression::Literal(_) => true,
  835|      0|        Expression::Variable(v) | Expression::Bound(v) => {
  836|      0|            !input_types.get(v).undef || entry_types.get(v) == VariableType::UNDEF
  837|       |        }
  838|      0|        Expression::Or(inner)
  839|      0|        | Expression::And(inner)
  840|      0|        | Expression::Coalesce(inner)
  841|      0|        | Expression::FunctionCall(_, inner) => inner
  842|      0|            .iter()
  843|      0|            .all(|e| is_expression_fit_for_for_loop_join(e, input_types, entry_types)),
  844|      0|        Expression::Equal(a, b)
  845|      0|        | Expression::SameTerm(a, b)
  846|      0|        | Expression::Greater(a, b)
  847|      0|        | Expression::GreaterOrEqual(a, b)
  848|      0|        | Expression::Less(a, b)
  849|      0|        | Expression::LessOrEqual(a, b)
  850|      0|        | Expression::Add(a, b)
  851|      0|        | Expression::Subtract(a, b)
  852|      0|        | Expression::Multiply(a, b)
  853|      0|        | Expression::Divide(a, b) => {
  854|      0|            is_expression_fit_for_for_loop_join(a, input_types, entry_types)
  855|      0|                && is_expression_fit_for_for_loop_join(b, input_types, entry_types)
  856|       |        }
  857|      0|        Expression::UnaryPlus(e) | Expression::UnaryMinus(e) | Expression::Not(e) => {
  858|      0|            is_expression_fit_for_for_loop_join(e, input_types, entry_types)
  859|       |        }
  860|      0|        Expression::If(a, b, c) => {
  861|      0|            is_expression_fit_for_for_loop_join(a, input_types, entry_types)
  862|      0|                && is_expression_fit_for_for_loop_join(b, input_types, entry_types)
  863|      0|                && is_expression_fit_for_for_loop_join(c, input_types, entry_types)
  864|       |        }
  865|      0|        Expression::Exists(inner) => is_fit_for_for_loop_join(inner, input_types, entry_types),
  866|       |    }
  867|     10|}
_RNvNtCsj4YExd6TrWR_7sparopt9optimizer18estimate_path_size:
 1016|  5.03G|fn estimate_path_size(start_bound: bool, path: &PropertyPathExpression, end_bound: bool) -> usize {
 1017|  5.03G|    match path {
 1018|       |        PropertyPathExpression::NamedNode(_) => {
 1019|  1.26G|            estimate_triple_pattern_size(start_bound, true, end_bound)
 1020|       |        }
 1021|  1.17G|        PropertyPathExpression::Reverse(p) => estimate_path_size(end_bound, p, start_bound),
 1022|   702M|        PropertyPathExpression::Sequence(a, b) => {
 1023|   702M|            // We do a for loop join in the best direction
 1024|   702M|            min(
 1025|   702M|                estimate_path_size(start_bound, a, false)
 1026|   702M|                    .saturating_mul(estimate_path_size(true, b, end_bound)),
 1027|   702M|                estimate_path_size(start_bound, a, true)
 1028|   702M|                    .saturating_mul(estimate_path_size(false, b, end_bound)),
 1029|   702M|            )
 1030|       |        }
 1031|  64.4M|        PropertyPathExpression::Alternative(a, b) => estimate_path_size(start_bound, a, end_bound)
 1032|  64.4M|            .saturating_add(estimate_path_size(start_bound, b, end_bound)),
 1033|  9.89M|        PropertyPathExpression::ZeroOrMore(p) => {
 1034|  9.89M|            if start_bound && end_bound {
 1035|  2.31M|                1
 1036|  7.57M|            } else if start_bound || end_bound {
 1037|  4.96M|                estimate_path_size(start_bound, p, end_bound).saturating_mul(1000)
 1038|       |            } else {
 1039|  2.61M|                1_000_000_000
 1040|       |            }
 1041|       |        }
 1042|   206M|        PropertyPathExpression::OneOrMore(p) => {
 1043|   206M|            if start_bound && end_bound {
 1044|  51.4M|                1
 1045|       |            } else {
 1046|   155M|                estimate_path_size(start_bound, p, end_bound).saturating_mul(1000)
 1047|       |            }
 1048|       |        }
 1049|  1.52G|        PropertyPathExpression::ZeroOrOne(p) => {
 1050|  1.52G|            if start_bound && end_bound {
 1051|   380M|                1
 1052|  1.14G|            } else if start_bound || end_bound {
 1053|   763M|                estimate_path_size(start_bound, p, end_bound)
 1054|       |            } else {
 1055|   381M|                1_000_000_000
 1056|       |            }
 1057|       |        }
 1058|       |        PropertyPathExpression::NegatedPropertySet(_) => {
 1059|  91.1M|            estimate_triple_pattern_size(start_bound, false, end_bound)
 1060|       |        }
 1061|       |    }
 1062|  5.03G|}
_RNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB2_9Optimizer20normalize_expression:
  176|  7.84k|    fn normalize_expression(expression: Expression, types: &VariableTypes) -> Expression {
  177|  7.84k|        match expression {
  178|    189|            Expression::NamedNode(node) => node.into(),
  179|  1.39k|            Expression::Literal(literal) => literal.into(),
  180|  1.60k|            Expression::Variable(variable) => variable.into(),
  181|     12|            Expression::Or(inner) => Expression::or_all(
  182|     12|                inner
  183|     12|                    .into_iter()
  184|     12|                    .map(|e| Self::normalize_expression(e, types)),
  185|     12|            ),
  186|     92|            Expression::And(inner) => Expression::and_all(
  187|     92|                inner
  188|     92|                    .into_iter()
  189|     92|                    .map(|e| Self::normalize_expression(e, types)),
  190|     92|            ),
  191|    288|            Expression::Equal(left, right) => {
  192|    288|                let left = Self::normalize_expression(*left, types);
  193|    288|                let left_types = infer_expression_type(&left, types);
  194|    288|                let right = Self::normalize_expression(*right, types);
  195|    288|                let right_types = infer_expression_type(&right, types);
  196|       |                #[allow(unused_mut)]
  197|    288|                let mut must_use_equal = left_types.literal && right_types.literal;
  198|       |                #[cfg(feature = "rdf-star")]
  199|       |                {
  200|    288|                    must_use_equal = must_use_equal || left_types.triple && right_types.triple;
  201|       |                }
  202|    288|                if must_use_equal {
  203|    286|                    Expression::equal(left, right)
  204|       |                } else {
  205|      2|                    Expression::same_term(left, right)
  206|       |                }
  207|       |            }
  208|      0|            Expression::SameTerm(left, right) => Expression::same_term(
  209|      0|                Self::normalize_expression(*left, types),
  210|      0|                Self::normalize_expression(*right, types),
  211|      0|            ),
  212|     16|            Expression::Greater(left, right) => Expression::greater(
  213|     16|                Self::normalize_expression(*left, types),
  214|     16|                Self::normalize_expression(*right, types),
  215|     16|            ),
  216|     60|            Expression::GreaterOrEqual(left, right) => Expression::greater_or_equal(
  217|     60|                Self::normalize_expression(*left, types),
  218|     60|                Self::normalize_expression(*right, types),
  219|     60|            ),
  220|      4|            Expression::Less(left, right) => Expression::less(
  221|      4|                Self::normalize_expression(*left, types),
  222|      4|                Self::normalize_expression(*right, types),
  223|      4|            ),
  224|      8|            Expression::LessOrEqual(left, right) => Expression::less_or_equal(
  225|      8|                Self::normalize_expression(*left, types),
  226|      8|                Self::normalize_expression(*right, types),
  227|      8|            ),
  228|     89|            Expression::Add(left, right) => {
  229|     89|                Self::normalize_expression(*left, types) + Self::normalize_expression(*right, types)
  230|       |            }
  231|    593|            Expression::Subtract(left, right) => {
  232|    593|                Self::normalize_expression(*left, types) - Self::normalize_expression(*right, types)
  233|       |            }
  234|    196|            Expression::Multiply(left, right) => {
  235|    196|                Self::normalize_expression(*left, types) * Self::normalize_expression(*right, types)
  236|       |            }
  237|  1.13k|            Expression::Divide(left, right) => {
  238|  1.13k|                Self::normalize_expression(*left, types) / Self::normalize_expression(*right, types)
  239|       |            }
  240|    105|            Expression::UnaryPlus(inner) => {
  241|    105|                Expression::unary_plus(Self::normalize_expression(*inner, types))
  242|       |            }
  243|    777|            Expression::UnaryMinus(inner) => -Self::normalize_expression(*inner, types),
  244|    827|            Expression::Not(inner) => !Self::normalize_expression(*inner, types),
  245|     44|            Expression::Exists(inner) => Expression::exists(Self::normalize_pattern(*inner, types)),
  246|    127|            Expression::Bound(variable) => {
  247|    127|                let t = types.get(&variable);
  248|    127|                if !t.undef {
  249|      7|                    true.into()
  250|    120|                } else if t == VariableType::UNDEF {
  251|    120|                    false.into()
  252|       |                } else {
  253|      0|                    Expression::Bound(variable)
  254|       |                }
  255|       |            }
  256|    245|            Expression::If(cond, then, els) => Expression::if_cond(
  257|    245|                Self::normalize_expression(*cond, types),
  258|    245|                Self::normalize_expression(*then, types),
  259|    245|                Self::normalize_expression(*els, types),
  260|    245|            ),
  261|     27|            Expression::Coalesce(inners) => Expression::coalesce(
  262|     27|                inners
  263|     27|                    .into_iter()
  264|     27|                    .map(|e| Self::normalize_expression(e, types))
  265|     27|                    .collect(),
  266|     27|            ),
  267|     18|            Expression::FunctionCall(name, args) => Expression::call(
  268|     18|                name,
  269|     18|                args.into_iter()
  270|     18|                    .map(|e| Self::normalize_expression(e, types))
  271|     18|                    .collect(),
  272|     18|            ),
  273|       |        }
  274|  7.84k|    }
_RNvNtCsj4YExd6TrWR_7sparopt9optimizer34are_all_expression_variables_bound:
  808|     64|fn are_all_expression_variables_bound(
  809|     64|    expression: &Expression,
  810|     64|    variable_types: &VariableTypes,
  811|     64|) -> bool {
  812|     64|    expression
  813|     64|        .used_variables()
  814|     64|        .into_iter()
  815|     64|        .all(|v| !variable_types.get(v).undef)
  816|     64|}
_RNvNtCsj4YExd6TrWR_7sparopt9optimizer20has_common_variables:
  869|   358k|fn has_common_variables(
  870|   358k|    left: &VariableTypes,
  871|   358k|    right: &VariableTypes,
  872|   358k|    input_types: &VariableTypes,
  873|   358k|) -> bool {
  874|   358k|    // TODO: we should be smart and count as shared variables FILTER(?a = ?b)
  875|   358k|    left.iter().any(|(variable, left_type)| {
  876|       |        !left_type.undef && !right.get(variable).undef && input_types.get(variable).undef
  877|   358k|    })
  878|   358k|}
_RNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB2_9Optimizer22optimize_graph_pattern:
   15|  2.08k|    pub fn optimize_graph_pattern(pattern: GraphPattern) -> GraphPattern {
   16|  2.08k|        let pattern = Self::normalize_pattern(pattern, &VariableTypes::default());
   17|  2.08k|        let pattern = Self::reorder_joins(pattern, &VariableTypes::default());
   18|  2.08k|        Self::push_filters(pattern, Vec::new(), &VariableTypes::default())
   19|  2.08k|    }
_RNvNtCsj4YExd6TrWR_7sparopt9optimizer18join_key_variables:
  880|    605|fn join_key_variables(
  881|    605|    left: &VariableTypes,
  882|    605|    right: &VariableTypes,
  883|    605|    input_types: &VariableTypes,
  884|    605|) -> Vec<Variable> {
  885|    605|    left.iter()
  886|    605|        .filter(|(variable, left_type)| {
  887|       |            !left_type.undef && !right.get(variable).undef && input_types.get(variable).undef
  888|    605|        })
  889|    605|        .map(|(variable, _)| variable.clone())
  890|    605|        .collect()
  891|    605|}
_RNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB2_9Optimizer13reorder_joins:
  482|  5.92k|    fn reorder_joins(pattern: GraphPattern, input_types: &VariableTypes) -> GraphPattern {
  483|  5.92k|        match pattern {
  484|       |            GraphPattern::QuadPattern { .. }
  485|       |            | GraphPattern::Path { .. }
  486|  1.02k|            | GraphPattern::Values { .. } => pattern,
  487|  1.20k|            GraphPattern::Join { left, right, .. } => {
  488|  1.20k|                // We flatten the join operation
  489|  1.20k|                let mut to_reorder = Vec::new();
  490|  1.20k|                let mut todo = vec![*right, *left];
  491|  37.0k|                while let Some(e) = todo.pop() {
  492|  35.7k|                    if let GraphPattern::Join { left, right, .. } = e {
  493|  16.6k|                        todo.push(*right);
  494|  16.6k|                        todo.push(*left);
  495|  19.1k|                    } else {
  496|  19.1k|                        to_reorder.push(e);
  497|  19.1k|                    }
  498|       |                }
  499|       |
  500|       |                // We do first type inference
  501|  1.20k|                let to_reorder_types = to_reorder
  502|  1.20k|                    .iter()
  503|  1.20k|                    .map(|p| infer_graph_pattern_types(p, input_types.clone()))
  504|  1.20k|                    .collect::<Vec<_>>();
  505|  1.20k|
  506|  1.20k|                // We do greedy join reordering
  507|  1.20k|                let mut output_cartesian_product_joins = Vec::new();
  508|  1.20k|                let mut not_yet_reordered_ids = vec![true; to_reorder.len()];
  509|       |                // We look for the next connected component to reorder and pick the smallest element
  510|  2.90k|                while let Some(next_entry_id) = not_yet_reordered_ids
  511|  2.90k|                    .iter()
  512|  2.90k|                    .enumerate()
  513|  2.90k|                    .filter(|(_, v)| **v)
  514|  2.90k|                    .map(|(i, _)| i)
  515|  2.90k|                    .min_by_key(|i| estimate_graph_pattern_size(&to_reorder[*i], input_types))
  516|       |                {
  517|  1.69k|                    not_yet_reordered_ids[next_entry_id] = false; // It's now done
  518|  1.69k|                    let mut output = to_reorder[next_entry_id].clone();
  519|  1.69k|                    let mut output_types = to_reorder_types[next_entry_id].clone();
  520|       |                    // We look for an other child to join with that does not blow up the join cost
  521|  19.1k|                    while let Some(next_id) = not_yet_reordered_ids
  522|  19.1k|                        .iter()
  523|  19.1k|                        .enumerate()
  524|  19.1k|                        .filter(|(_, v)| **v)
  525|  19.1k|                        .map(|(i, _)| i)
  526|  19.1k|                        .filter(|i| {
  527|       |                            has_common_variables(&output_types, &to_reorder_types[*i], input_types)
  528|  19.1k|                        })
  529|  19.1k|                        .min_by_key(|i| {
  530|       |                            // Estimation of the join cost
  531|       |                            if cfg!(feature = "sep-0006")
  532|       |                                && is_fit_for_for_loop_join(
  533|       |                                    &to_reorder[*i],
  534|       |                                    input_types,
  535|       |                                    &output_types,
  536|       |                                )
  537|       |                            {
  538|       |                                estimate_lateral_cost(
  539|       |                                    &output,
  540|       |                                    &output_types,
  541|       |                                    &to_reorder[*i],
  542|       |                                    input_types,
  543|       |                                )
  544|       |                            } else {
  545|       |                                estimate_join_cost(
  546|       |                                    &output,
  547|       |                                    &to_reorder[*i],
  548|       |                                    &JoinAlgorithm::HashBuildLeftProbeRight {
  549|       |                                        keys: join_key_variables(
  550|       |                                            &output_types,
  551|       |                                            &to_reorder_types[*i],
  552|       |                                            input_types,
  553|       |                                        ),
  554|       |                                    },
  555|       |                                    input_types,
  556|       |                                )
  557|       |                            }
  558|  19.1k|                        })
  559|       |                    {
  560|  17.4k|                        not_yet_reordered_ids[next_id] = false; // It's now done
  561|  17.4k|                        let next = to_reorder[next_id].clone();
  562|       |                        #[cfg(feature = "sep-0006")]
  563|  17.4k|                        {
  564|  17.4k|                            output = if is_fit_for_for_loop_join(&next, input_types, &output_types)
  565|       |                            {
  566|  17.4k|                                GraphPattern::lateral(output, next)
  567|       |                            } else {
  568|      6|                                GraphPattern::join(
  569|      6|                                    output,
  570|      6|                                    next,
  571|      6|                                    JoinAlgorithm::HashBuildLeftProbeRight {
  572|      6|                                        keys: join_key_variables(
  573|      6|                                            &output_types,
  574|      6|                                            &to_reorder_types[next_id],
  575|      6|                                            input_types,
  576|      6|                                        ),
  577|      6|                                    },
  578|      6|                                )
  579|       |                            };
  580|       |                        }
  581|       |                        #[cfg(not(feature = "sep-0006"))]
  582|       |                        {
  583|       |                            output = GraphPattern::join(
  584|       |                                output,
  585|       |                                next,
  586|       |                                JoinAlgorithm::HashBuildLeftProbeRight {
  587|       |                                    keys: join_key_variables(
  588|       |                                        &output_types,
  589|       |                                        &to_reorder_types[next_id],
  590|       |                                        input_types,
  591|       |                                    ),
  592|       |                                },
  593|       |                            );
  594|       |                        }
  595|  17.4k|                        output_types.intersect_with(to_reorder_types[next_id].clone());
  596|       |                    }
  597|  1.69k|                    output_cartesian_product_joins.push(output);
  598|       |                }
  599|  1.20k|                output_cartesian_product_joins
  600|  1.20k|                    .into_iter()
  601|  1.20k|                    .reduce(|left, right| {
  602|       |                        let keys = join_key_variables(
  603|       |                            &infer_graph_pattern_types(&left, input_types.clone()),
  604|       |                            &infer_graph_pattern_types(&right, input_types.clone()),
  605|       |                            input_types,
  606|       |                        );
  607|       |                        if estimate_graph_pattern_size(&left, input_types)
  608|       |                            <= estimate_graph_pattern_size(&right, input_types)
  609|       |                        {
  610|       |                            GraphPattern::join(
  611|       |                                left,
  612|       |                                right,
  613|       |                                JoinAlgorithm::HashBuildLeftProbeRight { keys },
  614|       |                            )
  615|       |                        } else {
  616|       |                            GraphPattern::join(
  617|       |                                right,
  618|       |                                left,
  619|       |                                JoinAlgorithm::HashBuildLeftProbeRight { keys },
  620|       |                            )
  621|       |                        }
  622|  1.20k|                    })
  623|  1.20k|                    .unwrap()
  624|       |            }
  625|       |            #[cfg(feature = "sep-0006")]
  626|     11|            GraphPattern::Lateral { left, right } => {
  627|     11|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
  628|     11|                GraphPattern::lateral(
  629|     11|                    Self::reorder_joins(*left, input_types),
  630|     11|                    Self::reorder_joins(*right, &left_types),
  631|     11|                )
  632|       |            }
  633|       |            GraphPattern::LeftJoin {
  634|    115|                left,
  635|    115|                right,
  636|    115|                expression,
  637|    115|                ..
  638|    115|            } => {
  639|    115|                let left = Self::reorder_joins(*left, input_types);
  640|    115|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
  641|    115|                let right = Self::reorder_joins(*right, input_types);
  642|    115|                let right_types = infer_graph_pattern_types(&right, input_types.clone());
  643|    115|                #[cfg(feature = "sep-0006")]
  644|    115|                {
  645|    115|                    if is_fit_for_for_loop_join(&right, input_types, &left_types)
  646|     98|                        && has_common_variables(&left_types, &right_types, input_types)
  647|       |                    {
  648|     27|                        return GraphPattern::lateral(
  649|     27|                            left,
  650|     27|                            GraphPattern::left_join(
  651|     27|                                GraphPattern::empty_singleton(),
  652|     27|                                right,
  653|     27|                                expression,
  654|     27|                                LeftJoinAlgorithm::HashBuildRightProbeLeft { keys: Vec::new() },
  655|     27|                            ),
  656|     27|                        );
  657|     88|                    }
  658|     88|                }
  659|     88|                GraphPattern::left_join(
  660|     88|                    left,
  661|     88|                    right,
  662|     88|                    expression,
  663|     88|                    LeftJoinAlgorithm::HashBuildRightProbeLeft {
  664|     88|                        keys: join_key_variables(&left_types, &right_types, input_types),
  665|     88|                    },
  666|     88|                )
  667|       |            }
  668|     11|            GraphPattern::Minus { left, right, .. } => {
  669|     11|                let left = Self::reorder_joins(*left, input_types);
  670|     11|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
  671|     11|                let right = Self::reorder_joins(*right, input_types);
  672|     11|                let right_types = infer_graph_pattern_types(&right, input_types.clone());
  673|     11|                GraphPattern::minus(
  674|     11|                    left,
  675|     11|                    right,
  676|     11|                    MinusAlgorithm::HashBuildRightProbeLeft {
  677|     11|                        keys: join_key_variables(&left_types, &right_types, input_types),
  678|     11|                    },
  679|     11|                )
  680|       |            }
  681|       |            GraphPattern::Extend {
  682|    213|                inner,
  683|    213|                expression,
  684|    213|                variable,
  685|    213|            } => GraphPattern::extend(
  686|    213|                Self::reorder_joins(*inner, input_types),
  687|    213|                variable,
  688|    213|                expression,
  689|    213|            ),
  690|     15|            GraphPattern::Filter { inner, expression } => {
  691|     15|                GraphPattern::filter(Self::reorder_joins(*inner, input_types), expression)
  692|       |            }
  693|      5|            GraphPattern::Union { inner } => GraphPattern::union_all(
  694|      5|                inner
  695|      5|                    .into_iter()
  696|      5|                    .map(|c| Self::reorder_joins(c, input_types)),
  697|      5|            ),
  698|       |            GraphPattern::Slice {
  699|      0|                inner,
  700|      0|                start,
  701|      0|                length,
  702|      0|            } => GraphPattern::slice(Self::reorder_joins(*inner, input_types), start, length),
  703|    534|            GraphPattern::Distinct { inner } => {
  704|    534|                GraphPattern::distinct(Self::reorder_joins(*inner, input_types))
  705|       |            }
  706|  2.07k|            GraphPattern::Reduced { inner } => {
  707|  2.07k|                GraphPattern::reduced(Self::reorder_joins(*inner, input_types))
  708|       |            }
  709|    716|            GraphPattern::Project { inner, variables } => {
  710|    716|                GraphPattern::project(Self::reorder_joins(*inner, input_types), variables)
  711|       |            }
  712|      0|            GraphPattern::OrderBy { inner, expression } => {
  713|      0|                GraphPattern::order_by(Self::reorder_joins(*inner, input_types), expression)
  714|       |            }
  715|      0|            service @ GraphPattern::Service { .. } => {
  716|      0|                // We don't do join reordering inside of SERVICE calls, we don't know about cardinalities
  717|      0|                service
  718|       |            }
  719|       |            GraphPattern::Group {
  720|      4|                inner,
  721|      4|                variables,
  722|      4|                aggregates,
  723|      4|            } => GraphPattern::group(
  724|      4|                Self::reorder_joins(*inner, input_types),
  725|      4|                variables,
  726|      4|                aggregates,
  727|      4|            ),
  728|       |        }
  729|  5.92k|    }
_RNvNtCsj4YExd6TrWR_7sparopt9optimizer27is_named_node_pattern_bound:
 1077|  4.21M|fn is_named_node_pattern_bound(pattern: &NamedNodePattern, input_types: &VariableTypes) -> bool {
 1078|  4.21M|    match pattern {
 1079|  1.76M|        NamedNodePattern::NamedNode(_) => true,
 1080|  2.45M|        NamedNodePattern::Variable(v) => !input_types.get(v).undef,
 1081|       |    }
 1082|  4.21M|}
_RNvNtCsj4YExd6TrWR_7sparopt9optimizer28estimate_triple_pattern_size:
  999|  1.35G|fn estimate_triple_pattern_size(
 1000|  1.35G|    subject_bound: bool,
 1001|  1.35G|    predicate_bound: bool,
 1002|  1.35G|    object_bound: bool,
 1003|  1.35G|) -> usize {
 1004|  1.35G|    match (subject_bound, predicate_bound, object_bound) {
 1005|   104M|        (true, true, true) => 1,
 1006|   507M|        (true, true, false) => 10,
 1007|  14.4M|        (true, false, true) => 2,
 1008|   508M|        (false, true, true) => 10_000,
 1009|  27.7M|        (true, false, false) => 100,
 1010|  22.0M|        (false, false, false) => 1_000_000_000,
 1011|   147M|        (false, true, false) => 1_000_000,
 1012|  27.2M|        (false, false, true) => 100_000,
 1013|       |    }
 1014|  1.35G|}
_RNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB2_9Optimizer12push_filters:
  276|  42.0k|    fn push_filters(
  277|  42.0k|        pattern: GraphPattern,
  278|  42.0k|        mut filters: Vec<Expression>,
  279|  42.0k|        input_types: &VariableTypes,
  280|  42.0k|    ) -> GraphPattern {
  281|  42.0k|        match pattern {
  282|       |            GraphPattern::QuadPattern { .. }
  283|       |            | GraphPattern::Path { .. }
  284|       |            | GraphPattern::Values { .. } => {
  285|  20.2k|                GraphPattern::filter(pattern, Expression::and_all(filters))
  286|       |            }
  287|       |            GraphPattern::Join {
  288|    580|                left,
  289|    580|                right,
  290|    580|                algorithm,
  291|    580|            } => {
  292|    580|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
  293|    580|                let right_types = infer_graph_pattern_types(&right, input_types.clone());
  294|    580|                let mut left_filters = Vec::new();
  295|    580|                let mut right_filters = Vec::new();
  296|    580|                let mut final_filters = Vec::new();
  297|    580|                for filter in filters {
  298|      0|                    let push_left = are_all_expression_variables_bound(&filter, &left_types);
  299|      0|                    let push_right = are_all_expression_variables_bound(&filter, &right_types);
  300|      0|                    if push_left {
  301|      0|                        if push_right {
  302|      0|                            left_filters.push(filter.clone());
  303|      0|                            right_filters.push(filter);
  304|      0|                        } else {
  305|      0|                            left_filters.push(filter);
  306|      0|                        }
  307|      0|                    } else if push_right {
  308|      0|                        right_filters.push(filter);
  309|      0|                    } else {
  310|      0|                        final_filters.push(filter);
  311|      0|                    }
  312|       |                }
  313|    580|                GraphPattern::filter(
  314|    580|                    GraphPattern::join(
  315|    580|                        Self::push_filters(*left, left_filters, input_types),
  316|    580|                        Self::push_filters(*right, right_filters, input_types),
  317|    580|                        algorithm,
  318|    580|                    ),
  319|    580|                    Expression::and_all(final_filters),
  320|    580|                )
  321|       |            }
  322|       |            #[cfg(feature = "sep-0006")]
  323|  17.4k|            GraphPattern::Lateral { left, right } => {
  324|  17.4k|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
  325|  17.4k|                let mut left_filters = Vec::new();
  326|  17.4k|                let mut right_filters = Vec::new();
  327|  17.5k|                for filter in filters {
  328|     64|                    let push_left = are_all_expression_variables_bound(&filter, &left_types);
  329|     64|                    if push_left {
  330|     55|                        left_filters.push(filter);
  331|     55|                    } else {
  332|      9|                        right_filters.push(filter);
  333|      9|                    }
  334|       |                }
  335|  17.4k|                let left = Self::push_filters(*left, left_filters, input_types);
  336|  17.4k|                let right = Self::push_filters(*right, right_filters, &left_types);
  337|       |                if let GraphPattern::Filter {
  338|      8|                    inner: right,
  339|      8|                    expression,
  340|  17.4k|                } = right
  341|       |                {
  342|       |                    // We prefer to have filter out of the lateral rather than inside the right part
  343|      8|                    GraphPattern::filter(GraphPattern::lateral(left, *right), expression)
  344|       |                } else {
  345|  17.4k|                    GraphPattern::lateral(left, right)
  346|       |                }
  347|       |            }
  348|       |            GraphPattern::LeftJoin {
  349|    121|                left,
  350|    121|                right,
  351|    121|                expression,
  352|    121|                algorithm,
  353|    121|            } => {
  354|    121|                let left_types = infer_graph_pattern_types(&left, input_types.clone());
  355|    121|                let right_types = infer_graph_pattern_types(&right, input_types.clone());
  356|    121|                let mut left_filters = Vec::new();
  357|    121|                let mut right_filters = Vec::new();
  358|    121|                let mut final_filters = Vec::new();
  359|    121|                for filter in filters {
  360|      0|                    let push_left = are_all_expression_variables_bound(&filter, &left_types);
  361|      0|                    if push_left {
  362|      0|                        left_filters.push(filter);
  363|      0|                    } else {
  364|      0|                        final_filters.push(filter);
  365|      0|                    }
  366|       |                }
  367|    121|                let expression = if expression.effective_boolean_value().is_none()
  368|      0|                    && (are_all_expression_variables_bound(&expression, &right_types)
  369|      0|                        || are_no_expression_variables_bound(&expression, &left_types))
  370|       |                {
  371|      0|                    right_filters.push(expression);
  372|      0|                    true.into()
  373|       |                } else {
  374|    121|                    expression
  375|       |                };
  376|    121|                GraphPattern::filter(
  377|    121|                    GraphPattern::left_join(
  378|    121|                        Self::push_filters(*left, left_filters, input_types),
  379|    121|                        Self::push_filters(*right, right_filters, input_types),
  380|    121|                        expression,
  381|    121|                        algorithm,
  382|    121|                    ),
  383|    121|                    Expression::and_all(final_filters),
  384|    121|                )
  385|       |            }
  386|       |            GraphPattern::Minus {
  387|     14|                left,
  388|     14|                right,
  389|     14|                algorithm,
  390|     14|            } => GraphPattern::minus(
  391|     14|                Self::push_filters(*left, filters, input_types),
  392|     14|                Self::push_filters(*right, Vec::new(), input_types),
  393|     14|                algorithm,
  394|     14|            ),
  395|       |            GraphPattern::Extend {
  396|    215|                inner,
  397|    215|                expression,
  398|    215|                variable,
  399|    215|            } => {
  400|    215|                // TODO: handle the case where the filter overrides an expression variable (should not happen in SPARQL but allowed in the algebra)
  401|    215|                let mut inner_filters = Vec::new();
  402|    215|                let mut final_filters = Vec::new();
  403|    215|                for filter in filters {
  404|      0|                    let extend_variable_used =
  405|      0|                        filter.used_variables().into_iter().any(|v| *v == variable);
  406|      0|                    if extend_variable_used {
  407|      0|                        final_filters.push(filter);
  408|      0|                    } else {
  409|      0|                        inner_filters.push(filter);
  410|      0|                    }
  411|       |                }
  412|    215|                GraphPattern::filter(
  413|    215|                    GraphPattern::extend(
  414|    215|                        Self::push_filters(*inner, inner_filters, input_types),
  415|    215|                        variable,
  416|    215|                        expression,
  417|    215|                    ),
  418|    215|                    Expression::and_all(final_filters),
  419|    215|                )
  420|       |            }
  421|     15|            GraphPattern::Filter { inner, expression } => {
  422|     15|                if let Expression::And(expressions) = expression {
  423|      3|                    filters.extend(expressions)
  424|       |                } else {
  425|     12|                    filters.push(expression)
  426|       |                };
  427|     15|                Self::push_filters(*inner, filters, input_types)
  428|       |            }
  429|     10|            GraphPattern::Union { inner } => GraphPattern::union_all(
  430|     10|                inner
  431|     10|                    .into_iter()
  432|     10|                    .map(|c| Self::push_filters(c, filters.clone(), input_types)),
  433|     10|            ),
  434|       |            GraphPattern::Slice {
  435|      0|                inner,
  436|      0|                start,
  437|      0|                length,
  438|      0|            } => GraphPattern::filter(
  439|      0|                GraphPattern::slice(
  440|      0|                    Self::push_filters(*inner, Vec::new(), input_types),
  441|      0|                    start,
  442|      0|                    length,
  443|      0|                ),
  444|      0|                Expression::and_all(filters),
  445|      0|            ),
  446|    554|            GraphPattern::Distinct { inner } => {
  447|    554|                GraphPattern::distinct(Self::push_filters(*inner, filters, input_types))
  448|       |            }
  449|  2.07k|            GraphPattern::Reduced { inner } => {
  450|  2.07k|                GraphPattern::reduced(Self::push_filters(*inner, filters, input_types))
  451|       |            }
  452|    736|            GraphPattern::Project { inner, variables } => {
  453|    736|                GraphPattern::project(Self::push_filters(*inner, filters, input_types), variables)
  454|       |            }
  455|      0|            GraphPattern::OrderBy { inner, expression } => {
  456|      0|                GraphPattern::order_by(Self::push_filters(*inner, filters, input_types), expression)
  457|       |            }
  458|       |            GraphPattern::Service {
  459|      0|                inner,
  460|      0|                name,
  461|      0|                silent,
  462|      0|            } => GraphPattern::service(
  463|      0|                Self::push_filters(*inner, filters, input_types),
  464|      0|                name,
  465|      0|                silent,
  466|      0|            ),
  467|       |            GraphPattern::Group {
  468|      4|                inner,
  469|      4|                variables,
  470|      4|                aggregates,
  471|      4|            } => GraphPattern::filter(
  472|      4|                GraphPattern::group(
  473|      4|                    Self::push_filters(*inner, Vec::new(), input_types),
  474|      4|                    variables,
  475|      4|                    aggregates,
  476|      4|                ),
  477|      4|                Expression::and_all(filters),
  478|      4|            ),
  479|       |        }
  480|  42.0k|    }
_RNvNtCsj4YExd6TrWR_7sparopt9optimizer27estimate_graph_pattern_size:
  893|  9.27M|fn estimate_graph_pattern_size(pattern: &GraphPattern, input_types: &VariableTypes) -> usize {
  894|  9.27M|    match pattern {
  895|    781|        GraphPattern::Values { bindings, .. } => bindings.len(),
  896|       |        GraphPattern::QuadPattern {
  897|  4.21M|            subject,
  898|  4.21M|            predicate,
  899|  4.21M|            object,
  900|  4.21M|            ..
  901|  4.21M|        } => estimate_triple_pattern_size(
  902|  4.21M|            is_term_pattern_bound(subject, input_types),
  903|  4.21M|            is_named_node_pattern_bound(predicate, input_types),
  904|  4.21M|            is_term_pattern_bound(object, input_types),
  905|  4.21M|        ),
  906|       |        GraphPattern::Path {
  907|   629k|            subject,
  908|   629k|            path,
  909|   629k|            object,
  910|   629k|            ..
  911|   629k|        } => estimate_path_size(
  912|   629k|            is_term_pattern_bound(subject, input_types),
  913|   629k|            path,
  914|   629k|            is_term_pattern_bound(object, input_types),
  915|   629k|        ),
  916|       |        GraphPattern::Join {
  917|    879|            left,
  918|    879|            right,
  919|    879|            algorithm,
  920|    879|        } => estimate_join_cost(left, right, algorithm, input_types),
  921|       |        GraphPattern::LeftJoin {
  922|     14|            left,
  923|     14|            right,
  924|     14|            algorithm,
  925|     14|            ..
  926|     14|        } => match algorithm {
  927|     14|            LeftJoinAlgorithm::HashBuildRightProbeLeft { keys } => {
  928|     14|                let left_size = estimate_graph_pattern_size(left, input_types);
  929|     14|                max(
  930|     14|                    left_size,
  931|     14|                    left_size
  932|     14|                        .saturating_mul(estimate_graph_pattern_size(
  933|     14|                            right,
  934|     14|                            &infer_graph_pattern_types(right, input_types.clone()),
  935|     14|                        ))
  936|     14|                        .saturating_div(1_000_usize.saturating_pow(keys.len().try_into().unwrap())),
  937|     14|                )
  938|       |            }
  939|       |        },
  940|       |        #[cfg(feature = "sep-0006")]
  941|  4.43M|        GraphPattern::Lateral { left, right } => estimate_lateral_cost(
  942|  4.43M|            left,
  943|  4.43M|            &infer_graph_pattern_types(left, input_types.clone()),
  944|  4.43M|            right,
  945|  4.43M|            input_types,
  946|  4.43M|        ),
  947|     15|        GraphPattern::Union { inner } => inner
  948|     15|            .iter()
  949|     15|            .map(|inner| estimate_graph_pattern_size(inner, input_types))
  950|     15|            .fold(0, usize::saturating_add),
  951|      6|        GraphPattern::Minus { left, .. } => estimate_graph_pattern_size(left, input_types),
  952|      0|        GraphPattern::Filter { inner, .. }
  953|      4|        | GraphPattern::Extend { inner, .. }
  954|      0|        | GraphPattern::OrderBy { inner, .. }
  955|    116|        | GraphPattern::Project { inner, .. }
  956|    116|        | GraphPattern::Distinct { inner, .. }
  957|      0|        | GraphPattern::Reduced { inner, .. }
  958|      0|        | GraphPattern::Group { inner, .. }
  959|    236|        | GraphPattern::Service { inner, .. } => estimate_graph_pattern_size(inner, input_types),
  960|       |        GraphPattern::Slice {
  961|      0|            inner,
  962|      0|            start,
  963|      0|            length,
  964|      0|        } => {
  965|      0|            let inner = estimate_graph_pattern_size(inner, input_types);
  966|      0|            if let Some(length) = length {
  967|      0|                min(inner, *length - *start)
  968|       |            } else {
  969|      0|                inner
  970|       |            }
  971|       |        }
  972|       |    }
  973|  9.27M|}
_RNvNtCsj4YExd6TrWR_7sparopt9optimizer21is_term_pattern_bound:
 1064|  9.68M|fn is_term_pattern_bound(pattern: &GroundTermPattern, input_types: &VariableTypes) -> bool {
 1065|  9.68M|    match pattern {
 1066|   748k|        GroundTermPattern::NamedNode(_) | GroundTermPattern::Literal(_) => true,
 1067|  8.93M|        GroundTermPattern::Variable(v) => !input_types.get(v).undef,
 1068|       |        #[cfg(feature = "rdf-star")]
 1069|      0|        GroundTermPattern::Triple(t) => {
 1070|      0|            is_term_pattern_bound(&t.subject, input_types)
 1071|      0|                && is_named_node_pattern_bound(&t.predicate, input_types)
 1072|      0|                && is_term_pattern_bound(&t.object, input_types)
 1073|       |        }
 1074|       |    }
 1075|  9.68M|}
_RNvNtCsj4YExd6TrWR_7sparopt9optimizer18estimate_join_cost:
  975|    890|fn estimate_join_cost(
  976|    890|    left: &GraphPattern,
  977|    890|    right: &GraphPattern,
  978|    890|    algorithm: &JoinAlgorithm,
  979|    890|    input_types: &VariableTypes,
  980|    890|) -> usize {
  981|    890|    match algorithm {
  982|    890|        JoinAlgorithm::HashBuildLeftProbeRight { keys } => {
  983|    890|            estimate_graph_pattern_size(left, input_types)
  984|    890|                .saturating_mul(estimate_graph_pattern_size(right, input_types))
  985|    890|                .saturating_div(1_000_usize.saturating_pow(keys.len().try_into().unwrap()))
  986|    890|        }
  987|    890|    }
  988|    890|}
_RNvNtCsj4YExd6TrWR_7sparopt9optimizer24is_fit_for_for_loop_join:
  732|   213k|fn is_fit_for_for_loop_join(
  733|   213k|    pattern: &GraphPattern,
  734|   213k|    global_input_types: &VariableTypes,
  735|   213k|    entry_types: &VariableTypes,
  736|   213k|) -> bool {
  737|   213k|    // TODO: think more about it
  738|   213k|    match pattern {
  739|       |        GraphPattern::Values { .. }
  740|       |        | GraphPattern::QuadPattern { .. }
  741|   212k|        | GraphPattern::Path { .. } => true,
  742|       |        #[cfg(feature = "sep-0006")]
  743|  1.52k|        GraphPattern::Lateral { left, right } => {
  744|  1.52k|            is_fit_for_for_loop_join(left, global_input_types, entry_types)
  745|  1.52k|                && is_fit_for_for_loop_join(right, global_input_types, entry_types)
  746|       |        }
  747|       |        GraphPattern::LeftJoin {
  748|     15|            left,
  749|     15|            right,
  750|     15|            expression,
  751|     15|            ..
  752|     15|        } => {
  753|     15|            if !is_fit_for_for_loop_join(left, global_input_types, entry_types) {
  754|      0|                return false;
  755|     15|            }
  756|     15|
  757|     15|            // It is not ok to transform into for loop join if right binds a variable also bound by the entry part of the for loop join
  758|     15|            let mut left_types = infer_graph_pattern_types(left, global_input_types.clone());
  759|     15|            let right_types = infer_graph_pattern_types(right, global_input_types.clone());
  760|     15|            if right_types.iter().any(|(variable, t)| {
  761|       |                *t != VariableType::UNDEF
  762|       |                    && left_types.get(variable).undef
  763|       |                    && entry_types.get(variable) != VariableType::UNDEF
  764|     15|            }) {
  765|      5|                return false;
  766|     10|            }
  767|     10|
  768|     10|            // We don't forget the final expression
  769|     10|            left_types.intersect_with(right_types);
  770|     10|            is_expression_fit_for_for_loop_join(expression, &left_types, entry_types)
  771|       |        }
  772|      0|        GraphPattern::Union { inner } => inner
  773|      0|            .iter()
  774|      0|            .all(|i| is_fit_for_for_loop_join(i, global_input_types, entry_types)),
  775|      0|        GraphPattern::Filter { inner, expression } => {
  776|      0|            is_fit_for_for_loop_join(inner, global_input_types, entry_types)
  777|      0|                && is_expression_fit_for_for_loop_join(
  778|      0|                    expression,
  779|      0|                    &infer_graph_pattern_types(inner, global_input_types.clone()),
  780|      0|                    entry_types,
  781|      0|                )
  782|       |        }
  783|       |        GraphPattern::Extend {
  784|      0|            inner,
  785|      0|            expression,
  786|      0|            variable,
  787|      0|        } => {
  788|      0|            is_fit_for_for_loop_join(inner, global_input_types, entry_types)
  789|      0|                && entry_types.get(variable) == VariableType::UNDEF
  790|      0|                && is_expression_fit_for_for_loop_join(
  791|      0|                    expression,
  792|      0|                    &infer_graph_pattern_types(inner, global_input_types.clone()),
  793|      0|                    entry_types,
  794|      0|                )
  795|       |        }
  796|       |        GraphPattern::Join { .. }
  797|       |        | GraphPattern::Minus { .. }
  798|       |        | GraphPattern::Service { .. }
  799|       |        | GraphPattern::OrderBy { .. }
  800|       |        | GraphPattern::Distinct { .. }
  801|       |        | GraphPattern::Reduced { .. }
  802|       |        | GraphPattern::Slice { .. }
  803|       |        | GraphPattern::Project { .. }
  804|     29|        | GraphPattern::Group { .. } => false,
  805|       |    }
  806|   213k|}
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss3_0B6_:
  525|   358k|                        .map(|(i, _)| i)
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss5_0B6_:
  529|   193k|                        .min_by_key(|i| {
  530|   193k|                            // Estimation of the join cost
  531|   193k|                            if cfg!(feature = "sep-0006")
  532|   193k|                                && is_fit_for_for_loop_join(
  533|   193k|                                    &to_reorder[*i],
  534|   193k|                                    input_types,
  535|   193k|                                    &output_types,
  536|   193k|                                )
  537|       |                            {
  538|   193k|                                estimate_lateral_cost(
  539|   193k|                                    &output,
  540|   193k|                                    &output_types,
  541|   193k|                                    &to_reorder[*i],
  542|   193k|                                    input_types,
  543|   193k|                                )
  544|       |                            } else {
  545|     11|                                estimate_join_cost(
  546|     11|                                    &output,
  547|     11|                                    &to_reorder[*i],
  548|     11|                                    &JoinAlgorithm::HashBuildLeftProbeRight {
  549|     11|                                        keys: join_key_variables(
  550|     11|                                            &output_types,
  551|     11|                                            &to_reorder_types[*i],
  552|     11|                                            input_types,
  553|     11|                                        ),
  554|     11|                                    },
  555|     11|                                    input_types,
  556|     11|                                )
  557|       |                            }
  558|   193k|                        })
_RNCNvNtCsj4YExd6TrWR_7sparopt9optimizer18join_key_variables0B5_:
  886|  1.99k|        .filter(|(variable, left_type)| {
  887|  1.99k|            !left_type.undef && !right.get(variable).undef && input_types.get(variable).undef
  888|  1.99k|        })
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss7_0B6_:
  696|     10|                    .map(|c| Self::reorder_joins(c, input_types)),
_RNCNvNtCsj4YExd6TrWR_7sparopt9optimizer24is_fit_for_for_loop_join0B5_:
  760|     92|            if right_types.iter().any(|(variable, t)| {
  761|     92|                *t != VariableType::UNDEF
  762|     92|                    && left_types.get(variable).undef
  763|     87|                    && entry_types.get(variable) != VariableType::UNDEF
  764|     92|            }) {
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer17normalize_pattern0B6_:
   93|     20|                    .map(|e| Self::normalize_pattern(e, input_types)),
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss0_0B6_:
  514|  23.0k|                    .map(|(i, _)| i)
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer20normalize_expression0B6_:
  184|     24|                    .map(|e| Self::normalize_expression(e, types)),
_RNCNvNtCsj4YExd6TrWR_7sparopt9optimizer34are_all_expression_variables_bound0B5_:
  815|     37|        .all(|v| !variable_types.get(v).undef)
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer13reorder_joins0B6_:
  503|  19.1k|                    .map(|p| infer_graph_pattern_types(p, input_types.clone()))
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss4_0B6_:
  526|   358k|                        .filter(|i| {
  527|   358k|                            has_common_variables(&output_types, &to_reorder_types[*i], input_types)
  528|   358k|                        })
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer20normalize_expressions0_0B6_:
  264|      5|                    .map(|e| Self::normalize_expression(e, types))
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss_0B6_:
  513|  45.4k|                    .filter(|(_, v)| **v)
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss1_0B6_:
  515|  23.0k|                    .min_by_key(|i| estimate_graph_pattern_size(&to_reorder[*i], input_types))
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss2_0B6_:
  524|   736k|                        .filter(|(_, v)| **v)
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer20normalize_expressions1_0B6_:
  270|     19|                    .map(|e| Self::normalize_expression(e, types))
_RNCNvNtCsj4YExd6TrWR_7sparopt9optimizer18join_key_variabless_0B5_:
  889|     24|        .map(|(variable, _)| variable.clone())
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer13reorder_joinss6_0B6_:
  601|    489|                    .reduce(|left, right| {
  602|    489|                        let keys = join_key_variables(
  603|    489|                            &infer_graph_pattern_types(&left, input_types.clone()),
  604|    489|                            &infer_graph_pattern_types(&right, input_types.clone()),
  605|    489|                            input_types,
  606|    489|                        );
  607|    489|                        if estimate_graph_pattern_size(&left, input_types)
  608|    489|                            <= estimate_graph_pattern_size(&right, input_types)
  609|       |                        {
  610|    410|                            GraphPattern::join(
  611|    410|                                left,
  612|    410|                                right,
  613|    410|                                JoinAlgorithm::HashBuildLeftProbeRight { keys },
  614|    410|                            )
  615|       |                        } else {
  616|     79|                            GraphPattern::join(
  617|     79|                                right,
  618|     79|                                left,
  619|     79|                                JoinAlgorithm::HashBuildLeftProbeRight { keys },
  620|     79|                            )
  621|       |                        }
  622|    489|                    })
_RNCNvNtCsj4YExd6TrWR_7sparopt9optimizer27estimate_graph_pattern_size0B5_:
  949|     30|            .map(|inner| estimate_graph_pattern_size(inner, input_types))
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer12push_filterss_0B6_:
  432|     20|                    .map(|c| Self::push_filters(c, filters.clone(), input_types)),
_RNCNvMNtCsj4YExd6TrWR_7sparopt9optimizerNtB4_9Optimizer20normalize_expressions_0B6_:
  189|    184|                    .map(|e| Self::normalize_expression(e, types)),
_RNCNvNtCsj4YExd6TrWR_7sparopt9optimizer20has_common_variables0B5_:
  875|  3.91M|    left.iter().any(|(variable, left_type)| {
  876|  3.91M|        !left_type.undef && !right.get(variable).undef && input_types.get(variable).undef
  877|  3.91M|    })

_RNvXs5_NtCsj4YExd6TrWR_7sparopt14type_inferenceNtB5_12VariableTypeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  344|   124k|#[derive(Clone, Copy, Eq, PartialEq, Debug, Default)]
_RNvMNtCsj4YExd6TrWR_7sparopt14type_inferenceNtB2_13VariableTypes3get:
  301|   224M|    pub fn get(&self, variable: &Variable) -> VariableType {
  302|   224M|        self.inner
  303|   224M|            .get(variable)
  304|   224M|            .copied()
  305|   224M|            .unwrap_or(VariableType::UNDEF)
  306|   224M|    }
_RNvXsa_NtCsj4YExd6TrWR_7sparopt14type_inferenceNtB5_12VariableTypeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB7_:
  344|   208M|#[derive(Clone, Copy, Eq, PartialEq, Debug, Default)]
_RNvMNtCsj4YExd6TrWR_7sparopt14type_inferenceNtB2_13VariableTypes14intersect_with:
  312|  22.2k|    pub fn intersect_with(&mut self, other: Self) {
  313|  84.6k|        for (v, t) in other.inner {
  314|  62.3k|            self.intersect_variable_with(v, t);
  315|  62.3k|        }
  316|  22.2k|    }
_RNvNtCsj4YExd6TrWR_7sparopt14type_inference21infer_expression_type:
  171|    882|pub fn infer_expression_type(expression: &Expression, types: &VariableTypes) -> VariableType {
  172|      2|    match expression {
  173|      0|        Expression::NamedNode(_) => VariableType::NAMED_NODE,
  174|       |        Expression::Literal(_) | Expression::Exists(_) | Expression::Bound(_) => {
  175|     47|            VariableType::LITERAL
  176|       |        }
  177|      3|        Expression::Variable(v) => types.get(v),
  178|       |        Expression::FunctionCall(Function::Datatype | Function::Iri, _) => {
  179|      0|            VariableType::NAMED_NODE | VariableType::UNDEF
  180|       |        }
  181|       |        #[cfg(feature = "rdf-star")]
  182|       |        Expression::FunctionCall(Function::Predicate, _) => {
  183|      0|            VariableType::NAMED_NODE | VariableType::UNDEF
  184|       |        }
  185|      0|        Expression::FunctionCall(Function::BNode, args) => {
  186|      0|            if args.is_empty() {
  187|      0|                VariableType::BLANK_NODE
  188|       |            } else {
  189|      0|                VariableType::BLANK_NODE | VariableType::UNDEF
  190|       |            }
  191|       |        }
  192|       |        Expression::FunctionCall(
  193|       |            Function::Rand | Function::Now | Function::Uuid | Function::StrUuid,
  194|       |            _,
  195|      0|        ) => VariableType::LITERAL,
  196|       |        Expression::Or(_)
  197|       |        | Expression::And(_)
  198|       |        | Expression::Equal(_, _)
  199|       |        | Expression::Greater(_, _)
  200|       |        | Expression::GreaterOrEqual(_, _)
  201|       |        | Expression::Less(_, _)
  202|       |        | Expression::LessOrEqual(_, _)
  203|       |        | Expression::Add(_, _)
  204|       |        | Expression::Subtract(_, _)
  205|       |        | Expression::Multiply(_, _)
  206|       |        | Expression::Divide(_, _)
  207|       |        | Expression::UnaryPlus(_)
  208|       |        | Expression::UnaryMinus(_)
  209|       |        | Expression::Not(_)
  210|       |        | Expression::FunctionCall(
  211|       |            Function::Str
  212|       |            | Function::Lang
  213|       |            | Function::LangMatches
  214|       |            | Function::Abs
  215|       |            | Function::Ceil
  216|       |            | Function::Floor
  217|       |            | Function::Round
  218|       |            | Function::Concat
  219|       |            | Function::SubStr
  220|       |            | Function::StrLen
  221|       |            | Function::Replace
  222|       |            | Function::UCase
  223|       |            | Function::LCase
  224|       |            | Function::EncodeForUri
  225|       |            | Function::Contains
  226|       |            | Function::StrStarts
  227|       |            | Function::StrEnds
  228|       |            | Function::StrBefore
  229|       |            | Function::StrAfter
  230|       |            | Function::Year
  231|       |            | Function::Month
  232|       |            | Function::Day
  233|       |            | Function::Hours
  234|       |            | Function::Minutes
  235|       |            | Function::Seconds
  236|       |            | Function::Timezone
  237|       |            | Function::Tz
  238|       |            | Function::Md5
  239|       |            | Function::Sha1
  240|       |            | Function::Sha256
  241|       |            | Function::Sha384
  242|       |            | Function::Sha512
  243|       |            | Function::StrLang
  244|       |            | Function::StrDt
  245|       |            | Function::IsIri
  246|       |            | Function::IsBlank
  247|       |            | Function::IsLiteral
  248|       |            | Function::IsNumeric
  249|       |            | Function::Regex,
  250|       |            _,
  251|    823|        ) => VariableType::LITERAL | VariableType::UNDEF,
  252|       |        #[cfg(feature = "sep-0002")]
  253|       |        Expression::FunctionCall(Function::Adjust, _) => {
  254|      0|            VariableType::LITERAL | VariableType::UNDEF
  255|       |        }
  256|       |        #[cfg(feature = "rdf-star")]
  257|       |        Expression::FunctionCall(Function::IsTriple, _) => {
  258|      0|            VariableType::LITERAL | VariableType::UNDEF
  259|       |        }
  260|      1|        Expression::SameTerm(left, right) => {
  261|      1|            if infer_expression_type(left, types).undef || infer_expression_type(right, types).undef
  262|       |            {
  263|      1|                VariableType::LITERAL | VariableType::UNDEF
  264|       |            } else {
  265|      0|                VariableType::LITERAL
  266|       |            }
  267|       |        }
  268|      8|        Expression::If(_, then, els) => {
  269|      8|            infer_expression_type(then, types) | infer_expression_type(els, types)
  270|       |        }
  271|      0|        Expression::Coalesce(inner) => {
  272|      0|            let mut t = VariableType::UNDEF;
  273|      0|            for e in inner {
  274|      0|                let new = infer_expression_type(e, types);
  275|      0|                t = t | new;
  276|      0|                if !new.undef {
  277|      0|                    t.undef = false;
  278|      0|                    return t;
  279|      0|                }
  280|       |            }
  281|      0|            t
  282|       |        }
  283|       |        #[cfg(feature = "rdf-star")]
  284|      0|        Expression::FunctionCall(Function::Triple, _) => VariableType::TRIPLE | VariableType::UNDEF,
  285|       |        #[cfg(feature = "rdf-star")]
  286|       |        Expression::FunctionCall(Function::Subject, _) => {
  287|      0|            VariableType::SUBJECT | VariableType::UNDEF
  288|       |        }
  289|       |        #[cfg(feature = "rdf-star")]
  290|      0|        Expression::FunctionCall(Function::Object, _) => VariableType::TERM | VariableType::UNDEF,
  291|      0|        Expression::FunctionCall(Function::Custom(_), _) => VariableType::ANY,
  292|       |    }
  293|    882|}
_RNvXs1_NtCsj4YExd6TrWR_7sparopt14type_inferenceNtB5_12VariableTypeNtNtNtCs9nhK3FOW46N_4core3ops3bit6BitAnd6bitand:
  440|   208M|    fn bitand(self, other: Self) -> Self {
  441|   208M|        Self {
  442|   208M|            undef: self.undef && other.undef,
  443|   208M|            named_node: self.named_node && other.named_node
  444|  75.1M|                || (self.undef && other.named_node)
  445|   250k|                || (self.named_node && other.undef),
  446|   208M|            blank_node: self.blank_node && other.blank_node
  447|   123M|                || (self.undef && other.blank_node)
  448|  55.2M|                || (self.blank_node && other.undef),
  449|   208M|            literal: self.literal && other.literal
  450|   204M|                || (self.undef && other.literal)
  451|   162M|                || (self.literal && other.undef),
  452|       |            #[cfg(feature = "rdf-star")]
  453|   208M|            triple: self.triple && other.triple
  454|   123M|                || (self.undef && other.triple)
  455|  55.2M|                || (self.triple && other.undef),
  456|       |        }
  457|   208M|    }
_RNvXsc_NtCsj4YExd6TrWR_7sparopt14type_inferenceNtB5_12VariableTypeNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
  344|   250k|#[derive(Clone, Copy, Eq, PartialEq, Debug, Default)]
_RNvMNtCsj4YExd6TrWR_7sparopt14type_inferenceNtB2_13VariableTypes23intersect_variable_with:
  335|   208M|    fn intersect_variable_with(&mut self, variable: Variable, t: VariableType) {
  336|   208M|        let t = self.get(&variable) & t;
  337|   208M|        if t != VariableType::UNDEF {
  338|   208M|            self.inner.insert(variable, t);
  339|   208M|        }
  340|   208M|    }
_RNvXs0_NtCsj4YExd6TrWR_7sparopt14type_inferenceNtB5_12VariableTypeNtNtNtCs9nhK3FOW46N_4core3ops3bit5BitOr5bitor:
  424|    832|    fn bitor(self, other: Self) -> Self {
  425|    832|        Self {
  426|    832|            undef: self.undef || other.undef,
  427|    832|            named_node: self.named_node || other.named_node,
  428|    832|            blank_node: self.blank_node || other.blank_node,
  429|    832|            literal: self.literal || other.literal,
  430|       |            #[cfg(feature = "rdf-star")]
  431|    832|            triple: self.triple || other.triple,
  432|       |        }
  433|    832|    }
_RNvMNtCsj4YExd6TrWR_7sparopt14type_inferenceNtB2_13VariableTypes4iter:
  308|   359k|    pub fn iter(&self) -> impl Iterator<Item = (&Variable, &VariableType)> {
  309|   359k|        self.inner.iter()
  310|   359k|    }
_RNvXs3_NtCsj4YExd6TrWR_7sparopt14type_inferenceNtB5_13VariableTypesNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB7_:
  295|  4.49M|#[derive(Default, Clone, Debug)]
_RNvNtCsj4YExd6TrWR_7sparopt14type_inference25infer_graph_pattern_types:
    8|   172M|pub fn infer_graph_pattern_types(
    9|   172M|    pattern: &GraphPattern,
   10|   172M|    mut types: VariableTypes,
   11|   172M|) -> VariableTypes {
   12|   172M|    match pattern {
   13|       |        GraphPattern::QuadPattern {
   14|  77.2M|            subject,
   15|  77.2M|            predicate,
   16|  77.2M|            object,
   17|  77.2M|            graph_name,
   18|  77.2M|        } => {
   19|  77.2M|            add_ground_term_pattern_types(subject, &mut types, false);
   20|  77.2M|            if let NamedNodePattern::Variable(v) = predicate {
   21|  43.5M|                types.intersect_variable_with(v.clone(), VariableType::NAMED_NODE)
   22|  33.7M|            }
   23|  77.2M|            add_ground_term_pattern_types(object, &mut types, true);
   24|  77.2M|            if let Some(NamedNodePattern::Variable(v)) = graph_name {
   25|  1.82M|                types.intersect_variable_with(v.clone(), VariableType::NAMED_NODE)
   26|  75.4M|            }
   27|  77.2M|            types
   28|       |        }
   29|       |        GraphPattern::Path {
   30|  11.1M|            subject,
   31|  11.1M|            object,
   32|  11.1M|            graph_name,
   33|  11.1M|            ..
   34|  11.1M|        } => {
   35|  11.1M|            add_ground_term_pattern_types(subject, &mut types, false);
   36|  11.1M|            add_ground_term_pattern_types(object, &mut types, true);
   37|  11.1M|            if let Some(NamedNodePattern::Variable(v)) = graph_name {
   38|   144k|                types.intersect_variable_with(v.clone(), VariableType::NAMED_NODE)
   39|  11.0M|            }
   40|  11.1M|            types
   41|       |        }
   42|  4.58k|        GraphPattern::Join { left, right, .. } => {
   43|  4.58k|            let mut output_types = infer_graph_pattern_types(left, types.clone());
   44|  4.58k|            output_types.intersect_with(infer_graph_pattern_types(right, types));
   45|  4.58k|            output_types
   46|       |        }
   47|       |        #[cfg(feature = "sep-0006")]
   48|  83.9M|        GraphPattern::Lateral { left, right } => {
   49|  83.9M|            infer_graph_pattern_types(right, infer_graph_pattern_types(left, types))
   50|       |        }
   51|     76|        GraphPattern::LeftJoin { left, right, .. } => {
   52|     76|            let mut right_types = infer_graph_pattern_types(right, types.clone()); // TODO: expression
   53|    446|            for t in right_types.inner.values_mut() {
   54|    446|                t.undef = true; // Right might be unset
   55|    446|            }
   56|     76|            let mut output_types = infer_graph_pattern_types(left, types);
   57|     76|            output_types.intersect_with(right_types);
   58|     76|            output_types
   59|       |        }
   60|     10|        GraphPattern::Minus { left, .. } => infer_graph_pattern_types(left, types),
   61|     15|        GraphPattern::Union { inner } => inner
   62|     15|            .iter()
   63|     15|            .map(|inner| infer_graph_pattern_types(inner, types.clone()))
   64|     15|            .reduce(|mut a, b| {
   65|       |                a.union_with(b);
   66|       |                a
   67|     15|            })
   68|     15|            .unwrap_or_default(),
   69|       |        GraphPattern::Extend {
   70|     47|            inner,
   71|     47|            variable,
   72|     47|            expression,
   73|     47|        } => {
   74|     47|            let mut types = infer_graph_pattern_types(inner, types);
   75|     47|            types.intersect_variable_with(
   76|     47|                variable.clone(),
   77|     47|                infer_expression_type(expression, &types),
   78|     47|            );
   79|     47|            types
   80|       |        }
   81|      4|        GraphPattern::Filter { inner, .. } => infer_graph_pattern_types(inner, types),
   82|    338|        GraphPattern::Project { inner, variables } => VariableTypes {
   83|    338|            inner: infer_graph_pattern_types(inner, types)
   84|    338|                .inner
   85|    338|                .into_iter()
   86|    338|                .filter(|(v, _)| variables.contains(v))
   87|    338|                .collect(),
   88|    338|        },
   89|    251|        GraphPattern::Distinct { inner }
   90|      0|        | GraphPattern::Reduced { inner }
   91|      0|        | GraphPattern::OrderBy { inner, .. }
   92|    251|        | GraphPattern::Slice { inner, .. } => infer_graph_pattern_types(inner, types),
   93|       |        GraphPattern::Group {
   94|      5|            inner,
   95|      5|            variables,
   96|      5|            aggregates,
   97|      5|        } => {
   98|      5|            let types = infer_graph_pattern_types(inner, types);
   99|      5|            VariableTypes {
  100|      5|                inner: infer_graph_pattern_types(inner, types)
  101|      5|                    .inner
  102|      5|                    .into_iter()
  103|      5|                    .filter(|(v, _)| variables.contains(v))
  104|      5|                    .chain(aggregates.iter().map(|(v, _)| (v.clone(), VariableType::ANY))) //TODO: guess from aggregate
  105|      5|                    .collect(),
  106|      5|            }
  107|       |        }
  108|       |        GraphPattern::Values {
  109|  5.58k|            variables,
  110|  5.58k|            bindings,
  111|       |        } => {
  112|   250k|            for (i, v) in variables.iter().enumerate() {
  113|   250k|                let mut t = VariableType::default();
  114|   507k|                for binding in bindings {
  115|   256k|                    match binding[i] {
  116|  33.4k|                        Some(GroundTerm::NamedNode(_)) => t.named_node = true,
  117|  27.9k|                        Some(GroundTerm::Literal(_)) => t.literal = true,
  118|       |                        #[cfg(feature = "rdf-star")]
  119|      0|                        Some(GroundTerm::Triple(_)) => t.triple = true,
  120|   194k|                        None => t.undef = true,
  121|       |                    }
  122|       |                }
  123|   250k|                types.intersect_variable_with(v.clone(), t)
  124|       |            }
  125|  5.58k|            types
  126|       |        }
  127|       |        GraphPattern::Service {
  128|      0|            name,
  129|      0|            inner,
  130|      0|            silent,
  131|      0|        } => {
  132|      0|            let parent_types = types.clone();
  133|      0|            let mut types = infer_graph_pattern_types(inner, types);
  134|      0|            if let NamedNodePattern::Variable(v) = name {
  135|      0|                types.intersect_variable_with(v.clone(), VariableType::NAMED_NODE)
  136|      0|            }
  137|      0|            if *silent {
  138|      0|                // On failure, single empty solution
  139|      0|                types.union_with(parent_types);
  140|      0|            }
  141|      0|            types
  142|       |        }
  143|       |    }
  144|   172M|}
_RNvNtCsj4YExd6TrWR_7sparopt14type_inference29add_ground_term_pattern_types:
  146|   176M|fn add_ground_term_pattern_types(
  147|   176M|    pattern: &GroundTermPattern,
  148|   176M|    types: &mut VariableTypes,
  149|   176M|    is_object: bool,
  150|   176M|) {
  151|   176M|    if let GroundTermPattern::Variable(v) = pattern {
  152|   162M|        types.intersect_variable_with(
  153|   162M|            v.clone(),
  154|   162M|            if is_object {
  155|  75.1M|                VariableType::TERM
  156|       |            } else {
  157|  87.7M|                VariableType::SUBJECT
  158|       |            },
  159|       |        )
  160|  13.8M|    }
  161|       |    #[cfg(feature = "rdf-star")]
  162|   176M|    if let GroundTermPattern::Triple(t) = pattern {
  163|      0|        add_ground_term_pattern_types(&t.subject, types, false);
  164|      0|        if let NamedNodePattern::Variable(v) = &t.predicate {
  165|      0|            types.intersect_variable_with(v.clone(), VariableType::NAMED_NODE)
  166|      0|        }
  167|      0|        add_ground_term_pattern_types(&t.object, types, true);
  168|   176M|    }
  169|   176M|}
_RNvMNtCsj4YExd6TrWR_7sparopt14type_inferenceNtB2_13VariableTypes10union_with:
  318|     15|    pub fn union_with(&mut self, other: Self) {
  319|     99|        for (v, t) in &mut self.inner {
  320|     84|            if other.get(v).undef {
  321|     84|                t.undef = true; // Might be undefined
  322|     84|            }
  323|       |        }
  324|     15|        for (v, mut t) in other.inner {
  325|      0|            self.inner
  326|      0|                .entry(v)
  327|      0|                .and_modify(|ex| *ex = *ex | t)
  328|      0|                .or_insert({
  329|      0|                    t.undef = true;
  330|      0|                    t
  331|      0|                });
  332|      0|        }
  333|     15|    }
_RNvXs2_NtCsj4YExd6TrWR_7sparopt14type_inferenceNtB5_13VariableTypesNtNtCs9nhK3FOW46N_4core7default7Default7defaultB7_:
  295|  6.26k|#[derive(Default, Clone, Debug)]
_RNCNvNtCsj4YExd6TrWR_7sparopt14type_inference25infer_graph_pattern_types0B5_:
   63|     30|            .map(|inner| infer_graph_pattern_types(inner, types.clone()))
_RNCNvNtCsj4YExd6TrWR_7sparopt14type_inference25infer_graph_pattern_typess0_0B5_:
   86|    837|                .filter(|(v, _)| variables.contains(v))
_RNCNvNtCsj4YExd6TrWR_7sparopt14type_inference25infer_graph_pattern_typess_0B5_:
   64|     15|            .reduce(|mut a, b| {
   65|     15|                a.union_with(b);
   66|     15|                a
   67|     15|            })
_RNCNvNtCsj4YExd6TrWR_7sparopt14type_inference25infer_graph_pattern_typess1_0B5_:
  103|      5|                    .filter(|(v, _)| variables.contains(v))

_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsa_1__NtB4_12HavingClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  262|    134|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1r_1__NtB4_10ExistsFuncNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1928|    990|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsO_1__NtB4_14ExpressionListNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1118|  16.0k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsm_1__NtB4_11DeleteWhereNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  600|  1.03k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsA_1__NtB4_20OptionalGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  862|    567|#[derive(Arbitrary)]
_RNvXsL_Cs6Lc7YXa2Vl_12sparql_smithNtB5_6FilterNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1058|      1|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1059|      1|        write!(f, "FILTER {}", self.constraint)
 1060|      1|    }
_RNvXsl_Cs6Lc7YXa2Vl_12sparql_smithNtB5_10DeleteDataNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  595|     56|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  596|     56|        write!(f, "DELETE DATA {}", self.data)
  597|     56|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsb_1__NtB4_12ValuesClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  378|  2.03k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsX_1__NtB4_23PropertyListPathElementNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1263|    846|#[derive(Arbitrary)]
_RNvXs1i_Cs6Lc7YXa2Vl_12sparql_smithNtB6_23ConditionalOrExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1676|  1.11k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1677|  1.11k|        write!(f, "{}", self.start)?;
 1678|  1.14k|        for e in &self.others {
 1679|     28|            write!(f, " || {e}")?;
 1680|       |        }
 1681|  1.11k|        Ok(())
 1682|  1.11k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths10_1__NtB4_12PathSequenceNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1336|  60.7k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsw_1__NtB4_20GroupGraphPatternSubNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  780|  7.59k|#[derive(Arbitrary)]
_RNvXs1t_Cs6Lc7YXa2Vl_12sparql_smithNtB6_13IriOrFunctionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1960|    315|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1961|    315|        write!(f, "{}", self.iri)?;
 1962|       |        // if let Some(args) = &self.args {
 1963|       |        // write!(f, "{args}")?;
 1964|       |        // }
 1965|    315|        Ok(())
 1966|    315|    }
_RNvXsT_Cs6Lc7YXa2Vl_12sparql_smithNtB5_22TriplesSameSubjectPathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1215|  1.24k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1216|  1.24k|        match self {
 1217|       |            Self::Atomic {
 1218|    756|                subject,
 1219|    756|                predicate_object,
 1220|    756|            } => {
 1221|    756|                write!(f, "{subject}{predicate_object}")
 1222|       |            }
 1223|       |            Self::Other {
 1224|    491|                subject,
 1225|    491|                predicate_object,
 1226|    491|            } => {
 1227|    491|                write!(f, "{subject} {predicate_object}")
 1228|       |            }
 1229|       |        }
 1230|  1.24k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__NtB4_9VarOrTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1591|  16.9k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__NtB4_24ConditionalAndExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1685|  35.8k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths4_1__NtB4_12SelectValuesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  133|  7.66k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths12_1__NtB4_16PathEltOrInverseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1370|  84.5k|#[derive(Arbitrary)]
_RNvXs1u_Cs6Lc7YXa2Vl_12sparql_smithNtB6_7LiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1980|  8.15k|    fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {
 1981|  8.15k|        Ok(Self {
 1982|  8.15k|            value: u.choose(LITERALS.as_slice())?,
 1983|       |        })
 1984|  8.15k|    }
_RNvXse_Cs6Lc7YXa2Vl_12sparql_smithNtB5_5ClearNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  479|  1.12k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  480|  1.12k|        write!(f, "CLEAR ")?;
  481|  1.12k|        if self.silent {
  482|    858|            write!(f, "SILENT ")?;
  483|    262|        }
  484|  1.12k|        write!(f, "{}", self.target)
  485|  1.12k|    }
_RNvXs1f_Cs6Lc7YXa2Vl_12sparql_smithNtB6_3VarNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1629|  59.5k|    fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {
 1630|  59.5k|        Ok(Self {
 1631|  59.5k|            value: u.int_in_range(1..=NUMBER_OF_VARIABLES)?,
 1632|       |        })
 1633|  59.5k|    }
_RNvXsA_Cs6Lc7YXa2Vl_12sparql_smithNtB5_19LateralGraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  881|    247|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  882|    247|        write!(f, " LATERAL {}", self.inner)
  883|    247|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsk_1__NtB4_10InsertDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  576|    447|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths16_1__NtB4_20PathOneInPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1449|  19.4k|#[derive(Arbitrary)]
_RNvXsJ_Cs6Lc7YXa2Vl_12sparql_smithNtB5_17MinusGraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1029|     15|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1030|     15|        write!(f, " MINUS {}", self.inner)
 1031|     15|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithss_1__NtB4_17VarOrIriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  694|  42.0k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsq_1__NtB4_11GraphRefAllNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  666|  4.26k|#[derive(Arbitrary)]
_RNvXs3_Cs6Lc7YXa2Vl_12sparql_smithNtB5_12SelectClauseNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  149|  1.14k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  150|  1.14k|        f.write_str("SELECT")?;
  151|  1.14k|        if let Some(option) = &self.option {
  152|    763|            match option {
  153|    217|                SelectOption::Distinct => f.write_str(" DISTINCT"),
  154|    546|                SelectOption::Reduced => f.write_str(" REDUCED"),
  155|      0|            }?;
  156|    386|        }
  157|  1.14k|        match &self.values {
  158|    574|            SelectValues::Star => f.write_str(" *"),
  159|    575|            SelectValues::Projection { start, others } => {
  160|    725|                for e in once(start).chain(others) {
  161|    725|                    match e {
  162|    285|                        SelectProjection::Variable(v) => write!(f, " {v}"),
  163|    440|                        SelectProjection::Projection(e, v) => write!(f, " ({e} AS {v})"),
  164|      0|                    }?;
  165|       |                }
  166|    575|                Ok(())
  167|       |            }
  168|       |        }
  169|  1.14k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithso_1__NtB4_14GraphOrDefaultNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  636|  5.68k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsT_1__NtB4_22TriplesSameSubjectPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1201|  4.17k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithst_1__NtB4_8QuadDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  725|    627|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsz_1__NtB4_22GraphPatternNotTriplesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  832|  2.42k|#[derive(Arbitrary)]
_RNvXsy_Cs6Lc7YXa2Vl_12sparql_smithNtB5_22GraphPatternNotTriplesNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  847|    685|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  848|    685|        match self {
  849|     87|            Self::GroupOrUnion(p) => write!(f, "{p}"),
  850|    168|            Self::Optional(p) => write!(f, "{p}"),
  851|     15|            Self::Minus(p) => write!(f, "{p}"),
  852|     54|            Self::Graph(p) => write!(f, "{p}"),
  853|      1|            Self::Filter(p) => write!(f, "{p}"),
  854|      2|            Self::Bind(p) => write!(f, "{p}"),
  855|    111|            Self::InlineData(p) => write!(f, "{p}"),
  856|       |            #[cfg(feature = "sep-0006")]
  857|    247|            Self::Lateral(p) => write!(f, "{p}"),
  858|       |        }
  859|    685|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsr_1__NtB4_11QuadPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  686|  15.9k|#[derive(Arbitrary)]
_RNvXsH_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14InlineDataFullNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  987|    127|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  988|    127|        f.write_str("( ")?;
  989|  2.72k|        for v in &self.vars {
  990|  2.59k|            write!(f, " {v}")?;
  991|       |        }
  992|    127|        f.write_str(" ) {")?;
  993|    312|        for vs in &self.values {
  994|    185|            f.write_str(" (")?;
  995|  3.84k|            for v in vs {
  996|  3.65k|                write!(f, " {v}")?;
  997|       |            }
  998|    185|            f.write_str(" )")?;
  999|       |        }
 1000|    127|        f.write_str(" }")
 1001|    127|    }
_RNvXs8_Cs6Lc7YXa2Vl_12sparql_smithNtB5_12HavingClauseNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  270|     14|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  271|     14|        write!(f, "HAVING {}", self.start)?;
  272|     14|        for o in &self.others {
  273|      0|            write!(f, " {o}")?;
  274|       |        }
  275|     14|        Ok(())
  276|     14|    }
_RNvXs14_Cs6Lc7YXa2Vl_12sparql_smithNtB6_20PathOneInPropertySetNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1459|  5.74k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1460|  5.74k|        match self {
 1461|  1.04k|            Self::Iri(iri) => write!(f, "{iri}"),
 1462|    309|            Self::A => f.write_str(" a "),
 1463|  1.95k|            Self::NegatedIri(iri) => write!(f, "^{iri}"),
 1464|  2.43k|            Self::NegatedA => f.write_str(" ^a "),
 1465|       |        }
 1466|  5.74k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsp_1__NtB4_8GraphRefNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  654|  3.46k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths11_1__NtB4_7PathEltNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1353|  84.2k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsC_1__NtB4_17GraphGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  886|    186|#[derive(Arbitrary)]
_RNvXsX_Cs6Lc7YXa2Vl_12sparql_smithNtB5_15PathAlternativeNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1327|  17.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1328|  17.7k|        write!(f, "{}", self.start)?;
 1329|  18.8k|        for other in &self.others {
 1330|  1.15k|            write!(f, " | {other}")?;
 1331|       |        }
 1332|  17.7k|        Ok(())
 1333|  17.7k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsf_1__NtB4_4DropNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  488|    611|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths9_1__NtB4_14GroupConditionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  236|    891|#[derive(Arbitrary)]
_RNvXsk_Cs6Lc7YXa2Vl_12sparql_smithNtB5_10InsertDataNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  583|    150|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  584|    150|        write!(f, "INSERT DATA {}", self.data)
  585|    150|    }
_RNvXsw_Cs6Lc7YXa2Vl_12sparql_smithNtB5_20GroupGraphPatternSubNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  795|  2.44k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  796|  2.44k|        if let Some(start) = &self.start {
  797|  1.04k|            write!(f, "{start}")?;
  798|  1.40k|        }
  799|  3.13k|        for other in &self.others {
  800|    685|            write!(f, "{}", other.start)?;
  801|    685|            if other.with_dot {
  802|    149|                f.write_str(" . ")?;
  803|    536|            }
  804|    685|            if let Some(end) = &other.end {
  805|    170|                write!(f, "{end}")?;
  806|    515|            }
  807|       |        }
  808|  2.44k|        Ok(())
  809|  2.44k|    }
_RNvXs1s_Cs6Lc7YXa2Vl_12sparql_smithNtB6_13NotExistsFuncNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1947|     24|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1948|     24|        write!(f, "NOT EXISTS {}", self.pattern)
 1949|     24|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths3_1__NtB4_12SelectOptionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  127|  5.42k|#[derive(Arbitrary)]
_RNvXs12_Cs6Lc7YXa2Vl_12sparql_smithNtB6_11PathPrimaryNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1414|  25.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1415|  25.5k|        match self {
 1416|  6.60k|            Self::Iri(iri) => write!(f, "{iri}"),
 1417|  1.59k|            Self::A => f.write_str(" a "),
 1418|  1.12k|            Self::Negated(n) => write!(f, "!{n}"),
 1419|  16.2k|            Self::Child(c) => write!(f, "({c})"),
 1420|       |        }
 1421|  25.5k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsW_1__NtB4_28PropertyListPathNotEmptyVerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1257|  26.3k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths19_1__NtB4_15TriplesNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1497|  26.3k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__NtB4_13IriOrFunctionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1952|  7.87k|#[derive(Arbitrary)]
_RNvXsI_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14DataBlockValueNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1013|  3.76k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1014|  3.76k|        match self {
 1015|  2.55k|            Self::Iri(i) => write!(f, "{i}"),
 1016|    275|            Self::Literal(l) => write!(f, "{l}"),
 1017|    933|            Self::Undef => f.write_str("UNDEF"),
 1018|       |        }
 1019|  3.76k|    }
_RNvXsi_Cs6Lc7YXa2Vl_12sparql_smithNtB5_4MoveNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  549|    485|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  550|    485|        write!(f, "MOVE ")?;
  551|    485|        if self.silent {
  552|    442|            write!(f, "SILENT ")?;
  553|     43|        }
  554|    485|        write!(f, "{} TO {}", self.from, self.to)
  555|    485|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__NtB4_8VarOrIriNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1607|  89.4k|#[derive(Arbitrary)]
_RNvXs1q_Cs6Lc7YXa2Vl_12sparql_smithNtB6_11BuiltInCallNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1905|    479|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1906|    479|        match self {
 1907|      8|            Self::Str(v) => write!(f, "STR({v})"),
 1908|      4|            Self::Lang(v) => write!(f, "LANG({v})"),
 1909|      0|            Self::Datatype(v) => write!(f, "DATATYPE({v})"),
 1910|    322|            Self::Bound(v) => write!(f, "BOUND({v})"),
 1911|      1|            Self::Iri(v) => write!(f, "IRI({v})"),
 1912|     10|            Self::Bnode(v) => write!(f, "BNODE({v})"),
 1913|     59|            Self::Coalesce(vs) => write!(f, "COALESCE{vs}"),
 1914|      0|            Self::If(a, b, c) => write!(f, "IF({a}, {b}, {c})"),
 1915|      0|            Self::StrLang(a, b) => write!(f, "STRLANG({a}, {b})"),
 1916|      1|            Self::StrDt(a, b) => write!(f, "STRDT({a}, {b})"),
 1917|      0|            Self::SameTerm(a, b) => write!(f, "sameTerm({a}, {b})"),
 1918|      3|            Self::IsIri(e) => write!(f, "isIRI({e})"),
 1919|      7|            Self::IsBlank(e) => write!(f, "isBlank({e})"),
 1920|      0|            Self::IsLiteral(e) => write!(f, "isLiteral({e})"),
 1921|      2|            Self::IsNumeric(e) => write!(f, "isNumeric({e})"),
 1922|     38|            Self::Exists(e) => write!(f, "{e}"),
 1923|     24|            Self::NotExists(e) => write!(f, "{e}"),
 1924|       |        }
 1925|    479|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__NtB4_25BlankNodePropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1513|  22.9k|#[derive(Arbitrary)]
_RNvXsb_Cs6Lc7YXa2Vl_12sparql_smithNtB5_6UpdateNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  424|  2.28k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  425|  6.98k|        for variant in &self.inner.variants {
  426|  4.69k|            write!(f, "{variant} ; ")?;
  427|       |        }
  428|  2.28k|        Ok(())
  429|  2.28k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__NtB4_18AdditiveExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1738|  46.9k|#[derive(Arbitrary)]
_RNvXsx_Cs6Lc7YXa2Vl_12sparql_smithNtB5_12TriplesBlockNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  820|  1.24k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  821|  1.24k|        write!(f, "{}", self.start)?;
  822|  1.24k|        if let Some(end) = &self.end {
  823|     50|            f.write_str(" . ")?;
  824|     50|            if let Some(end) = end {
  825|     33|                write!(f, "{end}")?;
  826|     17|            }
  827|  1.19k|        }
  828|  1.24k|        Ok(())
  829|  1.24k|    }
_RNvXs1h_Cs6Lc7YXa2Vl_12sparql_smithNtB6_9GraphTermNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1656|  1.02k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1657|  1.02k|        match self {
 1658|    186|            Self::Iri(iri) => write!(f, "{iri}"),
 1659|     78|            Self::Literal(l) => write!(f, "{l}"),
 1660|    761|            Self::Nil => f.write_str(" () "),
 1661|       |        }
 1662|  1.02k|    }
_RNvXs7_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14GroupConditionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  246|    163|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  247|    163|        match self {
  248|     26|            Self::BuiltInCall(c) => write!(f, "{c}"),
  249|       |            // Self::FunctionCall(c) => write!(f, "{c}"),
  250|      2|            Self::Projection(e, v) => {
  251|      2|                if let Some(v) = v {
  252|      0|                    write!(f, "({e} AS {v})")
  253|       |                } else {
  254|      2|                    write!(f, "({e})")
  255|       |                }
  256|       |            }
  257|    135|            Self::Var(v) => write!(f, "{v}"),
  258|       |        }
  259|    163|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsh_1__NtB4_3AddNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  522|    852|#[derive(Arbitrary)]
_RNvXsg_Cs6Lc7YXa2Vl_12sparql_smithNtB5_6CreateNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  513|    239|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  514|    239|        write!(f, "CREATE ")?;
  515|    239|        if self.silent {
  516|    233|            write!(f, "SILENT ")?;
  517|      6|        }
  518|    239|        write!(f, "{}", self.target)
  519|    239|    }
_RNvXs1o_Cs6Lc7YXa2Vl_12sparql_smithNtB6_17PrimaryExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1805|  5.19k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1806|  5.19k|        match self {
 1807|    284|            Self::Bracketted(e) => write!(f, "{e}"),
 1808|    450|            Self::BuiltInCall(e) => write!(f, "{e}"),
 1809|    315|            Self::IriOrFunction(e) => write!(f, "{e}"),
 1810|  1.48k|            Self::Literal(e) => write!(f, "{e}"),
 1811|  2.65k|            Self::Var(e) => write!(f, "{e}"),
 1812|       |        }
 1813|  5.19k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsu_1__NtB4_12IriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  733|  6.65k|#[derive(Arbitrary)]
_RNvXs1w_Cs6Lc7YXa2Vl_12sparql_smithNtB6_3IriNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 2003|  51.1k|    fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {
 2004|  51.1k|        Ok(Self {
 2005|  51.1k|            value: u.int_in_range(1..=NUMBER_OF_NAMED_NODES)?,
 2006|       |        })
 2007|  51.1k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__NtB4_15UnaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1774|   117k|#[derive(Arbitrary)]
_RNvXs18_Cs6Lc7YXa2Vl_12sparql_smithNtB6_25BlankNodePropertyListPathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1520|  7.28k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1521|  7.28k|        write!(f, "[ {} ]", self.inner)
 1522|  7.28k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__NtB4_24MultiplicativeExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1756|  70.6k|#[derive(Arbitrary)]
_RNvXsv_Cs6Lc7YXa2Vl_12sparql_smithNtB5_17GroupGraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  770|  3.59k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  771|  3.59k|        f.write_str(" { ")?;
  772|  3.59k|        match self {
  773|  2.44k|            Self::GroupGraphPatternSub(p) => write!(f, "{p}"),
  774|  1.14k|            Self::SubSelect(s) => write!(f, "{s}"),
  775|      0|        }?;
  776|  3.59k|        f.write_str(" } ")
  777|  3.59k|    }
_RNvXs5_Cs6Lc7YXa2Vl_12sparql_smithNtB5_16SolutionModifierNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  200|  1.14k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  201|  1.14k|        if let Some(group) = &self.group {
  202|     35|            write!(f, " {group}")?;
  203|  1.11k|        }
  204|  1.14k|        if let Some(having) = &self.having {
  205|     14|            write!(f, " {having}")?;
  206|  1.13k|        }
  207|       |        #[cfg(feature = "order")]
  208|       |        if let Some(order) = &self.order {
  209|       |            write!(f, " {order}")?;
  210|       |        }
  211|       |        #[cfg(feature = "limit-offset")]
  212|       |        if let Some(limit_offset) = &self.limit_offset {
  213|       |            write!(f, " {limit_offset}")?;
  214|       |        }
  215|  1.14k|        Ok(())
  216|  1.14k|    }
_RNvXs1r_Cs6Lc7YXa2Vl_12sparql_smithNtB6_10ExistsFuncNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1935|     38|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1936|     38|        write!(f, "EXISTS {}", self.pattern)
 1937|     38|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths7_1__NtB4_16SolutionModifierNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  188|  2.23k|#[derive(Arbitrary)]
_RNvXs11_Cs6Lc7YXa2Vl_12sparql_smithNtB6_7PathModNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1395|  6.24k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1396|  6.24k|        match self {
 1397|  3.62k|            Self::ZeroOrOne => f.write_str(" ? "),
 1398|    770|            Self::ZeroOrMore => f.write_str(" * "),
 1399|  1.84k|            Self::OneOrMore => f.write_str(" + "),
 1400|       |        }
 1401|  6.24k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsB_1__NtB4_19LateralGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  874|    879|#[derive(Arbitrary)]
_RNvXs1d_Cs6Lc7YXa2Vl_12sparql_smithNtB6_9VarOrTermNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1599|  5.68k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1600|  5.68k|        match self {
 1601|  4.66k|            Self::Var(v) => write!(f, "{v}"),
 1602|  1.02k|            Self::GraphTerm(t) => write!(f, "{t}"),
 1603|       |        }
 1604|  5.68k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsK_1__NtB4_6FilterNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1051|     12|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__NtB4_20RelationalExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1705|  41.4k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsR_1__NtB4_4VerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1164|  42.2k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths13_1__NtB4_7PathModNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1386|  22.5k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__NtB4_11BuiltInCallNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1828|  9.95k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__NtB4_9GraphTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1646|  3.32k|#[derive(Arbitrary)]
_RNvXsh_Cs6Lc7YXa2Vl_12sparql_smithNtB5_3AddNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  531|    239|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  532|    239|        write!(f, "ADD ")?;
  533|    239|        if self.silent {
  534|    203|            write!(f, "SILENT ")?;
  535|     36|        }
  536|    239|        write!(f, "{} TO {}", self.from, self.to)
  537|    239|    }
_RNvXst_Cs6Lc7YXa2Vl_12sparql_smithNtB5_8QuadDataNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  740|    206|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  741|    206|        f.write_str(" { ")?;
  742|  2.43k|        for (s, p, o, g) in &self.quads {
  743|  2.22k|            if let Some(g) = g {
  744|  2.03k|                write!(f, "GRAPH {g} {{ {s} {p} {o} }} ")?;
  745|       |            } else {
  746|    187|                write!(f, "{s} {p} {o} . ")?;
  747|       |            }
  748|       |        }
  749|    206|        f.write_str("}")
  750|    206|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsD_1__NtB4_4BindNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  899|     18|#[derive(Arbitrary)]
_RNvXs1p_Cs6Lc7YXa2Vl_12sparql_smithNtB6_20BrackettedExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1823|    296|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1824|    296|        write!(f, "({})", self.inner)
 1825|    296|    }
_RNvXsZ_Cs6Lc7YXa2Vl_12sparql_smithNtB5_7PathEltNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1361|  25.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1362|  25.5k|        write!(f, "{}", self.path)?;
 1363|  25.5k|        if let Some(mode) = &self.mode {
 1364|  6.24k|            write!(f, "{mode}")?;
 1365|  19.3k|        }
 1366|  25.5k|        Ok(())
 1367|  25.5k|    }
_RNvXsm_Cs6Lc7YXa2Vl_12sparql_smithNtB5_11DeleteWhereNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  607|    331|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  608|    331|        write!(f, "DELETE WHERE {}", self.data)
  609|    331|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsi_1__NtB4_4MoveNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  540|  1.64k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsU_1__NtB4_16PropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1233|    812|#[derive(Arbitrary)]
_RNvXsU_Cs6Lc7YXa2Vl_12sparql_smithNtB5_16PropertyListPathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1240|    491|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1241|    491|        if let Some(p) = &self.inner {
 1242|     18|            write!(f, "{p}")
 1243|       |        } else {
 1244|    473|            Ok(())
 1245|       |        }
 1246|    491|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsE_1__NtB4_10InlineDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  912|    357|#[derive(Arbitrary)]
_RNvXs1g_Cs6Lc7YXa2Vl_12sparql_smithNtB6_3VarNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1641|  33.2k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1642|  33.2k|        write!(f, " ?{} ", self.value)
 1643|  33.2k|    }
_RNvXsR_Cs6Lc7YXa2Vl_12sparql_smithNtB5_4VerbNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1172|  11.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1173|  11.0k|        match self {
 1174|  3.04k|            Self::VarOrIri(iri) => write!(f, "{iri}"),
 1175|  8.05k|            Self::A => f.write_str(" a "),
 1176|       |        }
 1177|  11.0k|    }
_RNvXsf_Cs6Lc7YXa2Vl_12sparql_smithNtB5_4DropNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  496|    164|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  497|    164|        write!(f, "DROP ")?;
  498|    164|        if self.silent {
  499|     91|            write!(f, "SILENT ")?;
  500|     73|        }
  501|    164|        write!(f, "{}", self.target)
  502|    164|    }
_RNvXsr_Cs6Lc7YXa2Vl_12sparql_smithNtB5_11QuadPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  702|  3.93k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  703|  3.93k|        f.write_str(" { ")?;
  704|  15.0k|        for (s, p, o, g) in &self.quads {
  705|  11.0k|            if let Some(g) = g {
  706|  9.54k|                write!(f, "GRAPH {g} {{ {s} {p} {o} }} ")?;
  707|       |            } else {
  708|  1.55k|                write!(f, "{s} {p} {o} . ")?;
  709|       |            }
  710|       |        }
  711|  3.93k|        f.write_str("}")
  712|  3.93k|    }
_RNvXs1e_Cs6Lc7YXa2Vl_12sparql_smithNtB6_8VarOrIriNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1615|  23.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1616|  23.7k|        match self {
 1617|  7.69k|            Self::Var(v) => write!(f, "{v}"),
 1618|  16.0k|            Self::Iri(t) => write!(f, "{t}"),
 1619|       |        }
 1620|  23.7k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsG_1__NtB4_16InlineDataOneVarNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  940|     98|#[derive(Arbitrary)]
_RNvXs1n_Cs6Lc7YXa2Vl_12sparql_smithNtB6_15UnaryExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1784|  5.19k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1785|  5.19k|        match self {
 1786|    682|            Self::Not(e) => write!(f, "!{e}"),
 1787|    195|            Self::Plus(e) => write!(f, "+{e}"),
 1788|  1.51k|            Self::Minus(e) => write!(f, "-{e}"),
 1789|  2.79k|            Self::Base(e) => write!(f, "{e}"),
 1790|       |        }
 1791|  5.19k|    }
_RNvXs1k_Cs6Lc7YXa2Vl_12sparql_smithNtB6_20RelationalExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1720|  1.30k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1721|  1.30k|        match self {
 1722|    238|            Self::Base(e) => write!(f, "{e}"),
 1723|     77|            Self::Equal(a, b) => write!(f, "{a} = {b}"),
 1724|     13|            Self::NotEqual(a, b) => write!(f, "{a} != {b}"),
 1725|     13|            Self::Less(a, b) => write!(f, "{a} < {b}"),
 1726|     22|            Self::LessOrEqual(a, b) => write!(f, "{a} <= {b}"),
 1727|     27|            Self::Greater(a, b) => write!(f, "{a} > {b}"),
 1728|    166|            Self::GreaterOrEqual(a, b) => write!(f, "{a} >= {b}"),
 1729|     55|            Self::In(a, b) => write!(f, "{a} IN {b}"),
 1730|    695|            Self::NotIn(a, b) => write!(f, "{a} NOT IN {b}"),
 1731|       |        }
 1732|  1.30k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__NtB4_24GroupOrUnionGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1034|    329|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithse_1__NtB4_5ClearNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  471|  3.67k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths15_1__NtB4_22PathNegatedPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1424|  3.84k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__NtB4_15PathAlternativeNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1319|  56.7k|#[derive(Arbitrary)]
_RNvXs4_Cs6Lc7YXa2Vl_12sparql_smithNtB5_11WhereClauseNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  180|  1.14k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  181|  1.14k|        if self.with_where {
  182|    361|            f.write_str(" WHERE ")?;
  183|    788|        }
  184|  1.14k|        write!(f, "{}", self.group_graph_pattern)
  185|  1.14k|    }
_RNvXsP_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14ExpressionListNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1125|    809|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1126|    809|        f.write_str("(")?;
 1127|    809|        for (i, e) in self.inner.iter().enumerate() {
 1128|    340|            if i > 0 {
 1129|      3|                f.write_str(", ")?;
 1130|    337|            }
 1131|    340|            write!(f, "{e}")?;
 1132|       |        }
 1133|    809|        f.write_str(")")
 1134|    809|    }
_RNvXsd_Cs6Lc7YXa2Vl_12sparql_smithNtB5_13UpdateVariantNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  455|  4.69k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  456|  4.69k|        match self {
  457|  1.12k|            UpdateVariant::Load(a) => a.fmt(f),
  458|    164|            UpdateVariant::Drop(a) => a.fmt(f),
  459|    239|            UpdateVariant::Add(a) => a.fmt(f),
  460|    485|            UpdateVariant::Move(a) => a.fmt(f),
  461|    104|            UpdateVariant::Copy(a) => a.fmt(f),
  462|    239|            UpdateVariant::Crate(a) => a.fmt(f),
  463|    150|            UpdateVariant::InsertData(a) => a.fmt(f),
  464|     56|            UpdateVariant::DeleteData(a) => a.fmt(f),
  465|    331|            UpdateVariant::DeleteWhere(a) => a.fmt(f),
  466|  1.80k|            UpdateVariant::Modify(a) => a.fmt(f),
  467|       |        }
  468|  4.69k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsn_1__NtB4_6ModifyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  612|  7.57k|#[derive(Arbitrary)]
_RNvXs1c_Cs6Lc7YXa2Vl_12sparql_smithNtB6_13GraphNodePathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1583|  12.7k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1584|  12.7k|        match self {
 1585|  4.93k|            Self::VarOrTerm(t) => write!(f, "{t}"),
 1586|  7.81k|            Self::TriplesNodePath(p) => write!(f, "{p}"),
 1587|       |        }
 1588|  12.7k|    }
_RNvXs1l_Cs6Lc7YXa2Vl_12sparql_smithNtB6_18AdditiveExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1747|  1.62k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1748|  1.62k|        match self {
 1749|    402|            Self::Base(e) => write!(f, "{e}"),
 1750|    147|            Self::Plus(a, b) => write!(f, "{a} + {b}"),
 1751|  1.07k|            Self::Minus(a, b) => write!(f, "{a} - {b}"),
 1752|       |        }
 1753|  1.62k|    }
_RNvXsG_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14InlineDataFullNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  964|    134|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  965|    134|        let vars = u.arbitrary_iter()?.collect::<Result<Vec<_>>>()?;
  966|       |
  967|    134|        let mut values = Vec::new();
  968|    134|        u.arbitrary_loop(Some(0), Some(3), |u| {
  969|       |            let mut row = Vec::with_capacity(vars.len());
  970|       |            u.arbitrary_loop(
  971|       |                Some(vars.len().try_into().unwrap()),
  972|       |                Some(vars.len().try_into().unwrap()),
  973|       |                |u| {
  974|       |                    row.push(u.arbitrary()?);
  975|       |                    Ok(ControlFlow::Continue(()))
  976|       |                },
  977|       |            )?;
  978|       |            values.push(row);
  979|       |            Ok(ControlFlow::Continue(()))
  980|    134|        })?;
  981|       |
  982|    134|        Ok(Self { vars, values })
  983|    134|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths2_1__NtB4_12SelectClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  120|  7.67k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths6_1__NtB4_11WhereClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  172|  4.53k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsl_1__NtB4_10DeleteDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  588|    180|#[derive(Arbitrary)]
_RNvXss_Cs6Lc7YXa2Vl_12sparql_smithNtB5_17VarOrIriOrLiteralNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  716|  11.0k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  717|  11.0k|        match self {
  718|  2.23k|            VarOrIriOrLiteral::Iri(i) => i.fmt(f),
  719|  1.23k|            VarOrIriOrLiteral::Literal(l) => l.fmt(f),
  720|  7.62k|            VarOrIriOrLiteral::Var(v) => v.fmt(f),
  721|       |        }
  722|  11.0k|    }
_RNvXsE_Cs6Lc7YXa2Vl_12sparql_smithNtB5_9DataBlockNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  932|    154|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  933|    154|        match self {
  934|     27|            Self::OneVar(e) => write!(f, "{e}"),
  935|    127|            Self::Full(c) => write!(f, "{c}"),
  936|       |        }
  937|    154|    }
_RNvXs2_Cs6Lc7YXa2Vl_12sparql_smithNtB5_9SubSelectNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  111|  1.14k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  112|  1.14k|        write!(
  113|  1.14k|            f,
  114|  1.14k|            "{}{}{}{}",
  115|  1.14k|            self.select_clause, self.where_clause, self.solution_modifier, self.values_clause
  116|  1.14k|        )
  117|  1.14k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsg_1__NtB4_6CreateNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  505|    804|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__NtB4_13GraphNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1575|  39.3k|#[derive(Arbitrary)]
_RNvXs1x_Cs6Lc7YXa2Vl_12sparql_smithNtB6_3IriNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 2015|  41.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 2016|  41.8k|        write!(f, " <http://example.org/{}> ", self.value)
 2017|  41.8k|    }
_RNvXsY_Cs6Lc7YXa2Vl_12sparql_smithNtB5_12PathSequenceNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1344|  18.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1345|  18.8k|        write!(f, "{}", self.start)?;
 1346|  25.5k|        for other in &self.others {
 1347|  6.66k|            write!(f, " / {other}")?;
 1348|       |        }
 1349|  18.8k|        Ok(())
 1350|  18.8k|    }
_RNvXs1a_Cs6Lc7YXa2Vl_12sparql_smithNtB6_14CollectionPathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1550|  1.01k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1551|  1.01k|        write!(f, "( {}", self.start)?;
 1552|  2.09k|        for e in &self.others {
 1553|  1.07k|            write!(f, " {e}")?;
 1554|       |        }
 1555|  1.01k|        f.write_str(" )")
 1556|  1.01k|    }
_RNvXs1v_Cs6Lc7YXa2Vl_12sparql_smithNtB6_7LiteralNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1992|  4.51k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1993|  4.51k|        write!(f, "{}", self.value)
 1994|  4.51k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsj_1__NtB4_4CopyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  558|    360|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsV_1__NtB4_24PropertyListPathNotEmptyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1249|  25.5k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths14_1__NtB4_11PathPrimaryNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1404|  84.2k|#[derive(Arbitrary)]
_RNvXs13_Cs6Lc7YXa2Vl_12sparql_smithNtB6_22PathNegatedPropertySetNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1435|  1.12k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1436|  1.12k|        match self {
 1437|    222|            Self::Single(p) => write!(f, "{p}"),
 1438|    898|            Self::Multiple { start, others } => {
 1439|    898|                write!(f, " ( {start}")?;
 1440|  5.51k|                for other in others {
 1441|  4.62k|                    write!(f, " | {other}")?;
 1442|       |                }
 1443|    898|                f.write_str(" ) ")
 1444|       |            }
 1445|       |        }
 1446|  1.12k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1s_1__NtB4_13NotExistsFuncNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1940|    597|#[derive(Arbitrary)]
_RNvXsq_Cs6Lc7YXa2Vl_12sparql_smithNtB5_11GraphRefAllNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  676|  1.28k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  677|  1.28k|        match self {
  678|    840|            GraphRefAll::GraphRef(g) => g.fmt(f),
  679|    179|            GraphRefAll::Default => write!(f, "DEFAULT"),
  680|     34|            GraphRefAll::Named => write!(f, "NAMED"),
  681|    231|            GraphRefAll::All => write!(f, "ALL"),
  682|       |        }
  683|  1.28k|    }
_RNvXsC_Cs6Lc7YXa2Vl_12sparql_smithNtB5_4BindNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  907|      2|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  908|      2|        write!(f, " BIND({} AS {})", self.expression, self.var)
  909|      2|    }
_RNvXs1m_Cs6Lc7YXa2Vl_12sparql_smithNtB6_24MultiplicativeExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1765|  2.84k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1766|  2.84k|        match self {
 1767|    498|            Self::Base(e) => write!(f, "{e}"),
 1768|    294|            Self::Mul(a, b) => write!(f, "{a} * {b}"),
 1769|  2.05k|            Self::Div(a, b) => write!(f, "{a} / {b}"),
 1770|       |        }
 1771|  2.84k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsx_1__NtB4_30GroupGraphPatternSubOtherBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  787|  2.42k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsH_1__NtB4_14DataBlockValueNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1004|  8.28k|#[derive(Arbitrary)]
_RNvXsj_Cs6Lc7YXa2Vl_12sparql_smithNtB5_4CopyNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  567|    104|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  568|    104|        write!(f, "MOVE ")?;
  569|    104|        if self.silent {
  570|     80|            write!(f, "SILENT ")?;
  571|     24|        }
  572|    104|        write!(f, "{} TO {}", self.from, self.to)
  573|    104|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsF_1__NtB4_9DataBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  924|    504|#[derive(Arbitrary)]
_RNvXsa_Cs6Lc7YXa2Vl_12sparql_smithNtB5_6UpdateNtCs9EteCURj6Wn_9arbitrary9Arbitrary9size_hint:
  418|  2.99k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  419|  2.99k|        (20, None) // TODO: is it good?
  420|  2.99k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsv_1__NtB4_17GroupGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  762|  15.3k|#[derive(Arbitrary)]
_RNvXsF_Cs6Lc7YXa2Vl_12sparql_smithNtB5_16InlineDataOneVarNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  948|     27|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  949|     27|        write!(f, "{} {{", self.var)?;
  950|    130|        for v in &self.values {
  951|    103|            write!(f, " {v}")?;
  952|       |        }
  953|     27|        write!(f, " }}")
  954|     27|    }
_RNvXso_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14GraphOrDefaultNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  645|  1.65k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  646|  1.65k|        match self {
  647|    730|            GraphOrDefault::Default => write!(f, "DEFAULT"),
  648|    731|            GraphOrDefault::Graph(g) => write!(f, "GRAPH {g}"),
  649|    195|            GraphOrDefault::Iri(g) => g.fmt(f),
  650|       |        }
  651|  1.65k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsI_1__NtB4_17MinusGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1022|     72|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsd_1__NtB4_13UpdateVariantNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  438|  17.2k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsY_1__NtB4_14ObjectListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1296|  24.8k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsy_1__NtB4_12TriplesBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  812|  4.17k|#[derive(Arbitrary)]
_RNvXsD_Cs6Lc7YXa2Vl_12sparql_smithNtB5_10InlineDataNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  919|    111|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  920|    111|        write!(f, "VALUES {}", self.inner)
  921|    111|    }
_RNvXsM_Cs6Lc7YXa2Vl_12sparql_smithNtB5_10ConstraintNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1072|     15|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1073|     15|        match self {
 1074|     12|            Self::BrackettedExpression(e) => write!(f, "{e}"),
 1075|      3|            Self::BuiltInCall(c) => write!(f, "{c}"),
 1076|       |            // Self::FunctionCall(c) => write!(f, "{c}"),
 1077|       |        }
 1078|     15|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsL_1__NtB4_10ConstraintNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1063|    149|#[derive(Arbitrary)]
_RNvXsa_Cs6Lc7YXa2Vl_12sparql_smithNtB5_6UpdateNtCs9EteCURj6Wn_9arbitrary9Arbitrary19arbitrary_take_rest:
  412|  2.99k|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
  413|  2.99k|        Ok(Self {
  414|  2.99k|            inner: UpdateContent::arbitrary_take_rest(u)?,
  415|       |        })
  416|  2.99k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1_1__NtB4_9SubSelectNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  101|  7.67k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths5_1__NtB4_16SelectProjectionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  142|  6.40k|#[derive(Arbitrary)]
_RNvXs1j_Cs6Lc7YXa2Vl_12sparql_smithNtB6_24ConditionalAndExpressionNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1693|  1.14k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1694|  1.14k|        write!(f, "{}", self.start)?;
 1695|  1.30k|        for e in &self.others {
 1696|    161|            write!(f, " && {e}")?;
 1697|       |        }
 1698|  1.14k|        Ok(())
 1699|  1.14k|    }
_RNvXs9_Cs6Lc7YXa2Vl_12sparql_smithNtB5_12ValuesClauseNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  385|  1.14k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  386|  1.14k|        if let Some(value) = &self.value {
  387|     43|            write!(f, " VALUES {value}")
  388|       |        } else {
  389|  1.10k|            Ok(())
  390|       |        }
  391|  1.14k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__NtB4_14CollectionPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1542|  3.23k|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths8_1__NtB4_11GroupClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
  219|    234|#[derive(Arbitrary)]
_RNvXNvCs6Lc7YXa2Vl_12sparql_smithsc_1__NtB4_13UpdateContentNtCs9EteCURj6Wn_9arbitrary9Arbitrary19arbitrary_take_rest:
  398|  8.98k|#[derive(Arbitrary)]
_RNvXs6_Cs6Lc7YXa2Vl_12sparql_smithNtB5_11GroupClauseNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  227|     35|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  228|     35|        write!(f, "GROUP BY {}", self.start)?;
  229|    163|        for o in &self.others {
  230|    128|            write!(f, " {o}")?;
  231|       |        }
  232|     35|        Ok(())
  233|     35|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__NtB4_17PrimaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1794|   117k|#[derive(Arbitrary)]
_RNvXsp_Cs6Lc7YXa2Vl_12sparql_smithNtB5_8GraphRefNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  661|  1.07k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  662|  1.07k|        write!(f, "GRAPH {}", self.iri)
  663|  1.07k|    }
_RNvXsB_Cs6Lc7YXa2Vl_12sparql_smithNtB5_17GraphGraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  894|     54|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  895|     54|        write!(f, " GRAPH {} {}", self.graph, self.inner)
  896|     54|    }
_RNvXsK_Cs6Lc7YXa2Vl_12sparql_smithNtB5_24GroupOrUnionGraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1042|     87|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1043|     87|        write!(f, "{}", self.start)?;
 1044|     97|        for other in &self.others {
 1045|     10|            write!(f, " UNION {other}")?;
 1046|       |        }
 1047|     87|        Ok(())
 1048|     87|    }
_RNvXsW_Cs6Lc7YXa2Vl_12sparql_smithNtB5_14ObjectListPathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1304|  8.31k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1305|  8.31k|        write!(f, "{}", self.start)?;
 1306|  10.6k|        for other in &self.others {
 1307|  2.33k|            write!(f, " , {other}")?;
 1308|       |        }
 1309|  8.31k|        Ok(())
 1310|  8.31k|    }
_RNvXs17_Cs6Lc7YXa2Vl_12sparql_smithNtB6_15TriplesNodePathNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1505|  8.30k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1506|  8.30k|        match self {
 1507|  1.01k|            Self::CollectionPath(p) => write!(f, "{p}"),
 1508|  7.28k|            Self::BlankNodePropertyListPath(p) => write!(f, "{p}"),
 1509|       |        }
 1510|  8.30k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__NtB4_23ConditionalOrExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1668|  35.3k|#[derive(Arbitrary)]
_RNvXsu_Cs6Lc7YXa2Vl_12sparql_smithNtB5_12IriOrLiteralNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  754|  2.22k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  755|  2.22k|        match self {
  756|    790|            IriOrLiteral::Iri(i) => i.fmt(f),
  757|  1.43k|            IriOrLiteral::Literal(l) => l.fmt(f),
  758|       |        }
  759|  2.22k|    }
_RNvXNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__NtB4_20BrackettedExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary:
 1816|  17.2k|#[derive(Arbitrary)]
_RNvXs10_Cs6Lc7YXa2Vl_12sparql_smithNtB6_16PathEltOrInverseNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1378|  25.5k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1379|  25.5k|        match self {
 1380|  7.78k|            Self::PathElt(e) => write!(f, "{e}"),
 1381|  17.7k|            Self::Inverse(e) => write!(f, " ^{e}"),
 1382|       |        }
 1383|  25.5k|    }
_RNvXsn_Cs6Lc7YXa2Vl_12sparql_smithNtB5_6ModifyNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  624|  1.80k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  625|  1.80k|        if let Some(with) = &self.with {
  626|  1.63k|            write!(f, "WITH {with} ")?;
  627|    172|        }
  628|  1.80k|        write!(
  629|  1.80k|            f,
  630|  1.80k|            "DELETE {} INSERT {} WHERE {}",
  631|  1.80k|            self.delete, self.insert, self.where_
  632|  1.80k|        )
  633|  1.80k|    }
_RNvXsz_Cs6Lc7YXa2Vl_12sparql_smithNtB5_20OptionalGraphPatternNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  869|    168|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  870|    168|        write!(f, " OPTIONAL {}", self.inner)
  871|    168|    }
_RNvXsV_Cs6Lc7YXa2Vl_12sparql_smithNtB5_24PropertyListPathNotEmptyNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
 1270|  8.06k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
 1271|  8.06k|        match &self.start_predicate {
 1272|  1.35k|            PropertyListPathNotEmptyVerb::VerbPath(p) => write!(f, "{p}"),
 1273|  6.70k|            PropertyListPathNotEmptyVerb::VerbSimple(s) => write!(f, "{s}"),
 1274|      0|        }?;
 1275|  8.06k|        write!(f, "{}", self.start_object)?;
 1276|  8.44k|        for other in &self.others {
 1277|    383|            f.write_str(" ; ")?;
 1278|    383|            if let Some(e) = other {
 1279|    256|                match &e.predicate {
 1280|    146|                    PropertyListPathNotEmptyVerb::VerbPath(p) => write!(f, "{p}"),
 1281|    110|                    PropertyListPathNotEmptyVerb::VerbSimple(s) => write!(f, "{s}"),
 1282|      0|                }?;
 1283|    256|                write!(f, "{}", e.object)?;
 1284|    127|            }
 1285|       |        }
 1286|  8.06k|        Ok(())
 1287|  8.06k|    }
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1_1__NtB6_9SubSelectNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  101|  2.56k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsy_1__NtB6_12TriplesBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  812|  1.39k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsr_1__NtB6_11QuadPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  686|    133|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithst_1__NtB6_8QuadDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  725|    211|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsX_1__NtB6_23PropertyListPathElementNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1263|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsu_1__NtB6_12IriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  733|     29|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__36RECURSIVE_COUNT_RelationalExpression7___getit0B7_:
 1705|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsR_1__NtB6_4VerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1164|  14.1k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1r_1__NtB6_10ExistsFuncNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1928|    330|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths4_1__NtB6_12SelectValuesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  133|     17|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths12_1__NtB6_16PathEltOrInverseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1370|    110|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsV_1__NtB6_24PropertyListPathNotEmptyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1249|     30|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsB_1__NtB6_19LateralGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  874|    293|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__NtB6_14CollectionPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1542|     50|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__NtB6_24ConditionalAndExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1685|    707|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__NtB6_20RelationalExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1705|    711|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__25RECURSIVE_COUNT_GraphTerm7___getit0B7_:
 1646|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithss_1__NtB6_17VarOrIriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  694|    175|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsW_1__44RECURSIVE_COUNT_PropertyListPathNotEmptyVerb7___getit0B7_:
 1257|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsY_1__NtB6_14ObjectListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1296|    809|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsY_1__30RECURSIVE_COUNT_ObjectListPath7___getit0B7_:
 1296|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths15_1__NtB6_22PathNegatedPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1424|  1.28k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsv_1__NtB6_17GroupGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  762|    409|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths14_1__NtB6_11PathPrimaryNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1404|    275|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsb_1__NtB6_12ValuesClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  378|    912|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths16_1__NtB6_20PathOneInPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1449|     33|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsq_1__NtB6_11GraphRefAllNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  666|     38|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__NtB6_24MultiplicativeExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1756|    707|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__40RECURSIVE_COUNT_MultiplicativeExpression7___getit0B7_:
 1756|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths5_1__32RECURSIVE_COUNT_SelectProjection7___getit0B7_:
  142|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__NtB6_9VarOrTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1591|    989|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsm_1__NtB6_11DeleteWhereNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  600|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithso_1__NtB6_14GraphOrDefaultNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  636|     14|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths19_1__31RECURSIVE_COUNT_TriplesNodePath7___getit0B7_:
 1497|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsW_1__NtB6_28PropertyListPathNotEmptyVerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1257|  8.82k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths14_1__NtB6_11PathPrimaryNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1404|  28.2k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__NtB6_24ConditionalAndExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1685|    707|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__NtB6_24MultiplicativeExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1756|    833|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsX_1__NtB6_23PropertyListPathElementNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1263|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsc_1__NtB6_13UpdateContentNtCs9EteCURj6Wn_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
  398|  2.99k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsp_1__24RECURSIVE_COUNT_GraphRef7___getit0B7_:
  654|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths19_1__NtB6_15TriplesNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1497|  8.77k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsp_1__NtB6_8GraphRefNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  654|  1.19k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths7_1__NtB6_16SolutionModifierNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  188|    901|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsl_1__NtB6_10DeleteDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  588|     60|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths2_1__NtB6_12SelectClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  120|      8|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths13_1__23RECURSIVE_COUNT_PathMod7___getit0B7_:
 1386|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths15_1__38RECURSIVE_COUNT_PathNegatedPropertySet7___getit0B7_:
 1424|      1|#[derive(Arbitrary)]
_RNCNCNvXsG_Cs6Lc7YXa2Vl_12sparql_smithNtB9_14InlineDataFullNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary00B9_:
  973|  3.75k|                |u| {
  974|  3.75k|                    row.push(u.arbitrary()?);
  975|  3.75k|                    Ok(ControlFlow::Continue(()))
  976|  3.75k|                },
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsG_1__NtB6_16InlineDataOneVarNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  940|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsL_1__NtB6_10ConstraintNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1063|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsa_1__28RECURSIVE_COUNT_HavingClause7___getit0B7_:
  262|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__29RECURSIVE_COUNT_GraphNodePath7___getit0B7_:
 1575|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__NtB6_11BuiltInCallNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1828|  3.31k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths16_1__NtB6_20PathOneInPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1449|     33|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__NtB6_11BuiltInCallNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1828|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsW_1__NtB6_28PropertyListPathNotEmptyVerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1257|     33|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsO_1__NtB6_14ExpressionListNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1118|  5.37k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1s_1__NtB6_13NotExistsFuncNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1940|    199|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithss_1__NtB6_17VarOrIriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  694|    175|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithst_1__NtB6_8QuadDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  725|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsm_1__NtB6_11DeleteWhereNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  600|    344|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsm_1__NtB6_11DeleteWhereNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  600|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1_1__NtB6_9SubSelectNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  101|      8|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1_1__25RECURSIVE_COUNT_SubSelect7___getit0B7_:
  101|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths5_1__NtB6_16SelectProjectionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  142|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__39RECURSIVE_COUNT_ConditionalOrExpression7___getit0B7_:
 1668|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__NtB6_13IriOrFunctionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1952|  2.62k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsy_1__28RECURSIVE_COUNT_TriplesBlock7___getit0B7_:
  812|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths15_1__NtB6_22PathNegatedPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1424|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsx_1__NtB6_30GroupGraphPatternSubOtherBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  787|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__41RECURSIVE_COUNT_BlankNodePropertyListPath7___getit0B7_:
 1513|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsa_1__NtB6_12HavingClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  262|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsi_1__NtB6_4MoveNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  540|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths6_1__27RECURSIVE_COUNT_WhereClause7___getit0B7_:
  172|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsU_1__NtB6_16PropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1233|    410|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__30RECURSIVE_COUNT_CollectionPath7___getit0B7_:
 1542|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsO_1__30RECURSIVE_COUNT_ExpressionList7___getit0B7_:
 1118|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsX_1__NtB6_23PropertyListPathElementNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1263|    284|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__NtB6_14CollectionPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1542|  1.11k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__NtB6_23ConditionalOrExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1668|  12.2k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsh_1__NtB6_3AddNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  522|    284|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths7_1__NtB6_16SolutionModifierNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  188|    901|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsY_1__NtB6_14ObjectListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1296|  8.82k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__NtB6_20RelationalExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1705|  14.2k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithss_1__33RECURSIVE_COUNT_VarOrIriOrLiteral7___getit0B7_:
  694|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths11_1__NtB6_7PathEltNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1353|  28.2k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__NtB6_24GroupOrUnionGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1034|      5|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths6_1__NtB6_11WhereClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  172|    184|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsz_1__NtB6_22GraphPatternNotTriplesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  832|    810|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__NtB6_24GroupOrUnionGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1034|    113|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithso_1__30RECURSIVE_COUNT_GraphOrDefault7___getit0B7_:
  636|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithst_1__NtB6_8QuadDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  725|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__NtB6_17PrimaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1794|    707|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsT_1__38RECURSIVE_COUNT_TriplesSameSubjectPath7___getit0B7_:
 1201|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsA_1__NtB6_20OptionalGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  862|    189|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsz_1__NtB6_22GraphPatternNotTriplesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  832|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsO_1__NtB6_14ExpressionListNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1118|     51|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths5_1__NtB6_16SelectProjectionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  142|  2.13k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths2_1__28RECURSIVE_COUNT_SelectClause7___getit0B7_:
  120|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths11_1__NtB6_7PathEltNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1353|    275|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsj_1__NtB6_4CopyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  558|    120|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__NtB6_9VarOrTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1591|  6.32k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__NtB6_25BlankNodePropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1513|      8|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths6_1__NtB6_11WhereClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  172|    184|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsg_1__NtB6_6CreateNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  505|    268|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsH_1__NtB6_14DataBlockValueNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1004|  1.73k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths16_1__36RECURSIVE_COUNT_PathOneInPropertySet7___getit0B7_:
 1449|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__NtB6_15UnaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1774|    879|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths9_1__NtB6_14GroupConditionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  236|    297|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsf_1__20RECURSIVE_COUNT_Drop7___getit0B7_:
  488|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsR_1__20RECURSIVE_COUNT_Verb7___getit0B7_:
 1164|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsT_1__NtB6_22TriplesSameSubjectPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1201|      4|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsm_1__27RECURSIVE_COUNT_DeleteWhere7___getit0B7_:
  600|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsw_1__NtB6_20GroupGraphPatternSubNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  780|    434|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsa_1__NtB6_12HavingClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  262|     46|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsD_1__NtB6_4BindNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  899|      6|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths7_1__32RECURSIVE_COUNT_SolutionModifier7___getit0B7_:
  188|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsv_1__NtB6_17GroupGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  762|  5.38k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__NtB6_8VarOrIriNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1607|  29.9k|#[derive(Arbitrary)]
_RNCNvXsG_Cs6Lc7YXa2Vl_12sparql_smithNtB7_14InlineDataFullNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B7_:
  968|    194|        u.arbitrary_loop(Some(0), Some(3), |u| {
  969|    194|            let mut row = Vec::with_capacity(vars.len());
  970|    194|            u.arbitrary_loop(
  971|    194|                Some(vars.len().try_into().unwrap()),
  972|    194|                Some(vars.len().try_into().unwrap()),
  973|    194|                |u| {
  974|       |                    row.push(u.arbitrary()?);
  975|       |                    Ok(ControlFlow::Continue(()))
  976|    194|                },
  977|    194|            )?;
  978|    194|            values.push(row);
  979|    194|            Ok(ControlFlow::Continue(()))
  980|    194|        })?;
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__NtB6_9GraphTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1646|      3|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsU_1__32RECURSIVE_COUNT_PropertyListPath7___getit0B7_:
 1233|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsr_1__27RECURSIVE_COUNT_QuadPattern7___getit0B7_:
  686|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithse_1__NtB6_5ClearNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  471|  1.24k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsk_1__26RECURSIVE_COUNT_InsertData7___getit0B7_:
  576|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__NtB6_17PrimaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1794|  39.5k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsu_1__NtB6_12IriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  733|     29|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsf_1__NtB6_4DropNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  488|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsx_1__NtB6_30GroupGraphPatternSubOtherBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  787|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths13_1__NtB6_7PathModNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1386|     20|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsd_1__29RECURSIVE_COUNT_UpdateVariant7___getit0B7_:
  438|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsF_1__NtB6_9DataBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  924|    168|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths4_1__NtB6_12SelectValuesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  133|     17|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths12_1__NtB6_16PathEltOrInverseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1370|    110|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsH_1__NtB6_14DataBlockValueNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1004|  1.73k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsC_1__NtB6_17GraphGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  886|     62|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsf_1__NtB6_4DropNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  488|    205|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsU_1__NtB6_16PropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1233|    410|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__33RECURSIVE_COUNT_PrimaryExpression7___getit0B7_:
 1794|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsw_1__NtB6_20GroupGraphPatternSubNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  780|  2.82k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__NtB6_23ConditionalOrExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1668|    707|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsn_1__NtB6_6ModifyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  612|      4|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsn_1__22RECURSIVE_COUNT_Modify7___getit0B7_:
  612|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsv_1__NtB6_17GroupGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  762|    409|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths14_1__NtB6_11PathPrimaryNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1404|    275|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1k_1__NtB6_20RelationalExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1705|    707|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsq_1__NtB6_11GraphRefAllNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  666|     38|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsy_1__NtB6_12TriplesBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  812|      4|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsz_1__NtB6_22GraphPatternNotTriplesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  832|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths3_1__NtB6_12SelectOptionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  127|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsR_1__NtB6_4VerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1164|     84|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__24RECURSIVE_COUNT_VarOrIri7___getit0B7_:
 1607|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths8_1__NtB6_11GroupClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  219|     78|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths11_1__NtB6_7PathEltNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1353|    275|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths13_1__NtB6_7PathModNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1386|     20|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__NtB6_24GroupOrUnionGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1034|      5|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsJ_1__40RECURSIVE_COUNT_GroupOrUnionGraphPattern7___getit0B7_:
 1034|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__NtB6_9GraphTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1646|      3|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsX_1__39RECURSIVE_COUNT_PropertyListPathElement7___getit0B7_:
 1263|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__31RECURSIVE_COUNT_UnaryExpression7___getit0B7_:
 1774|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__NtB6_13IriOrFunctionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1952|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths3_1__NtB6_12SelectOptionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  127|  1.80k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsn_1__NtB6_6ModifyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  612|      4|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths2_1__NtB6_12SelectClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  120|  2.56k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths5_1__NtB6_16SelectProjectionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  142|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1i_1__NtB6_23ConditionalOrExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1668|    712|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithse_1__21RECURSIVE_COUNT_Clear7___getit0B7_:
  471|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsy_1__NtB6_12TriplesBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  812|      4|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__40RECURSIVE_COUNT_ConditionalAndExpression7___getit0B7_:
 1685|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsV_1__40RECURSIVE_COUNT_PropertyListPathNotEmpty7___getit0B7_:
 1249|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsi_1__NtB6_4MoveNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  540|    548|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsn_1__NtB6_6ModifyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  612|  2.52k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__NtB6_15UnaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1774|    707|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsI_1__NtB6_17MinusGraphPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1022|     24|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths10_1__NtB6_12PathSequenceNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1336|     85|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths10_1__28RECURSIVE_COUNT_PathSequence7___getit0B7_:
 1336|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsL_1__NtB6_10ConstraintNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1063|     51|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsw_1__NtB6_20GroupGraphPatternSubNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  780|    434|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsb_1__28RECURSIVE_COUNT_ValuesClause7___getit0B7_:
  378|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsT_1__NtB6_22TriplesSameSubjectPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1201|  1.39k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths15_1__NtB6_22PathNegatedPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1424|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__NtB6_25BlankNodePropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1513|  7.66k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths6_1__NtB6_11WhereClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  172|  1.63k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithse_1__NtB6_5ClearNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  471|     29|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsV_1__NtB6_24PropertyListPathNotEmptyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1249|  8.53k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths19_1__NtB6_15TriplesNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1497|      5|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1m_1__NtB6_24MultiplicativeExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1756|  23.9k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__NtB6_18AdditiveExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1738|    707|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__NtB6_15PathAlternativeNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1319|     84|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths16_1__NtB6_20PathOneInPropertySetNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1449|  6.51k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsE_1__NtB6_10InlineDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  912|    119|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsp_1__NtB6_8GraphRefNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  654|     52|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsb_1__NtB6_12ValuesClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  378|  1.28k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsb_1__NtB6_12ValuesClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  378|    912|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsq_1__NtB6_11GraphRefAllNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  666|  1.44k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__NtB6_9VarOrTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1591|    989|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths10_1__NtB6_12PathSequenceNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1336|     85|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1f_1__25RECURSIVE_COUNT_VarOrTerm7___getit0B7_:
 1591|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsx_1__46RECURSIVE_COUNT_GroupGraphPatternSubOtherBlock7___getit0B7_:
  787|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__NtB6_20BrackettedExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1816|    835|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsH_1__NtB6_14DataBlockValueNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1004|  3.91k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__NtB6_13GraphNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1575|    868|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths2_1__NtB6_12SelectClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  120|      8|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsO_1__NtB6_14ExpressionListNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1118|     51|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1j_1__NtB6_24ConditionalAndExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1685|  12.4k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithst_1__24RECURSIVE_COUNT_QuadData7___getit0B7_:
  725|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsK_1__NtB6_6FilterNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1051|      4|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsk_1__NtB6_10InsertDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  576|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsT_1__NtB6_22TriplesSameSubjectPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1201|      4|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1n_1__NtB6_15UnaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1774|  39.7k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsu_1__NtB6_12IriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  733|  2.23k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsv_1__33RECURSIVE_COUNT_GroupGraphPattern7___getit0B7_:
  762|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths7_1__NtB6_16SolutionModifierNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  188|  1.34k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths11_1__23RECURSIVE_COUNT_PathElt7___getit0B7_:
 1353|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__NtB6_20BrackettedExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1816|    707|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsG_1__NtB6_16InlineDataOneVarNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  940|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsG_1__32RECURSIVE_COUNT_InlineDataOneVar7___getit0B7_:
  940|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsY_1__NtB6_14ObjectListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1296|    809|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths12_1__NtB6_16PathEltOrInverseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1370|  28.2k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsi_1__20RECURSIVE_COUNT_Move7___getit0B7_:
  540|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__NtB6_11BuiltInCallNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1828|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1q_1__27RECURSIVE_COUNT_BuiltInCall7___getit0B7_:
 1828|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1a_1__NtB6_25BlankNodePropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1513|      8|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsR_1__NtB6_4VerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1164|     84|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithso_1__NtB6_14GraphOrDefaultNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  636|  1.90k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths13_1__NtB6_7PathModNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1386|  7.54k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsz_1__38RECURSIVE_COUNT_GraphPatternNotTriples7___getit0B7_:
  832|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsk_1__NtB6_10InsertDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  576|    151|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths3_1__NtB6_12SelectOptionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  127|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths3_1__28RECURSIVE_COUNT_SelectOption7___getit0B7_:
  127|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__34RECURSIVE_COUNT_AdditiveExpression7___getit0B7_:
 1738|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsk_1__NtB6_10InsertDataNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  576|      3|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsd_1__NtB6_13UpdateVariantNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  438|      7|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsi_1__NtB6_4MoveNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  540|      2|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsL_1__26RECURSIVE_COUNT_Constraint7___getit0B7_:
 1063|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsG_1__NtB6_16InlineDataOneVarNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  940|     34|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__NtB6_8VarOrIriNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1607|    156|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__NtB6_18AdditiveExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1738|  16.0k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__NtB6_20BrackettedExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1816|  6.17k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__NtB6_13IriOrFunctionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1952|      3|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1t_1__29RECURSIVE_COUNT_IriOrFunction7___getit0B7_:
 1952|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsf_1__NtB6_4DropNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  488|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithso_1__NtB6_14GraphOrDefaultNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  636|     14|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__31RECURSIVE_COUNT_PathAlternative7___getit0B7_:
 1319|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsr_1__NtB6_11QuadPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  686|    133|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths19_1__NtB6_15TriplesNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1497|      5|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__NtB6_13GraphNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1575|  13.7k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsd_1__NtB6_13UpdateVariantNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  438|  5.75k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsw_1__36RECURSIVE_COUNT_GroupGraphPatternSub7___getit0B7_:
  780|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsr_1__NtB6_11QuadPatternNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  686|  5.40k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__NtB6_15PathAlternativeNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1319|  18.9k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1o_1__NtB6_17PrimaryExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1794|    837|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsp_1__NtB6_8GraphRefNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  654|     52|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1h_1__NtB6_9GraphTermNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1646|  1.11k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1_1__NtB6_9SubSelectNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  101|      8|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths10_1__NtB6_12PathSequenceNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1336|  20.2k|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsU_1__NtB6_16PropertyListPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
 1233|    544|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithse_1__NtB6_5ClearNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  471|     29|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsH_1__30RECURSIVE_COUNT_DataBlockValue7___getit0B7_:
 1004|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsL_1__NtB6_10ConstraintNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1063|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsW_1__NtB6_28PropertyListPathNotEmptyVerbNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1257|     33|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1l_1__NtB6_18AdditiveExpressionNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1738|    849|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsV_1__NtB6_24PropertyListPathNotEmptyNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
 1249|     30|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1g_1__NtB6_8VarOrIriNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1607|    156|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsZ_1__NtB6_15PathAlternativeNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1319|     84|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsu_1__28RECURSIVE_COUNT_IriOrLiteral7___getit0B7_:
  733|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths14_1__27RECURSIVE_COUNT_PathPrimary7___getit0B7_:
 1404|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1c_1__NtB6_14CollectionPathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1542|     50|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths1e_1__NtB6_13GraphNodePathNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
 1575|    868|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smithsq_1__27RECURSIVE_COUNT_GraphRefAll7___getit0B7_:
  666|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsa_1__NtB6_12HavingClauseNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrary0B6_:
  262|      2|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsd_1__NtB6_13UpdateVariantNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys0_0B6_:
  438|      7|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smiths4_1__NtB6_12SelectValuesNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  133|  2.56k|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths4_1__28RECURSIVE_COUNT_SelectValues7___getit0B7_:
  133|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths12_1__32RECURSIVE_COUNT_PathEltOrInverse7___getit0B7_:
 1370|      1|#[derive(Arbitrary)]
_RNCNvNvNvCs6Lc7YXa2Vl_12sparql_smiths1p_1__36RECURSIVE_COUNT_BrackettedExpression7___getit0B7_:
 1816|      1|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithsx_1__NtB6_30GroupGraphPatternSubOtherBlockNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  787|    810|#[derive(Arbitrary)]
_RNCNvXNvCs6Lc7YXa2Vl_12sparql_smithss_1__NtB6_17VarOrIriOrLiteralNtCs9EteCURj6Wn_9arbitrary9Arbitrary9arbitrarys_0B6_:
  694|  14.1k|#[derive(Arbitrary)]

